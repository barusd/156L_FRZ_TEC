/************************************************************************/
/* Includes                                                             */
/************************************************************************/
#include "app.h"

/************************************************************************/
/* Extern Data                                                          */
/************************************************************************/
extern const uint16_t ps_reg1_boost_pwm_lookup_table[PS_BOOST_PWM_LOOKUP_TABLE_SIZE];
extern const uint16_t ps_reg2_boost_pwm_lookup_table[PS_BOOST_PWM_LOOKUP_TABLE_SIZE];
extern const uint16_t ps_boost_pwm_lookup_table[PS_BOOST_PWM_LOOKUP_TABLE_SIZE];
extern const uint16_t ps_bulk_pwm_lookup_table[PS_BULK_PWM_LOOKUP_TABLE_SIZE];
extern const uint8_t php1_output_duty_lookup_table[OUTPUT_DUTY_LOOKUP_TABLE_SIZE];
extern const uint8_t php2_output_duty_lookup_table[OUTPUT_DUTY_LOOKUP_TABLE_SIZE];
extern const uint8_t door_heater_duty_lookup_table[DOOR_HEATER_DUTY_LOOKUP_TABLE_SIZE];
extern const float setpoint_power_adjust_offset_table[SP_PWR_ADJ_OFFSET_LOOKUP_TABLE_SIZE];
extern const uint16_t fan_sanyo_9ga0912p4g03_rpm_lookup_table[FAN_RPM_LOOKUP_TABLE_SIZE];
extern const uint16_t fan_sanyo_9ga0912p4j03_rpm_lookup_table[FAN_RPM_LOOKUP_TABLE_SIZE];
extern const uint16_t fan_sanyo_9s0912p4f011_rpm_lookup_table[FAN_RPM_LOOKUP_TABLE_SIZE];
extern const uint16_t fan_nidec_v12e12bmm9_rpm_lookup_table[FAN_RPM_LOOKUP_TABLE_SIZE];
extern const uint8_t fan_limit_table[8][17];
extern const char *psNameString[3];

/************************************************************************/
/* Extern Variables                                                     */
/************************************************************************/
//structs
extern struct rtc_calendar_alarm_time time_report;
extern struct rtc_calendar_time time;
extern struct rtc_calendar_time currentTime;
extern struct tc_module tc0_module;
extern struct tc_module tc4_module;
extern struct tc_module tc5_module;
extern struct tc_module tc7_instance;
extern struct _varInfo eepromDataInfo;
extern struct i2c_master_module i2c_master_instance;
extern struct usart_module cdc_uart_module;
extern struct adc_module adc_inst;
extern struct pid_instance pidLoop1;
extern struct pid_instance pidLoop2;
extern struct pid_instance pidFan1;
extern struct pid_instance pidFan2;
extern struct pid_instance pidFan4;
extern struct chamber_vars chamber1;
extern struct chamber_vars chamber2;
extern struct ps_vars ps1;
extern struct ps_vars ps2;
//extern struct php_vars php1;
extern struct fan_vars fan1;
extern struct fan_vars fan2;
extern struct fan_vars fan3;
extern struct fan_vars fan4;
extern struct fan_vars fan5;
extern struct fan_vars fan6;
extern struct fan_vars fan7;
extern struct fan_vars fan8;
extern struct heater_vars condHeater;
extern struct heater_vars doorHeater;
extern struct heater_vars htxAHeater;
extern struct heater_vars htxBHeater;
extern struct rtc_calendar_alarm_time last_defrost_timestamp;
extern struct rtc_calendar_time php_selfchk_alarm1;
extern struct rtc_calendar_time php_selfchk_alarm2;
extern struct rtc_calendar_time php_selfchk_alarm3;
extern struct user_timer defrostFreezupTimer;
extern struct user_timer defrostIntervalTimer;
extern struct user_timer defrostMinimumIntervalTimer;
extern struct user_timer defrostMaximumIntervalTimer;

//protocol
extern uint8_t firmwareVersion;
extern uint8_t firmwareRevision;
extern uint8_t defrostFreqHrs;
extern uint8_t defrostDurationMins;
extern uint16_t defrostCycleCount;
extern bool defrostActive;
extern bool enableAutoDefrost;
extern uint16_t defrostFreqMaxHrs;
extern uint8_t i2cFunctionReg;
extern uint16_t errorRegister;
extern float maxOutputVoltage;
extern uint8_t mfgTestModeFlag1;
extern uint8_t mfgTestModeFlag2;
extern float controlTemperature;
//extern float humidityPercentage;
extern float condensateTemp;
extern uint8_t UIfwVersion;
extern uint8_t doorOpenStatus;
extern float ambientTemp;
extern uint8_t i2c_txdat[];
extern uint8_t i2c_rxdat[];
extern bool enableDbgLoggingMode;
extern uint16_t self_test_status_hi;
extern uint16_t self_test_status_lo;
extern uint8_t selfTestIsRunning;
extern bool uiSetpointControl;
extern float fanSpdTolerance;
extern uint16_t maxFanErrorCount;
extern uint16_t maxPhpErrorCount;
extern float phpNominalResistance;
extern float phpResTolPercentage;
extern float php1CurrentLwrLim;
extern float php2CurrentLwrLim;
extern float php1CurrentLwrLimSetting;
extern float php2CurrentLwrLimSetting;
extern bool enablePhpCurrentToleranceCheck;
extern float phpChk_lastI1lim;
extern float phpChk_lastI1;
extern float phpChk_lastV1;
extern float phpChk_lastI2lim;
extern float phpChk_lastI2;
extern float phpChk_lastV2;
extern uint16_t phpChkTimeIntervalInSecs;
extern float php1CurrentDiffLim;
extern float php2CurrentDiffLim;
extern uint16_t doorOpenCount1HrLimit;

//app
extern uint32_t task1Time;
extern uint32_t task2Time;
extern uint32_t task3Time;
extern uint32_t task4Time;
extern uint32_t task5Time;
extern uint32_t task6Time;
extern uint32_t task7Time;
extern uint32_t task8Time;
extern uint32_t task9TriggerTime;
extern uint32_t task9Time;
extern uint32_t task10TriggerTime;
extern uint32_t task10Time;
extern uint32_t task11Time;
extern uint32_t task12Time;
extern uint32_t task1LastTime;
extern uint32_t task2LastTime;
extern uint32_t task3LastTime;
extern uint32_t task4LastTime;
extern uint32_t task5LastTime;
extern uint32_t task6LastTime;
extern uint32_t task7LastTime;
extern uint32_t task8LastTime;
extern uint32_t task9LastTime;
extern uint32_t task10LastTime;
extern uint32_t task11LastTime;
extern uint32_t task12LastTime;
extern bool doorOpenPresentStatus;
extern bool inhibitChamberFan;
extern float chamberTempDifference;
extern uint32_t inhibitChamberFanTimestamp;
extern uint32_t inhibitChamberFanTimeoutTimestamp;
extern uint8_t eepromPageData[EEPROM_PAGE_SIZE];
extern bool writeToEepromFlag;
extern uint8_t eepromTemp[4];
extern uint8_t *pTempEepromBuf;
//extern uint8_t defrostFreqHrs;
//extern uint8_t defrostDurationMins;
extern uint32_t eepromStatus;
extern uint8_t MAC_address[MAC_ADDR_SIZE];
extern uint8_t strModel[MODEL_SIZE];
extern uint8_t strSerial[SERIAL_SIZE];
extern uint8_t strUiFwVer[UIFWVER_SIZE];
extern float chamberTempUniformityTarget;
extern uint32_t pwm2_0_cmp_val;
extern uint32_t pwm2_1_cmp_val;
extern uint32_t pwm0_cmp_val;
extern uint32_t pwm5_cmp_val;
extern uint32_t pwm4_cmp_val;
extern uint32_t pwm7_1_cmp_val;
extern uint32_t pwm7_2_cmp_val;
extern volatile uint8_t rx_buffer[MAX_RX_BUFFER_LENGTH];
extern volatile uint8_t command[MAX_RX_BUFFER_LENGTH];
extern bool cmdFlag;
extern bool enablePsDbgMsgs;
extern bool enableManualOverride;
extern bool enableTempOverride;
extern bool enableFanOverride;
extern bool phpDetected;
extern bool enableDebugCmds;
extern bool inhibitOutput;
extern bool deactivateAutoHeaterControl;
extern bool enableSideAPcp;
extern bool enableSideBPcp;
extern bool enableSideAFans;
extern bool enableSideBFans;
extern uint16_t chamberThermistorBeta;
extern uint16_t rejectThermistorBeta;
extern uint32_t condHeaterStartTime;
extern float maxAllowedChamberTemp;
extern float minAllowedChamberTemp;
extern uint8_t runSelfTestOnPOR;
extern uint16_t php1TotalErrorCount;
extern uint16_t php2TotalErrorCount;
extern uint16_t fan1ErrorCount;
extern uint16_t fan2ErrorCount;
extern uint16_t fan4ErrorCount;
extern uint16_t cha1SnsErrCnt;
extern uint16_t cha2SnsErrCnt;
extern uint16_t rejSnsErrCnt;
extern uint16_t rejCritErrCnt;
extern uint16_t maxSnsErrorCount;
extern uint16_t fan1LowSpdErrCnt;
extern uint16_t fan2LowSpdErrCnt;
extern uint16_t fan4LowSpdErrCnt;
extern float defrostCancelTemp;
extern bool enablePwrCap;
extern uint16_t pwrCapTimeoutInMins;
extern float acceptHtxTemperature;
extern uint8_t bulk_voltage_max;
extern uint8_t bulk_voltage_nom;
extern uint8_t bulk_voltage_min;
extern uint8_t boost_idx_offset;
extern uint32_t doorOpenCount_Tec;
extern uint16_t doorOpenCount_1Hr;
extern uint32_t doorOpenLifetimeCnt;
extern bool highUsageModeFlag;
extern uint8_t sensor_state_tcha;
extern uint8_t prev_sensor_state_tcha;
extern uint8_t sensor_state_trej;
extern uint8_t prev_sensor_state_trej;
extern bool enableSensorEDFI;

/************************************************************************/
/* Extern Functions                                                     */
/************************************************************************/
//config
extern void configure_adc(uint8_t);
extern void configure_tc0(void);
extern void configure_tc0_callbacks(void);
extern void configure_tc1(void);
extern void configure_tc1_callbacks(void);
extern void configure_tc2(void);
extern void configure_tc2_callbacks(void);
extern void configure_tc5(void);
extern void configure_tc5_callbacks(void);
extern void configure_tc7(void);
extern void configure_tc7_callbacks(void);
extern void configure_event_sys(void);
extern void configure_extint(void);
extern void configure_i2c_master(void);
extern void configure_i2c_slave(void);
extern void configure_eeprom(void);
extern void configure_port_pins(void);
extern void configure_rtc_calendar(void);
extern void cdc_uart_init(void);

//callbacks
extern void extint_slp_callback(uint32_t channel);
extern void configure_extint_callbacks(void);
extern void adc_user_callback(const struct adc_module *const module);
extern void i2c_buffer_full_request_callback(struct i2c_slave_module *const);
extern void i2c_buffer_ready_request_callback(struct i2c_slave_module *const);
extern void i2c_error_request_callback(struct i2c_slave_module *const);
extern void i2c_read_request_callback(struct i2c_slave_module *const);
extern void i2c_write_request_callback(struct i2c_slave_module *const);
extern void configure_i2c_slave_callbacks(void);
extern void configure_usart_callbacks(void);
extern void rtc_alarm_match_callback(void);
extern void configure_rtc_callbacks(void);
extern void usart_read_callback(const struct usart_module *const);

//protocol
extern void i2cCommandHandler(void);
extern uint16_t protocolType(uint8_t);
extern bool checkCRC (unsigned char*, uint32_t);
extern uint8_t calcCRC (unsigned char*, uint32_t);
extern struct _varInfo paramLookup(uint8_t);
extern float set_setPointValue (float fNewValue, bool bValid, int nZone);
extern float set_setRejectLimit (float fNewValue, bool bValid, int);
extern float set_setRejectLimitCritical (float fNewValue, bool bValid, int);
extern float set_setRejectDeadband (float fNewValue, bool bValid, int);
extern float set_setDeadband (float fNewValue, bool bValid, int);
extern float set_setDeadbandLow (float fNewValue, bool bValid, int);
extern float set_setHeatLeak (float fNewValue, bool bValid, int);
extern float set_setVarqVoltage (float fNewValue, bool bValid, int);
extern float set_setVmaxCOP (float fNewValue, bool bValid, int);
extern float set_setFanState (float fNewValue, bool bValid, int);
extern float set_setMaxBulkPower (float fNewValue, bool bValid, int);
extern float readPhpVoltage (float fNewValue, bool bValid, int);
extern float readPhpCurrent (float fNewValue, bool bValid, int);
extern float readBulkVoltage (float fNewValue, bool bValid, int);
extern float readLogicVoltage (float fNewValue, bool bValid, int);
extern float readStandbyVoltage (float fNewValue, bool bValid, int);
extern float readBatteryVoltage (float fNewValue, bool bValid, int);
extern float readPhpVoltage2 (float fNewValue, bool bValid, int);
extern float readPhpCurrent2 (float fNewValue, bool bValid, int);
extern float set_setKP_HIGHQ (float fNewValue, bool bValid, int);
extern float set_setKI_HIGHQ (float fNewValue, bool bValid, int);
extern float set_setKD_HIGHQ (float fNewValue, bool bValid, int);
extern float set_setKP_VARQ (float fNewValue, bool bValid, int);
extern float set_setKI_VARQ (float fNewValue, bool bValid, int);
extern float set_setKD_VARQ (float fNewValue, bool bValid, int);
extern float set_setKP_COPQ (float fNewValue, bool bValid, int);
extern float set_setKI_COPQ (float fNewValue, bool bValid, int);
extern float set_setKD_COPQ (float fNewValue, bool bValid, int);
extern float set_setChamberTemp (float fNewValue, bool bValid, int);
extern float set_setGlycolTemp (float fNewValue, bool bValid, int);
extern float set_setRejectTemp (float fNewValue, bool bValid, int);
extern float set_setGlycolOffset (float fNewValue, bool bValid, int);
extern float set_setdesiredVoltage (float fNewValue, bool bValid, int nZone);
extern float set_setChamberOffset (float fNewValue, bool bValid, int Zone);
extern float set_setModeState (float fNewValue, bool bValid, int Zone);
extern float set_setDesiredVoltage (float fNewValue, bool bValid, int nZone);
extern float set_setFan1 (float fNewValue, bool bValid);
extern float set_setFan2 (float fNewValue, bool bValid);
extern float set_setFan3 (float fNewValue, bool bValid);
extern float set_setFan4 (float fNewValue, bool bValid);
//extern float set_setFanTop (float fNewValue, bool bValid, int);
//extern float set_setFanBottom (float fNewValue, bool bValid, int);
extern float set_setFanMin (float fNewValue, bool bValid, int);
extern float set_setFanMax (float fNewValue, bool bValid, int);
extern float set_setFanRPM1 (float fNewValue, bool bValid);
extern float set_setFanRPM2 (float fNewValue, bool bValid);
extern float set_maxAllowedChamberTemp(float, bool, int);
extern float set_minAllowedChamberTemp(float, bool, int);
extern float fNoAction (float, bool, int);
extern float readChamberThermistorBeta (float, bool, int);
extern float readRejectThermistorBeta (float, bool, int);
extern float readPhp1OutputDutyOffset (float, bool, int);
extern float readPhp2OutputDutyOffset (float, bool, int);
extern float set_maxSnsErrorCount (float, bool, int);
extern float set_maxFanErrorCount (float, bool, int);
extern float set_maxPhpErrorCount (float, bool, int);
extern float set_doorOpenCount1HrLimit (float, bool, int);
extern float set_setEnablePcp (float, bool, int);

//app
extern uint16_t read_adc_pin(uint8_t);
extern void readSensors(void);
extern float ADCtoTemperature(float, uint16_t);
extern void initMain(void);
extern void initChamber(struct chamber_vars *);
extern void initFan(struct fan_vars *);
extern bool pidSetup(struct pid_instance *);
extern bool pidCompute(struct pid_instance *);
extern void pidSetControllerDirection(struct pid_instance *, int);
extern void pidSetOutputLimits(struct pid_instance *, float, float);
extern void pidSetTunings(struct pid_instance *, float, float, float);
extern bool pidFanSetup(struct pid_instance *, float, float, float);
extern void modeStateMachine(struct pid_instance *, struct ps_vars *, struct chamber_vars *);
extern void psHwControl(struct ps_vars *, struct chamber_vars *);
extern void psHwControl_Matrix(struct ps_vars *, struct ps_vars *, struct chamber_vars *, struct chamber_vars *);
extern void setBulkVoltage(struct ps_vars *, uint32_t);
extern void setBuckVoltage(struct ps_vars *, uint32_t);
extern void setBoostVoltage(struct ps_vars *, uint32_t);
extern void setBoostEnable(struct ps_vars *, bool);
extern void outputWalkin(struct ps_vars *);
extern void turnOffBulkPwm(struct ps_vars *);
extern void turnOnBulkPwm(struct ps_vars *);
extern void initPowerSupply(struct ps_vars *);
extern void usartCommandHandler(void);
extern void setBuckEnable(struct ps_vars *, bool);
extern void setOutputEnable(struct ps_vars *, bool);
extern uint32_t presentTimeInSec(void);
extern void setOutputSwitch(uint8_t, uint8_t, uint8_t);
extern uint16_t lookupBoostPwmVal(struct ps_vars *, float);
extern void psHwController(void);
extern void psHwControl_mvac400_24(void);
extern void psHwControl_evolve(void);
extern void psHwControl_rsp1000_48(void);
extern void psHwControl_rsp500_41(void);
extern void psHwControl_ma350_36(void);
extern void psHwControl_rsp1000_48_freezer(void);
extern void psHwControl_27V_freezer(void);
//extern void calculateChamberOperatingPoint(struct ps_vars *, struct chamber_vars *);
//extern void calculatePhpOperatingPoint(struct php_vars *);
extern float fanCalcPwmDutyPercent(struct fan_vars *, float);
extern void fanControl(struct fan_vars *, float);
extern uint32_t fanSetPwmDutyReg(struct fan_vars *, float);
//extern void fanStart(struct fan_vars *);
//extern void fanStop(struct fan_vars *);
extern void detectPHP(void);
extern uint8_t* floatToByteArray(float);
extern uint8_t* intToByteArray(uint16_t);
extern uint8_t* longToByteArray(uint32_t);
extern void eepromReadParams(void);
extern void eepromWriteParams(void);
extern void checkForSensorFaults(void);
extern void checkForFanFaults(void);
extern void checkForPhpFaults(void);
extern uint8_t fanSetSpeed_emc2305(struct fan_vars *, uint8_t);
extern void fanStart_emc2305(struct fan_vars *);
extern void fanStop_emc2305(struct fan_vars *);
extern uint8_t fanReadRpm_emc2305(struct fan_vars *);
extern uint16_t fanEmc2305Init(uint8_t);
extern void handleDoorEvents(void);
extern void setHeaterState(struct heater_vars *, uint8_t);
extern uint8_t lookupDoorHeaterDutyVal(float);
extern uint8_t condHeaterStateMachine(void);
extern void lowPowerModeEnter(void);
extern void lowPowerModeExit(void);
extern void set_fuses(void);
extern uint8_t i2cWrite_emc2305(uint8_t, uint8_t);
extern uint8_t i2cWriteRead_emc2305(uint8_t, uint8_t);
extern uint8_t fanReadConfig_emc2305(struct fan_vars *);
extern uint8_t fanReadStallStatus_emc2305(void);
extern uint8_t fanStateMachine(struct fan_vars *);
extern uint16_t lookupBulkPwmVal(float);
extern void setOutputDutyVals(float);
extern void printDbgMsgs(void);
extern bool selfTest(void);
extern bool testParamLimits(bool, float, uint8_t, const char *);
extern void initDefrost(void);
extern void setDefrostState(uint8_t);
extern void defrostStateMachine(void);
//extern uint8_t fanCalcIntRampVal(struct fan_vars *, uint8_t, uint8_t);
extern void printBootMsg(void);
extern uint8_t fanCheckRpmOutOfBounds(struct fan_vars *);
extern void phpCheckCurrentOutOfBounds(void);
extern void printErrorStatus(void);
extern void initPhpSelfCheck(void);
extern void phpSelfCheck(void);
extern uint32_t updateTimeInSec(uint32_t);
extern void userTimerStart(struct user_timer *, uint16_t);
extern void userTimerUpdateStatus(struct user_timer *);
extern void userTimerReset(struct user_timer *);
extern void chamberSensorEDFI(void);
extern void rejectSensorEDFI(void);
extern void initDbgCtrlFunctions(void);
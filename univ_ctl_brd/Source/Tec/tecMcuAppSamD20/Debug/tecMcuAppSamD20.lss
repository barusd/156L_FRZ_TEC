
tecMcuAppSamD20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000273c0  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000273c0  000273c0  0002f3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000284  20000000  000273c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000fc4  20000284  0002764c  00030284  2**2
                  ALLOC
  4 .stack        00002000  20001248  00028610  00030284  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00030284  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  000302ac  2**0
                  CONTENTS, READONLY
  7 .debug_info   00073f9c  00000000  00000000  0003031d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008f52  00000000  00000000  000a42b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008b85  00000000  00000000  000ad20b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001960  00000000  00000000  000b5d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001648  00000000  00000000  000b76f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001d62b  00000000  00000000  000b8d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002e0ff  00000000  00000000  000d6363  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00054c60  00000000  00000000  00104462  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00006b8c  00000000  00000000  001590c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
       0:	20003248 	.word	0x20003248
       4:	00019799 	.word	0x00019799
	/* Sanity check. */
	Assert(module);
       8:	0001981d 	.word	0x0001981d
       c:	00017dd1 	.word	0x00017dd1
	...
      2c:	0001981d 	.word	0x0001981d
	...
      38:	0001981d 	.word	0x0001981d
      3c:	0001981d 	.word	0x0001981d
      40:	0001981d 	.word	0x0001981d
      44:	0001981d 	.word	0x0001981d
      48:	0001981d 	.word	0x0001981d
      4c:	00012b65 	.word	0x00012b65
	Assert(module->hw);
      50:	00011739 	.word	0x00011739
      54:	0001981d 	.word	0x0001981d
      58:	0001981d 	.word	0x0001981d
      5c:	000152d5 	.word	0x000152d5
      60:	000152e9 	.word	0x000152e9
      64:	000152fd 	.word	0x000152fd
      68:	00015311 	.word	0x00015311
      6c:	00015325 	.word	0x00015325
      70:	00015339 	.word	0x00015339
      74:	00018aa1 	.word	0x00018aa1
      78:	00018ab5 	.word	0x00018ab5
      7c:	00018ac9 	.word	0x00018ac9
      80:	00018add 	.word	0x00018add
      84:	00018af1 	.word	0x00018af1
      88:	00018b05 	.word	0x00018b05
      8c:	00018b19 	.word	0x00018b19
      90:	00018b2d 	.word	0x00018b2d
      94:	000115f1 	.word	0x000115f1
      98:	0001981d 	.word	0x0001981d

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
      9c:	0001981d 	.word	0x0001981d

000000a0 <deregister_tm_clones>:
      a0:	b508      	push	{r3, lr}

	while (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY) {
      a2:	4b06      	ldr	r3, [pc, #24]	; (bc <deregister_tm_clones+0x1c>)
      a4:	4806      	ldr	r0, [pc, #24]	; (c0 <deregister_tm_clones+0x20>)
      a6:	3303      	adds	r3, #3
      a8:	1a1b      	subs	r3, r3, r0
      aa:	2b06      	cmp	r3, #6
      ac:	d800      	bhi.n	b0 <deregister_tm_clones+0x10>
      ae:	bd08      	pop	{r3, pc}
      b0:	4b04      	ldr	r3, [pc, #16]	; (c4 <deregister_tm_clones+0x24>)
		/* Wait for I2C module to sync. */
	}
}
      b2:	2b00      	cmp	r3, #0
      b4:	d0fb      	beq.n	ae <deregister_tm_clones+0xe>
      b6:	4798      	blx	r3
      b8:	e7f9      	b.n	ae <deregister_tm_clones+0xe>
      ba:	46c0      	nop			; (mov r8, r8)
      bc:	000273c8 	.word	0x000273c8
      c0:	000273c8 	.word	0x000273c8
      c4:	00000000 	.word	0x00000000

000000c8 <register_tm_clones>:
      c8:	b508      	push	{r3, lr}
      ca:	4807      	ldr	r0, [pc, #28]	; (e8 <register_tm_clones+0x20>)
      cc:	4b07      	ldr	r3, [pc, #28]	; (ec <register_tm_clones+0x24>)
      ce:	1a1b      	subs	r3, r3, r0
      d0:	109b      	asrs	r3, r3, #2
      d2:	0fda      	lsrs	r2, r3, #31
      d4:	18d3      	adds	r3, r2, r3
      d6:	1059      	asrs	r1, r3, #1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
      d8:	d100      	bne.n	dc <register_tm_clones+0x14>
      da:	bd08      	pop	{r3, pc}
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
      dc:	4a04      	ldr	r2, [pc, #16]	; (f0 <register_tm_clones+0x28>)
      de:	2a00      	cmp	r2, #0
      e0:	d0fb      	beq.n	da <register_tm_clones+0x12>
      e2:	4790      	blx	r2
      e4:	e7f9      	b.n	da <register_tm_clones+0x12>
      e6:	46c0      	nop			; (mov r8, r8)
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
      e8:	000273c8 	.word	0x000273c8
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
      ec:	000273c8 	.word	0x000273c8
      f0:	00000000 	.word	0x00000000

000000f4 <__do_global_dtors_aux>:
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
      f4:	b510      	push	{r4, lr}
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
      f6:	4c07      	ldr	r4, [pc, #28]	; (114 <__do_global_dtors_aux+0x20>)
      f8:	7823      	ldrb	r3, [r4, #0]
      fa:	2b00      	cmp	r3, #0
      fc:	d109      	bne.n	112 <__do_global_dtors_aux+0x1e>
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
      fe:	f7ff ffcf 	bl	a0 <deregister_tm_clones>
     102:	4b05      	ldr	r3, [pc, #20]	; (118 <__do_global_dtors_aux+0x24>)
     104:	2b00      	cmp	r3, #0
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     106:	d002      	beq.n	10e <__do_global_dtors_aux+0x1a>
     108:	4804      	ldr	r0, [pc, #16]	; (11c <__do_global_dtors_aux+0x28>)
     10a:	e000      	b.n	10e <__do_global_dtors_aux+0x1a>
     10c:	bf00      	nop
     10e:	2301      	movs	r3, #1
     110:	7023      	strb	r3, [r4, #0]
     112:	bd10      	pop	{r4, pc}
     114:	20000284 	.word	0x20000284
     118:	00000000 	.word	0x00000000
     11c:	000273c8 	.word	0x000273c8

00000120 <frame_dummy>:
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     120:	b508      	push	{r3, lr}
     122:	4b09      	ldr	r3, [pc, #36]	; (148 <frame_dummy+0x28>)
     124:	2b00      	cmp	r3, #0
     126:	d003      	beq.n	130 <frame_dummy+0x10>
     128:	4808      	ldr	r0, [pc, #32]	; (14c <frame_dummy+0x2c>)
     12a:	4909      	ldr	r1, [pc, #36]	; (150 <frame_dummy+0x30>)
     12c:	e000      	b.n	130 <frame_dummy+0x10>
     12e:	bf00      	nop
     130:	4808      	ldr	r0, [pc, #32]	; (154 <frame_dummy+0x34>)
     132:	6803      	ldr	r3, [r0, #0]
     134:	2b00      	cmp	r3, #0
	}
}
     136:	d003      	beq.n	140 <frame_dummy+0x20>
     138:	4b07      	ldr	r3, [pc, #28]	; (158 <frame_dummy+0x38>)
     13a:	2b00      	cmp	r3, #0
     13c:	d000      	beq.n	140 <frame_dummy+0x20>
     13e:	4798      	blx	r3
     140:	f7ff ffc2 	bl	c8 <register_tm_clones>
     144:	bd08      	pop	{r3, pc}
     146:	46c0      	nop			; (mov r8, r8)
     148:	00000000 	.word	0x00000000
     14c:	000273c8 	.word	0x000273c8
     150:	20000288 	.word	0x20000288
     154:	000273c8 	.word	0x000273c8
     158:	00000000 	.word	0x00000000

0000015c <NVIC_SystemReset>:
     15c:	b580      	push	{r7, lr}
     15e:	af00      	add	r7, sp, #0
     160:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
     164:	4b02      	ldr	r3, [pc, #8]	; (170 <NVIC_SystemReset+0x14>)
     166:	4a03      	ldr	r2, [pc, #12]	; (174 <NVIC_SystemReset+0x18>)
     168:	60da      	str	r2, [r3, #12]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
     16a:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
     16e:	e7fe      	b.n	16e <NVIC_SystemReset+0x12>
     170:	e000ed00 	.word	0xe000ed00
     174:	05fa0004 	.word	0x05fa0004

00000178 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
     178:	b580      	push	{r7, lr}
     17a:	af00      	add	r7, sp, #0
	return test_case_ptr;
     17c:	4b02      	ldr	r3, [pc, #8]	; (188 <test_get_case+0x10>)
     17e:	681b      	ldr	r3, [r3, #0]
}
     180:	1c18      	adds	r0, r3, #0
     182:	46bd      	mov	sp, r7
     184:	bd80      	pop	{r7, pc}
     186:	46c0      	nop			; (mov r8, r8)
     188:	2000041c 	.word	0x2000041c

0000018c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     18c:	b590      	push	{r4, r7, lr}
     18e:	b087      	sub	sp, #28
     190:	af02      	add	r7, sp, #8
     192:	1c02      	adds	r2, r0, #0
     194:	1dfb      	adds	r3, r7, #7
     196:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     198:	1c3b      	adds	r3, r7, #0
     19a:	330f      	adds	r3, #15
     19c:	1dfa      	adds	r2, r7, #7
     19e:	7812      	ldrb	r2, [r2, #0]
     1a0:	09d2      	lsrs	r2, r2, #7
     1a2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     1a4:	1c3b      	adds	r3, r7, #0
     1a6:	330e      	adds	r3, #14
     1a8:	1dfa      	adds	r2, r7, #7
     1aa:	7812      	ldrb	r2, [r2, #0]
     1ac:	0952      	lsrs	r2, r2, #5
     1ae:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     1b0:	4b1b      	ldr	r3, [pc, #108]	; (220 <system_pinmux_get_group_from_gpio_pin+0x94>)
     1b2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     1b4:	1c3b      	adds	r3, r7, #0
     1b6:	330f      	adds	r3, #15
     1b8:	781b      	ldrb	r3, [r3, #0]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d10e      	bne.n	1dc <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
     1be:	1c3b      	adds	r3, r7, #0
     1c0:	330f      	adds	r3, #15
     1c2:	781b      	ldrb	r3, [r3, #0]
     1c4:	009b      	lsls	r3, r3, #2
     1c6:	2210      	movs	r2, #16
     1c8:	19d2      	adds	r2, r2, r7
     1ca:	18d3      	adds	r3, r2, r3
     1cc:	3b08      	subs	r3, #8
     1ce:	681a      	ldr	r2, [r3, #0]
     1d0:	1c3b      	adds	r3, r7, #0
     1d2:	330e      	adds	r3, #14
     1d4:	781b      	ldrb	r3, [r3, #0]
     1d6:	01db      	lsls	r3, r3, #7
     1d8:	18d3      	adds	r3, r2, r3
     1da:	e01c      	b.n	216 <system_pinmux_get_group_from_gpio_pin+0x8a>
	} else {
		Assert(false);
     1dc:	4b11      	ldr	r3, [pc, #68]	; (224 <system_pinmux_get_group_from_gpio_pin+0x98>)
     1de:	4798      	blx	r3
     1e0:	1c03      	adds	r3, r0, #0
     1e2:	2b00      	cmp	r3, #0
     1e4:	d00f      	beq.n	206 <system_pinmux_get_group_from_gpio_pin+0x7a>
     1e6:	4b0f      	ldr	r3, [pc, #60]	; (224 <system_pinmux_get_group_from_gpio_pin+0x98>)
     1e8:	4798      	blx	r3
     1ea:	1c01      	adds	r1, r0, #0
     1ec:	4a0e      	ldr	r2, [pc, #56]	; (228 <system_pinmux_get_group_from_gpio_pin+0x9c>)
     1ee:	2368      	movs	r3, #104	; 0x68
     1f0:	33ff      	adds	r3, #255	; 0xff
     1f2:	480e      	ldr	r0, [pc, #56]	; (22c <system_pinmux_get_group_from_gpio_pin+0xa0>)
     1f4:	9000      	str	r0, [sp, #0]
     1f6:	480e      	ldr	r0, [pc, #56]	; (230 <system_pinmux_get_group_from_gpio_pin+0xa4>)
     1f8:	9001      	str	r0, [sp, #4]
     1fa:	1c08      	adds	r0, r1, #0
     1fc:	2101      	movs	r1, #1
     1fe:	4c0d      	ldr	r4, [pc, #52]	; (234 <system_pinmux_get_group_from_gpio_pin+0xa8>)
     200:	47a0      	blx	r4
		return NULL;
     202:	2300      	movs	r3, #0
     204:	e007      	b.n	216 <system_pinmux_get_group_from_gpio_pin+0x8a>
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
     206:	480c      	ldr	r0, [pc, #48]	; (238 <system_pinmux_get_group_from_gpio_pin+0xac>)
     208:	4909      	ldr	r1, [pc, #36]	; (230 <system_pinmux_get_group_from_gpio_pin+0xa4>)
     20a:	4a07      	ldr	r2, [pc, #28]	; (228 <system_pinmux_get_group_from_gpio_pin+0x9c>)
     20c:	2368      	movs	r3, #104	; 0x68
     20e:	33ff      	adds	r3, #255	; 0xff
     210:	4c0a      	ldr	r4, [pc, #40]	; (23c <system_pinmux_get_group_from_gpio_pin+0xb0>)
     212:	47a0      	blx	r4
     214:	e7fe      	b.n	214 <system_pinmux_get_group_from_gpio_pin+0x88>
		return NULL;
	}
}
     216:	1c18      	adds	r0, r3, #0
     218:	46bd      	mov	sp, r7
     21a:	b005      	add	sp, #20
     21c:	bd90      	pop	{r4, r7, pc}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	41004400 	.word	0x41004400
     224:	00000179 	.word	0x00000179
     228:	00022a7c 	.word	0x00022a7c
     22c:	00022aac 	.word	0x00022aac
     230:	00022ac4 	.word	0x00022ac4
     234:	000106e9 	.word	0x000106e9
     238:	00022acc 	.word	0x00022acc
     23c:	0001b62d 	.word	0x0001b62d

00000240 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32kHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
     240:	b580      	push	{r7, lr}
     242:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
     244:	4b01      	ldr	r3, [pc, #4]	; (24c <system_reset+0xc>)
     246:	4798      	blx	r3
}
     248:	46bd      	mov	sp, r7
     24a:	bd80      	pop	{r7, pc}
     24c:	0000015d 	.word	0x0000015d

00000250 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     250:	b580      	push	{r7, lr}
     252:	b082      	sub	sp, #8
     254:	af00      	add	r7, sp, #0
     256:	1c02      	adds	r2, r0, #0
     258:	1dfb      	adds	r3, r7, #7
     25a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     25c:	1dfb      	adds	r3, r7, #7
     25e:	781b      	ldrb	r3, [r3, #0]
     260:	1c18      	adds	r0, r3, #0
     262:	4b03      	ldr	r3, [pc, #12]	; (270 <port_get_group_from_gpio_pin+0x20>)
     264:	4798      	blx	r3
     266:	1c03      	adds	r3, r0, #0
}
     268:	1c18      	adds	r0, r3, #0
     26a:	46bd      	mov	sp, r7
     26c:	b002      	add	sp, #8
     26e:	bd80      	pop	{r7, pc}
     270:	0000018d 	.word	0x0000018d

00000274 <port_pin_get_output_level>:
 *
 *  \return Status of the port pin's output buffer.
 */
static inline bool port_pin_get_output_level(
		const uint8_t gpio_pin)
{
     274:	b580      	push	{r7, lr}
     276:	b084      	sub	sp, #16
     278:	af00      	add	r7, sp, #0
     27a:	1c02      	adds	r2, r0, #0
     27c:	1dfb      	adds	r3, r7, #7
     27e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     280:	1dfb      	adds	r3, r7, #7
     282:	781b      	ldrb	r3, [r3, #0]
     284:	1c18      	adds	r0, r3, #0
     286:	4b0c      	ldr	r3, [pc, #48]	; (2b8 <port_pin_get_output_level+0x44>)
     288:	4798      	blx	r3
     28a:	1c03      	adds	r3, r0, #0
     28c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     28e:	1dfb      	adds	r3, r7, #7
     290:	781a      	ldrb	r2, [r3, #0]
     292:	231f      	movs	r3, #31
     294:	4013      	ands	r3, r2
     296:	2201      	movs	r2, #1
     298:	1c11      	adds	r1, r2, #0
     29a:	4099      	lsls	r1, r3
     29c:	1c0b      	adds	r3, r1, #0
     29e:	60bb      	str	r3, [r7, #8]

	return (port_base->OUT.reg & pin_mask);
     2a0:	68fb      	ldr	r3, [r7, #12]
     2a2:	691b      	ldr	r3, [r3, #16]
     2a4:	68ba      	ldr	r2, [r7, #8]
     2a6:	4013      	ands	r3, r2
     2a8:	1e5a      	subs	r2, r3, #1
     2aa:	4193      	sbcs	r3, r2
     2ac:	b2db      	uxtb	r3, r3
}
     2ae:	1c18      	adds	r0, r3, #0
     2b0:	46bd      	mov	sp, r7
     2b2:	b004      	add	sp, #16
     2b4:	bd80      	pop	{r7, pc}
     2b6:	46c0      	nop			; (mov r8, r8)
     2b8:	00000251 	.word	0x00000251

000002bc <set_setdesiredVoltage>:

/************************************************************************/
/* User Functions                                                       */
/************************************************************************/
float set_setdesiredVoltage (float fNewValue, bool bValid, int nZone)
{
     2bc:	b580      	push	{r7, lr}
     2be:	b084      	sub	sp, #16
     2c0:	af00      	add	r7, sp, #0
     2c2:	60f8      	str	r0, [r7, #12]
     2c4:	607a      	str	r2, [r7, #4]
     2c6:	1c3b      	adds	r3, r7, #0
     2c8:	330b      	adds	r3, #11
     2ca:	1c0a      	adds	r2, r1, #0
     2cc:	701a      	strb	r2, [r3, #0]
	if (bValid)
     2ce:	1c3b      	adds	r3, r7, #0
     2d0:	330b      	adds	r3, #11
     2d2:	781b      	ldrb	r3, [r3, #0]
     2d4:	2b00      	cmp	r3, #0
     2d6:	d008      	beq.n	2ea <set_setdesiredVoltage+0x2e>
	{
		if (nZone == 0)
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	2b00      	cmp	r3, #0
     2dc:	d102      	bne.n	2e4 <set_setdesiredVoltage+0x28>
		{
			ps1.desiredVoltage = fNewValue;
     2de:	4b06      	ldr	r3, [pc, #24]	; (2f8 <set_setdesiredVoltage+0x3c>)
     2e0:	68fa      	ldr	r2, [r7, #12]
     2e2:	615a      	str	r2, [r3, #20]
/*		else
		{
			ps2.desiredVoltage = fNewValue;
		}
*/
		flagSetOverride = true;
     2e4:	4b05      	ldr	r3, [pc, #20]	; (2fc <set_setdesiredVoltage+0x40>)
     2e6:	2201      	movs	r2, #1
     2e8:	701a      	strb	r2, [r3, #0]
	}
	
	return (1);
     2ea:	23fe      	movs	r3, #254	; 0xfe
     2ec:	059b      	lsls	r3, r3, #22
}
     2ee:	1c18      	adds	r0, r3, #0
     2f0:	46bd      	mov	sp, r7
     2f2:	b004      	add	sp, #16
     2f4:	bd80      	pop	{r7, pc}
     2f6:	46c0      	nop			; (mov r8, r8)
     2f8:	20000a84 	.word	0x20000a84
     2fc:	200002a0 	.word	0x200002a0

00000300 <set_setPointValue>:

float set_setPointValue (float fNewValue, bool bValid, int nZone)
{
     300:	b580      	push	{r7, lr}
     302:	b084      	sub	sp, #16
     304:	af00      	add	r7, sp, #0
     306:	60f8      	str	r0, [r7, #12]
     308:	607a      	str	r2, [r7, #4]
     30a:	1c3b      	adds	r3, r7, #0
     30c:	330b      	adds	r3, #11
     30e:	1c0a      	adds	r2, r1, #0
     310:	701a      	strb	r2, [r3, #0]
	if (nZone == 0)
     312:	687b      	ldr	r3, [r7, #4]
     314:	2b00      	cmp	r3, #0
     316:	d10a      	bne.n	32e <set_setPointValue+0x2e>
	{
		if (bValid)
     318:	1c3b      	adds	r3, r7, #0
     31a:	330b      	adds	r3, #11
     31c:	781b      	ldrb	r3, [r3, #0]
     31e:	2b00      	cmp	r3, #0
     320:	d002      	beq.n	328 <set_setPointValue+0x28>
		{
			chamber1.setpoint = fNewValue;
     322:	4b0a      	ldr	r3, [pc, #40]	; (34c <set_setPointValue+0x4c>)
     324:	68fa      	ldr	r2, [r7, #12]
     326:	619a      	str	r2, [r3, #24]
			//instProtocol[0].setpoint = fNewValue;
		}
		return chamber1.setpoint;
     328:	4b08      	ldr	r3, [pc, #32]	; (34c <set_setPointValue+0x4c>)
     32a:	699b      	ldr	r3, [r3, #24]
     32c:	e009      	b.n	342 <set_setPointValue+0x42>
	}
	// return 0;

	else
	{
		if (bValid)
     32e:	1c3b      	adds	r3, r7, #0
     330:	330b      	adds	r3, #11
     332:	781b      	ldrb	r3, [r3, #0]
     334:	2b00      	cmp	r3, #0
     336:	d002      	beq.n	33e <set_setPointValue+0x3e>
		{
			chamber2.setpoint = fNewValue;
     338:	4b05      	ldr	r3, [pc, #20]	; (350 <set_setPointValue+0x50>)
     33a:	68fa      	ldr	r2, [r7, #12]
     33c:	619a      	str	r2, [r3, #24]
			//instProtocol[1].setpointC = fNewValue;
		}
		return chamber2.setpoint;
     33e:	4b04      	ldr	r3, [pc, #16]	; (350 <set_setPointValue+0x50>)
     340:	699b      	ldr	r3, [r3, #24]
	}	

}
     342:	1c18      	adds	r0, r3, #0
     344:	46bd      	mov	sp, r7
     346:	b004      	add	sp, #16
     348:	bd80      	pop	{r7, pc}
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	200009b8 	.word	0x200009b8
     350:	20000960 	.word	0x20000960

00000354 <set_setRejectLimit>:

float set_setRejectLimit (float fNewValue, bool bValid, int nZone)
{
     354:	b580      	push	{r7, lr}
     356:	b084      	sub	sp, #16
     358:	af00      	add	r7, sp, #0
     35a:	60f8      	str	r0, [r7, #12]
     35c:	607a      	str	r2, [r7, #4]
     35e:	1c3b      	adds	r3, r7, #0
     360:	330b      	adds	r3, #11
     362:	1c0a      	adds	r2, r1, #0
     364:	701a      	strb	r2, [r3, #0]
	if (nZone == 0)
     366:	687b      	ldr	r3, [r7, #4]
     368:	2b00      	cmp	r3, #0
     36a:	d10a      	bne.n	382 <set_setRejectLimit+0x2e>
	{
		if (bValid)
     36c:	1c3b      	adds	r3, r7, #0
     36e:	330b      	adds	r3, #11
     370:	781b      	ldrb	r3, [r3, #0]
     372:	2b00      	cmp	r3, #0
     374:	d002      	beq.n	37c <set_setRejectLimit+0x28>
		{
			chamber1.rejectLimit = fNewValue;
     376:	4b0a      	ldr	r3, [pc, #40]	; (3a0 <set_setRejectLimit+0x4c>)
     378:	68fa      	ldr	r2, [r7, #12]
     37a:	629a      	str	r2, [r3, #40]	; 0x28
		}
		return chamber1.rejectLimit;
     37c:	4b08      	ldr	r3, [pc, #32]	; (3a0 <set_setRejectLimit+0x4c>)
     37e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     380:	e009      	b.n	396 <set_setRejectLimit+0x42>
	}
	// return 0;

	else
	{
		if (bValid)
     382:	1c3b      	adds	r3, r7, #0
     384:	330b      	adds	r3, #11
     386:	781b      	ldrb	r3, [r3, #0]
     388:	2b00      	cmp	r3, #0
     38a:	d002      	beq.n	392 <set_setRejectLimit+0x3e>
		{
			chamber2.rejectLimit = fNewValue;
     38c:	4b05      	ldr	r3, [pc, #20]	; (3a4 <set_setRejectLimit+0x50>)
     38e:	68fa      	ldr	r2, [r7, #12]
     390:	629a      	str	r2, [r3, #40]	; 0x28
		}
		return chamber2.rejectLimit;
     392:	4b04      	ldr	r3, [pc, #16]	; (3a4 <set_setRejectLimit+0x50>)
     394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	}

}
     396:	1c18      	adds	r0, r3, #0
     398:	46bd      	mov	sp, r7
     39a:	b004      	add	sp, #16
     39c:	bd80      	pop	{r7, pc}
     39e:	46c0      	nop			; (mov r8, r8)
     3a0:	200009b8 	.word	0x200009b8
     3a4:	20000960 	.word	0x20000960

000003a8 <set_setRejectLimitCritical>:

float set_setRejectLimitCritical (float fNewValue, bool bValid, int nZone)
{
     3a8:	b580      	push	{r7, lr}
     3aa:	b084      	sub	sp, #16
     3ac:	af00      	add	r7, sp, #0
     3ae:	60f8      	str	r0, [r7, #12]
     3b0:	607a      	str	r2, [r7, #4]
     3b2:	1c3b      	adds	r3, r7, #0
     3b4:	330b      	adds	r3, #11
     3b6:	1c0a      	adds	r2, r1, #0
     3b8:	701a      	strb	r2, [r3, #0]
	if (nZone == 0)
     3ba:	687b      	ldr	r3, [r7, #4]
     3bc:	2b00      	cmp	r3, #0
     3be:	d10a      	bne.n	3d6 <set_setRejectLimitCritical+0x2e>
	{
		if (bValid)
     3c0:	1c3b      	adds	r3, r7, #0
     3c2:	330b      	adds	r3, #11
     3c4:	781b      	ldrb	r3, [r3, #0]
     3c6:	2b00      	cmp	r3, #0
     3c8:	d002      	beq.n	3d0 <set_setRejectLimitCritical+0x28>
		{
			chamber1.rejectLimitCritical = fNewValue;
     3ca:	4b0a      	ldr	r3, [pc, #40]	; (3f4 <set_setRejectLimitCritical+0x4c>)
     3cc:	68fa      	ldr	r2, [r7, #12]
     3ce:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		return chamber1.rejectLimitCritical;
     3d0:	4b08      	ldr	r3, [pc, #32]	; (3f4 <set_setRejectLimitCritical+0x4c>)
     3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     3d4:	e009      	b.n	3ea <set_setRejectLimitCritical+0x42>
	}
	// return 0;

	else
	{
		if (bValid)
     3d6:	1c3b      	adds	r3, r7, #0
     3d8:	330b      	adds	r3, #11
     3da:	781b      	ldrb	r3, [r3, #0]
     3dc:	2b00      	cmp	r3, #0
     3de:	d002      	beq.n	3e6 <set_setRejectLimitCritical+0x3e>
		{
			chamber2.rejectLimitCritical = fNewValue;
     3e0:	4b05      	ldr	r3, [pc, #20]	; (3f8 <set_setRejectLimitCritical+0x50>)
     3e2:	68fa      	ldr	r2, [r7, #12]
     3e4:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		return chamber2.rejectLimitCritical;
     3e6:	4b04      	ldr	r3, [pc, #16]	; (3f8 <set_setRejectLimitCritical+0x50>)
     3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	}

}
     3ea:	1c18      	adds	r0, r3, #0
     3ec:	46bd      	mov	sp, r7
     3ee:	b004      	add	sp, #16
     3f0:	bd80      	pop	{r7, pc}
     3f2:	46c0      	nop			; (mov r8, r8)
     3f4:	200009b8 	.word	0x200009b8
     3f8:	20000960 	.word	0x20000960

000003fc <set_setRejectDeadband>:

float set_setRejectDeadband (float fNewValue, bool bValid, int nZone)
{
     3fc:	b580      	push	{r7, lr}
     3fe:	b084      	sub	sp, #16
     400:	af00      	add	r7, sp, #0
     402:	60f8      	str	r0, [r7, #12]
     404:	607a      	str	r2, [r7, #4]
     406:	1c3b      	adds	r3, r7, #0
     408:	330b      	adds	r3, #11
     40a:	1c0a      	adds	r2, r1, #0
     40c:	701a      	strb	r2, [r3, #0]
	if (nZone == 0)
     40e:	687b      	ldr	r3, [r7, #4]
     410:	2b00      	cmp	r3, #0
     412:	d10a      	bne.n	42a <set_setRejectDeadband+0x2e>
	{
		if (bValid)
     414:	1c3b      	adds	r3, r7, #0
     416:	330b      	adds	r3, #11
     418:	781b      	ldrb	r3, [r3, #0]
     41a:	2b00      	cmp	r3, #0
     41c:	d002      	beq.n	424 <set_setRejectDeadband+0x28>
		{
			chamber1.rejectLowLimit = fNewValue;
     41e:	4b0a      	ldr	r3, [pc, #40]	; (448 <set_setRejectDeadband+0x4c>)
     420:	68fa      	ldr	r2, [r7, #12]
     422:	631a      	str	r2, [r3, #48]	; 0x30
		}
		return chamber1.rejectLowLimit;
     424:	4b08      	ldr	r3, [pc, #32]	; (448 <set_setRejectDeadband+0x4c>)
     426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     428:	e009      	b.n	43e <set_setRejectDeadband+0x42>
	}
	// return 0;

	else
	{
		if (bValid)
     42a:	1c3b      	adds	r3, r7, #0
     42c:	330b      	adds	r3, #11
     42e:	781b      	ldrb	r3, [r3, #0]
     430:	2b00      	cmp	r3, #0
     432:	d002      	beq.n	43a <set_setRejectDeadband+0x3e>
		{
			chamber2.rejectLowLimit = fNewValue;
     434:	4b05      	ldr	r3, [pc, #20]	; (44c <set_setRejectDeadband+0x50>)
     436:	68fa      	ldr	r2, [r7, #12]
     438:	631a      	str	r2, [r3, #48]	; 0x30
		}
		return chamber2.rejectLowLimit;
     43a:	4b04      	ldr	r3, [pc, #16]	; (44c <set_setRejectDeadband+0x50>)
     43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

}
     43e:	1c18      	adds	r0, r3, #0
     440:	46bd      	mov	sp, r7
     442:	b004      	add	sp, #16
     444:	bd80      	pop	{r7, pc}
     446:	46c0      	nop			; (mov r8, r8)
     448:	200009b8 	.word	0x200009b8
     44c:	20000960 	.word	0x20000960

00000450 <set_setDeadband>:

float set_setDeadband (float fNewValue, bool bValid, int nZone)
{
     450:	b580      	push	{r7, lr}
     452:	b084      	sub	sp, #16
     454:	af00      	add	r7, sp, #0
     456:	60f8      	str	r0, [r7, #12]
     458:	607a      	str	r2, [r7, #4]
     45a:	1c3b      	adds	r3, r7, #0
     45c:	330b      	adds	r3, #11
     45e:	1c0a      	adds	r2, r1, #0
     460:	701a      	strb	r2, [r3, #0]
	if (nZone == 0)
     462:	687b      	ldr	r3, [r7, #4]
     464:	2b00      	cmp	r3, #0
     466:	d10a      	bne.n	47e <set_setDeadband+0x2e>
	{
		if (bValid)
     468:	1c3b      	adds	r3, r7, #0
     46a:	330b      	adds	r3, #11
     46c:	781b      	ldrb	r3, [r3, #0]
     46e:	2b00      	cmp	r3, #0
     470:	d002      	beq.n	478 <set_setDeadband+0x28>
		{
			chamber1.deadband = fNewValue;
     472:	4b0a      	ldr	r3, [pc, #40]	; (49c <set_setDeadband+0x4c>)
     474:	68fa      	ldr	r2, [r7, #12]
     476:	635a      	str	r2, [r3, #52]	; 0x34
		}
		return chamber1.deadband;
     478:	4b08      	ldr	r3, [pc, #32]	; (49c <set_setDeadband+0x4c>)
     47a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     47c:	e009      	b.n	492 <set_setDeadband+0x42>
	}
	// return 0;

	else
	{
		if (bValid)
     47e:	1c3b      	adds	r3, r7, #0
     480:	330b      	adds	r3, #11
     482:	781b      	ldrb	r3, [r3, #0]
     484:	2b00      	cmp	r3, #0
     486:	d002      	beq.n	48e <set_setDeadband+0x3e>
		{
			chamber2.deadband = fNewValue;
     488:	4b05      	ldr	r3, [pc, #20]	; (4a0 <set_setDeadband+0x50>)
     48a:	68fa      	ldr	r2, [r7, #12]
     48c:	635a      	str	r2, [r3, #52]	; 0x34
		}
		return chamber2.deadband;
     48e:	4b04      	ldr	r3, [pc, #16]	; (4a0 <set_setDeadband+0x50>)
     490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	}

}
     492:	1c18      	adds	r0, r3, #0
     494:	46bd      	mov	sp, r7
     496:	b004      	add	sp, #16
     498:	bd80      	pop	{r7, pc}
     49a:	46c0      	nop			; (mov r8, r8)
     49c:	200009b8 	.word	0x200009b8
     4a0:	20000960 	.word	0x20000960

000004a4 <set_setDeadbandLow>:

float set_setDeadbandLow (float fNewValue, bool bValid, int nZone)
{
     4a4:	b580      	push	{r7, lr}
     4a6:	b084      	sub	sp, #16
     4a8:	af00      	add	r7, sp, #0
     4aa:	60f8      	str	r0, [r7, #12]
     4ac:	607a      	str	r2, [r7, #4]
     4ae:	1c3b      	adds	r3, r7, #0
     4b0:	330b      	adds	r3, #11
     4b2:	1c0a      	adds	r2, r1, #0
     4b4:	701a      	strb	r2, [r3, #0]
	if (nZone == 0)
     4b6:	687b      	ldr	r3, [r7, #4]
     4b8:	2b00      	cmp	r3, #0
     4ba:	d10a      	bne.n	4d2 <set_setDeadbandLow+0x2e>
	{
		if (bValid)
     4bc:	1c3b      	adds	r3, r7, #0
     4be:	330b      	adds	r3, #11
     4c0:	781b      	ldrb	r3, [r3, #0]
     4c2:	2b00      	cmp	r3, #0
     4c4:	d002      	beq.n	4cc <set_setDeadbandLow+0x28>
		{
			chamber1.deadbandLow = fNewValue;
     4c6:	4b0a      	ldr	r3, [pc, #40]	; (4f0 <set_setDeadbandLow+0x4c>)
     4c8:	68fa      	ldr	r2, [r7, #12]
     4ca:	639a      	str	r2, [r3, #56]	; 0x38
		}
		return chamber1.deadbandLow;
     4cc:	4b08      	ldr	r3, [pc, #32]	; (4f0 <set_setDeadbandLow+0x4c>)
     4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     4d0:	e009      	b.n	4e6 <set_setDeadbandLow+0x42>
	}
	// return 0;

	else
	{
		if (bValid)
     4d2:	1c3b      	adds	r3, r7, #0
     4d4:	330b      	adds	r3, #11
     4d6:	781b      	ldrb	r3, [r3, #0]
     4d8:	2b00      	cmp	r3, #0
     4da:	d002      	beq.n	4e2 <set_setDeadbandLow+0x3e>
		{
			chamber2.deadbandLow = fNewValue;
     4dc:	4b05      	ldr	r3, [pc, #20]	; (4f4 <set_setDeadbandLow+0x50>)
     4de:	68fa      	ldr	r2, [r7, #12]
     4e0:	639a      	str	r2, [r3, #56]	; 0x38
		}
		return chamber2.deadbandLow;
     4e2:	4b04      	ldr	r3, [pc, #16]	; (4f4 <set_setDeadbandLow+0x50>)
     4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	}

}
     4e6:	1c18      	adds	r0, r3, #0
     4e8:	46bd      	mov	sp, r7
     4ea:	b004      	add	sp, #16
     4ec:	bd80      	pop	{r7, pc}
     4ee:	46c0      	nop			; (mov r8, r8)
     4f0:	200009b8 	.word	0x200009b8
     4f4:	20000960 	.word	0x20000960

000004f8 <set_setChamberOffset>:
	return nTcha2_offset;
}
*/

float set_setChamberOffset (float fNewValue, bool bValid, int nZone)
{
     4f8:	b580      	push	{r7, lr}
     4fa:	b084      	sub	sp, #16
     4fc:	af00      	add	r7, sp, #0
     4fe:	60f8      	str	r0, [r7, #12]
     500:	607a      	str	r2, [r7, #4]
     502:	1c3b      	adds	r3, r7, #0
     504:	330b      	adds	r3, #11
     506:	1c0a      	adds	r2, r1, #0
     508:	701a      	strb	r2, [r3, #0]
	if (nZone == 0)
     50a:	687b      	ldr	r3, [r7, #4]
     50c:	2b00      	cmp	r3, #0
     50e:	d116      	bne.n	53e <set_setChamberOffset+0x46>
	{
		if (bValid)
     510:	1c3b      	adds	r3, r7, #0
     512:	330b      	adds	r3, #11
     514:	781b      	ldrb	r3, [r3, #0]
     516:	2b00      	cmp	r3, #0
     518:	d00e      	beq.n	538 <set_setChamberOffset+0x40>
		{
			chamber1.chamberOffset = fNewValue;
     51a:	4b16      	ldr	r3, [pc, #88]	; (574 <set_setChamberOffset+0x7c>)
     51c:	68fa      	ldr	r2, [r7, #12]
     51e:	641a      	str	r2, [r3, #64]	; 0x40
			eepromDataInfo.pAddr = &chamber1.chamberOffset;
     520:	4b15      	ldr	r3, [pc, #84]	; (578 <set_setChamberOffset+0x80>)
     522:	4a16      	ldr	r2, [pc, #88]	; (57c <set_setChamberOffset+0x84>)
     524:	601a      	str	r2, [r3, #0]
			eepromDataInfo.size = sizeof(chamber1.chamberOffset);
     526:	4b14      	ldr	r3, [pc, #80]	; (578 <set_setChamberOffset+0x80>)
     528:	2204      	movs	r2, #4
     52a:	711a      	strb	r2, [r3, #4]
			eepromDataInfo.nonvolatileFlag = true;
     52c:	4b12      	ldr	r3, [pc, #72]	; (578 <set_setChamberOffset+0x80>)
     52e:	2201      	movs	r2, #1
     530:	715a      	strb	r2, [r3, #5]
			writeToEepromFlag = true;
     532:	4b13      	ldr	r3, [pc, #76]	; (580 <set_setChamberOffset+0x88>)
     534:	2201      	movs	r2, #1
     536:	701a      	strb	r2, [r3, #0]
		}
		return chamber1.chamberOffset;
     538:	4b0e      	ldr	r3, [pc, #56]	; (574 <set_setChamberOffset+0x7c>)
     53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     53c:	e015      	b.n	56a <set_setChamberOffset+0x72>
	}
	// return 0;

	else
	{
		if (bValid)
     53e:	1c3b      	adds	r3, r7, #0
     540:	330b      	adds	r3, #11
     542:	781b      	ldrb	r3, [r3, #0]
     544:	2b00      	cmp	r3, #0
     546:	d00e      	beq.n	566 <set_setChamberOffset+0x6e>
		{
			chamber2.chamberOffset = fNewValue;
     548:	4b0e      	ldr	r3, [pc, #56]	; (584 <set_setChamberOffset+0x8c>)
     54a:	68fa      	ldr	r2, [r7, #12]
     54c:	641a      	str	r2, [r3, #64]	; 0x40
			eepromDataInfo.pAddr = &chamber2.chamberOffset;
     54e:	4b0a      	ldr	r3, [pc, #40]	; (578 <set_setChamberOffset+0x80>)
     550:	4a0d      	ldr	r2, [pc, #52]	; (588 <set_setChamberOffset+0x90>)
     552:	601a      	str	r2, [r3, #0]
			eepromDataInfo.size = sizeof(chamber2.chamberOffset);
     554:	4b08      	ldr	r3, [pc, #32]	; (578 <set_setChamberOffset+0x80>)
     556:	2204      	movs	r2, #4
     558:	711a      	strb	r2, [r3, #4]
			eepromDataInfo.nonvolatileFlag = true;
     55a:	4b07      	ldr	r3, [pc, #28]	; (578 <set_setChamberOffset+0x80>)
     55c:	2201      	movs	r2, #1
     55e:	715a      	strb	r2, [r3, #5]
			writeToEepromFlag = true;
     560:	4b07      	ldr	r3, [pc, #28]	; (580 <set_setChamberOffset+0x88>)
     562:	2201      	movs	r2, #1
     564:	701a      	strb	r2, [r3, #0]
		}
		return chamber2.chamberOffset;
     566:	4b07      	ldr	r3, [pc, #28]	; (584 <set_setChamberOffset+0x8c>)
     568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	}
	
}
     56a:	1c18      	adds	r0, r3, #0
     56c:	46bd      	mov	sp, r7
     56e:	b004      	add	sp, #16
     570:	bd80      	pop	{r7, pc}
     572:	46c0      	nop			; (mov r8, r8)
     574:	200009b8 	.word	0x200009b8
     578:	200008dc 	.word	0x200008dc
     57c:	200009f8 	.word	0x200009f8
     580:	200002f4 	.word	0x200002f4
     584:	20000960 	.word	0x20000960
     588:	200009a0 	.word	0x200009a0

0000058c <set_setFan1>:

float set_setFan1 (float fNewValue, bool bValid)
{
     58c:	b580      	push	{r7, lr}
     58e:	b082      	sub	sp, #8
     590:	af00      	add	r7, sp, #0
     592:	6078      	str	r0, [r7, #4]
     594:	1c0a      	adds	r2, r1, #0
     596:	1cfb      	adds	r3, r7, #3
     598:	701a      	strb	r2, [r3, #0]
	if (bValid)
     59a:	1cfb      	adds	r3, r7, #3
     59c:	781b      	ldrb	r3, [r3, #0]
     59e:	2b00      	cmp	r3, #0
     5a0:	d005      	beq.n	5ae <set_setFan1+0x22>
	{
		fan1.targetDutyPercent = (uint32_t)fNewValue;
     5a2:	4b05      	ldr	r3, [pc, #20]	; (5b8 <set_setFan1+0x2c>)
     5a4:	6878      	ldr	r0, [r7, #4]
     5a6:	4798      	blx	r3
     5a8:	1c02      	adds	r2, r0, #0
     5aa:	4b04      	ldr	r3, [pc, #16]	; (5bc <set_setFan1+0x30>)
     5ac:	619a      	str	r2, [r3, #24]
	}
	return fNewValue;
     5ae:	687b      	ldr	r3, [r7, #4]
}
     5b0:	1c18      	adds	r0, r3, #0
     5b2:	46bd      	mov	sp, r7
     5b4:	b002      	add	sp, #8
     5b6:	bd80      	pop	{r7, pc}
     5b8:	0001f6bd 	.word	0x0001f6bd
     5bc:	20000e84 	.word	0x20000e84

000005c0 <set_setFan2>:

float set_setFan2 (float fNewValue, bool bValid)
{
     5c0:	b580      	push	{r7, lr}
     5c2:	b082      	sub	sp, #8
     5c4:	af00      	add	r7, sp, #0
     5c6:	6078      	str	r0, [r7, #4]
     5c8:	1c0a      	adds	r2, r1, #0
     5ca:	1cfb      	adds	r3, r7, #3
     5cc:	701a      	strb	r2, [r3, #0]
	if (bValid)
     5ce:	1cfb      	adds	r3, r7, #3
     5d0:	781b      	ldrb	r3, [r3, #0]
     5d2:	2b00      	cmp	r3, #0
     5d4:	d005      	beq.n	5e2 <set_setFan2+0x22>
	{
		fan2.targetDutyPercent = (uint32_t)fNewValue;
     5d6:	4b05      	ldr	r3, [pc, #20]	; (5ec <set_setFan2+0x2c>)
     5d8:	6878      	ldr	r0, [r7, #4]
     5da:	4798      	blx	r3
     5dc:	1c02      	adds	r2, r0, #0
     5de:	4b04      	ldr	r3, [pc, #16]	; (5f0 <set_setFan2+0x30>)
     5e0:	619a      	str	r2, [r3, #24]
	}
	return fNewValue;
     5e2:	687b      	ldr	r3, [r7, #4]
}
     5e4:	1c18      	adds	r0, r3, #0
     5e6:	46bd      	mov	sp, r7
     5e8:	b002      	add	sp, #8
     5ea:	bd80      	pop	{r7, pc}
     5ec:	0001f6bd 	.word	0x0001f6bd
     5f0:	20000c58 	.word	0x20000c58

000005f4 <set_setFan3>:

float set_setFan3 (float fNewValue, bool bValid)
{
     5f4:	b580      	push	{r7, lr}
     5f6:	b082      	sub	sp, #8
     5f8:	af00      	add	r7, sp, #0
     5fa:	6078      	str	r0, [r7, #4]
     5fc:	1c0a      	adds	r2, r1, #0
     5fe:	1cfb      	adds	r3, r7, #3
     600:	701a      	strb	r2, [r3, #0]
	if (bValid)
     602:	1cfb      	adds	r3, r7, #3
     604:	781b      	ldrb	r3, [r3, #0]
     606:	2b00      	cmp	r3, #0
     608:	d005      	beq.n	616 <set_setFan3+0x22>
	{
		fan3.targetDutyPercent = (uint32_t)fNewValue;
     60a:	4b08      	ldr	r3, [pc, #32]	; (62c <set_setFan3+0x38>)
     60c:	6878      	ldr	r0, [r7, #4]
     60e:	4798      	blx	r3
     610:	1c02      	adds	r2, r0, #0
     612:	4b07      	ldr	r3, [pc, #28]	; (630 <set_setFan3+0x3c>)
     614:	619a      	str	r2, [r3, #24]
	}
	return fan3.rpm;
     616:	4b06      	ldr	r3, [pc, #24]	; (630 <set_setFan3+0x3c>)
     618:	691a      	ldr	r2, [r3, #16]
     61a:	4b06      	ldr	r3, [pc, #24]	; (634 <set_setFan3+0x40>)
     61c:	1c10      	adds	r0, r2, #0
     61e:	4798      	blx	r3
     620:	1c03      	adds	r3, r0, #0
}
     622:	1c18      	adds	r0, r3, #0
     624:	46bd      	mov	sp, r7
     626:	b002      	add	sp, #8
     628:	bd80      	pop	{r7, pc}
     62a:	46c0      	nop			; (mov r8, r8)
     62c:	0001f6bd 	.word	0x0001f6bd
     630:	20000d18 	.word	0x20000d18
     634:	0002046d 	.word	0x0002046d

00000638 <set_setFan4>:

float set_setFan4 (float fNewValue, bool bValid)
{
     638:	b580      	push	{r7, lr}
     63a:	b082      	sub	sp, #8
     63c:	af00      	add	r7, sp, #0
     63e:	6078      	str	r0, [r7, #4]
     640:	1c0a      	adds	r2, r1, #0
     642:	1cfb      	adds	r3, r7, #3
     644:	701a      	strb	r2, [r3, #0]
	if (bValid)
     646:	1cfb      	adds	r3, r7, #3
     648:	781b      	ldrb	r3, [r3, #0]
     64a:	2b00      	cmp	r3, #0
     64c:	d005      	beq.n	65a <set_setFan4+0x22>
	{
		fan4.targetDutyPercent = (uint32_t)fNewValue;
     64e:	4b08      	ldr	r3, [pc, #32]	; (670 <set_setFan4+0x38>)
     650:	6878      	ldr	r0, [r7, #4]
     652:	4798      	blx	r3
     654:	1c02      	adds	r2, r0, #0
     656:	4b07      	ldr	r3, [pc, #28]	; (674 <set_setFan4+0x3c>)
     658:	619a      	str	r2, [r3, #24]
	}
	return fan4.rpm;
     65a:	4b06      	ldr	r3, [pc, #24]	; (674 <set_setFan4+0x3c>)
     65c:	691a      	ldr	r2, [r3, #16]
     65e:	4b06      	ldr	r3, [pc, #24]	; (678 <set_setFan4+0x40>)
     660:	1c10      	adds	r0, r2, #0
     662:	4798      	blx	r3
     664:	1c03      	adds	r3, r0, #0
}
     666:	1c18      	adds	r0, r3, #0
     668:	46bd      	mov	sp, r7
     66a:	b002      	add	sp, #8
     66c:	bd80      	pop	{r7, pc}
     66e:	46c0      	nop			; (mov r8, r8)
     670:	0001f6bd 	.word	0x0001f6bd
     674:	20000adc 	.word	0x20000adc
     678:	0002046d 	.word	0x0002046d

0000067c <set_setFanMin>:
	}
}
*/

float set_setFanMin (float fNewValue, bool bValid, int nZone)
{
     67c:	b580      	push	{r7, lr}
     67e:	b084      	sub	sp, #16
     680:	af00      	add	r7, sp, #0
     682:	60f8      	str	r0, [r7, #12]
     684:	607a      	str	r2, [r7, #4]
     686:	1c3b      	adds	r3, r7, #0
     688:	330b      	adds	r3, #11
     68a:	1c0a      	adds	r2, r1, #0
     68c:	701a      	strb	r2, [r3, #0]
	if (nZone == 0)
     68e:	687b      	ldr	r3, [r7, #4]
     690:	2b00      	cmp	r3, #0
     692:	d10a      	bne.n	6aa <set_setFanMin+0x2e>
	{
		if (bValid)
     694:	1c3b      	adds	r3, r7, #0
     696:	330b      	adds	r3, #11
     698:	781b      	ldrb	r3, [r3, #0]
     69a:	2b00      	cmp	r3, #0
     69c:	d002      	beq.n	6a4 <set_setFanMin+0x28>
		{
			fan1.minDuty = fNewValue;
     69e:	4b0a      	ldr	r3, [pc, #40]	; (6c8 <set_setFanMin+0x4c>)
     6a0:	68fa      	ldr	r2, [r7, #12]
     6a2:	609a      	str	r2, [r3, #8]
			//fan1.minDuty = (uint32_t)((fNewValue*DEFAULT_FAN_MAX_DUTY)/100);
		}
		return fan1.minDuty;
     6a4:	4b08      	ldr	r3, [pc, #32]	; (6c8 <set_setFanMin+0x4c>)
     6a6:	689b      	ldr	r3, [r3, #8]
     6a8:	e009      	b.n	6be <set_setFanMin+0x42>
		//return ((float)fan1.minDuty/DEFAULT_FAN_MAX_DUTY)*100;
	}
	else
	{
		if (bValid)
     6aa:	1c3b      	adds	r3, r7, #0
     6ac:	330b      	adds	r3, #11
     6ae:	781b      	ldrb	r3, [r3, #0]
     6b0:	2b00      	cmp	r3, #0
     6b2:	d002      	beq.n	6ba <set_setFanMin+0x3e>
		{
			fan2.minDuty = fNewValue;
     6b4:	4b05      	ldr	r3, [pc, #20]	; (6cc <set_setFanMin+0x50>)
     6b6:	68fa      	ldr	r2, [r7, #12]
     6b8:	609a      	str	r2, [r3, #8]
			//fan2.minDuty = (uint32_t)((fNewValue*DEFAULT_FAN_MAX_DUTY)/100);
		}
		return fan2.minDuty;
     6ba:	4b04      	ldr	r3, [pc, #16]	; (6cc <set_setFanMin+0x50>)
     6bc:	689b      	ldr	r3, [r3, #8]
		//return ((float)fan2.minDuty/DEFAULT_FAN_MAX_DUTY)*100;
	}
}
     6be:	1c18      	adds	r0, r3, #0
     6c0:	46bd      	mov	sp, r7
     6c2:	b004      	add	sp, #16
     6c4:	bd80      	pop	{r7, pc}
     6c6:	46c0      	nop			; (mov r8, r8)
     6c8:	20000e84 	.word	0x20000e84
     6cc:	20000c58 	.word	0x20000c58

000006d0 <set_setFanMax>:

float set_setFanMax (float fNewValue, bool bValid, int nZone)
{
     6d0:	b580      	push	{r7, lr}
     6d2:	b084      	sub	sp, #16
     6d4:	af00      	add	r7, sp, #0
     6d6:	60f8      	str	r0, [r7, #12]
     6d8:	607a      	str	r2, [r7, #4]
     6da:	1c3b      	adds	r3, r7, #0
     6dc:	330b      	adds	r3, #11
     6de:	1c0a      	adds	r2, r1, #0
     6e0:	701a      	strb	r2, [r3, #0]
	if (nZone == 0)
     6e2:	687b      	ldr	r3, [r7, #4]
     6e4:	2b00      	cmp	r3, #0
     6e6:	d10a      	bne.n	6fe <set_setFanMax+0x2e>
	{
		if (bValid)
     6e8:	1c3b      	adds	r3, r7, #0
     6ea:	330b      	adds	r3, #11
     6ec:	781b      	ldrb	r3, [r3, #0]
     6ee:	2b00      	cmp	r3, #0
     6f0:	d002      	beq.n	6f8 <set_setFanMax+0x28>
		{
			fan1.maxDuty = fNewValue;
     6f2:	4b0a      	ldr	r3, [pc, #40]	; (71c <set_setFanMax+0x4c>)
     6f4:	68fa      	ldr	r2, [r7, #12]
     6f6:	60da      	str	r2, [r3, #12]
			//fan1.maxDuty = (uint32_t)((fNewValue*DEFAULT_FAN_MAX_DUTY)/100);
		}
		return fan1.maxDuty;
     6f8:	4b08      	ldr	r3, [pc, #32]	; (71c <set_setFanMax+0x4c>)
     6fa:	68db      	ldr	r3, [r3, #12]
     6fc:	e009      	b.n	712 <set_setFanMax+0x42>
		//return ((float)fan1.maxDuty/DEFAULT_FAN_MAX_DUTY)*100;
	}
	else
	{
		if (bValid)
     6fe:	1c3b      	adds	r3, r7, #0
     700:	330b      	adds	r3, #11
     702:	781b      	ldrb	r3, [r3, #0]
     704:	2b00      	cmp	r3, #0
     706:	d002      	beq.n	70e <set_setFanMax+0x3e>
		{
			fan2.maxDuty = fNewValue;
     708:	4b05      	ldr	r3, [pc, #20]	; (720 <set_setFanMax+0x50>)
     70a:	68fa      	ldr	r2, [r7, #12]
     70c:	60da      	str	r2, [r3, #12]
			//fan2.maxDuty = (uint32_t)((fNewValue*DEFAULT_FAN_MAX_DUTY)/100);
		}
		return fan2.maxDuty;
     70e:	4b04      	ldr	r3, [pc, #16]	; (720 <set_setFanMax+0x50>)
     710:	68db      	ldr	r3, [r3, #12]
		//return ((float)fan2.maxDuty/DEFAULT_FAN_MAX_DUTY)*100;
	}
}
     712:	1c18      	adds	r0, r3, #0
     714:	46bd      	mov	sp, r7
     716:	b004      	add	sp, #16
     718:	bd80      	pop	{r7, pc}
     71a:	46c0      	nop			; (mov r8, r8)
     71c:	20000e84 	.word	0x20000e84
     720:	20000c58 	.word	0x20000c58

00000724 <set_setFanRPM1>:

float set_setFanRPM1 (float fNewValue, bool bValid)
{
     724:	b580      	push	{r7, lr}
     726:	b082      	sub	sp, #8
     728:	af00      	add	r7, sp, #0
     72a:	6078      	str	r0, [r7, #4]
     72c:	1c0a      	adds	r2, r1, #0
     72e:	1cfb      	adds	r3, r7, #3
     730:	701a      	strb	r2, [r3, #0]
	{
		//last_tac_rpm0 = (uint32_t)(fNewValue);
		//fan1.tach = last_tac_rpm0;
	}
	
	return fan1.rpm;
     732:	4b05      	ldr	r3, [pc, #20]	; (748 <set_setFanRPM1+0x24>)
     734:	691a      	ldr	r2, [r3, #16]
     736:	4b05      	ldr	r3, [pc, #20]	; (74c <set_setFanRPM1+0x28>)
     738:	1c10      	adds	r0, r2, #0
     73a:	4798      	blx	r3
     73c:	1c03      	adds	r3, r0, #0
}
     73e:	1c18      	adds	r0, r3, #0
     740:	46bd      	mov	sp, r7
     742:	b002      	add	sp, #8
     744:	bd80      	pop	{r7, pc}
     746:	46c0      	nop			; (mov r8, r8)
     748:	20000e84 	.word	0x20000e84
     74c:	0002046d 	.word	0x0002046d

00000750 <set_setFanRPM2>:

float set_setFanRPM2 (float fNewValue, bool bValid)
{
     750:	b580      	push	{r7, lr}
     752:	b082      	sub	sp, #8
     754:	af00      	add	r7, sp, #0
     756:	6078      	str	r0, [r7, #4]
     758:	1c0a      	adds	r2, r1, #0
     75a:	1cfb      	adds	r3, r7, #3
     75c:	701a      	strb	r2, [r3, #0]
	{
		//last_tac_rpm1 = (uint32_t)(fNewValue);
		//fan2.tach = last_tac_rpm0;
	}
	
	return fan2.rpm;
     75e:	4b05      	ldr	r3, [pc, #20]	; (774 <set_setFanRPM2+0x24>)
     760:	691a      	ldr	r2, [r3, #16]
     762:	4b05      	ldr	r3, [pc, #20]	; (778 <set_setFanRPM2+0x28>)
     764:	1c10      	adds	r0, r2, #0
     766:	4798      	blx	r3
     768:	1c03      	adds	r3, r0, #0
}
     76a:	1c18      	adds	r0, r3, #0
     76c:	46bd      	mov	sp, r7
     76e:	b002      	add	sp, #8
     770:	bd80      	pop	{r7, pc}
     772:	46c0      	nop			; (mov r8, r8)
     774:	20000c58 	.word	0x20000c58
     778:	0002046d 	.word	0x0002046d

0000077c <set_setVarqVoltage>:

float set_setVarqVoltage (float fNewValue, bool bValid, int nZone)
{
     77c:	b580      	push	{r7, lr}
     77e:	b084      	sub	sp, #16
     780:	af00      	add	r7, sp, #0
     782:	60f8      	str	r0, [r7, #12]
     784:	607a      	str	r2, [r7, #4]
     786:	1c3b      	adds	r3, r7, #0
     788:	330b      	adds	r3, #11
     78a:	1c0a      	adds	r2, r1, #0
     78c:	701a      	strb	r2, [r3, #0]
	if (bValid)
		dblVarqVoltage = fNewValue;
		
	return dblVarqVoltage;
*/	
	if (nZone == 0)
     78e:	687b      	ldr	r3, [r7, #4]
     790:	2b00      	cmp	r3, #0
     792:	d10a      	bne.n	7aa <set_setVarqVoltage+0x2e>
	{
		if (bValid)
     794:	1c3b      	adds	r3, r7, #0
     796:	330b      	adds	r3, #11
     798:	781b      	ldrb	r3, [r3, #0]
     79a:	2b00      	cmp	r3, #0
     79c:	d002      	beq.n	7a4 <set_setVarqVoltage+0x28>
		{
			chamber1.Vvarq = fNewValue;
     79e:	4b0a      	ldr	r3, [pc, #40]	; (7c8 <set_setVarqVoltage+0x4c>)
     7a0:	68fa      	ldr	r2, [r7, #12]
     7a2:	625a      	str	r2, [r3, #36]	; 0x24
		}
		return chamber1.Vvarq;
     7a4:	4b08      	ldr	r3, [pc, #32]	; (7c8 <set_setVarqVoltage+0x4c>)
     7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     7a8:	e009      	b.n	7be <set_setVarqVoltage+0x42>
	}
	//return 0;

	else
	{
		if (bValid)
     7aa:	1c3b      	adds	r3, r7, #0
     7ac:	330b      	adds	r3, #11
     7ae:	781b      	ldrb	r3, [r3, #0]
     7b0:	2b00      	cmp	r3, #0
     7b2:	d002      	beq.n	7ba <set_setVarqVoltage+0x3e>
		{
			chamber2.Vvarq = fNewValue;
     7b4:	4b05      	ldr	r3, [pc, #20]	; (7cc <set_setVarqVoltage+0x50>)
     7b6:	68fa      	ldr	r2, [r7, #12]
     7b8:	625a      	str	r2, [r3, #36]	; 0x24
		}
		return chamber2.Vvarq;
     7ba:	4b04      	ldr	r3, [pc, #16]	; (7cc <set_setVarqVoltage+0x50>)
     7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	}
	
}
     7be:	1c18      	adds	r0, r3, #0
     7c0:	46bd      	mov	sp, r7
     7c2:	b004      	add	sp, #16
     7c4:	bd80      	pop	{r7, pc}
     7c6:	46c0      	nop			; (mov r8, r8)
     7c8:	200009b8 	.word	0x200009b8
     7cc:	20000960 	.word	0x20000960

000007d0 <set_setVmaxCOP>:

float set_setVmaxCOP (float fNewValue, bool bValid, int nZone)
{
     7d0:	b580      	push	{r7, lr}
     7d2:	b084      	sub	sp, #16
     7d4:	af00      	add	r7, sp, #0
     7d6:	60f8      	str	r0, [r7, #12]
     7d8:	607a      	str	r2, [r7, #4]
     7da:	1c3b      	adds	r3, r7, #0
     7dc:	330b      	adds	r3, #11
     7de:	1c0a      	adds	r2, r1, #0
     7e0:	701a      	strb	r2, [r3, #0]
	if (nZone == 0)
     7e2:	687b      	ldr	r3, [r7, #4]
     7e4:	2b00      	cmp	r3, #0
     7e6:	d10a      	bne.n	7fe <set_setVmaxCOP+0x2e>
	{
		if (bValid)
     7e8:	1c3b      	adds	r3, r7, #0
     7ea:	330b      	adds	r3, #11
     7ec:	781b      	ldrb	r3, [r3, #0]
     7ee:	2b00      	cmp	r3, #0
     7f0:	d002      	beq.n	7f8 <set_setVmaxCOP+0x28>
		{
			chamber1.VmaxCOP = fNewValue;
     7f2:	4b0a      	ldr	r3, [pc, #40]	; (81c <set_setVmaxCOP+0x4c>)
     7f4:	68fa      	ldr	r2, [r7, #12]
     7f6:	621a      	str	r2, [r3, #32]
		}
		return chamber1.VmaxCOP;
     7f8:	4b08      	ldr	r3, [pc, #32]	; (81c <set_setVmaxCOP+0x4c>)
     7fa:	6a1b      	ldr	r3, [r3, #32]
     7fc:	e009      	b.n	812 <set_setVmaxCOP+0x42>
	}
	//return 0;

	else
	{
		if (bValid)
     7fe:	1c3b      	adds	r3, r7, #0
     800:	330b      	adds	r3, #11
     802:	781b      	ldrb	r3, [r3, #0]
     804:	2b00      	cmp	r3, #0
     806:	d002      	beq.n	80e <set_setVmaxCOP+0x3e>
		{
			chamber2.VmaxCOP = fNewValue;
     808:	4b05      	ldr	r3, [pc, #20]	; (820 <set_setVmaxCOP+0x50>)
     80a:	68fa      	ldr	r2, [r7, #12]
     80c:	621a      	str	r2, [r3, #32]
		}
		return chamber2.VmaxCOP;
     80e:	4b04      	ldr	r3, [pc, #16]	; (820 <set_setVmaxCOP+0x50>)
     810:	6a1b      	ldr	r3, [r3, #32]
	}

}
     812:	1c18      	adds	r0, r3, #0
     814:	46bd      	mov	sp, r7
     816:	b004      	add	sp, #16
     818:	bd80      	pop	{r7, pc}
     81a:	46c0      	nop			; (mov r8, r8)
     81c:	200009b8 	.word	0x200009b8
     820:	20000960 	.word	0x20000960

00000824 <set_setFanState>:

float set_setFanState (float fNewValue, bool bValid, int nZone)
{
     824:	b580      	push	{r7, lr}
     826:	b084      	sub	sp, #16
     828:	af00      	add	r7, sp, #0
     82a:	60f8      	str	r0, [r7, #12]
     82c:	607a      	str	r2, [r7, #4]
     82e:	1c3b      	adds	r3, r7, #0
     830:	330b      	adds	r3, #11
     832:	1c0a      	adds	r2, r1, #0
     834:	701a      	strb	r2, [r3, #0]
	if (nZone == 0)
     836:	687b      	ldr	r3, [r7, #4]
     838:	2b00      	cmp	r3, #0
     83a:	d106      	bne.n	84a <set_setFanState+0x26>
	{
		if (bValid)
		{
			//fan1.state = (bool)(fNewValue);
		}
		return fan1.state;
     83c:	4b05      	ldr	r3, [pc, #20]	; (854 <set_setFanState+0x30>)
     83e:	7d5a      	ldrb	r2, [r3, #21]
     840:	4b05      	ldr	r3, [pc, #20]	; (858 <set_setFanState+0x34>)
     842:	1c10      	adds	r0, r2, #0
     844:	4798      	blx	r3
     846:	1c03      	adds	r3, r0, #0
     848:	e000      	b.n	84c <set_setFanState+0x28>
	}
	return 0;
     84a:	2300      	movs	r3, #0
			//fan2.Vbottom = (bool)(fNewValue);
		}
		return fan2.state;
	}
*/
}
     84c:	1c18      	adds	r0, r3, #0
     84e:	46bd      	mov	sp, r7
     850:	b004      	add	sp, #16
     852:	bd80      	pop	{r7, pc}
     854:	20000e84 	.word	0x20000e84
     858:	0002046d 	.word	0x0002046d

0000085c <set_setMaxBulkPower>:

float set_setMaxBulkPower (float fNewValue, bool bValid, int nZone)
{
     85c:	b580      	push	{r7, lr}
     85e:	b084      	sub	sp, #16
     860:	af00      	add	r7, sp, #0
     862:	60f8      	str	r0, [r7, #12]
     864:	607a      	str	r2, [r7, #4]
     866:	1c3b      	adds	r3, r7, #0
     868:	330b      	adds	r3, #11
     86a:	1c0a      	adds	r2, r1, #0
     86c:	701a      	strb	r2, [r3, #0]
	if (bValid)
     86e:	1c3b      	adds	r3, r7, #0
     870:	330b      	adds	r3, #11
     872:	781b      	ldrb	r3, [r3, #0]
     874:	2b00      	cmp	r3, #0
     876:	d009      	beq.n	88c <set_setMaxBulkPower+0x30>
	{
	  maxOutputVoltage = (uint32_t)(fNewValue);
     878:	4b07      	ldr	r3, [pc, #28]	; (898 <set_setMaxBulkPower+0x3c>)
     87a:	68f8      	ldr	r0, [r7, #12]
     87c:	4798      	blx	r3
     87e:	1c02      	adds	r2, r0, #0
     880:	4b06      	ldr	r3, [pc, #24]	; (89c <set_setMaxBulkPower+0x40>)
     882:	1c10      	adds	r0, r2, #0
     884:	4798      	blx	r3
     886:	1c02      	adds	r2, r0, #0
     888:	4b05      	ldr	r3, [pc, #20]	; (8a0 <set_setMaxBulkPower+0x44>)
     88a:	601a      	str	r2, [r3, #0]
	  //pidSetOutputLimits(&pidLoop1, 0, maxOutputVoltage);
	  //pidSetOutputLimits(&pidLoop2, 0, maxOutputVoltage);
	}
	
	return maxOutputVoltage;
     88c:	4b04      	ldr	r3, [pc, #16]	; (8a0 <set_setMaxBulkPower+0x44>)
     88e:	681b      	ldr	r3, [r3, #0]
}
     890:	1c18      	adds	r0, r3, #0
     892:	46bd      	mov	sp, r7
     894:	b004      	add	sp, #16
     896:	bd80      	pop	{r7, pc}
     898:	0001f6bd 	.word	0x0001f6bd
     89c:	0002046d 	.word	0x0002046d
     8a0:	20000084 	.word	0x20000084

000008a4 <readPhpVoltage>:

float readPhpVoltage (float fNewValue, bool bValid, int nZone)
{
     8a4:	b580      	push	{r7, lr}
     8a6:	b084      	sub	sp, #16
     8a8:	af00      	add	r7, sp, #0
     8aa:	60f8      	str	r0, [r7, #12]
     8ac:	607a      	str	r2, [r7, #4]
     8ae:	1c3b      	adds	r3, r7, #0
     8b0:	330b      	adds	r3, #11
     8b2:	1c0a      	adds	r2, r1, #0
     8b4:	701a      	strb	r2, [r3, #0]
	return (float)ps1.phpVoltage;
     8b6:	4b03      	ldr	r3, [pc, #12]	; (8c4 <readPhpVoltage+0x20>)
     8b8:	69db      	ldr	r3, [r3, #28]
}
     8ba:	1c18      	adds	r0, r3, #0
     8bc:	46bd      	mov	sp, r7
     8be:	b004      	add	sp, #16
     8c0:	bd80      	pop	{r7, pc}
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	20000a84 	.word	0x20000a84

000008c8 <readPhpCurrent>:

float readPhpCurrent (float fNewValue, bool bValid, int nZone)
{
     8c8:	b580      	push	{r7, lr}
     8ca:	b084      	sub	sp, #16
     8cc:	af00      	add	r7, sp, #0
     8ce:	60f8      	str	r0, [r7, #12]
     8d0:	607a      	str	r2, [r7, #4]
     8d2:	1c3b      	adds	r3, r7, #0
     8d4:	330b      	adds	r3, #11
     8d6:	1c0a      	adds	r2, r1, #0
     8d8:	701a      	strb	r2, [r3, #0]
	return (float)ps1.outputCurrent;
     8da:	4b03      	ldr	r3, [pc, #12]	; (8e8 <readPhpCurrent+0x20>)
     8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
     8de:	1c18      	adds	r0, r3, #0
     8e0:	46bd      	mov	sp, r7
     8e2:	b004      	add	sp, #16
     8e4:	bd80      	pop	{r7, pc}
     8e6:	46c0      	nop			; (mov r8, r8)
     8e8:	20000a84 	.word	0x20000a84

000008ec <readBulkVoltage>:

float readBulkVoltage (float fNewValue, bool bValid, int nZone)
{
     8ec:	b580      	push	{r7, lr}
     8ee:	b084      	sub	sp, #16
     8f0:	af00      	add	r7, sp, #0
     8f2:	60f8      	str	r0, [r7, #12]
     8f4:	607a      	str	r2, [r7, #4]
     8f6:	1c3b      	adds	r3, r7, #0
     8f8:	330b      	adds	r3, #11
     8fa:	1c0a      	adds	r2, r1, #0
     8fc:	701a      	strb	r2, [r3, #0]
	return (float)ps1.bulkVoltage;
     8fe:	4b03      	ldr	r3, [pc, #12]	; (90c <readBulkVoltage+0x20>)
     900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
     902:	1c18      	adds	r0, r3, #0
     904:	46bd      	mov	sp, r7
     906:	b004      	add	sp, #16
     908:	bd80      	pop	{r7, pc}
     90a:	46c0      	nop			; (mov r8, r8)
     90c:	20000a84 	.word	0x20000a84

00000910 <readLogicVoltage>:

float readLogicVoltage (float fNewValue, bool bValid, int nZone)
{
     910:	b580      	push	{r7, lr}
     912:	b084      	sub	sp, #16
     914:	af00      	add	r7, sp, #0
     916:	60f8      	str	r0, [r7, #12]
     918:	607a      	str	r2, [r7, #4]
     91a:	1c3b      	adds	r3, r7, #0
     91c:	330b      	adds	r3, #11
     91e:	1c0a      	adds	r2, r1, #0
     920:	701a      	strb	r2, [r3, #0]
	return (float)ps1.logicVoltage;
     922:	4b03      	ldr	r3, [pc, #12]	; (930 <readLogicVoltage+0x20>)
     924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
     926:	1c18      	adds	r0, r3, #0
     928:	46bd      	mov	sp, r7
     92a:	b004      	add	sp, #16
     92c:	bd80      	pop	{r7, pc}
     92e:	46c0      	nop			; (mov r8, r8)
     930:	20000a84 	.word	0x20000a84

00000934 <readStandbyVoltage>:

float readStandbyVoltage (float fNewValue, bool bValid, int nZone)
{
     934:	b580      	push	{r7, lr}
     936:	b084      	sub	sp, #16
     938:	af00      	add	r7, sp, #0
     93a:	60f8      	str	r0, [r7, #12]
     93c:	607a      	str	r2, [r7, #4]
     93e:	1c3b      	adds	r3, r7, #0
     940:	330b      	adds	r3, #11
     942:	1c0a      	adds	r2, r1, #0
     944:	701a      	strb	r2, [r3, #0]
	return (float)ps1.standbyVoltage;
     946:	4b03      	ldr	r3, [pc, #12]	; (954 <readStandbyVoltage+0x20>)
     948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
     94a:	1c18      	adds	r0, r3, #0
     94c:	46bd      	mov	sp, r7
     94e:	b004      	add	sp, #16
     950:	bd80      	pop	{r7, pc}
     952:	46c0      	nop			; (mov r8, r8)
     954:	20000a84 	.word	0x20000a84

00000958 <readBatteryVoltage>:

float readBatteryVoltage (float fNewValue, bool bValid, int nZone)
{
     958:	b580      	push	{r7, lr}
     95a:	b084      	sub	sp, #16
     95c:	af00      	add	r7, sp, #0
     95e:	60f8      	str	r0, [r7, #12]
     960:	607a      	str	r2, [r7, #4]
     962:	1c3b      	adds	r3, r7, #0
     964:	330b      	adds	r3, #11
     966:	1c0a      	adds	r2, r1, #0
     968:	701a      	strb	r2, [r3, #0]
	return (float)ps1.batteryVoltage;
     96a:	4b03      	ldr	r3, [pc, #12]	; (978 <readBatteryVoltage+0x20>)
     96c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
     96e:	1c18      	adds	r0, r3, #0
     970:	46bd      	mov	sp, r7
     972:	b004      	add	sp, #16
     974:	bd80      	pop	{r7, pc}
     976:	46c0      	nop			; (mov r8, r8)
     978:	20000a84 	.word	0x20000a84

0000097c <readPhpVoltage2>:

float readPhpVoltage2 (float fNewValue, bool bValid, int nZone)
{
     97c:	b580      	push	{r7, lr}
     97e:	b084      	sub	sp, #16
     980:	af00      	add	r7, sp, #0
     982:	60f8      	str	r0, [r7, #12]
     984:	607a      	str	r2, [r7, #4]
     986:	1c3b      	adds	r3, r7, #0
     988:	330b      	adds	r3, #11
     98a:	1c0a      	adds	r2, r1, #0
     98c:	701a      	strb	r2, [r3, #0]
	return (float)ps2.phpVoltage;
     98e:	4b03      	ldr	r3, [pc, #12]	; (99c <readPhpVoltage2+0x20>)
     990:	69db      	ldr	r3, [r3, #28]
}
     992:	1c18      	adds	r0, r3, #0
     994:	46bd      	mov	sp, r7
     996:	b004      	add	sp, #16
     998:	bd80      	pop	{r7, pc}
     99a:	46c0      	nop			; (mov r8, r8)
     99c:	20000d64 	.word	0x20000d64

000009a0 <readPhpCurrent2>:

float readPhpCurrent2 (float fNewValue, bool bValid, int nZone)
{
     9a0:	b580      	push	{r7, lr}
     9a2:	b084      	sub	sp, #16
     9a4:	af00      	add	r7, sp, #0
     9a6:	60f8      	str	r0, [r7, #12]
     9a8:	607a      	str	r2, [r7, #4]
     9aa:	1c3b      	adds	r3, r7, #0
     9ac:	330b      	adds	r3, #11
     9ae:	1c0a      	adds	r2, r1, #0
     9b0:	701a      	strb	r2, [r3, #0]
	return (float)ps2.outputCurrent;
     9b2:	4b03      	ldr	r3, [pc, #12]	; (9c0 <readPhpCurrent2+0x20>)
     9b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
     9b6:	1c18      	adds	r0, r3, #0
     9b8:	46bd      	mov	sp, r7
     9ba:	b004      	add	sp, #16
     9bc:	bd80      	pop	{r7, pc}
     9be:	46c0      	nop			; (mov r8, r8)
     9c0:	20000d64 	.word	0x20000d64

000009c4 <set_setKP_HIGHQ>:

float set_setKP_HIGHQ (float fNewValue, bool bValid, int nZone)
{
     9c4:	b590      	push	{r4, r7, lr}
     9c6:	b085      	sub	sp, #20
     9c8:	af00      	add	r7, sp, #0
     9ca:	60f8      	str	r0, [r7, #12]
     9cc:	607a      	str	r2, [r7, #4]
     9ce:	1c3b      	adds	r3, r7, #0
     9d0:	330b      	adds	r3, #11
     9d2:	1c0a      	adds	r2, r1, #0
     9d4:	701a      	strb	r2, [r3, #0]
	if (nZone == 0)
     9d6:	687b      	ldr	r3, [r7, #4]
     9d8:	2b00      	cmp	r3, #0
     9da:	d117      	bne.n	a0c <set_setKP_HIGHQ+0x48>
	{
		if (bValid)
     9dc:	1c3b      	adds	r3, r7, #0
     9de:	330b      	adds	r3, #11
     9e0:	781b      	ldrb	r3, [r3, #0]
     9e2:	2b00      	cmp	r3, #0
     9e4:	d00f      	beq.n	a06 <set_setKP_HIGHQ+0x42>
		{
			pidLoop1.kp_highq = fNewValue;
     9e6:	4b17      	ldr	r3, [pc, #92]	; (a44 <set_setKP_HIGHQ+0x80>)
     9e8:	68fa      	ldr	r2, [r7, #12]
     9ea:	651a      	str	r2, [r3, #80]	; 0x50
			if (chamber1.mode_state == STATE_HIGH_Q)
     9ec:	4b16      	ldr	r3, [pc, #88]	; (a48 <set_setKP_HIGHQ+0x84>)
     9ee:	781b      	ldrb	r3, [r3, #0]
     9f0:	2b02      	cmp	r3, #2
     9f2:	d108      	bne.n	a06 <set_setKP_HIGHQ+0x42>
			{
				pidSetTunings(&pidLoop1, pidLoop1.kp_highq, pidLoop1.ki_highq, pidLoop1.kd_highq);
     9f4:	4b13      	ldr	r3, [pc, #76]	; (a44 <set_setKP_HIGHQ+0x80>)
     9f6:	6d19      	ldr	r1, [r3, #80]	; 0x50
     9f8:	4b12      	ldr	r3, [pc, #72]	; (a44 <set_setKP_HIGHQ+0x80>)
     9fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
     9fc:	4b11      	ldr	r3, [pc, #68]	; (a44 <set_setKP_HIGHQ+0x80>)
     9fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     a00:	4810      	ldr	r0, [pc, #64]	; (a44 <set_setKP_HIGHQ+0x80>)
     a02:	4c12      	ldr	r4, [pc, #72]	; (a4c <set_setKP_HIGHQ+0x88>)
     a04:	47a0      	blx	r4
			}
		}
		return pidLoop1.kp_highq;
     a06:	4b0f      	ldr	r3, [pc, #60]	; (a44 <set_setKP_HIGHQ+0x80>)
     a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
     a0a:	e016      	b.n	a3a <set_setKP_HIGHQ+0x76>
	}
	//return 0;

	else
	{
		if (bValid)
     a0c:	1c3b      	adds	r3, r7, #0
     a0e:	330b      	adds	r3, #11
     a10:	781b      	ldrb	r3, [r3, #0]
     a12:	2b00      	cmp	r3, #0
     a14:	d00f      	beq.n	a36 <set_setKP_HIGHQ+0x72>
		{
			pidLoop2.kp_highq = fNewValue;
     a16:	4b0e      	ldr	r3, [pc, #56]	; (a50 <set_setKP_HIGHQ+0x8c>)
     a18:	68fa      	ldr	r2, [r7, #12]
     a1a:	651a      	str	r2, [r3, #80]	; 0x50
			if (chamber2.mode_state == STATE_HIGH_Q)
     a1c:	4b0d      	ldr	r3, [pc, #52]	; (a54 <set_setKP_HIGHQ+0x90>)
     a1e:	781b      	ldrb	r3, [r3, #0]
     a20:	2b02      	cmp	r3, #2
     a22:	d108      	bne.n	a36 <set_setKP_HIGHQ+0x72>
			{
				pidSetTunings(&pidLoop2, pidLoop2.kp_highq, pidLoop2.ki_highq, pidLoop2.kd_highq);
     a24:	4b0a      	ldr	r3, [pc, #40]	; (a50 <set_setKP_HIGHQ+0x8c>)
     a26:	6d19      	ldr	r1, [r3, #80]	; 0x50
     a28:	4b09      	ldr	r3, [pc, #36]	; (a50 <set_setKP_HIGHQ+0x8c>)
     a2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
     a2c:	4b08      	ldr	r3, [pc, #32]	; (a50 <set_setKP_HIGHQ+0x8c>)
     a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     a30:	4807      	ldr	r0, [pc, #28]	; (a50 <set_setKP_HIGHQ+0x8c>)
     a32:	4c06      	ldr	r4, [pc, #24]	; (a4c <set_setKP_HIGHQ+0x88>)
     a34:	47a0      	blx	r4
			}
		}
		return pidLoop2.kp_highq;
     a36:	4b06      	ldr	r3, [pc, #24]	; (a50 <set_setKP_HIGHQ+0x8c>)
     a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
	}

}
     a3a:	1c18      	adds	r0, r3, #0
     a3c:	46bd      	mov	sp, r7
     a3e:	b005      	add	sp, #20
     a40:	bd90      	pop	{r4, r7, pc}
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	20000e10 	.word	0x20000e10
     a48:	200009b8 	.word	0x200009b8
     a4c:	0000a559 	.word	0x0000a559
     a50:	20000ca4 	.word	0x20000ca4
     a54:	20000960 	.word	0x20000960

00000a58 <set_setKI_HIGHQ>:

float set_setKI_HIGHQ (float fNewValue, bool bValid, int nZone)
{
     a58:	b590      	push	{r4, r7, lr}
     a5a:	b085      	sub	sp, #20
     a5c:	af00      	add	r7, sp, #0
     a5e:	60f8      	str	r0, [r7, #12]
     a60:	607a      	str	r2, [r7, #4]
     a62:	1c3b      	adds	r3, r7, #0
     a64:	330b      	adds	r3, #11
     a66:	1c0a      	adds	r2, r1, #0
     a68:	701a      	strb	r2, [r3, #0]
	if (nZone == 0)
     a6a:	687b      	ldr	r3, [r7, #4]
     a6c:	2b00      	cmp	r3, #0
     a6e:	d117      	bne.n	aa0 <set_setKI_HIGHQ+0x48>
	{
		if (bValid)
     a70:	1c3b      	adds	r3, r7, #0
     a72:	330b      	adds	r3, #11
     a74:	781b      	ldrb	r3, [r3, #0]
     a76:	2b00      	cmp	r3, #0
     a78:	d00f      	beq.n	a9a <set_setKI_HIGHQ+0x42>
		{
			pidLoop1.ki_highq = fNewValue;
     a7a:	4b17      	ldr	r3, [pc, #92]	; (ad8 <set_setKI_HIGHQ+0x80>)
     a7c:	68fa      	ldr	r2, [r7, #12]
     a7e:	655a      	str	r2, [r3, #84]	; 0x54
			if (chamber1.mode_state == STATE_HIGH_Q)
     a80:	4b16      	ldr	r3, [pc, #88]	; (adc <set_setKI_HIGHQ+0x84>)
     a82:	781b      	ldrb	r3, [r3, #0]
     a84:	2b02      	cmp	r3, #2
     a86:	d108      	bne.n	a9a <set_setKI_HIGHQ+0x42>
			{
				pidSetTunings(&pidLoop1, pidLoop1.kp_highq, pidLoop1.ki_highq, pidLoop1.kd_highq);
     a88:	4b13      	ldr	r3, [pc, #76]	; (ad8 <set_setKI_HIGHQ+0x80>)
     a8a:	6d19      	ldr	r1, [r3, #80]	; 0x50
     a8c:	4b12      	ldr	r3, [pc, #72]	; (ad8 <set_setKI_HIGHQ+0x80>)
     a8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
     a90:	4b11      	ldr	r3, [pc, #68]	; (ad8 <set_setKI_HIGHQ+0x80>)
     a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     a94:	4810      	ldr	r0, [pc, #64]	; (ad8 <set_setKI_HIGHQ+0x80>)
     a96:	4c12      	ldr	r4, [pc, #72]	; (ae0 <set_setKI_HIGHQ+0x88>)
     a98:	47a0      	blx	r4
			}
		}
		return pidLoop1.ki_highq;
     a9a:	4b0f      	ldr	r3, [pc, #60]	; (ad8 <set_setKI_HIGHQ+0x80>)
     a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
     a9e:	e016      	b.n	ace <set_setKI_HIGHQ+0x76>
	}
	//return 0;

	else
	{
		if (bValid)
     aa0:	1c3b      	adds	r3, r7, #0
     aa2:	330b      	adds	r3, #11
     aa4:	781b      	ldrb	r3, [r3, #0]
     aa6:	2b00      	cmp	r3, #0
     aa8:	d00f      	beq.n	aca <set_setKI_HIGHQ+0x72>
		{
			pidLoop2.ki_highq = fNewValue;
     aaa:	4b0e      	ldr	r3, [pc, #56]	; (ae4 <set_setKI_HIGHQ+0x8c>)
     aac:	68fa      	ldr	r2, [r7, #12]
     aae:	655a      	str	r2, [r3, #84]	; 0x54
			if (chamber2.mode_state == STATE_HIGH_Q)
     ab0:	4b0d      	ldr	r3, [pc, #52]	; (ae8 <set_setKI_HIGHQ+0x90>)
     ab2:	781b      	ldrb	r3, [r3, #0]
     ab4:	2b02      	cmp	r3, #2
     ab6:	d108      	bne.n	aca <set_setKI_HIGHQ+0x72>
			{
				pidSetTunings(&pidLoop2, pidLoop2.kp_highq, pidLoop2.ki_highq, pidLoop2.kd_highq);
     ab8:	4b0a      	ldr	r3, [pc, #40]	; (ae4 <set_setKI_HIGHQ+0x8c>)
     aba:	6d19      	ldr	r1, [r3, #80]	; 0x50
     abc:	4b09      	ldr	r3, [pc, #36]	; (ae4 <set_setKI_HIGHQ+0x8c>)
     abe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
     ac0:	4b08      	ldr	r3, [pc, #32]	; (ae4 <set_setKI_HIGHQ+0x8c>)
     ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     ac4:	4807      	ldr	r0, [pc, #28]	; (ae4 <set_setKI_HIGHQ+0x8c>)
     ac6:	4c06      	ldr	r4, [pc, #24]	; (ae0 <set_setKI_HIGHQ+0x88>)
     ac8:	47a0      	blx	r4
			}
		}
		return pidLoop2.ki_highq;
     aca:	4b06      	ldr	r3, [pc, #24]	; (ae4 <set_setKI_HIGHQ+0x8c>)
     acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
	}

}
     ace:	1c18      	adds	r0, r3, #0
     ad0:	46bd      	mov	sp, r7
     ad2:	b005      	add	sp, #20
     ad4:	bd90      	pop	{r4, r7, pc}
     ad6:	46c0      	nop			; (mov r8, r8)
     ad8:	20000e10 	.word	0x20000e10
     adc:	200009b8 	.word	0x200009b8
     ae0:	0000a559 	.word	0x0000a559
     ae4:	20000ca4 	.word	0x20000ca4
     ae8:	20000960 	.word	0x20000960

00000aec <set_setKD_HIGHQ>:

float set_setKD_HIGHQ (float fNewValue, bool bValid, int nZone)
{
     aec:	b590      	push	{r4, r7, lr}
     aee:	b085      	sub	sp, #20
     af0:	af00      	add	r7, sp, #0
     af2:	60f8      	str	r0, [r7, #12]
     af4:	607a      	str	r2, [r7, #4]
     af6:	1c3b      	adds	r3, r7, #0
     af8:	330b      	adds	r3, #11
     afa:	1c0a      	adds	r2, r1, #0
     afc:	701a      	strb	r2, [r3, #0]
	if (nZone == 0)
     afe:	687b      	ldr	r3, [r7, #4]
     b00:	2b00      	cmp	r3, #0
     b02:	d117      	bne.n	b34 <set_setKD_HIGHQ+0x48>
	{
		if (bValid)
     b04:	1c3b      	adds	r3, r7, #0
     b06:	330b      	adds	r3, #11
     b08:	781b      	ldrb	r3, [r3, #0]
     b0a:	2b00      	cmp	r3, #0
     b0c:	d00f      	beq.n	b2e <set_setKD_HIGHQ+0x42>
		{
			pidLoop1.kd_highq = fNewValue;
     b0e:	4b17      	ldr	r3, [pc, #92]	; (b6c <set_setKD_HIGHQ+0x80>)
     b10:	68fa      	ldr	r2, [r7, #12]
     b12:	659a      	str	r2, [r3, #88]	; 0x58
			if (chamber1.mode_state == STATE_HIGH_Q)
     b14:	4b16      	ldr	r3, [pc, #88]	; (b70 <set_setKD_HIGHQ+0x84>)
     b16:	781b      	ldrb	r3, [r3, #0]
     b18:	2b02      	cmp	r3, #2
     b1a:	d108      	bne.n	b2e <set_setKD_HIGHQ+0x42>
			{
				pidSetTunings(&pidLoop1, pidLoop1.kp_highq, pidLoop1.ki_highq, pidLoop1.kd_highq);
     b1c:	4b13      	ldr	r3, [pc, #76]	; (b6c <set_setKD_HIGHQ+0x80>)
     b1e:	6d19      	ldr	r1, [r3, #80]	; 0x50
     b20:	4b12      	ldr	r3, [pc, #72]	; (b6c <set_setKD_HIGHQ+0x80>)
     b22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
     b24:	4b11      	ldr	r3, [pc, #68]	; (b6c <set_setKD_HIGHQ+0x80>)
     b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     b28:	4810      	ldr	r0, [pc, #64]	; (b6c <set_setKD_HIGHQ+0x80>)
     b2a:	4c12      	ldr	r4, [pc, #72]	; (b74 <set_setKD_HIGHQ+0x88>)
     b2c:	47a0      	blx	r4
			}
		}
		return pidLoop1.kd_highq;
     b2e:	4b0f      	ldr	r3, [pc, #60]	; (b6c <set_setKD_HIGHQ+0x80>)
     b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     b32:	e016      	b.n	b62 <set_setKD_HIGHQ+0x76>
	}
	//return 0;

	else
	{
		if (bValid)
     b34:	1c3b      	adds	r3, r7, #0
     b36:	330b      	adds	r3, #11
     b38:	781b      	ldrb	r3, [r3, #0]
     b3a:	2b00      	cmp	r3, #0
     b3c:	d00f      	beq.n	b5e <set_setKD_HIGHQ+0x72>
		{
			pidLoop2.kd_highq = fNewValue;
     b3e:	4b0e      	ldr	r3, [pc, #56]	; (b78 <set_setKD_HIGHQ+0x8c>)
     b40:	68fa      	ldr	r2, [r7, #12]
     b42:	659a      	str	r2, [r3, #88]	; 0x58
			if (chamber2.mode_state == STATE_HIGH_Q)
     b44:	4b0d      	ldr	r3, [pc, #52]	; (b7c <set_setKD_HIGHQ+0x90>)
     b46:	781b      	ldrb	r3, [r3, #0]
     b48:	2b02      	cmp	r3, #2
     b4a:	d108      	bne.n	b5e <set_setKD_HIGHQ+0x72>
			{
				pidSetTunings(&pidLoop2, pidLoop2.kp_highq, pidLoop2.ki_highq, pidLoop2.kd_highq);
     b4c:	4b0a      	ldr	r3, [pc, #40]	; (b78 <set_setKD_HIGHQ+0x8c>)
     b4e:	6d19      	ldr	r1, [r3, #80]	; 0x50
     b50:	4b09      	ldr	r3, [pc, #36]	; (b78 <set_setKD_HIGHQ+0x8c>)
     b52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
     b54:	4b08      	ldr	r3, [pc, #32]	; (b78 <set_setKD_HIGHQ+0x8c>)
     b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     b58:	4807      	ldr	r0, [pc, #28]	; (b78 <set_setKD_HIGHQ+0x8c>)
     b5a:	4c06      	ldr	r4, [pc, #24]	; (b74 <set_setKD_HIGHQ+0x88>)
     b5c:	47a0      	blx	r4
			}
		}
		return pidLoop2.kd_highq;
     b5e:	4b06      	ldr	r3, [pc, #24]	; (b78 <set_setKD_HIGHQ+0x8c>)
     b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
	}

}
     b62:	1c18      	adds	r0, r3, #0
     b64:	46bd      	mov	sp, r7
     b66:	b005      	add	sp, #20
     b68:	bd90      	pop	{r4, r7, pc}
     b6a:	46c0      	nop			; (mov r8, r8)
     b6c:	20000e10 	.word	0x20000e10
     b70:	200009b8 	.word	0x200009b8
     b74:	0000a559 	.word	0x0000a559
     b78:	20000ca4 	.word	0x20000ca4
     b7c:	20000960 	.word	0x20000960

00000b80 <set_setKP_VARQ>:

float set_setKP_VARQ (float fNewValue, bool bValid, int nZone)
{
     b80:	b590      	push	{r4, r7, lr}
     b82:	b085      	sub	sp, #20
     b84:	af00      	add	r7, sp, #0
     b86:	60f8      	str	r0, [r7, #12]
     b88:	607a      	str	r2, [r7, #4]
     b8a:	1c3b      	adds	r3, r7, #0
     b8c:	330b      	adds	r3, #11
     b8e:	1c0a      	adds	r2, r1, #0
     b90:	701a      	strb	r2, [r3, #0]
	if (nZone == 0)
     b92:	687b      	ldr	r3, [r7, #4]
     b94:	2b00      	cmp	r3, #0
     b96:	d117      	bne.n	bc8 <set_setKP_VARQ+0x48>
	{
		if (bValid)
     b98:	1c3b      	adds	r3, r7, #0
     b9a:	330b      	adds	r3, #11
     b9c:	781b      	ldrb	r3, [r3, #0]
     b9e:	2b00      	cmp	r3, #0
     ba0:	d00f      	beq.n	bc2 <set_setKP_VARQ+0x42>
		{
			pidLoop1.kp_varq = fNewValue;
     ba2:	4b17      	ldr	r3, [pc, #92]	; (c00 <set_setKP_VARQ+0x80>)
     ba4:	68fa      	ldr	r2, [r7, #12]
     ba6:	65da      	str	r2, [r3, #92]	; 0x5c
			if (chamber1.mode_state == STATE_VAR_Q)
     ba8:	4b16      	ldr	r3, [pc, #88]	; (c04 <set_setKP_VARQ+0x84>)
     baa:	781b      	ldrb	r3, [r3, #0]
     bac:	2b03      	cmp	r3, #3
     bae:	d108      	bne.n	bc2 <set_setKP_VARQ+0x42>
			{
				pidSetTunings(&pidLoop1, pidLoop1.kp_varq, pidLoop1.ki_varq, pidLoop1.kd_varq);
     bb0:	4b13      	ldr	r3, [pc, #76]	; (c00 <set_setKP_VARQ+0x80>)
     bb2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
     bb4:	4b12      	ldr	r3, [pc, #72]	; (c00 <set_setKP_VARQ+0x80>)
     bb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
     bb8:	4b11      	ldr	r3, [pc, #68]	; (c00 <set_setKP_VARQ+0x80>)
     bba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
     bbc:	4810      	ldr	r0, [pc, #64]	; (c00 <set_setKP_VARQ+0x80>)
     bbe:	4c12      	ldr	r4, [pc, #72]	; (c08 <set_setKP_VARQ+0x88>)
     bc0:	47a0      	blx	r4
			}
		}
		return pidLoop1.kp_varq;
     bc2:	4b0f      	ldr	r3, [pc, #60]	; (c00 <set_setKP_VARQ+0x80>)
     bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
     bc6:	e016      	b.n	bf6 <set_setKP_VARQ+0x76>
	}
	//return 0;

	else
	{
		if (bValid)
     bc8:	1c3b      	adds	r3, r7, #0
     bca:	330b      	adds	r3, #11
     bcc:	781b      	ldrb	r3, [r3, #0]
     bce:	2b00      	cmp	r3, #0
     bd0:	d00f      	beq.n	bf2 <set_setKP_VARQ+0x72>
		{
			pidLoop2.kp_varq = fNewValue;
     bd2:	4b0e      	ldr	r3, [pc, #56]	; (c0c <set_setKP_VARQ+0x8c>)
     bd4:	68fa      	ldr	r2, [r7, #12]
     bd6:	65da      	str	r2, [r3, #92]	; 0x5c
			if (chamber2.mode_state == STATE_VAR_Q)
     bd8:	4b0d      	ldr	r3, [pc, #52]	; (c10 <set_setKP_VARQ+0x90>)
     bda:	781b      	ldrb	r3, [r3, #0]
     bdc:	2b03      	cmp	r3, #3
     bde:	d108      	bne.n	bf2 <set_setKP_VARQ+0x72>
			{
				pidSetTunings(&pidLoop2, pidLoop2.kp_varq, pidLoop2.ki_varq, pidLoop2.kd_varq);
     be0:	4b0a      	ldr	r3, [pc, #40]	; (c0c <set_setKP_VARQ+0x8c>)
     be2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
     be4:	4b09      	ldr	r3, [pc, #36]	; (c0c <set_setKP_VARQ+0x8c>)
     be6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
     be8:	4b08      	ldr	r3, [pc, #32]	; (c0c <set_setKP_VARQ+0x8c>)
     bea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
     bec:	4807      	ldr	r0, [pc, #28]	; (c0c <set_setKP_VARQ+0x8c>)
     bee:	4c06      	ldr	r4, [pc, #24]	; (c08 <set_setKP_VARQ+0x88>)
     bf0:	47a0      	blx	r4
			}
		}
		return pidLoop2.kp_varq;
     bf2:	4b06      	ldr	r3, [pc, #24]	; (c0c <set_setKP_VARQ+0x8c>)
     bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
	}

}
     bf6:	1c18      	adds	r0, r3, #0
     bf8:	46bd      	mov	sp, r7
     bfa:	b005      	add	sp, #20
     bfc:	bd90      	pop	{r4, r7, pc}
     bfe:	46c0      	nop			; (mov r8, r8)
     c00:	20000e10 	.word	0x20000e10
     c04:	200009b8 	.word	0x200009b8
     c08:	0000a559 	.word	0x0000a559
     c0c:	20000ca4 	.word	0x20000ca4
     c10:	20000960 	.word	0x20000960

00000c14 <set_setKI_VARQ>:

float set_setKI_VARQ (float fNewValue, bool bValid, int nZone)
{
     c14:	b590      	push	{r4, r7, lr}
     c16:	b085      	sub	sp, #20
     c18:	af00      	add	r7, sp, #0
     c1a:	60f8      	str	r0, [r7, #12]
     c1c:	607a      	str	r2, [r7, #4]
     c1e:	1c3b      	adds	r3, r7, #0
     c20:	330b      	adds	r3, #11
     c22:	1c0a      	adds	r2, r1, #0
     c24:	701a      	strb	r2, [r3, #0]
	if (nZone == 0)
     c26:	687b      	ldr	r3, [r7, #4]
     c28:	2b00      	cmp	r3, #0
     c2a:	d117      	bne.n	c5c <set_setKI_VARQ+0x48>
	{
		if (bValid)
     c2c:	1c3b      	adds	r3, r7, #0
     c2e:	330b      	adds	r3, #11
     c30:	781b      	ldrb	r3, [r3, #0]
     c32:	2b00      	cmp	r3, #0
     c34:	d00f      	beq.n	c56 <set_setKI_VARQ+0x42>
		{
			pidLoop1.ki_varq = fNewValue;
     c36:	4b17      	ldr	r3, [pc, #92]	; (c94 <set_setKI_VARQ+0x80>)
     c38:	68fa      	ldr	r2, [r7, #12]
     c3a:	661a      	str	r2, [r3, #96]	; 0x60
			if (chamber1.mode_state == STATE_VAR_Q)
     c3c:	4b16      	ldr	r3, [pc, #88]	; (c98 <set_setKI_VARQ+0x84>)
     c3e:	781b      	ldrb	r3, [r3, #0]
     c40:	2b03      	cmp	r3, #3
     c42:	d108      	bne.n	c56 <set_setKI_VARQ+0x42>
			{
				pidSetTunings(&pidLoop1, pidLoop1.kp_varq, pidLoop1.ki_varq, pidLoop1.kd_varq);
     c44:	4b13      	ldr	r3, [pc, #76]	; (c94 <set_setKI_VARQ+0x80>)
     c46:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
     c48:	4b12      	ldr	r3, [pc, #72]	; (c94 <set_setKI_VARQ+0x80>)
     c4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
     c4c:	4b11      	ldr	r3, [pc, #68]	; (c94 <set_setKI_VARQ+0x80>)
     c4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
     c50:	4810      	ldr	r0, [pc, #64]	; (c94 <set_setKI_VARQ+0x80>)
     c52:	4c12      	ldr	r4, [pc, #72]	; (c9c <set_setKI_VARQ+0x88>)
     c54:	47a0      	blx	r4
			}
		}
		return pidLoop1.ki_varq;
     c56:	4b0f      	ldr	r3, [pc, #60]	; (c94 <set_setKI_VARQ+0x80>)
     c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
     c5a:	e016      	b.n	c8a <set_setKI_VARQ+0x76>
	}
	//return 0;

	else
	{
		if (bValid)
     c5c:	1c3b      	adds	r3, r7, #0
     c5e:	330b      	adds	r3, #11
     c60:	781b      	ldrb	r3, [r3, #0]
     c62:	2b00      	cmp	r3, #0
     c64:	d00f      	beq.n	c86 <set_setKI_VARQ+0x72>
		{
			pidLoop2.ki_varq = fNewValue;
     c66:	4b0e      	ldr	r3, [pc, #56]	; (ca0 <set_setKI_VARQ+0x8c>)
     c68:	68fa      	ldr	r2, [r7, #12]
     c6a:	661a      	str	r2, [r3, #96]	; 0x60
			if (chamber2.mode_state == STATE_VAR_Q)
     c6c:	4b0d      	ldr	r3, [pc, #52]	; (ca4 <set_setKI_VARQ+0x90>)
     c6e:	781b      	ldrb	r3, [r3, #0]
     c70:	2b03      	cmp	r3, #3
     c72:	d108      	bne.n	c86 <set_setKI_VARQ+0x72>
			{
				pidSetTunings(&pidLoop2, pidLoop2.kp_varq, pidLoop2.ki_varq, pidLoop2.kd_varq);
     c74:	4b0a      	ldr	r3, [pc, #40]	; (ca0 <set_setKI_VARQ+0x8c>)
     c76:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
     c78:	4b09      	ldr	r3, [pc, #36]	; (ca0 <set_setKI_VARQ+0x8c>)
     c7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
     c7c:	4b08      	ldr	r3, [pc, #32]	; (ca0 <set_setKI_VARQ+0x8c>)
     c7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
     c80:	4807      	ldr	r0, [pc, #28]	; (ca0 <set_setKI_VARQ+0x8c>)
     c82:	4c06      	ldr	r4, [pc, #24]	; (c9c <set_setKI_VARQ+0x88>)
     c84:	47a0      	blx	r4
			}
		}
		return pidLoop2.ki_varq;
     c86:	4b06      	ldr	r3, [pc, #24]	; (ca0 <set_setKI_VARQ+0x8c>)
     c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	}

}
     c8a:	1c18      	adds	r0, r3, #0
     c8c:	46bd      	mov	sp, r7
     c8e:	b005      	add	sp, #20
     c90:	bd90      	pop	{r4, r7, pc}
     c92:	46c0      	nop			; (mov r8, r8)
     c94:	20000e10 	.word	0x20000e10
     c98:	200009b8 	.word	0x200009b8
     c9c:	0000a559 	.word	0x0000a559
     ca0:	20000ca4 	.word	0x20000ca4
     ca4:	20000960 	.word	0x20000960

00000ca8 <set_setKD_VARQ>:

float set_setKD_VARQ (float fNewValue, bool bValid, int nZone)
{
     ca8:	b590      	push	{r4, r7, lr}
     caa:	b085      	sub	sp, #20
     cac:	af00      	add	r7, sp, #0
     cae:	60f8      	str	r0, [r7, #12]
     cb0:	607a      	str	r2, [r7, #4]
     cb2:	1c3b      	adds	r3, r7, #0
     cb4:	330b      	adds	r3, #11
     cb6:	1c0a      	adds	r2, r1, #0
     cb8:	701a      	strb	r2, [r3, #0]
	if (nZone == 0)
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	2b00      	cmp	r3, #0
     cbe:	d117      	bne.n	cf0 <set_setKD_VARQ+0x48>
	{
		if (bValid)
     cc0:	1c3b      	adds	r3, r7, #0
     cc2:	330b      	adds	r3, #11
     cc4:	781b      	ldrb	r3, [r3, #0]
     cc6:	2b00      	cmp	r3, #0
     cc8:	d00f      	beq.n	cea <set_setKD_VARQ+0x42>
		{
			pidLoop1.kd_varq = fNewValue;
     cca:	4b17      	ldr	r3, [pc, #92]	; (d28 <set_setKD_VARQ+0x80>)
     ccc:	68fa      	ldr	r2, [r7, #12]
     cce:	665a      	str	r2, [r3, #100]	; 0x64
			if (chamber1.mode_state == STATE_VAR_Q)
     cd0:	4b16      	ldr	r3, [pc, #88]	; (d2c <set_setKD_VARQ+0x84>)
     cd2:	781b      	ldrb	r3, [r3, #0]
     cd4:	2b03      	cmp	r3, #3
     cd6:	d108      	bne.n	cea <set_setKD_VARQ+0x42>
			{
				pidSetTunings(&pidLoop1, pidLoop1.kp_varq, pidLoop1.ki_varq, pidLoop1.kd_varq);
     cd8:	4b13      	ldr	r3, [pc, #76]	; (d28 <set_setKD_VARQ+0x80>)
     cda:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
     cdc:	4b12      	ldr	r3, [pc, #72]	; (d28 <set_setKD_VARQ+0x80>)
     cde:	6e1a      	ldr	r2, [r3, #96]	; 0x60
     ce0:	4b11      	ldr	r3, [pc, #68]	; (d28 <set_setKD_VARQ+0x80>)
     ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
     ce4:	4810      	ldr	r0, [pc, #64]	; (d28 <set_setKD_VARQ+0x80>)
     ce6:	4c12      	ldr	r4, [pc, #72]	; (d30 <set_setKD_VARQ+0x88>)
     ce8:	47a0      	blx	r4
			}
		}
		return pidLoop1.kd_varq;
     cea:	4b0f      	ldr	r3, [pc, #60]	; (d28 <set_setKD_VARQ+0x80>)
     cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
     cee:	e016      	b.n	d1e <set_setKD_VARQ+0x76>
	}
	// return 0;

	else
	{
		if (bValid)
     cf0:	1c3b      	adds	r3, r7, #0
     cf2:	330b      	adds	r3, #11
     cf4:	781b      	ldrb	r3, [r3, #0]
     cf6:	2b00      	cmp	r3, #0
     cf8:	d00f      	beq.n	d1a <set_setKD_VARQ+0x72>
		{
			pidLoop2.kd_varq = fNewValue;
     cfa:	4b0e      	ldr	r3, [pc, #56]	; (d34 <set_setKD_VARQ+0x8c>)
     cfc:	68fa      	ldr	r2, [r7, #12]
     cfe:	665a      	str	r2, [r3, #100]	; 0x64
			if (chamber2.mode_state == STATE_VAR_Q)
     d00:	4b0d      	ldr	r3, [pc, #52]	; (d38 <set_setKD_VARQ+0x90>)
     d02:	781b      	ldrb	r3, [r3, #0]
     d04:	2b03      	cmp	r3, #3
     d06:	d108      	bne.n	d1a <set_setKD_VARQ+0x72>
			{
				pidSetTunings(&pidLoop2, pidLoop2.kp_varq, pidLoop2.ki_varq, pidLoop2.kd_varq);
     d08:	4b0a      	ldr	r3, [pc, #40]	; (d34 <set_setKD_VARQ+0x8c>)
     d0a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
     d0c:	4b09      	ldr	r3, [pc, #36]	; (d34 <set_setKD_VARQ+0x8c>)
     d0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
     d10:	4b08      	ldr	r3, [pc, #32]	; (d34 <set_setKD_VARQ+0x8c>)
     d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
     d14:	4807      	ldr	r0, [pc, #28]	; (d34 <set_setKD_VARQ+0x8c>)
     d16:	4c06      	ldr	r4, [pc, #24]	; (d30 <set_setKD_VARQ+0x88>)
     d18:	47a0      	blx	r4
			}
		}
		return pidLoop2.kd_varq;
     d1a:	4b06      	ldr	r3, [pc, #24]	; (d34 <set_setKD_VARQ+0x8c>)
     d1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
	}

}
     d1e:	1c18      	adds	r0, r3, #0
     d20:	46bd      	mov	sp, r7
     d22:	b005      	add	sp, #20
     d24:	bd90      	pop	{r4, r7, pc}
     d26:	46c0      	nop			; (mov r8, r8)
     d28:	20000e10 	.word	0x20000e10
     d2c:	200009b8 	.word	0x200009b8
     d30:	0000a559 	.word	0x0000a559
     d34:	20000ca4 	.word	0x20000ca4
     d38:	20000960 	.word	0x20000960

00000d3c <set_setKP_COPQ>:

float set_setKP_COPQ (float fNewValue, bool bValid, int nZone)
{
     d3c:	b590      	push	{r4, r7, lr}
     d3e:	b085      	sub	sp, #20
     d40:	af00      	add	r7, sp, #0
     d42:	60f8      	str	r0, [r7, #12]
     d44:	607a      	str	r2, [r7, #4]
     d46:	1c3b      	adds	r3, r7, #0
     d48:	330b      	adds	r3, #11
     d4a:	1c0a      	adds	r2, r1, #0
     d4c:	701a      	strb	r2, [r3, #0]
	if (nZone == 0)
     d4e:	687b      	ldr	r3, [r7, #4]
     d50:	2b00      	cmp	r3, #0
     d52:	d117      	bne.n	d84 <set_setKP_COPQ+0x48>
	{
		if (bValid)
     d54:	1c3b      	adds	r3, r7, #0
     d56:	330b      	adds	r3, #11
     d58:	781b      	ldrb	r3, [r3, #0]
     d5a:	2b00      	cmp	r3, #0
     d5c:	d00f      	beq.n	d7e <set_setKP_COPQ+0x42>
		{
			pidLoop1.kp_copq = fNewValue;
     d5e:	4b17      	ldr	r3, [pc, #92]	; (dbc <set_setKP_COPQ+0x80>)
     d60:	68fa      	ldr	r2, [r7, #12]
     d62:	669a      	str	r2, [r3, #104]	; 0x68
			if (chamber1.mode_state == STATE_HIGH_COP)
     d64:	4b16      	ldr	r3, [pc, #88]	; (dc0 <set_setKP_COPQ+0x84>)
     d66:	781b      	ldrb	r3, [r3, #0]
     d68:	2b04      	cmp	r3, #4
     d6a:	d108      	bne.n	d7e <set_setKP_COPQ+0x42>
			{
				pidSetTunings(&pidLoop1, pidLoop1.kp_copq, pidLoop1.ki_copq, pidLoop1.kd_copq);
     d6c:	4b13      	ldr	r3, [pc, #76]	; (dbc <set_setKP_COPQ+0x80>)
     d6e:	6e99      	ldr	r1, [r3, #104]	; 0x68
     d70:	4b12      	ldr	r3, [pc, #72]	; (dbc <set_setKP_COPQ+0x80>)
     d72:	6eda      	ldr	r2, [r3, #108]	; 0x6c
     d74:	4b11      	ldr	r3, [pc, #68]	; (dbc <set_setKP_COPQ+0x80>)
     d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     d78:	4810      	ldr	r0, [pc, #64]	; (dbc <set_setKP_COPQ+0x80>)
     d7a:	4c12      	ldr	r4, [pc, #72]	; (dc4 <set_setKP_COPQ+0x88>)
     d7c:	47a0      	blx	r4
			}
		}
		return pidLoop1.kp_copq;
     d7e:	4b0f      	ldr	r3, [pc, #60]	; (dbc <set_setKP_COPQ+0x80>)
     d80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
     d82:	e016      	b.n	db2 <set_setKP_COPQ+0x76>
	}
	//return 0;

	else
	{
		if (bValid)
     d84:	1c3b      	adds	r3, r7, #0
     d86:	330b      	adds	r3, #11
     d88:	781b      	ldrb	r3, [r3, #0]
     d8a:	2b00      	cmp	r3, #0
     d8c:	d00f      	beq.n	dae <set_setKP_COPQ+0x72>
		{
			pidLoop2.kp_copq = fNewValue;
     d8e:	4b0e      	ldr	r3, [pc, #56]	; (dc8 <set_setKP_COPQ+0x8c>)
     d90:	68fa      	ldr	r2, [r7, #12]
     d92:	669a      	str	r2, [r3, #104]	; 0x68
			if (chamber2.mode_state == STATE_HIGH_COP)
     d94:	4b0d      	ldr	r3, [pc, #52]	; (dcc <set_setKP_COPQ+0x90>)
     d96:	781b      	ldrb	r3, [r3, #0]
     d98:	2b04      	cmp	r3, #4
     d9a:	d108      	bne.n	dae <set_setKP_COPQ+0x72>
			{
				pidSetTunings(&pidLoop2, pidLoop2.kp_copq, pidLoop2.ki_copq, pidLoop2.kd_copq);
     d9c:	4b0a      	ldr	r3, [pc, #40]	; (dc8 <set_setKP_COPQ+0x8c>)
     d9e:	6e99      	ldr	r1, [r3, #104]	; 0x68
     da0:	4b09      	ldr	r3, [pc, #36]	; (dc8 <set_setKP_COPQ+0x8c>)
     da2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
     da4:	4b08      	ldr	r3, [pc, #32]	; (dc8 <set_setKP_COPQ+0x8c>)
     da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     da8:	4807      	ldr	r0, [pc, #28]	; (dc8 <set_setKP_COPQ+0x8c>)
     daa:	4c06      	ldr	r4, [pc, #24]	; (dc4 <set_setKP_COPQ+0x88>)
     dac:	47a0      	blx	r4
			}
		}
		return pidLoop2.kp_copq;
     dae:	4b06      	ldr	r3, [pc, #24]	; (dc8 <set_setKP_COPQ+0x8c>)
     db0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	}

}
     db2:	1c18      	adds	r0, r3, #0
     db4:	46bd      	mov	sp, r7
     db6:	b005      	add	sp, #20
     db8:	bd90      	pop	{r4, r7, pc}
     dba:	46c0      	nop			; (mov r8, r8)
     dbc:	20000e10 	.word	0x20000e10
     dc0:	200009b8 	.word	0x200009b8
     dc4:	0000a559 	.word	0x0000a559
     dc8:	20000ca4 	.word	0x20000ca4
     dcc:	20000960 	.word	0x20000960

00000dd0 <set_setKI_COPQ>:

float set_setKI_COPQ (float fNewValue, bool bValid, int nZone)
{
     dd0:	b590      	push	{r4, r7, lr}
     dd2:	b085      	sub	sp, #20
     dd4:	af00      	add	r7, sp, #0
     dd6:	60f8      	str	r0, [r7, #12]
     dd8:	607a      	str	r2, [r7, #4]
     dda:	1c3b      	adds	r3, r7, #0
     ddc:	330b      	adds	r3, #11
     dde:	1c0a      	adds	r2, r1, #0
     de0:	701a      	strb	r2, [r3, #0]
	if (nZone == 0)
     de2:	687b      	ldr	r3, [r7, #4]
     de4:	2b00      	cmp	r3, #0
     de6:	d117      	bne.n	e18 <set_setKI_COPQ+0x48>
	{
		if (bValid)
     de8:	1c3b      	adds	r3, r7, #0
     dea:	330b      	adds	r3, #11
     dec:	781b      	ldrb	r3, [r3, #0]
     dee:	2b00      	cmp	r3, #0
     df0:	d00f      	beq.n	e12 <set_setKI_COPQ+0x42>
		{
			pidLoop1.ki_copq = fNewValue;
     df2:	4b17      	ldr	r3, [pc, #92]	; (e50 <set_setKI_COPQ+0x80>)
     df4:	68fa      	ldr	r2, [r7, #12]
     df6:	66da      	str	r2, [r3, #108]	; 0x6c
			if (chamber1.mode_state == STATE_HIGH_COP)
     df8:	4b16      	ldr	r3, [pc, #88]	; (e54 <set_setKI_COPQ+0x84>)
     dfa:	781b      	ldrb	r3, [r3, #0]
     dfc:	2b04      	cmp	r3, #4
     dfe:	d108      	bne.n	e12 <set_setKI_COPQ+0x42>
			{
				pidSetTunings(&pidLoop1, pidLoop1.kp_copq, pidLoop1.ki_copq, pidLoop1.kd_copq);
     e00:	4b13      	ldr	r3, [pc, #76]	; (e50 <set_setKI_COPQ+0x80>)
     e02:	6e99      	ldr	r1, [r3, #104]	; 0x68
     e04:	4b12      	ldr	r3, [pc, #72]	; (e50 <set_setKI_COPQ+0x80>)
     e06:	6eda      	ldr	r2, [r3, #108]	; 0x6c
     e08:	4b11      	ldr	r3, [pc, #68]	; (e50 <set_setKI_COPQ+0x80>)
     e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     e0c:	4810      	ldr	r0, [pc, #64]	; (e50 <set_setKI_COPQ+0x80>)
     e0e:	4c12      	ldr	r4, [pc, #72]	; (e58 <set_setKI_COPQ+0x88>)
     e10:	47a0      	blx	r4
			}
		}
		return pidLoop1.ki_copq;
     e12:	4b0f      	ldr	r3, [pc, #60]	; (e50 <set_setKI_COPQ+0x80>)
     e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
     e16:	e016      	b.n	e46 <set_setKI_COPQ+0x76>
	}
	// return 0;

	else
	{
		if (bValid)
     e18:	1c3b      	adds	r3, r7, #0
     e1a:	330b      	adds	r3, #11
     e1c:	781b      	ldrb	r3, [r3, #0]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00f      	beq.n	e42 <set_setKI_COPQ+0x72>
		{
			pidLoop2.ki_copq = fNewValue;
     e22:	4b0e      	ldr	r3, [pc, #56]	; (e5c <set_setKI_COPQ+0x8c>)
     e24:	68fa      	ldr	r2, [r7, #12]
     e26:	66da      	str	r2, [r3, #108]	; 0x6c
			if (chamber2.mode_state == STATE_HIGH_COP)
     e28:	4b0d      	ldr	r3, [pc, #52]	; (e60 <set_setKI_COPQ+0x90>)
     e2a:	781b      	ldrb	r3, [r3, #0]
     e2c:	2b04      	cmp	r3, #4
     e2e:	d108      	bne.n	e42 <set_setKI_COPQ+0x72>
			{
				pidSetTunings(&pidLoop2, pidLoop2.kp_copq, pidLoop2.ki_copq, pidLoop2.kd_copq);
     e30:	4b0a      	ldr	r3, [pc, #40]	; (e5c <set_setKI_COPQ+0x8c>)
     e32:	6e99      	ldr	r1, [r3, #104]	; 0x68
     e34:	4b09      	ldr	r3, [pc, #36]	; (e5c <set_setKI_COPQ+0x8c>)
     e36:	6eda      	ldr	r2, [r3, #108]	; 0x6c
     e38:	4b08      	ldr	r3, [pc, #32]	; (e5c <set_setKI_COPQ+0x8c>)
     e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     e3c:	4807      	ldr	r0, [pc, #28]	; (e5c <set_setKI_COPQ+0x8c>)
     e3e:	4c06      	ldr	r4, [pc, #24]	; (e58 <set_setKI_COPQ+0x88>)
     e40:	47a0      	blx	r4
			}
		}
		return pidLoop2.ki_copq;
     e42:	4b06      	ldr	r3, [pc, #24]	; (e5c <set_setKI_COPQ+0x8c>)
     e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
	}

}
     e46:	1c18      	adds	r0, r3, #0
     e48:	46bd      	mov	sp, r7
     e4a:	b005      	add	sp, #20
     e4c:	bd90      	pop	{r4, r7, pc}
     e4e:	46c0      	nop			; (mov r8, r8)
     e50:	20000e10 	.word	0x20000e10
     e54:	200009b8 	.word	0x200009b8
     e58:	0000a559 	.word	0x0000a559
     e5c:	20000ca4 	.word	0x20000ca4
     e60:	20000960 	.word	0x20000960

00000e64 <set_setKD_COPQ>:

float set_setKD_COPQ (float fNewValue, bool bValid, int nZone)
{
     e64:	b590      	push	{r4, r7, lr}
     e66:	b085      	sub	sp, #20
     e68:	af00      	add	r7, sp, #0
     e6a:	60f8      	str	r0, [r7, #12]
     e6c:	607a      	str	r2, [r7, #4]
     e6e:	1c3b      	adds	r3, r7, #0
     e70:	330b      	adds	r3, #11
     e72:	1c0a      	adds	r2, r1, #0
     e74:	701a      	strb	r2, [r3, #0]
	if (nZone == 0)
     e76:	687b      	ldr	r3, [r7, #4]
     e78:	2b00      	cmp	r3, #0
     e7a:	d117      	bne.n	eac <set_setKD_COPQ+0x48>
	{
		if (bValid)
     e7c:	1c3b      	adds	r3, r7, #0
     e7e:	330b      	adds	r3, #11
     e80:	781b      	ldrb	r3, [r3, #0]
     e82:	2b00      	cmp	r3, #0
     e84:	d00f      	beq.n	ea6 <set_setKD_COPQ+0x42>
		{
			pidLoop1.kd_copq = fNewValue;
     e86:	4b17      	ldr	r3, [pc, #92]	; (ee4 <set_setKD_COPQ+0x80>)
     e88:	68fa      	ldr	r2, [r7, #12]
     e8a:	671a      	str	r2, [r3, #112]	; 0x70
			if (chamber1.mode_state == STATE_HIGH_COP)
     e8c:	4b16      	ldr	r3, [pc, #88]	; (ee8 <set_setKD_COPQ+0x84>)
     e8e:	781b      	ldrb	r3, [r3, #0]
     e90:	2b04      	cmp	r3, #4
     e92:	d108      	bne.n	ea6 <set_setKD_COPQ+0x42>
			{
				pidSetTunings(&pidLoop1, pidLoop1.kp_copq, pidLoop1.ki_copq, pidLoop1.kd_copq);
     e94:	4b13      	ldr	r3, [pc, #76]	; (ee4 <set_setKD_COPQ+0x80>)
     e96:	6e99      	ldr	r1, [r3, #104]	; 0x68
     e98:	4b12      	ldr	r3, [pc, #72]	; (ee4 <set_setKD_COPQ+0x80>)
     e9a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
     e9c:	4b11      	ldr	r3, [pc, #68]	; (ee4 <set_setKD_COPQ+0x80>)
     e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     ea0:	4810      	ldr	r0, [pc, #64]	; (ee4 <set_setKD_COPQ+0x80>)
     ea2:	4c12      	ldr	r4, [pc, #72]	; (eec <set_setKD_COPQ+0x88>)
     ea4:	47a0      	blx	r4
			}
		}
		return pidLoop1.kd_copq;
     ea6:	4b0f      	ldr	r3, [pc, #60]	; (ee4 <set_setKD_COPQ+0x80>)
     ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     eaa:	e016      	b.n	eda <set_setKD_COPQ+0x76>
	}
	//return 0;

	else
	{
		if (bValid)
     eac:	1c3b      	adds	r3, r7, #0
     eae:	330b      	adds	r3, #11
     eb0:	781b      	ldrb	r3, [r3, #0]
     eb2:	2b00      	cmp	r3, #0
     eb4:	d00f      	beq.n	ed6 <set_setKD_COPQ+0x72>
		{
			pidLoop2.kd_copq = fNewValue;
     eb6:	4b0e      	ldr	r3, [pc, #56]	; (ef0 <set_setKD_COPQ+0x8c>)
     eb8:	68fa      	ldr	r2, [r7, #12]
     eba:	671a      	str	r2, [r3, #112]	; 0x70
			if (chamber2.mode_state == STATE_HIGH_COP)
     ebc:	4b0d      	ldr	r3, [pc, #52]	; (ef4 <set_setKD_COPQ+0x90>)
     ebe:	781b      	ldrb	r3, [r3, #0]
     ec0:	2b04      	cmp	r3, #4
     ec2:	d108      	bne.n	ed6 <set_setKD_COPQ+0x72>
			{
				pidSetTunings(&pidLoop2, pidLoop2.kp_copq, pidLoop2.ki_copq, pidLoop2.kd_copq);
     ec4:	4b0a      	ldr	r3, [pc, #40]	; (ef0 <set_setKD_COPQ+0x8c>)
     ec6:	6e99      	ldr	r1, [r3, #104]	; 0x68
     ec8:	4b09      	ldr	r3, [pc, #36]	; (ef0 <set_setKD_COPQ+0x8c>)
     eca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
     ecc:	4b08      	ldr	r3, [pc, #32]	; (ef0 <set_setKD_COPQ+0x8c>)
     ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     ed0:	4807      	ldr	r0, [pc, #28]	; (ef0 <set_setKD_COPQ+0x8c>)
     ed2:	4c06      	ldr	r4, [pc, #24]	; (eec <set_setKD_COPQ+0x88>)
     ed4:	47a0      	blx	r4
			}
		}
		return pidLoop2.kd_copq;
     ed6:	4b06      	ldr	r3, [pc, #24]	; (ef0 <set_setKD_COPQ+0x8c>)
     ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	}

}
     eda:	1c18      	adds	r0, r3, #0
     edc:	46bd      	mov	sp, r7
     ede:	b005      	add	sp, #20
     ee0:	bd90      	pop	{r4, r7, pc}
     ee2:	46c0      	nop			; (mov r8, r8)
     ee4:	20000e10 	.word	0x20000e10
     ee8:	200009b8 	.word	0x200009b8
     eec:	0000a559 	.word	0x0000a559
     ef0:	20000ca4 	.word	0x20000ca4
     ef4:	20000960 	.word	0x20000960

00000ef8 <set_setChamberTemp>:

float set_setChamberTemp (float fNewValue, bool bValid, int nZone)
{
     ef8:	b580      	push	{r7, lr}
     efa:	b084      	sub	sp, #16
     efc:	af00      	add	r7, sp, #0
     efe:	60f8      	str	r0, [r7, #12]
     f00:	607a      	str	r2, [r7, #4]
     f02:	1c3b      	adds	r3, r7, #0
     f04:	330b      	adds	r3, #11
     f06:	1c0a      	adds	r2, r1, #0
     f08:	701a      	strb	r2, [r3, #0]
	if (nZone == 0)
     f0a:	687b      	ldr	r3, [r7, #4]
     f0c:	2b00      	cmp	r3, #0
     f0e:	d10d      	bne.n	f2c <set_setChamberTemp+0x34>
	{
		if (bValid)
     f10:	1c3b      	adds	r3, r7, #0
     f12:	330b      	adds	r3, #11
     f14:	781b      	ldrb	r3, [r3, #0]
     f16:	2b00      	cmp	r3, #0
     f18:	d005      	beq.n	f26 <set_setChamberTemp+0x2e>
		{
			chamber1.chamberTemp = fNewValue;
     f1a:	4b0d      	ldr	r3, [pc, #52]	; (f50 <set_setChamberTemp+0x58>)
     f1c:	68fa      	ldr	r2, [r7, #12]
     f1e:	605a      	str	r2, [r3, #4]
			chamber1.chamberTempRaw = fNewValue;
     f20:	4b0b      	ldr	r3, [pc, #44]	; (f50 <set_setChamberTemp+0x58>)
     f22:	68fa      	ldr	r2, [r7, #12]
     f24:	609a      	str	r2, [r3, #8]
		}
		return chamber1.chamberTemp;
     f26:	4b0a      	ldr	r3, [pc, #40]	; (f50 <set_setChamberTemp+0x58>)
     f28:	685b      	ldr	r3, [r3, #4]
     f2a:	e00c      	b.n	f46 <set_setChamberTemp+0x4e>
	}
	else
	{
		if (bValid)
     f2c:	1c3b      	adds	r3, r7, #0
     f2e:	330b      	adds	r3, #11
     f30:	781b      	ldrb	r3, [r3, #0]
     f32:	2b00      	cmp	r3, #0
     f34:	d005      	beq.n	f42 <set_setChamberTemp+0x4a>
		{
			chamber2.chamberTemp = fNewValue;
     f36:	4b07      	ldr	r3, [pc, #28]	; (f54 <set_setChamberTemp+0x5c>)
     f38:	68fa      	ldr	r2, [r7, #12]
     f3a:	605a      	str	r2, [r3, #4]
			chamber2.chamberTempRaw = fNewValue;
     f3c:	4b05      	ldr	r3, [pc, #20]	; (f54 <set_setChamberTemp+0x5c>)
     f3e:	68fa      	ldr	r2, [r7, #12]
     f40:	609a      	str	r2, [r3, #8]
		}	
		return chamber2.chamberTemp;	
     f42:	4b04      	ldr	r3, [pc, #16]	; (f54 <set_setChamberTemp+0x5c>)
     f44:	685b      	ldr	r3, [r3, #4]
	}
}
     f46:	1c18      	adds	r0, r3, #0
     f48:	46bd      	mov	sp, r7
     f4a:	b004      	add	sp, #16
     f4c:	bd80      	pop	{r7, pc}
     f4e:	46c0      	nop			; (mov r8, r8)
     f50:	200009b8 	.word	0x200009b8
     f54:	20000960 	.word	0x20000960

00000f58 <set_setRejectTemp>:

float set_setRejectTemp (float fNewValue, bool bValid, int nZone)
{
     f58:	b580      	push	{r7, lr}
     f5a:	b084      	sub	sp, #16
     f5c:	af00      	add	r7, sp, #0
     f5e:	60f8      	str	r0, [r7, #12]
     f60:	607a      	str	r2, [r7, #4]
     f62:	1c3b      	adds	r3, r7, #0
     f64:	330b      	adds	r3, #11
     f66:	1c0a      	adds	r2, r1, #0
     f68:	701a      	strb	r2, [r3, #0]
	if (nZone == 0)
     f6a:	687b      	ldr	r3, [r7, #4]
     f6c:	2b00      	cmp	r3, #0
     f6e:	d10a      	bne.n	f86 <set_setRejectTemp+0x2e>
	{
		if (bValid)
     f70:	1c3b      	adds	r3, r7, #0
     f72:	330b      	adds	r3, #11
     f74:	781b      	ldrb	r3, [r3, #0]
     f76:	2b00      	cmp	r3, #0
     f78:	d002      	beq.n	f80 <set_setRejectTemp+0x28>
		{
			chamber1.rejectTemp = fNewValue;
     f7a:	4b0a      	ldr	r3, [pc, #40]	; (fa4 <set_setRejectTemp+0x4c>)
     f7c:	68fa      	ldr	r2, [r7, #12]
     f7e:	60da      	str	r2, [r3, #12]
		}
		return chamber1.rejectTemp;
     f80:	4b08      	ldr	r3, [pc, #32]	; (fa4 <set_setRejectTemp+0x4c>)
     f82:	68db      	ldr	r3, [r3, #12]
     f84:	e009      	b.n	f9a <set_setRejectTemp+0x42>
	}
	else
	{
		if (bValid)
     f86:	1c3b      	adds	r3, r7, #0
     f88:	330b      	adds	r3, #11
     f8a:	781b      	ldrb	r3, [r3, #0]
     f8c:	2b00      	cmp	r3, #0
     f8e:	d002      	beq.n	f96 <set_setRejectTemp+0x3e>
		{
			chamber2.rejectTemp = fNewValue;
     f90:	4b05      	ldr	r3, [pc, #20]	; (fa8 <set_setRejectTemp+0x50>)
     f92:	68fa      	ldr	r2, [r7, #12]
     f94:	60da      	str	r2, [r3, #12]
		}
		return chamber2.rejectTemp;
     f96:	4b04      	ldr	r3, [pc, #16]	; (fa8 <set_setRejectTemp+0x50>)
     f98:	68db      	ldr	r3, [r3, #12]
	}
}
     f9a:	1c18      	adds	r0, r3, #0
     f9c:	46bd      	mov	sp, r7
     f9e:	b004      	add	sp, #16
     fa0:	bd80      	pop	{r7, pc}
     fa2:	46c0      	nop			; (mov r8, r8)
     fa4:	200009b8 	.word	0x200009b8
     fa8:	20000960 	.word	0x20000960

00000fac <set_setGlycolOffset>:

float set_setGlycolOffset (float fNewValue, bool bValid, int nZone)
{
     fac:	b580      	push	{r7, lr}
     fae:	b084      	sub	sp, #16
     fb0:	af00      	add	r7, sp, #0
     fb2:	60f8      	str	r0, [r7, #12]
     fb4:	607a      	str	r2, [r7, #4]
     fb6:	1c3b      	adds	r3, r7, #0
     fb8:	330b      	adds	r3, #11
     fba:	1c0a      	adds	r2, r1, #0
     fbc:	701a      	strb	r2, [r3, #0]
	if (bValid)
     fbe:	1c3b      	adds	r3, r7, #0
     fc0:	330b      	adds	r3, #11
     fc2:	781b      	ldrb	r3, [r3, #0]
     fc4:	2b00      	cmp	r3, #0
     fc6:	d00e      	beq.n	fe6 <set_setGlycolOffset+0x3a>
	{
		chamber1.glycolOffset = fNewValue;
     fc8:	4b0a      	ldr	r3, [pc, #40]	; (ff4 <set_setGlycolOffset+0x48>)
     fca:	68fa      	ldr	r2, [r7, #12]
     fcc:	655a      	str	r2, [r3, #84]	; 0x54
		eepromDataInfo.pAddr = &chamber1.glycolOffset;
     fce:	4b0a      	ldr	r3, [pc, #40]	; (ff8 <set_setGlycolOffset+0x4c>)
     fd0:	4a0a      	ldr	r2, [pc, #40]	; (ffc <set_setGlycolOffset+0x50>)
     fd2:	601a      	str	r2, [r3, #0]
		eepromDataInfo.size = sizeof(chamber1.glycolOffset);
     fd4:	4b08      	ldr	r3, [pc, #32]	; (ff8 <set_setGlycolOffset+0x4c>)
     fd6:	2204      	movs	r2, #4
     fd8:	711a      	strb	r2, [r3, #4]
		eepromDataInfo.nonvolatileFlag = true;
     fda:	4b07      	ldr	r3, [pc, #28]	; (ff8 <set_setGlycolOffset+0x4c>)
     fdc:	2201      	movs	r2, #1
     fde:	715a      	strb	r2, [r3, #5]
		writeToEepromFlag = true;
     fe0:	4b07      	ldr	r3, [pc, #28]	; (1000 <set_setGlycolOffset+0x54>)
     fe2:	2201      	movs	r2, #1
     fe4:	701a      	strb	r2, [r3, #0]
	}
	return chamber1.glycolOffset;
     fe6:	4b03      	ldr	r3, [pc, #12]	; (ff4 <set_setGlycolOffset+0x48>)
     fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
     fea:	1c18      	adds	r0, r3, #0
     fec:	46bd      	mov	sp, r7
     fee:	b004      	add	sp, #16
     ff0:	bd80      	pop	{r7, pc}
     ff2:	46c0      	nop			; (mov r8, r8)
     ff4:	200009b8 	.word	0x200009b8
     ff8:	200008dc 	.word	0x200008dc
     ffc:	20000a0c 	.word	0x20000a0c
    1000:	200002f4 	.word	0x200002f4

00001004 <set_setModeState>:

float set_setModeState (float fNewValue, bool bValid, int nZone)
{
    1004:	b580      	push	{r7, lr}
    1006:	b084      	sub	sp, #16
    1008:	af00      	add	r7, sp, #0
    100a:	60f8      	str	r0, [r7, #12]
    100c:	607a      	str	r2, [r7, #4]
    100e:	1c3b      	adds	r3, r7, #0
    1010:	330b      	adds	r3, #11
    1012:	1c0a      	adds	r2, r1, #0
    1014:	701a      	strb	r2, [r3, #0]
	if (nZone == 0)
    1016:	687b      	ldr	r3, [r7, #4]
    1018:	2b00      	cmp	r3, #0
    101a:	d112      	bne.n	1042 <set_setModeState+0x3e>
	{
		if (bValid)
    101c:	1c3b      	adds	r3, r7, #0
    101e:	330b      	adds	r3, #11
    1020:	781b      	ldrb	r3, [r3, #0]
    1022:	2b00      	cmp	r3, #0
    1024:	d006      	beq.n	1034 <set_setModeState+0x30>
		{
			chamber1.mode_state = fNewValue;
    1026:	4b12      	ldr	r3, [pc, #72]	; (1070 <set_setModeState+0x6c>)
    1028:	68f8      	ldr	r0, [r7, #12]
    102a:	4798      	blx	r3
    102c:	1c03      	adds	r3, r0, #0
    102e:	b2da      	uxtb	r2, r3
    1030:	4b10      	ldr	r3, [pc, #64]	; (1074 <set_setModeState+0x70>)
    1032:	701a      	strb	r2, [r3, #0]
		}
		return chamber1.mode_state;
    1034:	4b0f      	ldr	r3, [pc, #60]	; (1074 <set_setModeState+0x70>)
    1036:	781a      	ldrb	r2, [r3, #0]
    1038:	4b0f      	ldr	r3, [pc, #60]	; (1078 <set_setModeState+0x74>)
    103a:	1c10      	adds	r0, r2, #0
    103c:	4798      	blx	r3
    103e:	1c03      	adds	r3, r0, #0
    1040:	e011      	b.n	1066 <set_setModeState+0x62>
	}
	else
	{
		if (bValid)
    1042:	1c3b      	adds	r3, r7, #0
    1044:	330b      	adds	r3, #11
    1046:	781b      	ldrb	r3, [r3, #0]
    1048:	2b00      	cmp	r3, #0
    104a:	d006      	beq.n	105a <set_setModeState+0x56>
		{
			chamber2.mode_state = fNewValue;
    104c:	4b08      	ldr	r3, [pc, #32]	; (1070 <set_setModeState+0x6c>)
    104e:	68f8      	ldr	r0, [r7, #12]
    1050:	4798      	blx	r3
    1052:	1c03      	adds	r3, r0, #0
    1054:	b2da      	uxtb	r2, r3
    1056:	4b09      	ldr	r3, [pc, #36]	; (107c <set_setModeState+0x78>)
    1058:	701a      	strb	r2, [r3, #0]
		}
		return chamber2.mode_state;
    105a:	4b08      	ldr	r3, [pc, #32]	; (107c <set_setModeState+0x78>)
    105c:	781a      	ldrb	r2, [r3, #0]
    105e:	4b06      	ldr	r3, [pc, #24]	; (1078 <set_setModeState+0x74>)
    1060:	1c10      	adds	r0, r2, #0
    1062:	4798      	blx	r3
    1064:	1c03      	adds	r3, r0, #0
	}
}
    1066:	1c18      	adds	r0, r3, #0
    1068:	46bd      	mov	sp, r7
    106a:	b004      	add	sp, #16
    106c:	bd80      	pop	{r7, pc}
    106e:	46c0      	nop			; (mov r8, r8)
    1070:	0001f6bd 	.word	0x0001f6bd
    1074:	200009b8 	.word	0x200009b8
    1078:	0002046d 	.word	0x0002046d
    107c:	20000960 	.word	0x20000960

00001080 <set_setEnablePcp>:

float set_setEnablePcp (float fNewValue, bool bValid, int nZone)
{
    1080:	b590      	push	{r4, r7, lr}
    1082:	b085      	sub	sp, #20
    1084:	af00      	add	r7, sp, #0
    1086:	60f8      	str	r0, [r7, #12]
    1088:	607a      	str	r2, [r7, #4]
    108a:	1c3b      	adds	r3, r7, #0
    108c:	330b      	adds	r3, #11
    108e:	1c0a      	adds	r2, r1, #0
    1090:	701a      	strb	r2, [r3, #0]
	if (nZone == 0)
    1092:	687b      	ldr	r3, [r7, #4]
    1094:	2b00      	cmp	r3, #0
    1096:	d119      	bne.n	10cc <set_setEnablePcp+0x4c>
	{
		if (bValid)
    1098:	1c3b      	adds	r3, r7, #0
    109a:	330b      	adds	r3, #11
    109c:	781b      	ldrb	r3, [r3, #0]
    109e:	2b00      	cmp	r3, #0
    10a0:	d00d      	beq.n	10be <set_setEnablePcp+0x3e>
		{
			enableSideAPcp = (bool)fNewValue;
    10a2:	2301      	movs	r3, #1
    10a4:	1c1c      	adds	r4, r3, #0
    10a6:	4b18      	ldr	r3, [pc, #96]	; (1108 <set_setEnablePcp+0x88>)
    10a8:	68f8      	ldr	r0, [r7, #12]
    10aa:	2100      	movs	r1, #0
    10ac:	4798      	blx	r3
    10ae:	1c03      	adds	r3, r0, #0
    10b0:	2b00      	cmp	r3, #0
    10b2:	d001      	beq.n	10b8 <set_setEnablePcp+0x38>
    10b4:	2300      	movs	r3, #0
    10b6:	1c1c      	adds	r4, r3, #0
    10b8:	b2e2      	uxtb	r2, r4
    10ba:	4b14      	ldr	r3, [pc, #80]	; (110c <set_setEnablePcp+0x8c>)
    10bc:	701a      	strb	r2, [r3, #0]
		}
		return (float)enableSideAPcp;
    10be:	4b13      	ldr	r3, [pc, #76]	; (110c <set_setEnablePcp+0x8c>)
    10c0:	781a      	ldrb	r2, [r3, #0]
    10c2:	4b13      	ldr	r3, [pc, #76]	; (1110 <set_setEnablePcp+0x90>)
    10c4:	1c10      	adds	r0, r2, #0
    10c6:	4798      	blx	r3
    10c8:	1c03      	adds	r3, r0, #0
    10ca:	e018      	b.n	10fe <set_setEnablePcp+0x7e>
	}
	else
	{
		if (bValid)
    10cc:	1c3b      	adds	r3, r7, #0
    10ce:	330b      	adds	r3, #11
    10d0:	781b      	ldrb	r3, [r3, #0]
    10d2:	2b00      	cmp	r3, #0
    10d4:	d00d      	beq.n	10f2 <set_setEnablePcp+0x72>
		{
			enableSideBPcp = (bool)fNewValue;
    10d6:	2301      	movs	r3, #1
    10d8:	1c1c      	adds	r4, r3, #0
    10da:	4b0b      	ldr	r3, [pc, #44]	; (1108 <set_setEnablePcp+0x88>)
    10dc:	68f8      	ldr	r0, [r7, #12]
    10de:	2100      	movs	r1, #0
    10e0:	4798      	blx	r3
    10e2:	1c03      	adds	r3, r0, #0
    10e4:	2b00      	cmp	r3, #0
    10e6:	d001      	beq.n	10ec <set_setEnablePcp+0x6c>
    10e8:	2300      	movs	r3, #0
    10ea:	1c1c      	adds	r4, r3, #0
    10ec:	b2e2      	uxtb	r2, r4
    10ee:	4b09      	ldr	r3, [pc, #36]	; (1114 <set_setEnablePcp+0x94>)
    10f0:	701a      	strb	r2, [r3, #0]
		}
		return (float)enableSideBPcp;
    10f2:	4b08      	ldr	r3, [pc, #32]	; (1114 <set_setEnablePcp+0x94>)
    10f4:	781a      	ldrb	r2, [r3, #0]
    10f6:	4b06      	ldr	r3, [pc, #24]	; (1110 <set_setEnablePcp+0x90>)
    10f8:	1c10      	adds	r0, r2, #0
    10fa:	4798      	blx	r3
    10fc:	1c03      	adds	r3, r0, #0
	}
}
    10fe:	1c18      	adds	r0, r3, #0
    1100:	46bd      	mov	sp, r7
    1102:	b005      	add	sp, #20
    1104:	bd90      	pop	{r4, r7, pc}
    1106:	46c0      	nop			; (mov r8, r8)
    1108:	0001f621 	.word	0x0001f621
    110c:	2000017b 	.word	0x2000017b
    1110:	0002046d 	.word	0x0002046d
    1114:	2000017c 	.word	0x2000017c

00001118 <set_setDesiredVoltage>:

float set_setDesiredVoltage (float fNewValue, bool bValid, int nZone)
{
    1118:	b580      	push	{r7, lr}
    111a:	b084      	sub	sp, #16
    111c:	af00      	add	r7, sp, #0
    111e:	60f8      	str	r0, [r7, #12]
    1120:	607a      	str	r2, [r7, #4]
    1122:	1c3b      	adds	r3, r7, #0
    1124:	330b      	adds	r3, #11
    1126:	1c0a      	adds	r2, r1, #0
    1128:	701a      	strb	r2, [r3, #0]
	if (bValid)
    112a:	1c3b      	adds	r3, r7, #0
    112c:	330b      	adds	r3, #11
    112e:	781b      	ldrb	r3, [r3, #0]
    1130:	2b00      	cmp	r3, #0
    1132:	d002      	beq.n	113a <set_setDesiredVoltage+0x22>
	{
		ps1.desiredVoltage = fNewValue;
    1134:	4b04      	ldr	r3, [pc, #16]	; (1148 <set_setDesiredVoltage+0x30>)
    1136:	68fa      	ldr	r2, [r7, #12]
    1138:	615a      	str	r2, [r3, #20]
	}
	
	return ps1.desiredVoltage;
    113a:	4b03      	ldr	r3, [pc, #12]	; (1148 <set_setDesiredVoltage+0x30>)
    113c:	695b      	ldr	r3, [r3, #20]
}
    113e:	1c18      	adds	r0, r3, #0
    1140:	46bd      	mov	sp, r7
    1142:	b004      	add	sp, #16
    1144:	bd80      	pop	{r7, pc}
    1146:	46c0      	nop			; (mov r8, r8)
    1148:	20000a84 	.word	0x20000a84

0000114c <set_setGlycolTemp>:

float set_setGlycolTemp (float fNewValue, bool bValid, int nZone)
{
    114c:	b580      	push	{r7, lr}
    114e:	b084      	sub	sp, #16
    1150:	af00      	add	r7, sp, #0
    1152:	60f8      	str	r0, [r7, #12]
    1154:	607a      	str	r2, [r7, #4]
    1156:	1c3b      	adds	r3, r7, #0
    1158:	330b      	adds	r3, #11
    115a:	1c0a      	adds	r2, r1, #0
    115c:	701a      	strb	r2, [r3, #0]
	if (bValid)
    115e:	1c3b      	adds	r3, r7, #0
    1160:	330b      	adds	r3, #11
    1162:	781b      	ldrb	r3, [r3, #0]
    1164:	2b00      	cmp	r3, #0
    1166:	d002      	beq.n	116e <set_setGlycolTemp+0x22>
	{
		chamber1.glycolTemp = fNewValue;
    1168:	4b04      	ldr	r3, [pc, #16]	; (117c <set_setGlycolTemp+0x30>)
    116a:	68fa      	ldr	r2, [r7, #12]
    116c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	
	return chamber1.glycolTemp;
    116e:	4b03      	ldr	r3, [pc, #12]	; (117c <set_setGlycolTemp+0x30>)
    1170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    1172:	1c18      	adds	r0, r3, #0
    1174:	46bd      	mov	sp, r7
    1176:	b004      	add	sp, #16
    1178:	bd80      	pop	{r7, pc}
    117a:	46c0      	nop			; (mov r8, r8)
    117c:	200009b8 	.word	0x200009b8

00001180 <set_maxSnsErrorCount>:

float set_maxSnsErrorCount (float fNewValue, bool bValid, int nZone)
{
    1180:	b580      	push	{r7, lr}
    1182:	b084      	sub	sp, #16
    1184:	af00      	add	r7, sp, #0
    1186:	60f8      	str	r0, [r7, #12]
    1188:	607a      	str	r2, [r7, #4]
    118a:	1c3b      	adds	r3, r7, #0
    118c:	330b      	adds	r3, #11
    118e:	1c0a      	adds	r2, r1, #0
    1190:	701a      	strb	r2, [r3, #0]
	if (bValid)
    1192:	1c3b      	adds	r3, r7, #0
    1194:	330b      	adds	r3, #11
    1196:	781b      	ldrb	r3, [r3, #0]
    1198:	2b00      	cmp	r3, #0
    119a:	d006      	beq.n	11aa <set_maxSnsErrorCount+0x2a>
	{
		maxSnsErrorCount = fNewValue;
    119c:	4b08      	ldr	r3, [pc, #32]	; (11c0 <set_maxSnsErrorCount+0x40>)
    119e:	68f8      	ldr	r0, [r7, #12]
    11a0:	4798      	blx	r3
    11a2:	1c03      	adds	r3, r0, #0
    11a4:	b29a      	uxth	r2, r3
    11a6:	4b07      	ldr	r3, [pc, #28]	; (11c4 <set_maxSnsErrorCount+0x44>)
    11a8:	801a      	strh	r2, [r3, #0]
	}
	
	return maxSnsErrorCount;	
    11aa:	4b06      	ldr	r3, [pc, #24]	; (11c4 <set_maxSnsErrorCount+0x44>)
    11ac:	881a      	ldrh	r2, [r3, #0]
    11ae:	4b06      	ldr	r3, [pc, #24]	; (11c8 <set_maxSnsErrorCount+0x48>)
    11b0:	1c10      	adds	r0, r2, #0
    11b2:	4798      	blx	r3
    11b4:	1c03      	adds	r3, r0, #0
}
    11b6:	1c18      	adds	r0, r3, #0
    11b8:	46bd      	mov	sp, r7
    11ba:	b004      	add	sp, #16
    11bc:	bd80      	pop	{r7, pc}
    11be:	46c0      	nop			; (mov r8, r8)
    11c0:	0001f6bd 	.word	0x0001f6bd
    11c4:	20000164 	.word	0x20000164
    11c8:	0002046d 	.word	0x0002046d

000011cc <set_maxFanErrorCount>:

float set_maxFanErrorCount (float fNewValue, bool bValid, int nZone)
{
    11cc:	b580      	push	{r7, lr}
    11ce:	b084      	sub	sp, #16
    11d0:	af00      	add	r7, sp, #0
    11d2:	60f8      	str	r0, [r7, #12]
    11d4:	607a      	str	r2, [r7, #4]
    11d6:	1c3b      	adds	r3, r7, #0
    11d8:	330b      	adds	r3, #11
    11da:	1c0a      	adds	r2, r1, #0
    11dc:	701a      	strb	r2, [r3, #0]
	if (bValid)
    11de:	1c3b      	adds	r3, r7, #0
    11e0:	330b      	adds	r3, #11
    11e2:	781b      	ldrb	r3, [r3, #0]
    11e4:	2b00      	cmp	r3, #0
    11e6:	d006      	beq.n	11f6 <set_maxFanErrorCount+0x2a>
	{
		maxFanErrorCount = fNewValue;
    11e8:	4b08      	ldr	r3, [pc, #32]	; (120c <set_maxFanErrorCount+0x40>)
    11ea:	68f8      	ldr	r0, [r7, #12]
    11ec:	4798      	blx	r3
    11ee:	1c03      	adds	r3, r0, #0
    11f0:	b29a      	uxth	r2, r3
    11f2:	4b07      	ldr	r3, [pc, #28]	; (1210 <set_maxFanErrorCount+0x44>)
    11f4:	801a      	strh	r2, [r3, #0]
	}
	
	return maxFanErrorCount;
    11f6:	4b06      	ldr	r3, [pc, #24]	; (1210 <set_maxFanErrorCount+0x44>)
    11f8:	881a      	ldrh	r2, [r3, #0]
    11fa:	4b06      	ldr	r3, [pc, #24]	; (1214 <set_maxFanErrorCount+0x48>)
    11fc:	1c10      	adds	r0, r2, #0
    11fe:	4798      	blx	r3
    1200:	1c03      	adds	r3, r0, #0
}
    1202:	1c18      	adds	r0, r3, #0
    1204:	46bd      	mov	sp, r7
    1206:	b004      	add	sp, #16
    1208:	bd80      	pop	{r7, pc}
    120a:	46c0      	nop			; (mov r8, r8)
    120c:	0001f6bd 	.word	0x0001f6bd
    1210:	2000003a 	.word	0x2000003a
    1214:	0002046d 	.word	0x0002046d

00001218 <set_maxPhpErrorCount>:

float set_maxPhpErrorCount (float fNewValue, bool bValid, int nZone)
{
    1218:	b580      	push	{r7, lr}
    121a:	b084      	sub	sp, #16
    121c:	af00      	add	r7, sp, #0
    121e:	60f8      	str	r0, [r7, #12]
    1220:	607a      	str	r2, [r7, #4]
    1222:	1c3b      	adds	r3, r7, #0
    1224:	330b      	adds	r3, #11
    1226:	1c0a      	adds	r2, r1, #0
    1228:	701a      	strb	r2, [r3, #0]
	if (bValid)
    122a:	1c3b      	adds	r3, r7, #0
    122c:	330b      	adds	r3, #11
    122e:	781b      	ldrb	r3, [r3, #0]
    1230:	2b00      	cmp	r3, #0
    1232:	d006      	beq.n	1242 <set_maxPhpErrorCount+0x2a>
	{
		maxPhpErrorCount = fNewValue;
    1234:	4b08      	ldr	r3, [pc, #32]	; (1258 <set_maxPhpErrorCount+0x40>)
    1236:	68f8      	ldr	r0, [r7, #12]
    1238:	4798      	blx	r3
    123a:	1c03      	adds	r3, r0, #0
    123c:	b29a      	uxth	r2, r3
    123e:	4b07      	ldr	r3, [pc, #28]	; (125c <set_maxPhpErrorCount+0x44>)
    1240:	801a      	strh	r2, [r3, #0]
	}
	
	return maxPhpErrorCount;
    1242:	4b06      	ldr	r3, [pc, #24]	; (125c <set_maxPhpErrorCount+0x44>)
    1244:	881a      	ldrh	r2, [r3, #0]
    1246:	4b06      	ldr	r3, [pc, #24]	; (1260 <set_maxPhpErrorCount+0x48>)
    1248:	1c10      	adds	r0, r2, #0
    124a:	4798      	blx	r3
    124c:	1c03      	adds	r3, r0, #0
}
    124e:	1c18      	adds	r0, r3, #0
    1250:	46bd      	mov	sp, r7
    1252:	b004      	add	sp, #16
    1254:	bd80      	pop	{r7, pc}
    1256:	46c0      	nop			; (mov r8, r8)
    1258:	0001f6bd 	.word	0x0001f6bd
    125c:	20000064 	.word	0x20000064
    1260:	0002046d 	.word	0x0002046d

00001264 <set_maxAllowedChamberTemp>:

float set_maxAllowedChamberTemp (float fNewValue, bool bValid, int nZone)
{
    1264:	b580      	push	{r7, lr}
    1266:	b084      	sub	sp, #16
    1268:	af00      	add	r7, sp, #0
    126a:	60f8      	str	r0, [r7, #12]
    126c:	607a      	str	r2, [r7, #4]
    126e:	1c3b      	adds	r3, r7, #0
    1270:	330b      	adds	r3, #11
    1272:	1c0a      	adds	r2, r1, #0
    1274:	701a      	strb	r2, [r3, #0]
	if (bValid)
    1276:	1c3b      	adds	r3, r7, #0
    1278:	330b      	adds	r3, #11
    127a:	781b      	ldrb	r3, [r3, #0]
    127c:	2b00      	cmp	r3, #0
    127e:	d00e      	beq.n	129e <set_maxAllowedChamberTemp+0x3a>
	{
		maxAllowedChamberTemp = fNewValue;
    1280:	4b0a      	ldr	r3, [pc, #40]	; (12ac <set_maxAllowedChamberTemp+0x48>)
    1282:	68fa      	ldr	r2, [r7, #12]
    1284:	601a      	str	r2, [r3, #0]
		eepromDataInfo.pAddr = &maxAllowedChamberTemp;
    1286:	4b0a      	ldr	r3, [pc, #40]	; (12b0 <set_maxAllowedChamberTemp+0x4c>)
    1288:	4a08      	ldr	r2, [pc, #32]	; (12ac <set_maxAllowedChamberTemp+0x48>)
    128a:	601a      	str	r2, [r3, #0]
		eepromDataInfo.size = sizeof(maxAllowedChamberTemp);
    128c:	4b08      	ldr	r3, [pc, #32]	; (12b0 <set_maxAllowedChamberTemp+0x4c>)
    128e:	2204      	movs	r2, #4
    1290:	711a      	strb	r2, [r3, #4]
		eepromDataInfo.nonvolatileFlag = true;
    1292:	4b07      	ldr	r3, [pc, #28]	; (12b0 <set_maxAllowedChamberTemp+0x4c>)
    1294:	2201      	movs	r2, #1
    1296:	715a      	strb	r2, [r3, #5]
		writeToEepromFlag = true;
    1298:	4b06      	ldr	r3, [pc, #24]	; (12b4 <set_maxAllowedChamberTemp+0x50>)
    129a:	2201      	movs	r2, #1
    129c:	701a      	strb	r2, [r3, #0]
	}
	
	return maxAllowedChamberTemp;
    129e:	4b03      	ldr	r3, [pc, #12]	; (12ac <set_maxAllowedChamberTemp+0x48>)
    12a0:	681b      	ldr	r3, [r3, #0]
}
    12a2:	1c18      	adds	r0, r3, #0
    12a4:	46bd      	mov	sp, r7
    12a6:	b004      	add	sp, #16
    12a8:	bd80      	pop	{r7, pc}
    12aa:	46c0      	nop			; (mov r8, r8)
    12ac:	20000180 	.word	0x20000180
    12b0:	200008dc 	.word	0x200008dc
    12b4:	200002f4 	.word	0x200002f4

000012b8 <set_minAllowedChamberTemp>:

float set_minAllowedChamberTemp (float fNewValue, bool bValid, int nZone)
{
    12b8:	b580      	push	{r7, lr}
    12ba:	b084      	sub	sp, #16
    12bc:	af00      	add	r7, sp, #0
    12be:	60f8      	str	r0, [r7, #12]
    12c0:	607a      	str	r2, [r7, #4]
    12c2:	1c3b      	adds	r3, r7, #0
    12c4:	330b      	adds	r3, #11
    12c6:	1c0a      	adds	r2, r1, #0
    12c8:	701a      	strb	r2, [r3, #0]
	if (bValid)
    12ca:	1c3b      	adds	r3, r7, #0
    12cc:	330b      	adds	r3, #11
    12ce:	781b      	ldrb	r3, [r3, #0]
    12d0:	2b00      	cmp	r3, #0
    12d2:	d00e      	beq.n	12f2 <set_minAllowedChamberTemp+0x3a>
	{
		minAllowedChamberTemp = fNewValue;
    12d4:	4b0a      	ldr	r3, [pc, #40]	; (1300 <set_minAllowedChamberTemp+0x48>)
    12d6:	68fa      	ldr	r2, [r7, #12]
    12d8:	601a      	str	r2, [r3, #0]
		eepromDataInfo.pAddr = &minAllowedChamberTemp;
    12da:	4b0a      	ldr	r3, [pc, #40]	; (1304 <set_minAllowedChamberTemp+0x4c>)
    12dc:	4a08      	ldr	r2, [pc, #32]	; (1300 <set_minAllowedChamberTemp+0x48>)
    12de:	601a      	str	r2, [r3, #0]
		eepromDataInfo.size = sizeof(minAllowedChamberTemp);
    12e0:	4b08      	ldr	r3, [pc, #32]	; (1304 <set_minAllowedChamberTemp+0x4c>)
    12e2:	2204      	movs	r2, #4
    12e4:	711a      	strb	r2, [r3, #4]
		eepromDataInfo.nonvolatileFlag = true;
    12e6:	4b07      	ldr	r3, [pc, #28]	; (1304 <set_minAllowedChamberTemp+0x4c>)
    12e8:	2201      	movs	r2, #1
    12ea:	715a      	strb	r2, [r3, #5]
		writeToEepromFlag = true;
    12ec:	4b06      	ldr	r3, [pc, #24]	; (1308 <set_minAllowedChamberTemp+0x50>)
    12ee:	2201      	movs	r2, #1
    12f0:	701a      	strb	r2, [r3, #0]
	}
	
	return minAllowedChamberTemp;
    12f2:	4b03      	ldr	r3, [pc, #12]	; (1300 <set_minAllowedChamberTemp+0x48>)
    12f4:	681b      	ldr	r3, [r3, #0]
}
    12f6:	1c18      	adds	r0, r3, #0
    12f8:	46bd      	mov	sp, r7
    12fa:	b004      	add	sp, #16
    12fc:	bd80      	pop	{r7, pc}
    12fe:	46c0      	nop			; (mov r8, r8)
    1300:	20000184 	.word	0x20000184
    1304:	200008dc 	.word	0x200008dc
    1308:	200002f4 	.word	0x200002f4

0000130c <fNoAction>:

float fNoAction (float fNewValue, bool bValid, int nZone)
{
    130c:	b580      	push	{r7, lr}
    130e:	b084      	sub	sp, #16
    1310:	af00      	add	r7, sp, #0
    1312:	60f8      	str	r0, [r7, #12]
    1314:	607a      	str	r2, [r7, #4]
    1316:	1c3b      	adds	r3, r7, #0
    1318:	330b      	adds	r3, #11
    131a:	1c0a      	adds	r2, r1, #0
    131c:	701a      	strb	r2, [r3, #0]
	return 0;
    131e:	2300      	movs	r3, #0
}
    1320:	1c18      	adds	r0, r3, #0
    1322:	46bd      	mov	sp, r7
    1324:	b004      	add	sp, #16
    1326:	bd80      	pop	{r7, pc}

00001328 <readChamberThermistorBeta>:

float readChamberThermistorBeta (float fNewValue, bool bValid, int nZone)
{
    1328:	b580      	push	{r7, lr}
    132a:	b084      	sub	sp, #16
    132c:	af00      	add	r7, sp, #0
    132e:	60f8      	str	r0, [r7, #12]
    1330:	607a      	str	r2, [r7, #4]
    1332:	1c3b      	adds	r3, r7, #0
    1334:	330b      	adds	r3, #11
    1336:	1c0a      	adds	r2, r1, #0
    1338:	701a      	strb	r2, [r3, #0]
	return (float)chamberThermistorBeta;
    133a:	4b05      	ldr	r3, [pc, #20]	; (1350 <readChamberThermistorBeta+0x28>)
    133c:	881a      	ldrh	r2, [r3, #0]
    133e:	4b05      	ldr	r3, [pc, #20]	; (1354 <readChamberThermistorBeta+0x2c>)
    1340:	1c10      	adds	r0, r2, #0
    1342:	4798      	blx	r3
    1344:	1c03      	adds	r3, r0, #0
}
    1346:	1c18      	adds	r0, r3, #0
    1348:	46bd      	mov	sp, r7
    134a:	b004      	add	sp, #16
    134c:	bd80      	pop	{r7, pc}
    134e:	46c0      	nop			; (mov r8, r8)
    1350:	2000018c 	.word	0x2000018c
    1354:	0002046d 	.word	0x0002046d

00001358 <readRejectThermistorBeta>:

float readRejectThermistorBeta (float fNewValue, bool bValid, int nZone)
{
    1358:	b580      	push	{r7, lr}
    135a:	b084      	sub	sp, #16
    135c:	af00      	add	r7, sp, #0
    135e:	60f8      	str	r0, [r7, #12]
    1360:	607a      	str	r2, [r7, #4]
    1362:	1c3b      	adds	r3, r7, #0
    1364:	330b      	adds	r3, #11
    1366:	1c0a      	adds	r2, r1, #0
    1368:	701a      	strb	r2, [r3, #0]
	return (float)rejectThermistorBeta;
    136a:	4b05      	ldr	r3, [pc, #20]	; (1380 <readRejectThermistorBeta+0x28>)
    136c:	881a      	ldrh	r2, [r3, #0]
    136e:	4b05      	ldr	r3, [pc, #20]	; (1384 <readRejectThermistorBeta+0x2c>)
    1370:	1c10      	adds	r0, r2, #0
    1372:	4798      	blx	r3
    1374:	1c03      	adds	r3, r0, #0
}
    1376:	1c18      	adds	r0, r3, #0
    1378:	46bd      	mov	sp, r7
    137a:	b004      	add	sp, #16
    137c:	bd80      	pop	{r7, pc}
    137e:	46c0      	nop			; (mov r8, r8)
    1380:	2000018e 	.word	0x2000018e
    1384:	0002046d 	.word	0x0002046d

00001388 <readPhp1OutputDutyOffset>:

float readPhp1OutputDutyOffset (float fNewValue, bool bValid, int nZone)
{
    1388:	b580      	push	{r7, lr}
    138a:	b084      	sub	sp, #16
    138c:	af00      	add	r7, sp, #0
    138e:	60f8      	str	r0, [r7, #12]
    1390:	607a      	str	r2, [r7, #4]
    1392:	1c3b      	adds	r3, r7, #0
    1394:	330b      	adds	r3, #11
    1396:	1c0a      	adds	r2, r1, #0
    1398:	701a      	strb	r2, [r3, #0]
	return (float)ps1.phpOutputDutyOffset;
    139a:	4b03      	ldr	r3, [pc, #12]	; (13a8 <readPhp1OutputDutyOffset+0x20>)
    139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
    139e:	1c18      	adds	r0, r3, #0
    13a0:	46bd      	mov	sp, r7
    13a2:	b004      	add	sp, #16
    13a4:	bd80      	pop	{r7, pc}
    13a6:	46c0      	nop			; (mov r8, r8)
    13a8:	20000a84 	.word	0x20000a84

000013ac <readPhp2OutputDutyOffset>:

float readPhp2OutputDutyOffset (float fNewValue, bool bValid, int nZone)
{
    13ac:	b580      	push	{r7, lr}
    13ae:	b084      	sub	sp, #16
    13b0:	af00      	add	r7, sp, #0
    13b2:	60f8      	str	r0, [r7, #12]
    13b4:	607a      	str	r2, [r7, #4]
    13b6:	1c3b      	adds	r3, r7, #0
    13b8:	330b      	adds	r3, #11
    13ba:	1c0a      	adds	r2, r1, #0
    13bc:	701a      	strb	r2, [r3, #0]
	return (float)ps2.phpOutputDutyOffset;
    13be:	4b03      	ldr	r3, [pc, #12]	; (13cc <readPhp2OutputDutyOffset+0x20>)
    13c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
    13c2:	1c18      	adds	r0, r3, #0
    13c4:	46bd      	mov	sp, r7
    13c6:	b004      	add	sp, #16
    13c8:	bd80      	pop	{r7, pc}
    13ca:	46c0      	nop			; (mov r8, r8)
    13cc:	20000d64 	.word	0x20000d64

000013d0 <set_doorOpenCount1HrLimit>:

float set_doorOpenCount1HrLimit (float fNewValue, bool bValid, int nZone)
{
    13d0:	b580      	push	{r7, lr}
    13d2:	b084      	sub	sp, #16
    13d4:	af00      	add	r7, sp, #0
    13d6:	60f8      	str	r0, [r7, #12]
    13d8:	607a      	str	r2, [r7, #4]
    13da:	1c3b      	adds	r3, r7, #0
    13dc:	330b      	adds	r3, #11
    13de:	1c0a      	adds	r2, r1, #0
    13e0:	701a      	strb	r2, [r3, #0]
	if (bValid)
    13e2:	1c3b      	adds	r3, r7, #0
    13e4:	330b      	adds	r3, #11
    13e6:	781b      	ldrb	r3, [r3, #0]
    13e8:	2b00      	cmp	r3, #0
    13ea:	d013      	beq.n	1414 <set_doorOpenCount1HrLimit+0x44>
	{
		doorOpenCount1HrLimit = (uint8_t)fNewValue;
    13ec:	4b0e      	ldr	r3, [pc, #56]	; (1428 <set_doorOpenCount1HrLimit+0x58>)
    13ee:	68f8      	ldr	r0, [r7, #12]
    13f0:	4798      	blx	r3
    13f2:	1c03      	adds	r3, r0, #0
    13f4:	b2db      	uxtb	r3, r3
    13f6:	1c1a      	adds	r2, r3, #0
    13f8:	4b0c      	ldr	r3, [pc, #48]	; (142c <set_doorOpenCount1HrLimit+0x5c>)
    13fa:	801a      	strh	r2, [r3, #0]
		eepromDataInfo.pAddr = &doorOpenCount1HrLimit;
    13fc:	4b0c      	ldr	r3, [pc, #48]	; (1430 <set_doorOpenCount1HrLimit+0x60>)
    13fe:	4a0b      	ldr	r2, [pc, #44]	; (142c <set_doorOpenCount1HrLimit+0x5c>)
    1400:	601a      	str	r2, [r3, #0]
		eepromDataInfo.size = sizeof(doorOpenCount1HrLimit);
    1402:	4b0b      	ldr	r3, [pc, #44]	; (1430 <set_doorOpenCount1HrLimit+0x60>)
    1404:	2202      	movs	r2, #2
    1406:	711a      	strb	r2, [r3, #4]
		eepromDataInfo.nonvolatileFlag = true;
    1408:	4b09      	ldr	r3, [pc, #36]	; (1430 <set_doorOpenCount1HrLimit+0x60>)
    140a:	2201      	movs	r2, #1
    140c:	715a      	strb	r2, [r3, #5]
		writeToEepromFlag = true;
    140e:	4b09      	ldr	r3, [pc, #36]	; (1434 <set_doorOpenCount1HrLimit+0x64>)
    1410:	2201      	movs	r2, #1
    1412:	701a      	strb	r2, [r3, #0]
	}
	
	return (float)doorOpenCount1HrLimit;
    1414:	4b05      	ldr	r3, [pc, #20]	; (142c <set_doorOpenCount1HrLimit+0x5c>)
    1416:	881a      	ldrh	r2, [r3, #0]
    1418:	4b07      	ldr	r3, [pc, #28]	; (1438 <set_doorOpenCount1HrLimit+0x68>)
    141a:	1c10      	adds	r0, r2, #0
    141c:	4798      	blx	r3
    141e:	1c03      	adds	r3, r0, #0
}
    1420:	1c18      	adds	r0, r3, #0
    1422:	46bd      	mov	sp, r7
    1424:	b004      	add	sp, #16
    1426:	bd80      	pop	{r7, pc}
    1428:	0001f6bd 	.word	0x0001f6bd
    142c:	20000166 	.word	0x20000166
    1430:	200008dc 	.word	0x200008dc
    1434:	200002f4 	.word	0x200002f4
    1438:	0002046d 	.word	0x0002046d
    143c:	00000000 	.word	0x00000000

00001440 <usartCommandHandler>:


void usartCommandHandler()
{
    1440:	b5f0      	push	{r4, r5, r6, r7, lr}
    1442:	4647      	mov	r7, r8
    1444:	b480      	push	{r7}
    1446:	b0de      	sub	sp, #376	; 0x178
    1448:	af04      	add	r7, sp, #16
	bool bResult = false;
    144a:	20a1      	movs	r0, #161	; 0xa1
    144c:	0040      	lsls	r0, r0, #1
    144e:	183b      	adds	r3, r7, r0
    1450:	2200      	movs	r2, #0
    1452:	701a      	strb	r2, [r3, #0]
	char bCmdGroup[8];
	char bCommand[8];
	char bParam[16];
	char bFraction[8];
	uint8_t nLength = 0;
    1454:	2142      	movs	r1, #66	; 0x42
    1456:	31ff      	adds	r1, #255	; 0xff
    1458:	187b      	adds	r3, r7, r1
    145a:	2200      	movs	r2, #0
    145c:	701a      	strb	r2, [r3, #0]
	char* strTokens = NULL;
    145e:	2300      	movs	r3, #0
    1460:	22b2      	movs	r2, #178	; 0xb2
    1462:	0052      	lsls	r2, r2, #1
    1464:	19d2      	adds	r2, r2, r7
    1466:	6013      	str	r3, [r2, #0]
	uint8_t nIndexParser = 0;
    1468:	2064      	movs	r0, #100	; 0x64
    146a:	30ff      	adds	r0, #255	; 0xff
    146c:	183b      	adds	r3, r7, r0
    146e:	2200      	movs	r2, #0
    1470:	701a      	strb	r2, [r3, #0]
	uint8_t nParseLength = 0;
    1472:	21b1      	movs	r1, #177	; 0xb1
    1474:	0049      	lsls	r1, r1, #1
    1476:	187b      	adds	r3, r7, r1
    1478:	2200      	movs	r2, #0
    147a:	701a      	strb	r2, [r3, #0]
	bool result = false;
    147c:	22a0      	movs	r2, #160	; 0xa0
    147e:	0052      	lsls	r2, r2, #1
    1480:	18bb      	adds	r3, r7, r2
    1482:	2200      	movs	r2, #0
    1484:	701a      	strb	r2, [r3, #0]
    int  nSign = 1;
    1486:	2301      	movs	r3, #1
    1488:	20ae      	movs	r0, #174	; 0xae
    148a:	0040      	lsls	r0, r0, #1
    148c:	19c0      	adds	r0, r0, r7
    148e:	6003      	str	r3, [r0, #0]
	float dblGetValue= 0.0f;
    1490:	2300      	movs	r3, #0
    1492:	219e      	movs	r1, #158	; 0x9e
    1494:	0049      	lsls	r1, r1, #1
    1496:	19c9      	adds	r1, r1, r7
    1498:	600b      	str	r3, [r1, #0]
	
	//Copy incoming buffer
	nLength = command[0];
    149a:	2242      	movs	r2, #66	; 0x42
    149c:	32ff      	adds	r2, #255	; 0xff
    149e:	18bb      	adds	r3, r7, r2
    14a0:	4ae5      	ldr	r2, [pc, #916]	; (1838 <usartCommandHandler+0x3f8>)
    14a2:	7812      	ldrb	r2, [r2, #0]
    14a4:	701a      	strb	r2, [r3, #0]
	strTokens = strtok ((char*)&command[1], " ,.\n");
    14a6:	4ae5      	ldr	r2, [pc, #916]	; (183c <usartCommandHandler+0x3fc>)
    14a8:	4be5      	ldr	r3, [pc, #916]	; (1840 <usartCommandHandler+0x400>)
    14aa:	1c10      	adds	r0, r2, #0
    14ac:	1c19      	adds	r1, r3, #0
    14ae:	4be5      	ldr	r3, [pc, #916]	; (1844 <usartCommandHandler+0x404>)
    14b0:	4798      	blx	r3
    14b2:	1c03      	adds	r3, r0, #0
    14b4:	20b2      	movs	r0, #178	; 0xb2
    14b6:	0040      	lsls	r0, r0, #1
    14b8:	19c0      	adds	r0, r0, r7
    14ba:	6003      	str	r3, [r0, #0]
	while (strTokens != NULL)
    14bc:	e10c      	b.n	16d8 <usartCommandHandler+0x298>
	{
		nParseLength += strlen(strTokens);
    14be:	21b2      	movs	r1, #178	; 0xb2
    14c0:	0049      	lsls	r1, r1, #1
    14c2:	19c9      	adds	r1, r1, r7
    14c4:	680b      	ldr	r3, [r1, #0]
    14c6:	1c18      	adds	r0, r3, #0
    14c8:	4bdf      	ldr	r3, [pc, #892]	; (1848 <usartCommandHandler+0x408>)
    14ca:	4798      	blx	r3
    14cc:	1c03      	adds	r3, r0, #0
    14ce:	b2d9      	uxtb	r1, r3
    14d0:	22b1      	movs	r2, #177	; 0xb1
    14d2:	0052      	lsls	r2, r2, #1
    14d4:	18bb      	adds	r3, r7, r2
    14d6:	20b1      	movs	r0, #177	; 0xb1
    14d8:	0040      	lsls	r0, r0, #1
    14da:	183a      	adds	r2, r7, r0
    14dc:	7812      	ldrb	r2, [r2, #0]
    14de:	188a      	adds	r2, r1, r2
    14e0:	701a      	strb	r2, [r3, #0]
		if (nIndexParser == 0)
    14e2:	2164      	movs	r1, #100	; 0x64
    14e4:	31ff      	adds	r1, #255	; 0xff
    14e6:	187b      	adds	r3, r7, r1
    14e8:	781b      	ldrb	r3, [r3, #0]
    14ea:	2b00      	cmp	r3, #0
    14ec:	d122      	bne.n	1534 <usartCommandHandler+0xf4>
		{
		  memcpy (bCmdGroup, strTokens, strlen(strTokens));
    14ee:	22b2      	movs	r2, #178	; 0xb2
    14f0:	0052      	lsls	r2, r2, #1
    14f2:	19d2      	adds	r2, r2, r7
    14f4:	6813      	ldr	r3, [r2, #0]
    14f6:	1c18      	adds	r0, r3, #0
    14f8:	4bd3      	ldr	r3, [pc, #844]	; (1848 <usartCommandHandler+0x408>)
    14fa:	4798      	blx	r3
    14fc:	1c03      	adds	r3, r0, #0
    14fe:	1c39      	adds	r1, r7, #0
    1500:	3124      	adds	r1, #36	; 0x24
    1502:	20b2      	movs	r0, #178	; 0xb2
    1504:	0040      	lsls	r0, r0, #1
    1506:	19c0      	adds	r0, r0, r7
    1508:	6802      	ldr	r2, [r0, #0]
    150a:	1c08      	adds	r0, r1, #0
    150c:	1c11      	adds	r1, r2, #0
    150e:	1c1a      	adds	r2, r3, #0
    1510:	4bce      	ldr	r3, [pc, #824]	; (184c <usartCommandHandler+0x40c>)
    1512:	4798      	blx	r3
		  bCmdGroup[strlen(strTokens)] = 0x00;
    1514:	21b2      	movs	r1, #178	; 0xb2
    1516:	0049      	lsls	r1, r1, #1
    1518:	19c9      	adds	r1, r1, r7
    151a:	680b      	ldr	r3, [r1, #0]
    151c:	1c18      	adds	r0, r3, #0
    151e:	4bca      	ldr	r3, [pc, #808]	; (1848 <usartCommandHandler+0x408>)
    1520:	4798      	blx	r3
    1522:	1c03      	adds	r3, r0, #0
    1524:	4aca      	ldr	r2, [pc, #808]	; (1850 <usartCommandHandler+0x410>)
    1526:	20b4      	movs	r0, #180	; 0xb4
    1528:	0040      	lsls	r0, r0, #1
    152a:	19c0      	adds	r0, r0, r7
    152c:	1882      	adds	r2, r0, r2
    152e:	2100      	movs	r1, #0
    1530:	54d1      	strb	r1, [r2, r3]
    1532:	e0a4      	b.n	167e <usartCommandHandler+0x23e>
		}
		else if (nIndexParser == 1)
    1534:	2164      	movs	r1, #100	; 0x64
    1536:	31ff      	adds	r1, #255	; 0xff
    1538:	187b      	adds	r3, r7, r1
    153a:	781b      	ldrb	r3, [r3, #0]
    153c:	2b01      	cmp	r3, #1
    153e:	d122      	bne.n	1586 <usartCommandHandler+0x146>
		{
		  memcpy (bCommand, strTokens, strlen(strTokens));
    1540:	22b2      	movs	r2, #178	; 0xb2
    1542:	0052      	lsls	r2, r2, #1
    1544:	19d2      	adds	r2, r2, r7
    1546:	6813      	ldr	r3, [r2, #0]
    1548:	1c18      	adds	r0, r3, #0
    154a:	4bbf      	ldr	r3, [pc, #764]	; (1848 <usartCommandHandler+0x408>)
    154c:	4798      	blx	r3
    154e:	1c03      	adds	r3, r0, #0
    1550:	1c39      	adds	r1, r7, #0
    1552:	311c      	adds	r1, #28
    1554:	20b2      	movs	r0, #178	; 0xb2
    1556:	0040      	lsls	r0, r0, #1
    1558:	19c0      	adds	r0, r0, r7
    155a:	6802      	ldr	r2, [r0, #0]
    155c:	1c08      	adds	r0, r1, #0
    155e:	1c11      	adds	r1, r2, #0
    1560:	1c1a      	adds	r2, r3, #0
    1562:	4bba      	ldr	r3, [pc, #744]	; (184c <usartCommandHandler+0x40c>)
    1564:	4798      	blx	r3
		  bCommand[strlen(strTokens)] = 0x00;
    1566:	21b2      	movs	r1, #178	; 0xb2
    1568:	0049      	lsls	r1, r1, #1
    156a:	19c9      	adds	r1, r1, r7
    156c:	680b      	ldr	r3, [r1, #0]
    156e:	1c18      	adds	r0, r3, #0
    1570:	4bb5      	ldr	r3, [pc, #724]	; (1848 <usartCommandHandler+0x408>)
    1572:	4798      	blx	r3
    1574:	1c03      	adds	r3, r0, #0
    1576:	4ab7      	ldr	r2, [pc, #732]	; (1854 <usartCommandHandler+0x414>)
    1578:	20b4      	movs	r0, #180	; 0xb4
    157a:	0040      	lsls	r0, r0, #1
    157c:	19c0      	adds	r0, r0, r7
    157e:	1882      	adds	r2, r0, r2
    1580:	2100      	movs	r1, #0
    1582:	54d1      	strb	r1, [r2, r3]
    1584:	e07b      	b.n	167e <usartCommandHandler+0x23e>
		}
		else if (nIndexParser == 2)
    1586:	2164      	movs	r1, #100	; 0x64
    1588:	31ff      	adds	r1, #255	; 0xff
    158a:	187b      	adds	r3, r7, r1
    158c:	781b      	ldrb	r3, [r3, #0]
    158e:	2b02      	cmp	r3, #2
    1590:	d14e      	bne.n	1630 <usartCommandHandler+0x1f0>
		{
          if (strTokens[0] == '+')
    1592:	22b2      	movs	r2, #178	; 0xb2
    1594:	0052      	lsls	r2, r2, #1
    1596:	19d2      	adds	r2, r2, r7
    1598:	6813      	ldr	r3, [r2, #0]
    159a:	781b      	ldrb	r3, [r3, #0]
    159c:	2b2b      	cmp	r3, #43	; 0x2b
    159e:	d10e      	bne.n	15be <usartCommandHandler+0x17e>
          {
            nSign = 1;
    15a0:	2301      	movs	r3, #1
    15a2:	20ae      	movs	r0, #174	; 0xae
    15a4:	0040      	lsls	r0, r0, #1
    15a6:	19c0      	adds	r0, r0, r7
    15a8:	6003      	str	r3, [r0, #0]
            strTokens++;
    15aa:	21b2      	movs	r1, #178	; 0xb2
    15ac:	0049      	lsls	r1, r1, #1
    15ae:	19c9      	adds	r1, r1, r7
    15b0:	680b      	ldr	r3, [r1, #0]
    15b2:	3301      	adds	r3, #1
    15b4:	22b2      	movs	r2, #178	; 0xb2
    15b6:	0052      	lsls	r2, r2, #1
    15b8:	19d2      	adds	r2, r2, r7
    15ba:	6013      	str	r3, [r2, #0]
    15bc:	e015      	b.n	15ea <usartCommandHandler+0x1aa>
          }
          else if (strTokens[0] == '-')
    15be:	20b2      	movs	r0, #178	; 0xb2
    15c0:	0040      	lsls	r0, r0, #1
    15c2:	19c0      	adds	r0, r0, r7
    15c4:	6803      	ldr	r3, [r0, #0]
    15c6:	781b      	ldrb	r3, [r3, #0]
    15c8:	2b2d      	cmp	r3, #45	; 0x2d
    15ca:	d10e      	bne.n	15ea <usartCommandHandler+0x1aa>
          {
            nSign = -1;
    15cc:	2301      	movs	r3, #1
    15ce:	425b      	negs	r3, r3
    15d0:	21ae      	movs	r1, #174	; 0xae
    15d2:	0049      	lsls	r1, r1, #1
    15d4:	19c9      	adds	r1, r1, r7
    15d6:	600b      	str	r3, [r1, #0]
            strTokens++;
    15d8:	22b2      	movs	r2, #178	; 0xb2
    15da:	0052      	lsls	r2, r2, #1
    15dc:	19d2      	adds	r2, r2, r7
    15de:	6813      	ldr	r3, [r2, #0]
    15e0:	3301      	adds	r3, #1
    15e2:	20b2      	movs	r0, #178	; 0xb2
    15e4:	0040      	lsls	r0, r0, #1
    15e6:	19c0      	adds	r0, r0, r7
    15e8:	6003      	str	r3, [r0, #0]
          }
		  memcpy (bParam, strTokens, strlen(strTokens));
    15ea:	21b2      	movs	r1, #178	; 0xb2
    15ec:	0049      	lsls	r1, r1, #1
    15ee:	19c9      	adds	r1, r1, r7
    15f0:	680b      	ldr	r3, [r1, #0]
    15f2:	1c18      	adds	r0, r3, #0
    15f4:	4b94      	ldr	r3, [pc, #592]	; (1848 <usartCommandHandler+0x408>)
    15f6:	4798      	blx	r3
    15f8:	1c03      	adds	r3, r0, #0
    15fa:	1c39      	adds	r1, r7, #0
    15fc:	310c      	adds	r1, #12
    15fe:	20b2      	movs	r0, #178	; 0xb2
    1600:	0040      	lsls	r0, r0, #1
    1602:	19c0      	adds	r0, r0, r7
    1604:	6802      	ldr	r2, [r0, #0]
    1606:	1c08      	adds	r0, r1, #0
    1608:	1c11      	adds	r1, r2, #0
    160a:	1c1a      	adds	r2, r3, #0
    160c:	4b8f      	ldr	r3, [pc, #572]	; (184c <usartCommandHandler+0x40c>)
    160e:	4798      	blx	r3
		  bParam[strlen(strTokens)] = 0x00;
    1610:	21b2      	movs	r1, #178	; 0xb2
    1612:	0049      	lsls	r1, r1, #1
    1614:	19c9      	adds	r1, r1, r7
    1616:	680b      	ldr	r3, [r1, #0]
    1618:	1c18      	adds	r0, r3, #0
    161a:	4b8b      	ldr	r3, [pc, #556]	; (1848 <usartCommandHandler+0x408>)
    161c:	4798      	blx	r3
    161e:	1c03      	adds	r3, r0, #0
    1620:	4a8d      	ldr	r2, [pc, #564]	; (1858 <usartCommandHandler+0x418>)
    1622:	20b4      	movs	r0, #180	; 0xb4
    1624:	0040      	lsls	r0, r0, #1
    1626:	19c0      	adds	r0, r0, r7
    1628:	1882      	adds	r2, r0, r2
    162a:	2100      	movs	r1, #0
    162c:	54d1      	strb	r1, [r2, r3]
    162e:	e026      	b.n	167e <usartCommandHandler+0x23e>
		}
		else if (nIndexParser == 3)
    1630:	2164      	movs	r1, #100	; 0x64
    1632:	31ff      	adds	r1, #255	; 0xff
    1634:	187b      	adds	r3, r7, r1
    1636:	781b      	ldrb	r3, [r3, #0]
    1638:	2b03      	cmp	r3, #3
    163a:	d120      	bne.n	167e <usartCommandHandler+0x23e>
		{
			memcpy (bFraction, strTokens, strlen(strTokens));
    163c:	22b2      	movs	r2, #178	; 0xb2
    163e:	0052      	lsls	r2, r2, #1
    1640:	19d2      	adds	r2, r2, r7
    1642:	6813      	ldr	r3, [r2, #0]
    1644:	1c18      	adds	r0, r3, #0
    1646:	4b80      	ldr	r3, [pc, #512]	; (1848 <usartCommandHandler+0x408>)
    1648:	4798      	blx	r3
    164a:	1c03      	adds	r3, r0, #0
    164c:	1d39      	adds	r1, r7, #4
    164e:	20b2      	movs	r0, #178	; 0xb2
    1650:	0040      	lsls	r0, r0, #1
    1652:	19c0      	adds	r0, r0, r7
    1654:	6802      	ldr	r2, [r0, #0]
    1656:	1c08      	adds	r0, r1, #0
    1658:	1c11      	adds	r1, r2, #0
    165a:	1c1a      	adds	r2, r3, #0
    165c:	4b7b      	ldr	r3, [pc, #492]	; (184c <usartCommandHandler+0x40c>)
    165e:	4798      	blx	r3
			bFraction[strlen(strTokens)] = 0x00;
    1660:	21b2      	movs	r1, #178	; 0xb2
    1662:	0049      	lsls	r1, r1, #1
    1664:	19c9      	adds	r1, r1, r7
    1666:	680b      	ldr	r3, [r1, #0]
    1668:	1c18      	adds	r0, r3, #0
    166a:	4b77      	ldr	r3, [pc, #476]	; (1848 <usartCommandHandler+0x408>)
    166c:	4798      	blx	r3
    166e:	1c03      	adds	r3, r0, #0
    1670:	4a7a      	ldr	r2, [pc, #488]	; (185c <usartCommandHandler+0x41c>)
    1672:	20b4      	movs	r0, #180	; 0xb4
    1674:	0040      	lsls	r0, r0, #1
    1676:	19c0      	adds	r0, r0, r7
    1678:	1882      	adds	r2, r0, r2
    167a:	2100      	movs	r1, #0
    167c:	54d1      	strb	r1, [r2, r3]
		}
		
		if ((nParseLength+1) < nLength)
    167e:	21b1      	movs	r1, #177	; 0xb1
    1680:	0049      	lsls	r1, r1, #1
    1682:	187b      	adds	r3, r7, r1
    1684:	781b      	ldrb	r3, [r3, #0]
    1686:	1c5a      	adds	r2, r3, #1
    1688:	2042      	movs	r0, #66	; 0x42
    168a:	30ff      	adds	r0, #255	; 0xff
    168c:	183b      	adds	r3, r7, r0
    168e:	781b      	ldrb	r3, [r3, #0]
    1690:	429a      	cmp	r2, r3
    1692:	da0a      	bge.n	16aa <usartCommandHandler+0x26a>
		{
		  strTokens = strtok (NULL, " ,.\n");  
    1694:	4b6a      	ldr	r3, [pc, #424]	; (1840 <usartCommandHandler+0x400>)
    1696:	2000      	movs	r0, #0
    1698:	1c19      	adds	r1, r3, #0
    169a:	4b6a      	ldr	r3, [pc, #424]	; (1844 <usartCommandHandler+0x404>)
    169c:	4798      	blx	r3
    169e:	1c03      	adds	r3, r0, #0
    16a0:	21b2      	movs	r1, #178	; 0xb2
    16a2:	0049      	lsls	r1, r1, #1
    16a4:	19c9      	adds	r1, r1, r7
    16a6:	600b      	str	r3, [r1, #0]
    16a8:	e004      	b.n	16b4 <usartCommandHandler+0x274>
		}
		else
		  strTokens = NULL;
    16aa:	2300      	movs	r3, #0
    16ac:	22b2      	movs	r2, #178	; 0xb2
    16ae:	0052      	lsls	r2, r2, #1
    16b0:	19d2      	adds	r2, r2, r7
    16b2:	6013      	str	r3, [r2, #0]
		  
		nIndexParser += 1;
    16b4:	2064      	movs	r0, #100	; 0x64
    16b6:	30ff      	adds	r0, #255	; 0xff
    16b8:	183b      	adds	r3, r7, r0
    16ba:	2164      	movs	r1, #100	; 0x64
    16bc:	31ff      	adds	r1, #255	; 0xff
    16be:	187a      	adds	r2, r7, r1
    16c0:	7812      	ldrb	r2, [r2, #0]
    16c2:	3201      	adds	r2, #1
    16c4:	701a      	strb	r2, [r3, #0]
		nParseLength += 1; //adjust for .
    16c6:	22b1      	movs	r2, #177	; 0xb1
    16c8:	0052      	lsls	r2, r2, #1
    16ca:	18bb      	adds	r3, r7, r2
    16cc:	20b1      	movs	r0, #177	; 0xb1
    16ce:	0040      	lsls	r0, r0, #1
    16d0:	183a      	adds	r2, r7, r0
    16d2:	7812      	ldrb	r2, [r2, #0]
    16d4:	3201      	adds	r2, #1
    16d6:	701a      	strb	r2, [r3, #0]
	float dblGetValue= 0.0f;
	
	//Copy incoming buffer
	nLength = command[0];
	strTokens = strtok ((char*)&command[1], " ,.\n");
	while (strTokens != NULL)
    16d8:	21b2      	movs	r1, #178	; 0xb2
    16da:	0049      	lsls	r1, r1, #1
    16dc:	19c9      	adds	r1, r1, r7
    16de:	680b      	ldr	r3, [r1, #0]
    16e0:	2b00      	cmp	r3, #0
    16e2:	d000      	beq.n	16e6 <usartCommandHandler+0x2a6>
    16e4:	e6eb      	b.n	14be <usartCommandHandler+0x7e>
	dbg_info("\nbCmdGrp %s", (int)strtol((const char*)bCmdGroup, NULL, 10));
	dbg_info("\nbCmd    %s", bCommand);
	dbg_info("\nbParam  %s", bParam);
	dbg_info("\nbFrac   %s", bFraction);
	*/
	switch ((int)strtol((const char*)bCmdGroup, NULL, 10))
    16e6:	1c3b      	adds	r3, r7, #0
    16e8:	3324      	adds	r3, #36	; 0x24
    16ea:	1c18      	adds	r0, r3, #0
    16ec:	2100      	movs	r1, #0
    16ee:	220a      	movs	r2, #10
    16f0:	4b5b      	ldr	r3, [pc, #364]	; (1860 <usartCommandHandler+0x420>)
    16f2:	4798      	blx	r3
    16f4:	1c03      	adds	r3, r0, #0
    16f6:	2b09      	cmp	r3, #9
    16f8:	d901      	bls.n	16fe <usartCommandHandler+0x2be>
    16fa:	f002 f9ec 	bl	3ad6 <STACK_SIZE+0x1ad6>
    16fe:	009a      	lsls	r2, r3, #2
    1700:	4b58      	ldr	r3, [pc, #352]	; (1864 <usartCommandHandler+0x424>)
    1702:	18d3      	adds	r3, r2, r3
    1704:	681b      	ldr	r3, [r3, #0]
    1706:	469f      	mov	pc, r3
	{
		case 0:
		{
		  switch (bCommand[0])
    1708:	4b52      	ldr	r3, [pc, #328]	; (1854 <usartCommandHandler+0x414>)
    170a:	22b4      	movs	r2, #180	; 0xb4
    170c:	0052      	lsls	r2, r2, #1
    170e:	19d2      	adds	r2, r2, r7
    1710:	18d3      	adds	r3, r2, r3
    1712:	781b      	ldrb	r3, [r3, #0]
    1714:	3b30      	subs	r3, #48	; 0x30
    1716:	2b09      	cmp	r3, #9
    1718:	d900      	bls.n	171c <usartCommandHandler+0x2dc>
    171a:	e371      	b.n	1e00 <usartCommandHandler+0x9c0>
    171c:	009a      	lsls	r2, r3, #2
    171e:	4b52      	ldr	r3, [pc, #328]	; (1868 <usartCommandHandler+0x428>)
    1720:	18d3      	adds	r3, r2, r3
    1722:	681b      	ldr	r3, [r3, #0]
    1724:	469f      	mov	pc, r3
		  {
//------------------------------------------------------------------
// 0.0.x	enable/disable manual override
//------------------------------------------------------------------			  
			  case '0':
				  result = ((bParam[0] - '0') != 0);
    1726:	4b4c      	ldr	r3, [pc, #304]	; (1858 <usartCommandHandler+0x418>)
    1728:	20b4      	movs	r0, #180	; 0xb4
    172a:	0040      	lsls	r0, r0, #1
    172c:	19c0      	adds	r0, r0, r7
    172e:	18c3      	adds	r3, r0, r3
    1730:	781a      	ldrb	r2, [r3, #0]
    1732:	21a0      	movs	r1, #160	; 0xa0
    1734:	0049      	lsls	r1, r1, #1
    1736:	187b      	adds	r3, r7, r1
    1738:	3a30      	subs	r2, #48	; 0x30
    173a:	1e51      	subs	r1, r2, #1
    173c:	418a      	sbcs	r2, r1
    173e:	701a      	strb	r2, [r3, #0]
				  enableManualOverride = result;
    1740:	4b4a      	ldr	r3, [pc, #296]	; (186c <usartCommandHandler+0x42c>)
    1742:	20a0      	movs	r0, #160	; 0xa0
    1744:	0040      	lsls	r0, r0, #1
    1746:	183a      	adds	r2, r7, r0
    1748:	7812      	ldrb	r2, [r2, #0]
    174a:	701a      	strb	r2, [r3, #0]
				  if (enableManualOverride)
    174c:	4b47      	ldr	r3, [pc, #284]	; (186c <usartCommandHandler+0x42c>)
    174e:	781b      	ldrb	r3, [r3, #0]
    1750:	2b00      	cmp	r3, #0
    1752:	d00c      	beq.n	176e <usartCommandHandler+0x32e>
				  {
					  chamber1.deactivateAutoControl = true;
    1754:	4a46      	ldr	r2, [pc, #280]	; (1870 <usartCommandHandler+0x430>)
    1756:	233d      	movs	r3, #61	; 0x3d
    1758:	2101      	movs	r1, #1
    175a:	54d1      	strb	r1, [r2, r3]
					  chamber2.deactivateAutoControl = true;
    175c:	4a45      	ldr	r2, [pc, #276]	; (1874 <usartCommandHandler+0x434>)
    175e:	233d      	movs	r3, #61	; 0x3d
    1760:	2101      	movs	r1, #1
    1762:	54d1      	strb	r1, [r2, r3]
					  dbg("\n[manual override enabled]\n");
    1764:	4b44      	ldr	r3, [pc, #272]	; (1878 <usartCommandHandler+0x438>)
    1766:	1c18      	adds	r0, r3, #0
    1768:	4b44      	ldr	r3, [pc, #272]	; (187c <usartCommandHandler+0x43c>)
    176a:	4798      	blx	r3
				  {
					  chamber1.deactivateAutoControl = false;
					  chamber2.deactivateAutoControl = false;
					  dbg("\n[manual override disabled]");
				  }
				  break;
    176c:	e34e      	b.n	1e0c <usartCommandHandler+0x9cc>
					  chamber2.deactivateAutoControl = true;
					  dbg("\n[manual override enabled]\n");
				  }
				  else
				  {
					  chamber1.deactivateAutoControl = false;
    176e:	4a40      	ldr	r2, [pc, #256]	; (1870 <usartCommandHandler+0x430>)
    1770:	233d      	movs	r3, #61	; 0x3d
    1772:	2100      	movs	r1, #0
    1774:	54d1      	strb	r1, [r2, r3]
					  chamber2.deactivateAutoControl = false;
    1776:	4a3f      	ldr	r2, [pc, #252]	; (1874 <usartCommandHandler+0x434>)
    1778:	233d      	movs	r3, #61	; 0x3d
    177a:	2100      	movs	r1, #0
    177c:	54d1      	strb	r1, [r2, r3]
					  dbg("\n[manual override disabled]");
    177e:	4b40      	ldr	r3, [pc, #256]	; (1880 <usartCommandHandler+0x440>)
    1780:	1c18      	adds	r0, r3, #0
    1782:	4b40      	ldr	r3, [pc, #256]	; (1884 <usartCommandHandler+0x444>)
    1784:	4798      	blx	r3
				  }
				  break;
    1786:	e341      	b.n	1e0c <usartCommandHandler+0x9cc>
//------------------------------------------------------------------
// 0.1.x	enable/disable temp sensor override
//------------------------------------------------------------------				  
			  case '1':
				  result = ((bParam[0] - '0') != 0);
    1788:	4b33      	ldr	r3, [pc, #204]	; (1858 <usartCommandHandler+0x418>)
    178a:	21b4      	movs	r1, #180	; 0xb4
    178c:	0049      	lsls	r1, r1, #1
    178e:	19c9      	adds	r1, r1, r7
    1790:	18cb      	adds	r3, r1, r3
    1792:	781a      	ldrb	r2, [r3, #0]
    1794:	20a0      	movs	r0, #160	; 0xa0
    1796:	0040      	lsls	r0, r0, #1
    1798:	183b      	adds	r3, r7, r0
    179a:	3a30      	subs	r2, #48	; 0x30
    179c:	1e51      	subs	r1, r2, #1
    179e:	418a      	sbcs	r2, r1
    17a0:	701a      	strb	r2, [r3, #0]
				  enableTempOverride = result;
    17a2:	4b39      	ldr	r3, [pc, #228]	; (1888 <usartCommandHandler+0x448>)
    17a4:	21a0      	movs	r1, #160	; 0xa0
    17a6:	0049      	lsls	r1, r1, #1
    17a8:	187a      	adds	r2, r7, r1
    17aa:	7812      	ldrb	r2, [r2, #0]
    17ac:	701a      	strb	r2, [r3, #0]
				  enableSensorEDFI = false;
    17ae:	4b37      	ldr	r3, [pc, #220]	; (188c <usartCommandHandler+0x44c>)
    17b0:	2200      	movs	r2, #0
    17b2:	701a      	strb	r2, [r3, #0]
				  if (result)
    17b4:	22a0      	movs	r2, #160	; 0xa0
    17b6:	0052      	lsls	r2, r2, #1
    17b8:	18bb      	adds	r3, r7, r2
    17ba:	781b      	ldrb	r3, [r3, #0]
    17bc:	2b00      	cmp	r3, #0
    17be:	d004      	beq.n	17ca <usartCommandHandler+0x38a>
				  {
					  dbg("\n[sensor override enabled]\n");
    17c0:	4b33      	ldr	r3, [pc, #204]	; (1890 <usartCommandHandler+0x450>)
    17c2:	1c18      	adds	r0, r3, #0
    17c4:	4b2d      	ldr	r3, [pc, #180]	; (187c <usartCommandHandler+0x43c>)
    17c6:	4798      	blx	r3
				  }
				  else
				  {
					  dbg("\n[sensor override disabled]\n");
				  }
				  break;			  
    17c8:	e320      	b.n	1e0c <usartCommandHandler+0x9cc>
				  {
					  dbg("\n[sensor override enabled]\n");
				  }
				  else
				  {
					  dbg("\n[sensor override disabled]\n");
    17ca:	4b32      	ldr	r3, [pc, #200]	; (1894 <usartCommandHandler+0x454>)
    17cc:	1c18      	adds	r0, r3, #0
    17ce:	4b2b      	ldr	r3, [pc, #172]	; (187c <usartCommandHandler+0x43c>)
    17d0:	4798      	blx	r3
				  }
				  break;			  
    17d2:	e31b      	b.n	1e0c <usartCommandHandler+0x9cc>
			  case '2':
			  {
				int nParamValue = (int)strtol((const char*)bParam, NULL, 10);
    17d4:	1c3b      	adds	r3, r7, #0
    17d6:	330c      	adds	r3, #12
    17d8:	1c18      	adds	r0, r3, #0
    17da:	2100      	movs	r1, #0
    17dc:	220a      	movs	r2, #10
    17de:	4b20      	ldr	r3, [pc, #128]	; (1860 <usartCommandHandler+0x420>)
    17e0:	4798      	blx	r3
    17e2:	1c03      	adds	r3, r0, #0
    17e4:	209c      	movs	r0, #156	; 0x9c
    17e6:	0040      	lsls	r0, r0, #1
    17e8:	19c0      	adds	r0, r0, r7
    17ea:	6003      	str	r3, [r0, #0]
				int nFractionValue = (int)strtol((const char*)bFraction, NULL, 10);
    17ec:	1d3b      	adds	r3, r7, #4
    17ee:	1c18      	adds	r0, r3, #0
    17f0:	2100      	movs	r1, #0
    17f2:	220a      	movs	r2, #10
    17f4:	4b1a      	ldr	r3, [pc, #104]	; (1860 <usartCommandHandler+0x420>)
    17f6:	4798      	blx	r3
    17f8:	1c03      	adds	r3, r0, #0
    17fa:	21ac      	movs	r1, #172	; 0xac
    17fc:	0049      	lsls	r1, r1, #1
    17fe:	19c9      	adds	r1, r1, r7
    1800:	600b      	str	r3, [r1, #0]
				int ngetValue = 0;
    1802:	2300      	movs	r3, #0
    1804:	229a      	movs	r2, #154	; 0x9a
    1806:	0052      	lsls	r2, r2, #1
    1808:	19d2      	adds	r2, r2, r7
    180a:	6013      	str	r3, [r2, #0]
				int nZone = 0;
    180c:	2300      	movs	r3, #0
    180e:	20aa      	movs	r0, #170	; 0xaa
    1810:	0040      	lsls	r0, r0, #1
    1812:	19c0      	adds	r0, r0, r7
    1814:	6003      	str	r3, [r0, #0]
				
				switch (nParamValue)
    1816:	219c      	movs	r1, #156	; 0x9c
    1818:	0049      	lsls	r1, r1, #1
    181a:	19c9      	adds	r1, r1, r7
    181c:	680b      	ldr	r3, [r1, #0]
    181e:	2b09      	cmp	r3, #9
    1820:	d900      	bls.n	1824 <usartCommandHandler+0x3e4>
    1822:	e2f2      	b.n	1e0a <usartCommandHandler+0x9ca>
    1824:	229c      	movs	r2, #156	; 0x9c
    1826:	0052      	lsls	r2, r2, #1
    1828:	19d2      	adds	r2, r2, r7
    182a:	6813      	ldr	r3, [r2, #0]
    182c:	009a      	lsls	r2, r3, #2
    182e:	4b1a      	ldr	r3, [pc, #104]	; (1898 <usartCommandHandler+0x458>)
    1830:	18d3      	adds	r3, r2, r3
    1832:	681b      	ldr	r3, [r3, #0]
    1834:	469f      	mov	pc, r3
    1836:	46c0      	nop			; (mov r8, r8)
    1838:	20001080 	.word	0x20001080
    183c:	20001081 	.word	0x20001081
    1840:	00022b64 	.word	0x00022b64
    1844:	0001bb2d 	.word	0x0001bb2d
    1848:	0001bb1d 	.word	0x0001bb1d
    184c:	0001b375 	.word	0x0001b375
    1850:	fffffebc 	.word	0xfffffebc
    1854:	fffffeb4 	.word	0xfffffeb4
    1858:	fffffea4 	.word	0xfffffea4
    185c:	fffffe9c 	.word	0xfffffe9c
    1860:	0001bd69 	.word	0x0001bd69
    1864:	00023278 	.word	0x00023278
    1868:	000232a0 	.word	0x000232a0
    186c:	20000372 	.word	0x20000372
    1870:	200009b8 	.word	0x200009b8
    1874:	20000960 	.word	0x20000960
    1878:	00022b6c 	.word	0x00022b6c
    187c:	0001b899 	.word	0x0001b899
    1880:	00022b88 	.word	0x00022b88
    1884:	0001b62d 	.word	0x0001b62d
    1888:	20000373 	.word	0x20000373
    188c:	20000378 	.word	0x20000378
    1890:	00022ba4 	.word	0x00022ba4
    1894:	00022bc0 	.word	0x00022bc0
    1898:	000232c8 	.word	0x000232c8
				{
//------------------------------------------------------------------
// 0.2.0.x	print pin state
//------------------------------------------------------------------					
					case 0:
						ngetValue = port_pin_get_output_level(D20Pins[nFractionValue]);
    189c:	4bc5      	ldr	r3, [pc, #788]	; (1bb4 <usartCommandHandler+0x774>)
    189e:	20ac      	movs	r0, #172	; 0xac
    18a0:	0040      	lsls	r0, r0, #1
    18a2:	19c0      	adds	r0, r0, r7
    18a4:	6802      	ldr	r2, [r0, #0]
    18a6:	0092      	lsls	r2, r2, #2
    18a8:	58d3      	ldr	r3, [r2, r3]
    18aa:	b2db      	uxtb	r3, r3
    18ac:	1c18      	adds	r0, r3, #0
    18ae:	4bc2      	ldr	r3, [pc, #776]	; (1bb8 <usartCommandHandler+0x778>)
    18b0:	4798      	blx	r3
    18b2:	1c03      	adds	r3, r0, #0
    18b4:	219a      	movs	r1, #154	; 0x9a
    18b6:	0049      	lsls	r1, r1, #1
    18b8:	19c9      	adds	r1, r1, r7
    18ba:	600b      	str	r3, [r1, #0]
						dbg_info("\n[pin value is %d]\n", ngetValue);
    18bc:	4abf      	ldr	r2, [pc, #764]	; (1bbc <usartCommandHandler+0x77c>)
    18be:	209a      	movs	r0, #154	; 0x9a
    18c0:	0040      	lsls	r0, r0, #1
    18c2:	19c0      	adds	r0, r0, r7
    18c4:	6803      	ldr	r3, [r0, #0]
    18c6:	1c10      	adds	r0, r2, #0
    18c8:	1c19      	adds	r1, r3, #0
    18ca:	4bbd      	ldr	r3, [pc, #756]	; (1bc0 <usartCommandHandler+0x780>)
    18cc:	4798      	blx	r3
					break;
    18ce:	e10b      	b.n	1ae8 <usartCommandHandler+0x6a8>
//------------------------------------------------------------------
// 0.2.1.x	print chamber parameter
//------------------------------------------------------------------					
					case 1:
						if (nFractionValue < ((int)(sizeof(D20Chamber) / sizeof(int)) * 2 ) )
    18d0:	21ac      	movs	r1, #172	; 0xac
    18d2:	0049      	lsls	r1, r1, #1
    18d4:	19c9      	adds	r1, r1, r7
    18d6:	680b      	ldr	r3, [r1, #0]
    18d8:	2b17      	cmp	r3, #23
    18da:	dc36      	bgt.n	194a <usartCommandHandler+0x50a>
						{
							if (nFractionValue > 11)
    18dc:	22ac      	movs	r2, #172	; 0xac
    18de:	0052      	lsls	r2, r2, #1
    18e0:	19d2      	adds	r2, r2, r7
    18e2:	6813      	ldr	r3, [r2, #0]
    18e4:	2b0b      	cmp	r3, #11
    18e6:	dd0d      	ble.n	1904 <usartCommandHandler+0x4c4>
							{
								nZone = 1;
    18e8:	2301      	movs	r3, #1
    18ea:	20aa      	movs	r0, #170	; 0xaa
    18ec:	0040      	lsls	r0, r0, #1
    18ee:	19c0      	adds	r0, r0, r7
    18f0:	6003      	str	r3, [r0, #0]
								nFractionValue -= 12;
    18f2:	21ac      	movs	r1, #172	; 0xac
    18f4:	0049      	lsls	r1, r1, #1
    18f6:	19c9      	adds	r1, r1, r7
    18f8:	680b      	ldr	r3, [r1, #0]
    18fa:	3b0c      	subs	r3, #12
    18fc:	22ac      	movs	r2, #172	; 0xac
    18fe:	0052      	lsls	r2, r2, #1
    1900:	19d2      	adds	r2, r2, r7
    1902:	6013      	str	r3, [r2, #0]
							}
							
							dblGetValue = fChamber[nFractionValue](0.0f, false, nZone);
    1904:	4baf      	ldr	r3, [pc, #700]	; (1bc4 <usartCommandHandler+0x784>)
    1906:	20ac      	movs	r0, #172	; 0xac
    1908:	0040      	lsls	r0, r0, #1
    190a:	19c0      	adds	r0, r0, r7
    190c:	6802      	ldr	r2, [r0, #0]
    190e:	0092      	lsls	r2, r2, #2
    1910:	58d3      	ldr	r3, [r2, r3]
    1912:	2100      	movs	r1, #0
    1914:	20aa      	movs	r0, #170	; 0xaa
    1916:	0040      	lsls	r0, r0, #1
    1918:	19c0      	adds	r0, r0, r7
    191a:	6802      	ldr	r2, [r0, #0]
    191c:	1c08      	adds	r0, r1, #0
    191e:	2100      	movs	r1, #0
    1920:	4798      	blx	r3
    1922:	1c03      	adds	r3, r0, #0
    1924:	219e      	movs	r1, #158	; 0x9e
    1926:	0049      	lsls	r1, r1, #1
    1928:	19c9      	adds	r1, r1, r7
    192a:	600b      	str	r3, [r1, #0]
							dbg_info("\n[chamber value is %f]\n", dblGetValue);
    192c:	4ba6      	ldr	r3, [pc, #664]	; (1bc8 <usartCommandHandler+0x788>)
    192e:	229e      	movs	r2, #158	; 0x9e
    1930:	0052      	lsls	r2, r2, #1
    1932:	19d2      	adds	r2, r2, r7
    1934:	6810      	ldr	r0, [r2, #0]
    1936:	4798      	blx	r3
    1938:	1c03      	adds	r3, r0, #0
    193a:	1c0c      	adds	r4, r1, #0
    193c:	4aa3      	ldr	r2, [pc, #652]	; (1bcc <usartCommandHandler+0x78c>)
    193e:	1c10      	adds	r0, r2, #0
    1940:	1c1a      	adds	r2, r3, #0
    1942:	1c23      	adds	r3, r4, #0
    1944:	499e      	ldr	r1, [pc, #632]	; (1bc0 <usartCommandHandler+0x780>)
    1946:	4788      	blx	r1
						}
					break;
    1948:	e0ce      	b.n	1ae8 <usartCommandHandler+0x6a8>
    194a:	e0cd      	b.n	1ae8 <usartCommandHandler+0x6a8>
//------------------------------------------------------------------
// 0.2.2.x	print power supply parameter
//------------------------------------------------------------------					
					case 2:
						if (nFractionValue < ((int)(sizeof(D20POWERSUPPLY) / sizeof(int)) * 2 ) )
    194c:	20ac      	movs	r0, #172	; 0xac
    194e:	0040      	lsls	r0, r0, #1
    1950:	19c0      	adds	r0, r0, r7
    1952:	6803      	ldr	r3, [r0, #0]
    1954:	2b19      	cmp	r3, #25
    1956:	dc36      	bgt.n	19c6 <usartCommandHandler+0x586>
						{
							if (nFractionValue > 12)
    1958:	21ac      	movs	r1, #172	; 0xac
    195a:	0049      	lsls	r1, r1, #1
    195c:	19c9      	adds	r1, r1, r7
    195e:	680b      	ldr	r3, [r1, #0]
    1960:	2b0c      	cmp	r3, #12
    1962:	dd0d      	ble.n	1980 <usartCommandHandler+0x540>
							{
								nZone = 1;
    1964:	2301      	movs	r3, #1
    1966:	22aa      	movs	r2, #170	; 0xaa
    1968:	0052      	lsls	r2, r2, #1
    196a:	19d2      	adds	r2, r2, r7
    196c:	6013      	str	r3, [r2, #0]
								nFractionValue -= 13;
    196e:	20ac      	movs	r0, #172	; 0xac
    1970:	0040      	lsls	r0, r0, #1
    1972:	19c0      	adds	r0, r0, r7
    1974:	6803      	ldr	r3, [r0, #0]
    1976:	3b0d      	subs	r3, #13
    1978:	21ac      	movs	r1, #172	; 0xac
    197a:	0049      	lsls	r1, r1, #1
    197c:	19c9      	adds	r1, r1, r7
    197e:	600b      	str	r3, [r1, #0]
							}
							
						dblGetValue = fPower[nFractionValue](0.0f, false, nZone);
    1980:	4b93      	ldr	r3, [pc, #588]	; (1bd0 <usartCommandHandler+0x790>)
    1982:	20ac      	movs	r0, #172	; 0xac
    1984:	0040      	lsls	r0, r0, #1
    1986:	19c0      	adds	r0, r0, r7
    1988:	6802      	ldr	r2, [r0, #0]
    198a:	0092      	lsls	r2, r2, #2
    198c:	58d3      	ldr	r3, [r2, r3]
    198e:	2100      	movs	r1, #0
    1990:	20aa      	movs	r0, #170	; 0xaa
    1992:	0040      	lsls	r0, r0, #1
    1994:	19c0      	adds	r0, r0, r7
    1996:	6802      	ldr	r2, [r0, #0]
    1998:	1c08      	adds	r0, r1, #0
    199a:	2100      	movs	r1, #0
    199c:	4798      	blx	r3
    199e:	1c03      	adds	r3, r0, #0
    19a0:	219e      	movs	r1, #158	; 0x9e
    19a2:	0049      	lsls	r1, r1, #1
    19a4:	19c9      	adds	r1, r1, r7
    19a6:	600b      	str	r3, [r1, #0]
						dbg_info("\n[ps value is %f]\n", dblGetValue);
    19a8:	4b87      	ldr	r3, [pc, #540]	; (1bc8 <usartCommandHandler+0x788>)
    19aa:	229e      	movs	r2, #158	; 0x9e
    19ac:	0052      	lsls	r2, r2, #1
    19ae:	19d2      	adds	r2, r2, r7
    19b0:	6810      	ldr	r0, [r2, #0]
    19b2:	4798      	blx	r3
    19b4:	1c03      	adds	r3, r0, #0
    19b6:	1c0c      	adds	r4, r1, #0
    19b8:	4a86      	ldr	r2, [pc, #536]	; (1bd4 <usartCommandHandler+0x794>)
    19ba:	1c10      	adds	r0, r2, #0
    19bc:	1c1a      	adds	r2, r3, #0
    19be:	1c23      	adds	r3, r4, #0
    19c0:	497f      	ldr	r1, [pc, #508]	; (1bc0 <usartCommandHandler+0x780>)
    19c2:	4788      	blx	r1
					}
					break;
    19c4:	e090      	b.n	1ae8 <usartCommandHandler+0x6a8>
    19c6:	e08f      	b.n	1ae8 <usartCommandHandler+0x6a8>
//------------------------------------------------------------------
// 0.2.3.x	print pid parameter
//------------------------------------------------------------------					
					case 3:
						if (nFractionValue < ((int)(sizeof(D20PID) / sizeof(int))) )
    19c8:	20ac      	movs	r0, #172	; 0xac
    19ca:	0040      	lsls	r0, r0, #1
    19cc:	19c0      	adds	r0, r0, r7
    19ce:	6803      	ldr	r3, [r0, #0]
    19d0:	2b08      	cmp	r3, #8
    19d2:	dc22      	bgt.n	1a1a <usartCommandHandler+0x5da>
							{
								nZone = 1;
								nFractionValue -= 9;
							}
							*/
							dblGetValue = fPid[nFractionValue](0.0f, false, nZone);
    19d4:	4b80      	ldr	r3, [pc, #512]	; (1bd8 <usartCommandHandler+0x798>)
    19d6:	21ac      	movs	r1, #172	; 0xac
    19d8:	0049      	lsls	r1, r1, #1
    19da:	19c9      	adds	r1, r1, r7
    19dc:	680a      	ldr	r2, [r1, #0]
    19de:	0092      	lsls	r2, r2, #2
    19e0:	58d3      	ldr	r3, [r2, r3]
    19e2:	2100      	movs	r1, #0
    19e4:	20aa      	movs	r0, #170	; 0xaa
    19e6:	0040      	lsls	r0, r0, #1
    19e8:	19c0      	adds	r0, r0, r7
    19ea:	6802      	ldr	r2, [r0, #0]
    19ec:	1c08      	adds	r0, r1, #0
    19ee:	2100      	movs	r1, #0
    19f0:	4798      	blx	r3
    19f2:	1c03      	adds	r3, r0, #0
    19f4:	219e      	movs	r1, #158	; 0x9e
    19f6:	0049      	lsls	r1, r1, #1
    19f8:	19c9      	adds	r1, r1, r7
    19fa:	600b      	str	r3, [r1, #0]
							dbg_info("\n[PID value is %f]\n", dblGetValue);
    19fc:	4b72      	ldr	r3, [pc, #456]	; (1bc8 <usartCommandHandler+0x788>)
    19fe:	229e      	movs	r2, #158	; 0x9e
    1a00:	0052      	lsls	r2, r2, #1
    1a02:	19d2      	adds	r2, r2, r7
    1a04:	6810      	ldr	r0, [r2, #0]
    1a06:	4798      	blx	r3
    1a08:	1c03      	adds	r3, r0, #0
    1a0a:	1c0c      	adds	r4, r1, #0
    1a0c:	4a73      	ldr	r2, [pc, #460]	; (1bdc <usartCommandHandler+0x79c>)
    1a0e:	1c10      	adds	r0, r2, #0
    1a10:	1c1a      	adds	r2, r3, #0
    1a12:	1c23      	adds	r3, r4, #0
    1a14:	496a      	ldr	r1, [pc, #424]	; (1bc0 <usartCommandHandler+0x780>)
    1a16:	4788      	blx	r1
						}
						break;
    1a18:	e066      	b.n	1ae8 <usartCommandHandler+0x6a8>
    1a1a:	e065      	b.n	1ae8 <usartCommandHandler+0x6a8>
//------------------------------------------------------------------
// 0.2.4.x	print fan parameter
//------------------------------------------------------------------						
					case 4:
						if (nFractionValue < (int)(sizeof(D20FAN) / sizeof(int)))
    1a1c:	20ac      	movs	r0, #172	; 0xac
    1a1e:	0040      	lsls	r0, r0, #1
    1a20:	19c0      	adds	r0, r0, r7
    1a22:	6803      	ldr	r3, [r0, #0]
    1a24:	2b0f      	cmp	r3, #15
    1a26:	dc2d      	bgt.n	1a84 <usartCommandHandler+0x644>
						{
							if (nFractionValue > 6)
    1a28:	21ac      	movs	r1, #172	; 0xac
    1a2a:	0049      	lsls	r1, r1, #1
    1a2c:	19c9      	adds	r1, r1, r7
    1a2e:	680b      	ldr	r3, [r1, #0]
    1a30:	2b06      	cmp	r3, #6
    1a32:	dd04      	ble.n	1a3e <usartCommandHandler+0x5fe>
							{
								nZone = 1;
    1a34:	2301      	movs	r3, #1
    1a36:	22aa      	movs	r2, #170	; 0xaa
    1a38:	0052      	lsls	r2, r2, #1
    1a3a:	19d2      	adds	r2, r2, r7
    1a3c:	6013      	str	r3, [r2, #0]
							}
							dblGetValue = fFan[nFractionValue](0.0f, false, nZone);
    1a3e:	4b68      	ldr	r3, [pc, #416]	; (1be0 <usartCommandHandler+0x7a0>)
    1a40:	20ac      	movs	r0, #172	; 0xac
    1a42:	0040      	lsls	r0, r0, #1
    1a44:	19c0      	adds	r0, r0, r7
    1a46:	6802      	ldr	r2, [r0, #0]
    1a48:	0092      	lsls	r2, r2, #2
    1a4a:	58d3      	ldr	r3, [r2, r3]
    1a4c:	2100      	movs	r1, #0
    1a4e:	20aa      	movs	r0, #170	; 0xaa
    1a50:	0040      	lsls	r0, r0, #1
    1a52:	19c0      	adds	r0, r0, r7
    1a54:	6802      	ldr	r2, [r0, #0]
    1a56:	1c08      	adds	r0, r1, #0
    1a58:	2100      	movs	r1, #0
    1a5a:	4798      	blx	r3
    1a5c:	1c03      	adds	r3, r0, #0
    1a5e:	219e      	movs	r1, #158	; 0x9e
    1a60:	0049      	lsls	r1, r1, #1
    1a62:	19c9      	adds	r1, r1, r7
    1a64:	600b      	str	r3, [r1, #0]
							dbg_info("\n[Fan value is %f]\n", dblGetValue);
    1a66:	4b58      	ldr	r3, [pc, #352]	; (1bc8 <usartCommandHandler+0x788>)
    1a68:	229e      	movs	r2, #158	; 0x9e
    1a6a:	0052      	lsls	r2, r2, #1
    1a6c:	19d2      	adds	r2, r2, r7
    1a6e:	6810      	ldr	r0, [r2, #0]
    1a70:	4798      	blx	r3
    1a72:	1c03      	adds	r3, r0, #0
    1a74:	1c0c      	adds	r4, r1, #0
    1a76:	4a5b      	ldr	r2, [pc, #364]	; (1be4 <usartCommandHandler+0x7a4>)
    1a78:	1c10      	adds	r0, r2, #0
    1a7a:	1c1a      	adds	r2, r3, #0
    1a7c:	1c23      	adds	r3, r4, #0
    1a7e:	4950      	ldr	r1, [pc, #320]	; (1bc0 <usartCommandHandler+0x780>)
    1a80:	4788      	blx	r1
						}
						break;
    1a82:	e031      	b.n	1ae8 <usartCommandHandler+0x6a8>
    1a84:	e030      	b.n	1ae8 <usartCommandHandler+0x6a8>
//------------------------------------------------------------------
// 0.2.5.x	print control parameter	
//------------------------------------------------------------------
					case 5:
						if (nFractionValue < ((int)(sizeof(D20CONTROL) / sizeof(int))) )
    1a86:	20ac      	movs	r0, #172	; 0xac
    1a88:	0040      	lsls	r0, r0, #1
    1a8a:	19c0      	adds	r0, r0, r7
    1a8c:	6803      	ldr	r3, [r0, #0]
    1a8e:	2b0c      	cmp	r3, #12
    1a90:	dc22      	bgt.n	1ad8 <usartCommandHandler+0x698>
							{
								nZone = 1;
								nFractionValue -= 3;
							}
							*/
						dblGetValue = fControl[nFractionValue](0.0f, false, nZone);
    1a92:	4b55      	ldr	r3, [pc, #340]	; (1be8 <usartCommandHandler+0x7a8>)
    1a94:	21ac      	movs	r1, #172	; 0xac
    1a96:	0049      	lsls	r1, r1, #1
    1a98:	19c9      	adds	r1, r1, r7
    1a9a:	680a      	ldr	r2, [r1, #0]
    1a9c:	0092      	lsls	r2, r2, #2
    1a9e:	58d3      	ldr	r3, [r2, r3]
    1aa0:	2100      	movs	r1, #0
    1aa2:	20aa      	movs	r0, #170	; 0xaa
    1aa4:	0040      	lsls	r0, r0, #1
    1aa6:	19c0      	adds	r0, r0, r7
    1aa8:	6802      	ldr	r2, [r0, #0]
    1aaa:	1c08      	adds	r0, r1, #0
    1aac:	2100      	movs	r1, #0
    1aae:	4798      	blx	r3
    1ab0:	1c03      	adds	r3, r0, #0
    1ab2:	219e      	movs	r1, #158	; 0x9e
    1ab4:	0049      	lsls	r1, r1, #1
    1ab6:	19c9      	adds	r1, r1, r7
    1ab8:	600b      	str	r3, [r1, #0]
						dbg_info("\n[value is %f]\n", dblGetValue);
    1aba:	4b43      	ldr	r3, [pc, #268]	; (1bc8 <usartCommandHandler+0x788>)
    1abc:	229e      	movs	r2, #158	; 0x9e
    1abe:	0052      	lsls	r2, r2, #1
    1ac0:	19d2      	adds	r2, r2, r7
    1ac2:	6810      	ldr	r0, [r2, #0]
    1ac4:	4798      	blx	r3
    1ac6:	1c03      	adds	r3, r0, #0
    1ac8:	1c0c      	adds	r4, r1, #0
    1aca:	4a48      	ldr	r2, [pc, #288]	; (1bec <usartCommandHandler+0x7ac>)
    1acc:	1c10      	adds	r0, r2, #0
    1ace:	1c1a      	adds	r2, r3, #0
    1ad0:	1c23      	adds	r3, r4, #0
    1ad2:	493b      	ldr	r1, [pc, #236]	; (1bc0 <usartCommandHandler+0x780>)
    1ad4:	4788      	blx	r1
						}
						break;
    1ad6:	e007      	b.n	1ae8 <usartCommandHandler+0x6a8>
    1ad8:	e006      	b.n	1ae8 <usartCommandHandler+0x6a8>

//------------------------------------------------------------------
// 0.2.9	print boot msg
//------------------------------------------------------------------
					case 9:
						dbg("\n\n");
    1ada:	4b45      	ldr	r3, [pc, #276]	; (1bf0 <usartCommandHandler+0x7b0>)
    1adc:	1c18      	adds	r0, r3, #0
    1ade:	4b45      	ldr	r3, [pc, #276]	; (1bf4 <usartCommandHandler+0x7b4>)
    1ae0:	4798      	blx	r3
						printBootMsg();
    1ae2:	4b45      	ldr	r3, [pc, #276]	; (1bf8 <usartCommandHandler+0x7b8>)
    1ae4:	4798      	blx	r3
					break;		
    1ae6:	46c0      	nop			; (mov r8, r8)
				}
			    break;
    1ae8:	e18f      	b.n	1e0a <usartCommandHandler+0x9ca>
			  }
//------------------------------------------------------------------
// 0.3.x	enablePsDbgMsgs
//------------------------------------------------------------------			  
			  case '3':
				result = ((bParam[0] - '0') != 0);
    1aea:	4b44      	ldr	r3, [pc, #272]	; (1bfc <usartCommandHandler+0x7bc>)
    1aec:	20b4      	movs	r0, #180	; 0xb4
    1aee:	0040      	lsls	r0, r0, #1
    1af0:	19c0      	adds	r0, r0, r7
    1af2:	18c3      	adds	r3, r0, r3
    1af4:	781a      	ldrb	r2, [r3, #0]
    1af6:	21a0      	movs	r1, #160	; 0xa0
    1af8:	0049      	lsls	r1, r1, #1
    1afa:	187b      	adds	r3, r7, r1
    1afc:	3a30      	subs	r2, #48	; 0x30
    1afe:	1e51      	subs	r1, r2, #1
    1b00:	418a      	sbcs	r2, r1
    1b02:	701a      	strb	r2, [r3, #0]
				//enableManualOverride = result;
				if (result)
    1b04:	22a0      	movs	r2, #160	; 0xa0
    1b06:	0052      	lsls	r2, r2, #1
    1b08:	18bb      	adds	r3, r7, r2
    1b0a:	781b      	ldrb	r3, [r3, #0]
    1b0c:	2b00      	cmp	r3, #0
    1b0e:	d007      	beq.n	1b20 <usartCommandHandler+0x6e0>
				{
					enablePsDbgMsgs = true;
    1b10:	4b3b      	ldr	r3, [pc, #236]	; (1c00 <usartCommandHandler+0x7c0>)
    1b12:	2201      	movs	r2, #1
    1b14:	701a      	strb	r2, [r3, #0]
					dbg("\n[debug msgs enabled]\n");
    1b16:	4b3b      	ldr	r3, [pc, #236]	; (1c04 <usartCommandHandler+0x7c4>)
    1b18:	1c18      	adds	r0, r3, #0
    1b1a:	4b36      	ldr	r3, [pc, #216]	; (1bf4 <usartCommandHandler+0x7b4>)
    1b1c:	4798      	blx	r3
				else
				{
					enablePsDbgMsgs = false;
					dbg("\n[debug msgs disabled]\n");
				}
			  break;
    1b1e:	e175      	b.n	1e0c <usartCommandHandler+0x9cc>
					enablePsDbgMsgs = true;
					dbg("\n[debug msgs enabled]\n");
				}
				else
				{
					enablePsDbgMsgs = false;
    1b20:	4b37      	ldr	r3, [pc, #220]	; (1c00 <usartCommandHandler+0x7c0>)
    1b22:	2200      	movs	r2, #0
    1b24:	701a      	strb	r2, [r3, #0]
					dbg("\n[debug msgs disabled]\n");
    1b26:	4b38      	ldr	r3, [pc, #224]	; (1c08 <usartCommandHandler+0x7c8>)
    1b28:	1c18      	adds	r0, r3, #0
    1b2a:	4b32      	ldr	r3, [pc, #200]	; (1bf4 <usartCommandHandler+0x7b4>)
    1b2c:	4798      	blx	r3
				}
			  break;
    1b2e:	e16d      	b.n	1e0c <usartCommandHandler+0x9cc>
//------------------------------------------------------------------
// 0.4.x	selfTest
//------------------------------------------------------------------			  
			  case '4':
			    result = ((bParam[0] - '0') != 0);
    1b30:	4b32      	ldr	r3, [pc, #200]	; (1bfc <usartCommandHandler+0x7bc>)
    1b32:	20b4      	movs	r0, #180	; 0xb4
    1b34:	0040      	lsls	r0, r0, #1
    1b36:	19c0      	adds	r0, r0, r7
    1b38:	18c3      	adds	r3, r0, r3
    1b3a:	781a      	ldrb	r2, [r3, #0]
    1b3c:	21a0      	movs	r1, #160	; 0xa0
    1b3e:	0049      	lsls	r1, r1, #1
    1b40:	187b      	adds	r3, r7, r1
    1b42:	3a30      	subs	r2, #48	; 0x30
    1b44:	1e51      	subs	r1, r2, #1
    1b46:	418a      	sbcs	r2, r1
    1b48:	701a      	strb	r2, [r3, #0]
				selfTest();
    1b4a:	4b30      	ldr	r3, [pc, #192]	; (1c0c <usartCommandHandler+0x7cc>)
    1b4c:	4798      	blx	r3
			  break;
    1b4e:	e15d      	b.n	1e0c <usartCommandHandler+0x9cc>
//------------------------------------------------------------------
// 0.5.x	deactivateAutoControl
//------------------------------------------------------------------			  
			  case '5':
			     //dbg("\PID loop control\n");
			     result = ((bParam[0] - '0') != 0);
    1b50:	4b2a      	ldr	r3, [pc, #168]	; (1bfc <usartCommandHandler+0x7bc>)
    1b52:	22b4      	movs	r2, #180	; 0xb4
    1b54:	0052      	lsls	r2, r2, #1
    1b56:	19d2      	adds	r2, r2, r7
    1b58:	18d3      	adds	r3, r2, r3
    1b5a:	781a      	ldrb	r2, [r3, #0]
    1b5c:	20a0      	movs	r0, #160	; 0xa0
    1b5e:	0040      	lsls	r0, r0, #1
    1b60:	183b      	adds	r3, r7, r0
    1b62:	3a30      	subs	r2, #48	; 0x30
    1b64:	1e51      	subs	r1, r2, #1
    1b66:	418a      	sbcs	r2, r1
    1b68:	701a      	strb	r2, [r3, #0]
			     enableManualOverride = result;
    1b6a:	4b29      	ldr	r3, [pc, #164]	; (1c10 <usartCommandHandler+0x7d0>)
    1b6c:	21a0      	movs	r1, #160	; 0xa0
    1b6e:	0049      	lsls	r1, r1, #1
    1b70:	187a      	adds	r2, r7, r1
    1b72:	7812      	ldrb	r2, [r2, #0]
    1b74:	701a      	strb	r2, [r3, #0]
			     
			     if (enableManualOverride)
    1b76:	4b26      	ldr	r3, [pc, #152]	; (1c10 <usartCommandHandler+0x7d0>)
    1b78:	781b      	ldrb	r3, [r3, #0]
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	d00c      	beq.n	1b98 <usartCommandHandler+0x758>
			     {
				     //pidLoop1.inAuto = false;
				     //pidLoop2.inAuto = false;
					 chamber1.deactivateAutoControl = true;
    1b7e:	4a25      	ldr	r2, [pc, #148]	; (1c14 <usartCommandHandler+0x7d4>)
    1b80:	233d      	movs	r3, #61	; 0x3d
    1b82:	2101      	movs	r1, #1
    1b84:	54d1      	strb	r1, [r2, r3]
				     chamber2.deactivateAutoControl = true;
    1b86:	4a24      	ldr	r2, [pc, #144]	; (1c18 <usartCommandHandler+0x7d8>)
    1b88:	233d      	movs	r3, #61	; 0x3d
    1b8a:	2101      	movs	r1, #1
    1b8c:	54d1      	strb	r1, [r2, r3]
				     dbg("\n[PID override enabled]\n");
    1b8e:	4b23      	ldr	r3, [pc, #140]	; (1c1c <usartCommandHandler+0x7dc>)
    1b90:	1c18      	adds	r0, r3, #0
    1b92:	4b18      	ldr	r3, [pc, #96]	; (1bf4 <usartCommandHandler+0x7b4>)
    1b94:	4798      	blx	r3
				     //pidLoop2.inAuto = true;
					 chamber1.deactivateAutoControl = false;
					 chamber2.deactivateAutoControl = false;
				     dbg("\n[PID override disabled]\n");
			     }
			  break;
    1b96:	e139      	b.n	1e0c <usartCommandHandler+0x9cc>
			     }
			     else
			     {
				     //pidLoop1.inAuto = true;
				     //pidLoop2.inAuto = true;
					 chamber1.deactivateAutoControl = false;
    1b98:	4a1e      	ldr	r2, [pc, #120]	; (1c14 <usartCommandHandler+0x7d4>)
    1b9a:	233d      	movs	r3, #61	; 0x3d
    1b9c:	2100      	movs	r1, #0
    1b9e:	54d1      	strb	r1, [r2, r3]
					 chamber2.deactivateAutoControl = false;
    1ba0:	4a1d      	ldr	r2, [pc, #116]	; (1c18 <usartCommandHandler+0x7d8>)
    1ba2:	233d      	movs	r3, #61	; 0x3d
    1ba4:	2100      	movs	r1, #0
    1ba6:	54d1      	strb	r1, [r2, r3]
				     dbg("\n[PID override disabled]\n");
    1ba8:	4b1d      	ldr	r3, [pc, #116]	; (1c20 <usartCommandHandler+0x7e0>)
    1baa:	1c18      	adds	r0, r3, #0
    1bac:	4b11      	ldr	r3, [pc, #68]	; (1bf4 <usartCommandHandler+0x7b4>)
    1bae:	4798      	blx	r3
			     }
			  break;
    1bb0:	e12c      	b.n	1e0c <usartCommandHandler+0x9cc>
    1bb2:	46c0      	nop			; (mov r8, r8)
    1bb4:	00023268 	.word	0x00023268
    1bb8:	00000275 	.word	0x00000275
    1bbc:	00022bdc 	.word	0x00022bdc
    1bc0:	0001b62d 	.word	0x0001b62d
    1bc4:	200006d8 	.word	0x200006d8
    1bc8:	00022111 	.word	0x00022111
    1bcc:	00022bf0 	.word	0x00022bf0
    1bd0:	200005b4 	.word	0x200005b4
    1bd4:	00022c08 	.word	0x00022c08
    1bd8:	20000634 	.word	0x20000634
    1bdc:	00022c1c 	.word	0x00022c1c
    1be0:	20000758 	.word	0x20000758
    1be4:	00022c30 	.word	0x00022c30
    1be8:	20000534 	.word	0x20000534
    1bec:	00022c44 	.word	0x00022c44
    1bf0:	00022c54 	.word	0x00022c54
    1bf4:	0001b899 	.word	0x0001b899
    1bf8:	00004a6d 	.word	0x00004a6d
    1bfc:	fffffea4 	.word	0xfffffea4
    1c00:	20000371 	.word	0x20000371
    1c04:	00022c58 	.word	0x00022c58
    1c08:	00022c70 	.word	0x00022c70
    1c0c:	0000c021 	.word	0x0000c021
    1c10:	20000372 	.word	0x20000372
    1c14:	200009b8 	.word	0x200009b8
    1c18:	20000960 	.word	0x20000960
    1c1c:	00022c88 	.word	0x00022c88
    1c20:	00022ca0 	.word	0x00022ca0
//------------------------------------------------------------------
// 0.6.x	ps output voltage
//------------------------------------------------------------------			  
			  case '6':
			  {
				 float dblValue = 0.0f;
    1c24:	2300      	movs	r3, #0
    1c26:	2298      	movs	r2, #152	; 0x98
    1c28:	0052      	lsls	r2, r2, #1
    1c2a:	19d2      	adds	r2, r2, r7
    1c2c:	6013      	str	r3, [r2, #0]
				 uint8_t nFracSize = 0;
    1c2e:	2030      	movs	r0, #48	; 0x30
    1c30:	30ff      	adds	r0, #255	; 0xff
    1c32:	183b      	adds	r3, r7, r0
    1c34:	2200      	movs	r2, #0
    1c36:	701a      	strb	r2, [r3, #0]
			  
				 int nParamValue = (int)strtol((const char*)bParam, NULL, 10) * nSign;
    1c38:	1c3b      	adds	r3, r7, #0
    1c3a:	330c      	adds	r3, #12
    1c3c:	1c18      	adds	r0, r3, #0
    1c3e:	2100      	movs	r1, #0
    1c40:	220a      	movs	r2, #10
    1c42:	4bc5      	ldr	r3, [pc, #788]	; (1f58 <usartCommandHandler+0xb18>)
    1c44:	4798      	blx	r3
    1c46:	1c03      	adds	r3, r0, #0
    1c48:	21ae      	movs	r1, #174	; 0xae
    1c4a:	0049      	lsls	r1, r1, #1
    1c4c:	19c9      	adds	r1, r1, r7
    1c4e:	680a      	ldr	r2, [r1, #0]
    1c50:	4353      	muls	r3, r2
    1c52:	2294      	movs	r2, #148	; 0x94
    1c54:	0052      	lsls	r2, r2, #1
    1c56:	19d2      	adds	r2, r2, r7
    1c58:	6013      	str	r3, [r2, #0]
				 int nFractionValue = (int)strtol((const char*)bFraction, NULL, 10) * nSign;
    1c5a:	1d3b      	adds	r3, r7, #4
    1c5c:	1c18      	adds	r0, r3, #0
    1c5e:	2100      	movs	r1, #0
    1c60:	220a      	movs	r2, #10
    1c62:	4bbd      	ldr	r3, [pc, #756]	; (1f58 <usartCommandHandler+0xb18>)
    1c64:	4798      	blx	r3
    1c66:	1c03      	adds	r3, r0, #0
    1c68:	20ae      	movs	r0, #174	; 0xae
    1c6a:	0040      	lsls	r0, r0, #1
    1c6c:	19c0      	adds	r0, r0, r7
    1c6e:	6802      	ldr	r2, [r0, #0]
    1c70:	4353      	muls	r3, r2
    1c72:	2192      	movs	r1, #146	; 0x92
    1c74:	0049      	lsls	r1, r1, #1
    1c76:	19c9      	adds	r1, r1, r7
    1c78:	600b      	str	r3, [r1, #0]
				 
				 nFracSize = strlen(bFraction);
    1c7a:	1d3b      	adds	r3, r7, #4
    1c7c:	1c18      	adds	r0, r3, #0
    1c7e:	4bb7      	ldr	r3, [pc, #732]	; (1f5c <usartCommandHandler+0xb1c>)
    1c80:	4798      	blx	r3
    1c82:	1c02      	adds	r2, r0, #0
    1c84:	2030      	movs	r0, #48	; 0x30
    1c86:	30ff      	adds	r0, #255	; 0xff
    1c88:	183b      	adds	r3, r7, r0
    1c8a:	701a      	strb	r2, [r3, #0]
				 dblValue = (float)nParamValue + (float)((float)nFractionValue/(pow(10,nFracSize)));
    1c8c:	4bb4      	ldr	r3, [pc, #720]	; (1f60 <usartCommandHandler+0xb20>)
    1c8e:	2194      	movs	r1, #148	; 0x94
    1c90:	0049      	lsls	r1, r1, #1
    1c92:	19c9      	adds	r1, r1, r7
    1c94:	6808      	ldr	r0, [r1, #0]
    1c96:	4798      	blx	r3
    1c98:	4680      	mov	r8, r0
    1c9a:	4bb1      	ldr	r3, [pc, #708]	; (1f60 <usartCommandHandler+0xb20>)
    1c9c:	2292      	movs	r2, #146	; 0x92
    1c9e:	0052      	lsls	r2, r2, #1
    1ca0:	19d2      	adds	r2, r2, r7
    1ca2:	6810      	ldr	r0, [r2, #0]
    1ca4:	4798      	blx	r3
    1ca6:	1c02      	adds	r2, r0, #0
    1ca8:	4bae      	ldr	r3, [pc, #696]	; (1f64 <usartCommandHandler+0xb24>)
    1caa:	1c10      	adds	r0, r2, #0
    1cac:	4798      	blx	r3
    1cae:	1c05      	adds	r5, r0, #0
    1cb0:	1c0e      	adds	r6, r1, #0
    1cb2:	2030      	movs	r0, #48	; 0x30
    1cb4:	30ff      	adds	r0, #255	; 0xff
    1cb6:	183b      	adds	r3, r7, r0
    1cb8:	781a      	ldrb	r2, [r3, #0]
    1cba:	4bab      	ldr	r3, [pc, #684]	; (1f68 <usartCommandHandler+0xb28>)
    1cbc:	1c10      	adds	r0, r2, #0
    1cbe:	4798      	blx	r3
    1cc0:	1c03      	adds	r3, r0, #0
    1cc2:	1c0c      	adds	r4, r1, #0
    1cc4:	4aa3      	ldr	r2, [pc, #652]	; (1f54 <usartCommandHandler+0xb14>)
    1cc6:	49a2      	ldr	r1, [pc, #648]	; (1f50 <usartCommandHandler+0xb10>)
    1cc8:	1c08      	adds	r0, r1, #0
    1cca:	1c11      	adds	r1, r2, #0
    1ccc:	1c1a      	adds	r2, r3, #0
    1cce:	1c23      	adds	r3, r4, #0
    1cd0:	4ca6      	ldr	r4, [pc, #664]	; (1f6c <usartCommandHandler+0xb2c>)
    1cd2:	47a0      	blx	r4
    1cd4:	1c03      	adds	r3, r0, #0
    1cd6:	1c0c      	adds	r4, r1, #0
    1cd8:	49a5      	ldr	r1, [pc, #660]	; (1f70 <usartCommandHandler+0xb30>)
    1cda:	468c      	mov	ip, r1
    1cdc:	1c28      	adds	r0, r5, #0
    1cde:	1c31      	adds	r1, r6, #0
    1ce0:	1c1a      	adds	r2, r3, #0
    1ce2:	1c23      	adds	r3, r4, #0
    1ce4:	47e0      	blx	ip
    1ce6:	1c03      	adds	r3, r0, #0
    1ce8:	1c0c      	adds	r4, r1, #0
    1cea:	4aa2      	ldr	r2, [pc, #648]	; (1f74 <usartCommandHandler+0xb34>)
    1cec:	1c18      	adds	r0, r3, #0
    1cee:	1c21      	adds	r1, r4, #0
    1cf0:	4790      	blx	r2
    1cf2:	1c02      	adds	r2, r0, #0
    1cf4:	4ba0      	ldr	r3, [pc, #640]	; (1f78 <usartCommandHandler+0xb38>)
    1cf6:	4640      	mov	r0, r8
    1cf8:	1c11      	adds	r1, r2, #0
    1cfa:	4798      	blx	r3
    1cfc:	1c03      	adds	r3, r0, #0
    1cfe:	2298      	movs	r2, #152	; 0x98
    1d00:	0052      	lsls	r2, r2, #1
    1d02:	19d2      	adds	r2, r2, r7
    1d04:	6013      	str	r3, [r2, #0]
				 
				 if (pidLoop1.inAuto == false)
    1d06:	4a9d      	ldr	r2, [pc, #628]	; (1f7c <usartCommandHandler+0xb3c>)
    1d08:	234c      	movs	r3, #76	; 0x4c
    1d0a:	5cd3      	ldrb	r3, [r2, r3]
    1d0c:	2201      	movs	r2, #1
    1d0e:	4053      	eors	r3, r2
    1d10:	b2db      	uxtb	r3, r3
    1d12:	2b00      	cmp	r3, #0
    1d14:	d01d      	beq.n	1d52 <usartCommandHandler+0x912>
				 {
					 pidLoop1.Output = dblValue;
    1d16:	4b99      	ldr	r3, [pc, #612]	; (1f7c <usartCommandHandler+0xb3c>)
    1d18:	2098      	movs	r0, #152	; 0x98
    1d1a:	0040      	lsls	r0, r0, #1
    1d1c:	19c0      	adds	r0, r0, r7
    1d1e:	6802      	ldr	r2, [r0, #0]
    1d20:	621a      	str	r2, [r3, #32]
					 set_setdesiredVoltage(dblValue, true, 0);
    1d22:	2198      	movs	r1, #152	; 0x98
    1d24:	0049      	lsls	r1, r1, #1
    1d26:	19c9      	adds	r1, r1, r7
    1d28:	680b      	ldr	r3, [r1, #0]
    1d2a:	1c18      	adds	r0, r3, #0
    1d2c:	2101      	movs	r1, #1
    1d2e:	2200      	movs	r2, #0
    1d30:	4b93      	ldr	r3, [pc, #588]	; (1f80 <usartCommandHandler+0xb40>)
    1d32:	4798      	blx	r3
					 dbg_info("\n[ps output voltage is %f]\n", dblValue);
    1d34:	4b8b      	ldr	r3, [pc, #556]	; (1f64 <usartCommandHandler+0xb24>)
    1d36:	2298      	movs	r2, #152	; 0x98
    1d38:	0052      	lsls	r2, r2, #1
    1d3a:	19d2      	adds	r2, r2, r7
    1d3c:	6810      	ldr	r0, [r2, #0]
    1d3e:	4798      	blx	r3
    1d40:	1c03      	adds	r3, r0, #0
    1d42:	1c0c      	adds	r4, r1, #0
    1d44:	4a8f      	ldr	r2, [pc, #572]	; (1f84 <usartCommandHandler+0xb44>)
    1d46:	1c10      	adds	r0, r2, #0
    1d48:	1c1a      	adds	r2, r3, #0
    1d4a:	1c23      	adds	r3, r4, #0
    1d4c:	498e      	ldr	r1, [pc, #568]	; (1f88 <usartCommandHandler+0xb48>)
    1d4e:	4788      	blx	r1
					 pidLoop2.Output = dblValue;
					 set_setdesiredVoltage(dblValue, true, 1);
					 dbg("\nSet PS 2 Output Voltage\n");
				 }
				 */
			  break;
    1d50:	e05c      	b.n	1e0c <usartCommandHandler+0x9cc>
    1d52:	e05b      	b.n	1e0c <usartCommandHandler+0x9cc>
//------------------------------------------------------------------
// 0.7.x	enable/disable htxAHeater
//------------------------------------------------------------------			  
			  case '7':
			  {
				int nParamValue = (int)strtol((const char*)bParam, NULL, 10);
    1d54:	1c3b      	adds	r3, r7, #0
    1d56:	330c      	adds	r3, #12
    1d58:	1c18      	adds	r0, r3, #0
    1d5a:	2100      	movs	r1, #0
    1d5c:	220a      	movs	r2, #10
    1d5e:	4b7e      	ldr	r3, [pc, #504]	; (1f58 <usartCommandHandler+0xb18>)
    1d60:	4798      	blx	r3
    1d62:	1c03      	adds	r3, r0, #0
    1d64:	2090      	movs	r0, #144	; 0x90
    1d66:	0040      	lsls	r0, r0, #1
    1d68:	19c0      	adds	r0, r0, r7
    1d6a:	6003      	str	r3, [r0, #0]
				  
				if (nParamValue >= 1) {
    1d6c:	2190      	movs	r1, #144	; 0x90
    1d6e:	0049      	lsls	r1, r1, #1
    1d70:	19c9      	adds	r1, r1, r7
    1d72:	680b      	ldr	r3, [r1, #0]
    1d74:	2b00      	cmp	r3, #0
    1d76:	dd05      	ble.n	1d84 <usartCommandHandler+0x944>
					setHeaterState(&htxAHeater, 100);
    1d78:	4b84      	ldr	r3, [pc, #528]	; (1f8c <usartCommandHandler+0xb4c>)
    1d7a:	1c18      	adds	r0, r3, #0
    1d7c:	2164      	movs	r1, #100	; 0x64
    1d7e:	4b84      	ldr	r3, [pc, #528]	; (1f90 <usartCommandHandler+0xb50>)
    1d80:	4798      	blx	r3
    1d82:	e00b      	b.n	1d9c <usartCommandHandler+0x95c>
				} else if (nParamValue <= 0) {
    1d84:	2290      	movs	r2, #144	; 0x90
    1d86:	0052      	lsls	r2, r2, #1
    1d88:	19d2      	adds	r2, r2, r7
    1d8a:	6813      	ldr	r3, [r2, #0]
    1d8c:	2b00      	cmp	r3, #0
    1d8e:	dc05      	bgt.n	1d9c <usartCommandHandler+0x95c>
					setHeaterState(&htxAHeater, 0);
    1d90:	4b7e      	ldr	r3, [pc, #504]	; (1f8c <usartCommandHandler+0xb4c>)
    1d92:	1c18      	adds	r0, r3, #0
    1d94:	2100      	movs	r1, #0
    1d96:	4b7e      	ldr	r3, [pc, #504]	; (1f90 <usartCommandHandler+0xb50>)
    1d98:	4798      	blx	r3
				}
				break;
    1d9a:	e037      	b.n	1e0c <usartCommandHandler+0x9cc>
    1d9c:	e036      	b.n	1e0c <usartCommandHandler+0x9cc>
//------------------------------------------------------------------
// 0.8.x	enable/disable htxBHeater
//------------------------------------------------------------------			  
			  case '8':
			  {
			    int nParamValue = (int)strtol((const char*)bParam, NULL, 10);
    1d9e:	1c3b      	adds	r3, r7, #0
    1da0:	330c      	adds	r3, #12
    1da2:	1c18      	adds	r0, r3, #0
    1da4:	2100      	movs	r1, #0
    1da6:	220a      	movs	r2, #10
    1da8:	4b6b      	ldr	r3, [pc, #428]	; (1f58 <usartCommandHandler+0xb18>)
    1daa:	4798      	blx	r3
    1dac:	1c03      	adds	r3, r0, #0
    1dae:	208e      	movs	r0, #142	; 0x8e
    1db0:	0040      	lsls	r0, r0, #1
    1db2:	19c0      	adds	r0, r0, r7
    1db4:	6003      	str	r3, [r0, #0]
				
				if (nParamValue >= 1) {
    1db6:	218e      	movs	r1, #142	; 0x8e
    1db8:	0049      	lsls	r1, r1, #1
    1dba:	19c9      	adds	r1, r1, r7
    1dbc:	680b      	ldr	r3, [r1, #0]
    1dbe:	2b00      	cmp	r3, #0
    1dc0:	dd05      	ble.n	1dce <usartCommandHandler+0x98e>
					setHeaterState(&htxBHeater, 100);
    1dc2:	4b74      	ldr	r3, [pc, #464]	; (1f94 <usartCommandHandler+0xb54>)
    1dc4:	1c18      	adds	r0, r3, #0
    1dc6:	2164      	movs	r1, #100	; 0x64
    1dc8:	4b71      	ldr	r3, [pc, #452]	; (1f90 <usartCommandHandler+0xb50>)
    1dca:	4798      	blx	r3
    1dcc:	e00b      	b.n	1de6 <usartCommandHandler+0x9a6>
				} else if (nParamValue <= 0) {
    1dce:	228e      	movs	r2, #142	; 0x8e
    1dd0:	0052      	lsls	r2, r2, #1
    1dd2:	19d2      	adds	r2, r2, r7
    1dd4:	6813      	ldr	r3, [r2, #0]
    1dd6:	2b00      	cmp	r3, #0
    1dd8:	dc05      	bgt.n	1de6 <usartCommandHandler+0x9a6>
					setHeaterState(&htxBHeater, 0);
    1dda:	4b6e      	ldr	r3, [pc, #440]	; (1f94 <usartCommandHandler+0xb54>)
    1ddc:	1c18      	adds	r0, r3, #0
    1dde:	2100      	movs	r1, #0
    1de0:	4b6b      	ldr	r3, [pc, #428]	; (1f90 <usartCommandHandler+0xb50>)
    1de2:	4798      	blx	r3
				}
				break;
    1de4:	e012      	b.n	1e0c <usartCommandHandler+0x9cc>
    1de6:	e011      	b.n	1e0c <usartCommandHandler+0x9cc>
//------------------------------------------------------------------
// 0.9		print firmware version
//------------------------------------------------------------------			  
			  case '9':
			  { 
				  dbg_info("\n[firmwareVersion is %.2x.%.2x]\n", firmwareVersion, firmwareRevision);
    1de8:	4b6b      	ldr	r3, [pc, #428]	; (1f98 <usartCommandHandler+0xb58>)
    1dea:	781b      	ldrb	r3, [r3, #0]
    1dec:	1c1a      	adds	r2, r3, #0
    1dee:	4b6b      	ldr	r3, [pc, #428]	; (1f9c <usartCommandHandler+0xb5c>)
    1df0:	781b      	ldrb	r3, [r3, #0]
    1df2:	496b      	ldr	r1, [pc, #428]	; (1fa0 <usartCommandHandler+0xb60>)
    1df4:	1c08      	adds	r0, r1, #0
    1df6:	1c11      	adds	r1, r2, #0
    1df8:	1c1a      	adds	r2, r3, #0
    1dfa:	4b63      	ldr	r3, [pc, #396]	; (1f88 <usartCommandHandler+0xb48>)
    1dfc:	4798      	blx	r3
				  break;
    1dfe:	e005      	b.n	1e0c <usartCommandHandler+0x9cc>
			  }		  
			  default:
			    dbg("\n[no action]\n");
    1e00:	4b68      	ldr	r3, [pc, #416]	; (1fa4 <usartCommandHandler+0xb64>)
    1e02:	1c18      	adds	r0, r3, #0
    1e04:	4b68      	ldr	r3, [pc, #416]	; (1fa8 <usartCommandHandler+0xb68>)
    1e06:	4798      	blx	r3
			  break;
    1e08:	e000      	b.n	1e0c <usartCommandHandler+0x9cc>
					case 9:
						dbg("\n\n");
						printBootMsg();
					break;		
				}
			    break;
    1e0a:	46c0      	nop			; (mov r8, r8)
			  }		  
			  default:
			    dbg("\n[no action]\n");
			  break;
		  }
		  break;	
    1e0c:	f001 fe62 	bl	3ad4 <STACK_SIZE+0x1ad4>
//------------------------------------------------------------------
// 1.x.x.x	write control parameter
//------------------------------------------------------------------		
		case 1:
		{
			float dblValue = 0.0f;
    1e10:	2300      	movs	r3, #0
    1e12:	208c      	movs	r0, #140	; 0x8c
    1e14:	0040      	lsls	r0, r0, #1
    1e16:	19c0      	adds	r0, r0, r7
    1e18:	6003      	str	r3, [r0, #0]
			uint8_t nFracSize = 0;
    1e1a:	2118      	movs	r1, #24
    1e1c:	31ff      	adds	r1, #255	; 0xff
    1e1e:	187b      	adds	r3, r7, r1
    1e20:	2200      	movs	r2, #0
    1e22:	701a      	strb	r2, [r3, #0]
			
			int nSetValue = (int)strtol((const char*)bCommand, NULL, 10);
    1e24:	1c3b      	adds	r3, r7, #0
    1e26:	331c      	adds	r3, #28
    1e28:	1c18      	adds	r0, r3, #0
    1e2a:	2100      	movs	r1, #0
    1e2c:	220a      	movs	r2, #10
    1e2e:	4b4a      	ldr	r3, [pc, #296]	; (1f58 <usartCommandHandler+0xb18>)
    1e30:	4798      	blx	r3
    1e32:	1c03      	adds	r3, r0, #0
    1e34:	2288      	movs	r2, #136	; 0x88
    1e36:	0052      	lsls	r2, r2, #1
    1e38:	19d2      	adds	r2, r2, r7
    1e3a:	6013      	str	r3, [r2, #0]
			int nParamValue = (int)strtol((const char*)bParam, NULL, 10) * nSign;
    1e3c:	1c3b      	adds	r3, r7, #0
    1e3e:	330c      	adds	r3, #12
    1e40:	1c18      	adds	r0, r3, #0
    1e42:	2100      	movs	r1, #0
    1e44:	220a      	movs	r2, #10
    1e46:	4b44      	ldr	r3, [pc, #272]	; (1f58 <usartCommandHandler+0xb18>)
    1e48:	4798      	blx	r3
    1e4a:	1c03      	adds	r3, r0, #0
    1e4c:	20ae      	movs	r0, #174	; 0xae
    1e4e:	0040      	lsls	r0, r0, #1
    1e50:	19c0      	adds	r0, r0, r7
    1e52:	6802      	ldr	r2, [r0, #0]
    1e54:	4353      	muls	r3, r2
    1e56:	2186      	movs	r1, #134	; 0x86
    1e58:	0049      	lsls	r1, r1, #1
    1e5a:	19c9      	adds	r1, r1, r7
    1e5c:	600b      	str	r3, [r1, #0]
			int nFractionValue = (int)strtol((const char*)bFraction, NULL, 10) * nSign;
    1e5e:	1d3b      	adds	r3, r7, #4
    1e60:	1c18      	adds	r0, r3, #0
    1e62:	2100      	movs	r1, #0
    1e64:	220a      	movs	r2, #10
    1e66:	4b3c      	ldr	r3, [pc, #240]	; (1f58 <usartCommandHandler+0xb18>)
    1e68:	4798      	blx	r3
    1e6a:	1c03      	adds	r3, r0, #0
    1e6c:	20ae      	movs	r0, #174	; 0xae
    1e6e:	0040      	lsls	r0, r0, #1
    1e70:	19c0      	adds	r0, r0, r7
    1e72:	6802      	ldr	r2, [r0, #0]
    1e74:	4353      	muls	r3, r2
    1e76:	2184      	movs	r1, #132	; 0x84
    1e78:	0049      	lsls	r1, r1, #1
    1e7a:	19c9      	adds	r1, r1, r7
    1e7c:	600b      	str	r3, [r1, #0]
			int nZone = 0;
    1e7e:	2300      	movs	r3, #0
    1e80:	1d7a      	adds	r2, r7, #5
    1e82:	32ff      	adds	r2, #255	; 0xff
    1e84:	6013      	str	r3, [r2, #0]
			
			nFracSize = strlen(bFraction);
    1e86:	1d3b      	adds	r3, r7, #4
    1e88:	1c18      	adds	r0, r3, #0
    1e8a:	4b34      	ldr	r3, [pc, #208]	; (1f5c <usartCommandHandler+0xb1c>)
    1e8c:	4798      	blx	r3
    1e8e:	1c02      	adds	r2, r0, #0
    1e90:	2018      	movs	r0, #24
    1e92:	30ff      	adds	r0, #255	; 0xff
    1e94:	183b      	adds	r3, r7, r0
    1e96:	701a      	strb	r2, [r3, #0]
			dblValue = (float)nParamValue + (float)((float)nFractionValue/(pow(10,nFracSize)));
    1e98:	4b31      	ldr	r3, [pc, #196]	; (1f60 <usartCommandHandler+0xb20>)
    1e9a:	2186      	movs	r1, #134	; 0x86
    1e9c:	0049      	lsls	r1, r1, #1
    1e9e:	19c9      	adds	r1, r1, r7
    1ea0:	6808      	ldr	r0, [r1, #0]
    1ea2:	4798      	blx	r3
    1ea4:	4680      	mov	r8, r0
    1ea6:	4b2e      	ldr	r3, [pc, #184]	; (1f60 <usartCommandHandler+0xb20>)
    1ea8:	2284      	movs	r2, #132	; 0x84
    1eaa:	0052      	lsls	r2, r2, #1
    1eac:	19d2      	adds	r2, r2, r7
    1eae:	6810      	ldr	r0, [r2, #0]
    1eb0:	4798      	blx	r3
    1eb2:	1c02      	adds	r2, r0, #0
    1eb4:	4b2b      	ldr	r3, [pc, #172]	; (1f64 <usartCommandHandler+0xb24>)
    1eb6:	1c10      	adds	r0, r2, #0
    1eb8:	4798      	blx	r3
    1eba:	1c05      	adds	r5, r0, #0
    1ebc:	1c0e      	adds	r6, r1, #0
    1ebe:	2018      	movs	r0, #24
    1ec0:	30ff      	adds	r0, #255	; 0xff
    1ec2:	183b      	adds	r3, r7, r0
    1ec4:	781a      	ldrb	r2, [r3, #0]
    1ec6:	4b28      	ldr	r3, [pc, #160]	; (1f68 <usartCommandHandler+0xb28>)
    1ec8:	1c10      	adds	r0, r2, #0
    1eca:	4798      	blx	r3
    1ecc:	1c03      	adds	r3, r0, #0
    1ece:	1c0c      	adds	r4, r1, #0
    1ed0:	4a20      	ldr	r2, [pc, #128]	; (1f54 <usartCommandHandler+0xb14>)
    1ed2:	491f      	ldr	r1, [pc, #124]	; (1f50 <usartCommandHandler+0xb10>)
    1ed4:	1c08      	adds	r0, r1, #0
    1ed6:	1c11      	adds	r1, r2, #0
    1ed8:	1c1a      	adds	r2, r3, #0
    1eda:	1c23      	adds	r3, r4, #0
    1edc:	4c23      	ldr	r4, [pc, #140]	; (1f6c <usartCommandHandler+0xb2c>)
    1ede:	47a0      	blx	r4
    1ee0:	1c03      	adds	r3, r0, #0
    1ee2:	1c0c      	adds	r4, r1, #0
    1ee4:	4922      	ldr	r1, [pc, #136]	; (1f70 <usartCommandHandler+0xb30>)
    1ee6:	468c      	mov	ip, r1
    1ee8:	1c28      	adds	r0, r5, #0
    1eea:	1c31      	adds	r1, r6, #0
    1eec:	1c1a      	adds	r2, r3, #0
    1eee:	1c23      	adds	r3, r4, #0
    1ef0:	47e0      	blx	ip
    1ef2:	1c03      	adds	r3, r0, #0
    1ef4:	1c0c      	adds	r4, r1, #0
    1ef6:	4a1f      	ldr	r2, [pc, #124]	; (1f74 <usartCommandHandler+0xb34>)
    1ef8:	1c18      	adds	r0, r3, #0
    1efa:	1c21      	adds	r1, r4, #0
    1efc:	4790      	blx	r2
    1efe:	1c02      	adds	r2, r0, #0
    1f00:	4b1d      	ldr	r3, [pc, #116]	; (1f78 <usartCommandHandler+0xb38>)
    1f02:	4640      	mov	r0, r8
    1f04:	1c11      	adds	r1, r2, #0
    1f06:	4798      	blx	r3
    1f08:	1c03      	adds	r3, r0, #0
    1f0a:	228c      	movs	r2, #140	; 0x8c
    1f0c:	0052      	lsls	r2, r2, #1
    1f0e:	19d2      	adds	r2, r2, r7
    1f10:	6013      	str	r3, [r2, #0]
			if (nSetValue < (((int)(sizeof(D20CONTROL) / sizeof(int)))))
    1f12:	2088      	movs	r0, #136	; 0x88
    1f14:	0040      	lsls	r0, r0, #1
    1f16:	19c0      	adds	r0, r0, r7
    1f18:	6803      	ldr	r3, [r0, #0]
    1f1a:	2b0c      	cmp	r3, #12
    1f1c:	dc16      	bgt.n	1f4c <usartCommandHandler+0xb0c>
				{
					nZone = 1;
					nSetValue -= 12;
				}
				*/
				fControl[nSetValue](dblValue, true, nZone);
    1f1e:	4b23      	ldr	r3, [pc, #140]	; (1fac <usartCommandHandler+0xb6c>)
    1f20:	2188      	movs	r1, #136	; 0x88
    1f22:	0049      	lsls	r1, r1, #1
    1f24:	19c9      	adds	r1, r1, r7
    1f26:	680a      	ldr	r2, [r1, #0]
    1f28:	0092      	lsls	r2, r2, #2
    1f2a:	58d3      	ldr	r3, [r2, r3]
    1f2c:	228c      	movs	r2, #140	; 0x8c
    1f2e:	0052      	lsls	r2, r2, #1
    1f30:	19d2      	adds	r2, r2, r7
    1f32:	6811      	ldr	r1, [r2, #0]
    1f34:	1d78      	adds	r0, r7, #5
    1f36:	30ff      	adds	r0, #255	; 0xff
    1f38:	6802      	ldr	r2, [r0, #0]
    1f3a:	1c08      	adds	r0, r1, #0
    1f3c:	2101      	movs	r1, #1
    1f3e:	4798      	blx	r3
				dbg("\n[parameter set]\n");
    1f40:	4b1b      	ldr	r3, [pc, #108]	; (1fb0 <usartCommandHandler+0xb70>)
    1f42:	1c18      	adds	r0, r3, #0
    1f44:	4b18      	ldr	r3, [pc, #96]	; (1fa8 <usartCommandHandler+0xb68>)
    1f46:	4798      	blx	r3
			}
			break;
    1f48:	f001 fdc4 	bl	3ad4 <STACK_SIZE+0x1ad4>
    1f4c:	f001 fdc2 	bl	3ad4 <STACK_SIZE+0x1ad4>
    1f50:	00000000 	.word	0x00000000
    1f54:	40240000 	.word	0x40240000
    1f58:	0001bd69 	.word	0x0001bd69
    1f5c:	0001bb1d 	.word	0x0001bb1d
    1f60:	000203b5 	.word	0x000203b5
    1f64:	00022111 	.word	0x00022111
    1f68:	000220a9 	.word	0x000220a9
    1f6c:	00019c71 	.word	0x00019c71
    1f70:	00020b55 	.word	0x00020b55
    1f74:	000221b5 	.word	0x000221b5
    1f78:	0001f79d 	.word	0x0001f79d
    1f7c:	20000e10 	.word	0x20000e10
    1f80:	000002bd 	.word	0x000002bd
    1f84:	00022cbc 	.word	0x00022cbc
    1f88:	0001b62d 	.word	0x0001b62d
    1f8c:	20000b28 	.word	0x20000b28
    1f90:	00007275 	.word	0x00007275
    1f94:	20000c4c 	.word	0x20000c4c
    1f98:	20000ed0 	.word	0x20000ed0
    1f9c:	20000e0c 	.word	0x20000e0c
    1fa0:	00022cd8 	.word	0x00022cd8
    1fa4:	00022cfc 	.word	0x00022cfc
    1fa8:	0001b899 	.word	0x0001b899
    1fac:	20000534 	.word	0x20000534
    1fb0:	00022d0c 	.word	0x00022d0c
//------------------------------------------------------------------
// 2.x.x.x	write chamber parameter
//------------------------------------------------------------------		
		case 2:
		{ 
			float dblValue = 0.0f;
    1fb4:	2300      	movs	r3, #0
    1fb6:	1c79      	adds	r1, r7, #1
    1fb8:	31ff      	adds	r1, #255	; 0xff
    1fba:	600b      	str	r3, [r1, #0]
			uint8_t nFracSize = 0;
    1fbc:	1c3b      	adds	r3, r7, #0
    1fbe:	33ff      	adds	r3, #255	; 0xff
    1fc0:	2200      	movs	r2, #0
    1fc2:	701a      	strb	r2, [r3, #0]
			
			int nSetValue = (int)strtol((const char*)bCommand, NULL, 10);
    1fc4:	1c3b      	adds	r3, r7, #0
    1fc6:	331c      	adds	r3, #28
    1fc8:	1c18      	adds	r0, r3, #0
    1fca:	2100      	movs	r1, #0
    1fcc:	220a      	movs	r2, #10
    1fce:	4bf2      	ldr	r3, [pc, #968]	; (2398 <STACK_SIZE+0x398>)
    1fd0:	4798      	blx	r3
    1fd2:	1c03      	adds	r3, r0, #0
    1fd4:	22a8      	movs	r2, #168	; 0xa8
    1fd6:	0052      	lsls	r2, r2, #1
    1fd8:	19d2      	adds	r2, r2, r7
    1fda:	6013      	str	r3, [r2, #0]
			int nParamValue = (int)strtol((const char*)bParam, NULL, 10) * nSign;
    1fdc:	1c3b      	adds	r3, r7, #0
    1fde:	330c      	adds	r3, #12
    1fe0:	1c18      	adds	r0, r3, #0
    1fe2:	2100      	movs	r1, #0
    1fe4:	220a      	movs	r2, #10
    1fe6:	4bec      	ldr	r3, [pc, #944]	; (2398 <STACK_SIZE+0x398>)
    1fe8:	4798      	blx	r3
    1fea:	1c03      	adds	r3, r0, #0
    1fec:	20ae      	movs	r0, #174	; 0xae
    1fee:	0040      	lsls	r0, r0, #1
    1ff0:	19c0      	adds	r0, r0, r7
    1ff2:	6802      	ldr	r2, [r0, #0]
    1ff4:	4353      	muls	r3, r2
    1ff6:	21f8      	movs	r1, #248	; 0xf8
    1ff8:	19c9      	adds	r1, r1, r7
    1ffa:	600b      	str	r3, [r1, #0]
			int nFractionValue = (int)strtol((const char*)bFraction, NULL, 10) * nSign;
    1ffc:	1d3b      	adds	r3, r7, #4
    1ffe:	1c18      	adds	r0, r3, #0
    2000:	2100      	movs	r1, #0
    2002:	220a      	movs	r2, #10
    2004:	4be4      	ldr	r3, [pc, #912]	; (2398 <STACK_SIZE+0x398>)
    2006:	4798      	blx	r3
    2008:	1c03      	adds	r3, r0, #0
    200a:	20ae      	movs	r0, #174	; 0xae
    200c:	0040      	lsls	r0, r0, #1
    200e:	19c0      	adds	r0, r0, r7
    2010:	6802      	ldr	r2, [r0, #0]
    2012:	4353      	muls	r3, r2
    2014:	21f4      	movs	r1, #244	; 0xf4
    2016:	19c9      	adds	r1, r1, r7
    2018:	600b      	str	r3, [r1, #0]
			int nZone = 0;
    201a:	2300      	movs	r3, #0
    201c:	22a6      	movs	r2, #166	; 0xa6
    201e:	0052      	lsls	r2, r2, #1
    2020:	19d2      	adds	r2, r2, r7
    2022:	6013      	str	r3, [r2, #0]
			
			nFracSize = strlen(bFraction);
    2024:	1d3b      	adds	r3, r7, #4
    2026:	1c18      	adds	r0, r3, #0
    2028:	4bdc      	ldr	r3, [pc, #880]	; (239c <STACK_SIZE+0x39c>)
    202a:	4798      	blx	r3
    202c:	1c02      	adds	r2, r0, #0
    202e:	1c3b      	adds	r3, r7, #0
    2030:	33ff      	adds	r3, #255	; 0xff
    2032:	701a      	strb	r2, [r3, #0]
			dblValue = (float)nParamValue + (float)((float)nFractionValue/(pow(10,nFracSize)));
    2034:	4bda      	ldr	r3, [pc, #872]	; (23a0 <STACK_SIZE+0x3a0>)
    2036:	21f8      	movs	r1, #248	; 0xf8
    2038:	19c9      	adds	r1, r1, r7
    203a:	6808      	ldr	r0, [r1, #0]
    203c:	4798      	blx	r3
    203e:	4680      	mov	r8, r0
    2040:	4bd7      	ldr	r3, [pc, #860]	; (23a0 <STACK_SIZE+0x3a0>)
    2042:	22f4      	movs	r2, #244	; 0xf4
    2044:	19d2      	adds	r2, r2, r7
    2046:	6810      	ldr	r0, [r2, #0]
    2048:	4798      	blx	r3
    204a:	1c02      	adds	r2, r0, #0
    204c:	4bd5      	ldr	r3, [pc, #852]	; (23a4 <STACK_SIZE+0x3a4>)
    204e:	1c10      	adds	r0, r2, #0
    2050:	4798      	blx	r3
    2052:	1c05      	adds	r5, r0, #0
    2054:	1c0e      	adds	r6, r1, #0
    2056:	1c3b      	adds	r3, r7, #0
    2058:	33ff      	adds	r3, #255	; 0xff
    205a:	781a      	ldrb	r2, [r3, #0]
    205c:	4bd2      	ldr	r3, [pc, #840]	; (23a8 <STACK_SIZE+0x3a8>)
    205e:	1c10      	adds	r0, r2, #0
    2060:	4798      	blx	r3
    2062:	1c03      	adds	r3, r0, #0
    2064:	1c0c      	adds	r4, r1, #0
    2066:	4acb      	ldr	r2, [pc, #812]	; (2394 <STACK_SIZE+0x394>)
    2068:	49c9      	ldr	r1, [pc, #804]	; (2390 <STACK_SIZE+0x390>)
    206a:	1c08      	adds	r0, r1, #0
    206c:	1c11      	adds	r1, r2, #0
    206e:	1c1a      	adds	r2, r3, #0
    2070:	1c23      	adds	r3, r4, #0
    2072:	4cce      	ldr	r4, [pc, #824]	; (23ac <STACK_SIZE+0x3ac>)
    2074:	47a0      	blx	r4
    2076:	1c03      	adds	r3, r0, #0
    2078:	1c0c      	adds	r4, r1, #0
    207a:	48cd      	ldr	r0, [pc, #820]	; (23b0 <STACK_SIZE+0x3b0>)
    207c:	4684      	mov	ip, r0
    207e:	1c28      	adds	r0, r5, #0
    2080:	1c31      	adds	r1, r6, #0
    2082:	1c1a      	adds	r2, r3, #0
    2084:	1c23      	adds	r3, r4, #0
    2086:	47e0      	blx	ip
    2088:	1c03      	adds	r3, r0, #0
    208a:	1c0c      	adds	r4, r1, #0
    208c:	4ac9      	ldr	r2, [pc, #804]	; (23b4 <STACK_SIZE+0x3b4>)
    208e:	1c18      	adds	r0, r3, #0
    2090:	1c21      	adds	r1, r4, #0
    2092:	4790      	blx	r2
    2094:	1c02      	adds	r2, r0, #0
    2096:	4bc8      	ldr	r3, [pc, #800]	; (23b8 <STACK_SIZE+0x3b8>)
    2098:	4640      	mov	r0, r8
    209a:	1c11      	adds	r1, r2, #0
    209c:	4798      	blx	r3
    209e:	1c03      	adds	r3, r0, #0
    20a0:	1c79      	adds	r1, r7, #1
    20a2:	31ff      	adds	r1, #255	; 0xff
    20a4:	600b      	str	r3, [r1, #0]
			if (nSetValue < (((int)(sizeof(D20Chamber) / sizeof(int)) * 2 )))
    20a6:	22a8      	movs	r2, #168	; 0xa8
    20a8:	0052      	lsls	r2, r2, #1
    20aa:	19d2      	adds	r2, r2, r7
    20ac:	6813      	ldr	r3, [r2, #0]
    20ae:	2b17      	cmp	r3, #23
    20b0:	dc2a      	bgt.n	2108 <STACK_SIZE+0x108>
			{
				if (nSetValue > 11)
    20b2:	20a8      	movs	r0, #168	; 0xa8
    20b4:	0040      	lsls	r0, r0, #1
    20b6:	19c0      	adds	r0, r0, r7
    20b8:	6803      	ldr	r3, [r0, #0]
    20ba:	2b0b      	cmp	r3, #11
    20bc:	dd0d      	ble.n	20da <STACK_SIZE+0xda>
				{
					nZone = 1;
    20be:	2301      	movs	r3, #1
    20c0:	21a6      	movs	r1, #166	; 0xa6
    20c2:	0049      	lsls	r1, r1, #1
    20c4:	19c9      	adds	r1, r1, r7
    20c6:	600b      	str	r3, [r1, #0]
					nSetValue -= 12;
    20c8:	22a8      	movs	r2, #168	; 0xa8
    20ca:	0052      	lsls	r2, r2, #1
    20cc:	19d2      	adds	r2, r2, r7
    20ce:	6813      	ldr	r3, [r2, #0]
    20d0:	3b0c      	subs	r3, #12
    20d2:	20a8      	movs	r0, #168	; 0xa8
    20d4:	0040      	lsls	r0, r0, #1
    20d6:	19c0      	adds	r0, r0, r7
    20d8:	6003      	str	r3, [r0, #0]
				}
			    fChamber[nSetValue](dblValue, true, nZone);
    20da:	4bb8      	ldr	r3, [pc, #736]	; (23bc <STACK_SIZE+0x3bc>)
    20dc:	21a8      	movs	r1, #168	; 0xa8
    20de:	0049      	lsls	r1, r1, #1
    20e0:	19c9      	adds	r1, r1, r7
    20e2:	680a      	ldr	r2, [r1, #0]
    20e4:	0092      	lsls	r2, r2, #2
    20e6:	58d3      	ldr	r3, [r2, r3]
    20e8:	1c7a      	adds	r2, r7, #1
    20ea:	32ff      	adds	r2, #255	; 0xff
    20ec:	6811      	ldr	r1, [r2, #0]
    20ee:	20a6      	movs	r0, #166	; 0xa6
    20f0:	0040      	lsls	r0, r0, #1
    20f2:	19c0      	adds	r0, r0, r7
    20f4:	6802      	ldr	r2, [r0, #0]
    20f6:	1c08      	adds	r0, r1, #0
    20f8:	2101      	movs	r1, #1
    20fa:	4798      	blx	r3
				dbg("\n[chamber parameter set]\n");
    20fc:	4bb0      	ldr	r3, [pc, #704]	; (23c0 <STACK_SIZE+0x3c0>)
    20fe:	1c18      	adds	r0, r3, #0
    2100:	4bb0      	ldr	r3, [pc, #704]	; (23c4 <STACK_SIZE+0x3c4>)
    2102:	4798      	blx	r3
			}
            break;
    2104:	f001 fce6 	bl	3ad4 <STACK_SIZE+0x1ad4>
    2108:	f001 fce4 	bl	3ad4 <STACK_SIZE+0x1ad4>
//------------------------------------------------------------------
// 3.x.x.x	write power supply parameter
//------------------------------------------------------------------		
		case 3:
		{
			float dblValue = 0.0f;
    210c:	2300      	movs	r3, #0
    210e:	21f0      	movs	r1, #240	; 0xf0
    2110:	19c9      	adds	r1, r1, r7
    2112:	600b      	str	r3, [r1, #0]
			uint8_t nFracSize = 0;
    2114:	1c3b      	adds	r3, r7, #0
    2116:	33ef      	adds	r3, #239	; 0xef
    2118:	2200      	movs	r2, #0
    211a:	701a      	strb	r2, [r3, #0]
			
			int nSetValue = (int)strtol((const char*)bCommand, NULL, 10);
    211c:	1c3b      	adds	r3, r7, #0
    211e:	331c      	adds	r3, #28
    2120:	1c18      	adds	r0, r3, #0
    2122:	2100      	movs	r1, #0
    2124:	220a      	movs	r2, #10
    2126:	4b9c      	ldr	r3, [pc, #624]	; (2398 <STACK_SIZE+0x398>)
    2128:	4798      	blx	r3
    212a:	1c03      	adds	r3, r0, #0
    212c:	22a4      	movs	r2, #164	; 0xa4
    212e:	0052      	lsls	r2, r2, #1
    2130:	19d2      	adds	r2, r2, r7
    2132:	6013      	str	r3, [r2, #0]
			int nParamValue = (int)strtol((const char*)bParam, NULL, 10) * nSign;
    2134:	1c3b      	adds	r3, r7, #0
    2136:	330c      	adds	r3, #12
    2138:	1c18      	adds	r0, r3, #0
    213a:	2100      	movs	r1, #0
    213c:	220a      	movs	r2, #10
    213e:	4b96      	ldr	r3, [pc, #600]	; (2398 <STACK_SIZE+0x398>)
    2140:	4798      	blx	r3
    2142:	1c03      	adds	r3, r0, #0
    2144:	20ae      	movs	r0, #174	; 0xae
    2146:	0040      	lsls	r0, r0, #1
    2148:	19c0      	adds	r0, r0, r7
    214a:	6802      	ldr	r2, [r0, #0]
    214c:	4353      	muls	r3, r2
    214e:	21e8      	movs	r1, #232	; 0xe8
    2150:	19c9      	adds	r1, r1, r7
    2152:	600b      	str	r3, [r1, #0]
			int nFractionValue = (int)strtol((const char*)bFraction, NULL, 10) * nSign;
    2154:	1d3b      	adds	r3, r7, #4
    2156:	1c18      	adds	r0, r3, #0
    2158:	2100      	movs	r1, #0
    215a:	220a      	movs	r2, #10
    215c:	4b8e      	ldr	r3, [pc, #568]	; (2398 <STACK_SIZE+0x398>)
    215e:	4798      	blx	r3
    2160:	1c03      	adds	r3, r0, #0
    2162:	20ae      	movs	r0, #174	; 0xae
    2164:	0040      	lsls	r0, r0, #1
    2166:	19c0      	adds	r0, r0, r7
    2168:	6802      	ldr	r2, [r0, #0]
    216a:	4353      	muls	r3, r2
    216c:	21e4      	movs	r1, #228	; 0xe4
    216e:	19c9      	adds	r1, r1, r7
    2170:	600b      	str	r3, [r1, #0]
			int nZone = 0;
    2172:	2300      	movs	r3, #0
    2174:	22a2      	movs	r2, #162	; 0xa2
    2176:	0052      	lsls	r2, r2, #1
    2178:	19d2      	adds	r2, r2, r7
    217a:	6013      	str	r3, [r2, #0]
			
			nFracSize = strlen(bFraction);
    217c:	1d3b      	adds	r3, r7, #4
    217e:	1c18      	adds	r0, r3, #0
    2180:	4b86      	ldr	r3, [pc, #536]	; (239c <STACK_SIZE+0x39c>)
    2182:	4798      	blx	r3
    2184:	1c02      	adds	r2, r0, #0
    2186:	1c3b      	adds	r3, r7, #0
    2188:	33ef      	adds	r3, #239	; 0xef
    218a:	701a      	strb	r2, [r3, #0]
			dblValue = (float)nParamValue + (float)((float)nFractionValue/(pow(10,nFracSize)));
    218c:	4b84      	ldr	r3, [pc, #528]	; (23a0 <STACK_SIZE+0x3a0>)
    218e:	21e8      	movs	r1, #232	; 0xe8
    2190:	19c9      	adds	r1, r1, r7
    2192:	6808      	ldr	r0, [r1, #0]
    2194:	4798      	blx	r3
    2196:	4680      	mov	r8, r0
    2198:	4b81      	ldr	r3, [pc, #516]	; (23a0 <STACK_SIZE+0x3a0>)
    219a:	22e4      	movs	r2, #228	; 0xe4
    219c:	19d2      	adds	r2, r2, r7
    219e:	6810      	ldr	r0, [r2, #0]
    21a0:	4798      	blx	r3
    21a2:	1c02      	adds	r2, r0, #0
    21a4:	4b7f      	ldr	r3, [pc, #508]	; (23a4 <STACK_SIZE+0x3a4>)
    21a6:	1c10      	adds	r0, r2, #0
    21a8:	4798      	blx	r3
    21aa:	1c05      	adds	r5, r0, #0
    21ac:	1c0e      	adds	r6, r1, #0
    21ae:	1c3b      	adds	r3, r7, #0
    21b0:	33ef      	adds	r3, #239	; 0xef
    21b2:	781a      	ldrb	r2, [r3, #0]
    21b4:	4b7c      	ldr	r3, [pc, #496]	; (23a8 <STACK_SIZE+0x3a8>)
    21b6:	1c10      	adds	r0, r2, #0
    21b8:	4798      	blx	r3
    21ba:	1c03      	adds	r3, r0, #0
    21bc:	1c0c      	adds	r4, r1, #0
    21be:	4a75      	ldr	r2, [pc, #468]	; (2394 <STACK_SIZE+0x394>)
    21c0:	4973      	ldr	r1, [pc, #460]	; (2390 <STACK_SIZE+0x390>)
    21c2:	1c08      	adds	r0, r1, #0
    21c4:	1c11      	adds	r1, r2, #0
    21c6:	1c1a      	adds	r2, r3, #0
    21c8:	1c23      	adds	r3, r4, #0
    21ca:	4c78      	ldr	r4, [pc, #480]	; (23ac <STACK_SIZE+0x3ac>)
    21cc:	47a0      	blx	r4
    21ce:	1c03      	adds	r3, r0, #0
    21d0:	1c0c      	adds	r4, r1, #0
    21d2:	4877      	ldr	r0, [pc, #476]	; (23b0 <STACK_SIZE+0x3b0>)
    21d4:	4684      	mov	ip, r0
    21d6:	1c28      	adds	r0, r5, #0
    21d8:	1c31      	adds	r1, r6, #0
    21da:	1c1a      	adds	r2, r3, #0
    21dc:	1c23      	adds	r3, r4, #0
    21de:	47e0      	blx	ip
    21e0:	1c03      	adds	r3, r0, #0
    21e2:	1c0c      	adds	r4, r1, #0
    21e4:	4a73      	ldr	r2, [pc, #460]	; (23b4 <STACK_SIZE+0x3b4>)
    21e6:	1c18      	adds	r0, r3, #0
    21e8:	1c21      	adds	r1, r4, #0
    21ea:	4790      	blx	r2
    21ec:	1c02      	adds	r2, r0, #0
    21ee:	4b72      	ldr	r3, [pc, #456]	; (23b8 <STACK_SIZE+0x3b8>)
    21f0:	4640      	mov	r0, r8
    21f2:	1c11      	adds	r1, r2, #0
    21f4:	4798      	blx	r3
    21f6:	1c03      	adds	r3, r0, #0
    21f8:	21f0      	movs	r1, #240	; 0xf0
    21fa:	19c9      	adds	r1, r1, r7
    21fc:	600b      	str	r3, [r1, #0]
			if (nSetValue < (((int)(sizeof(D20POWERSUPPLY) / sizeof(int)) * 2 )))
    21fe:	22a4      	movs	r2, #164	; 0xa4
    2200:	0052      	lsls	r2, r2, #1
    2202:	19d2      	adds	r2, r2, r7
    2204:	6813      	ldr	r3, [r2, #0]
    2206:	2b19      	cmp	r3, #25
    2208:	dc2a      	bgt.n	2260 <STACK_SIZE+0x260>
			{
				if (nSetValue > 12)
    220a:	20a4      	movs	r0, #164	; 0xa4
    220c:	0040      	lsls	r0, r0, #1
    220e:	19c0      	adds	r0, r0, r7
    2210:	6803      	ldr	r3, [r0, #0]
    2212:	2b0c      	cmp	r3, #12
    2214:	dd0d      	ble.n	2232 <STACK_SIZE+0x232>
				{
					nZone = 1;
    2216:	2301      	movs	r3, #1
    2218:	21a2      	movs	r1, #162	; 0xa2
    221a:	0049      	lsls	r1, r1, #1
    221c:	19c9      	adds	r1, r1, r7
    221e:	600b      	str	r3, [r1, #0]
					nSetValue -= 13;
    2220:	22a4      	movs	r2, #164	; 0xa4
    2222:	0052      	lsls	r2, r2, #1
    2224:	19d2      	adds	r2, r2, r7
    2226:	6813      	ldr	r3, [r2, #0]
    2228:	3b0d      	subs	r3, #13
    222a:	20a4      	movs	r0, #164	; 0xa4
    222c:	0040      	lsls	r0, r0, #1
    222e:	19c0      	adds	r0, r0, r7
    2230:	6003      	str	r3, [r0, #0]
				}
				
				fPower[nSetValue](dblValue, true, nZone);
    2232:	4b65      	ldr	r3, [pc, #404]	; (23c8 <STACK_SIZE+0x3c8>)
    2234:	21a4      	movs	r1, #164	; 0xa4
    2236:	0049      	lsls	r1, r1, #1
    2238:	19c9      	adds	r1, r1, r7
    223a:	680a      	ldr	r2, [r1, #0]
    223c:	0092      	lsls	r2, r2, #2
    223e:	58d3      	ldr	r3, [r2, r3]
    2240:	22f0      	movs	r2, #240	; 0xf0
    2242:	19d2      	adds	r2, r2, r7
    2244:	6811      	ldr	r1, [r2, #0]
    2246:	20a2      	movs	r0, #162	; 0xa2
    2248:	0040      	lsls	r0, r0, #1
    224a:	19c0      	adds	r0, r0, r7
    224c:	6802      	ldr	r2, [r0, #0]
    224e:	1c08      	adds	r0, r1, #0
    2250:	2101      	movs	r1, #1
    2252:	4798      	blx	r3
				dbg("\n[ps paramter set]\n");
    2254:	4b5d      	ldr	r3, [pc, #372]	; (23cc <STACK_SIZE+0x3cc>)
    2256:	1c18      	adds	r0, r3, #0
    2258:	4b5a      	ldr	r3, [pc, #360]	; (23c4 <STACK_SIZE+0x3c4>)
    225a:	4798      	blx	r3
			}
            break;
    225c:	f001 fc3a 	bl	3ad4 <STACK_SIZE+0x1ad4>
    2260:	f001 fc38 	bl	3ad4 <STACK_SIZE+0x1ad4>
//------------------------------------------------------------------
// 4.x.x.x	write pid parameter
//------------------------------------------------------------------		
        case 4:
        {
	        float dblValue = 0.0f;
    2264:	2300      	movs	r3, #0
    2266:	21e0      	movs	r1, #224	; 0xe0
    2268:	19c9      	adds	r1, r1, r7
    226a:	600b      	str	r3, [r1, #0]
	        uint8_t nFracSize = 0;
    226c:	1c3b      	adds	r3, r7, #0
    226e:	33df      	adds	r3, #223	; 0xdf
    2270:	2200      	movs	r2, #0
    2272:	701a      	strb	r2, [r3, #0]
	        
	        int nSetValue = (int)strtol((const char*)bCommand, NULL, 10);
    2274:	1c3b      	adds	r3, r7, #0
    2276:	331c      	adds	r3, #28
    2278:	1c18      	adds	r0, r3, #0
    227a:	2100      	movs	r1, #0
    227c:	220a      	movs	r2, #10
    227e:	4b46      	ldr	r3, [pc, #280]	; (2398 <STACK_SIZE+0x398>)
    2280:	4798      	blx	r3
    2282:	1c03      	adds	r3, r0, #0
    2284:	22d8      	movs	r2, #216	; 0xd8
    2286:	19d2      	adds	r2, r2, r7
    2288:	6013      	str	r3, [r2, #0]
	        int nParamValue = (int)strtol((const char*)bParam, NULL, 10) * nSign;
    228a:	1c3b      	adds	r3, r7, #0
    228c:	330c      	adds	r3, #12
    228e:	1c18      	adds	r0, r3, #0
    2290:	2100      	movs	r1, #0
    2292:	220a      	movs	r2, #10
    2294:	4b40      	ldr	r3, [pc, #256]	; (2398 <STACK_SIZE+0x398>)
    2296:	4798      	blx	r3
    2298:	1c03      	adds	r3, r0, #0
    229a:	20ae      	movs	r0, #174	; 0xae
    229c:	0040      	lsls	r0, r0, #1
    229e:	19c0      	adds	r0, r0, r7
    22a0:	6802      	ldr	r2, [r0, #0]
    22a2:	4353      	muls	r3, r2
    22a4:	21d4      	movs	r1, #212	; 0xd4
    22a6:	19c9      	adds	r1, r1, r7
    22a8:	600b      	str	r3, [r1, #0]
	        int nFractionValue = (int)strtol((const char*)bFraction, NULL, 10) * nSign;
    22aa:	1d3b      	adds	r3, r7, #4
    22ac:	1c18      	adds	r0, r3, #0
    22ae:	2100      	movs	r1, #0
    22b0:	220a      	movs	r2, #10
    22b2:	4b39      	ldr	r3, [pc, #228]	; (2398 <STACK_SIZE+0x398>)
    22b4:	4798      	blx	r3
    22b6:	1c03      	adds	r3, r0, #0
    22b8:	20ae      	movs	r0, #174	; 0xae
    22ba:	0040      	lsls	r0, r0, #1
    22bc:	19c0      	adds	r0, r0, r7
    22be:	6802      	ldr	r2, [r0, #0]
    22c0:	4353      	muls	r3, r2
    22c2:	21d0      	movs	r1, #208	; 0xd0
    22c4:	19c9      	adds	r1, r1, r7
    22c6:	600b      	str	r3, [r1, #0]
			int nZone = 0;
    22c8:	2300      	movs	r3, #0
    22ca:	22cc      	movs	r2, #204	; 0xcc
    22cc:	19d2      	adds	r2, r2, r7
    22ce:	6013      	str	r3, [r2, #0]
	        
	        nFracSize = strlen(bFraction);
    22d0:	1d3b      	adds	r3, r7, #4
    22d2:	1c18      	adds	r0, r3, #0
    22d4:	4b31      	ldr	r3, [pc, #196]	; (239c <STACK_SIZE+0x39c>)
    22d6:	4798      	blx	r3
    22d8:	1c02      	adds	r2, r0, #0
    22da:	1c3b      	adds	r3, r7, #0
    22dc:	33df      	adds	r3, #223	; 0xdf
    22de:	701a      	strb	r2, [r3, #0]
	        dblValue = (float)nParamValue + (float)((float)nFractionValue/(pow(10,nFracSize)));			
    22e0:	4b2f      	ldr	r3, [pc, #188]	; (23a0 <STACK_SIZE+0x3a0>)
    22e2:	21d4      	movs	r1, #212	; 0xd4
    22e4:	19c9      	adds	r1, r1, r7
    22e6:	6808      	ldr	r0, [r1, #0]
    22e8:	4798      	blx	r3
    22ea:	4680      	mov	r8, r0
    22ec:	4b2c      	ldr	r3, [pc, #176]	; (23a0 <STACK_SIZE+0x3a0>)
    22ee:	22d0      	movs	r2, #208	; 0xd0
    22f0:	19d2      	adds	r2, r2, r7
    22f2:	6810      	ldr	r0, [r2, #0]
    22f4:	4798      	blx	r3
    22f6:	1c02      	adds	r2, r0, #0
    22f8:	4b2a      	ldr	r3, [pc, #168]	; (23a4 <STACK_SIZE+0x3a4>)
    22fa:	1c10      	adds	r0, r2, #0
    22fc:	4798      	blx	r3
    22fe:	1c05      	adds	r5, r0, #0
    2300:	1c0e      	adds	r6, r1, #0
    2302:	1c3b      	adds	r3, r7, #0
    2304:	33df      	adds	r3, #223	; 0xdf
    2306:	781a      	ldrb	r2, [r3, #0]
    2308:	4b27      	ldr	r3, [pc, #156]	; (23a8 <STACK_SIZE+0x3a8>)
    230a:	1c10      	adds	r0, r2, #0
    230c:	4798      	blx	r3
    230e:	1c03      	adds	r3, r0, #0
    2310:	1c0c      	adds	r4, r1, #0
    2312:	4a20      	ldr	r2, [pc, #128]	; (2394 <STACK_SIZE+0x394>)
    2314:	491e      	ldr	r1, [pc, #120]	; (2390 <STACK_SIZE+0x390>)
    2316:	1c08      	adds	r0, r1, #0
    2318:	1c11      	adds	r1, r2, #0
    231a:	1c1a      	adds	r2, r3, #0
    231c:	1c23      	adds	r3, r4, #0
    231e:	4c23      	ldr	r4, [pc, #140]	; (23ac <STACK_SIZE+0x3ac>)
    2320:	47a0      	blx	r4
    2322:	1c03      	adds	r3, r0, #0
    2324:	1c0c      	adds	r4, r1, #0
    2326:	4822      	ldr	r0, [pc, #136]	; (23b0 <STACK_SIZE+0x3b0>)
    2328:	4684      	mov	ip, r0
    232a:	1c28      	adds	r0, r5, #0
    232c:	1c31      	adds	r1, r6, #0
    232e:	1c1a      	adds	r2, r3, #0
    2330:	1c23      	adds	r3, r4, #0
    2332:	47e0      	blx	ip
    2334:	1c03      	adds	r3, r0, #0
    2336:	1c0c      	adds	r4, r1, #0
    2338:	4a1e      	ldr	r2, [pc, #120]	; (23b4 <STACK_SIZE+0x3b4>)
    233a:	1c18      	adds	r0, r3, #0
    233c:	1c21      	adds	r1, r4, #0
    233e:	4790      	blx	r2
    2340:	1c02      	adds	r2, r0, #0
    2342:	4b1d      	ldr	r3, [pc, #116]	; (23b8 <STACK_SIZE+0x3b8>)
    2344:	4640      	mov	r0, r8
    2346:	1c11      	adds	r1, r2, #0
    2348:	4798      	blx	r3
    234a:	1c03      	adds	r3, r0, #0
    234c:	21e0      	movs	r1, #224	; 0xe0
    234e:	19c9      	adds	r1, r1, r7
    2350:	600b      	str	r3, [r1, #0]
			if (nSetValue < ((int)(sizeof(D20PID) / sizeof(int))) )
    2352:	22d8      	movs	r2, #216	; 0xd8
    2354:	19d2      	adds	r2, r2, r7
    2356:	6813      	ldr	r3, [r2, #0]
    2358:	2b08      	cmp	r3, #8
    235a:	dc14      	bgt.n	2386 <STACK_SIZE+0x386>
				{
					nZone = 1;
					nSetValue -= 9;
				}
				*/
		        fPid[nSetValue](dblValue, true, nZone);
    235c:	4b1c      	ldr	r3, [pc, #112]	; (23d0 <STACK_SIZE+0x3d0>)
    235e:	20d8      	movs	r0, #216	; 0xd8
    2360:	19c0      	adds	r0, r0, r7
    2362:	6802      	ldr	r2, [r0, #0]
    2364:	0092      	lsls	r2, r2, #2
    2366:	58d3      	ldr	r3, [r2, r3]
    2368:	22e0      	movs	r2, #224	; 0xe0
    236a:	19d2      	adds	r2, r2, r7
    236c:	6811      	ldr	r1, [r2, #0]
    236e:	20cc      	movs	r0, #204	; 0xcc
    2370:	19c0      	adds	r0, r0, r7
    2372:	6802      	ldr	r2, [r0, #0]
    2374:	1c08      	adds	r0, r1, #0
    2376:	2101      	movs	r1, #1
    2378:	4798      	blx	r3
		        dbg("\n[pid parameter set]\n");
    237a:	4b16      	ldr	r3, [pc, #88]	; (23d4 <STACK_SIZE+0x3d4>)
    237c:	1c18      	adds	r0, r3, #0
    237e:	4b11      	ldr	r3, [pc, #68]	; (23c4 <STACK_SIZE+0x3c4>)
    2380:	4798      	blx	r3
	        }
            break;
    2382:	f001 fba7 	bl	3ad4 <STACK_SIZE+0x1ad4>
    2386:	f001 fba5 	bl	3ad4 <STACK_SIZE+0x1ad4>
    238a:	46c0      	nop			; (mov r8, r8)
    238c:	46c0      	nop			; (mov r8, r8)
    238e:	46c0      	nop			; (mov r8, r8)
    2390:	00000000 	.word	0x00000000
    2394:	40240000 	.word	0x40240000
    2398:	0001bd69 	.word	0x0001bd69
    239c:	0001bb1d 	.word	0x0001bb1d
    23a0:	000203b5 	.word	0x000203b5
    23a4:	00022111 	.word	0x00022111
    23a8:	000220a9 	.word	0x000220a9
    23ac:	00019c71 	.word	0x00019c71
    23b0:	00020b55 	.word	0x00020b55
    23b4:	000221b5 	.word	0x000221b5
    23b8:	0001f79d 	.word	0x0001f79d
    23bc:	200006d8 	.word	0x200006d8
    23c0:	00022d20 	.word	0x00022d20
    23c4:	0001b899 	.word	0x0001b899
    23c8:	200005b4 	.word	0x200005b4
    23cc:	00022d3c 	.word	0x00022d3c
    23d0:	20000634 	.word	0x20000634
    23d4:	00022d50 	.word	0x00022d50
//------------------------------------------------------------------
// 5.x.x.x	write fan parameter
//------------------------------------------------------------------		
		case 5:
		{
			float dblValue = 0.0f;
    23d8:	2300      	movs	r3, #0
    23da:	21c8      	movs	r1, #200	; 0xc8
    23dc:	19c9      	adds	r1, r1, r7
    23de:	600b      	str	r3, [r1, #0]
			uint8_t nFracSize = 0;
    23e0:	1c3b      	adds	r3, r7, #0
    23e2:	33c7      	adds	r3, #199	; 0xc7
    23e4:	2200      	movs	r2, #0
    23e6:	701a      	strb	r2, [r3, #0]
			
			int nSetValue = (int)strtol((const char*)bCommand, NULL, 10);
    23e8:	1c3b      	adds	r3, r7, #0
    23ea:	331c      	adds	r3, #28
    23ec:	1c18      	adds	r0, r3, #0
    23ee:	2100      	movs	r1, #0
    23f0:	220a      	movs	r2, #10
    23f2:	4bbd      	ldr	r3, [pc, #756]	; (26e8 <STACK_SIZE+0x6e8>)
    23f4:	4798      	blx	r3
    23f6:	1c03      	adds	r3, r0, #0
    23f8:	22c0      	movs	r2, #192	; 0xc0
    23fa:	19d2      	adds	r2, r2, r7
    23fc:	6013      	str	r3, [r2, #0]
			int nParamValue = (int)strtol((const char*)bParam, NULL, 10) * nSign;
    23fe:	1c3b      	adds	r3, r7, #0
    2400:	330c      	adds	r3, #12
    2402:	1c18      	adds	r0, r3, #0
    2404:	2100      	movs	r1, #0
    2406:	220a      	movs	r2, #10
    2408:	4bb7      	ldr	r3, [pc, #732]	; (26e8 <STACK_SIZE+0x6e8>)
    240a:	4798      	blx	r3
    240c:	1c03      	adds	r3, r0, #0
    240e:	20ae      	movs	r0, #174	; 0xae
    2410:	0040      	lsls	r0, r0, #1
    2412:	19c0      	adds	r0, r0, r7
    2414:	6802      	ldr	r2, [r0, #0]
    2416:	4353      	muls	r3, r2
    2418:	21bc      	movs	r1, #188	; 0xbc
    241a:	19c9      	adds	r1, r1, r7
    241c:	600b      	str	r3, [r1, #0]
			int nFractionValue = (int)strtol((const char*)bFraction, NULL, 10) * nSign;
    241e:	1d3b      	adds	r3, r7, #4
    2420:	1c18      	adds	r0, r3, #0
    2422:	2100      	movs	r1, #0
    2424:	220a      	movs	r2, #10
    2426:	4bb0      	ldr	r3, [pc, #704]	; (26e8 <STACK_SIZE+0x6e8>)
    2428:	4798      	blx	r3
    242a:	1c03      	adds	r3, r0, #0
    242c:	20ae      	movs	r0, #174	; 0xae
    242e:	0040      	lsls	r0, r0, #1
    2430:	19c0      	adds	r0, r0, r7
    2432:	6802      	ldr	r2, [r0, #0]
    2434:	4353      	muls	r3, r2
    2436:	21b8      	movs	r1, #184	; 0xb8
    2438:	19c9      	adds	r1, r1, r7
    243a:	600b      	str	r3, [r1, #0]
			int nZone = 0;
    243c:	2300      	movs	r3, #0
    243e:	22b4      	movs	r2, #180	; 0xb4
    2440:	19d2      	adds	r2, r2, r7
    2442:	6013      	str	r3, [r2, #0]
			
			nFracSize = strlen(bFraction);
    2444:	1d3b      	adds	r3, r7, #4
    2446:	1c18      	adds	r0, r3, #0
    2448:	4ba8      	ldr	r3, [pc, #672]	; (26ec <STACK_SIZE+0x6ec>)
    244a:	4798      	blx	r3
    244c:	1c02      	adds	r2, r0, #0
    244e:	1c3b      	adds	r3, r7, #0
    2450:	33c7      	adds	r3, #199	; 0xc7
    2452:	701a      	strb	r2, [r3, #0]
			dblValue = (float)nParamValue + (float)((float)nFractionValue/(pow(10,nFracSize)));
    2454:	4ba6      	ldr	r3, [pc, #664]	; (26f0 <STACK_SIZE+0x6f0>)
    2456:	21bc      	movs	r1, #188	; 0xbc
    2458:	19c9      	adds	r1, r1, r7
    245a:	6808      	ldr	r0, [r1, #0]
    245c:	4798      	blx	r3
    245e:	4680      	mov	r8, r0
    2460:	4ba3      	ldr	r3, [pc, #652]	; (26f0 <STACK_SIZE+0x6f0>)
    2462:	22b8      	movs	r2, #184	; 0xb8
    2464:	19d2      	adds	r2, r2, r7
    2466:	6810      	ldr	r0, [r2, #0]
    2468:	4798      	blx	r3
    246a:	1c02      	adds	r2, r0, #0
    246c:	4ba1      	ldr	r3, [pc, #644]	; (26f4 <STACK_SIZE+0x6f4>)
    246e:	1c10      	adds	r0, r2, #0
    2470:	4798      	blx	r3
    2472:	1c05      	adds	r5, r0, #0
    2474:	1c0e      	adds	r6, r1, #0
    2476:	1c3b      	adds	r3, r7, #0
    2478:	33c7      	adds	r3, #199	; 0xc7
    247a:	781a      	ldrb	r2, [r3, #0]
    247c:	4b9e      	ldr	r3, [pc, #632]	; (26f8 <STACK_SIZE+0x6f8>)
    247e:	1c10      	adds	r0, r2, #0
    2480:	4798      	blx	r3
    2482:	1c03      	adds	r3, r0, #0
    2484:	1c0c      	adds	r4, r1, #0
    2486:	4a97      	ldr	r2, [pc, #604]	; (26e4 <STACK_SIZE+0x6e4>)
    2488:	4995      	ldr	r1, [pc, #596]	; (26e0 <STACK_SIZE+0x6e0>)
    248a:	1c08      	adds	r0, r1, #0
    248c:	1c11      	adds	r1, r2, #0
    248e:	1c1a      	adds	r2, r3, #0
    2490:	1c23      	adds	r3, r4, #0
    2492:	4c9a      	ldr	r4, [pc, #616]	; (26fc <STACK_SIZE+0x6fc>)
    2494:	47a0      	blx	r4
    2496:	1c03      	adds	r3, r0, #0
    2498:	1c0c      	adds	r4, r1, #0
    249a:	4899      	ldr	r0, [pc, #612]	; (2700 <STACK_SIZE+0x700>)
    249c:	4684      	mov	ip, r0
    249e:	1c28      	adds	r0, r5, #0
    24a0:	1c31      	adds	r1, r6, #0
    24a2:	1c1a      	adds	r2, r3, #0
    24a4:	1c23      	adds	r3, r4, #0
    24a6:	47e0      	blx	ip
    24a8:	1c03      	adds	r3, r0, #0
    24aa:	1c0c      	adds	r4, r1, #0
    24ac:	4a95      	ldr	r2, [pc, #596]	; (2704 <STACK_SIZE+0x704>)
    24ae:	1c18      	adds	r0, r3, #0
    24b0:	1c21      	adds	r1, r4, #0
    24b2:	4790      	blx	r2
    24b4:	1c02      	adds	r2, r0, #0
    24b6:	4b94      	ldr	r3, [pc, #592]	; (2708 <STACK_SIZE+0x708>)
    24b8:	4640      	mov	r0, r8
    24ba:	1c11      	adds	r1, r2, #0
    24bc:	4798      	blx	r3
    24be:	1c03      	adds	r3, r0, #0
    24c0:	21c8      	movs	r1, #200	; 0xc8
    24c2:	19c9      	adds	r1, r1, r7
    24c4:	600b      	str	r3, [r1, #0]

			if (nSetValue < (int)(sizeof(D20FAN) / sizeof(int)))
    24c6:	22c0      	movs	r2, #192	; 0xc0
    24c8:	19d2      	adds	r2, r2, r7
    24ca:	6813      	ldr	r3, [r2, #0]
    24cc:	2b0f      	cmp	r3, #15
    24ce:	dc14      	bgt.n	24fa <STACK_SIZE+0x4fa>
				if (nSetValue > 6)
				{
					nZone = 1;
				}
				*/
				fFan[nSetValue](dblValue, true, nZone);
    24d0:	4b8e      	ldr	r3, [pc, #568]	; (270c <STACK_SIZE+0x70c>)
    24d2:	20c0      	movs	r0, #192	; 0xc0
    24d4:	19c0      	adds	r0, r0, r7
    24d6:	6802      	ldr	r2, [r0, #0]
    24d8:	0092      	lsls	r2, r2, #2
    24da:	58d3      	ldr	r3, [r2, r3]
    24dc:	22c8      	movs	r2, #200	; 0xc8
    24de:	19d2      	adds	r2, r2, r7
    24e0:	6811      	ldr	r1, [r2, #0]
    24e2:	20b4      	movs	r0, #180	; 0xb4
    24e4:	19c0      	adds	r0, r0, r7
    24e6:	6802      	ldr	r2, [r0, #0]
    24e8:	1c08      	adds	r0, r1, #0
    24ea:	2101      	movs	r1, #1
    24ec:	4798      	blx	r3
				dbg("\n[fan parameter set]\n");
    24ee:	4b88      	ldr	r3, [pc, #544]	; (2710 <STACK_SIZE+0x710>)
    24f0:	1c18      	adds	r0, r3, #0
    24f2:	4b88      	ldr	r3, [pc, #544]	; (2714 <STACK_SIZE+0x714>)
    24f4:	4798      	blx	r3
			}
			break;
    24f6:	f001 faed 	bl	3ad4 <STACK_SIZE+0x1ad4>
    24fa:	f001 faeb 	bl	3ad4 <STACK_SIZE+0x1ad4>
		}		
		case 6:
		{
			switch (bCommand[0])
    24fe:	4b86      	ldr	r3, [pc, #536]	; (2718 <STACK_SIZE+0x718>)
    2500:	21b4      	movs	r1, #180	; 0xb4
    2502:	0049      	lsls	r1, r1, #1
    2504:	19c9      	adds	r1, r1, r7
    2506:	18cb      	adds	r3, r1, r3
    2508:	781b      	ldrb	r3, [r3, #0]
    250a:	3b30      	subs	r3, #48	; 0x30
    250c:	2b09      	cmp	r3, #9
    250e:	d900      	bls.n	2512 <STACK_SIZE+0x512>
    2510:	e3a0      	b.n	2c54 <STACK_SIZE+0xc54>
    2512:	009a      	lsls	r2, r3, #2
    2514:	4b81      	ldr	r3, [pc, #516]	; (271c <STACK_SIZE+0x71c>)
    2516:	18d3      	adds	r3, r2, r3
    2518:	681b      	ldr	r3, [r3, #0]
    251a:	469f      	mov	pc, r3
//------------------------------------------------------------------
// 6.0.x	enable/disable pid control
//------------------------------------------------------------------				
				case '0':
				//dbg("\PID loop control\n");
				result = ((bParam[0] - '0') != 0);
    251c:	4b80      	ldr	r3, [pc, #512]	; (2720 <STACK_SIZE+0x720>)
    251e:	22b4      	movs	r2, #180	; 0xb4
    2520:	0052      	lsls	r2, r2, #1
    2522:	19d2      	adds	r2, r2, r7
    2524:	18d3      	adds	r3, r2, r3
    2526:	781a      	ldrb	r2, [r3, #0]
    2528:	20a0      	movs	r0, #160	; 0xa0
    252a:	0040      	lsls	r0, r0, #1
    252c:	183b      	adds	r3, r7, r0
    252e:	3a30      	subs	r2, #48	; 0x30
    2530:	1e51      	subs	r1, r2, #1
    2532:	418a      	sbcs	r2, r1
    2534:	701a      	strb	r2, [r3, #0]
				//enableManualOverride = result;
				
				if (result)
    2536:	21a0      	movs	r1, #160	; 0xa0
    2538:	0049      	lsls	r1, r1, #1
    253a:	187b      	adds	r3, r7, r1
    253c:	781b      	ldrb	r3, [r3, #0]
    253e:	2b00      	cmp	r3, #0
    2540:	d00f      	beq.n	2562 <STACK_SIZE+0x562>
				{
					//pidLoop1.inAuto = false;
					chamber1.deactivateAutoControl = true;
    2542:	4a78      	ldr	r2, [pc, #480]	; (2724 <STACK_SIZE+0x724>)
    2544:	233d      	movs	r3, #61	; 0x3d
    2546:	2101      	movs	r1, #1
    2548:	54d1      	strb	r1, [r2, r3]
					chamber2.deactivateAutoControl = true;
    254a:	4a77      	ldr	r2, [pc, #476]	; (2728 <STACK_SIZE+0x728>)
    254c:	233d      	movs	r3, #61	; 0x3d
    254e:	2101      	movs	r1, #1
    2550:	54d1      	strb	r1, [r2, r3]
					enableSensorEDFI = false;
    2552:	4b76      	ldr	r3, [pc, #472]	; (272c <STACK_SIZE+0x72c>)
    2554:	2200      	movs	r2, #0
    2556:	701a      	strb	r2, [r3, #0]
					dbg("\n[pid override enabled]\n");
    2558:	4b75      	ldr	r3, [pc, #468]	; (2730 <STACK_SIZE+0x730>)
    255a:	1c18      	adds	r0, r3, #0
    255c:	4b6d      	ldr	r3, [pc, #436]	; (2714 <STACK_SIZE+0x714>)
    255e:	4798      	blx	r3
					chamber1.deactivateAutoControl = false;
					chamber2.deactivateAutoControl = false;
					enableSensorEDFI = true;
					dbg("\n[pid override disabled]\n");
				}
				break;
    2560:	e37d      	b.n	2c5e <STACK_SIZE+0xc5e>
					dbg("\n[pid override enabled]\n");
				}
				else
				{
					//pidLoop1.inAuto = true;
					chamber1.deactivateAutoControl = false;
    2562:	4a70      	ldr	r2, [pc, #448]	; (2724 <STACK_SIZE+0x724>)
    2564:	233d      	movs	r3, #61	; 0x3d
    2566:	2100      	movs	r1, #0
    2568:	54d1      	strb	r1, [r2, r3]
					chamber2.deactivateAutoControl = false;
    256a:	4a6f      	ldr	r2, [pc, #444]	; (2728 <STACK_SIZE+0x728>)
    256c:	233d      	movs	r3, #61	; 0x3d
    256e:	2100      	movs	r1, #0
    2570:	54d1      	strb	r1, [r2, r3]
					enableSensorEDFI = true;
    2572:	4b6e      	ldr	r3, [pc, #440]	; (272c <STACK_SIZE+0x72c>)
    2574:	2201      	movs	r2, #1
    2576:	701a      	strb	r2, [r3, #0]
					dbg("\n[pid override disabled]\n");
    2578:	4b6e      	ldr	r3, [pc, #440]	; (2734 <STACK_SIZE+0x734>)
    257a:	1c18      	adds	r0, r3, #0
    257c:	4b65      	ldr	r3, [pc, #404]	; (2714 <STACK_SIZE+0x714>)
    257e:	4798      	blx	r3
				}
				break;
    2580:	e36d      	b.n	2c5e <STACK_SIZE+0xc5e>
//------------------------------------------------------------------
// 6.1.x	enable/disable heater override
//------------------------------------------------------------------				
				case '1':
				result = ((bParam[0] - '0') != 0);
    2582:	4b67      	ldr	r3, [pc, #412]	; (2720 <STACK_SIZE+0x720>)
    2584:	22b4      	movs	r2, #180	; 0xb4
    2586:	0052      	lsls	r2, r2, #1
    2588:	19d2      	adds	r2, r2, r7
    258a:	18d3      	adds	r3, r2, r3
    258c:	781a      	ldrb	r2, [r3, #0]
    258e:	20a0      	movs	r0, #160	; 0xa0
    2590:	0040      	lsls	r0, r0, #1
    2592:	183b      	adds	r3, r7, r0
    2594:	3a30      	subs	r2, #48	; 0x30
    2596:	1e51      	subs	r1, r2, #1
    2598:	418a      	sbcs	r2, r1
    259a:	701a      	strb	r2, [r3, #0]
				if (result)
    259c:	21a0      	movs	r1, #160	; 0xa0
    259e:	0049      	lsls	r1, r1, #1
    25a0:	187b      	adds	r3, r7, r1
    25a2:	781b      	ldrb	r3, [r3, #0]
    25a4:	2b00      	cmp	r3, #0
    25a6:	d007      	beq.n	25b8 <STACK_SIZE+0x5b8>
				{
					deactivateAutoHeaterControl = true;
    25a8:	4b63      	ldr	r3, [pc, #396]	; (2738 <STACK_SIZE+0x738>)
    25aa:	2201      	movs	r2, #1
    25ac:	701a      	strb	r2, [r3, #0]
					dbg("\n[heater override enabled]\n");
    25ae:	4b63      	ldr	r3, [pc, #396]	; (273c <STACK_SIZE+0x73c>)
    25b0:	1c18      	adds	r0, r3, #0
    25b2:	4b58      	ldr	r3, [pc, #352]	; (2714 <STACK_SIZE+0x714>)
    25b4:	4798      	blx	r3
				else
				{
					deactivateAutoHeaterControl = false;
					dbg("\n[heater override disabled]\n");
				}
				break;
    25b6:	e352      	b.n	2c5e <STACK_SIZE+0xc5e>
					deactivateAutoHeaterControl = true;
					dbg("\n[heater override enabled]\n");
				}
				else
				{
					deactivateAutoHeaterControl = false;
    25b8:	4b5f      	ldr	r3, [pc, #380]	; (2738 <STACK_SIZE+0x738>)
    25ba:	2200      	movs	r2, #0
    25bc:	701a      	strb	r2, [r3, #0]
					dbg("\n[heater override disabled]\n");
    25be:	4b60      	ldr	r3, [pc, #384]	; (2740 <STACK_SIZE+0x740>)
    25c0:	1c18      	adds	r0, r3, #0
    25c2:	4b54      	ldr	r3, [pc, #336]	; (2714 <STACK_SIZE+0x714>)
    25c4:	4798      	blx	r3
				}
				break;
    25c6:	e34a      	b.n	2c5e <STACK_SIZE+0xc5e>
//------------------------------------------------------------------
// 6.2.x.x	write output voltage
//------------------------------------------------------------------				
				case '2':
				{
				float dblValue = 0.0f;
    25c8:	2300      	movs	r3, #0
    25ca:	22b0      	movs	r2, #176	; 0xb0
    25cc:	19d2      	adds	r2, r2, r7
    25ce:	6013      	str	r3, [r2, #0]
				uint8_t nFracSize = 0;
    25d0:	1c3b      	adds	r3, r7, #0
    25d2:	33af      	adds	r3, #175	; 0xaf
    25d4:	2200      	movs	r2, #0
    25d6:	701a      	strb	r2, [r3, #0]
				
				int nParamValue = (int)strtol((const char*)bParam, NULL, 10) * nSign;
    25d8:	1c3b      	adds	r3, r7, #0
    25da:	330c      	adds	r3, #12
    25dc:	1c18      	adds	r0, r3, #0
    25de:	2100      	movs	r1, #0
    25e0:	220a      	movs	r2, #10
    25e2:	4b41      	ldr	r3, [pc, #260]	; (26e8 <STACK_SIZE+0x6e8>)
    25e4:	4798      	blx	r3
    25e6:	1c03      	adds	r3, r0, #0
    25e8:	20ae      	movs	r0, #174	; 0xae
    25ea:	0040      	lsls	r0, r0, #1
    25ec:	19c0      	adds	r0, r0, r7
    25ee:	6802      	ldr	r2, [r0, #0]
    25f0:	4353      	muls	r3, r2
    25f2:	21a8      	movs	r1, #168	; 0xa8
    25f4:	19c9      	adds	r1, r1, r7
    25f6:	600b      	str	r3, [r1, #0]
				int nFractionValue = (int)strtol((const char*)bFraction, NULL, 10) * nSign;
    25f8:	1d3b      	adds	r3, r7, #4
    25fa:	1c18      	adds	r0, r3, #0
    25fc:	2100      	movs	r1, #0
    25fe:	220a      	movs	r2, #10
    2600:	4b39      	ldr	r3, [pc, #228]	; (26e8 <STACK_SIZE+0x6e8>)
    2602:	4798      	blx	r3
    2604:	1c03      	adds	r3, r0, #0
    2606:	20ae      	movs	r0, #174	; 0xae
    2608:	0040      	lsls	r0, r0, #1
    260a:	19c0      	adds	r0, r0, r7
    260c:	6802      	ldr	r2, [r0, #0]
    260e:	4353      	muls	r3, r2
    2610:	21a4      	movs	r1, #164	; 0xa4
    2612:	19c9      	adds	r1, r1, r7
    2614:	600b      	str	r3, [r1, #0]
				
				nFracSize = strlen(bFraction);
    2616:	1d3b      	adds	r3, r7, #4
    2618:	1c18      	adds	r0, r3, #0
    261a:	4b34      	ldr	r3, [pc, #208]	; (26ec <STACK_SIZE+0x6ec>)
    261c:	4798      	blx	r3
    261e:	1c02      	adds	r2, r0, #0
    2620:	1c3b      	adds	r3, r7, #0
    2622:	33af      	adds	r3, #175	; 0xaf
    2624:	701a      	strb	r2, [r3, #0]
				dblValue = (float)nParamValue + (float)((float)nFractionValue/(pow(10,nFracSize)));
    2626:	4b32      	ldr	r3, [pc, #200]	; (26f0 <STACK_SIZE+0x6f0>)
    2628:	22a8      	movs	r2, #168	; 0xa8
    262a:	19d2      	adds	r2, r2, r7
    262c:	6810      	ldr	r0, [r2, #0]
    262e:	4798      	blx	r3
    2630:	4680      	mov	r8, r0
    2632:	4b2f      	ldr	r3, [pc, #188]	; (26f0 <STACK_SIZE+0x6f0>)
    2634:	21a4      	movs	r1, #164	; 0xa4
    2636:	19c9      	adds	r1, r1, r7
    2638:	6808      	ldr	r0, [r1, #0]
    263a:	4798      	blx	r3
    263c:	1c02      	adds	r2, r0, #0
    263e:	4b2d      	ldr	r3, [pc, #180]	; (26f4 <STACK_SIZE+0x6f4>)
    2640:	1c10      	adds	r0, r2, #0
    2642:	4798      	blx	r3
    2644:	1c05      	adds	r5, r0, #0
    2646:	1c0e      	adds	r6, r1, #0
    2648:	1c3b      	adds	r3, r7, #0
    264a:	33af      	adds	r3, #175	; 0xaf
    264c:	781a      	ldrb	r2, [r3, #0]
    264e:	4b2a      	ldr	r3, [pc, #168]	; (26f8 <STACK_SIZE+0x6f8>)
    2650:	1c10      	adds	r0, r2, #0
    2652:	4798      	blx	r3
    2654:	1c03      	adds	r3, r0, #0
    2656:	1c0c      	adds	r4, r1, #0
    2658:	4a22      	ldr	r2, [pc, #136]	; (26e4 <STACK_SIZE+0x6e4>)
    265a:	4921      	ldr	r1, [pc, #132]	; (26e0 <STACK_SIZE+0x6e0>)
    265c:	1c08      	adds	r0, r1, #0
    265e:	1c11      	adds	r1, r2, #0
    2660:	1c1a      	adds	r2, r3, #0
    2662:	1c23      	adds	r3, r4, #0
    2664:	4c25      	ldr	r4, [pc, #148]	; (26fc <STACK_SIZE+0x6fc>)
    2666:	47a0      	blx	r4
    2668:	1c03      	adds	r3, r0, #0
    266a:	1c0c      	adds	r4, r1, #0
    266c:	4a24      	ldr	r2, [pc, #144]	; (2700 <STACK_SIZE+0x700>)
    266e:	4694      	mov	ip, r2
    2670:	1c28      	adds	r0, r5, #0
    2672:	1c31      	adds	r1, r6, #0
    2674:	1c1a      	adds	r2, r3, #0
    2676:	1c23      	adds	r3, r4, #0
    2678:	47e0      	blx	ip
    267a:	1c03      	adds	r3, r0, #0
    267c:	1c0c      	adds	r4, r1, #0
    267e:	4a21      	ldr	r2, [pc, #132]	; (2704 <STACK_SIZE+0x704>)
    2680:	1c18      	adds	r0, r3, #0
    2682:	1c21      	adds	r1, r4, #0
    2684:	4790      	blx	r2
    2686:	1c02      	adds	r2, r0, #0
    2688:	4b1f      	ldr	r3, [pc, #124]	; (2708 <STACK_SIZE+0x708>)
    268a:	4640      	mov	r0, r8
    268c:	1c11      	adds	r1, r2, #0
    268e:	4798      	blx	r3
    2690:	1c03      	adds	r3, r0, #0
    2692:	20b0      	movs	r0, #176	; 0xb0
    2694:	19c0      	adds	r0, r0, r7
    2696:	6003      	str	r3, [r0, #0]
				
				if (chamber1.deactivateAutoControl==true)//(pidLoop1.inAuto == false)
    2698:	4a22      	ldr	r2, [pc, #136]	; (2724 <STACK_SIZE+0x724>)
    269a:	233d      	movs	r3, #61	; 0x3d
    269c:	5cd3      	ldrb	r3, [r2, r3]
    269e:	2b00      	cmp	r3, #0
    26a0:	d01a      	beq.n	26d8 <STACK_SIZE+0x6d8>
				{
					pidLoop1.Output = dblValue;
    26a2:	4b28      	ldr	r3, [pc, #160]	; (2744 <STACK_SIZE+0x744>)
    26a4:	21b0      	movs	r1, #176	; 0xb0
    26a6:	19c9      	adds	r1, r1, r7
    26a8:	680a      	ldr	r2, [r1, #0]
    26aa:	621a      	str	r2, [r3, #32]
					set_setdesiredVoltage(dblValue, true, 0);
    26ac:	22b0      	movs	r2, #176	; 0xb0
    26ae:	19d2      	adds	r2, r2, r7
    26b0:	6813      	ldr	r3, [r2, #0]
    26b2:	1c18      	adds	r0, r3, #0
    26b4:	2101      	movs	r1, #1
    26b6:	2200      	movs	r2, #0
    26b8:	4b23      	ldr	r3, [pc, #140]	; (2748 <STACK_SIZE+0x748>)
    26ba:	4798      	blx	r3
					dbg_info("\n[ps output voltage set to %f]\n", dblValue);
    26bc:	4b0d      	ldr	r3, [pc, #52]	; (26f4 <STACK_SIZE+0x6f4>)
    26be:	21b0      	movs	r1, #176	; 0xb0
    26c0:	19c9      	adds	r1, r1, r7
    26c2:	6808      	ldr	r0, [r1, #0]
    26c4:	4798      	blx	r3
    26c6:	1c03      	adds	r3, r0, #0
    26c8:	1c0c      	adds	r4, r1, #0
    26ca:	4a20      	ldr	r2, [pc, #128]	; (274c <STACK_SIZE+0x74c>)
    26cc:	1c10      	adds	r0, r2, #0
    26ce:	1c1a      	adds	r2, r3, #0
    26d0:	1c23      	adds	r3, r4, #0
    26d2:	491f      	ldr	r1, [pc, #124]	; (2750 <STACK_SIZE+0x750>)
    26d4:	4788      	blx	r1
				}
				break;
    26d6:	e2c2      	b.n	2c5e <STACK_SIZE+0xc5e>
    26d8:	e2c1      	b.n	2c5e <STACK_SIZE+0xc5e>
    26da:	46c0      	nop			; (mov r8, r8)
    26dc:	46c0      	nop			; (mov r8, r8)
    26de:	46c0      	nop			; (mov r8, r8)
    26e0:	00000000 	.word	0x00000000
    26e4:	40240000 	.word	0x40240000
    26e8:	0001bd69 	.word	0x0001bd69
    26ec:	0001bb1d 	.word	0x0001bb1d
    26f0:	000203b5 	.word	0x000203b5
    26f4:	00022111 	.word	0x00022111
    26f8:	000220a9 	.word	0x000220a9
    26fc:	00019c71 	.word	0x00019c71
    2700:	00020b55 	.word	0x00020b55
    2704:	000221b5 	.word	0x000221b5
    2708:	0001f79d 	.word	0x0001f79d
    270c:	20000758 	.word	0x20000758
    2710:	00022d68 	.word	0x00022d68
    2714:	0001b899 	.word	0x0001b899
    2718:	fffffeb4 	.word	0xfffffeb4
    271c:	000232f0 	.word	0x000232f0
    2720:	fffffea4 	.word	0xfffffea4
    2724:	200009b8 	.word	0x200009b8
    2728:	20000960 	.word	0x20000960
    272c:	20000378 	.word	0x20000378
    2730:	00022d80 	.word	0x00022d80
    2734:	00022d98 	.word	0x00022d98
    2738:	20000376 	.word	0x20000376
    273c:	00022db4 	.word	0x00022db4
    2740:	00022dd0 	.word	0x00022dd0
    2744:	20000e10 	.word	0x20000e10
    2748:	000002bd 	.word	0x000002bd
    274c:	00022dec 	.word	0x00022dec
    2750:	0001b62d 	.word	0x0001b62d
//------------------------------------------------------------------
// 6.4.x	write chamber thermistor beta
//------------------------------------------------------------------				
				case '4':
				{
				float dblValue = 0.0f;
    2754:	2300      	movs	r3, #0
    2756:	22a0      	movs	r2, #160	; 0xa0
    2758:	19d2      	adds	r2, r2, r7
    275a:	6013      	str	r3, [r2, #0]
				uint8_t nFracSize = 0;
    275c:	1c3b      	adds	r3, r7, #0
    275e:	339f      	adds	r3, #159	; 0x9f
    2760:	2200      	movs	r2, #0
    2762:	701a      	strb	r2, [r3, #0]
				
				int nParamValue = (int)strtol((const char*)bParam, NULL, 10) * nSign;
    2764:	1c3b      	adds	r3, r7, #0
    2766:	330c      	adds	r3, #12
    2768:	1c18      	adds	r0, r3, #0
    276a:	2100      	movs	r1, #0
    276c:	220a      	movs	r2, #10
    276e:	4bc2      	ldr	r3, [pc, #776]	; (2a78 <STACK_SIZE+0xa78>)
    2770:	4798      	blx	r3
    2772:	1c03      	adds	r3, r0, #0
    2774:	20ae      	movs	r0, #174	; 0xae
    2776:	0040      	lsls	r0, r0, #1
    2778:	19c0      	adds	r0, r0, r7
    277a:	6802      	ldr	r2, [r0, #0]
    277c:	4353      	muls	r3, r2
    277e:	2198      	movs	r1, #152	; 0x98
    2780:	19c9      	adds	r1, r1, r7
    2782:	600b      	str	r3, [r1, #0]
				int nFractionValue = (int)strtol((const char*)bFraction, NULL, 10) * nSign;
    2784:	1d3b      	adds	r3, r7, #4
    2786:	1c18      	adds	r0, r3, #0
    2788:	2100      	movs	r1, #0
    278a:	220a      	movs	r2, #10
    278c:	4bba      	ldr	r3, [pc, #744]	; (2a78 <STACK_SIZE+0xa78>)
    278e:	4798      	blx	r3
    2790:	1c03      	adds	r3, r0, #0
    2792:	20ae      	movs	r0, #174	; 0xae
    2794:	0040      	lsls	r0, r0, #1
    2796:	19c0      	adds	r0, r0, r7
    2798:	6802      	ldr	r2, [r0, #0]
    279a:	4353      	muls	r3, r2
    279c:	2194      	movs	r1, #148	; 0x94
    279e:	19c9      	adds	r1, r1, r7
    27a0:	600b      	str	r3, [r1, #0]
				
				nFracSize = strlen(bFraction);
    27a2:	1d3b      	adds	r3, r7, #4
    27a4:	1c18      	adds	r0, r3, #0
    27a6:	4bb5      	ldr	r3, [pc, #724]	; (2a7c <STACK_SIZE+0xa7c>)
    27a8:	4798      	blx	r3
    27aa:	1c02      	adds	r2, r0, #0
    27ac:	1c3b      	adds	r3, r7, #0
    27ae:	339f      	adds	r3, #159	; 0x9f
    27b0:	701a      	strb	r2, [r3, #0]
				dblValue = (float)nParamValue + (float)((float)nFractionValue/(pow(10,nFracSize)));
    27b2:	4bb3      	ldr	r3, [pc, #716]	; (2a80 <STACK_SIZE+0xa80>)
    27b4:	2298      	movs	r2, #152	; 0x98
    27b6:	19d2      	adds	r2, r2, r7
    27b8:	6810      	ldr	r0, [r2, #0]
    27ba:	4798      	blx	r3
    27bc:	4680      	mov	r8, r0
    27be:	4bb0      	ldr	r3, [pc, #704]	; (2a80 <STACK_SIZE+0xa80>)
    27c0:	2194      	movs	r1, #148	; 0x94
    27c2:	19c9      	adds	r1, r1, r7
    27c4:	6808      	ldr	r0, [r1, #0]
    27c6:	4798      	blx	r3
    27c8:	1c02      	adds	r2, r0, #0
    27ca:	4bae      	ldr	r3, [pc, #696]	; (2a84 <STACK_SIZE+0xa84>)
    27cc:	1c10      	adds	r0, r2, #0
    27ce:	4798      	blx	r3
    27d0:	1c05      	adds	r5, r0, #0
    27d2:	1c0e      	adds	r6, r1, #0
    27d4:	1c3b      	adds	r3, r7, #0
    27d6:	339f      	adds	r3, #159	; 0x9f
    27d8:	781a      	ldrb	r2, [r3, #0]
    27da:	4bab      	ldr	r3, [pc, #684]	; (2a88 <STACK_SIZE+0xa88>)
    27dc:	1c10      	adds	r0, r2, #0
    27de:	4798      	blx	r3
    27e0:	1c03      	adds	r3, r0, #0
    27e2:	1c0c      	adds	r4, r1, #0
    27e4:	4aa3      	ldr	r2, [pc, #652]	; (2a74 <STACK_SIZE+0xa74>)
    27e6:	49a2      	ldr	r1, [pc, #648]	; (2a70 <STACK_SIZE+0xa70>)
    27e8:	1c08      	adds	r0, r1, #0
    27ea:	1c11      	adds	r1, r2, #0
    27ec:	1c1a      	adds	r2, r3, #0
    27ee:	1c23      	adds	r3, r4, #0
    27f0:	4ca6      	ldr	r4, [pc, #664]	; (2a8c <STACK_SIZE+0xa8c>)
    27f2:	47a0      	blx	r4
    27f4:	1c03      	adds	r3, r0, #0
    27f6:	1c0c      	adds	r4, r1, #0
    27f8:	4aa5      	ldr	r2, [pc, #660]	; (2a90 <STACK_SIZE+0xa90>)
    27fa:	4694      	mov	ip, r2
    27fc:	1c28      	adds	r0, r5, #0
    27fe:	1c31      	adds	r1, r6, #0
    2800:	1c1a      	adds	r2, r3, #0
    2802:	1c23      	adds	r3, r4, #0
    2804:	47e0      	blx	ip
    2806:	1c03      	adds	r3, r0, #0
    2808:	1c0c      	adds	r4, r1, #0
    280a:	4aa2      	ldr	r2, [pc, #648]	; (2a94 <STACK_SIZE+0xa94>)
    280c:	1c18      	adds	r0, r3, #0
    280e:	1c21      	adds	r1, r4, #0
    2810:	4790      	blx	r2
    2812:	1c02      	adds	r2, r0, #0
    2814:	4ba0      	ldr	r3, [pc, #640]	; (2a98 <STACK_SIZE+0xa98>)
    2816:	4640      	mov	r0, r8
    2818:	1c11      	adds	r1, r2, #0
    281a:	4798      	blx	r3
    281c:	1c03      	adds	r3, r0, #0
    281e:	20a0      	movs	r0, #160	; 0xa0
    2820:	19c0      	adds	r0, r0, r7
    2822:	6003      	str	r3, [r0, #0]
				chamberThermistorBeta = (uint16_t)dblValue;	
    2824:	4b9d      	ldr	r3, [pc, #628]	; (2a9c <STACK_SIZE+0xa9c>)
    2826:	21a0      	movs	r1, #160	; 0xa0
    2828:	19c9      	adds	r1, r1, r7
    282a:	6808      	ldr	r0, [r1, #0]
    282c:	4798      	blx	r3
    282e:	1c03      	adds	r3, r0, #0
    2830:	b29a      	uxth	r2, r3
    2832:	4b9b      	ldr	r3, [pc, #620]	; (2aa0 <STACK_SIZE+0xaa0>)
    2834:	801a      	strh	r2, [r3, #0]
				dbg_info("\n[chamberThermistorBeta set to %d]\n", chamberThermistorBeta);
    2836:	4b9a      	ldr	r3, [pc, #616]	; (2aa0 <STACK_SIZE+0xaa0>)
    2838:	881b      	ldrh	r3, [r3, #0]
    283a:	4a9a      	ldr	r2, [pc, #616]	; (2aa4 <STACK_SIZE+0xaa4>)
    283c:	1c10      	adds	r0, r2, #0
    283e:	1c19      	adds	r1, r3, #0
    2840:	4b99      	ldr	r3, [pc, #612]	; (2aa8 <STACK_SIZE+0xaa8>)
    2842:	4798      	blx	r3
				writeToEepromFlag = true;
    2844:	4b99      	ldr	r3, [pc, #612]	; (2aac <STACK_SIZE+0xaac>)
    2846:	2201      	movs	r2, #1
    2848:	701a      	strb	r2, [r3, #0]
				eepromDataInfo.pAddr = &chamberThermistorBeta;
    284a:	4b99      	ldr	r3, [pc, #612]	; (2ab0 <STACK_SIZE+0xab0>)
    284c:	4a94      	ldr	r2, [pc, #592]	; (2aa0 <STACK_SIZE+0xaa0>)
    284e:	601a      	str	r2, [r3, #0]
				eepromDataInfo.size = sizeof(chamberThermistorBeta);
    2850:	4b97      	ldr	r3, [pc, #604]	; (2ab0 <STACK_SIZE+0xab0>)
    2852:	2202      	movs	r2, #2
    2854:	711a      	strb	r2, [r3, #4]
				eepromDataInfo.nonvolatileFlag = true;					
    2856:	4b96      	ldr	r3, [pc, #600]	; (2ab0 <STACK_SIZE+0xab0>)
    2858:	2201      	movs	r2, #1
    285a:	715a      	strb	r2, [r3, #5]
				break;			
    285c:	e1ff      	b.n	2c5e <STACK_SIZE+0xc5e>
//------------------------------------------------------------------
// 6.5.x	write reject thermistor beta
//------------------------------------------------------------------				
				case '5':
				{
				float dblValue = 0.0f;
    285e:	2300      	movs	r3, #0
    2860:	2290      	movs	r2, #144	; 0x90
    2862:	19d2      	adds	r2, r2, r7
    2864:	6013      	str	r3, [r2, #0]
				uint8_t nFracSize = 0;
    2866:	1c3b      	adds	r3, r7, #0
    2868:	338f      	adds	r3, #143	; 0x8f
    286a:	2200      	movs	r2, #0
    286c:	701a      	strb	r2, [r3, #0]
					
				int nParamValue = (int)strtol((const char*)bParam, NULL, 10) * nSign;
    286e:	1c3b      	adds	r3, r7, #0
    2870:	330c      	adds	r3, #12
    2872:	1c18      	adds	r0, r3, #0
    2874:	2100      	movs	r1, #0
    2876:	220a      	movs	r2, #10
    2878:	4b7f      	ldr	r3, [pc, #508]	; (2a78 <STACK_SIZE+0xa78>)
    287a:	4798      	blx	r3
    287c:	1c03      	adds	r3, r0, #0
    287e:	20ae      	movs	r0, #174	; 0xae
    2880:	0040      	lsls	r0, r0, #1
    2882:	19c0      	adds	r0, r0, r7
    2884:	6802      	ldr	r2, [r0, #0]
    2886:	4353      	muls	r3, r2
    2888:	2188      	movs	r1, #136	; 0x88
    288a:	19c9      	adds	r1, r1, r7
    288c:	600b      	str	r3, [r1, #0]
				int nFractionValue = (int)strtol((const char*)bFraction, NULL, 10) * nSign;
    288e:	1d3b      	adds	r3, r7, #4
    2890:	1c18      	adds	r0, r3, #0
    2892:	2100      	movs	r1, #0
    2894:	220a      	movs	r2, #10
    2896:	4b78      	ldr	r3, [pc, #480]	; (2a78 <STACK_SIZE+0xa78>)
    2898:	4798      	blx	r3
    289a:	1c03      	adds	r3, r0, #0
    289c:	20ae      	movs	r0, #174	; 0xae
    289e:	0040      	lsls	r0, r0, #1
    28a0:	19c0      	adds	r0, r0, r7
    28a2:	6802      	ldr	r2, [r0, #0]
    28a4:	4353      	muls	r3, r2
    28a6:	2184      	movs	r1, #132	; 0x84
    28a8:	19c9      	adds	r1, r1, r7
    28aa:	600b      	str	r3, [r1, #0]
					
				nFracSize = strlen(bFraction);
    28ac:	1d3b      	adds	r3, r7, #4
    28ae:	1c18      	adds	r0, r3, #0
    28b0:	4b72      	ldr	r3, [pc, #456]	; (2a7c <STACK_SIZE+0xa7c>)
    28b2:	4798      	blx	r3
    28b4:	1c02      	adds	r2, r0, #0
    28b6:	1c3b      	adds	r3, r7, #0
    28b8:	338f      	adds	r3, #143	; 0x8f
    28ba:	701a      	strb	r2, [r3, #0]
				dblValue = (float)nParamValue + (float)((float)nFractionValue/(pow(10,nFracSize)));
    28bc:	4b70      	ldr	r3, [pc, #448]	; (2a80 <STACK_SIZE+0xa80>)
    28be:	2288      	movs	r2, #136	; 0x88
    28c0:	19d2      	adds	r2, r2, r7
    28c2:	6810      	ldr	r0, [r2, #0]
    28c4:	4798      	blx	r3
    28c6:	4680      	mov	r8, r0
    28c8:	4b6d      	ldr	r3, [pc, #436]	; (2a80 <STACK_SIZE+0xa80>)
    28ca:	2184      	movs	r1, #132	; 0x84
    28cc:	19c9      	adds	r1, r1, r7
    28ce:	6808      	ldr	r0, [r1, #0]
    28d0:	4798      	blx	r3
    28d2:	1c02      	adds	r2, r0, #0
    28d4:	4b6b      	ldr	r3, [pc, #428]	; (2a84 <STACK_SIZE+0xa84>)
    28d6:	1c10      	adds	r0, r2, #0
    28d8:	4798      	blx	r3
    28da:	1c05      	adds	r5, r0, #0
    28dc:	1c0e      	adds	r6, r1, #0
    28de:	1c3b      	adds	r3, r7, #0
    28e0:	338f      	adds	r3, #143	; 0x8f
    28e2:	781a      	ldrb	r2, [r3, #0]
    28e4:	4b68      	ldr	r3, [pc, #416]	; (2a88 <STACK_SIZE+0xa88>)
    28e6:	1c10      	adds	r0, r2, #0
    28e8:	4798      	blx	r3
    28ea:	1c03      	adds	r3, r0, #0
    28ec:	1c0c      	adds	r4, r1, #0
    28ee:	4a61      	ldr	r2, [pc, #388]	; (2a74 <STACK_SIZE+0xa74>)
    28f0:	495f      	ldr	r1, [pc, #380]	; (2a70 <STACK_SIZE+0xa70>)
    28f2:	1c08      	adds	r0, r1, #0
    28f4:	1c11      	adds	r1, r2, #0
    28f6:	1c1a      	adds	r2, r3, #0
    28f8:	1c23      	adds	r3, r4, #0
    28fa:	4c64      	ldr	r4, [pc, #400]	; (2a8c <STACK_SIZE+0xa8c>)
    28fc:	47a0      	blx	r4
    28fe:	1c03      	adds	r3, r0, #0
    2900:	1c0c      	adds	r4, r1, #0
    2902:	4a63      	ldr	r2, [pc, #396]	; (2a90 <STACK_SIZE+0xa90>)
    2904:	4694      	mov	ip, r2
    2906:	1c28      	adds	r0, r5, #0
    2908:	1c31      	adds	r1, r6, #0
    290a:	1c1a      	adds	r2, r3, #0
    290c:	1c23      	adds	r3, r4, #0
    290e:	47e0      	blx	ip
    2910:	1c03      	adds	r3, r0, #0
    2912:	1c0c      	adds	r4, r1, #0
    2914:	4a5f      	ldr	r2, [pc, #380]	; (2a94 <STACK_SIZE+0xa94>)
    2916:	1c18      	adds	r0, r3, #0
    2918:	1c21      	adds	r1, r4, #0
    291a:	4790      	blx	r2
    291c:	1c02      	adds	r2, r0, #0
    291e:	4b5e      	ldr	r3, [pc, #376]	; (2a98 <STACK_SIZE+0xa98>)
    2920:	4640      	mov	r0, r8
    2922:	1c11      	adds	r1, r2, #0
    2924:	4798      	blx	r3
    2926:	1c03      	adds	r3, r0, #0
    2928:	2090      	movs	r0, #144	; 0x90
    292a:	19c0      	adds	r0, r0, r7
    292c:	6003      	str	r3, [r0, #0]
				rejectThermistorBeta = (uint16_t)dblValue;
    292e:	4b5b      	ldr	r3, [pc, #364]	; (2a9c <STACK_SIZE+0xa9c>)
    2930:	2190      	movs	r1, #144	; 0x90
    2932:	19c9      	adds	r1, r1, r7
    2934:	6808      	ldr	r0, [r1, #0]
    2936:	4798      	blx	r3
    2938:	1c03      	adds	r3, r0, #0
    293a:	b29a      	uxth	r2, r3
    293c:	4b5d      	ldr	r3, [pc, #372]	; (2ab4 <STACK_SIZE+0xab4>)
    293e:	801a      	strh	r2, [r3, #0]
				dbg_info("\n[rejectThermistorBeta set to %d]\n", rejectThermistorBeta);
    2940:	4b5c      	ldr	r3, [pc, #368]	; (2ab4 <STACK_SIZE+0xab4>)
    2942:	881b      	ldrh	r3, [r3, #0]
    2944:	4a5c      	ldr	r2, [pc, #368]	; (2ab8 <STACK_SIZE+0xab8>)
    2946:	1c10      	adds	r0, r2, #0
    2948:	1c19      	adds	r1, r3, #0
    294a:	4b57      	ldr	r3, [pc, #348]	; (2aa8 <STACK_SIZE+0xaa8>)
    294c:	4798      	blx	r3
				writeToEepromFlag = true;
    294e:	4b57      	ldr	r3, [pc, #348]	; (2aac <STACK_SIZE+0xaac>)
    2950:	2201      	movs	r2, #1
    2952:	701a      	strb	r2, [r3, #0]
				eepromDataInfo.pAddr = &rejectThermistorBeta;
    2954:	4b56      	ldr	r3, [pc, #344]	; (2ab0 <STACK_SIZE+0xab0>)
    2956:	4a57      	ldr	r2, [pc, #348]	; (2ab4 <STACK_SIZE+0xab4>)
    2958:	601a      	str	r2, [r3, #0]
				eepromDataInfo.size = sizeof(rejectThermistorBeta);
    295a:	4b55      	ldr	r3, [pc, #340]	; (2ab0 <STACK_SIZE+0xab0>)
    295c:	2202      	movs	r2, #2
    295e:	711a      	strb	r2, [r3, #4]
				eepromDataInfo.nonvolatileFlag = true;
    2960:	4b53      	ldr	r3, [pc, #332]	; (2ab0 <STACK_SIZE+0xab0>)
    2962:	2201      	movs	r2, #1
    2964:	715a      	strb	r2, [r3, #5]
				break;
    2966:	e17a      	b.n	2c5e <STACK_SIZE+0xc5e>
// 6.6.x	set condensate tray heater pwm duty
//------------------------------------------------------------------				
				case '6':
				{
				//result = ((bParam[0] - '0') != 0);
				float dblValue = 0.0f;
    2968:	2300      	movs	r3, #0
    296a:	2280      	movs	r2, #128	; 0x80
    296c:	19d2      	adds	r2, r2, r7
    296e:	6013      	str	r3, [r2, #0]
				uint8_t nFracSize = 0;
    2970:	1c3b      	adds	r3, r7, #0
    2972:	337f      	adds	r3, #127	; 0x7f
    2974:	2200      	movs	r2, #0
    2976:	701a      	strb	r2, [r3, #0]
				
				int nParamValue = (int)strtol((const char*)bParam, NULL, 10) * nSign;
    2978:	1c3b      	adds	r3, r7, #0
    297a:	330c      	adds	r3, #12
    297c:	1c18      	adds	r0, r3, #0
    297e:	2100      	movs	r1, #0
    2980:	220a      	movs	r2, #10
    2982:	4b3d      	ldr	r3, [pc, #244]	; (2a78 <STACK_SIZE+0xa78>)
    2984:	4798      	blx	r3
    2986:	1c03      	adds	r3, r0, #0
    2988:	20ae      	movs	r0, #174	; 0xae
    298a:	0040      	lsls	r0, r0, #1
    298c:	19c0      	adds	r0, r0, r7
    298e:	6802      	ldr	r2, [r0, #0]
    2990:	4353      	muls	r3, r2
    2992:	67bb      	str	r3, [r7, #120]	; 0x78
				int nFractionValue = (int)strtol((const char*)bFraction, NULL, 10) * nSign;
    2994:	1d3b      	adds	r3, r7, #4
    2996:	1c18      	adds	r0, r3, #0
    2998:	2100      	movs	r1, #0
    299a:	220a      	movs	r2, #10
    299c:	4b36      	ldr	r3, [pc, #216]	; (2a78 <STACK_SIZE+0xa78>)
    299e:	4798      	blx	r3
    29a0:	1c03      	adds	r3, r0, #0
    29a2:	21ae      	movs	r1, #174	; 0xae
    29a4:	0049      	lsls	r1, r1, #1
    29a6:	19c9      	adds	r1, r1, r7
    29a8:	680a      	ldr	r2, [r1, #0]
    29aa:	4353      	muls	r3, r2
    29ac:	677b      	str	r3, [r7, #116]	; 0x74
				
				nFracSize = strlen(bFraction);
    29ae:	1d3b      	adds	r3, r7, #4
    29b0:	1c18      	adds	r0, r3, #0
    29b2:	4b32      	ldr	r3, [pc, #200]	; (2a7c <STACK_SIZE+0xa7c>)
    29b4:	4798      	blx	r3
    29b6:	1c02      	adds	r2, r0, #0
    29b8:	1c3b      	adds	r3, r7, #0
    29ba:	337f      	adds	r3, #127	; 0x7f
    29bc:	701a      	strb	r2, [r3, #0]
				dblValue = (float)nParamValue + (float)((float)nFractionValue/(pow(10,nFracSize)));
    29be:	4b30      	ldr	r3, [pc, #192]	; (2a80 <STACK_SIZE+0xa80>)
    29c0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
    29c2:	4798      	blx	r3
    29c4:	4680      	mov	r8, r0
    29c6:	4b2e      	ldr	r3, [pc, #184]	; (2a80 <STACK_SIZE+0xa80>)
    29c8:	6f78      	ldr	r0, [r7, #116]	; 0x74
    29ca:	4798      	blx	r3
    29cc:	1c02      	adds	r2, r0, #0
    29ce:	4b2d      	ldr	r3, [pc, #180]	; (2a84 <STACK_SIZE+0xa84>)
    29d0:	1c10      	adds	r0, r2, #0
    29d2:	4798      	blx	r3
    29d4:	1c05      	adds	r5, r0, #0
    29d6:	1c0e      	adds	r6, r1, #0
    29d8:	1c3b      	adds	r3, r7, #0
    29da:	337f      	adds	r3, #127	; 0x7f
    29dc:	781a      	ldrb	r2, [r3, #0]
    29de:	4b2a      	ldr	r3, [pc, #168]	; (2a88 <STACK_SIZE+0xa88>)
    29e0:	1c10      	adds	r0, r2, #0
    29e2:	4798      	blx	r3
    29e4:	1c03      	adds	r3, r0, #0
    29e6:	1c0c      	adds	r4, r1, #0
    29e8:	4a22      	ldr	r2, [pc, #136]	; (2a74 <STACK_SIZE+0xa74>)
    29ea:	4921      	ldr	r1, [pc, #132]	; (2a70 <STACK_SIZE+0xa70>)
    29ec:	1c08      	adds	r0, r1, #0
    29ee:	1c11      	adds	r1, r2, #0
    29f0:	1c1a      	adds	r2, r3, #0
    29f2:	1c23      	adds	r3, r4, #0
    29f4:	4c25      	ldr	r4, [pc, #148]	; (2a8c <STACK_SIZE+0xa8c>)
    29f6:	47a0      	blx	r4
    29f8:	1c03      	adds	r3, r0, #0
    29fa:	1c0c      	adds	r4, r1, #0
    29fc:	4a24      	ldr	r2, [pc, #144]	; (2a90 <STACK_SIZE+0xa90>)
    29fe:	4694      	mov	ip, r2
    2a00:	1c28      	adds	r0, r5, #0
    2a02:	1c31      	adds	r1, r6, #0
    2a04:	1c1a      	adds	r2, r3, #0
    2a06:	1c23      	adds	r3, r4, #0
    2a08:	47e0      	blx	ip
    2a0a:	1c03      	adds	r3, r0, #0
    2a0c:	1c0c      	adds	r4, r1, #0
    2a0e:	4a21      	ldr	r2, [pc, #132]	; (2a94 <STACK_SIZE+0xa94>)
    2a10:	1c18      	adds	r0, r3, #0
    2a12:	1c21      	adds	r1, r4, #0
    2a14:	4790      	blx	r2
    2a16:	1c02      	adds	r2, r0, #0
    2a18:	4b1f      	ldr	r3, [pc, #124]	; (2a98 <STACK_SIZE+0xa98>)
    2a1a:	4640      	mov	r0, r8
    2a1c:	1c11      	adds	r1, r2, #0
    2a1e:	4798      	blx	r3
    2a20:	1c03      	adds	r3, r0, #0
    2a22:	2080      	movs	r0, #128	; 0x80
    2a24:	19c0      	adds	r0, r0, r7
    2a26:	6003      	str	r3, [r0, #0]

				if (deactivateAutoHeaterControl==true)
    2a28:	4b24      	ldr	r3, [pc, #144]	; (2abc <STACK_SIZE+0xabc>)
    2a2a:	781b      	ldrb	r3, [r3, #0]
    2a2c:	2b00      	cmp	r3, #0
    2a2e:	d018      	beq.n	2a62 <STACK_SIZE+0xa62>
				{
					setHeaterState(&condHeater, (uint8_t)dblValue);
    2a30:	4b1a      	ldr	r3, [pc, #104]	; (2a9c <STACK_SIZE+0xa9c>)
    2a32:	2180      	movs	r1, #128	; 0x80
    2a34:	19c9      	adds	r1, r1, r7
    2a36:	6808      	ldr	r0, [r1, #0]
    2a38:	4798      	blx	r3
    2a3a:	1c03      	adds	r3, r0, #0
    2a3c:	b2db      	uxtb	r3, r3
    2a3e:	4a20      	ldr	r2, [pc, #128]	; (2ac0 <STACK_SIZE+0xac0>)
    2a40:	1c10      	adds	r0, r2, #0
    2a42:	1c19      	adds	r1, r3, #0
    2a44:	4b1f      	ldr	r3, [pc, #124]	; (2ac4 <STACK_SIZE+0xac4>)
    2a46:	4798      	blx	r3
					dbg_info("\n[cond heater enabled at %d%%]\n", (uint8_t)dblValue);
    2a48:	4b14      	ldr	r3, [pc, #80]	; (2a9c <STACK_SIZE+0xa9c>)
    2a4a:	2280      	movs	r2, #128	; 0x80
    2a4c:	19d2      	adds	r2, r2, r7
    2a4e:	6810      	ldr	r0, [r2, #0]
    2a50:	4798      	blx	r3
    2a52:	1c03      	adds	r3, r0, #0
    2a54:	b2db      	uxtb	r3, r3
    2a56:	4a1c      	ldr	r2, [pc, #112]	; (2ac8 <STACK_SIZE+0xac8>)
    2a58:	1c10      	adds	r0, r2, #0
    2a5a:	1c19      	adds	r1, r3, #0
    2a5c:	4b12      	ldr	r3, [pc, #72]	; (2aa8 <STACK_SIZE+0xaa8>)
    2a5e:	4798      	blx	r3
				}
				else
				{
					dbg("\nno action\n");
				}					
				break;	
    2a60:	e0fd      	b.n	2c5e <STACK_SIZE+0xc5e>
					setHeaterState(&condHeater, (uint8_t)dblValue);
					dbg_info("\n[cond heater enabled at %d%%]\n", (uint8_t)dblValue);
				}
				else
				{
					dbg("\nno action\n");
    2a62:	4b1a      	ldr	r3, [pc, #104]	; (2acc <STACK_SIZE+0xacc>)
    2a64:	1c18      	adds	r0, r3, #0
    2a66:	4b1a      	ldr	r3, [pc, #104]	; (2ad0 <STACK_SIZE+0xad0>)
    2a68:	4798      	blx	r3
				}					
				break;	
    2a6a:	e0f8      	b.n	2c5e <STACK_SIZE+0xc5e>
    2a6c:	46c0      	nop			; (mov r8, r8)
    2a6e:	46c0      	nop			; (mov r8, r8)
    2a70:	00000000 	.word	0x00000000
    2a74:	40240000 	.word	0x40240000
    2a78:	0001bd69 	.word	0x0001bd69
    2a7c:	0001bb1d 	.word	0x0001bb1d
    2a80:	000203b5 	.word	0x000203b5
    2a84:	00022111 	.word	0x00022111
    2a88:	000220a9 	.word	0x000220a9
    2a8c:	00019c71 	.word	0x00019c71
    2a90:	00020b55 	.word	0x00020b55
    2a94:	000221b5 	.word	0x000221b5
    2a98:	0001f79d 	.word	0x0001f79d
    2a9c:	0001f6bd 	.word	0x0001f6bd
    2aa0:	2000018c 	.word	0x2000018c
    2aa4:	00022e0c 	.word	0x00022e0c
    2aa8:	0001b62d 	.word	0x0001b62d
    2aac:	200002f4 	.word	0x200002f4
    2ab0:	200008dc 	.word	0x200008dc
    2ab4:	2000018e 	.word	0x2000018e
    2ab8:	00022e30 	.word	0x00022e30
    2abc:	20000376 	.word	0x20000376
    2ac0:	20000ed4 	.word	0x20000ed4
    2ac4:	00007275 	.word	0x00007275
    2ac8:	00022e54 	.word	0x00022e54
    2acc:	00022e74 	.word	0x00022e74
    2ad0:	0001b899 	.word	0x0001b899
// 6.7.x	set door frame heater pwm duty
//------------------------------------------------------------------				
				case '7':
				{
				//result = ((bParam[0] - '0') != 0);
				float dblValue = 0.0f;
    2ad4:	2300      	movs	r3, #0
    2ad6:	673b      	str	r3, [r7, #112]	; 0x70
				uint8_t nFracSize = 0;
    2ad8:	1c3b      	adds	r3, r7, #0
    2ada:	336f      	adds	r3, #111	; 0x6f
    2adc:	2200      	movs	r2, #0
    2ade:	701a      	strb	r2, [r3, #0]
				
				int nParamValue = (int)strtol((const char*)bParam, NULL, 10) * nSign;
    2ae0:	1c3b      	adds	r3, r7, #0
    2ae2:	330c      	adds	r3, #12
    2ae4:	1c18      	adds	r0, r3, #0
    2ae6:	2100      	movs	r1, #0
    2ae8:	220a      	movs	r2, #10
    2aea:	4beb      	ldr	r3, [pc, #940]	; (2e98 <STACK_SIZE+0xe98>)
    2aec:	4798      	blx	r3
    2aee:	1c03      	adds	r3, r0, #0
    2af0:	20ae      	movs	r0, #174	; 0xae
    2af2:	0040      	lsls	r0, r0, #1
    2af4:	19c0      	adds	r0, r0, r7
    2af6:	6802      	ldr	r2, [r0, #0]
    2af8:	4353      	muls	r3, r2
    2afa:	66bb      	str	r3, [r7, #104]	; 0x68
				int nFractionValue = (int)strtol((const char*)bFraction, NULL, 10) * nSign;
    2afc:	1d3b      	adds	r3, r7, #4
    2afe:	1c18      	adds	r0, r3, #0
    2b00:	2100      	movs	r1, #0
    2b02:	220a      	movs	r2, #10
    2b04:	4be4      	ldr	r3, [pc, #912]	; (2e98 <STACK_SIZE+0xe98>)
    2b06:	4798      	blx	r3
    2b08:	1c03      	adds	r3, r0, #0
    2b0a:	21ae      	movs	r1, #174	; 0xae
    2b0c:	0049      	lsls	r1, r1, #1
    2b0e:	19c9      	adds	r1, r1, r7
    2b10:	680a      	ldr	r2, [r1, #0]
    2b12:	4353      	muls	r3, r2
    2b14:	667b      	str	r3, [r7, #100]	; 0x64
				
				nFracSize = strlen(bFraction);
    2b16:	1d3b      	adds	r3, r7, #4
    2b18:	1c18      	adds	r0, r3, #0
    2b1a:	4be0      	ldr	r3, [pc, #896]	; (2e9c <STACK_SIZE+0xe9c>)
    2b1c:	4798      	blx	r3
    2b1e:	1c02      	adds	r2, r0, #0
    2b20:	1c3b      	adds	r3, r7, #0
    2b22:	336f      	adds	r3, #111	; 0x6f
    2b24:	701a      	strb	r2, [r3, #0]
				dblValue = (float)nParamValue + (float)((float)nFractionValue/(pow(10,nFracSize)));
    2b26:	4bde      	ldr	r3, [pc, #888]	; (2ea0 <STACK_SIZE+0xea0>)
    2b28:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    2b2a:	4798      	blx	r3
    2b2c:	4680      	mov	r8, r0
    2b2e:	4bdc      	ldr	r3, [pc, #880]	; (2ea0 <STACK_SIZE+0xea0>)
    2b30:	6e78      	ldr	r0, [r7, #100]	; 0x64
    2b32:	4798      	blx	r3
    2b34:	1c02      	adds	r2, r0, #0
    2b36:	4bdb      	ldr	r3, [pc, #876]	; (2ea4 <STACK_SIZE+0xea4>)
    2b38:	1c10      	adds	r0, r2, #0
    2b3a:	4798      	blx	r3
    2b3c:	1c05      	adds	r5, r0, #0
    2b3e:	1c0e      	adds	r6, r1, #0
    2b40:	1c3b      	adds	r3, r7, #0
    2b42:	336f      	adds	r3, #111	; 0x6f
    2b44:	781a      	ldrb	r2, [r3, #0]
    2b46:	4bd8      	ldr	r3, [pc, #864]	; (2ea8 <STACK_SIZE+0xea8>)
    2b48:	1c10      	adds	r0, r2, #0
    2b4a:	4798      	blx	r3
    2b4c:	1c03      	adds	r3, r0, #0
    2b4e:	1c0c      	adds	r4, r1, #0
    2b50:	4ad0      	ldr	r2, [pc, #832]	; (2e94 <STACK_SIZE+0xe94>)
    2b52:	49cf      	ldr	r1, [pc, #828]	; (2e90 <STACK_SIZE+0xe90>)
    2b54:	1c08      	adds	r0, r1, #0
    2b56:	1c11      	adds	r1, r2, #0
    2b58:	1c1a      	adds	r2, r3, #0
    2b5a:	1c23      	adds	r3, r4, #0
    2b5c:	4cd3      	ldr	r4, [pc, #844]	; (2eac <STACK_SIZE+0xeac>)
    2b5e:	47a0      	blx	r4
    2b60:	1c03      	adds	r3, r0, #0
    2b62:	1c0c      	adds	r4, r1, #0
    2b64:	4ad2      	ldr	r2, [pc, #840]	; (2eb0 <STACK_SIZE+0xeb0>)
    2b66:	4694      	mov	ip, r2
    2b68:	1c28      	adds	r0, r5, #0
    2b6a:	1c31      	adds	r1, r6, #0
    2b6c:	1c1a      	adds	r2, r3, #0
    2b6e:	1c23      	adds	r3, r4, #0
    2b70:	47e0      	blx	ip
    2b72:	1c03      	adds	r3, r0, #0
    2b74:	1c0c      	adds	r4, r1, #0
    2b76:	4acf      	ldr	r2, [pc, #828]	; (2eb4 <STACK_SIZE+0xeb4>)
    2b78:	1c18      	adds	r0, r3, #0
    2b7a:	1c21      	adds	r1, r4, #0
    2b7c:	4790      	blx	r2
    2b7e:	1c02      	adds	r2, r0, #0
    2b80:	4bcd      	ldr	r3, [pc, #820]	; (2eb8 <STACK_SIZE+0xeb8>)
    2b82:	4640      	mov	r0, r8
    2b84:	1c11      	adds	r1, r2, #0
    2b86:	4798      	blx	r3
    2b88:	1c03      	adds	r3, r0, #0
    2b8a:	673b      	str	r3, [r7, #112]	; 0x70

				if (deactivateAutoHeaterControl==true)
    2b8c:	4bcb      	ldr	r3, [pc, #812]	; (2ebc <STACK_SIZE+0xebc>)
    2b8e:	781b      	ldrb	r3, [r3, #0]
    2b90:	2b00      	cmp	r3, #0
    2b92:	d014      	beq.n	2bbe <STACK_SIZE+0xbbe>
				{
					setHeaterState(&doorHeater, (uint8_t)dblValue);
    2b94:	4bca      	ldr	r3, [pc, #808]	; (2ec0 <STACK_SIZE+0xec0>)
    2b96:	6f38      	ldr	r0, [r7, #112]	; 0x70
    2b98:	4798      	blx	r3
    2b9a:	1c03      	adds	r3, r0, #0
    2b9c:	b2db      	uxtb	r3, r3
    2b9e:	4ac9      	ldr	r2, [pc, #804]	; (2ec4 <STACK_SIZE+0xec4>)
    2ba0:	1c10      	adds	r0, r2, #0
    2ba2:	1c19      	adds	r1, r3, #0
    2ba4:	4bc8      	ldr	r3, [pc, #800]	; (2ec8 <STACK_SIZE+0xec8>)
    2ba6:	4798      	blx	r3
					dbg_info("\n[door heater enabled at %d%%]\n", (uint8_t)dblValue);
    2ba8:	4bc5      	ldr	r3, [pc, #788]	; (2ec0 <STACK_SIZE+0xec0>)
    2baa:	6f38      	ldr	r0, [r7, #112]	; 0x70
    2bac:	4798      	blx	r3
    2bae:	1c03      	adds	r3, r0, #0
    2bb0:	b2db      	uxtb	r3, r3
    2bb2:	4ac6      	ldr	r2, [pc, #792]	; (2ecc <STACK_SIZE+0xecc>)
    2bb4:	1c10      	adds	r0, r2, #0
    2bb6:	1c19      	adds	r1, r3, #0
    2bb8:	4bc5      	ldr	r3, [pc, #788]	; (2ed0 <STACK_SIZE+0xed0>)
    2bba:	4798      	blx	r3
				}
				else
				{
					dbg("\nno action\n");
				}
				break;
    2bbc:	e04f      	b.n	2c5e <STACK_SIZE+0xc5e>
					setHeaterState(&doorHeater, (uint8_t)dblValue);
					dbg_info("\n[door heater enabled at %d%%]\n", (uint8_t)dblValue);
				}
				else
				{
					dbg("\nno action\n");
    2bbe:	4bc5      	ldr	r3, [pc, #788]	; (2ed4 <STACK_SIZE+0xed4>)
    2bc0:	1c18      	adds	r0, r3, #0
    2bc2:	4bc5      	ldr	r3, [pc, #788]	; (2ed8 <STACK_SIZE+0xed8>)
    2bc4:	4798      	blx	r3
				}
				break;
    2bc6:	e04a      	b.n	2c5e <STACK_SIZE+0xc5e>
//------------------------------------------------------------------
// 6.8.x	enable/disable ui setpoint control
//------------------------------------------------------------------
				case '8':
				{
				result = ((bParam[0] - '0') != 0);
    2bc8:	4bc4      	ldr	r3, [pc, #784]	; (2edc <STACK_SIZE+0xedc>)
    2bca:	20b4      	movs	r0, #180	; 0xb4
    2bcc:	0040      	lsls	r0, r0, #1
    2bce:	19c0      	adds	r0, r0, r7
    2bd0:	18c3      	adds	r3, r0, r3
    2bd2:	781a      	ldrb	r2, [r3, #0]
    2bd4:	21a0      	movs	r1, #160	; 0xa0
    2bd6:	0049      	lsls	r1, r1, #1
    2bd8:	187b      	adds	r3, r7, r1
    2bda:	3a30      	subs	r2, #48	; 0x30
    2bdc:	1e51      	subs	r1, r2, #1
    2bde:	418a      	sbcs	r2, r1
    2be0:	701a      	strb	r2, [r3, #0]
				if (result)
    2be2:	22a0      	movs	r2, #160	; 0xa0
    2be4:	0052      	lsls	r2, r2, #1
    2be6:	18bb      	adds	r3, r7, r2
    2be8:	781b      	ldrb	r3, [r3, #0]
    2bea:	2b00      	cmp	r3, #0
    2bec:	d007      	beq.n	2bfe <STACK_SIZE+0xbfe>
				{
					uiSetpointControl = true;
    2bee:	4bbc      	ldr	r3, [pc, #752]	; (2ee0 <STACK_SIZE+0xee0>)
    2bf0:	2201      	movs	r2, #1
    2bf2:	701a      	strb	r2, [r3, #0]
					dbg("\n[uiSetpointControl enabled]\n");
    2bf4:	4bbb      	ldr	r3, [pc, #748]	; (2ee4 <STACK_SIZE+0xee4>)
    2bf6:	1c18      	adds	r0, r3, #0
    2bf8:	4bb7      	ldr	r3, [pc, #732]	; (2ed8 <STACK_SIZE+0xed8>)
    2bfa:	4798      	blx	r3
				else
				{
					uiSetpointControl = false;
					dbg("\n[uiSetpointControl disabled]\n");
				}
				break;
    2bfc:	e02f      	b.n	2c5e <STACK_SIZE+0xc5e>
					uiSetpointControl = true;
					dbg("\n[uiSetpointControl enabled]\n");
				}
				else
				{
					uiSetpointControl = false;
    2bfe:	4bb8      	ldr	r3, [pc, #736]	; (2ee0 <STACK_SIZE+0xee0>)
    2c00:	2200      	movs	r2, #0
    2c02:	701a      	strb	r2, [r3, #0]
					dbg("\n[uiSetpointControl disabled]\n");
    2c04:	4bb8      	ldr	r3, [pc, #736]	; (2ee8 <STACK_SIZE+0xee8>)
    2c06:	1c18      	adds	r0, r3, #0
    2c08:	4bb3      	ldr	r3, [pc, #716]	; (2ed8 <STACK_SIZE+0xed8>)
    2c0a:	4798      	blx	r3
				}
				break;
    2c0c:	e027      	b.n	2c5e <STACK_SIZE+0xc5e>
//------------------------------------------------------------------
// 6.9.x	enable/disable debug logging mode formatting
//------------------------------------------------------------------
				case '9':
				{
					result = ((bParam[0] - '0') != 0);
    2c0e:	4bb3      	ldr	r3, [pc, #716]	; (2edc <STACK_SIZE+0xedc>)
    2c10:	20b4      	movs	r0, #180	; 0xb4
    2c12:	0040      	lsls	r0, r0, #1
    2c14:	19c0      	adds	r0, r0, r7
    2c16:	18c3      	adds	r3, r0, r3
    2c18:	781a      	ldrb	r2, [r3, #0]
    2c1a:	21a0      	movs	r1, #160	; 0xa0
    2c1c:	0049      	lsls	r1, r1, #1
    2c1e:	187b      	adds	r3, r7, r1
    2c20:	3a30      	subs	r2, #48	; 0x30
    2c22:	1e51      	subs	r1, r2, #1
    2c24:	418a      	sbcs	r2, r1
    2c26:	701a      	strb	r2, [r3, #0]
					if (result)
    2c28:	22a0      	movs	r2, #160	; 0xa0
    2c2a:	0052      	lsls	r2, r2, #1
    2c2c:	18bb      	adds	r3, r7, r2
    2c2e:	781b      	ldrb	r3, [r3, #0]
    2c30:	2b00      	cmp	r3, #0
    2c32:	d007      	beq.n	2c44 <STACK_SIZE+0xc44>
					{
						enableDbgLoggingMode = true;
    2c34:	4bad      	ldr	r3, [pc, #692]	; (2eec <STACK_SIZE+0xeec>)
    2c36:	2201      	movs	r2, #1
    2c38:	701a      	strb	r2, [r3, #0]
						dbg("\n[DbgLoggingMode enabled]\n");
    2c3a:	4bad      	ldr	r3, [pc, #692]	; (2ef0 <STACK_SIZE+0xef0>)
    2c3c:	1c18      	adds	r0, r3, #0
    2c3e:	4ba6      	ldr	r3, [pc, #664]	; (2ed8 <STACK_SIZE+0xed8>)
    2c40:	4798      	blx	r3
					else
					{
						enableDbgLoggingMode = false;
						dbg("\n[DbgLoggingMode disabled]\n");
					}
					break;
    2c42:	e00c      	b.n	2c5e <STACK_SIZE+0xc5e>
						enableDbgLoggingMode = true;
						dbg("\n[DbgLoggingMode enabled]\n");
					}
					else
					{
						enableDbgLoggingMode = false;
    2c44:	4ba9      	ldr	r3, [pc, #676]	; (2eec <STACK_SIZE+0xeec>)
    2c46:	2200      	movs	r2, #0
    2c48:	701a      	strb	r2, [r3, #0]
						dbg("\n[DbgLoggingMode disabled]\n");
    2c4a:	4baa      	ldr	r3, [pc, #680]	; (2ef4 <STACK_SIZE+0xef4>)
    2c4c:	1c18      	adds	r0, r3, #0
    2c4e:	4ba2      	ldr	r3, [pc, #648]	; (2ed8 <STACK_SIZE+0xed8>)
    2c50:	4798      	blx	r3
					}
					break;
    2c52:	e004      	b.n	2c5e <STACK_SIZE+0xc5e>
				}
										
				default:
				dbg("\nno action\n");
    2c54:	4b9f      	ldr	r3, [pc, #636]	; (2ed4 <STACK_SIZE+0xed4>)
    2c56:	1c18      	adds	r0, r3, #0
    2c58:	4b9f      	ldr	r3, [pc, #636]	; (2ed8 <STACK_SIZE+0xed8>)
    2c5a:	4798      	blx	r3
				break;
    2c5c:	46c0      	nop			; (mov r8, r8)
				
			}
			break;
    2c5e:	f000 ff39 	bl	3ad4 <STACK_SIZE+0x1ad4>
		}		
		case 7:
		{
			switch (bCommand[0])
    2c62:	4ba5      	ldr	r3, [pc, #660]	; (2ef8 <STACK_SIZE+0xef8>)
    2c64:	20b4      	movs	r0, #180	; 0xb4
    2c66:	0040      	lsls	r0, r0, #1
    2c68:	19c0      	adds	r0, r0, r7
    2c6a:	18c3      	adds	r3, r0, r3
    2c6c:	781b      	ldrb	r3, [r3, #0]
    2c6e:	3b30      	subs	r3, #48	; 0x30
    2c70:	2b09      	cmp	r3, #9
    2c72:	d900      	bls.n	2c76 <STACK_SIZE+0xc76>
    2c74:	e208      	b.n	3088 <STACK_SIZE+0x1088>
    2c76:	009a      	lsls	r2, r3, #2
    2c78:	4ba0      	ldr	r3, [pc, #640]	; (2efc <STACK_SIZE+0xefc>)
    2c7a:	18d3      	adds	r3, r2, r3
    2c7c:	681b      	ldr	r3, [r3, #0]
    2c7e:	469f      	mov	pc, r3
			{
//------------------------------------------------------------------
// 7.0.x	software reset
//------------------------------------------------------------------				
				case '0':
				result = ((bParam[0] - '0') != 0);
    2c80:	4b96      	ldr	r3, [pc, #600]	; (2edc <STACK_SIZE+0xedc>)
    2c82:	21b4      	movs	r1, #180	; 0xb4
    2c84:	0049      	lsls	r1, r1, #1
    2c86:	19c9      	adds	r1, r1, r7
    2c88:	18cb      	adds	r3, r1, r3
    2c8a:	781a      	ldrb	r2, [r3, #0]
    2c8c:	20a0      	movs	r0, #160	; 0xa0
    2c8e:	0040      	lsls	r0, r0, #1
    2c90:	183b      	adds	r3, r7, r0
    2c92:	3a30      	subs	r2, #48	; 0x30
    2c94:	1e51      	subs	r1, r2, #1
    2c96:	418a      	sbcs	r2, r1
    2c98:	701a      	strb	r2, [r3, #0]
				
				if (result)
    2c9a:	21a0      	movs	r1, #160	; 0xa0
    2c9c:	0049      	lsls	r1, r1, #1
    2c9e:	187b      	adds	r3, r7, r1
    2ca0:	781b      	ldrb	r3, [r3, #0]
    2ca2:	2b00      	cmp	r3, #0
    2ca4:	d006      	beq.n	2cb4 <STACK_SIZE+0xcb4>
				{
					dbg("\n[soft reset now!]\n");
    2ca6:	4b96      	ldr	r3, [pc, #600]	; (2f00 <STACK_SIZE+0xf00>)
    2ca8:	1c18      	adds	r0, r3, #0
    2caa:	4b8b      	ldr	r3, [pc, #556]	; (2ed8 <STACK_SIZE+0xed8>)
    2cac:	4798      	blx	r3
					system_reset();
    2cae:	4b95      	ldr	r3, [pc, #596]	; (2f04 <STACK_SIZE+0xf04>)
    2cb0:	4798      	blx	r3
				}
				else
				{
					dbg("\n[no action]\n");
				}
				break;
    2cb2:	e1ef      	b.n	3094 <STACK_SIZE+0x1094>
					dbg("\n[soft reset now!]\n");
					system_reset();
				}
				else
				{
					dbg("\n[no action]\n");
    2cb4:	4b94      	ldr	r3, [pc, #592]	; (2f08 <STACK_SIZE+0xf08>)
    2cb6:	1c18      	adds	r0, r3, #0
    2cb8:	4b87      	ldr	r3, [pc, #540]	; (2ed8 <STACK_SIZE+0xed8>)
    2cba:	4798      	blx	r3
				}
				break;
    2cbc:	e1ea      	b.n	3094 <STACK_SIZE+0x1094>
//------------------------------------------------------------------
// 7.1.x	enable/disable temp sensor override
//------------------------------------------------------------------				
				case '1':
				result = ((bParam[0] - '0') != 0);
    2cbe:	4b87      	ldr	r3, [pc, #540]	; (2edc <STACK_SIZE+0xedc>)
    2cc0:	22b4      	movs	r2, #180	; 0xb4
    2cc2:	0052      	lsls	r2, r2, #1
    2cc4:	19d2      	adds	r2, r2, r7
    2cc6:	18d3      	adds	r3, r2, r3
    2cc8:	781a      	ldrb	r2, [r3, #0]
    2cca:	20a0      	movs	r0, #160	; 0xa0
    2ccc:	0040      	lsls	r0, r0, #1
    2cce:	183b      	adds	r3, r7, r0
    2cd0:	3a30      	subs	r2, #48	; 0x30
    2cd2:	1e51      	subs	r1, r2, #1
    2cd4:	418a      	sbcs	r2, r1
    2cd6:	701a      	strb	r2, [r3, #0]
				if (result)
    2cd8:	21a0      	movs	r1, #160	; 0xa0
    2cda:	0049      	lsls	r1, r1, #1
    2cdc:	187b      	adds	r3, r7, r1
    2cde:	781b      	ldrb	r3, [r3, #0]
    2ce0:	2b00      	cmp	r3, #0
    2ce2:	d007      	beq.n	2cf4 <STACK_SIZE+0xcf4>
				{
					enableTempOverride = true;
    2ce4:	4b89      	ldr	r3, [pc, #548]	; (2f0c <STACK_SIZE+0xf0c>)
    2ce6:	2201      	movs	r2, #1
    2ce8:	701a      	strb	r2, [r3, #0]
					dbg("\n[sensor override enabled]\n");
    2cea:	4b89      	ldr	r3, [pc, #548]	; (2f10 <STACK_SIZE+0xf10>)
    2cec:	1c18      	adds	r0, r3, #0
    2cee:	4b7a      	ldr	r3, [pc, #488]	; (2ed8 <STACK_SIZE+0xed8>)
    2cf0:	4798      	blx	r3
				else
				{
					enableTempOverride = false;
					dbg("\n[sensor override disabled]\n");
				}
				break;
    2cf2:	e1cf      	b.n	3094 <STACK_SIZE+0x1094>
					enableTempOverride = true;
					dbg("\n[sensor override enabled]\n");
				}
				else
				{
					enableTempOverride = false;
    2cf4:	4b85      	ldr	r3, [pc, #532]	; (2f0c <STACK_SIZE+0xf0c>)
    2cf6:	2200      	movs	r2, #0
    2cf8:	701a      	strb	r2, [r3, #0]
					dbg("\n[sensor override disabled]\n");
    2cfa:	4b86      	ldr	r3, [pc, #536]	; (2f14 <STACK_SIZE+0xf14>)
    2cfc:	1c18      	adds	r0, r3, #0
    2cfe:	4b76      	ldr	r3, [pc, #472]	; (2ed8 <STACK_SIZE+0xed8>)
    2d00:	4798      	blx	r3
				}
				break;
    2d02:	e1c7      	b.n	3094 <STACK_SIZE+0x1094>
//------------------------------------------------------------------
// 7.2.x	enable/disable fan override
//------------------------------------------------------------------				
				case '2':
				result = ((bParam[0] - '0') != 0);
    2d04:	4b75      	ldr	r3, [pc, #468]	; (2edc <STACK_SIZE+0xedc>)
    2d06:	22b4      	movs	r2, #180	; 0xb4
    2d08:	0052      	lsls	r2, r2, #1
    2d0a:	19d2      	adds	r2, r2, r7
    2d0c:	18d3      	adds	r3, r2, r3
    2d0e:	781a      	ldrb	r2, [r3, #0]
    2d10:	20a0      	movs	r0, #160	; 0xa0
    2d12:	0040      	lsls	r0, r0, #1
    2d14:	183b      	adds	r3, r7, r0
    2d16:	3a30      	subs	r2, #48	; 0x30
    2d18:	1e51      	subs	r1, r2, #1
    2d1a:	418a      	sbcs	r2, r1
    2d1c:	701a      	strb	r2, [r3, #0]
				enableFanOverride = result;
    2d1e:	4b7e      	ldr	r3, [pc, #504]	; (2f18 <STACK_SIZE+0xf18>)
    2d20:	21a0      	movs	r1, #160	; 0xa0
    2d22:	0049      	lsls	r1, r1, #1
    2d24:	187a      	adds	r2, r7, r1
    2d26:	7812      	ldrb	r2, [r2, #0]
    2d28:	701a      	strb	r2, [r3, #0]
				if (enableFanOverride)
    2d2a:	4b7b      	ldr	r3, [pc, #492]	; (2f18 <STACK_SIZE+0xf18>)
    2d2c:	781b      	ldrb	r3, [r3, #0]
    2d2e:	2b00      	cmp	r3, #0
    2d30:	d007      	beq.n	2d42 <STACK_SIZE+0xd42>
				{
					enableSensorEDFI = false;
    2d32:	4b7a      	ldr	r3, [pc, #488]	; (2f1c <STACK_SIZE+0xf1c>)
    2d34:	2200      	movs	r2, #0
    2d36:	701a      	strb	r2, [r3, #0]
					dbg("\n[fan override enabled]\n");
    2d38:	4b79      	ldr	r3, [pc, #484]	; (2f20 <STACK_SIZE+0xf20>)
    2d3a:	1c18      	adds	r0, r3, #0
    2d3c:	4b66      	ldr	r3, [pc, #408]	; (2ed8 <STACK_SIZE+0xed8>)
    2d3e:	4798      	blx	r3
				else
				{
					enableSensorEDFI = true;
					dbg("\n[fan override disabled]\n");
				}
				break;
    2d40:	e1a8      	b.n	3094 <STACK_SIZE+0x1094>
					enableSensorEDFI = false;
					dbg("\n[fan override enabled]\n");
				}
				else
				{
					enableSensorEDFI = true;
    2d42:	4b76      	ldr	r3, [pc, #472]	; (2f1c <STACK_SIZE+0xf1c>)
    2d44:	2201      	movs	r2, #1
    2d46:	701a      	strb	r2, [r3, #0]
					dbg("\n[fan override disabled]\n");
    2d48:	4b76      	ldr	r3, [pc, #472]	; (2f24 <STACK_SIZE+0xf24>)
    2d4a:	1c18      	adds	r0, r3, #0
    2d4c:	4b62      	ldr	r3, [pc, #392]	; (2ed8 <STACK_SIZE+0xed8>)
    2d4e:	4798      	blx	r3
				}
				break;
    2d50:	e1a0      	b.n	3094 <STACK_SIZE+0x1094>
				break;
//------------------------------------------------------------------
// 7.4		print condensate temp
//------------------------------------------------------------------				
				case '4':
				dbg_info("\n[condensate temp is %4.2f]\n", condensateTemp);
    2d52:	4b75      	ldr	r3, [pc, #468]	; (2f28 <STACK_SIZE+0xf28>)
    2d54:	681a      	ldr	r2, [r3, #0]
    2d56:	4b53      	ldr	r3, [pc, #332]	; (2ea4 <STACK_SIZE+0xea4>)
    2d58:	1c10      	adds	r0, r2, #0
    2d5a:	4798      	blx	r3
    2d5c:	1c03      	adds	r3, r0, #0
    2d5e:	1c0c      	adds	r4, r1, #0
    2d60:	4a72      	ldr	r2, [pc, #456]	; (2f2c <STACK_SIZE+0xf2c>)
    2d62:	1c10      	adds	r0, r2, #0
    2d64:	1c1a      	adds	r2, r3, #0
    2d66:	1c23      	adds	r3, r4, #0
    2d68:	4959      	ldr	r1, [pc, #356]	; (2ed0 <STACK_SIZE+0xed0>)
    2d6a:	4788      	blx	r1
				break;	
    2d6c:	e192      	b.n	3094 <STACK_SIZE+0x1094>
//------------------------------------------------------------------
// 7.5		print ui firmware version
//------------------------------------------------------------------				
				case '5':
				dbg_info("\n[ui firmware version is %X]\n", UIfwVersion);
    2d6e:	4b70      	ldr	r3, [pc, #448]	; (2f30 <STACK_SIZE+0xf30>)
    2d70:	781b      	ldrb	r3, [r3, #0]
    2d72:	4a70      	ldr	r2, [pc, #448]	; (2f34 <STACK_SIZE+0xf34>)
    2d74:	1c10      	adds	r0, r2, #0
    2d76:	1c19      	adds	r1, r3, #0
    2d78:	4b55      	ldr	r3, [pc, #340]	; (2ed0 <STACK_SIZE+0xed0>)
    2d7a:	4798      	blx	r3
				break;	
    2d7c:	e18a      	b.n	3094 <STACK_SIZE+0x1094>
//------------------------------------------------------------------
// 7.6		print ui version string (long version)
//------------------------------------------------------------------
				case '6':
				dbg_info("\n[ui firmware version is %s]\n", strUiFwVer);
    2d7e:	4a6e      	ldr	r2, [pc, #440]	; (2f38 <STACK_SIZE+0xf38>)
    2d80:	4b6e      	ldr	r3, [pc, #440]	; (2f3c <STACK_SIZE+0xf3c>)
    2d82:	1c10      	adds	r0, r2, #0
    2d84:	1c19      	adds	r1, r3, #0
    2d86:	4b52      	ldr	r3, [pc, #328]	; (2ed0 <STACK_SIZE+0xed0>)
    2d88:	4798      	blx	r3
				break;				
    2d8a:	e183      	b.n	3094 <STACK_SIZE+0x1094>
//------------------------------------------------------------------
// 7.7.x	write ps1.phpOutputDutyOffset
//------------------------------------------------------------------
				case '7':
				{
					float dblValue = 0.0f;
    2d8c:	2300      	movs	r3, #0
    2d8e:	663b      	str	r3, [r7, #96]	; 0x60
					uint8_t nFracSize = 0;
    2d90:	4b6b      	ldr	r3, [pc, #428]	; (2f40 <STACK_SIZE+0xf40>)
    2d92:	22b4      	movs	r2, #180	; 0xb4
    2d94:	0052      	lsls	r2, r2, #1
    2d96:	19d2      	adds	r2, r2, r7
    2d98:	18d3      	adds	r3, r2, r3
    2d9a:	2200      	movs	r2, #0
    2d9c:	701a      	strb	r2, [r3, #0]
					
					int nParamValue = (int)strtol((const char*)bParam, NULL, 10) * nSign;
    2d9e:	1c3b      	adds	r3, r7, #0
    2da0:	330c      	adds	r3, #12
    2da2:	1c18      	adds	r0, r3, #0
    2da4:	2100      	movs	r1, #0
    2da6:	220a      	movs	r2, #10
    2da8:	4b3b      	ldr	r3, [pc, #236]	; (2e98 <STACK_SIZE+0xe98>)
    2daa:	4798      	blx	r3
    2dac:	1c03      	adds	r3, r0, #0
    2dae:	20ae      	movs	r0, #174	; 0xae
    2db0:	0040      	lsls	r0, r0, #1
    2db2:	19c0      	adds	r0, r0, r7
    2db4:	6802      	ldr	r2, [r0, #0]
    2db6:	4353      	muls	r3, r2
    2db8:	65bb      	str	r3, [r7, #88]	; 0x58
					int nFractionValue = (int)strtol((const char*)bFraction, NULL, 10) * nSign;
    2dba:	1d3b      	adds	r3, r7, #4
    2dbc:	1c18      	adds	r0, r3, #0
    2dbe:	2100      	movs	r1, #0
    2dc0:	220a      	movs	r2, #10
    2dc2:	4b35      	ldr	r3, [pc, #212]	; (2e98 <STACK_SIZE+0xe98>)
    2dc4:	4798      	blx	r3
    2dc6:	1c03      	adds	r3, r0, #0
    2dc8:	21ae      	movs	r1, #174	; 0xae
    2dca:	0049      	lsls	r1, r1, #1
    2dcc:	19c9      	adds	r1, r1, r7
    2dce:	680a      	ldr	r2, [r1, #0]
    2dd0:	4353      	muls	r3, r2
    2dd2:	657b      	str	r3, [r7, #84]	; 0x54
					
					nFracSize = strlen(bFraction);
    2dd4:	1d3b      	adds	r3, r7, #4
    2dd6:	1c18      	adds	r0, r3, #0
    2dd8:	4b30      	ldr	r3, [pc, #192]	; (2e9c <STACK_SIZE+0xe9c>)
    2dda:	4798      	blx	r3
    2ddc:	1c02      	adds	r2, r0, #0
    2dde:	4b58      	ldr	r3, [pc, #352]	; (2f40 <STACK_SIZE+0xf40>)
    2de0:	20b4      	movs	r0, #180	; 0xb4
    2de2:	0040      	lsls	r0, r0, #1
    2de4:	19c0      	adds	r0, r0, r7
    2de6:	18c3      	adds	r3, r0, r3
    2de8:	701a      	strb	r2, [r3, #0]
					dblValue = (float)nParamValue + (float)((float)nFractionValue/(pow(10,nFracSize)));
    2dea:	4b2d      	ldr	r3, [pc, #180]	; (2ea0 <STACK_SIZE+0xea0>)
    2dec:	6db8      	ldr	r0, [r7, #88]	; 0x58
    2dee:	4798      	blx	r3
    2df0:	4680      	mov	r8, r0
    2df2:	4b2b      	ldr	r3, [pc, #172]	; (2ea0 <STACK_SIZE+0xea0>)
    2df4:	6d78      	ldr	r0, [r7, #84]	; 0x54
    2df6:	4798      	blx	r3
    2df8:	1c02      	adds	r2, r0, #0
    2dfa:	4b2a      	ldr	r3, [pc, #168]	; (2ea4 <STACK_SIZE+0xea4>)
    2dfc:	1c10      	adds	r0, r2, #0
    2dfe:	4798      	blx	r3
    2e00:	1c05      	adds	r5, r0, #0
    2e02:	1c0e      	adds	r6, r1, #0
    2e04:	4b4e      	ldr	r3, [pc, #312]	; (2f40 <STACK_SIZE+0xf40>)
    2e06:	21b4      	movs	r1, #180	; 0xb4
    2e08:	0049      	lsls	r1, r1, #1
    2e0a:	19c9      	adds	r1, r1, r7
    2e0c:	18cb      	adds	r3, r1, r3
    2e0e:	781a      	ldrb	r2, [r3, #0]
    2e10:	4b25      	ldr	r3, [pc, #148]	; (2ea8 <STACK_SIZE+0xea8>)
    2e12:	1c10      	adds	r0, r2, #0
    2e14:	4798      	blx	r3
    2e16:	1c03      	adds	r3, r0, #0
    2e18:	1c0c      	adds	r4, r1, #0
    2e1a:	4a1e      	ldr	r2, [pc, #120]	; (2e94 <STACK_SIZE+0xe94>)
    2e1c:	491c      	ldr	r1, [pc, #112]	; (2e90 <STACK_SIZE+0xe90>)
    2e1e:	1c08      	adds	r0, r1, #0
    2e20:	1c11      	adds	r1, r2, #0
    2e22:	1c1a      	adds	r2, r3, #0
    2e24:	1c23      	adds	r3, r4, #0
    2e26:	4c21      	ldr	r4, [pc, #132]	; (2eac <STACK_SIZE+0xeac>)
    2e28:	47a0      	blx	r4
    2e2a:	1c03      	adds	r3, r0, #0
    2e2c:	1c0c      	adds	r4, r1, #0
    2e2e:	4a20      	ldr	r2, [pc, #128]	; (2eb0 <STACK_SIZE+0xeb0>)
    2e30:	4694      	mov	ip, r2
    2e32:	1c28      	adds	r0, r5, #0
    2e34:	1c31      	adds	r1, r6, #0
    2e36:	1c1a      	adds	r2, r3, #0
    2e38:	1c23      	adds	r3, r4, #0
    2e3a:	47e0      	blx	ip
    2e3c:	1c03      	adds	r3, r0, #0
    2e3e:	1c0c      	adds	r4, r1, #0
    2e40:	4a1c      	ldr	r2, [pc, #112]	; (2eb4 <STACK_SIZE+0xeb4>)
    2e42:	1c18      	adds	r0, r3, #0
    2e44:	1c21      	adds	r1, r4, #0
    2e46:	4790      	blx	r2
    2e48:	1c02      	adds	r2, r0, #0
    2e4a:	4b1b      	ldr	r3, [pc, #108]	; (2eb8 <STACK_SIZE+0xeb8>)
    2e4c:	4640      	mov	r0, r8
    2e4e:	1c11      	adds	r1, r2, #0
    2e50:	4798      	blx	r3
    2e52:	1c03      	adds	r3, r0, #0
    2e54:	663b      	str	r3, [r7, #96]	; 0x60
					ps1.phpOutputDutyOffset = dblValue;
    2e56:	4b3b      	ldr	r3, [pc, #236]	; (2f44 <STACK_SIZE+0xf44>)
    2e58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    2e5a:	631a      	str	r2, [r3, #48]	; 0x30
					dbg_info("\n[ps1.phpOutputDutyOffset set to %4.2f]\n", ps1.phpOutputDutyOffset);
    2e5c:	4b39      	ldr	r3, [pc, #228]	; (2f44 <STACK_SIZE+0xf44>)
    2e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2e60:	4b10      	ldr	r3, [pc, #64]	; (2ea4 <STACK_SIZE+0xea4>)
    2e62:	1c10      	adds	r0, r2, #0
    2e64:	4798      	blx	r3
    2e66:	1c03      	adds	r3, r0, #0
    2e68:	1c0c      	adds	r4, r1, #0
    2e6a:	4a37      	ldr	r2, [pc, #220]	; (2f48 <STACK_SIZE+0xf48>)
    2e6c:	1c10      	adds	r0, r2, #0
    2e6e:	1c1a      	adds	r2, r3, #0
    2e70:	1c23      	adds	r3, r4, #0
    2e72:	4917      	ldr	r1, [pc, #92]	; (2ed0 <STACK_SIZE+0xed0>)
    2e74:	4788      	blx	r1
					writeToEepromFlag = true;
    2e76:	4b35      	ldr	r3, [pc, #212]	; (2f4c <STACK_SIZE+0xf4c>)
    2e78:	2201      	movs	r2, #1
    2e7a:	701a      	strb	r2, [r3, #0]
					eepromDataInfo.pAddr = &ps1.phpOutputDutyOffset;
    2e7c:	4b34      	ldr	r3, [pc, #208]	; (2f50 <STACK_SIZE+0xf50>)
    2e7e:	4a35      	ldr	r2, [pc, #212]	; (2f54 <STACK_SIZE+0xf54>)
    2e80:	601a      	str	r2, [r3, #0]
					eepromDataInfo.size = sizeof(ps1.phpOutputDutyOffset);
    2e82:	4b33      	ldr	r3, [pc, #204]	; (2f50 <STACK_SIZE+0xf50>)
    2e84:	2204      	movs	r2, #4
    2e86:	711a      	strb	r2, [r3, #4]
					eepromDataInfo.nonvolatileFlag = true;
    2e88:	4b31      	ldr	r3, [pc, #196]	; (2f50 <STACK_SIZE+0xf50>)
    2e8a:	2201      	movs	r2, #1
    2e8c:	715a      	strb	r2, [r3, #5]
					break;
    2e8e:	e101      	b.n	3094 <STACK_SIZE+0x1094>
    2e90:	00000000 	.word	0x00000000
    2e94:	40240000 	.word	0x40240000
    2e98:	0001bd69 	.word	0x0001bd69
    2e9c:	0001bb1d 	.word	0x0001bb1d
    2ea0:	000203b5 	.word	0x000203b5
    2ea4:	00022111 	.word	0x00022111
    2ea8:	000220a9 	.word	0x000220a9
    2eac:	00019c71 	.word	0x00019c71
    2eb0:	00020b55 	.word	0x00020b55
    2eb4:	000221b5 	.word	0x000221b5
    2eb8:	0001f79d 	.word	0x0001f79d
    2ebc:	20000376 	.word	0x20000376
    2ec0:	0001f6bd 	.word	0x0001f6bd
    2ec4:	20000b34 	.word	0x20000b34
    2ec8:	00007275 	.word	0x00007275
    2ecc:	00022e80 	.word	0x00022e80
    2ed0:	0001b62d 	.word	0x0001b62d
    2ed4:	00022e74 	.word	0x00022e74
    2ed8:	0001b899 	.word	0x0001b899
    2edc:	fffffea4 	.word	0xfffffea4
    2ee0:	20000090 	.word	0x20000090
    2ee4:	00022ea0 	.word	0x00022ea0
    2ee8:	00022ec0 	.word	0x00022ec0
    2eec:	200002a1 	.word	0x200002a1
    2ef0:	00022ee0 	.word	0x00022ee0
    2ef4:	00022efc 	.word	0x00022efc
    2ef8:	fffffeb4 	.word	0xfffffeb4
    2efc:	00023318 	.word	0x00023318
    2f00:	00022f18 	.word	0x00022f18
    2f04:	00000241 	.word	0x00000241
    2f08:	00022cfc 	.word	0x00022cfc
    2f0c:	20000373 	.word	0x20000373
    2f10:	00022ba4 	.word	0x00022ba4
    2f14:	00022bc0 	.word	0x00022bc0
    2f18:	20000375 	.word	0x20000375
    2f1c:	20000378 	.word	0x20000378
    2f20:	00022f2c 	.word	0x00022f2c
    2f24:	00022f44 	.word	0x00022f44
    2f28:	200003b4 	.word	0x200003b4
    2f2c:	00022f60 	.word	0x00022f60
    2f30:	20000334 	.word	0x20000334
    2f34:	00022f80 	.word	0x00022f80
    2f38:	00022fa0 	.word	0x00022fa0
    2f3c:	20000058 	.word	0x20000058
    2f40:	fffffef7 	.word	0xfffffef7
    2f44:	20000a84 	.word	0x20000a84
    2f48:	00022fc0 	.word	0x00022fc0
    2f4c:	200002f4 	.word	0x200002f4
    2f50:	200008dc 	.word	0x200008dc
    2f54:	20000ab4 	.word	0x20000ab4
//------------------------------------------------------------------
// 7.8.x	write ps2.phpOutputDutyOffset
//------------------------------------------------------------------
				case '8':
				{
					float dblValue = 0.0f;
    2f58:	2300      	movs	r3, #0
    2f5a:	653b      	str	r3, [r7, #80]	; 0x50
					uint8_t nFracSize = 0;
    2f5c:	4bce      	ldr	r3, [pc, #824]	; (3298 <STACK_SIZE+0x1298>)
    2f5e:	20b4      	movs	r0, #180	; 0xb4
    2f60:	0040      	lsls	r0, r0, #1
    2f62:	19c0      	adds	r0, r0, r7
    2f64:	18c3      	adds	r3, r0, r3
    2f66:	2200      	movs	r2, #0
    2f68:	701a      	strb	r2, [r3, #0]
					
					int nParamValue = (int)strtol((const char*)bParam, NULL, 10) * nSign;
    2f6a:	1c3b      	adds	r3, r7, #0
    2f6c:	330c      	adds	r3, #12
    2f6e:	1c18      	adds	r0, r3, #0
    2f70:	2100      	movs	r1, #0
    2f72:	220a      	movs	r2, #10
    2f74:	4bc9      	ldr	r3, [pc, #804]	; (329c <STACK_SIZE+0x129c>)
    2f76:	4798      	blx	r3
    2f78:	1c03      	adds	r3, r0, #0
    2f7a:	21ae      	movs	r1, #174	; 0xae
    2f7c:	0049      	lsls	r1, r1, #1
    2f7e:	19c9      	adds	r1, r1, r7
    2f80:	680a      	ldr	r2, [r1, #0]
    2f82:	4353      	muls	r3, r2
    2f84:	64bb      	str	r3, [r7, #72]	; 0x48
					int nFractionValue = (int)strtol((const char*)bFraction, NULL, 10) * nSign;
    2f86:	1d3b      	adds	r3, r7, #4
    2f88:	1c18      	adds	r0, r3, #0
    2f8a:	2100      	movs	r1, #0
    2f8c:	220a      	movs	r2, #10
    2f8e:	4bc3      	ldr	r3, [pc, #780]	; (329c <STACK_SIZE+0x129c>)
    2f90:	4798      	blx	r3
    2f92:	1c03      	adds	r3, r0, #0
    2f94:	20ae      	movs	r0, #174	; 0xae
    2f96:	0040      	lsls	r0, r0, #1
    2f98:	19c0      	adds	r0, r0, r7
    2f9a:	6802      	ldr	r2, [r0, #0]
    2f9c:	4353      	muls	r3, r2
    2f9e:	647b      	str	r3, [r7, #68]	; 0x44
					
					nFracSize = strlen(bFraction);
    2fa0:	1d3b      	adds	r3, r7, #4
    2fa2:	1c18      	adds	r0, r3, #0
    2fa4:	4bbe      	ldr	r3, [pc, #760]	; (32a0 <STACK_SIZE+0x12a0>)
    2fa6:	4798      	blx	r3
    2fa8:	1c02      	adds	r2, r0, #0
    2faa:	4bbb      	ldr	r3, [pc, #748]	; (3298 <STACK_SIZE+0x1298>)
    2fac:	21b4      	movs	r1, #180	; 0xb4
    2fae:	0049      	lsls	r1, r1, #1
    2fb0:	19c9      	adds	r1, r1, r7
    2fb2:	18cb      	adds	r3, r1, r3
    2fb4:	701a      	strb	r2, [r3, #0]
					dblValue = (float)nParamValue + (float)((float)nFractionValue/(pow(10,nFracSize)));
    2fb6:	4bbb      	ldr	r3, [pc, #748]	; (32a4 <STACK_SIZE+0x12a4>)
    2fb8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    2fba:	4798      	blx	r3
    2fbc:	4680      	mov	r8, r0
    2fbe:	4bb9      	ldr	r3, [pc, #740]	; (32a4 <STACK_SIZE+0x12a4>)
    2fc0:	6c78      	ldr	r0, [r7, #68]	; 0x44
    2fc2:	4798      	blx	r3
    2fc4:	1c02      	adds	r2, r0, #0
    2fc6:	4bb8      	ldr	r3, [pc, #736]	; (32a8 <STACK_SIZE+0x12a8>)
    2fc8:	1c10      	adds	r0, r2, #0
    2fca:	4798      	blx	r3
    2fcc:	1c05      	adds	r5, r0, #0
    2fce:	1c0e      	adds	r6, r1, #0
    2fd0:	4bb1      	ldr	r3, [pc, #708]	; (3298 <STACK_SIZE+0x1298>)
    2fd2:	22b4      	movs	r2, #180	; 0xb4
    2fd4:	0052      	lsls	r2, r2, #1
    2fd6:	19d2      	adds	r2, r2, r7
    2fd8:	18d3      	adds	r3, r2, r3
    2fda:	781a      	ldrb	r2, [r3, #0]
    2fdc:	4bb3      	ldr	r3, [pc, #716]	; (32ac <STACK_SIZE+0x12ac>)
    2fde:	1c10      	adds	r0, r2, #0
    2fe0:	4798      	blx	r3
    2fe2:	1c03      	adds	r3, r0, #0
    2fe4:	1c0c      	adds	r4, r1, #0
    2fe6:	4aab      	ldr	r2, [pc, #684]	; (3294 <STACK_SIZE+0x1294>)
    2fe8:	49a9      	ldr	r1, [pc, #676]	; (3290 <STACK_SIZE+0x1290>)
    2fea:	1c08      	adds	r0, r1, #0
    2fec:	1c11      	adds	r1, r2, #0
    2fee:	1c1a      	adds	r2, r3, #0
    2ff0:	1c23      	adds	r3, r4, #0
    2ff2:	4caf      	ldr	r4, [pc, #700]	; (32b0 <STACK_SIZE+0x12b0>)
    2ff4:	47a0      	blx	r4
    2ff6:	1c03      	adds	r3, r0, #0
    2ff8:	1c0c      	adds	r4, r1, #0
    2ffa:	48ae      	ldr	r0, [pc, #696]	; (32b4 <STACK_SIZE+0x12b4>)
    2ffc:	4684      	mov	ip, r0
    2ffe:	1c28      	adds	r0, r5, #0
    3000:	1c31      	adds	r1, r6, #0
    3002:	1c1a      	adds	r2, r3, #0
    3004:	1c23      	adds	r3, r4, #0
    3006:	47e0      	blx	ip
    3008:	1c03      	adds	r3, r0, #0
    300a:	1c0c      	adds	r4, r1, #0
    300c:	4aaa      	ldr	r2, [pc, #680]	; (32b8 <STACK_SIZE+0x12b8>)
    300e:	1c18      	adds	r0, r3, #0
    3010:	1c21      	adds	r1, r4, #0
    3012:	4790      	blx	r2
    3014:	1c02      	adds	r2, r0, #0
    3016:	4ba9      	ldr	r3, [pc, #676]	; (32bc <STACK_SIZE+0x12bc>)
    3018:	4640      	mov	r0, r8
    301a:	1c11      	adds	r1, r2, #0
    301c:	4798      	blx	r3
    301e:	1c03      	adds	r3, r0, #0
    3020:	653b      	str	r3, [r7, #80]	; 0x50
					ps2.phpOutputDutyOffset = dblValue;
    3022:	4ba7      	ldr	r3, [pc, #668]	; (32c0 <STACK_SIZE+0x12c0>)
    3024:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3026:	631a      	str	r2, [r3, #48]	; 0x30
					dbg_info("\n[ps2.phpOutputDutyOffset set to %4.2f]\n", ps2.phpOutputDutyOffset);
    3028:	4ba5      	ldr	r3, [pc, #660]	; (32c0 <STACK_SIZE+0x12c0>)
    302a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    302c:	4b9e      	ldr	r3, [pc, #632]	; (32a8 <STACK_SIZE+0x12a8>)
    302e:	1c10      	adds	r0, r2, #0
    3030:	4798      	blx	r3
    3032:	1c03      	adds	r3, r0, #0
    3034:	1c0c      	adds	r4, r1, #0
    3036:	4aa3      	ldr	r2, [pc, #652]	; (32c4 <STACK_SIZE+0x12c4>)
    3038:	1c10      	adds	r0, r2, #0
    303a:	1c1a      	adds	r2, r3, #0
    303c:	1c23      	adds	r3, r4, #0
    303e:	49a2      	ldr	r1, [pc, #648]	; (32c8 <STACK_SIZE+0x12c8>)
    3040:	4788      	blx	r1
					writeToEepromFlag = true;
    3042:	4ba2      	ldr	r3, [pc, #648]	; (32cc <STACK_SIZE+0x12cc>)
    3044:	2201      	movs	r2, #1
    3046:	701a      	strb	r2, [r3, #0]
					eepromDataInfo.pAddr = &ps2.phpOutputDutyOffset;
    3048:	4ba1      	ldr	r3, [pc, #644]	; (32d0 <STACK_SIZE+0x12d0>)
    304a:	4aa2      	ldr	r2, [pc, #648]	; (32d4 <STACK_SIZE+0x12d4>)
    304c:	601a      	str	r2, [r3, #0]
					eepromDataInfo.size = sizeof(ps2.phpOutputDutyOffset);
    304e:	4ba0      	ldr	r3, [pc, #640]	; (32d0 <STACK_SIZE+0x12d0>)
    3050:	2204      	movs	r2, #4
    3052:	711a      	strb	r2, [r3, #4]
					eepromDataInfo.nonvolatileFlag = true;
    3054:	4b9e      	ldr	r3, [pc, #632]	; (32d0 <STACK_SIZE+0x12d0>)
    3056:	2201      	movs	r2, #1
    3058:	715a      	strb	r2, [r3, #5]
					break;
    305a:	e01b      	b.n	3094 <STACK_SIZE+0x1094>
//------------------------------------------------------------------
// 7.9		print a single debug message string
//------------------------------------------------------------------
				case '9':
				{
					bool prev_val = enableDbgLoggingMode;
    305c:	4b9e      	ldr	r3, [pc, #632]	; (32d8 <STACK_SIZE+0x12d8>)
    305e:	21b4      	movs	r1, #180	; 0xb4
    3060:	0049      	lsls	r1, r1, #1
    3062:	19c9      	adds	r1, r1, r7
    3064:	18cb      	adds	r3, r1, r3
    3066:	4a9d      	ldr	r2, [pc, #628]	; (32dc <STACK_SIZE+0x12dc>)
    3068:	7812      	ldrb	r2, [r2, #0]
    306a:	701a      	strb	r2, [r3, #0]
					enableDbgLoggingMode = true;
    306c:	4b9b      	ldr	r3, [pc, #620]	; (32dc <STACK_SIZE+0x12dc>)
    306e:	2201      	movs	r2, #1
    3070:	701a      	strb	r2, [r3, #0]
					printDbgMsgs();
    3072:	4b9b      	ldr	r3, [pc, #620]	; (32e0 <STACK_SIZE+0x12e0>)
    3074:	4798      	blx	r3
					enableDbgLoggingMode = prev_val;	
    3076:	4b99      	ldr	r3, [pc, #612]	; (32dc <STACK_SIZE+0x12dc>)
    3078:	4a97      	ldr	r2, [pc, #604]	; (32d8 <STACK_SIZE+0x12d8>)
    307a:	20b4      	movs	r0, #180	; 0xb4
    307c:	0040      	lsls	r0, r0, #1
    307e:	19c0      	adds	r0, r0, r7
    3080:	1882      	adds	r2, r0, r2
    3082:	7812      	ldrb	r2, [r2, #0]
    3084:	701a      	strb	r2, [r3, #0]
					break;
    3086:	e005      	b.n	3094 <STACK_SIZE+0x1094>
				}
					
				default:
				dbg("\n[no action]\n");
    3088:	4b96      	ldr	r3, [pc, #600]	; (32e4 <STACK_SIZE+0x12e4>)
    308a:	1c18      	adds	r0, r3, #0
    308c:	4b96      	ldr	r3, [pc, #600]	; (32e8 <STACK_SIZE+0x12e8>)
    308e:	4798      	blx	r3
				break;
    3090:	e000      	b.n	3094 <STACK_SIZE+0x1094>
//------------------------------------------------------------------
// 7.3		 
//------------------------------------------------------------------				
				case '3':
				//dbg_info("\n[humidity is %4.2f]\n", humidityPercentage);
				break;
    3092:	46c0      	nop			; (mov r8, r8)
					
				default:
				dbg("\n[no action]\n");
				break;
			}
			break;
    3094:	f000 fd1e 	bl	3ad4 <STACK_SIZE+0x1ad4>
		}
		case 8:
		{	
			uint8_t bTemp[3];
			int nParamValue = (int)strtol((const char*)bParam, NULL, 10);
    3098:	1c3b      	adds	r3, r7, #0
    309a:	330c      	adds	r3, #12
    309c:	1c18      	adds	r0, r3, #0
    309e:	2100      	movs	r1, #0
    30a0:	220a      	movs	r2, #10
    30a2:	4b7e      	ldr	r3, [pc, #504]	; (329c <STACK_SIZE+0x129c>)
    30a4:	4798      	blx	r3
    30a6:	1c03      	adds	r3, r0, #0
    30a8:	63fb      	str	r3, [r7, #60]	; 0x3c
								
			switch (bCommand[0])
    30aa:	4b90      	ldr	r3, [pc, #576]	; (32ec <STACK_SIZE+0x12ec>)
    30ac:	21b4      	movs	r1, #180	; 0xb4
    30ae:	0049      	lsls	r1, r1, #1
    30b0:	19c9      	adds	r1, r1, r7
    30b2:	18cb      	adds	r3, r1, r3
    30b4:	781b      	ldrb	r3, [r3, #0]
    30b6:	3b30      	subs	r3, #48	; 0x30
    30b8:	2b09      	cmp	r3, #9
    30ba:	d901      	bls.n	30c0 <STACK_SIZE+0x10c0>
    30bc:	f000 fbe3 	bl	3886 <STACK_SIZE+0x1886>
    30c0:	009a      	lsls	r2, r3, #2
    30c2:	4b8b      	ldr	r3, [pc, #556]	; (32f0 <STACK_SIZE+0x12f0>)
    30c4:	18d3      	adds	r3, r2, r3
    30c6:	681b      	ldr	r3, [r3, #0]
    30c8:	469f      	mov	pc, r3
//------------------------------------------------------------------
// 8.0.x	write runSelfTestOnPor flag
//------------------------------------------------------------------
				case '0':
				{
					float dblValue = 0.0f;
    30ca:	2300      	movs	r3, #0
    30cc:	63bb      	str	r3, [r7, #56]	; 0x38
					uint8_t nFracSize = 0;
    30ce:	4b89      	ldr	r3, [pc, #548]	; (32f4 <STACK_SIZE+0x12f4>)
    30d0:	22b4      	movs	r2, #180	; 0xb4
    30d2:	0052      	lsls	r2, r2, #1
    30d4:	19d2      	adds	r2, r2, r7
    30d6:	18d3      	adds	r3, r2, r3
    30d8:	2200      	movs	r2, #0
    30da:	701a      	strb	r2, [r3, #0]
					
					nParamValue = (int)strtol((const char*)bParam, NULL, 10) * nSign;
    30dc:	1c3b      	adds	r3, r7, #0
    30de:	330c      	adds	r3, #12
    30e0:	1c18      	adds	r0, r3, #0
    30e2:	2100      	movs	r1, #0
    30e4:	220a      	movs	r2, #10
    30e6:	4b6d      	ldr	r3, [pc, #436]	; (329c <STACK_SIZE+0x129c>)
    30e8:	4798      	blx	r3
    30ea:	1c03      	adds	r3, r0, #0
    30ec:	20ae      	movs	r0, #174	; 0xae
    30ee:	0040      	lsls	r0, r0, #1
    30f0:	19c0      	adds	r0, r0, r7
    30f2:	6802      	ldr	r2, [r0, #0]
    30f4:	4353      	muls	r3, r2
    30f6:	63fb      	str	r3, [r7, #60]	; 0x3c
					int nFractionValue = (int)strtol((const char*)bFraction, NULL, 10) * nSign;
    30f8:	1d3b      	adds	r3, r7, #4
    30fa:	1c18      	adds	r0, r3, #0
    30fc:	2100      	movs	r1, #0
    30fe:	220a      	movs	r2, #10
    3100:	4b66      	ldr	r3, [pc, #408]	; (329c <STACK_SIZE+0x129c>)
    3102:	4798      	blx	r3
    3104:	1c03      	adds	r3, r0, #0
    3106:	21ae      	movs	r1, #174	; 0xae
    3108:	0049      	lsls	r1, r1, #1
    310a:	19c9      	adds	r1, r1, r7
    310c:	680a      	ldr	r2, [r1, #0]
    310e:	4353      	muls	r3, r2
    3110:	633b      	str	r3, [r7, #48]	; 0x30
					
					nFracSize = strlen(bFraction);
    3112:	1d3b      	adds	r3, r7, #4
    3114:	1c18      	adds	r0, r3, #0
    3116:	4b62      	ldr	r3, [pc, #392]	; (32a0 <STACK_SIZE+0x12a0>)
    3118:	4798      	blx	r3
    311a:	1c02      	adds	r2, r0, #0
    311c:	4b75      	ldr	r3, [pc, #468]	; (32f4 <STACK_SIZE+0x12f4>)
    311e:	20b4      	movs	r0, #180	; 0xb4
    3120:	0040      	lsls	r0, r0, #1
    3122:	19c0      	adds	r0, r0, r7
    3124:	18c3      	adds	r3, r0, r3
    3126:	701a      	strb	r2, [r3, #0]
					dblValue = (float)nParamValue + (float)((float)nFractionValue/(pow(10,nFracSize)));
    3128:	4b5e      	ldr	r3, [pc, #376]	; (32a4 <STACK_SIZE+0x12a4>)
    312a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    312c:	4798      	blx	r3
    312e:	4680      	mov	r8, r0
    3130:	4b5c      	ldr	r3, [pc, #368]	; (32a4 <STACK_SIZE+0x12a4>)
    3132:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3134:	4798      	blx	r3
    3136:	1c02      	adds	r2, r0, #0
    3138:	4b5b      	ldr	r3, [pc, #364]	; (32a8 <STACK_SIZE+0x12a8>)
    313a:	1c10      	adds	r0, r2, #0
    313c:	4798      	blx	r3
    313e:	1c05      	adds	r5, r0, #0
    3140:	1c0e      	adds	r6, r1, #0
    3142:	4b6c      	ldr	r3, [pc, #432]	; (32f4 <STACK_SIZE+0x12f4>)
    3144:	21b4      	movs	r1, #180	; 0xb4
    3146:	0049      	lsls	r1, r1, #1
    3148:	19c9      	adds	r1, r1, r7
    314a:	18cb      	adds	r3, r1, r3
    314c:	781a      	ldrb	r2, [r3, #0]
    314e:	4b57      	ldr	r3, [pc, #348]	; (32ac <STACK_SIZE+0x12ac>)
    3150:	1c10      	adds	r0, r2, #0
    3152:	4798      	blx	r3
    3154:	1c03      	adds	r3, r0, #0
    3156:	1c0c      	adds	r4, r1, #0
    3158:	4a4e      	ldr	r2, [pc, #312]	; (3294 <STACK_SIZE+0x1294>)
    315a:	494d      	ldr	r1, [pc, #308]	; (3290 <STACK_SIZE+0x1290>)
    315c:	1c08      	adds	r0, r1, #0
    315e:	1c11      	adds	r1, r2, #0
    3160:	1c1a      	adds	r2, r3, #0
    3162:	1c23      	adds	r3, r4, #0
    3164:	4c52      	ldr	r4, [pc, #328]	; (32b0 <STACK_SIZE+0x12b0>)
    3166:	47a0      	blx	r4
    3168:	1c03      	adds	r3, r0, #0
    316a:	1c0c      	adds	r4, r1, #0
    316c:	4a51      	ldr	r2, [pc, #324]	; (32b4 <STACK_SIZE+0x12b4>)
    316e:	4694      	mov	ip, r2
    3170:	1c28      	adds	r0, r5, #0
    3172:	1c31      	adds	r1, r6, #0
    3174:	1c1a      	adds	r2, r3, #0
    3176:	1c23      	adds	r3, r4, #0
    3178:	47e0      	blx	ip
    317a:	1c03      	adds	r3, r0, #0
    317c:	1c0c      	adds	r4, r1, #0
    317e:	4a4e      	ldr	r2, [pc, #312]	; (32b8 <STACK_SIZE+0x12b8>)
    3180:	1c18      	adds	r0, r3, #0
    3182:	1c21      	adds	r1, r4, #0
    3184:	4790      	blx	r2
    3186:	1c02      	adds	r2, r0, #0
    3188:	4b4c      	ldr	r3, [pc, #304]	; (32bc <STACK_SIZE+0x12bc>)
    318a:	4640      	mov	r0, r8
    318c:	1c11      	adds	r1, r2, #0
    318e:	4798      	blx	r3
    3190:	1c03      	adds	r3, r0, #0
    3192:	63bb      	str	r3, [r7, #56]	; 0x38
					runSelfTestOnPOR = (uint8_t)dblValue;
    3194:	4b58      	ldr	r3, [pc, #352]	; (32f8 <STACK_SIZE+0x12f8>)
    3196:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3198:	4798      	blx	r3
    319a:	1c03      	adds	r3, r0, #0
    319c:	b2da      	uxtb	r2, r3
    319e:	4b57      	ldr	r3, [pc, #348]	; (32fc <STACK_SIZE+0x12fc>)
    31a0:	701a      	strb	r2, [r3, #0]
					dbg_info("\n[runSelfTestOnPor set to %d]\n", runSelfTestOnPOR);
    31a2:	4b56      	ldr	r3, [pc, #344]	; (32fc <STACK_SIZE+0x12fc>)
    31a4:	781b      	ldrb	r3, [r3, #0]
    31a6:	4a56      	ldr	r2, [pc, #344]	; (3300 <STACK_SIZE+0x1300>)
    31a8:	1c10      	adds	r0, r2, #0
    31aa:	1c19      	adds	r1, r3, #0
    31ac:	4b46      	ldr	r3, [pc, #280]	; (32c8 <STACK_SIZE+0x12c8>)
    31ae:	4798      	blx	r3
					writeToEepromFlag = true;
    31b0:	4b46      	ldr	r3, [pc, #280]	; (32cc <STACK_SIZE+0x12cc>)
    31b2:	2201      	movs	r2, #1
    31b4:	701a      	strb	r2, [r3, #0]
					eepromDataInfo.pAddr = &runSelfTestOnPOR;
    31b6:	4b46      	ldr	r3, [pc, #280]	; (32d0 <STACK_SIZE+0x12d0>)
    31b8:	4a50      	ldr	r2, [pc, #320]	; (32fc <STACK_SIZE+0x12fc>)
    31ba:	601a      	str	r2, [r3, #0]
					eepromDataInfo.size = sizeof(runSelfTestOnPOR);
    31bc:	4b44      	ldr	r3, [pc, #272]	; (32d0 <STACK_SIZE+0x12d0>)
    31be:	2201      	movs	r2, #1
    31c0:	711a      	strb	r2, [r3, #4]
					eepromDataInfo.nonvolatileFlag = true;
    31c2:	4b43      	ldr	r3, [pc, #268]	; (32d0 <STACK_SIZE+0x12d0>)
    31c4:	2201      	movs	r2, #1
    31c6:	715a      	strb	r2, [r3, #5]
					break;
    31c8:	e362      	b.n	3890 <STACK_SIZE+0x1890>
//------------------------------------------------------------------
// 8.1.x	write MAC address
//------------------------------------------------------------------				
				case '1':
					// mac addr
					for (uint8_t n=0; n<6; n++)
    31ca:	2044      	movs	r0, #68	; 0x44
    31cc:	30ff      	adds	r0, #255	; 0xff
    31ce:	183b      	adds	r3, r7, r0
    31d0:	2200      	movs	r2, #0
    31d2:	701a      	strb	r2, [r3, #0]
    31d4:	e0fd      	b.n	33d2 <STACK_SIZE+0x13d2>
					{
						if ( (bParam[2*n]>='0' && bParam[2*n]<='9') ||
    31d6:	2144      	movs	r1, #68	; 0x44
    31d8:	31ff      	adds	r1, #255	; 0xff
    31da:	187b      	adds	r3, r7, r1
    31dc:	781b      	ldrb	r3, [r3, #0]
    31de:	005b      	lsls	r3, r3, #1
    31e0:	4a48      	ldr	r2, [pc, #288]	; (3304 <STACK_SIZE+0x1304>)
    31e2:	20b4      	movs	r0, #180	; 0xb4
    31e4:	0040      	lsls	r0, r0, #1
    31e6:	19c0      	adds	r0, r0, r7
    31e8:	1882      	adds	r2, r0, r2
    31ea:	5cd3      	ldrb	r3, [r2, r3]
    31ec:	2b2f      	cmp	r3, #47	; 0x2f
    31ee:	d90c      	bls.n	320a <STACK_SIZE+0x120a>
    31f0:	2144      	movs	r1, #68	; 0x44
    31f2:	31ff      	adds	r1, #255	; 0xff
    31f4:	187b      	adds	r3, r7, r1
    31f6:	781b      	ldrb	r3, [r3, #0]
    31f8:	005b      	lsls	r3, r3, #1
    31fa:	4a42      	ldr	r2, [pc, #264]	; (3304 <STACK_SIZE+0x1304>)
    31fc:	20b4      	movs	r0, #180	; 0xb4
    31fe:	0040      	lsls	r0, r0, #1
    3200:	19c0      	adds	r0, r0, r7
    3202:	1882      	adds	r2, r0, r2
    3204:	5cd3      	ldrb	r3, [r2, r3]
    3206:	2b39      	cmp	r3, #57	; 0x39
    3208:	d919      	bls.n	323e <STACK_SIZE+0x123e>
							 (bParam[2*n]>='A' && bParam[2*n]<='F') )
    320a:	2144      	movs	r1, #68	; 0x44
    320c:	31ff      	adds	r1, #255	; 0xff
    320e:	187b      	adds	r3, r7, r1
    3210:	781b      	ldrb	r3, [r3, #0]
    3212:	005b      	lsls	r3, r3, #1
    3214:	4a3b      	ldr	r2, [pc, #236]	; (3304 <STACK_SIZE+0x1304>)
    3216:	20b4      	movs	r0, #180	; 0xb4
    3218:	0040      	lsls	r0, r0, #1
    321a:	19c0      	adds	r0, r0, r7
    321c:	1882      	adds	r2, r0, r2
    321e:	5cd3      	ldrb	r3, [r2, r3]
//------------------------------------------------------------------				
				case '1':
					// mac addr
					for (uint8_t n=0; n<6; n++)
					{
						if ( (bParam[2*n]>='0' && bParam[2*n]<='9') ||
    3220:	2b40      	cmp	r3, #64	; 0x40
    3222:	d92c      	bls.n	327e <STACK_SIZE+0x127e>
							 (bParam[2*n]>='A' && bParam[2*n]<='F') )
    3224:	2144      	movs	r1, #68	; 0x44
    3226:	31ff      	adds	r1, #255	; 0xff
    3228:	187b      	adds	r3, r7, r1
    322a:	781b      	ldrb	r3, [r3, #0]
    322c:	005b      	lsls	r3, r3, #1
    322e:	4a35      	ldr	r2, [pc, #212]	; (3304 <STACK_SIZE+0x1304>)
    3230:	20b4      	movs	r0, #180	; 0xb4
    3232:	0040      	lsls	r0, r0, #1
    3234:	19c0      	adds	r0, r0, r7
    3236:	1882      	adds	r2, r0, r2
    3238:	5cd3      	ldrb	r3, [r2, r3]
    323a:	2b46      	cmp	r3, #70	; 0x46
    323c:	d81f      	bhi.n	327e <STACK_SIZE+0x127e>
						{
							bTemp[0] = bParam[2*n];
    323e:	2144      	movs	r1, #68	; 0x44
    3240:	31ff      	adds	r1, #255	; 0xff
    3242:	187b      	adds	r3, r7, r1
    3244:	781b      	ldrb	r3, [r3, #0]
    3246:	005b      	lsls	r3, r3, #1
    3248:	4a2e      	ldr	r2, [pc, #184]	; (3304 <STACK_SIZE+0x1304>)
    324a:	20b4      	movs	r0, #180	; 0xb4
    324c:	0040      	lsls	r0, r0, #1
    324e:	19c0      	adds	r0, r0, r7
    3250:	1882      	adds	r2, r0, r2
    3252:	5cd2      	ldrb	r2, [r2, r3]
    3254:	4b2c      	ldr	r3, [pc, #176]	; (3308 <STACK_SIZE+0x1308>)
    3256:	21b4      	movs	r1, #180	; 0xb4
    3258:	0049      	lsls	r1, r1, #1
    325a:	19c9      	adds	r1, r1, r7
    325c:	18cb      	adds	r3, r1, r3
    325e:	701a      	strb	r2, [r3, #0]
						else
						{
							dbg("\nsyntax error\n");
							return;
						}
						if ( (bParam[2*n+1]>='0' && bParam[2*n+1]<='9') ||
    3260:	2244      	movs	r2, #68	; 0x44
    3262:	32ff      	adds	r2, #255	; 0xff
    3264:	18bb      	adds	r3, r7, r2
    3266:	781b      	ldrb	r3, [r3, #0]
    3268:	005b      	lsls	r3, r3, #1
    326a:	3301      	adds	r3, #1
    326c:	4a25      	ldr	r2, [pc, #148]	; (3304 <STACK_SIZE+0x1304>)
    326e:	20b4      	movs	r0, #180	; 0xb4
    3270:	0040      	lsls	r0, r0, #1
    3272:	19c0      	adds	r0, r0, r7
    3274:	1882      	adds	r2, r0, r2
    3276:	5cd3      	ldrb	r3, [r2, r3]
    3278:	2b2f      	cmp	r3, #47	; 0x2f
    327a:	d849      	bhi.n	3310 <STACK_SIZE+0x1310>
    327c:	e056      	b.n	332c <STACK_SIZE+0x132c>
						{
							bTemp[0] = bParam[2*n];
						}
						else
						{
							dbg("\nsyntax error\n");
    327e:	4b23      	ldr	r3, [pc, #140]	; (330c <STACK_SIZE+0x130c>)
    3280:	1c18      	adds	r0, r3, #0
    3282:	4b19      	ldr	r3, [pc, #100]	; (32e8 <STACK_SIZE+0x12e8>)
    3284:	4798      	blx	r3
							return;
    3286:	f000 fc27 	bl	3ad8 <STACK_SIZE+0x1ad8>
    328a:	46c0      	nop			; (mov r8, r8)
    328c:	46c0      	nop			; (mov r8, r8)
    328e:	46c0      	nop			; (mov r8, r8)
    3290:	00000000 	.word	0x00000000
    3294:	40240000 	.word	0x40240000
    3298:	fffffee7 	.word	0xfffffee7
    329c:	0001bd69 	.word	0x0001bd69
    32a0:	0001bb1d 	.word	0x0001bb1d
    32a4:	000203b5 	.word	0x000203b5
    32a8:	00022111 	.word	0x00022111
    32ac:	000220a9 	.word	0x000220a9
    32b0:	00019c71 	.word	0x00019c71
    32b4:	00020b55 	.word	0x00020b55
    32b8:	000221b5 	.word	0x000221b5
    32bc:	0001f79d 	.word	0x0001f79d
    32c0:	20000d64 	.word	0x20000d64
    32c4:	00022fec 	.word	0x00022fec
    32c8:	0001b62d 	.word	0x0001b62d
    32cc:	200002f4 	.word	0x200002f4
    32d0:	200008dc 	.word	0x200008dc
    32d4:	20000d94 	.word	0x20000d94
    32d8:	fffffedb 	.word	0xfffffedb
    32dc:	200002a1 	.word	0x200002a1
    32e0:	00003c45 	.word	0x00003c45
    32e4:	00022cfc 	.word	0x00022cfc
    32e8:	0001b899 	.word	0x0001b899
    32ec:	fffffeb4 	.word	0xfffffeb4
    32f0:	00023340 	.word	0x00023340
    32f4:	fffffecf 	.word	0xfffffecf
    32f8:	0001f6bd 	.word	0x0001f6bd
    32fc:	2000004c 	.word	0x2000004c
    3300:	00023018 	.word	0x00023018
    3304:	fffffea4 	.word	0xfffffea4
    3308:	fffffe98 	.word	0xfffffe98
    330c:	00023038 	.word	0x00023038
						}
						if ( (bParam[2*n+1]>='0' && bParam[2*n+1]<='9') ||
    3310:	2144      	movs	r1, #68	; 0x44
    3312:	31ff      	adds	r1, #255	; 0xff
    3314:	187b      	adds	r3, r7, r1
    3316:	781b      	ldrb	r3, [r3, #0]
    3318:	005b      	lsls	r3, r3, #1
    331a:	3301      	adds	r3, #1
    331c:	4abd      	ldr	r2, [pc, #756]	; (3614 <STACK_SIZE+0x1614>)
    331e:	20b4      	movs	r0, #180	; 0xb4
    3320:	0040      	lsls	r0, r0, #1
    3322:	19c0      	adds	r0, r0, r7
    3324:	1882      	adds	r2, r0, r2
    3326:	5cd3      	ldrb	r3, [r2, r3]
    3328:	2b39      	cmp	r3, #57	; 0x39
    332a:	d91b      	bls.n	3364 <STACK_SIZE+0x1364>
							 (bParam[2*n+1]>='A' && bParam[2*n+1]<='F') )
    332c:	2144      	movs	r1, #68	; 0x44
    332e:	31ff      	adds	r1, #255	; 0xff
    3330:	187b      	adds	r3, r7, r1
    3332:	781b      	ldrb	r3, [r3, #0]
    3334:	005b      	lsls	r3, r3, #1
    3336:	3301      	adds	r3, #1
    3338:	4ab6      	ldr	r2, [pc, #728]	; (3614 <STACK_SIZE+0x1614>)
    333a:	20b4      	movs	r0, #180	; 0xb4
    333c:	0040      	lsls	r0, r0, #1
    333e:	19c0      	adds	r0, r0, r7
    3340:	1882      	adds	r2, r0, r2
    3342:	5cd3      	ldrb	r3, [r2, r3]
						else
						{
							dbg("\nsyntax error\n");
							return;
						}
						if ( (bParam[2*n+1]>='0' && bParam[2*n+1]<='9') ||
    3344:	2b40      	cmp	r3, #64	; 0x40
    3346:	d93e      	bls.n	33c6 <STACK_SIZE+0x13c6>
							 (bParam[2*n+1]>='A' && bParam[2*n+1]<='F') )
    3348:	2144      	movs	r1, #68	; 0x44
    334a:	31ff      	adds	r1, #255	; 0xff
    334c:	187b      	adds	r3, r7, r1
    334e:	781b      	ldrb	r3, [r3, #0]
    3350:	005b      	lsls	r3, r3, #1
    3352:	3301      	adds	r3, #1
    3354:	4aaf      	ldr	r2, [pc, #700]	; (3614 <STACK_SIZE+0x1614>)
    3356:	20b4      	movs	r0, #180	; 0xb4
    3358:	0040      	lsls	r0, r0, #1
    335a:	19c0      	adds	r0, r0, r7
    335c:	1882      	adds	r2, r0, r2
    335e:	5cd3      	ldrb	r3, [r2, r3]
    3360:	2b46      	cmp	r3, #70	; 0x46
    3362:	d830      	bhi.n	33c6 <STACK_SIZE+0x13c6>
						{
							bTemp[1] = bParam[2*n+1];
    3364:	2144      	movs	r1, #68	; 0x44
    3366:	31ff      	adds	r1, #255	; 0xff
    3368:	187b      	adds	r3, r7, r1
    336a:	781b      	ldrb	r3, [r3, #0]
    336c:	005b      	lsls	r3, r3, #1
    336e:	3301      	adds	r3, #1
    3370:	4aa8      	ldr	r2, [pc, #672]	; (3614 <STACK_SIZE+0x1614>)
    3372:	20b4      	movs	r0, #180	; 0xb4
    3374:	0040      	lsls	r0, r0, #1
    3376:	19c0      	adds	r0, r0, r7
    3378:	1882      	adds	r2, r0, r2
    337a:	5cd2      	ldrb	r2, [r2, r3]
    337c:	4ba6      	ldr	r3, [pc, #664]	; (3618 <STACK_SIZE+0x1618>)
    337e:	21b4      	movs	r1, #180	; 0xb4
    3380:	0049      	lsls	r1, r1, #1
    3382:	19c9      	adds	r1, r1, r7
    3384:	18cb      	adds	r3, r1, r3
    3386:	705a      	strb	r2, [r3, #1]
						else
						{
							dbg("\nsyntax error\n");
							return;
						}						
						bTemp[2] = '\0';
    3388:	4ba3      	ldr	r3, [pc, #652]	; (3618 <STACK_SIZE+0x1618>)
    338a:	22b4      	movs	r2, #180	; 0xb4
    338c:	0052      	lsls	r2, r2, #1
    338e:	19d2      	adds	r2, r2, r7
    3390:	18d3      	adds	r3, r2, r3
    3392:	2200      	movs	r2, #0
    3394:	709a      	strb	r2, [r3, #2]
						MAC_address[n] = (int)strtol((const char*)bTemp, NULL, 16);						
    3396:	2044      	movs	r0, #68	; 0x44
    3398:	30ff      	adds	r0, #255	; 0xff
    339a:	183b      	adds	r3, r7, r0
    339c:	781c      	ldrb	r4, [r3, #0]
    339e:	1c3b      	adds	r3, r7, #0
    33a0:	1c18      	adds	r0, r3, #0
    33a2:	2100      	movs	r1, #0
    33a4:	2210      	movs	r2, #16
    33a6:	4b9d      	ldr	r3, [pc, #628]	; (361c <STACK_SIZE+0x161c>)
    33a8:	4798      	blx	r3
    33aa:	1c03      	adds	r3, r0, #0
    33ac:	b2da      	uxtb	r2, r3
    33ae:	4b9c      	ldr	r3, [pc, #624]	; (3620 <STACK_SIZE+0x1620>)
    33b0:	551a      	strb	r2, [r3, r4]
//------------------------------------------------------------------
// 8.1.x	write MAC address
//------------------------------------------------------------------				
				case '1':
					// mac addr
					for (uint8_t n=0; n<6; n++)
    33b2:	2144      	movs	r1, #68	; 0x44
    33b4:	31ff      	adds	r1, #255	; 0xff
    33b6:	187b      	adds	r3, r7, r1
    33b8:	781a      	ldrb	r2, [r3, #0]
    33ba:	2044      	movs	r0, #68	; 0x44
    33bc:	30ff      	adds	r0, #255	; 0xff
    33be:	183b      	adds	r3, r7, r0
    33c0:	3201      	adds	r2, #1
    33c2:	701a      	strb	r2, [r3, #0]
    33c4:	e005      	b.n	33d2 <STACK_SIZE+0x13d2>
						{
							bTemp[1] = bParam[2*n+1];
						}
						else
						{
							dbg("\nsyntax error\n");
    33c6:	4b97      	ldr	r3, [pc, #604]	; (3624 <STACK_SIZE+0x1624>)
    33c8:	1c18      	adds	r0, r3, #0
    33ca:	4b97      	ldr	r3, [pc, #604]	; (3628 <STACK_SIZE+0x1628>)
    33cc:	4798      	blx	r3
							return;
    33ce:	46c0      	nop			; (mov r8, r8)
    33d0:	e382      	b.n	3ad8 <STACK_SIZE+0x1ad8>
//------------------------------------------------------------------
// 8.1.x	write MAC address
//------------------------------------------------------------------				
				case '1':
					// mac addr
					for (uint8_t n=0; n<6; n++)
    33d2:	2144      	movs	r1, #68	; 0x44
    33d4:	31ff      	adds	r1, #255	; 0xff
    33d6:	187b      	adds	r3, r7, r1
    33d8:	781b      	ldrb	r3, [r3, #0]
    33da:	2b05      	cmp	r3, #5
    33dc:	d800      	bhi.n	33e0 <STACK_SIZE+0x13e0>
    33de:	e6fa      	b.n	31d6 <STACK_SIZE+0x11d6>
							return;
						}						
						bTemp[2] = '\0';
						MAC_address[n] = (int)strtol((const char*)bTemp, NULL, 16);						
					}			
					eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    33e0:	4b92      	ldr	r3, [pc, #584]	; (362c <STACK_SIZE+0x162c>)
    33e2:	2000      	movs	r0, #0
    33e4:	1c19      	adds	r1, r3, #0
    33e6:	4b92      	ldr	r3, [pc, #584]	; (3630 <STACK_SIZE+0x1630>)
    33e8:	4798      	blx	r3
					eepromPageData[12] = MAC_address[0];
    33ea:	4b8d      	ldr	r3, [pc, #564]	; (3620 <STACK_SIZE+0x1620>)
    33ec:	781a      	ldrb	r2, [r3, #0]
    33ee:	4b8f      	ldr	r3, [pc, #572]	; (362c <STACK_SIZE+0x162c>)
    33f0:	731a      	strb	r2, [r3, #12]
					eepromPageData[13] = MAC_address[1];
    33f2:	4b8b      	ldr	r3, [pc, #556]	; (3620 <STACK_SIZE+0x1620>)
    33f4:	785a      	ldrb	r2, [r3, #1]
    33f6:	4b8d      	ldr	r3, [pc, #564]	; (362c <STACK_SIZE+0x162c>)
    33f8:	735a      	strb	r2, [r3, #13]
					eepromPageData[14] = MAC_address[2];
    33fa:	4b89      	ldr	r3, [pc, #548]	; (3620 <STACK_SIZE+0x1620>)
    33fc:	789a      	ldrb	r2, [r3, #2]
    33fe:	4b8b      	ldr	r3, [pc, #556]	; (362c <STACK_SIZE+0x162c>)
    3400:	739a      	strb	r2, [r3, #14]
					eepromPageData[15] = MAC_address[3];
    3402:	4b87      	ldr	r3, [pc, #540]	; (3620 <STACK_SIZE+0x1620>)
    3404:	78da      	ldrb	r2, [r3, #3]
    3406:	4b89      	ldr	r3, [pc, #548]	; (362c <STACK_SIZE+0x162c>)
    3408:	73da      	strb	r2, [r3, #15]
					eepromPageData[16] = MAC_address[4];
    340a:	4b85      	ldr	r3, [pc, #532]	; (3620 <STACK_SIZE+0x1620>)
    340c:	791a      	ldrb	r2, [r3, #4]
    340e:	4b87      	ldr	r3, [pc, #540]	; (362c <STACK_SIZE+0x162c>)
    3410:	741a      	strb	r2, [r3, #16]
					eepromPageData[17] = MAC_address[5];
    3412:	4b83      	ldr	r3, [pc, #524]	; (3620 <STACK_SIZE+0x1620>)
    3414:	795a      	ldrb	r2, [r3, #5]
    3416:	4b85      	ldr	r3, [pc, #532]	; (362c <STACK_SIZE+0x162c>)
    3418:	745a      	strb	r2, [r3, #17]
					eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
    341a:	4b84      	ldr	r3, [pc, #528]	; (362c <STACK_SIZE+0x162c>)
    341c:	2000      	movs	r0, #0
    341e:	1c19      	adds	r1, r3, #0
    3420:	4b84      	ldr	r3, [pc, #528]	; (3634 <STACK_SIZE+0x1634>)
    3422:	4798      	blx	r3
					eeprom_emulator_commit_page_buffer();
    3424:	4b84      	ldr	r3, [pc, #528]	; (3638 <STACK_SIZE+0x1638>)
    3426:	4798      	blx	r3
					dbg("\n[mac addr is programmed]\n");
    3428:	4b84      	ldr	r3, [pc, #528]	; (363c <STACK_SIZE+0x163c>)
    342a:	1c18      	adds	r0, r3, #0
    342c:	4b7e      	ldr	r3, [pc, #504]	; (3628 <STACK_SIZE+0x1628>)
    342e:	4798      	blx	r3
					eepromStatus |= EEPROM_MACADDR_WRITTEN;
    3430:	4b83      	ldr	r3, [pc, #524]	; (3640 <STACK_SIZE+0x1640>)
    3432:	681b      	ldr	r3, [r3, #0]
    3434:	2220      	movs	r2, #32
    3436:	431a      	orrs	r2, r3
    3438:	4b81      	ldr	r3, [pc, #516]	; (3640 <STACK_SIZE+0x1640>)
    343a:	601a      	str	r2, [r3, #0]
					eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    343c:	4b7b      	ldr	r3, [pc, #492]	; (362c <STACK_SIZE+0x162c>)
    343e:	2000      	movs	r0, #0
    3440:	1c19      	adds	r1, r3, #0
    3442:	4b7b      	ldr	r3, [pc, #492]	; (3630 <STACK_SIZE+0x1630>)
    3444:	4798      	blx	r3
					eepromPageData[19]  = (~eepromStatus) & 0x0000ff;
    3446:	4b7e      	ldr	r3, [pc, #504]	; (3640 <STACK_SIZE+0x1640>)
    3448:	681b      	ldr	r3, [r3, #0]
    344a:	b2db      	uxtb	r3, r3
    344c:	43db      	mvns	r3, r3
    344e:	b2da      	uxtb	r2, r3
    3450:	4b76      	ldr	r3, [pc, #472]	; (362c <STACK_SIZE+0x162c>)
    3452:	74da      	strb	r2, [r3, #19]
					eepromPageData[20]  = ((~eepromStatus) & 0x00ff00) >> 8;
    3454:	4b7a      	ldr	r3, [pc, #488]	; (3640 <STACK_SIZE+0x1640>)
    3456:	681b      	ldr	r3, [r3, #0]
    3458:	43da      	mvns	r2, r3
    345a:	23ff      	movs	r3, #255	; 0xff
    345c:	021b      	lsls	r3, r3, #8
    345e:	4013      	ands	r3, r2
    3460:	0a1b      	lsrs	r3, r3, #8
    3462:	b2da      	uxtb	r2, r3
    3464:	4b71      	ldr	r3, [pc, #452]	; (362c <STACK_SIZE+0x162c>)
    3466:	751a      	strb	r2, [r3, #20]
					eepromPageData[21]  = ((~eepromStatus) & 0xff0000) >> 16;
    3468:	4b75      	ldr	r3, [pc, #468]	; (3640 <STACK_SIZE+0x1640>)
    346a:	681b      	ldr	r3, [r3, #0]
    346c:	43da      	mvns	r2, r3
    346e:	23ff      	movs	r3, #255	; 0xff
    3470:	041b      	lsls	r3, r3, #16
    3472:	4013      	ands	r3, r2
    3474:	0c1b      	lsrs	r3, r3, #16
    3476:	b2da      	uxtb	r2, r3
    3478:	4b6c      	ldr	r3, [pc, #432]	; (362c <STACK_SIZE+0x162c>)
    347a:	755a      	strb	r2, [r3, #21]
					eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
    347c:	4b6b      	ldr	r3, [pc, #428]	; (362c <STACK_SIZE+0x162c>)
    347e:	2000      	movs	r0, #0
    3480:	1c19      	adds	r1, r3, #0
    3482:	4b6c      	ldr	r3, [pc, #432]	; (3634 <STACK_SIZE+0x1634>)
    3484:	4798      	blx	r3
					eeprom_emulator_commit_page_buffer();
    3486:	4b6c      	ldr	r3, [pc, #432]	; (3638 <STACK_SIZE+0x1638>)
    3488:	4798      	blx	r3
					break;	
    348a:	e201      	b.n	3890 <STACK_SIZE+0x1890>
//------------------------------------------------------------------
// 8.2.x	write serial number
//------------------------------------------------------------------							
				case '2':
					// serial number
					eeprom_emulator_read_page(EEPROM_PAGE2, eepromPageData);
    348c:	4b67      	ldr	r3, [pc, #412]	; (362c <STACK_SIZE+0x162c>)
    348e:	2002      	movs	r0, #2
    3490:	1c19      	adds	r1, r3, #0
    3492:	4b67      	ldr	r3, [pc, #412]	; (3630 <STACK_SIZE+0x1630>)
    3494:	4798      	blx	r3
					eepromPageData[0] = bParam[0];
    3496:	4b5f      	ldr	r3, [pc, #380]	; (3614 <STACK_SIZE+0x1614>)
    3498:	22b4      	movs	r2, #180	; 0xb4
    349a:	0052      	lsls	r2, r2, #1
    349c:	19d2      	adds	r2, r2, r7
    349e:	18d3      	adds	r3, r2, r3
    34a0:	781a      	ldrb	r2, [r3, #0]
    34a2:	4b62      	ldr	r3, [pc, #392]	; (362c <STACK_SIZE+0x162c>)
    34a4:	701a      	strb	r2, [r3, #0]
					eepromPageData[1] = bParam[1];
    34a6:	4b5b      	ldr	r3, [pc, #364]	; (3614 <STACK_SIZE+0x1614>)
    34a8:	20b4      	movs	r0, #180	; 0xb4
    34aa:	0040      	lsls	r0, r0, #1
    34ac:	19c0      	adds	r0, r0, r7
    34ae:	18c3      	adds	r3, r0, r3
    34b0:	785a      	ldrb	r2, [r3, #1]
    34b2:	4b5e      	ldr	r3, [pc, #376]	; (362c <STACK_SIZE+0x162c>)
    34b4:	705a      	strb	r2, [r3, #1]
					eepromPageData[2] = bParam[2];
    34b6:	4b57      	ldr	r3, [pc, #348]	; (3614 <STACK_SIZE+0x1614>)
    34b8:	21b4      	movs	r1, #180	; 0xb4
    34ba:	0049      	lsls	r1, r1, #1
    34bc:	19c9      	adds	r1, r1, r7
    34be:	18cb      	adds	r3, r1, r3
    34c0:	789a      	ldrb	r2, [r3, #2]
    34c2:	4b5a      	ldr	r3, [pc, #360]	; (362c <STACK_SIZE+0x162c>)
    34c4:	709a      	strb	r2, [r3, #2]
					eepromPageData[3] = bParam[3];
    34c6:	4b53      	ldr	r3, [pc, #332]	; (3614 <STACK_SIZE+0x1614>)
    34c8:	22b4      	movs	r2, #180	; 0xb4
    34ca:	0052      	lsls	r2, r2, #1
    34cc:	19d2      	adds	r2, r2, r7
    34ce:	18d3      	adds	r3, r2, r3
    34d0:	78da      	ldrb	r2, [r3, #3]
    34d2:	4b56      	ldr	r3, [pc, #344]	; (362c <STACK_SIZE+0x162c>)
    34d4:	70da      	strb	r2, [r3, #3]
					eepromPageData[4] = bParam[4];
    34d6:	4b4f      	ldr	r3, [pc, #316]	; (3614 <STACK_SIZE+0x1614>)
    34d8:	20b4      	movs	r0, #180	; 0xb4
    34da:	0040      	lsls	r0, r0, #1
    34dc:	19c0      	adds	r0, r0, r7
    34de:	18c3      	adds	r3, r0, r3
    34e0:	791a      	ldrb	r2, [r3, #4]
    34e2:	4b52      	ldr	r3, [pc, #328]	; (362c <STACK_SIZE+0x162c>)
    34e4:	711a      	strb	r2, [r3, #4]
					eepromPageData[5] = bParam[5];
    34e6:	4b4b      	ldr	r3, [pc, #300]	; (3614 <STACK_SIZE+0x1614>)
    34e8:	21b4      	movs	r1, #180	; 0xb4
    34ea:	0049      	lsls	r1, r1, #1
    34ec:	19c9      	adds	r1, r1, r7
    34ee:	18cb      	adds	r3, r1, r3
    34f0:	795a      	ldrb	r2, [r3, #5]
    34f2:	4b4e      	ldr	r3, [pc, #312]	; (362c <STACK_SIZE+0x162c>)
    34f4:	715a      	strb	r2, [r3, #5]
					eepromPageData[6] = bParam[6];
    34f6:	4b47      	ldr	r3, [pc, #284]	; (3614 <STACK_SIZE+0x1614>)
    34f8:	22b4      	movs	r2, #180	; 0xb4
    34fa:	0052      	lsls	r2, r2, #1
    34fc:	19d2      	adds	r2, r2, r7
    34fe:	18d3      	adds	r3, r2, r3
    3500:	799a      	ldrb	r2, [r3, #6]
    3502:	4b4a      	ldr	r3, [pc, #296]	; (362c <STACK_SIZE+0x162c>)
    3504:	719a      	strb	r2, [r3, #6]
					eepromPageData[7] = bParam[7];
    3506:	4b43      	ldr	r3, [pc, #268]	; (3614 <STACK_SIZE+0x1614>)
    3508:	20b4      	movs	r0, #180	; 0xb4
    350a:	0040      	lsls	r0, r0, #1
    350c:	19c0      	adds	r0, r0, r7
    350e:	18c3      	adds	r3, r0, r3
    3510:	79da      	ldrb	r2, [r3, #7]
    3512:	4b46      	ldr	r3, [pc, #280]	; (362c <STACK_SIZE+0x162c>)
    3514:	71da      	strb	r2, [r3, #7]
					eepromPageData[8] = bParam[8];
    3516:	4b3f      	ldr	r3, [pc, #252]	; (3614 <STACK_SIZE+0x1614>)
    3518:	21b4      	movs	r1, #180	; 0xb4
    351a:	0049      	lsls	r1, r1, #1
    351c:	19c9      	adds	r1, r1, r7
    351e:	18cb      	adds	r3, r1, r3
    3520:	7a1a      	ldrb	r2, [r3, #8]
    3522:	4b42      	ldr	r3, [pc, #264]	; (362c <STACK_SIZE+0x162c>)
    3524:	721a      	strb	r2, [r3, #8]
					eepromPageData[9] = bParam[9];
    3526:	4b3b      	ldr	r3, [pc, #236]	; (3614 <STACK_SIZE+0x1614>)
    3528:	22b4      	movs	r2, #180	; 0xb4
    352a:	0052      	lsls	r2, r2, #1
    352c:	19d2      	adds	r2, r2, r7
    352e:	18d3      	adds	r3, r2, r3
    3530:	7a5a      	ldrb	r2, [r3, #9]
    3532:	4b3e      	ldr	r3, [pc, #248]	; (362c <STACK_SIZE+0x162c>)
    3534:	725a      	strb	r2, [r3, #9]
					eepromPageData[10] = bParam[10];
    3536:	4b37      	ldr	r3, [pc, #220]	; (3614 <STACK_SIZE+0x1614>)
    3538:	20b4      	movs	r0, #180	; 0xb4
    353a:	0040      	lsls	r0, r0, #1
    353c:	19c0      	adds	r0, r0, r7
    353e:	18c3      	adds	r3, r0, r3
    3540:	7a9a      	ldrb	r2, [r3, #10]
    3542:	4b3a      	ldr	r3, [pc, #232]	; (362c <STACK_SIZE+0x162c>)
    3544:	729a      	strb	r2, [r3, #10]
					eepromPageData[11] = bParam[11];
    3546:	4b33      	ldr	r3, [pc, #204]	; (3614 <STACK_SIZE+0x1614>)
    3548:	21b4      	movs	r1, #180	; 0xb4
    354a:	0049      	lsls	r1, r1, #1
    354c:	19c9      	adds	r1, r1, r7
    354e:	18cb      	adds	r3, r1, r3
    3550:	7ada      	ldrb	r2, [r3, #11]
    3552:	4b36      	ldr	r3, [pc, #216]	; (362c <STACK_SIZE+0x162c>)
    3554:	72da      	strb	r2, [r3, #11]
					eepromPageData[12] = bParam[12];
    3556:	4b2f      	ldr	r3, [pc, #188]	; (3614 <STACK_SIZE+0x1614>)
    3558:	22b4      	movs	r2, #180	; 0xb4
    355a:	0052      	lsls	r2, r2, #1
    355c:	19d2      	adds	r2, r2, r7
    355e:	18d3      	adds	r3, r2, r3
    3560:	7b1a      	ldrb	r2, [r3, #12]
    3562:	4b32      	ldr	r3, [pc, #200]	; (362c <STACK_SIZE+0x162c>)
    3564:	731a      	strb	r2, [r3, #12]
					eepromPageData[13] = bParam[13];
    3566:	4b2b      	ldr	r3, [pc, #172]	; (3614 <STACK_SIZE+0x1614>)
    3568:	20b4      	movs	r0, #180	; 0xb4
    356a:	0040      	lsls	r0, r0, #1
    356c:	19c0      	adds	r0, r0, r7
    356e:	18c3      	adds	r3, r0, r3
    3570:	7b5a      	ldrb	r2, [r3, #13]
    3572:	4b2e      	ldr	r3, [pc, #184]	; (362c <STACK_SIZE+0x162c>)
    3574:	735a      	strb	r2, [r3, #13]
					eepromPageData[14] = bParam[14];
    3576:	4b27      	ldr	r3, [pc, #156]	; (3614 <STACK_SIZE+0x1614>)
    3578:	21b4      	movs	r1, #180	; 0xb4
    357a:	0049      	lsls	r1, r1, #1
    357c:	19c9      	adds	r1, r1, r7
    357e:	18cb      	adds	r3, r1, r3
    3580:	7b9a      	ldrb	r2, [r3, #14]
    3582:	4b2a      	ldr	r3, [pc, #168]	; (362c <STACK_SIZE+0x162c>)
    3584:	739a      	strb	r2, [r3, #14]
					eepromPageData[15] = '\0';
    3586:	4b29      	ldr	r3, [pc, #164]	; (362c <STACK_SIZE+0x162c>)
    3588:	2200      	movs	r2, #0
    358a:	73da      	strb	r2, [r3, #15]
					memcpy(strSerial, eepromPageData, SERIAL_SIZE);
    358c:	4a2d      	ldr	r2, [pc, #180]	; (3644 <STACK_SIZE+0x1644>)
    358e:	4b27      	ldr	r3, [pc, #156]	; (362c <STACK_SIZE+0x162c>)
    3590:	1c11      	adds	r1, r2, #0
    3592:	1c1a      	adds	r2, r3, #0
    3594:	230f      	movs	r3, #15
    3596:	1c08      	adds	r0, r1, #0
    3598:	1c11      	adds	r1, r2, #0
    359a:	1c1a      	adds	r2, r3, #0
    359c:	4b2a      	ldr	r3, [pc, #168]	; (3648 <STACK_SIZE+0x1648>)
    359e:	4798      	blx	r3
					eeprom_emulator_write_page(EEPROM_PAGE2, eepromPageData);
    35a0:	4b22      	ldr	r3, [pc, #136]	; (362c <STACK_SIZE+0x162c>)
    35a2:	2002      	movs	r0, #2
    35a4:	1c19      	adds	r1, r3, #0
    35a6:	4b23      	ldr	r3, [pc, #140]	; (3634 <STACK_SIZE+0x1634>)
    35a8:	4798      	blx	r3
					eeprom_emulator_commit_page_buffer();
    35aa:	4b23      	ldr	r3, [pc, #140]	; (3638 <STACK_SIZE+0x1638>)
    35ac:	4798      	blx	r3
					dbg("\n[serial number is programmed]\n");
    35ae:	4b27      	ldr	r3, [pc, #156]	; (364c <STACK_SIZE+0x164c>)
    35b0:	1c18      	adds	r0, r3, #0
    35b2:	4b1d      	ldr	r3, [pc, #116]	; (3628 <STACK_SIZE+0x1628>)
    35b4:	4798      	blx	r3
					eepromStatus |= EEPROM_SERIAL_WRITTEN;
    35b6:	4b22      	ldr	r3, [pc, #136]	; (3640 <STACK_SIZE+0x1640>)
    35b8:	681b      	ldr	r3, [r3, #0]
    35ba:	2240      	movs	r2, #64	; 0x40
    35bc:	431a      	orrs	r2, r3
    35be:	4b20      	ldr	r3, [pc, #128]	; (3640 <STACK_SIZE+0x1640>)
    35c0:	601a      	str	r2, [r3, #0]
					eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    35c2:	4b1a      	ldr	r3, [pc, #104]	; (362c <STACK_SIZE+0x162c>)
    35c4:	2000      	movs	r0, #0
    35c6:	1c19      	adds	r1, r3, #0
    35c8:	4b19      	ldr	r3, [pc, #100]	; (3630 <STACK_SIZE+0x1630>)
    35ca:	4798      	blx	r3
					eepromPageData[19]  = (~eepromStatus) & 0x0000ff;
    35cc:	4b1c      	ldr	r3, [pc, #112]	; (3640 <STACK_SIZE+0x1640>)
    35ce:	681b      	ldr	r3, [r3, #0]
    35d0:	b2db      	uxtb	r3, r3
    35d2:	43db      	mvns	r3, r3
    35d4:	b2da      	uxtb	r2, r3
    35d6:	4b15      	ldr	r3, [pc, #84]	; (362c <STACK_SIZE+0x162c>)
    35d8:	74da      	strb	r2, [r3, #19]
					eepromPageData[20]  = ((~eepromStatus) & 0x00ff00) >> 8;
    35da:	4b19      	ldr	r3, [pc, #100]	; (3640 <STACK_SIZE+0x1640>)
    35dc:	681b      	ldr	r3, [r3, #0]
    35de:	43da      	mvns	r2, r3
    35e0:	23ff      	movs	r3, #255	; 0xff
    35e2:	021b      	lsls	r3, r3, #8
    35e4:	4013      	ands	r3, r2
    35e6:	0a1b      	lsrs	r3, r3, #8
    35e8:	b2da      	uxtb	r2, r3
    35ea:	4b10      	ldr	r3, [pc, #64]	; (362c <STACK_SIZE+0x162c>)
    35ec:	751a      	strb	r2, [r3, #20]
					eepromPageData[21]  = ((~eepromStatus) & 0xff0000) >> 16;
    35ee:	4b14      	ldr	r3, [pc, #80]	; (3640 <STACK_SIZE+0x1640>)
    35f0:	681b      	ldr	r3, [r3, #0]
    35f2:	43da      	mvns	r2, r3
    35f4:	23ff      	movs	r3, #255	; 0xff
    35f6:	041b      	lsls	r3, r3, #16
    35f8:	4013      	ands	r3, r2
    35fa:	0c1b      	lsrs	r3, r3, #16
    35fc:	b2da      	uxtb	r2, r3
    35fe:	4b0b      	ldr	r3, [pc, #44]	; (362c <STACK_SIZE+0x162c>)
    3600:	755a      	strb	r2, [r3, #21]
					eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
    3602:	4b0a      	ldr	r3, [pc, #40]	; (362c <STACK_SIZE+0x162c>)
    3604:	2000      	movs	r0, #0
    3606:	1c19      	adds	r1, r3, #0
    3608:	4b0a      	ldr	r3, [pc, #40]	; (3634 <STACK_SIZE+0x1634>)
    360a:	4798      	blx	r3
					eeprom_emulator_commit_page_buffer();					
    360c:	4b0a      	ldr	r3, [pc, #40]	; (3638 <STACK_SIZE+0x1638>)
    360e:	4798      	blx	r3
					break;
    3610:	e13e      	b.n	3890 <STACK_SIZE+0x1890>
    3612:	46c0      	nop			; (mov r8, r8)
    3614:	fffffea4 	.word	0xfffffea4
    3618:	fffffe98 	.word	0xfffffe98
    361c:	0001bd69 	.word	0x0001bd69
    3620:	20000904 	.word	0x20000904
    3624:	00023038 	.word	0x00023038
    3628:	0001b899 	.word	0x0001b899
    362c:	20000888 	.word	0x20000888
    3630:	00019695 	.word	0x00019695
    3634:	00019575 	.word	0x00019575
    3638:	0001973d 	.word	0x0001973d
    363c:	00023048 	.word	0x00023048
    3640:	200002f8 	.word	0x200002f8
    3644:	200008f4 	.word	0x200008f4
    3648:	0001b375 	.word	0x0001b375
    364c:	00023064 	.word	0x00023064
//------------------------------------------------------------------
// 8.3.x	write model number
//------------------------------------------------------------------					
				case '3':
					// model number
					eeprom_emulator_read_page(EEPROM_PAGE1, eepromPageData);
    3650:	4bd4      	ldr	r3, [pc, #848]	; (39a4 <STACK_SIZE+0x19a4>)
    3652:	2001      	movs	r0, #1
    3654:	1c19      	adds	r1, r3, #0
    3656:	4bd4      	ldr	r3, [pc, #848]	; (39a8 <STACK_SIZE+0x19a8>)
    3658:	4798      	blx	r3
					eepromPageData[0] = bParam[0];
    365a:	4bd4      	ldr	r3, [pc, #848]	; (39ac <STACK_SIZE+0x19ac>)
    365c:	22b4      	movs	r2, #180	; 0xb4
    365e:	0052      	lsls	r2, r2, #1
    3660:	19d2      	adds	r2, r2, r7
    3662:	18d3      	adds	r3, r2, r3
    3664:	781a      	ldrb	r2, [r3, #0]
    3666:	4bcf      	ldr	r3, [pc, #828]	; (39a4 <STACK_SIZE+0x19a4>)
    3668:	701a      	strb	r2, [r3, #0]
					eepromPageData[1] = bParam[1];
    366a:	4bd0      	ldr	r3, [pc, #832]	; (39ac <STACK_SIZE+0x19ac>)
    366c:	20b4      	movs	r0, #180	; 0xb4
    366e:	0040      	lsls	r0, r0, #1
    3670:	19c0      	adds	r0, r0, r7
    3672:	18c3      	adds	r3, r0, r3
    3674:	785a      	ldrb	r2, [r3, #1]
    3676:	4bcb      	ldr	r3, [pc, #812]	; (39a4 <STACK_SIZE+0x19a4>)
    3678:	705a      	strb	r2, [r3, #1]
					eepromPageData[2] = bParam[2];
    367a:	4bcc      	ldr	r3, [pc, #816]	; (39ac <STACK_SIZE+0x19ac>)
    367c:	21b4      	movs	r1, #180	; 0xb4
    367e:	0049      	lsls	r1, r1, #1
    3680:	19c9      	adds	r1, r1, r7
    3682:	18cb      	adds	r3, r1, r3
    3684:	789a      	ldrb	r2, [r3, #2]
    3686:	4bc7      	ldr	r3, [pc, #796]	; (39a4 <STACK_SIZE+0x19a4>)
    3688:	709a      	strb	r2, [r3, #2]
					eepromPageData[3] = bParam[3];
    368a:	4bc8      	ldr	r3, [pc, #800]	; (39ac <STACK_SIZE+0x19ac>)
    368c:	22b4      	movs	r2, #180	; 0xb4
    368e:	0052      	lsls	r2, r2, #1
    3690:	19d2      	adds	r2, r2, r7
    3692:	18d3      	adds	r3, r2, r3
    3694:	78da      	ldrb	r2, [r3, #3]
    3696:	4bc3      	ldr	r3, [pc, #780]	; (39a4 <STACK_SIZE+0x19a4>)
    3698:	70da      	strb	r2, [r3, #3]
					eepromPageData[4] = bParam[4];
    369a:	4bc4      	ldr	r3, [pc, #784]	; (39ac <STACK_SIZE+0x19ac>)
    369c:	20b4      	movs	r0, #180	; 0xb4
    369e:	0040      	lsls	r0, r0, #1
    36a0:	19c0      	adds	r0, r0, r7
    36a2:	18c3      	adds	r3, r0, r3
    36a4:	791a      	ldrb	r2, [r3, #4]
    36a6:	4bbf      	ldr	r3, [pc, #764]	; (39a4 <STACK_SIZE+0x19a4>)
    36a8:	711a      	strb	r2, [r3, #4]
					eepromPageData[5] = bParam[5];
    36aa:	4bc0      	ldr	r3, [pc, #768]	; (39ac <STACK_SIZE+0x19ac>)
    36ac:	21b4      	movs	r1, #180	; 0xb4
    36ae:	0049      	lsls	r1, r1, #1
    36b0:	19c9      	adds	r1, r1, r7
    36b2:	18cb      	adds	r3, r1, r3
    36b4:	795a      	ldrb	r2, [r3, #5]
    36b6:	4bbb      	ldr	r3, [pc, #748]	; (39a4 <STACK_SIZE+0x19a4>)
    36b8:	715a      	strb	r2, [r3, #5]
					eepromPageData[6] = bParam[6];
    36ba:	4bbc      	ldr	r3, [pc, #752]	; (39ac <STACK_SIZE+0x19ac>)
    36bc:	22b4      	movs	r2, #180	; 0xb4
    36be:	0052      	lsls	r2, r2, #1
    36c0:	19d2      	adds	r2, r2, r7
    36c2:	18d3      	adds	r3, r2, r3
    36c4:	799a      	ldrb	r2, [r3, #6]
    36c6:	4bb7      	ldr	r3, [pc, #732]	; (39a4 <STACK_SIZE+0x19a4>)
    36c8:	719a      	strb	r2, [r3, #6]
					eepromPageData[7] = bParam[7];
    36ca:	4bb8      	ldr	r3, [pc, #736]	; (39ac <STACK_SIZE+0x19ac>)
    36cc:	20b4      	movs	r0, #180	; 0xb4
    36ce:	0040      	lsls	r0, r0, #1
    36d0:	19c0      	adds	r0, r0, r7
    36d2:	18c3      	adds	r3, r0, r3
    36d4:	79da      	ldrb	r2, [r3, #7]
    36d6:	4bb3      	ldr	r3, [pc, #716]	; (39a4 <STACK_SIZE+0x19a4>)
    36d8:	71da      	strb	r2, [r3, #7]
					eepromPageData[8] = bParam[8];
    36da:	4bb4      	ldr	r3, [pc, #720]	; (39ac <STACK_SIZE+0x19ac>)
    36dc:	21b4      	movs	r1, #180	; 0xb4
    36de:	0049      	lsls	r1, r1, #1
    36e0:	19c9      	adds	r1, r1, r7
    36e2:	18cb      	adds	r3, r1, r3
    36e4:	7a1a      	ldrb	r2, [r3, #8]
    36e6:	4baf      	ldr	r3, [pc, #700]	; (39a4 <STACK_SIZE+0x19a4>)
    36e8:	721a      	strb	r2, [r3, #8]
					eepromPageData[9] = bParam[9];
    36ea:	4bb0      	ldr	r3, [pc, #704]	; (39ac <STACK_SIZE+0x19ac>)
    36ec:	22b4      	movs	r2, #180	; 0xb4
    36ee:	0052      	lsls	r2, r2, #1
    36f0:	19d2      	adds	r2, r2, r7
    36f2:	18d3      	adds	r3, r2, r3
    36f4:	7a5a      	ldrb	r2, [r3, #9]
    36f6:	4bab      	ldr	r3, [pc, #684]	; (39a4 <STACK_SIZE+0x19a4>)
    36f8:	725a      	strb	r2, [r3, #9]
					eepromPageData[10] = bParam[10];
    36fa:	4bac      	ldr	r3, [pc, #688]	; (39ac <STACK_SIZE+0x19ac>)
    36fc:	20b4      	movs	r0, #180	; 0xb4
    36fe:	0040      	lsls	r0, r0, #1
    3700:	19c0      	adds	r0, r0, r7
    3702:	18c3      	adds	r3, r0, r3
    3704:	7a9a      	ldrb	r2, [r3, #10]
    3706:	4ba7      	ldr	r3, [pc, #668]	; (39a4 <STACK_SIZE+0x19a4>)
    3708:	729a      	strb	r2, [r3, #10]
					eepromPageData[11] = bParam[11];
    370a:	4ba8      	ldr	r3, [pc, #672]	; (39ac <STACK_SIZE+0x19ac>)
    370c:	21b4      	movs	r1, #180	; 0xb4
    370e:	0049      	lsls	r1, r1, #1
    3710:	19c9      	adds	r1, r1, r7
    3712:	18cb      	adds	r3, r1, r3
    3714:	7ada      	ldrb	r2, [r3, #11]
    3716:	4ba3      	ldr	r3, [pc, #652]	; (39a4 <STACK_SIZE+0x19a4>)
    3718:	72da      	strb	r2, [r3, #11]
					eepromPageData[12] = '\0';
    371a:	4ba2      	ldr	r3, [pc, #648]	; (39a4 <STACK_SIZE+0x19a4>)
    371c:	2200      	movs	r2, #0
    371e:	731a      	strb	r2, [r3, #12]
					memcpy(strModel, eepromPageData, MODEL_SIZE);					
    3720:	4aa3      	ldr	r2, [pc, #652]	; (39b0 <STACK_SIZE+0x19b0>)
    3722:	4ba0      	ldr	r3, [pc, #640]	; (39a4 <STACK_SIZE+0x19a4>)
    3724:	1c11      	adds	r1, r2, #0
    3726:	1c1a      	adds	r2, r3, #0
    3728:	230d      	movs	r3, #13
    372a:	1c08      	adds	r0, r1, #0
    372c:	1c11      	adds	r1, r2, #0
    372e:	1c1a      	adds	r2, r3, #0
    3730:	4ba0      	ldr	r3, [pc, #640]	; (39b4 <STACK_SIZE+0x19b4>)
    3732:	4798      	blx	r3
					eeprom_emulator_write_page(EEPROM_PAGE1, eepromPageData);
    3734:	4b9b      	ldr	r3, [pc, #620]	; (39a4 <STACK_SIZE+0x19a4>)
    3736:	2001      	movs	r0, #1
    3738:	1c19      	adds	r1, r3, #0
    373a:	4b9f      	ldr	r3, [pc, #636]	; (39b8 <STACK_SIZE+0x19b8>)
    373c:	4798      	blx	r3
					eeprom_emulator_commit_page_buffer();
    373e:	4b9f      	ldr	r3, [pc, #636]	; (39bc <STACK_SIZE+0x19bc>)
    3740:	4798      	blx	r3
					dbg("\n[model number is programmed]\n");
    3742:	4b9f      	ldr	r3, [pc, #636]	; (39c0 <STACK_SIZE+0x19c0>)
    3744:	1c18      	adds	r0, r3, #0
    3746:	4b9f      	ldr	r3, [pc, #636]	; (39c4 <STACK_SIZE+0x19c4>)
    3748:	4798      	blx	r3
					eepromStatus |= EEPROM_MODEL_WRITTEN;
    374a:	4b9f      	ldr	r3, [pc, #636]	; (39c8 <STACK_SIZE+0x19c8>)
    374c:	681b      	ldr	r3, [r3, #0]
    374e:	2280      	movs	r2, #128	; 0x80
    3750:	431a      	orrs	r2, r3
    3752:	4b9d      	ldr	r3, [pc, #628]	; (39c8 <STACK_SIZE+0x19c8>)
    3754:	601a      	str	r2, [r3, #0]
					eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    3756:	4b93      	ldr	r3, [pc, #588]	; (39a4 <STACK_SIZE+0x19a4>)
    3758:	2000      	movs	r0, #0
    375a:	1c19      	adds	r1, r3, #0
    375c:	4b92      	ldr	r3, [pc, #584]	; (39a8 <STACK_SIZE+0x19a8>)
    375e:	4798      	blx	r3
					eepromPageData[19]  = (~eepromStatus) & 0x0000ff;
    3760:	4b99      	ldr	r3, [pc, #612]	; (39c8 <STACK_SIZE+0x19c8>)
    3762:	681b      	ldr	r3, [r3, #0]
    3764:	b2db      	uxtb	r3, r3
    3766:	43db      	mvns	r3, r3
    3768:	b2da      	uxtb	r2, r3
    376a:	4b8e      	ldr	r3, [pc, #568]	; (39a4 <STACK_SIZE+0x19a4>)
    376c:	74da      	strb	r2, [r3, #19]
					eepromPageData[20]  = ((~eepromStatus) & 0x00ff00) >> 8;
    376e:	4b96      	ldr	r3, [pc, #600]	; (39c8 <STACK_SIZE+0x19c8>)
    3770:	681b      	ldr	r3, [r3, #0]
    3772:	43da      	mvns	r2, r3
    3774:	23ff      	movs	r3, #255	; 0xff
    3776:	021b      	lsls	r3, r3, #8
    3778:	4013      	ands	r3, r2
    377a:	0a1b      	lsrs	r3, r3, #8
    377c:	b2da      	uxtb	r2, r3
    377e:	4b89      	ldr	r3, [pc, #548]	; (39a4 <STACK_SIZE+0x19a4>)
    3780:	751a      	strb	r2, [r3, #20]
					eepromPageData[21]  = ((~eepromStatus) & 0xff0000) >> 16;
    3782:	4b91      	ldr	r3, [pc, #580]	; (39c8 <STACK_SIZE+0x19c8>)
    3784:	681b      	ldr	r3, [r3, #0]
    3786:	43da      	mvns	r2, r3
    3788:	23ff      	movs	r3, #255	; 0xff
    378a:	041b      	lsls	r3, r3, #16
    378c:	4013      	ands	r3, r2
    378e:	0c1b      	lsrs	r3, r3, #16
    3790:	b2da      	uxtb	r2, r3
    3792:	4b84      	ldr	r3, [pc, #528]	; (39a4 <STACK_SIZE+0x19a4>)
    3794:	755a      	strb	r2, [r3, #21]
					eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
    3796:	4b83      	ldr	r3, [pc, #524]	; (39a4 <STACK_SIZE+0x19a4>)
    3798:	2000      	movs	r0, #0
    379a:	1c19      	adds	r1, r3, #0
    379c:	4b86      	ldr	r3, [pc, #536]	; (39b8 <STACK_SIZE+0x19b8>)
    379e:	4798      	blx	r3
					eeprom_emulator_commit_page_buffer();
    37a0:	4b86      	ldr	r3, [pc, #536]	; (39bc <STACK_SIZE+0x19bc>)
    37a2:	4798      	blx	r3
					break;
    37a4:	e074      	b.n	3890 <STACK_SIZE+0x1890>
//------------------------------------------------------------------
// 8.4		print MAC address
//------------------------------------------------------------------					
				case '4':
					dbg_info("\n[mac addr is %x:%x:%x:%x:%x:%x]\n",
    37a6:	4b89      	ldr	r3, [pc, #548]	; (39cc <STACK_SIZE+0x19cc>)
    37a8:	781b      	ldrb	r3, [r3, #0]
    37aa:	1c19      	adds	r1, r3, #0
    37ac:	4b87      	ldr	r3, [pc, #540]	; (39cc <STACK_SIZE+0x19cc>)
    37ae:	785b      	ldrb	r3, [r3, #1]
    37b0:	1c1a      	adds	r2, r3, #0
    37b2:	4b86      	ldr	r3, [pc, #536]	; (39cc <STACK_SIZE+0x19cc>)
    37b4:	789b      	ldrb	r3, [r3, #2]
    37b6:	4885      	ldr	r0, [pc, #532]	; (39cc <STACK_SIZE+0x19cc>)
    37b8:	78c0      	ldrb	r0, [r0, #3]
    37ba:	1c06      	adds	r6, r0, #0
    37bc:	4883      	ldr	r0, [pc, #524]	; (39cc <STACK_SIZE+0x19cc>)
    37be:	7900      	ldrb	r0, [r0, #4]
    37c0:	1c05      	adds	r5, r0, #0
    37c2:	4882      	ldr	r0, [pc, #520]	; (39cc <STACK_SIZE+0x19cc>)
    37c4:	7940      	ldrb	r0, [r0, #5]
    37c6:	1c04      	adds	r4, r0, #0
    37c8:	4881      	ldr	r0, [pc, #516]	; (39d0 <STACK_SIZE+0x19d0>)
    37ca:	9600      	str	r6, [sp, #0]
    37cc:	9501      	str	r5, [sp, #4]
    37ce:	9402      	str	r4, [sp, #8]
    37d0:	4c80      	ldr	r4, [pc, #512]	; (39d4 <STACK_SIZE+0x19d4>)
    37d2:	47a0      	blx	r4
						MAC_address[0], MAC_address[1], MAC_address[2],
						MAC_address[3], MAC_address[4], MAC_address[5] );	
					break;	
    37d4:	e05c      	b.n	3890 <STACK_SIZE+0x1890>
//------------------------------------------------------------------
// 8.5		print serial number
//------------------------------------------------------------------						
				case '5':
					dbg_info("\n[serial number is %s]\n", strSerial);	
    37d6:	4a80      	ldr	r2, [pc, #512]	; (39d8 <STACK_SIZE+0x19d8>)
    37d8:	4b80      	ldr	r3, [pc, #512]	; (39dc <STACK_SIZE+0x19dc>)
    37da:	1c10      	adds	r0, r2, #0
    37dc:	1c19      	adds	r1, r3, #0
    37de:	4b7d      	ldr	r3, [pc, #500]	; (39d4 <STACK_SIZE+0x19d4>)
    37e0:	4798      	blx	r3
					break;	
    37e2:	e055      	b.n	3890 <STACK_SIZE+0x1890>
//------------------------------------------------------------------
// 8.6		print model number
//------------------------------------------------------------------										
				case '6':
					dbg_info("\n[model number is %s]\n", strModel);
    37e4:	4a7e      	ldr	r2, [pc, #504]	; (39e0 <STACK_SIZE+0x19e0>)
    37e6:	4b72      	ldr	r3, [pc, #456]	; (39b0 <STACK_SIZE+0x19b0>)
    37e8:	1c10      	adds	r0, r2, #0
    37ea:	1c19      	adds	r1, r3, #0
    37ec:	4b79      	ldr	r3, [pc, #484]	; (39d4 <STACK_SIZE+0x19d4>)
    37ee:	4798      	blx	r3
					break;		
    37f0:	e04e      	b.n	3890 <STACK_SIZE+0x1890>
//------------------------------------------------------------------
// 8.7		initiate defrost cycle
//------------------------------------------------------------------					
				case '7':
					setDefrostState(DEFROST_START);
    37f2:	2000      	movs	r0, #0
    37f4:	4b7b      	ldr	r3, [pc, #492]	; (39e4 <STACK_SIZE+0x19e4>)
    37f6:	4798      	blx	r3
					break;	
    37f8:	e04a      	b.n	3890 <STACK_SIZE+0x1890>
//------------------------------------------------------------------
// 8.8.x		write mfgTestModeFlag2
//------------------------------------------------------------------					
				case '8':
					mfgTestModeFlag2 = nParamValue & 0x01;
    37fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    37fc:	b2da      	uxtb	r2, r3
    37fe:	2301      	movs	r3, #1
    3800:	4013      	ands	r3, r2
    3802:	b2da      	uxtb	r2, r3
    3804:	4b78      	ldr	r3, [pc, #480]	; (39e8 <STACK_SIZE+0x19e8>)
    3806:	701a      	strb	r2, [r3, #0]
					eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    3808:	4b66      	ldr	r3, [pc, #408]	; (39a4 <STACK_SIZE+0x19a4>)
    380a:	2000      	movs	r0, #0
    380c:	1c19      	adds	r1, r3, #0
    380e:	4b66      	ldr	r3, [pc, #408]	; (39a8 <STACK_SIZE+0x19a8>)
    3810:	4798      	blx	r3
					eepromPageData[23]  = mfgTestModeFlag2;
    3812:	4b75      	ldr	r3, [pc, #468]	; (39e8 <STACK_SIZE+0x19e8>)
    3814:	781a      	ldrb	r2, [r3, #0]
    3816:	4b63      	ldr	r3, [pc, #396]	; (39a4 <STACK_SIZE+0x19a4>)
    3818:	75da      	strb	r2, [r3, #23]
					//eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
					//eeprom_emulator_commit_page_buffer();
					eepromStatus |= EEPROM_MFGTESTFLAG2_WRITTEN;
    381a:	4b6b      	ldr	r3, [pc, #428]	; (39c8 <STACK_SIZE+0x19c8>)
    381c:	681b      	ldr	r3, [r3, #0]
    381e:	2280      	movs	r2, #128	; 0x80
    3820:	0092      	lsls	r2, r2, #2
    3822:	431a      	orrs	r2, r3
    3824:	4b68      	ldr	r3, [pc, #416]	; (39c8 <STACK_SIZE+0x19c8>)
    3826:	601a      	str	r2, [r3, #0]
					//eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
					eepromPageData[19]  = (~eepromStatus) & 0x0000ff;
    3828:	4b67      	ldr	r3, [pc, #412]	; (39c8 <STACK_SIZE+0x19c8>)
    382a:	681b      	ldr	r3, [r3, #0]
    382c:	b2db      	uxtb	r3, r3
    382e:	43db      	mvns	r3, r3
    3830:	b2da      	uxtb	r2, r3
    3832:	4b5c      	ldr	r3, [pc, #368]	; (39a4 <STACK_SIZE+0x19a4>)
    3834:	74da      	strb	r2, [r3, #19]
					eepromPageData[20]  = ((~eepromStatus) & 0x00ff00) >> 8;
    3836:	4b64      	ldr	r3, [pc, #400]	; (39c8 <STACK_SIZE+0x19c8>)
    3838:	681b      	ldr	r3, [r3, #0]
    383a:	43da      	mvns	r2, r3
    383c:	23ff      	movs	r3, #255	; 0xff
    383e:	021b      	lsls	r3, r3, #8
    3840:	4013      	ands	r3, r2
    3842:	0a1b      	lsrs	r3, r3, #8
    3844:	b2da      	uxtb	r2, r3
    3846:	4b57      	ldr	r3, [pc, #348]	; (39a4 <STACK_SIZE+0x19a4>)
    3848:	751a      	strb	r2, [r3, #20]
					eepromPageData[21]  = ((~eepromStatus) & 0xff0000) >> 16;
    384a:	4b5f      	ldr	r3, [pc, #380]	; (39c8 <STACK_SIZE+0x19c8>)
    384c:	681b      	ldr	r3, [r3, #0]
    384e:	43da      	mvns	r2, r3
    3850:	23ff      	movs	r3, #255	; 0xff
    3852:	041b      	lsls	r3, r3, #16
    3854:	4013      	ands	r3, r2
    3856:	0c1b      	lsrs	r3, r3, #16
    3858:	b2da      	uxtb	r2, r3
    385a:	4b52      	ldr	r3, [pc, #328]	; (39a4 <STACK_SIZE+0x19a4>)
    385c:	755a      	strb	r2, [r3, #21]
					eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
    385e:	4b51      	ldr	r3, [pc, #324]	; (39a4 <STACK_SIZE+0x19a4>)
    3860:	2000      	movs	r0, #0
    3862:	1c19      	adds	r1, r3, #0
    3864:	4b54      	ldr	r3, [pc, #336]	; (39b8 <STACK_SIZE+0x19b8>)
    3866:	4798      	blx	r3
					eeprom_emulator_commit_page_buffer();
    3868:	4b54      	ldr	r3, [pc, #336]	; (39bc <STACK_SIZE+0x19bc>)
    386a:	4798      	blx	r3
					dbg("\n[mfgTestModeFlag2 is programmed]\n");
    386c:	4b5f      	ldr	r3, [pc, #380]	; (39ec <STACK_SIZE+0x19ec>)
    386e:	1c18      	adds	r0, r3, #0
    3870:	4b54      	ldr	r3, [pc, #336]	; (39c4 <STACK_SIZE+0x19c4>)
    3872:	4798      	blx	r3
					break;
    3874:	e00c      	b.n	3890 <STACK_SIZE+0x1890>
//------------------------------------------------------------------
// 8.9		print mfgTestModeFlag2
//------------------------------------------------------------------					
				case '9':
					dbg_info("\n[mfgTestModeFlag2 is %x]\n", mfgTestModeFlag2);
    3876:	4b5c      	ldr	r3, [pc, #368]	; (39e8 <STACK_SIZE+0x19e8>)
    3878:	781b      	ldrb	r3, [r3, #0]
    387a:	4a5d      	ldr	r2, [pc, #372]	; (39f0 <STACK_SIZE+0x19f0>)
    387c:	1c10      	adds	r0, r2, #0
    387e:	1c19      	adds	r1, r3, #0
    3880:	4b54      	ldr	r3, [pc, #336]	; (39d4 <STACK_SIZE+0x19d4>)
    3882:	4798      	blx	r3
					break;																													
    3884:	e004      	b.n	3890 <STACK_SIZE+0x1890>
				default:
					dbg("\n[no action]\n");
    3886:	4b5b      	ldr	r3, [pc, #364]	; (39f4 <STACK_SIZE+0x19f4>)
    3888:	1c18      	adds	r0, r3, #0
    388a:	4b4e      	ldr	r3, [pc, #312]	; (39c4 <STACK_SIZE+0x19c4>)
    388c:	4798      	blx	r3
					break;				
    388e:	46c0      	nop			; (mov r8, r8)
			}
			break;
		}			
	}
	
	return;
    3890:	e121      	b.n	3ad6 <STACK_SIZE+0x1ad6>
			}
			break;
		}	
		case 9:
		{
			int nParamValue = (int)strtol((const char*)bParam, NULL, 10);
    3892:	1c3b      	adds	r3, r7, #0
    3894:	330c      	adds	r3, #12
    3896:	1c18      	adds	r0, r3, #0
    3898:	2100      	movs	r1, #0
    389a:	220a      	movs	r2, #10
    389c:	4b56      	ldr	r3, [pc, #344]	; (39f8 <STACK_SIZE+0x19f8>)
    389e:	4798      	blx	r3
    38a0:	1c03      	adds	r3, r0, #0
    38a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			
			switch (bCommand[0])
    38a4:	4b55      	ldr	r3, [pc, #340]	; (39fc <STACK_SIZE+0x19fc>)
    38a6:	22b4      	movs	r2, #180	; 0xb4
    38a8:	0052      	lsls	r2, r2, #1
    38aa:	19d2      	adds	r2, r2, r7
    38ac:	18d3      	adds	r3, r2, r3
    38ae:	781b      	ldrb	r3, [r3, #0]
    38b0:	3b30      	subs	r3, #48	; 0x30
    38b2:	2b09      	cmp	r3, #9
    38b4:	d900      	bls.n	38b8 <STACK_SIZE+0x18b8>
    38b6:	e107      	b.n	3ac8 <STACK_SIZE+0x1ac8>
    38b8:	009a      	lsls	r2, r3, #2
    38ba:	4b51      	ldr	r3, [pc, #324]	; (3a00 <STACK_SIZE+0x1a00>)
    38bc:	18d3      	adds	r3, r2, r3
    38be:	681b      	ldr	r3, [r3, #0]
    38c0:	469f      	mov	pc, r3
			{
//------------------------------------------------------------------
// 9.0.x	write defrost freq max hours
//------------------------------------------------------------------				
				case '0':
					defrostFreqMaxHrs = nParamValue;
    38c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38c4:	b29a      	uxth	r2, r3
    38c6:	4b4f      	ldr	r3, [pc, #316]	; (3a04 <STACK_SIZE+0x1a04>)
    38c8:	801a      	strh	r2, [r3, #0]
					dbg_info("\n[defrostFreqMaxHrs set to %i]\n", defrostFreqMaxHrs);
    38ca:	4b4e      	ldr	r3, [pc, #312]	; (3a04 <STACK_SIZE+0x1a04>)
    38cc:	881b      	ldrh	r3, [r3, #0]
    38ce:	4a4e      	ldr	r2, [pc, #312]	; (3a08 <STACK_SIZE+0x1a08>)
    38d0:	1c10      	adds	r0, r2, #0
    38d2:	1c19      	adds	r1, r3, #0
    38d4:	4b3f      	ldr	r3, [pc, #252]	; (39d4 <STACK_SIZE+0x19d4>)
    38d6:	4798      	blx	r3
					writeToEepromFlag = true;
    38d8:	4b4c      	ldr	r3, [pc, #304]	; (3a0c <STACK_SIZE+0x1a0c>)
    38da:	2201      	movs	r2, #1
    38dc:	701a      	strb	r2, [r3, #0]
					eepromDataInfo.pAddr = &defrostFreqMaxHrs;
    38de:	4b4c      	ldr	r3, [pc, #304]	; (3a10 <STACK_SIZE+0x1a10>)
    38e0:	4a48      	ldr	r2, [pc, #288]	; (3a04 <STACK_SIZE+0x1a04>)
    38e2:	601a      	str	r2, [r3, #0]
					eepromDataInfo.size = sizeof(defrostFreqMaxHrs);
    38e4:	4b4a      	ldr	r3, [pc, #296]	; (3a10 <STACK_SIZE+0x1a10>)
    38e6:	2202      	movs	r2, #2
    38e8:	711a      	strb	r2, [r3, #4]
					eepromDataInfo.nonvolatileFlag = true;					
    38ea:	4b49      	ldr	r3, [pc, #292]	; (3a10 <STACK_SIZE+0x1a10>)
    38ec:	2201      	movs	r2, #1
    38ee:	715a      	strb	r2, [r3, #5]
					break;
    38f0:	e0ef      	b.n	3ad2 <STACK_SIZE+0x1ad2>
//------------------------------------------------------------------
// 9.1.x	print defrost freq max hours
//------------------------------------------------------------------					
				case '1':
					dbg_info("\n[defrostFreqMaxHrs is %i]\n", defrostFreqMaxHrs);
    38f2:	4b44      	ldr	r3, [pc, #272]	; (3a04 <STACK_SIZE+0x1a04>)
    38f4:	881b      	ldrh	r3, [r3, #0]
    38f6:	4a47      	ldr	r2, [pc, #284]	; (3a14 <STACK_SIZE+0x1a14>)
    38f8:	1c10      	adds	r0, r2, #0
    38fa:	1c19      	adds	r1, r3, #0
    38fc:	4b35      	ldr	r3, [pc, #212]	; (39d4 <STACK_SIZE+0x19d4>)
    38fe:	4798      	blx	r3
					break;	
    3900:	e0e7      	b.n	3ad2 <STACK_SIZE+0x1ad2>
//------------------------------------------------------------------
// 9.2.x	write defrost frequency hrs
//------------------------------------------------------------------					
				case '2':
					defrostFreqHrs = nParamValue;
    3902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3904:	b2da      	uxtb	r2, r3
    3906:	4b44      	ldr	r3, [pc, #272]	; (3a18 <STACK_SIZE+0x1a18>)
    3908:	701a      	strb	r2, [r3, #0]
					dbg_info("\n[defrostFreqHrs set to %i]\n", defrostFreqHrs);
    390a:	4b43      	ldr	r3, [pc, #268]	; (3a18 <STACK_SIZE+0x1a18>)
    390c:	781b      	ldrb	r3, [r3, #0]
    390e:	4a43      	ldr	r2, [pc, #268]	; (3a1c <STACK_SIZE+0x1a1c>)
    3910:	1c10      	adds	r0, r2, #0
    3912:	1c19      	adds	r1, r3, #0
    3914:	4b2f      	ldr	r3, [pc, #188]	; (39d4 <STACK_SIZE+0x19d4>)
    3916:	4798      	blx	r3
					writeToEepromFlag = true;
    3918:	4b3c      	ldr	r3, [pc, #240]	; (3a0c <STACK_SIZE+0x1a0c>)
    391a:	2201      	movs	r2, #1
    391c:	701a      	strb	r2, [r3, #0]
					eepromDataInfo.pAddr = &defrostFreqHrs;
    391e:	4b3c      	ldr	r3, [pc, #240]	; (3a10 <STACK_SIZE+0x1a10>)
    3920:	4a3d      	ldr	r2, [pc, #244]	; (3a18 <STACK_SIZE+0x1a18>)
    3922:	601a      	str	r2, [r3, #0]
					eepromDataInfo.size = sizeof(defrostFreqHrs);
    3924:	4b3a      	ldr	r3, [pc, #232]	; (3a10 <STACK_SIZE+0x1a10>)
    3926:	2201      	movs	r2, #1
    3928:	711a      	strb	r2, [r3, #4]
					eepromDataInfo.nonvolatileFlag = true;					
    392a:	4b39      	ldr	r3, [pc, #228]	; (3a10 <STACK_SIZE+0x1a10>)
    392c:	2201      	movs	r2, #1
    392e:	715a      	strb	r2, [r3, #5]
					break;
    3930:	e0cf      	b.n	3ad2 <STACK_SIZE+0x1ad2>
//------------------------------------------------------------------
// 9.3.x	print defrost frequency hrs
//------------------------------------------------------------------					
				case '3':
					dbg_info("\n[defrostFreqHrs is %i]\n", defrostFreqHrs);
    3932:	4b39      	ldr	r3, [pc, #228]	; (3a18 <STACK_SIZE+0x1a18>)
    3934:	781b      	ldrb	r3, [r3, #0]
    3936:	4a3a      	ldr	r2, [pc, #232]	; (3a20 <STACK_SIZE+0x1a20>)
    3938:	1c10      	adds	r0, r2, #0
    393a:	1c19      	adds	r1, r3, #0
    393c:	4b25      	ldr	r3, [pc, #148]	; (39d4 <STACK_SIZE+0x19d4>)
    393e:	4798      	blx	r3
					break;
    3940:	e0c7      	b.n	3ad2 <STACK_SIZE+0x1ad2>
//------------------------------------------------------------------
// 9.4.x	write defrost duration minutes
//------------------------------------------------------------------					
				case '4':
					defrostDurationMins = nParamValue;
    3942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3944:	b2da      	uxtb	r2, r3
    3946:	4b37      	ldr	r3, [pc, #220]	; (3a24 <STACK_SIZE+0x1a24>)
    3948:	701a      	strb	r2, [r3, #0]
					dbg_info("\n[defrostDurationMins set to %i]\n", defrostDurationMins);
    394a:	4b36      	ldr	r3, [pc, #216]	; (3a24 <STACK_SIZE+0x1a24>)
    394c:	781b      	ldrb	r3, [r3, #0]
    394e:	4a36      	ldr	r2, [pc, #216]	; (3a28 <STACK_SIZE+0x1a28>)
    3950:	1c10      	adds	r0, r2, #0
    3952:	1c19      	adds	r1, r3, #0
    3954:	4b1f      	ldr	r3, [pc, #124]	; (39d4 <STACK_SIZE+0x19d4>)
    3956:	4798      	blx	r3
					writeToEepromFlag = true;
    3958:	4b2c      	ldr	r3, [pc, #176]	; (3a0c <STACK_SIZE+0x1a0c>)
    395a:	2201      	movs	r2, #1
    395c:	701a      	strb	r2, [r3, #0]
					eepromDataInfo.pAddr = &defrostDurationMins;
    395e:	4b2c      	ldr	r3, [pc, #176]	; (3a10 <STACK_SIZE+0x1a10>)
    3960:	4a30      	ldr	r2, [pc, #192]	; (3a24 <STACK_SIZE+0x1a24>)
    3962:	601a      	str	r2, [r3, #0]
					eepromDataInfo.size = sizeof(defrostDurationMins);
    3964:	4b2a      	ldr	r3, [pc, #168]	; (3a10 <STACK_SIZE+0x1a10>)
    3966:	2201      	movs	r2, #1
    3968:	711a      	strb	r2, [r3, #4]
					eepromDataInfo.nonvolatileFlag = true;					
    396a:	4b29      	ldr	r3, [pc, #164]	; (3a10 <STACK_SIZE+0x1a10>)
    396c:	2201      	movs	r2, #1
    396e:	715a      	strb	r2, [r3, #5]
					break;
    3970:	e0af      	b.n	3ad2 <STACK_SIZE+0x1ad2>
//------------------------------------------------------------------
// 9.5		print defrost duration minutes
//------------------------------------------------------------------					
				case '5':
					dbg_info("\n[defrostDurationMins is %i]\n", defrostDurationMins);
    3972:	4b2c      	ldr	r3, [pc, #176]	; (3a24 <STACK_SIZE+0x1a24>)
    3974:	781b      	ldrb	r3, [r3, #0]
    3976:	4a2d      	ldr	r2, [pc, #180]	; (3a2c <STACK_SIZE+0x1a2c>)
    3978:	1c10      	adds	r0, r2, #0
    397a:	1c19      	adds	r1, r3, #0
    397c:	4b15      	ldr	r3, [pc, #84]	; (39d4 <STACK_SIZE+0x19d4>)
    397e:	4798      	blx	r3
					break;	
    3980:	e0a7      	b.n	3ad2 <STACK_SIZE+0x1ad2>
//------------------------------------------------------------------
// 9.6		clear error register
//------------------------------------------------------------------						
				case '6':
					errorRegister = ERROR_NONE;
    3982:	4b2b      	ldr	r3, [pc, #172]	; (3a30 <STACK_SIZE+0x1a30>)
    3984:	2200      	movs	r2, #0
    3986:	801a      	strh	r2, [r3, #0]
					dbg("\n[errorRegister cleared]\n");
    3988:	4b2a      	ldr	r3, [pc, #168]	; (3a34 <STACK_SIZE+0x1a34>)
    398a:	1c18      	adds	r0, r3, #0
    398c:	4b0d      	ldr	r3, [pc, #52]	; (39c4 <STACK_SIZE+0x19c4>)
    398e:	4798      	blx	r3
					break;
    3990:	e09f      	b.n	3ad2 <STACK_SIZE+0x1ad2>
//------------------------------------------------------------------
// 9.7		print eeprom status
//------------------------------------------------------------------					
				case '7':
					dbg_info("\n[eepromStatus is %lx]\n", eepromStatus);
    3992:	4b0d      	ldr	r3, [pc, #52]	; (39c8 <STACK_SIZE+0x19c8>)
    3994:	681b      	ldr	r3, [r3, #0]
    3996:	4a28      	ldr	r2, [pc, #160]	; (3a38 <STACK_SIZE+0x1a38>)
    3998:	1c10      	adds	r0, r2, #0
    399a:	1c19      	adds	r1, r3, #0
    399c:	4b0d      	ldr	r3, [pc, #52]	; (39d4 <STACK_SIZE+0x19d4>)
    399e:	4798      	blx	r3
					break;
    39a0:	e097      	b.n	3ad2 <STACK_SIZE+0x1ad2>
    39a2:	46c0      	nop			; (mov r8, r8)
    39a4:	20000888 	.word	0x20000888
    39a8:	00019695 	.word	0x00019695
    39ac:	fffffea4 	.word	0xfffffea4
    39b0:	200008c4 	.word	0x200008c4
    39b4:	0001b375 	.word	0x0001b375
    39b8:	00019575 	.word	0x00019575
    39bc:	0001973d 	.word	0x0001973d
    39c0:	00023084 	.word	0x00023084
    39c4:	0001b899 	.word	0x0001b899
    39c8:	200002f8 	.word	0x200002f8
    39cc:	20000904 	.word	0x20000904
    39d0:	000230a4 	.word	0x000230a4
    39d4:	0001b62d 	.word	0x0001b62d
    39d8:	000230c8 	.word	0x000230c8
    39dc:	200008f4 	.word	0x200008f4
    39e0:	000230e0 	.word	0x000230e0
    39e4:	00004dc5 	.word	0x00004dc5
    39e8:	20000089 	.word	0x20000089
    39ec:	000230f8 	.word	0x000230f8
    39f0:	0002311c 	.word	0x0002311c
    39f4:	00022cfc 	.word	0x00022cfc
    39f8:	0001bd69 	.word	0x0001bd69
    39fc:	fffffeb4 	.word	0xfffffeb4
    3a00:	00023368 	.word	0x00023368
    3a04:	20000dbc 	.word	0x20000dbc
    3a08:	00023138 	.word	0x00023138
    3a0c:	200002f4 	.word	0x200002f4
    3a10:	200008dc 	.word	0x200008dc
    3a14:	00023158 	.word	0x00023158
    3a18:	20000910 	.word	0x20000910
    3a1c:	00023174 	.word	0x00023174
    3a20:	00023194 	.word	0x00023194
    3a24:	200008d8 	.word	0x200008d8
    3a28:	000231b0 	.word	0x000231b0
    3a2c:	000231d4 	.word	0x000231d4
    3a30:	20000332 	.word	0x20000332
    3a34:	000231f4 	.word	0x000231f4
    3a38:	00023210 	.word	0x00023210
//------------------------------------------------------------------
// 9.8.x	write mfgTestModeFlag1
//------------------------------------------------------------------						
				case '8':
					mfgTestModeFlag1 = nParamValue & 0x01;
    3a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a3e:	b2da      	uxtb	r2, r3
    3a40:	2301      	movs	r3, #1
    3a42:	4013      	ands	r3, r2
    3a44:	b2da      	uxtb	r2, r3
    3a46:	4b27      	ldr	r3, [pc, #156]	; (3ae4 <STACK_SIZE+0x1ae4>)
    3a48:	701a      	strb	r2, [r3, #0]
					eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    3a4a:	4b27      	ldr	r3, [pc, #156]	; (3ae8 <STACK_SIZE+0x1ae8>)
    3a4c:	2000      	movs	r0, #0
    3a4e:	1c19      	adds	r1, r3, #0
    3a50:	4b26      	ldr	r3, [pc, #152]	; (3aec <STACK_SIZE+0x1aec>)
    3a52:	4798      	blx	r3
					eepromPageData[22]  = mfgTestModeFlag1;
    3a54:	4b23      	ldr	r3, [pc, #140]	; (3ae4 <STACK_SIZE+0x1ae4>)
    3a56:	781a      	ldrb	r2, [r3, #0]
    3a58:	4b23      	ldr	r3, [pc, #140]	; (3ae8 <STACK_SIZE+0x1ae8>)
    3a5a:	759a      	strb	r2, [r3, #22]
					//eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
					//eeprom_emulator_commit_page_buffer();
					eepromStatus |= EEPROM_MFGTESTFLAG1_WRITTEN;
    3a5c:	4b24      	ldr	r3, [pc, #144]	; (3af0 <STACK_SIZE+0x1af0>)
    3a5e:	681b      	ldr	r3, [r3, #0]
    3a60:	2280      	movs	r2, #128	; 0x80
    3a62:	0052      	lsls	r2, r2, #1
    3a64:	431a      	orrs	r2, r3
    3a66:	4b22      	ldr	r3, [pc, #136]	; (3af0 <STACK_SIZE+0x1af0>)
    3a68:	601a      	str	r2, [r3, #0]
					//eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
					eepromPageData[19]  = (~eepromStatus) & 0x0000ff;
    3a6a:	4b21      	ldr	r3, [pc, #132]	; (3af0 <STACK_SIZE+0x1af0>)
    3a6c:	681b      	ldr	r3, [r3, #0]
    3a6e:	b2db      	uxtb	r3, r3
    3a70:	43db      	mvns	r3, r3
    3a72:	b2da      	uxtb	r2, r3
    3a74:	4b1c      	ldr	r3, [pc, #112]	; (3ae8 <STACK_SIZE+0x1ae8>)
    3a76:	74da      	strb	r2, [r3, #19]
					eepromPageData[20]  = ((~eepromStatus) & 0x00ff00) >> 8;
    3a78:	4b1d      	ldr	r3, [pc, #116]	; (3af0 <STACK_SIZE+0x1af0>)
    3a7a:	681b      	ldr	r3, [r3, #0]
    3a7c:	43da      	mvns	r2, r3
    3a7e:	23ff      	movs	r3, #255	; 0xff
    3a80:	021b      	lsls	r3, r3, #8
    3a82:	4013      	ands	r3, r2
    3a84:	0a1b      	lsrs	r3, r3, #8
    3a86:	b2da      	uxtb	r2, r3
    3a88:	4b17      	ldr	r3, [pc, #92]	; (3ae8 <STACK_SIZE+0x1ae8>)
    3a8a:	751a      	strb	r2, [r3, #20]
					eepromPageData[21]  = ((~eepromStatus) & 0xff0000) >> 16;
    3a8c:	4b18      	ldr	r3, [pc, #96]	; (3af0 <STACK_SIZE+0x1af0>)
    3a8e:	681b      	ldr	r3, [r3, #0]
    3a90:	43da      	mvns	r2, r3
    3a92:	23ff      	movs	r3, #255	; 0xff
    3a94:	041b      	lsls	r3, r3, #16
    3a96:	4013      	ands	r3, r2
    3a98:	0c1b      	lsrs	r3, r3, #16
    3a9a:	b2da      	uxtb	r2, r3
    3a9c:	4b12      	ldr	r3, [pc, #72]	; (3ae8 <STACK_SIZE+0x1ae8>)
    3a9e:	755a      	strb	r2, [r3, #21]
					eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
    3aa0:	4b11      	ldr	r3, [pc, #68]	; (3ae8 <STACK_SIZE+0x1ae8>)
    3aa2:	2000      	movs	r0, #0
    3aa4:	1c19      	adds	r1, r3, #0
    3aa6:	4b13      	ldr	r3, [pc, #76]	; (3af4 <STACK_SIZE+0x1af4>)
    3aa8:	4798      	blx	r3
					eeprom_emulator_commit_page_buffer();
    3aaa:	4b13      	ldr	r3, [pc, #76]	; (3af8 <STACK_SIZE+0x1af8>)
    3aac:	4798      	blx	r3
					dbg("\n[mfgTestModeFlag1 is programmed]\n");
    3aae:	4b13      	ldr	r3, [pc, #76]	; (3afc <STACK_SIZE+0x1afc>)
    3ab0:	1c18      	adds	r0, r3, #0
    3ab2:	4b13      	ldr	r3, [pc, #76]	; (3b00 <STACK_SIZE+0x1b00>)
    3ab4:	4798      	blx	r3
					break;
    3ab6:	e00c      	b.n	3ad2 <STACK_SIZE+0x1ad2>
//------------------------------------------------------------------
// 9.9		print mfgTestModeFlag1
//------------------------------------------------------------------									
				case '9':
					dbg_info("\n[mfgTestModeFlag1 is %x]\n", mfgTestModeFlag1);
    3ab8:	4b0a      	ldr	r3, [pc, #40]	; (3ae4 <STACK_SIZE+0x1ae4>)
    3aba:	781b      	ldrb	r3, [r3, #0]
    3abc:	4a11      	ldr	r2, [pc, #68]	; (3b04 <STACK_SIZE+0x1b04>)
    3abe:	1c10      	adds	r0, r2, #0
    3ac0:	1c19      	adds	r1, r3, #0
    3ac2:	4b11      	ldr	r3, [pc, #68]	; (3b08 <STACK_SIZE+0x1b08>)
    3ac4:	4798      	blx	r3
					break;																							
    3ac6:	e004      	b.n	3ad2 <STACK_SIZE+0x1ad2>
				default:
					dbg("\n[no action]\n");
    3ac8:	4b10      	ldr	r3, [pc, #64]	; (3b0c <STACK_SIZE+0x1b0c>)
    3aca:	1c18      	adds	r0, r3, #0
    3acc:	4b0c      	ldr	r3, [pc, #48]	; (3b00 <STACK_SIZE+0x1b00>)
    3ace:	4798      	blx	r3
				break;
    3ad0:	46c0      	nop			; (mov r8, r8)
			}
			break;
    3ad2:	46c0      	nop			; (mov r8, r8)
		}			
	}
	
	return;
    3ad4:	46c0      	nop			; (mov r8, r8)
    3ad6:	46c0      	nop			; (mov r8, r8)
    3ad8:	46bd      	mov	sp, r7
    3ada:	b05a      	add	sp, #360	; 0x168
    3adc:	bc04      	pop	{r2}
    3ade:	4690      	mov	r8, r2
    3ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ae2:	46c0      	nop			; (mov r8, r8)
    3ae4:	20000088 	.word	0x20000088
    3ae8:	20000888 	.word	0x20000888
    3aec:	00019695 	.word	0x00019695
    3af0:	200002f8 	.word	0x200002f8
    3af4:	00019575 	.word	0x00019575
    3af8:	0001973d 	.word	0x0001973d
    3afc:	00023228 	.word	0x00023228
    3b00:	0001b899 	.word	0x0001b899
    3b04:	0002324c 	.word	0x0002324c
    3b08:	0001b62d 	.word	0x0001b62d
    3b0c:	00022cfc 	.word	0x00022cfc

00003b10 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
    3b10:	b580      	push	{r7, lr}
    3b12:	af00      	add	r7, sp, #0
	return test_case_ptr;
    3b14:	4b02      	ldr	r3, [pc, #8]	; (3b20 <test_get_case+0x10>)
    3b16:	681b      	ldr	r3, [r3, #0]
}
    3b18:	1c18      	adds	r0, r3, #0
    3b1a:	46bd      	mov	sp, r7
    3b1c:	bd80      	pop	{r7, pc}
    3b1e:	46c0      	nop			; (mov r8, r8)
    3b20:	2000041c 	.word	0x2000041c

00003b24 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3b24:	b590      	push	{r4, r7, lr}
    3b26:	b087      	sub	sp, #28
    3b28:	af02      	add	r7, sp, #8
    3b2a:	1c02      	adds	r2, r0, #0
    3b2c:	1dfb      	adds	r3, r7, #7
    3b2e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3b30:	1c3b      	adds	r3, r7, #0
    3b32:	330f      	adds	r3, #15
    3b34:	1dfa      	adds	r2, r7, #7
    3b36:	7812      	ldrb	r2, [r2, #0]
    3b38:	09d2      	lsrs	r2, r2, #7
    3b3a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3b3c:	1c3b      	adds	r3, r7, #0
    3b3e:	330e      	adds	r3, #14
    3b40:	1dfa      	adds	r2, r7, #7
    3b42:	7812      	ldrb	r2, [r2, #0]
    3b44:	0952      	lsrs	r2, r2, #5
    3b46:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3b48:	4b1b      	ldr	r3, [pc, #108]	; (3bb8 <system_pinmux_get_group_from_gpio_pin+0x94>)
    3b4a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3b4c:	1c3b      	adds	r3, r7, #0
    3b4e:	330f      	adds	r3, #15
    3b50:	781b      	ldrb	r3, [r3, #0]
    3b52:	2b00      	cmp	r3, #0
    3b54:	d10e      	bne.n	3b74 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    3b56:	1c3b      	adds	r3, r7, #0
    3b58:	330f      	adds	r3, #15
    3b5a:	781b      	ldrb	r3, [r3, #0]
    3b5c:	009b      	lsls	r3, r3, #2
    3b5e:	2210      	movs	r2, #16
    3b60:	19d2      	adds	r2, r2, r7
    3b62:	18d3      	adds	r3, r2, r3
    3b64:	3b08      	subs	r3, #8
    3b66:	681a      	ldr	r2, [r3, #0]
    3b68:	1c3b      	adds	r3, r7, #0
    3b6a:	330e      	adds	r3, #14
    3b6c:	781b      	ldrb	r3, [r3, #0]
    3b6e:	01db      	lsls	r3, r3, #7
    3b70:	18d3      	adds	r3, r2, r3
    3b72:	e01c      	b.n	3bae <system_pinmux_get_group_from_gpio_pin+0x8a>
	} else {
		Assert(false);
    3b74:	4b11      	ldr	r3, [pc, #68]	; (3bbc <system_pinmux_get_group_from_gpio_pin+0x98>)
    3b76:	4798      	blx	r3
    3b78:	1c03      	adds	r3, r0, #0
    3b7a:	2b00      	cmp	r3, #0
    3b7c:	d00f      	beq.n	3b9e <system_pinmux_get_group_from_gpio_pin+0x7a>
    3b7e:	4b0f      	ldr	r3, [pc, #60]	; (3bbc <system_pinmux_get_group_from_gpio_pin+0x98>)
    3b80:	4798      	blx	r3
    3b82:	1c01      	adds	r1, r0, #0
    3b84:	4a0e      	ldr	r2, [pc, #56]	; (3bc0 <system_pinmux_get_group_from_gpio_pin+0x9c>)
    3b86:	2368      	movs	r3, #104	; 0x68
    3b88:	33ff      	adds	r3, #255	; 0xff
    3b8a:	480e      	ldr	r0, [pc, #56]	; (3bc4 <system_pinmux_get_group_from_gpio_pin+0xa0>)
    3b8c:	9000      	str	r0, [sp, #0]
    3b8e:	480e      	ldr	r0, [pc, #56]	; (3bc8 <system_pinmux_get_group_from_gpio_pin+0xa4>)
    3b90:	9001      	str	r0, [sp, #4]
    3b92:	1c08      	adds	r0, r1, #0
    3b94:	2101      	movs	r1, #1
    3b96:	4c0d      	ldr	r4, [pc, #52]	; (3bcc <system_pinmux_get_group_from_gpio_pin+0xa8>)
    3b98:	47a0      	blx	r4
		return NULL;
    3b9a:	2300      	movs	r3, #0
    3b9c:	e007      	b.n	3bae <system_pinmux_get_group_from_gpio_pin+0x8a>
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
    3b9e:	480c      	ldr	r0, [pc, #48]	; (3bd0 <system_pinmux_get_group_from_gpio_pin+0xac>)
    3ba0:	4909      	ldr	r1, [pc, #36]	; (3bc8 <system_pinmux_get_group_from_gpio_pin+0xa4>)
    3ba2:	4a07      	ldr	r2, [pc, #28]	; (3bc0 <system_pinmux_get_group_from_gpio_pin+0x9c>)
    3ba4:	2368      	movs	r3, #104	; 0x68
    3ba6:	33ff      	adds	r3, #255	; 0xff
    3ba8:	4c0a      	ldr	r4, [pc, #40]	; (3bd4 <system_pinmux_get_group_from_gpio_pin+0xb0>)
    3baa:	47a0      	blx	r4
    3bac:	e7fe      	b.n	3bac <system_pinmux_get_group_from_gpio_pin+0x88>
		return NULL;
	}
}
    3bae:	1c18      	adds	r0, r3, #0
    3bb0:	46bd      	mov	sp, r7
    3bb2:	b005      	add	sp, #20
    3bb4:	bd90      	pop	{r4, r7, pc}
    3bb6:	46c0      	nop			; (mov r8, r8)
    3bb8:	41004400 	.word	0x41004400
    3bbc:	00003b11 	.word	0x00003b11
    3bc0:	00023788 	.word	0x00023788
    3bc4:	000237b8 	.word	0x000237b8
    3bc8:	000237d0 	.word	0x000237d0
    3bcc:	000106e9 	.word	0x000106e9
    3bd0:	000237d8 	.word	0x000237d8
    3bd4:	0001b62d 	.word	0x0001b62d

00003bd8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3bd8:	b580      	push	{r7, lr}
    3bda:	b082      	sub	sp, #8
    3bdc:	af00      	add	r7, sp, #0
    3bde:	1c02      	adds	r2, r0, #0
    3be0:	1dfb      	adds	r3, r7, #7
    3be2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3be4:	1dfb      	adds	r3, r7, #7
    3be6:	781b      	ldrb	r3, [r3, #0]
    3be8:	1c18      	adds	r0, r3, #0
    3bea:	4b03      	ldr	r3, [pc, #12]	; (3bf8 <port_get_group_from_gpio_pin+0x20>)
    3bec:	4798      	blx	r3
    3bee:	1c03      	adds	r3, r0, #0
}
    3bf0:	1c18      	adds	r0, r3, #0
    3bf2:	46bd      	mov	sp, r7
    3bf4:	b002      	add	sp, #8
    3bf6:	bd80      	pop	{r7, pc}
    3bf8:	00003b25 	.word	0x00003b25

00003bfc <port_pin_get_output_level>:
 *
 *  \return Status of the port pin's output buffer.
 */
static inline bool port_pin_get_output_level(
		const uint8_t gpio_pin)
{
    3bfc:	b580      	push	{r7, lr}
    3bfe:	b084      	sub	sp, #16
    3c00:	af00      	add	r7, sp, #0
    3c02:	1c02      	adds	r2, r0, #0
    3c04:	1dfb      	adds	r3, r7, #7
    3c06:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3c08:	1dfb      	adds	r3, r7, #7
    3c0a:	781b      	ldrb	r3, [r3, #0]
    3c0c:	1c18      	adds	r0, r3, #0
    3c0e:	4b0c      	ldr	r3, [pc, #48]	; (3c40 <port_pin_get_output_level+0x44>)
    3c10:	4798      	blx	r3
    3c12:	1c03      	adds	r3, r0, #0
    3c14:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3c16:	1dfb      	adds	r3, r7, #7
    3c18:	781a      	ldrb	r2, [r3, #0]
    3c1a:	231f      	movs	r3, #31
    3c1c:	4013      	ands	r3, r2
    3c1e:	2201      	movs	r2, #1
    3c20:	1c11      	adds	r1, r2, #0
    3c22:	4099      	lsls	r1, r3
    3c24:	1c0b      	adds	r3, r1, #0
    3c26:	60bb      	str	r3, [r7, #8]

	return (port_base->OUT.reg & pin_mask);
    3c28:	68fb      	ldr	r3, [r7, #12]
    3c2a:	691b      	ldr	r3, [r3, #16]
    3c2c:	68ba      	ldr	r2, [r7, #8]
    3c2e:	4013      	ands	r3, r2
    3c30:	1e5a      	subs	r2, r3, #1
    3c32:	4193      	sbcs	r3, r2
    3c34:	b2db      	uxtb	r3, r3
}
    3c36:	1c18      	adds	r0, r3, #0
    3c38:	46bd      	mov	sp, r7
    3c3a:	b004      	add	sp, #16
    3c3c:	bd80      	pop	{r7, pc}
    3c3e:	46c0      	nop			; (mov r8, r8)
    3c40:	00003bd9 	.word	0x00003bd9

00003c44 <printDbgMsgs>:

/************************************************************************/
/* User Functions                                                       */
/************************************************************************/
void printDbgMsgs()
{
    3c44:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c46:	465f      	mov	r7, fp
    3c48:	4656      	mov	r6, sl
    3c4a:	464d      	mov	r5, r9
    3c4c:	4644      	mov	r4, r8
    3c4e:	b4f0      	push	{r4, r5, r6, r7}
    3c50:	b0b5      	sub	sp, #212	; 0xd4
    3c52:	af10      	add	r7, sp, #64	; 0x40
	// print current time for user
	rtc_calendar_get_time(&time_report.time);
    3c54:	4b37      	ldr	r3, [pc, #220]	; (3d34 <printDbgMsgs+0xf0>)
    3c56:	1c18      	adds	r0, r3, #0
    3c58:	4b37      	ldr	r3, [pc, #220]	; (3d38 <printDbgMsgs+0xf4>)
    3c5a:	4798      	blx	r3
		
	if (!enableDbgLoggingMode) { dbg("\n\n"); }
    3c5c:	4b37      	ldr	r3, [pc, #220]	; (3d3c <printDbgMsgs+0xf8>)
    3c5e:	781b      	ldrb	r3, [r3, #0]
    3c60:	2201      	movs	r2, #1
    3c62:	4053      	eors	r3, r2
    3c64:	b2db      	uxtb	r3, r3
    3c66:	2b00      	cmp	r3, #0
    3c68:	d003      	beq.n	3c72 <printDbgMsgs+0x2e>
    3c6a:	4b35      	ldr	r3, [pc, #212]	; (3d40 <printDbgMsgs+0xfc>)
    3c6c:	1c18      	adds	r0, r3, #0
    3c6e:	4b35      	ldr	r3, [pc, #212]	; (3d44 <printDbgMsgs+0x100>)
    3c70:	4798      	blx	r3
	dbg_info("%2dy%2dd:%2dh:%2dm:%2ds, time=%lu, ERR=%04x, FW=%02x%2x, pwrMode=%8s, HUM=%d, chaSnsMode=%8s, rejSnsMode=%8s,",
    3c72:	4b30      	ldr	r3, [pc, #192]	; (3d34 <printDbgMsgs+0xf0>)
    3c74:	88db      	ldrh	r3, [r3, #6]
    3c76:	4698      	mov	r8, r3
    3c78:	4b2e      	ldr	r3, [pc, #184]	; (3d34 <printDbgMsgs+0xf0>)
    3c7a:	791b      	ldrb	r3, [r3, #4]
    3c7c:	1c1e      	adds	r6, r3, #0
    3c7e:	4b2d      	ldr	r3, [pc, #180]	; (3d34 <printDbgMsgs+0xf0>)
    3c80:	789b      	ldrb	r3, [r3, #2]
    3c82:	1c1d      	adds	r5, r3, #0
    3c84:	4b2b      	ldr	r3, [pc, #172]	; (3d34 <printDbgMsgs+0xf0>)
    3c86:	785b      	ldrb	r3, [r3, #1]
    3c88:	1c1c      	adds	r4, r3, #0
    3c8a:	4b2a      	ldr	r3, [pc, #168]	; (3d34 <printDbgMsgs+0xf0>)
    3c8c:	781b      	ldrb	r3, [r3, #0]
    3c8e:	208c      	movs	r0, #140	; 0x8c
    3c90:	19c0      	adds	r0, r0, r7
    3c92:	6003      	str	r3, [r0, #0]
    3c94:	4b2c      	ldr	r3, [pc, #176]	; (3d48 <printDbgMsgs+0x104>)
    3c96:	4798      	blx	r3
    3c98:	1c03      	adds	r3, r0, #0
    3c9a:	492c      	ldr	r1, [pc, #176]	; (3d4c <printDbgMsgs+0x108>)
    3c9c:	1859      	adds	r1, r3, r1
    3c9e:	2288      	movs	r2, #136	; 0x88
    3ca0:	19d2      	adds	r2, r2, r7
    3ca2:	6011      	str	r1, [r2, #0]
    3ca4:	4b2a      	ldr	r3, [pc, #168]	; (3d50 <printDbgMsgs+0x10c>)
    3ca6:	881b      	ldrh	r3, [r3, #0]
    3ca8:	469b      	mov	fp, r3
    3caa:	4b2a      	ldr	r3, [pc, #168]	; (3d54 <printDbgMsgs+0x110>)
    3cac:	781b      	ldrb	r3, [r3, #0]
    3cae:	469a      	mov	sl, r3
    3cb0:	4b29      	ldr	r3, [pc, #164]	; (3d58 <printDbgMsgs+0x114>)
    3cb2:	781b      	ldrb	r3, [r3, #0]
    3cb4:	4699      	mov	r9, r3
    3cb6:	4b29      	ldr	r3, [pc, #164]	; (3d5c <printDbgMsgs+0x118>)
    3cb8:	781b      	ldrb	r3, [r3, #0]
    3cba:	1c1a      	adds	r2, r3, #0
    3cbc:	4b28      	ldr	r3, [pc, #160]	; (3d60 <printDbgMsgs+0x11c>)
    3cbe:	0092      	lsls	r2, r2, #2
    3cc0:	58d0      	ldr	r0, [r2, r3]
    3cc2:	4684      	mov	ip, r0
    3cc4:	4b27      	ldr	r3, [pc, #156]	; (3d64 <printDbgMsgs+0x120>)
    3cc6:	781b      	ldrb	r3, [r3, #0]
    3cc8:	1c18      	adds	r0, r3, #0
    3cca:	4b27      	ldr	r3, [pc, #156]	; (3d68 <printDbgMsgs+0x124>)
    3ccc:	781b      	ldrb	r3, [r3, #0]
    3cce:	4a27      	ldr	r2, [pc, #156]	; (3d6c <printDbgMsgs+0x128>)
    3cd0:	009b      	lsls	r3, r3, #2
    3cd2:	5899      	ldr	r1, [r3, r2]
    3cd4:	4b26      	ldr	r3, [pc, #152]	; (3d70 <printDbgMsgs+0x12c>)
    3cd6:	781b      	ldrb	r3, [r3, #0]
    3cd8:	4a24      	ldr	r2, [pc, #144]	; (3d6c <printDbgMsgs+0x128>)
    3cda:	009b      	lsls	r3, r3, #2
    3cdc:	589a      	ldr	r2, [r3, r2]
    3cde:	4b25      	ldr	r3, [pc, #148]	; (3d74 <printDbgMsgs+0x130>)
    3ce0:	9400      	str	r4, [sp, #0]
    3ce2:	248c      	movs	r4, #140	; 0x8c
    3ce4:	19e4      	adds	r4, r4, r7
    3ce6:	6824      	ldr	r4, [r4, #0]
    3ce8:	9401      	str	r4, [sp, #4]
    3cea:	2488      	movs	r4, #136	; 0x88
    3cec:	19e4      	adds	r4, r4, r7
    3cee:	6824      	ldr	r4, [r4, #0]
    3cf0:	9402      	str	r4, [sp, #8]
    3cf2:	465c      	mov	r4, fp
    3cf4:	9403      	str	r4, [sp, #12]
    3cf6:	4654      	mov	r4, sl
    3cf8:	9404      	str	r4, [sp, #16]
    3cfa:	464c      	mov	r4, r9
    3cfc:	9405      	str	r4, [sp, #20]
    3cfe:	4664      	mov	r4, ip
    3d00:	9406      	str	r4, [sp, #24]
    3d02:	9007      	str	r0, [sp, #28]
    3d04:	9108      	str	r1, [sp, #32]
    3d06:	9209      	str	r2, [sp, #36]	; 0x24
    3d08:	1c18      	adds	r0, r3, #0
    3d0a:	4641      	mov	r1, r8
    3d0c:	1c32      	adds	r2, r6, #0
    3d0e:	1c2b      	adds	r3, r5, #0
    3d10:	4c19      	ldr	r4, [pc, #100]	; (3d78 <printDbgMsgs+0x134>)
    3d12:	47a0      	blx	r4
		modeNames[chamber1.mode_state],
		highUsageModeFlag,
		snsModeNames[sensor_state_tcha],
		snsModeNames[sensor_state_trej]);
		
	if (!enableDbgLoggingMode) { dbg("\n"); }
    3d14:	4b09      	ldr	r3, [pc, #36]	; (3d3c <printDbgMsgs+0xf8>)
    3d16:	781b      	ldrb	r3, [r3, #0]
    3d18:	2201      	movs	r2, #1
    3d1a:	4053      	eors	r3, r2
    3d1c:	b2db      	uxtb	r3, r3
    3d1e:	2b00      	cmp	r3, #0
    3d20:	d002      	beq.n	3d28 <printDbgMsgs+0xe4>
    3d22:	200a      	movs	r0, #10
    3d24:	4b15      	ldr	r3, [pc, #84]	; (3d7c <printDbgMsgs+0x138>)
    3d26:	4798      	blx	r3
	dbg_info("door=%s, drCnt1Hr=%d, drCntTot=%ld, drCntLife=%ld,",
    3d28:	4b15      	ldr	r3, [pc, #84]	; (3d80 <printDbgMsgs+0x13c>)
    3d2a:	781b      	ldrb	r3, [r3, #0]
    3d2c:	2b00      	cmp	r3, #0
    3d2e:	d02b      	beq.n	3d88 <printDbgMsgs+0x144>
    3d30:	4b14      	ldr	r3, [pc, #80]	; (3d84 <printDbgMsgs+0x140>)
    3d32:	e02a      	b.n	3d8a <printDbgMsgs+0x146>
    3d34:	20000f54 	.word	0x20000f54
    3d38:	00012939 	.word	0x00012939
    3d3c:	200002a1 	.word	0x200002a1
    3d40:	000238e4 	.word	0x000238e4
    3d44:	0001b899 	.word	0x0001b899
    3d48:	0000dcad 	.word	0x0000dcad
    3d4c:	fffeae80 	.word	0xfffeae80
    3d50:	20000332 	.word	0x20000332
    3d54:	20000ed0 	.word	0x20000ed0
    3d58:	20000e0c 	.word	0x20000e0c
    3d5c:	200009b8 	.word	0x200009b8
    3d60:	20000000 	.word	0x20000000
    3d64:	20000377 	.word	0x20000377
    3d68:	2000036d 	.word	0x2000036d
    3d6c:	2000001c 	.word	0x2000001c
    3d70:	2000036e 	.word	0x2000036e
    3d74:	000238e8 	.word	0x000238e8
    3d78:	0001b62d 	.word	0x0001b62d
    3d7c:	0001b685 	.word	0x0001b685
    3d80:	20000345 	.word	0x20000345
    3d84:	00023958 	.word	0x00023958
    3d88:	4bef      	ldr	r3, [pc, #956]	; (4148 <printDbgMsgs+0x504>)
    3d8a:	4af0      	ldr	r2, [pc, #960]	; (414c <printDbgMsgs+0x508>)
    3d8c:	8812      	ldrh	r2, [r2, #0]
    3d8e:	1c15      	adds	r5, r2, #0
    3d90:	4aef      	ldr	r2, [pc, #956]	; (4150 <printDbgMsgs+0x50c>)
    3d92:	6814      	ldr	r4, [r2, #0]
    3d94:	4aef      	ldr	r2, [pc, #956]	; (4154 <printDbgMsgs+0x510>)
    3d96:	6811      	ldr	r1, [r2, #0]
    3d98:	4aef      	ldr	r2, [pc, #956]	; (4158 <printDbgMsgs+0x514>)
    3d9a:	9100      	str	r1, [sp, #0]
    3d9c:	1c10      	adds	r0, r2, #0
    3d9e:	1c19      	adds	r1, r3, #0
    3da0:	1c2a      	adds	r2, r5, #0
    3da2:	1c23      	adds	r3, r4, #0
    3da4:	4ced      	ldr	r4, [pc, #948]	; (415c <printDbgMsgs+0x518>)
    3da6:	47a0      	blx	r4
		doorOpenPresentStatus?"open":"closed",
		doorOpenCount_1Hr,
		doorOpenCount_Tec,
		doorOpenLifetimeCnt);		
			
	if (!enableDbgLoggingMode) { dbg("\n"); }	
    3da8:	4bed      	ldr	r3, [pc, #948]	; (4160 <printDbgMsgs+0x51c>)
    3daa:	781b      	ldrb	r3, [r3, #0]
    3dac:	2201      	movs	r2, #1
    3dae:	4053      	eors	r3, r2
    3db0:	b2db      	uxtb	r3, r3
    3db2:	2b00      	cmp	r3, #0
    3db4:	d002      	beq.n	3dbc <printDbgMsgs+0x178>
    3db6:	200a      	movs	r0, #10
    3db8:	4bea      	ldr	r3, [pc, #936]	; (4164 <printDbgMsgs+0x520>)
    3dba:	4798      	blx	r3
	dbg_info("cha1Offset=%4.2f, chaOffset=%4.2f, glyOffset=%4.2f, dbH=%4.2f, dbL=%4.2f,",
    3dbc:	4bea      	ldr	r3, [pc, #936]	; (4168 <printDbgMsgs+0x524>)
    3dbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3dc0:	4bea      	ldr	r3, [pc, #936]	; (416c <printDbgMsgs+0x528>)
    3dc2:	1c10      	adds	r0, r2, #0
    3dc4:	4798      	blx	r3
    3dc6:	1c04      	adds	r4, r0, #0
    3dc8:	1c0d      	adds	r5, r1, #0
    3dca:	4be9      	ldr	r3, [pc, #932]	; (4170 <printDbgMsgs+0x52c>)
    3dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3dce:	4be7      	ldr	r3, [pc, #924]	; (416c <printDbgMsgs+0x528>)
    3dd0:	1c10      	adds	r0, r2, #0
    3dd2:	4798      	blx	r3
    3dd4:	2280      	movs	r2, #128	; 0x80
    3dd6:	19d2      	adds	r2, r2, r7
    3dd8:	6010      	str	r0, [r2, #0]
    3dda:	6051      	str	r1, [r2, #4]
    3ddc:	4be2      	ldr	r3, [pc, #904]	; (4168 <printDbgMsgs+0x524>)
    3dde:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    3de0:	4be2      	ldr	r3, [pc, #904]	; (416c <printDbgMsgs+0x528>)
    3de2:	1c10      	adds	r0, r2, #0
    3de4:	4798      	blx	r3
    3de6:	67b8      	str	r0, [r7, #120]	; 0x78
    3de8:	67f9      	str	r1, [r7, #124]	; 0x7c
    3dea:	4bdf      	ldr	r3, [pc, #892]	; (4168 <printDbgMsgs+0x524>)
    3dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    3dee:	4bdf      	ldr	r3, [pc, #892]	; (416c <printDbgMsgs+0x528>)
    3df0:	1c10      	adds	r0, r2, #0
    3df2:	4798      	blx	r3
    3df4:	6738      	str	r0, [r7, #112]	; 0x70
    3df6:	6779      	str	r1, [r7, #116]	; 0x74
    3df8:	4bdb      	ldr	r3, [pc, #876]	; (4168 <printDbgMsgs+0x524>)
    3dfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3dfc:	4bdb      	ldr	r3, [pc, #876]	; (416c <printDbgMsgs+0x528>)
    3dfe:	1c10      	adds	r0, r2, #0
    3e00:	4798      	blx	r3
    3e02:	6138      	str	r0, [r7, #16]
    3e04:	6179      	str	r1, [r7, #20]
    3e06:	49db      	ldr	r1, [pc, #876]	; (4174 <printDbgMsgs+0x530>)
    3e08:	2380      	movs	r3, #128	; 0x80
    3e0a:	19db      	adds	r3, r3, r7
    3e0c:	681a      	ldr	r2, [r3, #0]
    3e0e:	685b      	ldr	r3, [r3, #4]
    3e10:	9200      	str	r2, [sp, #0]
    3e12:	9301      	str	r3, [sp, #4]
    3e14:	6fba      	ldr	r2, [r7, #120]	; 0x78
    3e16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    3e18:	9202      	str	r2, [sp, #8]
    3e1a:	9303      	str	r3, [sp, #12]
    3e1c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    3e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    3e20:	9204      	str	r2, [sp, #16]
    3e22:	9305      	str	r3, [sp, #20]
    3e24:	693a      	ldr	r2, [r7, #16]
    3e26:	697b      	ldr	r3, [r7, #20]
    3e28:	9206      	str	r2, [sp, #24]
    3e2a:	9307      	str	r3, [sp, #28]
    3e2c:	1c08      	adds	r0, r1, #0
    3e2e:	1c22      	adds	r2, r4, #0
    3e30:	1c2b      	adds	r3, r5, #0
    3e32:	49ca      	ldr	r1, [pc, #808]	; (415c <printDbgMsgs+0x518>)
    3e34:	4788      	blx	r1
		chamber2.chamberOffset,
		chamber1.glycolOffset,
		chamber1.deadband,
		chamber1.deadbandLow);
			
	if (!enableDbgLoggingMode) { dbg("\n"); }			
    3e36:	4bca      	ldr	r3, [pc, #808]	; (4160 <printDbgMsgs+0x51c>)
    3e38:	781b      	ldrb	r3, [r3, #0]
    3e3a:	2201      	movs	r2, #1
    3e3c:	4053      	eors	r3, r2
    3e3e:	b2db      	uxtb	r3, r3
    3e40:	2b00      	cmp	r3, #0
    3e42:	d002      	beq.n	3e4a <printDbgMsgs+0x206>
    3e44:	200a      	movs	r0, #10
    3e46:	4bc7      	ldr	r3, [pc, #796]	; (4164 <printDbgMsgs+0x520>)
    3e48:	4798      	blx	r3
	dbg_info("Tset=%4.2f, Tctl=%4.2f,",
    3e4a:	4bc7      	ldr	r3, [pc, #796]	; (4168 <printDbgMsgs+0x524>)
    3e4c:	699a      	ldr	r2, [r3, #24]
    3e4e:	4bc7      	ldr	r3, [pc, #796]	; (416c <printDbgMsgs+0x528>)
    3e50:	1c10      	adds	r0, r2, #0
    3e52:	4798      	blx	r3
    3e54:	1c04      	adds	r4, r0, #0
    3e56:	1c0d      	adds	r5, r1, #0
    3e58:	4bc7      	ldr	r3, [pc, #796]	; (4178 <printDbgMsgs+0x534>)
    3e5a:	681a      	ldr	r2, [r3, #0]
    3e5c:	4bc3      	ldr	r3, [pc, #780]	; (416c <printDbgMsgs+0x528>)
    3e5e:	1c10      	adds	r0, r2, #0
    3e60:	4798      	blx	r3
    3e62:	1c02      	adds	r2, r0, #0
    3e64:	1c0b      	adds	r3, r1, #0
    3e66:	49c5      	ldr	r1, [pc, #788]	; (417c <printDbgMsgs+0x538>)
    3e68:	9200      	str	r2, [sp, #0]
    3e6a:	9301      	str	r3, [sp, #4]
    3e6c:	1c08      	adds	r0, r1, #0
    3e6e:	1c22      	adds	r2, r4, #0
    3e70:	1c2b      	adds	r3, r5, #0
    3e72:	49ba      	ldr	r1, [pc, #744]	; (415c <printDbgMsgs+0x518>)
    3e74:	4788      	blx	r1
		chamber1.setpoint,
		controlTemperature);
			
	#ifdef HIGH_PERFORMANCE	
	dbg_info(" Tcha1=%4.2f,", chamber1.chamberTemp);
    3e76:	4bbc      	ldr	r3, [pc, #752]	; (4168 <printDbgMsgs+0x524>)
    3e78:	685a      	ldr	r2, [r3, #4]
    3e7a:	4bbc      	ldr	r3, [pc, #752]	; (416c <printDbgMsgs+0x528>)
    3e7c:	1c10      	adds	r0, r2, #0
    3e7e:	4798      	blx	r3
    3e80:	1c03      	adds	r3, r0, #0
    3e82:	1c0c      	adds	r4, r1, #0
    3e84:	4abe      	ldr	r2, [pc, #760]	; (4180 <printDbgMsgs+0x53c>)
    3e86:	1c10      	adds	r0, r2, #0
    3e88:	1c1a      	adds	r2, r3, #0
    3e8a:	1c23      	adds	r3, r4, #0
    3e8c:	49b3      	ldr	r1, [pc, #716]	; (415c <printDbgMsgs+0x518>)
    3e8e:	4788      	blx	r1
	#endif
			
	dbg_info(" Tcha2=%4.2f, Tgly=%4.2f, Trej1=%4.2f,",	
    3e90:	4bb7      	ldr	r3, [pc, #732]	; (4170 <printDbgMsgs+0x52c>)
    3e92:	685a      	ldr	r2, [r3, #4]
    3e94:	4bb5      	ldr	r3, [pc, #724]	; (416c <printDbgMsgs+0x528>)
    3e96:	1c10      	adds	r0, r2, #0
    3e98:	4798      	blx	r3
    3e9a:	1c04      	adds	r4, r0, #0
    3e9c:	1c0d      	adds	r5, r1, #0
    3e9e:	4bb2      	ldr	r3, [pc, #712]	; (4168 <printDbgMsgs+0x524>)
    3ea0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    3ea2:	4bb2      	ldr	r3, [pc, #712]	; (416c <printDbgMsgs+0x528>)
    3ea4:	1c10      	adds	r0, r2, #0
    3ea6:	4798      	blx	r3
    3ea8:	66b8      	str	r0, [r7, #104]	; 0x68
    3eaa:	66f9      	str	r1, [r7, #108]	; 0x6c
    3eac:	4bae      	ldr	r3, [pc, #696]	; (4168 <printDbgMsgs+0x524>)
    3eae:	68da      	ldr	r2, [r3, #12]
    3eb0:	4bae      	ldr	r3, [pc, #696]	; (416c <printDbgMsgs+0x528>)
    3eb2:	1c10      	adds	r0, r2, #0
    3eb4:	4798      	blx	r3
    3eb6:	6138      	str	r0, [r7, #16]
    3eb8:	6179      	str	r1, [r7, #20]
    3eba:	49b2      	ldr	r1, [pc, #712]	; (4184 <printDbgMsgs+0x540>)
    3ebc:	6eba      	ldr	r2, [r7, #104]	; 0x68
    3ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    3ec0:	9200      	str	r2, [sp, #0]
    3ec2:	9301      	str	r3, [sp, #4]
    3ec4:	693a      	ldr	r2, [r7, #16]
    3ec6:	697b      	ldr	r3, [r7, #20]
    3ec8:	9202      	str	r2, [sp, #8]
    3eca:	9303      	str	r3, [sp, #12]
    3ecc:	1c08      	adds	r0, r1, #0
    3ece:	1c22      	adds	r2, r4, #0
    3ed0:	1c2b      	adds	r3, r5, #0
    3ed2:	49a2      	ldr	r1, [pc, #648]	; (415c <printDbgMsgs+0x518>)
    3ed4:	4788      	blx	r1
		chamber2.chamberTemp,
		chamber1.glycolTemp,
		chamber1.rejectTemp);

	#ifdef HIGH_PERFORMANCE
	dbg_info(" Trej2=%4.2f, Tdif=%4.2f,",
    3ed6:	4ba6      	ldr	r3, [pc, #664]	; (4170 <printDbgMsgs+0x52c>)
    3ed8:	68da      	ldr	r2, [r3, #12]
    3eda:	4ba4      	ldr	r3, [pc, #656]	; (416c <printDbgMsgs+0x528>)
    3edc:	1c10      	adds	r0, r2, #0
    3ede:	4798      	blx	r3
    3ee0:	1c04      	adds	r4, r0, #0
    3ee2:	1c0d      	adds	r5, r1, #0
    3ee4:	4ba8      	ldr	r3, [pc, #672]	; (4188 <printDbgMsgs+0x544>)
    3ee6:	681a      	ldr	r2, [r3, #0]
    3ee8:	4ba0      	ldr	r3, [pc, #640]	; (416c <printDbgMsgs+0x528>)
    3eea:	1c10      	adds	r0, r2, #0
    3eec:	4798      	blx	r3
    3eee:	1c02      	adds	r2, r0, #0
    3ef0:	1c0b      	adds	r3, r1, #0
    3ef2:	49a6      	ldr	r1, [pc, #664]	; (418c <printDbgMsgs+0x548>)
    3ef4:	9200      	str	r2, [sp, #0]
    3ef6:	9301      	str	r3, [sp, #4]
    3ef8:	1c08      	adds	r0, r1, #0
    3efa:	1c22      	adds	r2, r4, #0
    3efc:	1c2b      	adds	r3, r5, #0
    3efe:	4997      	ldr	r1, [pc, #604]	; (415c <printDbgMsgs+0x518>)
    3f00:	4788      	blx	r1
		chamber2.rejectTemp,
		chamberTempDifference);		
	#endif
	
	dbg_info(" cond=%4.2f,",
    3f02:	4ba3      	ldr	r3, [pc, #652]	; (4190 <printDbgMsgs+0x54c>)
    3f04:	681a      	ldr	r2, [r3, #0]
    3f06:	4b99      	ldr	r3, [pc, #612]	; (416c <printDbgMsgs+0x528>)
    3f08:	1c10      	adds	r0, r2, #0
    3f0a:	4798      	blx	r3
    3f0c:	1c03      	adds	r3, r0, #0
    3f0e:	1c0c      	adds	r4, r1, #0
    3f10:	4aa0      	ldr	r2, [pc, #640]	; (4194 <printDbgMsgs+0x550>)
    3f12:	1c10      	adds	r0, r2, #0
    3f14:	1c1a      	adds	r2, r3, #0
    3f16:	1c23      	adds	r3, r4, #0
    3f18:	4990      	ldr	r1, [pc, #576]	; (415c <printDbgMsgs+0x518>)
    3f1a:	4788      	blx	r1
		condensateTemp);

	if (!enableDbgLoggingMode) { dbg("\n"); }		
    3f1c:	4b90      	ldr	r3, [pc, #576]	; (4160 <printDbgMsgs+0x51c>)
    3f1e:	781b      	ldrb	r3, [r3, #0]
    3f20:	2201      	movs	r2, #1
    3f22:	4053      	eors	r3, r2
    3f24:	b2db      	uxtb	r3, r3
    3f26:	2b00      	cmp	r3, #0
    3f28:	d002      	beq.n	3f30 <printDbgMsgs+0x2ec>
    3f2a:	200a      	movs	r0, #10
    3f2c:	4b8d      	ldr	r3, [pc, #564]	; (4164 <printDbgMsgs+0x520>)
    3f2e:	4798      	blx	r3
	dbg_info("VB=%4.2f, VCC=%5.3f, VBAT=%4.2f, Vset=%4.2f,",
    3f30:	4b99      	ldr	r3, [pc, #612]	; (4198 <printDbgMsgs+0x554>)
    3f32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    3f34:	4b8d      	ldr	r3, [pc, #564]	; (416c <printDbgMsgs+0x528>)
    3f36:	1c10      	adds	r0, r2, #0
    3f38:	4798      	blx	r3
    3f3a:	1c04      	adds	r4, r0, #0
    3f3c:	1c0d      	adds	r5, r1, #0
    3f3e:	4b96      	ldr	r3, [pc, #600]	; (4198 <printDbgMsgs+0x554>)
    3f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3f42:	4b8a      	ldr	r3, [pc, #552]	; (416c <printDbgMsgs+0x528>)
    3f44:	1c10      	adds	r0, r2, #0
    3f46:	4798      	blx	r3
    3f48:	6638      	str	r0, [r7, #96]	; 0x60
    3f4a:	6679      	str	r1, [r7, #100]	; 0x64
    3f4c:	4b92      	ldr	r3, [pc, #584]	; (4198 <printDbgMsgs+0x554>)
    3f4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    3f50:	4b86      	ldr	r3, [pc, #536]	; (416c <printDbgMsgs+0x528>)
    3f52:	1c10      	adds	r0, r2, #0
    3f54:	4798      	blx	r3
    3f56:	65b8      	str	r0, [r7, #88]	; 0x58
    3f58:	65f9      	str	r1, [r7, #92]	; 0x5c
    3f5a:	4b8f      	ldr	r3, [pc, #572]	; (4198 <printDbgMsgs+0x554>)
    3f5c:	695a      	ldr	r2, [r3, #20]
    3f5e:	4b83      	ldr	r3, [pc, #524]	; (416c <printDbgMsgs+0x528>)
    3f60:	1c10      	adds	r0, r2, #0
    3f62:	4798      	blx	r3
    3f64:	6138      	str	r0, [r7, #16]
    3f66:	6179      	str	r1, [r7, #20]
    3f68:	498c      	ldr	r1, [pc, #560]	; (419c <printDbgMsgs+0x558>)
    3f6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3f6e:	9200      	str	r2, [sp, #0]
    3f70:	9301      	str	r3, [sp, #4]
    3f72:	6dba      	ldr	r2, [r7, #88]	; 0x58
    3f74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    3f76:	9202      	str	r2, [sp, #8]
    3f78:	9303      	str	r3, [sp, #12]
    3f7a:	693a      	ldr	r2, [r7, #16]
    3f7c:	697b      	ldr	r3, [r7, #20]
    3f7e:	9204      	str	r2, [sp, #16]
    3f80:	9305      	str	r3, [sp, #20]
    3f82:	1c08      	adds	r0, r1, #0
    3f84:	1c22      	adds	r2, r4, #0
    3f86:	1c2b      	adds	r3, r5, #0
    3f88:	4974      	ldr	r1, [pc, #464]	; (415c <printDbgMsgs+0x518>)
    3f8a:	4788      	blx	r1
		ps1.bulkVoltage,
		ps1.standbyVoltage,
		//ps1.logicVoltage,
		ps1.batteryVoltage,
		ps1.desiredVoltage);		
	dbg_info(" V1=%4.2f, I1=%4.2f, W1=%4.2f,",
    3f8c:	4b82      	ldr	r3, [pc, #520]	; (4198 <printDbgMsgs+0x554>)
    3f8e:	69da      	ldr	r2, [r3, #28]
    3f90:	4b76      	ldr	r3, [pc, #472]	; (416c <printDbgMsgs+0x528>)
    3f92:	1c10      	adds	r0, r2, #0
    3f94:	4798      	blx	r3
    3f96:	1c04      	adds	r4, r0, #0
    3f98:	1c0d      	adds	r5, r1, #0
    3f9a:	4b7f      	ldr	r3, [pc, #508]	; (4198 <printDbgMsgs+0x554>)
    3f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3f9e:	4b73      	ldr	r3, [pc, #460]	; (416c <printDbgMsgs+0x528>)
    3fa0:	1c10      	adds	r0, r2, #0
    3fa2:	4798      	blx	r3
    3fa4:	6538      	str	r0, [r7, #80]	; 0x50
    3fa6:	6579      	str	r1, [r7, #84]	; 0x54
    3fa8:	4b7b      	ldr	r3, [pc, #492]	; (4198 <printDbgMsgs+0x554>)
    3faa:	6a1a      	ldr	r2, [r3, #32]
    3fac:	4b6f      	ldr	r3, [pc, #444]	; (416c <printDbgMsgs+0x528>)
    3fae:	1c10      	adds	r0, r2, #0
    3fb0:	4798      	blx	r3
    3fb2:	6138      	str	r0, [r7, #16]
    3fb4:	6179      	str	r1, [r7, #20]
    3fb6:	497a      	ldr	r1, [pc, #488]	; (41a0 <printDbgMsgs+0x55c>)
    3fb8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3fbc:	9200      	str	r2, [sp, #0]
    3fbe:	9301      	str	r3, [sp, #4]
    3fc0:	693a      	ldr	r2, [r7, #16]
    3fc2:	697b      	ldr	r3, [r7, #20]
    3fc4:	9202      	str	r2, [sp, #8]
    3fc6:	9303      	str	r3, [sp, #12]
    3fc8:	1c08      	adds	r0, r1, #0
    3fca:	1c22      	adds	r2, r4, #0
    3fcc:	1c2b      	adds	r3, r5, #0
    3fce:	4963      	ldr	r1, [pc, #396]	; (415c <printDbgMsgs+0x518>)
    3fd0:	4788      	blx	r1
		ps1.phpVoltage,
		ps1.outputCurrent,
		ps1.outputPower);
		
	#ifdef HIGH_PERFORMANCE	
	dbg_info(" V2=%4.2f, I2=%4.2f, W2=%4.2f,",
    3fd2:	4b74      	ldr	r3, [pc, #464]	; (41a4 <printDbgMsgs+0x560>)
    3fd4:	69da      	ldr	r2, [r3, #28]
    3fd6:	4b65      	ldr	r3, [pc, #404]	; (416c <printDbgMsgs+0x528>)
    3fd8:	1c10      	adds	r0, r2, #0
    3fda:	4798      	blx	r3
    3fdc:	1c04      	adds	r4, r0, #0
    3fde:	1c0d      	adds	r5, r1, #0
    3fe0:	4b70      	ldr	r3, [pc, #448]	; (41a4 <printDbgMsgs+0x560>)
    3fe2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3fe4:	4b61      	ldr	r3, [pc, #388]	; (416c <printDbgMsgs+0x528>)
    3fe6:	1c10      	adds	r0, r2, #0
    3fe8:	4798      	blx	r3
    3fea:	64b8      	str	r0, [r7, #72]	; 0x48
    3fec:	64f9      	str	r1, [r7, #76]	; 0x4c
    3fee:	4b6d      	ldr	r3, [pc, #436]	; (41a4 <printDbgMsgs+0x560>)
    3ff0:	6a1a      	ldr	r2, [r3, #32]
    3ff2:	4b5e      	ldr	r3, [pc, #376]	; (416c <printDbgMsgs+0x528>)
    3ff4:	1c10      	adds	r0, r2, #0
    3ff6:	4798      	blx	r3
    3ff8:	6138      	str	r0, [r7, #16]
    3ffa:	6179      	str	r1, [r7, #20]
    3ffc:	496a      	ldr	r1, [pc, #424]	; (41a8 <printDbgMsgs+0x564>)
    3ffe:	6cba      	ldr	r2, [r7, #72]	; 0x48
    4000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4002:	9200      	str	r2, [sp, #0]
    4004:	9301      	str	r3, [sp, #4]
    4006:	693a      	ldr	r2, [r7, #16]
    4008:	697b      	ldr	r3, [r7, #20]
    400a:	9202      	str	r2, [sp, #8]
    400c:	9303      	str	r3, [sp, #12]
    400e:	1c08      	adds	r0, r1, #0
    4010:	1c22      	adds	r2, r4, #0
    4012:	1c2b      	adds	r3, r5, #0
    4014:	4951      	ldr	r1, [pc, #324]	; (415c <printDbgMsgs+0x518>)
    4016:	4788      	blx	r1
		ps2.phpVoltage,
		ps2.outputCurrent,
		ps2.outputPower);
	#endif

	if (!enableDbgLoggingMode) { dbg("\n"); }		
    4018:	4b51      	ldr	r3, [pc, #324]	; (4160 <printDbgMsgs+0x51c>)
    401a:	781b      	ldrb	r3, [r3, #0]
    401c:	2201      	movs	r2, #1
    401e:	4053      	eors	r3, r2
    4020:	b2db      	uxtb	r3, r3
    4022:	2b00      	cmp	r3, #0
    4024:	d002      	beq.n	402c <printDbgMsgs+0x3e8>
    4026:	200a      	movs	r0, #10
    4028:	4b4e      	ldr	r3, [pc, #312]	; (4164 <printDbgMsgs+0x520>)
    402a:	4798      	blx	r3
	dbg_info("CHAMBER-A, Fan1=%d, Set1=%d, Rpm1=%lu, Stall1=%d, f1State=%d, pid4=%4.2f, inh=%lu, inh_to=%lu,",
    402c:	4b5f      	ldr	r3, [pc, #380]	; (41ac <printDbgMsgs+0x568>)
    402e:	7d5b      	ldrb	r3, [r3, #21]
    4030:	4698      	mov	r8, r3
    4032:	4a5e      	ldr	r2, [pc, #376]	; (41ac <printDbgMsgs+0x568>)
    4034:	2330      	movs	r3, #48	; 0x30
    4036:	5cd3      	ldrb	r3, [r2, r3]
    4038:	1c1e      	adds	r6, r3, #0
    403a:	4b5c      	ldr	r3, [pc, #368]	; (41ac <printDbgMsgs+0x568>)
    403c:	691d      	ldr	r5, [r3, #16]
    403e:	4b5b      	ldr	r3, [pc, #364]	; (41ac <printDbgMsgs+0x568>)
    4040:	7f9b      	ldrb	r3, [r3, #30]
    4042:	469a      	mov	sl, r3
    4044:	4b59      	ldr	r3, [pc, #356]	; (41ac <printDbgMsgs+0x568>)
    4046:	7fdb      	ldrb	r3, [r3, #31]
    4048:	4699      	mov	r9, r3
    404a:	4b59      	ldr	r3, [pc, #356]	; (41b0 <printDbgMsgs+0x56c>)
    404c:	6a1a      	ldr	r2, [r3, #32]
    404e:	4b47      	ldr	r3, [pc, #284]	; (416c <printDbgMsgs+0x528>)
    4050:	1c10      	adds	r0, r2, #0
    4052:	4798      	blx	r3
    4054:	60b8      	str	r0, [r7, #8]
    4056:	60f9      	str	r1, [r7, #12]
    4058:	4a56      	ldr	r2, [pc, #344]	; (41b4 <printDbgMsgs+0x570>)
    405a:	6810      	ldr	r0, [r2, #0]
    405c:	4a56      	ldr	r2, [pc, #344]	; (41b8 <printDbgMsgs+0x574>)
    405e:	6811      	ldr	r1, [r2, #0]
    4060:	4a56      	ldr	r2, [pc, #344]	; (41bc <printDbgMsgs+0x578>)
    4062:	4653      	mov	r3, sl
    4064:	9300      	str	r3, [sp, #0]
    4066:	464c      	mov	r4, r9
    4068:	9401      	str	r4, [sp, #4]
    406a:	68bb      	ldr	r3, [r7, #8]
    406c:	68fc      	ldr	r4, [r7, #12]
    406e:	9302      	str	r3, [sp, #8]
    4070:	9403      	str	r4, [sp, #12]
    4072:	9004      	str	r0, [sp, #16]
    4074:	9105      	str	r1, [sp, #20]
    4076:	1c10      	adds	r0, r2, #0
    4078:	4641      	mov	r1, r8
    407a:	1c32      	adds	r2, r6, #0
    407c:	1c2b      	adds	r3, r5, #0
    407e:	4c37      	ldr	r4, [pc, #220]	; (415c <printDbgMsgs+0x518>)
    4080:	47a0      	blx	r4
		fan1.fan_state,
		pidFan4.Output,
		inhibitChamberFanTimestamp,
		inhibitChamberFanTimeoutTimestamp);

	dbg_info(" Rpm1Set=%d, LwrLim1=%d,",
    4082:	4b4a      	ldr	r3, [pc, #296]	; (41ac <printDbgMsgs+0x568>)
    4084:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    4086:	4b4e      	ldr	r3, [pc, #312]	; (41c0 <printDbgMsgs+0x57c>)
    4088:	1c10      	adds	r0, r2, #0
    408a:	4798      	blx	r3
    408c:	1c03      	adds	r3, r0, #0
    408e:	b29b      	uxth	r3, r3
    4090:	1c1c      	adds	r4, r3, #0
    4092:	4b46      	ldr	r3, [pc, #280]	; (41ac <printDbgMsgs+0x568>)
    4094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4096:	4b4a      	ldr	r3, [pc, #296]	; (41c0 <printDbgMsgs+0x57c>)
    4098:	1c10      	adds	r0, r2, #0
    409a:	4798      	blx	r3
    409c:	1c03      	adds	r3, r0, #0
    409e:	b29b      	uxth	r3, r3
    40a0:	4a48      	ldr	r2, [pc, #288]	; (41c4 <printDbgMsgs+0x580>)
    40a2:	1c10      	adds	r0, r2, #0
    40a4:	1c21      	adds	r1, r4, #0
    40a6:	1c1a      	adds	r2, r3, #0
    40a8:	4b2c      	ldr	r3, [pc, #176]	; (415c <printDbgMsgs+0x518>)
    40aa:	4798      	blx	r3
		(uint16_t)fan1.fanRpmSetting,
		(uint16_t)fan1.fanSpdLwrLim);	
	
	if (!enableDbgLoggingMode) { dbg("\n"); }		
    40ac:	4b2c      	ldr	r3, [pc, #176]	; (4160 <printDbgMsgs+0x51c>)
    40ae:	781b      	ldrb	r3, [r3, #0]
    40b0:	2201      	movs	r2, #1
    40b2:	4053      	eors	r3, r2
    40b4:	b2db      	uxtb	r3, r3
    40b6:	2b00      	cmp	r3, #0
    40b8:	d002      	beq.n	40c0 <printDbgMsgs+0x47c>
    40ba:	200a      	movs	r0, #10
    40bc:	4b29      	ldr	r3, [pc, #164]	; (4164 <printDbgMsgs+0x520>)
    40be:	4798      	blx	r3
	dbg_info("REJECT-1A, Fan2=%d, Set2=%d, Rpm2=%lu, Stall2=%d, f2State=%d,",
    40c0:	4b41      	ldr	r3, [pc, #260]	; (41c8 <printDbgMsgs+0x584>)
    40c2:	7d5b      	ldrb	r3, [r3, #21]
    40c4:	1c19      	adds	r1, r3, #0
    40c6:	4a40      	ldr	r2, [pc, #256]	; (41c8 <printDbgMsgs+0x584>)
    40c8:	2330      	movs	r3, #48	; 0x30
    40ca:	5cd3      	ldrb	r3, [r2, r3]
    40cc:	1c1a      	adds	r2, r3, #0
    40ce:	4b3e      	ldr	r3, [pc, #248]	; (41c8 <printDbgMsgs+0x584>)
    40d0:	691b      	ldr	r3, [r3, #16]
    40d2:	483d      	ldr	r0, [pc, #244]	; (41c8 <printDbgMsgs+0x584>)
    40d4:	7f80      	ldrb	r0, [r0, #30]
    40d6:	1c05      	adds	r5, r0, #0
    40d8:	483b      	ldr	r0, [pc, #236]	; (41c8 <printDbgMsgs+0x584>)
    40da:	7fc0      	ldrb	r0, [r0, #31]
    40dc:	1c04      	adds	r4, r0, #0
    40de:	483b      	ldr	r0, [pc, #236]	; (41cc <printDbgMsgs+0x588>)
    40e0:	9500      	str	r5, [sp, #0]
    40e2:	9401      	str	r4, [sp, #4]
    40e4:	4c1d      	ldr	r4, [pc, #116]	; (415c <printDbgMsgs+0x518>)
    40e6:	47a0      	blx	r4
		fan2.intDutyPercent,
		fan2.rpm,
		fan2.stall,
		fan2.fan_state);

	dbg_info(" Rpm2Set=%d, LwrLim2=%d,",
    40e8:	4b37      	ldr	r3, [pc, #220]	; (41c8 <printDbgMsgs+0x584>)
    40ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    40ec:	4b34      	ldr	r3, [pc, #208]	; (41c0 <printDbgMsgs+0x57c>)
    40ee:	1c10      	adds	r0, r2, #0
    40f0:	4798      	blx	r3
    40f2:	1c03      	adds	r3, r0, #0
    40f4:	b29b      	uxth	r3, r3
    40f6:	1c1c      	adds	r4, r3, #0
    40f8:	4b33      	ldr	r3, [pc, #204]	; (41c8 <printDbgMsgs+0x584>)
    40fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    40fc:	4b30      	ldr	r3, [pc, #192]	; (41c0 <printDbgMsgs+0x57c>)
    40fe:	1c10      	adds	r0, r2, #0
    4100:	4798      	blx	r3
    4102:	1c03      	adds	r3, r0, #0
    4104:	b29b      	uxth	r3, r3
    4106:	4a32      	ldr	r2, [pc, #200]	; (41d0 <printDbgMsgs+0x58c>)
    4108:	1c10      	adds	r0, r2, #0
    410a:	1c21      	adds	r1, r4, #0
    410c:	1c1a      	adds	r2, r3, #0
    410e:	4b13      	ldr	r3, [pc, #76]	; (415c <printDbgMsgs+0x518>)
    4110:	4798      	blx	r3
		(uint16_t)fan2.fanRpmSetting,
		(uint16_t)fan2.fanSpdLwrLim);

	if (!enableDbgLoggingMode) { dbg("\n"); }
    4112:	4b13      	ldr	r3, [pc, #76]	; (4160 <printDbgMsgs+0x51c>)
    4114:	781b      	ldrb	r3, [r3, #0]
    4116:	2201      	movs	r2, #1
    4118:	4053      	eors	r3, r2
    411a:	b2db      	uxtb	r3, r3
    411c:	2b00      	cmp	r3, #0
    411e:	d002      	beq.n	4126 <printDbgMsgs+0x4e2>
    4120:	200a      	movs	r0, #10
    4122:	4b10      	ldr	r3, [pc, #64]	; (4164 <printDbgMsgs+0x520>)
    4124:	4798      	blx	r3
	dbg_info("REJECT-2A, Fan5=%d, Set5=%d, Rpm5=%lu, Stall5=%d, f5State=%d,",
    4126:	4b2b      	ldr	r3, [pc, #172]	; (41d4 <printDbgMsgs+0x590>)
    4128:	7d5b      	ldrb	r3, [r3, #21]
    412a:	1c19      	adds	r1, r3, #0
    412c:	4a29      	ldr	r2, [pc, #164]	; (41d4 <printDbgMsgs+0x590>)
    412e:	2330      	movs	r3, #48	; 0x30
    4130:	5cd3      	ldrb	r3, [r2, r3]
    4132:	1c1a      	adds	r2, r3, #0
    4134:	4b27      	ldr	r3, [pc, #156]	; (41d4 <printDbgMsgs+0x590>)
    4136:	691b      	ldr	r3, [r3, #16]
    4138:	4826      	ldr	r0, [pc, #152]	; (41d4 <printDbgMsgs+0x590>)
    413a:	7f80      	ldrb	r0, [r0, #30]
    413c:	1c05      	adds	r5, r0, #0
    413e:	4825      	ldr	r0, [pc, #148]	; (41d4 <printDbgMsgs+0x590>)
    4140:	7fc0      	ldrb	r0, [r0, #31]
    4142:	1c04      	adds	r4, r0, #0
    4144:	e048      	b.n	41d8 <printDbgMsgs+0x594>
    4146:	46c0      	nop			; (mov r8, r8)
    4148:	00023960 	.word	0x00023960
    414c:	20000360 	.word	0x20000360
    4150:	2000035c 	.word	0x2000035c
    4154:	2000090c 	.word	0x2000090c
    4158:	00023968 	.word	0x00023968
    415c:	0001b62d 	.word	0x0001b62d
    4160:	200002a1 	.word	0x200002a1
    4164:	0001b685 	.word	0x0001b685
    4168:	200009b8 	.word	0x200009b8
    416c:	00022111 	.word	0x00022111
    4170:	20000960 	.word	0x20000960
    4174:	0002399c 	.word	0x0002399c
    4178:	20000188 	.word	0x20000188
    417c:	000239e8 	.word	0x000239e8
    4180:	00023a00 	.word	0x00023a00
    4184:	00023a10 	.word	0x00023a10
    4188:	20000350 	.word	0x20000350
    418c:	00023a38 	.word	0x00023a38
    4190:	200003b4 	.word	0x200003b4
    4194:	00023a54 	.word	0x00023a54
    4198:	20000a84 	.word	0x20000a84
    419c:	00023a64 	.word	0x00023a64
    41a0:	00023a94 	.word	0x00023a94
    41a4:	20000d64 	.word	0x20000d64
    41a8:	00023ab4 	.word	0x00023ab4
    41ac:	20000e84 	.word	0x20000e84
    41b0:	20000bd8 	.word	0x20000bd8
    41b4:	20000348 	.word	0x20000348
    41b8:	2000034c 	.word	0x2000034c
    41bc:	00023ad4 	.word	0x00023ad4
    41c0:	0001f6bd 	.word	0x0001f6bd
    41c4:	00023b34 	.word	0x00023b34
    41c8:	20000c58 	.word	0x20000c58
    41cc:	00023b50 	.word	0x00023b50
    41d0:	00023b90 	.word	0x00023b90
    41d4:	20000b8c 	.word	0x20000b8c
    41d8:	48c1      	ldr	r0, [pc, #772]	; (44e0 <printDbgMsgs+0x89c>)
    41da:	9500      	str	r5, [sp, #0]
    41dc:	9401      	str	r4, [sp, #4]
    41de:	4cc1      	ldr	r4, [pc, #772]	; (44e4 <printDbgMsgs+0x8a0>)
    41e0:	47a0      	blx	r4
		fan5.intDutyPercent,
		fan5.rpm,
		fan5.stall,
		fan5.fan_state);
	
	dbg_info(" Rpm5Set=%d, LwrLim5=%d,",
    41e2:	4bc1      	ldr	r3, [pc, #772]	; (44e8 <printDbgMsgs+0x8a4>)
    41e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    41e6:	4bc1      	ldr	r3, [pc, #772]	; (44ec <printDbgMsgs+0x8a8>)
    41e8:	1c10      	adds	r0, r2, #0
    41ea:	4798      	blx	r3
    41ec:	1c03      	adds	r3, r0, #0
    41ee:	b29b      	uxth	r3, r3
    41f0:	1c1c      	adds	r4, r3, #0
    41f2:	4bbd      	ldr	r3, [pc, #756]	; (44e8 <printDbgMsgs+0x8a4>)
    41f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    41f6:	4bbd      	ldr	r3, [pc, #756]	; (44ec <printDbgMsgs+0x8a8>)
    41f8:	1c10      	adds	r0, r2, #0
    41fa:	4798      	blx	r3
    41fc:	1c03      	adds	r3, r0, #0
    41fe:	b29b      	uxth	r3, r3
    4200:	4abb      	ldr	r2, [pc, #748]	; (44f0 <printDbgMsgs+0x8ac>)
    4202:	1c10      	adds	r0, r2, #0
    4204:	1c21      	adds	r1, r4, #0
    4206:	1c1a      	adds	r2, r3, #0
    4208:	4bb6      	ldr	r3, [pc, #728]	; (44e4 <printDbgMsgs+0x8a0>)
    420a:	4798      	blx	r3
		(uint16_t)fan5.fanRpmSetting,
		(uint16_t)fan5.fanSpdLwrLim);
	
	if (!enableDbgLoggingMode) { dbg("\n"); }
    420c:	4bb9      	ldr	r3, [pc, #740]	; (44f4 <printDbgMsgs+0x8b0>)
    420e:	781b      	ldrb	r3, [r3, #0]
    4210:	2201      	movs	r2, #1
    4212:	4053      	eors	r3, r2
    4214:	b2db      	uxtb	r3, r3
    4216:	2b00      	cmp	r3, #0
    4218:	d002      	beq.n	4220 <printDbgMsgs+0x5dc>
    421a:	200a      	movs	r0, #10
    421c:	4bb6      	ldr	r3, [pc, #728]	; (44f8 <printDbgMsgs+0x8b4>)
    421e:	4798      	blx	r3
	dbg_info("REJECT-3A, Fan6=%d, Set6=%d, Rpm6=%lu, Stall6=%d, f6State=%d,",
    4220:	4bb6      	ldr	r3, [pc, #728]	; (44fc <printDbgMsgs+0x8b8>)
    4222:	7d5b      	ldrb	r3, [r3, #21]
    4224:	1c19      	adds	r1, r3, #0
    4226:	4ab5      	ldr	r2, [pc, #724]	; (44fc <printDbgMsgs+0x8b8>)
    4228:	2330      	movs	r3, #48	; 0x30
    422a:	5cd3      	ldrb	r3, [r2, r3]
    422c:	1c1a      	adds	r2, r3, #0
    422e:	4bb3      	ldr	r3, [pc, #716]	; (44fc <printDbgMsgs+0x8b8>)
    4230:	691b      	ldr	r3, [r3, #16]
    4232:	48b2      	ldr	r0, [pc, #712]	; (44fc <printDbgMsgs+0x8b8>)
    4234:	7f80      	ldrb	r0, [r0, #30]
    4236:	1c05      	adds	r5, r0, #0
    4238:	48b0      	ldr	r0, [pc, #704]	; (44fc <printDbgMsgs+0x8b8>)
    423a:	7fc0      	ldrb	r0, [r0, #31]
    423c:	1c04      	adds	r4, r0, #0
    423e:	48b0      	ldr	r0, [pc, #704]	; (4500 <printDbgMsgs+0x8bc>)
    4240:	9500      	str	r5, [sp, #0]
    4242:	9401      	str	r4, [sp, #4]
    4244:	4ca7      	ldr	r4, [pc, #668]	; (44e4 <printDbgMsgs+0x8a0>)
    4246:	47a0      	blx	r4
		fan6.intDutyPercent,
		fan6.rpm,
		fan6.stall,
		fan6.fan_state);

	dbg_info(" Rpm6Set=%d, LwrLim6=%d,",
    4248:	4bac      	ldr	r3, [pc, #688]	; (44fc <printDbgMsgs+0x8b8>)
    424a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    424c:	4ba7      	ldr	r3, [pc, #668]	; (44ec <printDbgMsgs+0x8a8>)
    424e:	1c10      	adds	r0, r2, #0
    4250:	4798      	blx	r3
    4252:	1c03      	adds	r3, r0, #0
    4254:	b29b      	uxth	r3, r3
    4256:	1c1c      	adds	r4, r3, #0
    4258:	4ba8      	ldr	r3, [pc, #672]	; (44fc <printDbgMsgs+0x8b8>)
    425a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    425c:	4ba3      	ldr	r3, [pc, #652]	; (44ec <printDbgMsgs+0x8a8>)
    425e:	1c10      	adds	r0, r2, #0
    4260:	4798      	blx	r3
    4262:	1c03      	adds	r3, r0, #0
    4264:	b29b      	uxth	r3, r3
    4266:	4aa7      	ldr	r2, [pc, #668]	; (4504 <printDbgMsgs+0x8c0>)
    4268:	1c10      	adds	r0, r2, #0
    426a:	1c21      	adds	r1, r4, #0
    426c:	1c1a      	adds	r2, r3, #0
    426e:	4b9d      	ldr	r3, [pc, #628]	; (44e4 <printDbgMsgs+0x8a0>)
    4270:	4798      	blx	r3
		(uint16_t)fan6.fanRpmSetting,
		(uint16_t)fan6.fanSpdLwrLim);	

	if (!enableDbgLoggingMode) { dbg("\n"); }
    4272:	4ba0      	ldr	r3, [pc, #640]	; (44f4 <printDbgMsgs+0x8b0>)
    4274:	781b      	ldrb	r3, [r3, #0]
    4276:	2201      	movs	r2, #1
    4278:	4053      	eors	r3, r2
    427a:	b2db      	uxtb	r3, r3
    427c:	2b00      	cmp	r3, #0
    427e:	d002      	beq.n	4286 <printDbgMsgs+0x642>
    4280:	200a      	movs	r0, #10
    4282:	4b9d      	ldr	r3, [pc, #628]	; (44f8 <printDbgMsgs+0x8b4>)
    4284:	4798      	blx	r3
	dbg_info("CHAMBER-B, Fan4=%d, Set4=%d, Rpm4=%lu, Stall4=%d, f4State=%d, pid4=%4.2f, inh=%lu, inh_to=%lu,",
    4286:	4ba0      	ldr	r3, [pc, #640]	; (4508 <printDbgMsgs+0x8c4>)
    4288:	7d5b      	ldrb	r3, [r3, #21]
    428a:	4698      	mov	r8, r3
    428c:	4a9e      	ldr	r2, [pc, #632]	; (4508 <printDbgMsgs+0x8c4>)
    428e:	2330      	movs	r3, #48	; 0x30
    4290:	5cd3      	ldrb	r3, [r2, r3]
    4292:	1c1e      	adds	r6, r3, #0
    4294:	4b9c      	ldr	r3, [pc, #624]	; (4508 <printDbgMsgs+0x8c4>)
    4296:	691d      	ldr	r5, [r3, #16]
    4298:	4b9b      	ldr	r3, [pc, #620]	; (4508 <printDbgMsgs+0x8c4>)
    429a:	7f9b      	ldrb	r3, [r3, #30]
    429c:	469a      	mov	sl, r3
    429e:	4b9a      	ldr	r3, [pc, #616]	; (4508 <printDbgMsgs+0x8c4>)
    42a0:	7fdb      	ldrb	r3, [r3, #31]
    42a2:	4699      	mov	r9, r3
    42a4:	4b99      	ldr	r3, [pc, #612]	; (450c <printDbgMsgs+0x8c8>)
    42a6:	6a1a      	ldr	r2, [r3, #32]
    42a8:	4b99      	ldr	r3, [pc, #612]	; (4510 <printDbgMsgs+0x8cc>)
    42aa:	1c10      	adds	r0, r2, #0
    42ac:	4798      	blx	r3
    42ae:	60b8      	str	r0, [r7, #8]
    42b0:	60f9      	str	r1, [r7, #12]
    42b2:	4a98      	ldr	r2, [pc, #608]	; (4514 <printDbgMsgs+0x8d0>)
    42b4:	6810      	ldr	r0, [r2, #0]
    42b6:	4a98      	ldr	r2, [pc, #608]	; (4518 <printDbgMsgs+0x8d4>)
    42b8:	6811      	ldr	r1, [r2, #0]
    42ba:	4a98      	ldr	r2, [pc, #608]	; (451c <printDbgMsgs+0x8d8>)
    42bc:	4654      	mov	r4, sl
    42be:	9400      	str	r4, [sp, #0]
    42c0:	464b      	mov	r3, r9
    42c2:	9301      	str	r3, [sp, #4]
    42c4:	68bb      	ldr	r3, [r7, #8]
    42c6:	68fc      	ldr	r4, [r7, #12]
    42c8:	9302      	str	r3, [sp, #8]
    42ca:	9403      	str	r4, [sp, #12]
    42cc:	9004      	str	r0, [sp, #16]
    42ce:	9105      	str	r1, [sp, #20]
    42d0:	1c10      	adds	r0, r2, #0
    42d2:	4641      	mov	r1, r8
    42d4:	1c32      	adds	r2, r6, #0
    42d6:	1c2b      	adds	r3, r5, #0
    42d8:	4c82      	ldr	r4, [pc, #520]	; (44e4 <printDbgMsgs+0x8a0>)
    42da:	47a0      	blx	r4
		fan4.fan_state,
		pidFan4.Output,
		inhibitChamberFanTimestamp,
		inhibitChamberFanTimeoutTimestamp);

	dbg_info(" Rpm4Set=%d, LwrLim4=%d,",
    42dc:	4b8a      	ldr	r3, [pc, #552]	; (4508 <printDbgMsgs+0x8c4>)
    42de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    42e0:	4b82      	ldr	r3, [pc, #520]	; (44ec <printDbgMsgs+0x8a8>)
    42e2:	1c10      	adds	r0, r2, #0
    42e4:	4798      	blx	r3
    42e6:	1c03      	adds	r3, r0, #0
    42e8:	b29b      	uxth	r3, r3
    42ea:	1c1c      	adds	r4, r3, #0
    42ec:	4b86      	ldr	r3, [pc, #536]	; (4508 <printDbgMsgs+0x8c4>)
    42ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    42f0:	4b7e      	ldr	r3, [pc, #504]	; (44ec <printDbgMsgs+0x8a8>)
    42f2:	1c10      	adds	r0, r2, #0
    42f4:	4798      	blx	r3
    42f6:	1c03      	adds	r3, r0, #0
    42f8:	b29b      	uxth	r3, r3
    42fa:	4a89      	ldr	r2, [pc, #548]	; (4520 <printDbgMsgs+0x8dc>)
    42fc:	1c10      	adds	r0, r2, #0
    42fe:	1c21      	adds	r1, r4, #0
    4300:	1c1a      	adds	r2, r3, #0
    4302:	4b78      	ldr	r3, [pc, #480]	; (44e4 <printDbgMsgs+0x8a0>)
    4304:	4798      	blx	r3
		(uint16_t)fan4.fanRpmSetting,
		(uint16_t)fan4.fanSpdLwrLim);

	if (!enableDbgLoggingMode) { dbg("\n"); }
    4306:	4b7b      	ldr	r3, [pc, #492]	; (44f4 <printDbgMsgs+0x8b0>)
    4308:	781b      	ldrb	r3, [r3, #0]
    430a:	2201      	movs	r2, #1
    430c:	4053      	eors	r3, r2
    430e:	b2db      	uxtb	r3, r3
    4310:	2b00      	cmp	r3, #0
    4312:	d002      	beq.n	431a <printDbgMsgs+0x6d6>
    4314:	200a      	movs	r0, #10
    4316:	4b78      	ldr	r3, [pc, #480]	; (44f8 <printDbgMsgs+0x8b4>)
    4318:	4798      	blx	r3
	dbg_info("REJECT-1B, Fan3=%d, Set3=%d, Rpm3=%lu, Stall3=%d, f3State=%d,",
    431a:	4b82      	ldr	r3, [pc, #520]	; (4524 <printDbgMsgs+0x8e0>)
    431c:	7d5b      	ldrb	r3, [r3, #21]
    431e:	1c19      	adds	r1, r3, #0
    4320:	4a80      	ldr	r2, [pc, #512]	; (4524 <printDbgMsgs+0x8e0>)
    4322:	2330      	movs	r3, #48	; 0x30
    4324:	5cd3      	ldrb	r3, [r2, r3]
    4326:	1c1a      	adds	r2, r3, #0
    4328:	4b7e      	ldr	r3, [pc, #504]	; (4524 <printDbgMsgs+0x8e0>)
    432a:	691b      	ldr	r3, [r3, #16]
    432c:	487d      	ldr	r0, [pc, #500]	; (4524 <printDbgMsgs+0x8e0>)
    432e:	7f80      	ldrb	r0, [r0, #30]
    4330:	1c05      	adds	r5, r0, #0
    4332:	487c      	ldr	r0, [pc, #496]	; (4524 <printDbgMsgs+0x8e0>)
    4334:	7fc0      	ldrb	r0, [r0, #31]
    4336:	1c04      	adds	r4, r0, #0
    4338:	487b      	ldr	r0, [pc, #492]	; (4528 <printDbgMsgs+0x8e4>)
    433a:	9500      	str	r5, [sp, #0]
    433c:	9401      	str	r4, [sp, #4]
    433e:	4c69      	ldr	r4, [pc, #420]	; (44e4 <printDbgMsgs+0x8a0>)
    4340:	47a0      	blx	r4
		fan3.intDutyPercent,
		fan3.rpm,
		fan3.stall,
		fan3.fan_state);

	dbg_info(" Rpm3Set=%d, LwrLim3=%d,",
    4342:	4b78      	ldr	r3, [pc, #480]	; (4524 <printDbgMsgs+0x8e0>)
    4344:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    4346:	4b69      	ldr	r3, [pc, #420]	; (44ec <printDbgMsgs+0x8a8>)
    4348:	1c10      	adds	r0, r2, #0
    434a:	4798      	blx	r3
    434c:	1c03      	adds	r3, r0, #0
    434e:	b29b      	uxth	r3, r3
    4350:	1c1c      	adds	r4, r3, #0
    4352:	4b74      	ldr	r3, [pc, #464]	; (4524 <printDbgMsgs+0x8e0>)
    4354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4356:	4b65      	ldr	r3, [pc, #404]	; (44ec <printDbgMsgs+0x8a8>)
    4358:	1c10      	adds	r0, r2, #0
    435a:	4798      	blx	r3
    435c:	1c03      	adds	r3, r0, #0
    435e:	b29b      	uxth	r3, r3
    4360:	4a72      	ldr	r2, [pc, #456]	; (452c <printDbgMsgs+0x8e8>)
    4362:	1c10      	adds	r0, r2, #0
    4364:	1c21      	adds	r1, r4, #0
    4366:	1c1a      	adds	r2, r3, #0
    4368:	4b5e      	ldr	r3, [pc, #376]	; (44e4 <printDbgMsgs+0x8a0>)
    436a:	4798      	blx	r3
		(uint16_t)fan3.fanRpmSetting,
		(uint16_t)fan3.fanSpdLwrLim);
		
	if (!enableDbgLoggingMode) { dbg("\n"); }
    436c:	4b61      	ldr	r3, [pc, #388]	; (44f4 <printDbgMsgs+0x8b0>)
    436e:	781b      	ldrb	r3, [r3, #0]
    4370:	2201      	movs	r2, #1
    4372:	4053      	eors	r3, r2
    4374:	b2db      	uxtb	r3, r3
    4376:	2b00      	cmp	r3, #0
    4378:	d002      	beq.n	4380 <printDbgMsgs+0x73c>
    437a:	200a      	movs	r0, #10
    437c:	4b5e      	ldr	r3, [pc, #376]	; (44f8 <printDbgMsgs+0x8b4>)
    437e:	4798      	blx	r3
	dbg_info("REJECT-2B, Fan8=%d, Set8=%d, Rpm8=%lu, Stall8=%d, f8State=%d,",
    4380:	4b6b      	ldr	r3, [pc, #428]	; (4530 <printDbgMsgs+0x8ec>)
    4382:	7d5b      	ldrb	r3, [r3, #21]
    4384:	1c19      	adds	r1, r3, #0
    4386:	4a6a      	ldr	r2, [pc, #424]	; (4530 <printDbgMsgs+0x8ec>)
    4388:	2330      	movs	r3, #48	; 0x30
    438a:	5cd3      	ldrb	r3, [r2, r3]
    438c:	1c1a      	adds	r2, r3, #0
    438e:	4b68      	ldr	r3, [pc, #416]	; (4530 <printDbgMsgs+0x8ec>)
    4390:	691b      	ldr	r3, [r3, #16]
    4392:	4867      	ldr	r0, [pc, #412]	; (4530 <printDbgMsgs+0x8ec>)
    4394:	7f80      	ldrb	r0, [r0, #30]
    4396:	1c05      	adds	r5, r0, #0
    4398:	4865      	ldr	r0, [pc, #404]	; (4530 <printDbgMsgs+0x8ec>)
    439a:	7fc0      	ldrb	r0, [r0, #31]
    439c:	1c04      	adds	r4, r0, #0
    439e:	4865      	ldr	r0, [pc, #404]	; (4534 <printDbgMsgs+0x8f0>)
    43a0:	9500      	str	r5, [sp, #0]
    43a2:	9401      	str	r4, [sp, #4]
    43a4:	4c4f      	ldr	r4, [pc, #316]	; (44e4 <printDbgMsgs+0x8a0>)
    43a6:	47a0      	blx	r4
		fan8.intDutyPercent,
		fan8.rpm,
		fan8.stall,
		fan8.fan_state);

	dbg_info(" Rpm8Set=%d, LwrLim8=%d,",
    43a8:	4b61      	ldr	r3, [pc, #388]	; (4530 <printDbgMsgs+0x8ec>)
    43aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    43ac:	4b4f      	ldr	r3, [pc, #316]	; (44ec <printDbgMsgs+0x8a8>)
    43ae:	1c10      	adds	r0, r2, #0
    43b0:	4798      	blx	r3
    43b2:	1c03      	adds	r3, r0, #0
    43b4:	b29b      	uxth	r3, r3
    43b6:	1c1c      	adds	r4, r3, #0
    43b8:	4b5d      	ldr	r3, [pc, #372]	; (4530 <printDbgMsgs+0x8ec>)
    43ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    43bc:	4b4b      	ldr	r3, [pc, #300]	; (44ec <printDbgMsgs+0x8a8>)
    43be:	1c10      	adds	r0, r2, #0
    43c0:	4798      	blx	r3
    43c2:	1c03      	adds	r3, r0, #0
    43c4:	b29b      	uxth	r3, r3
    43c6:	4a5c      	ldr	r2, [pc, #368]	; (4538 <printDbgMsgs+0x8f4>)
    43c8:	1c10      	adds	r0, r2, #0
    43ca:	1c21      	adds	r1, r4, #0
    43cc:	1c1a      	adds	r2, r3, #0
    43ce:	4b45      	ldr	r3, [pc, #276]	; (44e4 <printDbgMsgs+0x8a0>)
    43d0:	4798      	blx	r3
		(uint16_t)fan8.fanRpmSetting,
		(uint16_t)fan8.fanSpdLwrLim);
	
	if (!enableDbgLoggingMode) { dbg("\n"); }
    43d2:	4b48      	ldr	r3, [pc, #288]	; (44f4 <printDbgMsgs+0x8b0>)
    43d4:	781b      	ldrb	r3, [r3, #0]
    43d6:	2201      	movs	r2, #1
    43d8:	4053      	eors	r3, r2
    43da:	b2db      	uxtb	r3, r3
    43dc:	2b00      	cmp	r3, #0
    43de:	d002      	beq.n	43e6 <printDbgMsgs+0x7a2>
    43e0:	200a      	movs	r0, #10
    43e2:	4b45      	ldr	r3, [pc, #276]	; (44f8 <printDbgMsgs+0x8b4>)
    43e4:	4798      	blx	r3
	dbg_info("REJECT-3B, Fan7=%d, Set7=%d, Rpm7=%lu, Stall7=%d, f7State=%d,",
    43e6:	4b55      	ldr	r3, [pc, #340]	; (453c <printDbgMsgs+0x8f8>)
    43e8:	7d5b      	ldrb	r3, [r3, #21]
    43ea:	1c19      	adds	r1, r3, #0
    43ec:	4a53      	ldr	r2, [pc, #332]	; (453c <printDbgMsgs+0x8f8>)
    43ee:	2330      	movs	r3, #48	; 0x30
    43f0:	5cd3      	ldrb	r3, [r2, r3]
    43f2:	1c1a      	adds	r2, r3, #0
    43f4:	4b51      	ldr	r3, [pc, #324]	; (453c <printDbgMsgs+0x8f8>)
    43f6:	691b      	ldr	r3, [r3, #16]
    43f8:	4850      	ldr	r0, [pc, #320]	; (453c <printDbgMsgs+0x8f8>)
    43fa:	7f80      	ldrb	r0, [r0, #30]
    43fc:	1c05      	adds	r5, r0, #0
    43fe:	484f      	ldr	r0, [pc, #316]	; (453c <printDbgMsgs+0x8f8>)
    4400:	7fc0      	ldrb	r0, [r0, #31]
    4402:	1c04      	adds	r4, r0, #0
    4404:	484e      	ldr	r0, [pc, #312]	; (4540 <printDbgMsgs+0x8fc>)
    4406:	9500      	str	r5, [sp, #0]
    4408:	9401      	str	r4, [sp, #4]
    440a:	4c36      	ldr	r4, [pc, #216]	; (44e4 <printDbgMsgs+0x8a0>)
    440c:	47a0      	blx	r4
		fan7.intDutyPercent,
		fan7.rpm,
		fan7.stall,
		fan7.fan_state);

	dbg_info(" Rpm7Set=%d, LwrLim7=%d,",
    440e:	4b4b      	ldr	r3, [pc, #300]	; (453c <printDbgMsgs+0x8f8>)
    4410:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    4412:	4b36      	ldr	r3, [pc, #216]	; (44ec <printDbgMsgs+0x8a8>)
    4414:	1c10      	adds	r0, r2, #0
    4416:	4798      	blx	r3
    4418:	1c03      	adds	r3, r0, #0
    441a:	b29b      	uxth	r3, r3
    441c:	1c1c      	adds	r4, r3, #0
    441e:	4b47      	ldr	r3, [pc, #284]	; (453c <printDbgMsgs+0x8f8>)
    4420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4422:	4b32      	ldr	r3, [pc, #200]	; (44ec <printDbgMsgs+0x8a8>)
    4424:	1c10      	adds	r0, r2, #0
    4426:	4798      	blx	r3
    4428:	1c03      	adds	r3, r0, #0
    442a:	b29b      	uxth	r3, r3
    442c:	4a45      	ldr	r2, [pc, #276]	; (4544 <printDbgMsgs+0x900>)
    442e:	1c10      	adds	r0, r2, #0
    4430:	1c21      	adds	r1, r4, #0
    4432:	1c1a      	adds	r2, r3, #0
    4434:	4b2b      	ldr	r3, [pc, #172]	; (44e4 <printDbgMsgs+0x8a0>)
    4436:	4798      	blx	r3
		(uint16_t)fan7.fanRpmSetting,
		(uint16_t)fan7.fanSpdLwrLim);		
	
	if (!enableDbgLoggingMode) { dbg("\n"); }
    4438:	4b2e      	ldr	r3, [pc, #184]	; (44f4 <printDbgMsgs+0x8b0>)
    443a:	781b      	ldrb	r3, [r3, #0]
    443c:	2201      	movs	r2, #1
    443e:	4053      	eors	r3, r2
    4440:	b2db      	uxtb	r3, r3
    4442:	2b00      	cmp	r3, #0
    4444:	d002      	beq.n	444c <printDbgMsgs+0x808>
    4446:	200a      	movs	r0, #10
    4448:	4b2b      	ldr	r3, [pc, #172]	; (44f8 <printDbgMsgs+0x8b4>)
    444a:	4798      	blx	r3
	dbg_info("OutA_Cold=%d, OutA_Hot=%d, OutB_Cold=%d, OutB_Hot=%d,",
    444c:	203f      	movs	r0, #63	; 0x3f
    444e:	4b3e      	ldr	r3, [pc, #248]	; (4548 <printDbgMsgs+0x904>)
    4450:	4798      	blx	r3
    4452:	1c03      	adds	r3, r0, #0
    4454:	1c1e      	adds	r6, r3, #0
    4456:	2023      	movs	r0, #35	; 0x23
    4458:	4b3b      	ldr	r3, [pc, #236]	; (4548 <printDbgMsgs+0x904>)
    445a:	4798      	blx	r3
    445c:	1c03      	adds	r3, r0, #0
    445e:	1c1d      	adds	r5, r3, #0
    4460:	2008      	movs	r0, #8
    4462:	4b39      	ldr	r3, [pc, #228]	; (4548 <printDbgMsgs+0x904>)
    4464:	4798      	blx	r3
    4466:	1c03      	adds	r3, r0, #0
    4468:	1c1c      	adds	r4, r3, #0
    446a:	2004      	movs	r0, #4
    446c:	4b36      	ldr	r3, [pc, #216]	; (4548 <printDbgMsgs+0x904>)
    446e:	4798      	blx	r3
    4470:	1c03      	adds	r3, r0, #0
    4472:	1c1a      	adds	r2, r3, #0
    4474:	4b35      	ldr	r3, [pc, #212]	; (454c <printDbgMsgs+0x908>)
    4476:	9200      	str	r2, [sp, #0]
    4478:	1c18      	adds	r0, r3, #0
    447a:	1c31      	adds	r1, r6, #0
    447c:	1c2a      	adds	r2, r5, #0
    447e:	1c23      	adds	r3, r4, #0
    4480:	4c18      	ldr	r4, [pc, #96]	; (44e4 <printDbgMsgs+0x8a0>)
    4482:	47a0      	blx	r4
		outputStatusNames[ps2.outputStatus],
		ps2.outputStatus>GPIO_MODE?ps2.outputDuty:port_pin_get_output_level(PIN_ENBL_OUTPUT2),
		ps2.phpOutputDutyOffset);
	#endif
	*/
	if (!enableDbgLoggingMode) { dbg("\n"); }	
    4484:	4b1b      	ldr	r3, [pc, #108]	; (44f4 <printDbgMsgs+0x8b0>)
    4486:	781b      	ldrb	r3, [r3, #0]
    4488:	2201      	movs	r2, #1
    448a:	4053      	eors	r3, r2
    448c:	b2db      	uxtb	r3, r3
    448e:	2b00      	cmp	r3, #0
    4490:	d002      	beq.n	4498 <printDbgMsgs+0x854>
    4492:	200a      	movs	r0, #10
    4494:	4b18      	ldr	r3, [pc, #96]	; (44f8 <printDbgMsgs+0x8b4>)
    4496:	4798      	blx	r3
	dbg_info("htxAHeater=%d, htxBHeater=%d,",
    4498:	4b2d      	ldr	r3, [pc, #180]	; (4550 <printDbgMsgs+0x90c>)
    449a:	781b      	ldrb	r3, [r3, #0]
    449c:	1c1a      	adds	r2, r3, #0
    449e:	4b2d      	ldr	r3, [pc, #180]	; (4554 <printDbgMsgs+0x910>)
    44a0:	781b      	ldrb	r3, [r3, #0]
    44a2:	492d      	ldr	r1, [pc, #180]	; (4558 <printDbgMsgs+0x914>)
    44a4:	1c08      	adds	r0, r1, #0
    44a6:	1c11      	adds	r1, r2, #0
    44a8:	1c1a      	adds	r2, r3, #0
    44aa:	4b0e      	ldr	r3, [pc, #56]	; (44e4 <printDbgMsgs+0x8a0>)
    44ac:	4798      	blx	r3
		htxAHeater.output_state,
		htxBHeater.output_state);

	if (!enableDbgLoggingMode) { dbg("\n"); }		
    44ae:	4b11      	ldr	r3, [pc, #68]	; (44f4 <printDbgMsgs+0x8b0>)
    44b0:	781b      	ldrb	r3, [r3, #0]
    44b2:	2201      	movs	r2, #1
    44b4:	4053      	eors	r3, r2
    44b6:	b2db      	uxtb	r3, r3
    44b8:	2b00      	cmp	r3, #0
    44ba:	d002      	beq.n	44c2 <printDbgMsgs+0x87e>
    44bc:	200a      	movs	r0, #10
    44be:	4b0e      	ldr	r3, [pc, #56]	; (44f8 <printDbgMsgs+0x8b4>)
    44c0:	4798      	blx	r3
	dbg_info("condHtrState=%d, condHtrDlySecs=%ld, condHtrDuty=%d, doorHtrState=%d, doorHtrDuty=%d,",
    44c2:	4b26      	ldr	r3, [pc, #152]	; (455c <printDbgMsgs+0x918>)
    44c4:	7a1b      	ldrb	r3, [r3, #8]
    44c6:	1c1d      	adds	r5, r3, #0
    44c8:	4b24      	ldr	r3, [pc, #144]	; (455c <printDbgMsgs+0x918>)
    44ca:	7a1b      	ldrb	r3, [r3, #8]
    44cc:	2b03      	cmp	r3, #3
    44ce:	d14b      	bne.n	4568 <printDbgMsgs+0x924>
    44d0:	4b23      	ldr	r3, [pc, #140]	; (4560 <printDbgMsgs+0x91c>)
    44d2:	4798      	blx	r3
    44d4:	1c02      	adds	r2, r0, #0
    44d6:	4b23      	ldr	r3, [pc, #140]	; (4564 <printDbgMsgs+0x920>)
    44d8:	681b      	ldr	r3, [r3, #0]
    44da:	1ad3      	subs	r3, r2, r3
    44dc:	e045      	b.n	456a <printDbgMsgs+0x926>
    44de:	46c0      	nop			; (mov r8, r8)
    44e0:	00023bac 	.word	0x00023bac
    44e4:	0001b62d 	.word	0x0001b62d
    44e8:	20000b8c 	.word	0x20000b8c
    44ec:	0001f6bd 	.word	0x0001f6bd
    44f0:	00023bec 	.word	0x00023bec
    44f4:	200002a1 	.word	0x200002a1
    44f8:	0001b685 	.word	0x0001b685
    44fc:	20000914 	.word	0x20000914
    4500:	00023c08 	.word	0x00023c08
    4504:	00023c48 	.word	0x00023c48
    4508:	20000adc 	.word	0x20000adc
    450c:	20000bd8 	.word	0x20000bd8
    4510:	00022111 	.word	0x00022111
    4514:	20000348 	.word	0x20000348
    4518:	2000034c 	.word	0x2000034c
    451c:	00023c64 	.word	0x00023c64
    4520:	00023cc4 	.word	0x00023cc4
    4524:	20000d18 	.word	0x20000d18
    4528:	00023ce0 	.word	0x00023ce0
    452c:	00023d20 	.word	0x00023d20
    4530:	20000b40 	.word	0x20000b40
    4534:	00023d3c 	.word	0x00023d3c
    4538:	00023d7c 	.word	0x00023d7c
    453c:	20000dc0 	.word	0x20000dc0
    4540:	00023d98 	.word	0x00023d98
    4544:	00023dd8 	.word	0x00023dd8
    4548:	00003bfd 	.word	0x00003bfd
    454c:	00023df4 	.word	0x00023df4
    4550:	20000b28 	.word	0x20000b28
    4554:	20000c4c 	.word	0x20000c4c
    4558:	00023e2c 	.word	0x00023e2c
    455c:	20000ed4 	.word	0x20000ed4
    4560:	0000dcad 	.word	0x0000dcad
    4564:	200002c8 	.word	0x200002c8
    4568:	2300      	movs	r3, #0
    456a:	4ac8      	ldr	r2, [pc, #800]	; (488c <printDbgMsgs+0xc48>)
    456c:	6854      	ldr	r4, [r2, #4]
    456e:	4ac8      	ldr	r2, [pc, #800]	; (4890 <printDbgMsgs+0xc4c>)
    4570:	7812      	ldrb	r2, [r2, #0]
    4572:	1c10      	adds	r0, r2, #0
    4574:	4ac6      	ldr	r2, [pc, #792]	; (4890 <printDbgMsgs+0xc4c>)
    4576:	6851      	ldr	r1, [r2, #4]
    4578:	4ac6      	ldr	r2, [pc, #792]	; (4894 <printDbgMsgs+0xc50>)
    457a:	9000      	str	r0, [sp, #0]
    457c:	9101      	str	r1, [sp, #4]
    457e:	1c10      	adds	r0, r2, #0
    4580:	1c29      	adds	r1, r5, #0
    4582:	1c1a      	adds	r2, r3, #0
    4584:	1c23      	adds	r3, r4, #0
    4586:	4cc4      	ldr	r4, [pc, #784]	; (4898 <printDbgMsgs+0xc54>)
    4588:	47a0      	blx	r4
		condHeater.sm_state==STATE_CONDHTR_S3?(presentTimeInSec()-condHeaterStartTime):0,
		condHeater.duty,
		doorHeater.output_state,
		doorHeater.duty);
		
	if (!enableDbgLoggingMode) { dbg("\n"); }
    458a:	4bc4      	ldr	r3, [pc, #784]	; (489c <printDbgMsgs+0xc58>)
    458c:	781b      	ldrb	r3, [r3, #0]
    458e:	2201      	movs	r2, #1
    4590:	4053      	eors	r3, r2
    4592:	b2db      	uxtb	r3, r3
    4594:	2b00      	cmp	r3, #0
    4596:	d002      	beq.n	459e <printDbgMsgs+0x95a>
    4598:	200a      	movs	r0, #10
    459a:	4bc1      	ldr	r3, [pc, #772]	; (48a0 <printDbgMsgs+0xc5c>)
    459c:	4798      	blx	r3
	dbg_info("Pterm=%4.2f, Iterm=%4.2f, Dterm=%4.2f, Vcop=%3.1f, Kpq=%3.1f, Kiq=%12f, Kpc=%3.1f, Kic=%12f, enPc=%d,",
    459e:	4bc1      	ldr	r3, [pc, #772]	; (48a4 <printDbgMsgs+0xc60>)
    45a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    45a2:	4bc1      	ldr	r3, [pc, #772]	; (48a8 <printDbgMsgs+0xc64>)
    45a4:	1c10      	adds	r0, r2, #0
    45a6:	4798      	blx	r3
    45a8:	6438      	str	r0, [r7, #64]	; 0x40
    45aa:	6479      	str	r1, [r7, #68]	; 0x44
    45ac:	4bbd      	ldr	r3, [pc, #756]	; (48a4 <printDbgMsgs+0xc60>)
    45ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    45b0:	4bbd      	ldr	r3, [pc, #756]	; (48a8 <printDbgMsgs+0xc64>)
    45b2:	1c10      	adds	r0, r2, #0
    45b4:	4798      	blx	r3
    45b6:	63b8      	str	r0, [r7, #56]	; 0x38
    45b8:	63f9      	str	r1, [r7, #60]	; 0x3c
    45ba:	4bba      	ldr	r3, [pc, #744]	; (48a4 <printDbgMsgs+0xc60>)
    45bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    45be:	4bba      	ldr	r3, [pc, #744]	; (48a8 <printDbgMsgs+0xc64>)
    45c0:	1c10      	adds	r0, r2, #0
    45c2:	4798      	blx	r3
    45c4:	6338      	str	r0, [r7, #48]	; 0x30
    45c6:	6379      	str	r1, [r7, #52]	; 0x34
    45c8:	4bb8      	ldr	r3, [pc, #736]	; (48ac <printDbgMsgs+0xc68>)
    45ca:	6a1a      	ldr	r2, [r3, #32]
    45cc:	4bb6      	ldr	r3, [pc, #728]	; (48a8 <printDbgMsgs+0xc64>)
    45ce:	1c10      	adds	r0, r2, #0
    45d0:	4798      	blx	r3
    45d2:	62b8      	str	r0, [r7, #40]	; 0x28
    45d4:	62f9      	str	r1, [r7, #44]	; 0x2c
    45d6:	4bb3      	ldr	r3, [pc, #716]	; (48a4 <printDbgMsgs+0xc60>)
    45d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    45da:	4bb3      	ldr	r3, [pc, #716]	; (48a8 <printDbgMsgs+0xc64>)
    45dc:	1c10      	adds	r0, r2, #0
    45de:	4798      	blx	r3
    45e0:	6238      	str	r0, [r7, #32]
    45e2:	6279      	str	r1, [r7, #36]	; 0x24
    45e4:	4baf      	ldr	r3, [pc, #700]	; (48a4 <printDbgMsgs+0xc60>)
    45e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    45e8:	4baf      	ldr	r3, [pc, #700]	; (48a8 <printDbgMsgs+0xc64>)
    45ea:	1c10      	adds	r0, r2, #0
    45ec:	4798      	blx	r3
    45ee:	61b8      	str	r0, [r7, #24]
    45f0:	61f9      	str	r1, [r7, #28]
    45f2:	4bac      	ldr	r3, [pc, #688]	; (48a4 <printDbgMsgs+0xc60>)
    45f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    45f6:	4bac      	ldr	r3, [pc, #688]	; (48a8 <printDbgMsgs+0xc64>)
    45f8:	1c10      	adds	r0, r2, #0
    45fa:	4798      	blx	r3
    45fc:	1c04      	adds	r4, r0, #0
    45fe:	1c0d      	adds	r5, r1, #0
    4600:	4ba8      	ldr	r3, [pc, #672]	; (48a4 <printDbgMsgs+0xc60>)
    4602:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    4604:	4ba8      	ldr	r3, [pc, #672]	; (48a8 <printDbgMsgs+0xc64>)
    4606:	1c10      	adds	r0, r2, #0
    4608:	4798      	blx	r3
    460a:	6038      	str	r0, [r7, #0]
    460c:	6079      	str	r1, [r7, #4]
    460e:	4ba8      	ldr	r3, [pc, #672]	; (48b0 <printDbgMsgs+0xc6c>)
    4610:	781b      	ldrb	r3, [r3, #0]
    4612:	1c18      	adds	r0, r3, #0
    4614:	4ba7      	ldr	r3, [pc, #668]	; (48b4 <printDbgMsgs+0xc70>)
    4616:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    4618:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    461a:	9100      	str	r1, [sp, #0]
    461c:	9201      	str	r2, [sp, #4]
    461e:	6b39      	ldr	r1, [r7, #48]	; 0x30
    4620:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4622:	9102      	str	r1, [sp, #8]
    4624:	9203      	str	r2, [sp, #12]
    4626:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    4628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    462a:	9104      	str	r1, [sp, #16]
    462c:	9205      	str	r2, [sp, #20]
    462e:	6a39      	ldr	r1, [r7, #32]
    4630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4632:	9106      	str	r1, [sp, #24]
    4634:	9207      	str	r2, [sp, #28]
    4636:	69b9      	ldr	r1, [r7, #24]
    4638:	69fa      	ldr	r2, [r7, #28]
    463a:	9108      	str	r1, [sp, #32]
    463c:	9209      	str	r2, [sp, #36]	; 0x24
    463e:	940a      	str	r4, [sp, #40]	; 0x28
    4640:	950b      	str	r5, [sp, #44]	; 0x2c
    4642:	6839      	ldr	r1, [r7, #0]
    4644:	687a      	ldr	r2, [r7, #4]
    4646:	910c      	str	r1, [sp, #48]	; 0x30
    4648:	920d      	str	r2, [sp, #52]	; 0x34
    464a:	900e      	str	r0, [sp, #56]	; 0x38
    464c:	1c18      	adds	r0, r3, #0
    464e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    4650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4652:	4991      	ldr	r1, [pc, #580]	; (4898 <printDbgMsgs+0xc54>)
    4654:	4788      	blx	r1
		pidLoop1.ki_highq,
		pidLoop1.kp_copq,
		pidLoop1.ki_copq,
		enablePwrCap);

	if (!enableDbgLoggingMode) { dbg("\n"); }
    4656:	4b91      	ldr	r3, [pc, #580]	; (489c <printDbgMsgs+0xc58>)
    4658:	781b      	ldrb	r3, [r3, #0]
    465a:	2201      	movs	r2, #1
    465c:	4053      	eors	r3, r2
    465e:	b2db      	uxtb	r3, r3
    4660:	2b00      	cmp	r3, #0
    4662:	d002      	beq.n	466a <printDbgMsgs+0xa26>
    4664:	200a      	movs	r0, #10
    4666:	4b8e      	ldr	r3, [pc, #568]	; (48a0 <printDbgMsgs+0xc5c>)
    4668:	4798      	blx	r3
	dbg_info("d_cycles=%d,",
    466a:	4b93      	ldr	r3, [pc, #588]	; (48b8 <printDbgMsgs+0xc74>)
    466c:	881b      	ldrh	r3, [r3, #0]
    466e:	4a93      	ldr	r2, [pc, #588]	; (48bc <printDbgMsgs+0xc78>)
    4670:	1c10      	adds	r0, r2, #0
    4672:	1c19      	adds	r1, r3, #0
    4674:	4b88      	ldr	r3, [pc, #544]	; (4898 <printDbgMsgs+0xc54>)
    4676:	4798      	blx	r3
		defrostCycleCount);
				
	if (!enableDbgLoggingMode) { dbg("\n"); }
    4678:	4b88      	ldr	r3, [pc, #544]	; (489c <printDbgMsgs+0xc58>)
    467a:	781b      	ldrb	r3, [r3, #0]
    467c:	2201      	movs	r2, #1
    467e:	4053      	eors	r3, r2
    4680:	b2db      	uxtb	r3, r3
    4682:	2b00      	cmp	r3, #0
    4684:	d002      	beq.n	468c <printDbgMsgs+0xa48>
    4686:	200a      	movs	r0, #10
    4688:	4b85      	ldr	r3, [pc, #532]	; (48a0 <printDbgMsgs+0xc5c>)
    468a:	4798      	blx	r3
	dbg_info("dmi_act=%d, dmi_cnt=%ld, dmi_strt=%ld, dmi_exp=%d,",
    468c:	4b8c      	ldr	r3, [pc, #560]	; (48c0 <printDbgMsgs+0xc7c>)
    468e:	7b1b      	ldrb	r3, [r3, #12]
    4690:	1c19      	adds	r1, r3, #0
    4692:	4b8b      	ldr	r3, [pc, #556]	; (48c0 <printDbgMsgs+0xc7c>)
    4694:	691a      	ldr	r2, [r3, #16]
    4696:	4b8a      	ldr	r3, [pc, #552]	; (48c0 <printDbgMsgs+0xc7c>)
    4698:	689b      	ldr	r3, [r3, #8]
    469a:	2b00      	cmp	r3, #0
    469c:	d004      	beq.n	46a8 <printDbgMsgs+0xa64>
    469e:	4b88      	ldr	r3, [pc, #544]	; (48c0 <printDbgMsgs+0xc7c>)
    46a0:	689b      	ldr	r3, [r3, #8]
    46a2:	4c88      	ldr	r4, [pc, #544]	; (48c4 <printDbgMsgs+0xc80>)
    46a4:	191b      	adds	r3, r3, r4
    46a6:	e001      	b.n	46ac <printDbgMsgs+0xa68>
    46a8:	4b85      	ldr	r3, [pc, #532]	; (48c0 <printDbgMsgs+0xc7c>)
    46aa:	689b      	ldr	r3, [r3, #8]
    46ac:	4884      	ldr	r0, [pc, #528]	; (48c0 <printDbgMsgs+0xc7c>)
    46ae:	7b40      	ldrb	r0, [r0, #13]
    46b0:	1c04      	adds	r4, r0, #0
    46b2:	4885      	ldr	r0, [pc, #532]	; (48c8 <printDbgMsgs+0xc84>)
    46b4:	9400      	str	r4, [sp, #0]
    46b6:	4c78      	ldr	r4, [pc, #480]	; (4898 <printDbgMsgs+0xc54>)
    46b8:	47a0      	blx	r4
		defrostMinimumIntervalTimer.timerActive,
		defrostMinimumIntervalTimer.presentCountInSecs,
		defrostMinimumIntervalTimer.startTimestampInSecs>0?defrostMinimumIntervalTimer.startTimestampInSecs-24*60*60:defrostMinimumIntervalTimer.startTimestampInSecs,
		defrostMinimumIntervalTimer.timerExpired);

	if (!enableDbgLoggingMode) { dbg("\n"); }
    46ba:	4b78      	ldr	r3, [pc, #480]	; (489c <printDbgMsgs+0xc58>)
    46bc:	781b      	ldrb	r3, [r3, #0]
    46be:	2201      	movs	r2, #1
    46c0:	4053      	eors	r3, r2
    46c2:	b2db      	uxtb	r3, r3
    46c4:	2b00      	cmp	r3, #0
    46c6:	d002      	beq.n	46ce <printDbgMsgs+0xa8a>
    46c8:	200a      	movs	r0, #10
    46ca:	4b75      	ldr	r3, [pc, #468]	; (48a0 <printDbgMsgs+0xc5c>)
    46cc:	4798      	blx	r3
	dbg_info("di_act=%d, di_cnt=%ld, di_strt=%ld, di_exp=%d,",
    46ce:	4b7f      	ldr	r3, [pc, #508]	; (48cc <printDbgMsgs+0xc88>)
    46d0:	7b1b      	ldrb	r3, [r3, #12]
    46d2:	1c19      	adds	r1, r3, #0
    46d4:	4b7d      	ldr	r3, [pc, #500]	; (48cc <printDbgMsgs+0xc88>)
    46d6:	691a      	ldr	r2, [r3, #16]
    46d8:	4b7c      	ldr	r3, [pc, #496]	; (48cc <printDbgMsgs+0xc88>)
    46da:	689b      	ldr	r3, [r3, #8]
    46dc:	2b00      	cmp	r3, #0
    46de:	d004      	beq.n	46ea <printDbgMsgs+0xaa6>
    46e0:	4b7a      	ldr	r3, [pc, #488]	; (48cc <printDbgMsgs+0xc88>)
    46e2:	689b      	ldr	r3, [r3, #8]
    46e4:	4877      	ldr	r0, [pc, #476]	; (48c4 <printDbgMsgs+0xc80>)
    46e6:	181b      	adds	r3, r3, r0
    46e8:	e001      	b.n	46ee <printDbgMsgs+0xaaa>
    46ea:	4b78      	ldr	r3, [pc, #480]	; (48cc <printDbgMsgs+0xc88>)
    46ec:	689b      	ldr	r3, [r3, #8]
    46ee:	4877      	ldr	r0, [pc, #476]	; (48cc <printDbgMsgs+0xc88>)
    46f0:	7b40      	ldrb	r0, [r0, #13]
    46f2:	1c04      	adds	r4, r0, #0
    46f4:	4876      	ldr	r0, [pc, #472]	; (48d0 <printDbgMsgs+0xc8c>)
    46f6:	9400      	str	r4, [sp, #0]
    46f8:	4c67      	ldr	r4, [pc, #412]	; (4898 <printDbgMsgs+0xc54>)
    46fa:	47a0      	blx	r4
		defrostIntervalTimer.timerActive,
		defrostIntervalTimer.presentCountInSecs,
		defrostIntervalTimer.startTimestampInSecs>0?defrostIntervalTimer.startTimestampInSecs-24*60*60:defrostIntervalTimer.startTimestampInSecs,
		defrostIntervalTimer.timerExpired);

	if (!enableDbgLoggingMode) { dbg("\n"); }
    46fc:	4b67      	ldr	r3, [pc, #412]	; (489c <printDbgMsgs+0xc58>)
    46fe:	781b      	ldrb	r3, [r3, #0]
    4700:	2201      	movs	r2, #1
    4702:	4053      	eors	r3, r2
    4704:	b2db      	uxtb	r3, r3
    4706:	2b00      	cmp	r3, #0
    4708:	d002      	beq.n	4710 <printDbgMsgs+0xacc>
    470a:	200a      	movs	r0, #10
    470c:	4b64      	ldr	r3, [pc, #400]	; (48a0 <printDbgMsgs+0xc5c>)
    470e:	4798      	blx	r3
	dbg_info("dma_act=%d, dma_cnt=%ld, dma_strt=%ld, dma_exp=%d,",
    4710:	4b70      	ldr	r3, [pc, #448]	; (48d4 <printDbgMsgs+0xc90>)
    4712:	7b1b      	ldrb	r3, [r3, #12]
    4714:	1c19      	adds	r1, r3, #0
    4716:	4b6f      	ldr	r3, [pc, #444]	; (48d4 <printDbgMsgs+0xc90>)
    4718:	691a      	ldr	r2, [r3, #16]
    471a:	4b6e      	ldr	r3, [pc, #440]	; (48d4 <printDbgMsgs+0xc90>)
    471c:	689b      	ldr	r3, [r3, #8]
    471e:	2b00      	cmp	r3, #0
    4720:	d004      	beq.n	472c <printDbgMsgs+0xae8>
    4722:	4b6c      	ldr	r3, [pc, #432]	; (48d4 <printDbgMsgs+0xc90>)
    4724:	689b      	ldr	r3, [r3, #8]
    4726:	4c67      	ldr	r4, [pc, #412]	; (48c4 <printDbgMsgs+0xc80>)
    4728:	191b      	adds	r3, r3, r4
    472a:	e001      	b.n	4730 <printDbgMsgs+0xaec>
    472c:	4b69      	ldr	r3, [pc, #420]	; (48d4 <printDbgMsgs+0xc90>)
    472e:	689b      	ldr	r3, [r3, #8]
    4730:	4868      	ldr	r0, [pc, #416]	; (48d4 <printDbgMsgs+0xc90>)
    4732:	7b40      	ldrb	r0, [r0, #13]
    4734:	1c04      	adds	r4, r0, #0
    4736:	4868      	ldr	r0, [pc, #416]	; (48d8 <printDbgMsgs+0xc94>)
    4738:	9400      	str	r4, [sp, #0]
    473a:	4c57      	ldr	r4, [pc, #348]	; (4898 <printDbgMsgs+0xc54>)
    473c:	47a0      	blx	r4
		defrostMaximumIntervalTimer.timerActive,
		defrostMaximumIntervalTimer.presentCountInSecs,
		defrostMaximumIntervalTimer.startTimestampInSecs>0?defrostMaximumIntervalTimer.startTimestampInSecs-24*60*60:defrostMaximumIntervalTimer.startTimestampInSecs,
		defrostMaximumIntervalTimer.timerExpired);

	if (!enableDbgLoggingMode) { dbg("\n"); }
    473e:	4b57      	ldr	r3, [pc, #348]	; (489c <printDbgMsgs+0xc58>)
    4740:	781b      	ldrb	r3, [r3, #0]
    4742:	2201      	movs	r2, #1
    4744:	4053      	eors	r3, r2
    4746:	b2db      	uxtb	r3, r3
    4748:	2b00      	cmp	r3, #0
    474a:	d002      	beq.n	4752 <printDbgMsgs+0xb0e>
    474c:	200a      	movs	r0, #10
    474e:	4b54      	ldr	r3, [pc, #336]	; (48a0 <printDbgMsgs+0xc5c>)
    4750:	4798      	blx	r3
	dbg_info("f_act=%d, f_cnt=%ld, f_strt=%ld, f_exp=%d,",
    4752:	4b62      	ldr	r3, [pc, #392]	; (48dc <printDbgMsgs+0xc98>)
    4754:	7b1b      	ldrb	r3, [r3, #12]
    4756:	1c19      	adds	r1, r3, #0
    4758:	4b60      	ldr	r3, [pc, #384]	; (48dc <printDbgMsgs+0xc98>)
    475a:	691a      	ldr	r2, [r3, #16]
    475c:	4b5f      	ldr	r3, [pc, #380]	; (48dc <printDbgMsgs+0xc98>)
    475e:	689b      	ldr	r3, [r3, #8]
    4760:	2b00      	cmp	r3, #0
    4762:	d004      	beq.n	476e <printDbgMsgs+0xb2a>
    4764:	4b5d      	ldr	r3, [pc, #372]	; (48dc <printDbgMsgs+0xc98>)
    4766:	689b      	ldr	r3, [r3, #8]
    4768:	4856      	ldr	r0, [pc, #344]	; (48c4 <printDbgMsgs+0xc80>)
    476a:	181b      	adds	r3, r3, r0
    476c:	e001      	b.n	4772 <printDbgMsgs+0xb2e>
    476e:	4b5b      	ldr	r3, [pc, #364]	; (48dc <printDbgMsgs+0xc98>)
    4770:	689b      	ldr	r3, [r3, #8]
    4772:	485a      	ldr	r0, [pc, #360]	; (48dc <printDbgMsgs+0xc98>)
    4774:	7b40      	ldrb	r0, [r0, #13]
    4776:	1c04      	adds	r4, r0, #0
    4778:	4859      	ldr	r0, [pc, #356]	; (48e0 <printDbgMsgs+0xc9c>)
    477a:	9400      	str	r4, [sp, #0]
    477c:	4c46      	ldr	r4, [pc, #280]	; (4898 <printDbgMsgs+0xc54>)
    477e:	47a0      	blx	r4
		defrostDurationMins,
		defrostActive,
		enableAutoDefrost,
		defrostCancelTemp);
	*/	
	if (!enableDbgLoggingMode) { dbg("\n"); }
    4780:	4b46      	ldr	r3, [pc, #280]	; (489c <printDbgMsgs+0xc58>)
    4782:	781b      	ldrb	r3, [r3, #0]
    4784:	2201      	movs	r2, #1
    4786:	4053      	eors	r3, r2
    4788:	b2db      	uxtb	r3, r3
    478a:	2b00      	cmp	r3, #0
    478c:	d002      	beq.n	4794 <printDbgMsgs+0xb50>
    478e:	200a      	movs	r0, #10
    4790:	4b43      	ldr	r3, [pc, #268]	; (48a0 <printDbgMsgs+0xc5c>)
    4792:	4798      	blx	r3
	dbg_info("t8Time=%ld, tphpChk=%d, t9Time=%ld, t9Trig=%ld, t10Time=%ld, t10Trig=%ld,",
    4794:	4b53      	ldr	r3, [pc, #332]	; (48e4 <printDbgMsgs+0xca0>)
    4796:	6819      	ldr	r1, [r3, #0]
    4798:	4b53      	ldr	r3, [pc, #332]	; (48e8 <printDbgMsgs+0xca4>)
    479a:	881b      	ldrh	r3, [r3, #0]
    479c:	1c1a      	adds	r2, r3, #0
    479e:	4b53      	ldr	r3, [pc, #332]	; (48ec <printDbgMsgs+0xca8>)
    47a0:	681c      	ldr	r4, [r3, #0]
    47a2:	4b53      	ldr	r3, [pc, #332]	; (48f0 <printDbgMsgs+0xcac>)
    47a4:	681e      	ldr	r6, [r3, #0]
    47a6:	4b53      	ldr	r3, [pc, #332]	; (48f4 <printDbgMsgs+0xcb0>)
    47a8:	681d      	ldr	r5, [r3, #0]
    47aa:	4b53      	ldr	r3, [pc, #332]	; (48f8 <printDbgMsgs+0xcb4>)
    47ac:	6818      	ldr	r0, [r3, #0]
    47ae:	4b53      	ldr	r3, [pc, #332]	; (48fc <printDbgMsgs+0xcb8>)
    47b0:	9600      	str	r6, [sp, #0]
    47b2:	9501      	str	r5, [sp, #4]
    47b4:	9002      	str	r0, [sp, #8]
    47b6:	1c18      	adds	r0, r3, #0
    47b8:	1c23      	adds	r3, r4, #0
    47ba:	4c37      	ldr	r4, [pc, #220]	; (4898 <printDbgMsgs+0xc54>)
    47bc:	47a0      	blx	r4
		php_selfchk_alarm3.hour,
		php_selfchk_alarm3.minute,
		php_selfchk_alarm3.second);		
	*/
				
	if (mfgTestModeFlag1==false)
    47be:	4b50      	ldr	r3, [pc, #320]	; (4900 <printDbgMsgs+0xcbc>)
    47c0:	781b      	ldrb	r3, [r3, #0]
    47c2:	2b00      	cmp	r3, #0
    47c4:	d101      	bne.n	47ca <printDbgMsgs+0xb86>
	{
		printErrorStatus();
    47c6:	4b4f      	ldr	r3, [pc, #316]	; (4904 <printDbgMsgs+0xcc0>)
    47c8:	4798      	blx	r3
	}
					
	if (!enableDbgLoggingMode) { dbg("\n"); }
    47ca:	4b34      	ldr	r3, [pc, #208]	; (489c <printDbgMsgs+0xc58>)
    47cc:	781b      	ldrb	r3, [r3, #0]
    47ce:	2201      	movs	r2, #1
    47d0:	4053      	eors	r3, r2
    47d2:	b2db      	uxtb	r3, r3
    47d4:	2b00      	cmp	r3, #0
    47d6:	d002      	beq.n	47de <printDbgMsgs+0xb9a>
    47d8:	200a      	movs	r0, #10
    47da:	4b31      	ldr	r3, [pc, #196]	; (48a0 <printDbgMsgs+0xc5c>)
    47dc:	4798      	blx	r3
	if (chamber1.deactivateAutoControl==true)	{ dbg("|AUTO OVERRIDE|");		}
    47de:	4a33      	ldr	r2, [pc, #204]	; (48ac <printDbgMsgs+0xc68>)
    47e0:	233d      	movs	r3, #61	; 0x3d
    47e2:	5cd3      	ldrb	r3, [r2, r3]
    47e4:	2b00      	cmp	r3, #0
    47e6:	d003      	beq.n	47f0 <printDbgMsgs+0xbac>
    47e8:	4b47      	ldr	r3, [pc, #284]	; (4908 <printDbgMsgs+0xcc4>)
    47ea:	1c18      	adds	r0, r3, #0
    47ec:	4b2a      	ldr	r3, [pc, #168]	; (4898 <printDbgMsgs+0xc54>)
    47ee:	4798      	blx	r3
	if (enableManualOverride==true)				{ dbg("|PID OVERRIDE|");		}
    47f0:	4b46      	ldr	r3, [pc, #280]	; (490c <printDbgMsgs+0xcc8>)
    47f2:	781b      	ldrb	r3, [r3, #0]
    47f4:	2b00      	cmp	r3, #0
    47f6:	d003      	beq.n	4800 <printDbgMsgs+0xbbc>
    47f8:	4b45      	ldr	r3, [pc, #276]	; (4910 <printDbgMsgs+0xccc>)
    47fa:	1c18      	adds	r0, r3, #0
    47fc:	4b26      	ldr	r3, [pc, #152]	; (4898 <printDbgMsgs+0xc54>)
    47fe:	4798      	blx	r3
	if (enableTempOverride==true)				{ dbg("|TEMP OVERRIDE|");		}
    4800:	4b44      	ldr	r3, [pc, #272]	; (4914 <printDbgMsgs+0xcd0>)
    4802:	781b      	ldrb	r3, [r3, #0]
    4804:	2b00      	cmp	r3, #0
    4806:	d003      	beq.n	4810 <printDbgMsgs+0xbcc>
    4808:	4b43      	ldr	r3, [pc, #268]	; (4918 <printDbgMsgs+0xcd4>)
    480a:	1c18      	adds	r0, r3, #0
    480c:	4b22      	ldr	r3, [pc, #136]	; (4898 <printDbgMsgs+0xc54>)
    480e:	4798      	blx	r3
	if (inhibitOutput==true)					{ dbg("|STARTUP INHIBIT|");		}
    4810:	4b42      	ldr	r3, [pc, #264]	; (491c <printDbgMsgs+0xcd8>)
    4812:	781b      	ldrb	r3, [r3, #0]
    4814:	2b00      	cmp	r3, #0
    4816:	d003      	beq.n	4820 <printDbgMsgs+0xbdc>
    4818:	4b41      	ldr	r3, [pc, #260]	; (4920 <printDbgMsgs+0xcdc>)
    481a:	1c18      	adds	r0, r3, #0
    481c:	4b1e      	ldr	r3, [pc, #120]	; (4898 <printDbgMsgs+0xc54>)
    481e:	4798      	blx	r3
	if (enableFanOverride==true)				{ dbg("|FAN OVERRIDE|");		}
    4820:	4b40      	ldr	r3, [pc, #256]	; (4924 <printDbgMsgs+0xce0>)
    4822:	781b      	ldrb	r3, [r3, #0]
    4824:	2b00      	cmp	r3, #0
    4826:	d003      	beq.n	4830 <printDbgMsgs+0xbec>
    4828:	4b3f      	ldr	r3, [pc, #252]	; (4928 <printDbgMsgs+0xce4>)
    482a:	1c18      	adds	r0, r3, #0
    482c:	4b1a      	ldr	r3, [pc, #104]	; (4898 <printDbgMsgs+0xc54>)
    482e:	4798      	blx	r3
	if (uiSetpointControl==false)				{ dbg("|UI SETPOINT OVERRIDE|");}
    4830:	4b3e      	ldr	r3, [pc, #248]	; (492c <printDbgMsgs+0xce8>)
    4832:	781b      	ldrb	r3, [r3, #0]
    4834:	2201      	movs	r2, #1
    4836:	4053      	eors	r3, r2
    4838:	b2db      	uxtb	r3, r3
    483a:	2b00      	cmp	r3, #0
    483c:	d003      	beq.n	4846 <printDbgMsgs+0xc02>
    483e:	4b3c      	ldr	r3, [pc, #240]	; (4930 <printDbgMsgs+0xcec>)
    4840:	1c18      	adds	r0, r3, #0
    4842:	4b15      	ldr	r3, [pc, #84]	; (4898 <printDbgMsgs+0xc54>)
    4844:	4798      	blx	r3
	if (deactivateAutoHeaterControl==true)		{ dbg("|HEATER OVERRIDE|");		}
    4846:	4b3b      	ldr	r3, [pc, #236]	; (4934 <printDbgMsgs+0xcf0>)
    4848:	781b      	ldrb	r3, [r3, #0]
    484a:	2b00      	cmp	r3, #0
    484c:	d003      	beq.n	4856 <printDbgMsgs+0xc12>
    484e:	4b3a      	ldr	r3, [pc, #232]	; (4938 <printDbgMsgs+0xcf4>)
    4850:	1c18      	adds	r0, r3, #0
    4852:	4b11      	ldr	r3, [pc, #68]	; (4898 <printDbgMsgs+0xc54>)
    4854:	4798      	blx	r3
	if (enableSensorEDFI==false)				{ dbg("|SENSOR EDFI DISABLED|");}						
    4856:	4b39      	ldr	r3, [pc, #228]	; (493c <printDbgMsgs+0xcf8>)
    4858:	781b      	ldrb	r3, [r3, #0]
    485a:	2201      	movs	r2, #1
    485c:	4053      	eors	r3, r2
    485e:	b2db      	uxtb	r3, r3
    4860:	2b00      	cmp	r3, #0
    4862:	d003      	beq.n	486c <printDbgMsgs+0xc28>
    4864:	4b36      	ldr	r3, [pc, #216]	; (4940 <printDbgMsgs+0xcfc>)
    4866:	1c18      	adds	r0, r3, #0
    4868:	4b0b      	ldr	r3, [pc, #44]	; (4898 <printDbgMsgs+0xc54>)
    486a:	4798      	blx	r3
		
	if (enableDbgLoggingMode) { dbg("\n"); } //{ dbg("\r"); }
    486c:	4b0b      	ldr	r3, [pc, #44]	; (489c <printDbgMsgs+0xc58>)
    486e:	781b      	ldrb	r3, [r3, #0]
    4870:	2b00      	cmp	r3, #0
    4872:	d002      	beq.n	487a <printDbgMsgs+0xc36>
    4874:	200a      	movs	r0, #10
    4876:	4b0a      	ldr	r3, [pc, #40]	; (48a0 <printDbgMsgs+0xc5c>)
    4878:	4798      	blx	r3
}
    487a:	46bd      	mov	sp, r7
    487c:	b025      	add	sp, #148	; 0x94
    487e:	bc3c      	pop	{r2, r3, r4, r5}
    4880:	4690      	mov	r8, r2
    4882:	4699      	mov	r9, r3
    4884:	46a2      	mov	sl, r4
    4886:	46ab      	mov	fp, r5
    4888:	bdf0      	pop	{r4, r5, r6, r7, pc}
    488a:	46c0      	nop			; (mov r8, r8)
    488c:	20000ed4 	.word	0x20000ed4
    4890:	20000b34 	.word	0x20000b34
    4894:	00023e4c 	.word	0x00023e4c
    4898:	0001b62d 	.word	0x0001b62d
    489c:	200002a1 	.word	0x200002a1
    48a0:	0001b685 	.word	0x0001b685
    48a4:	20000e10 	.word	0x20000e10
    48a8:	00022111 	.word	0x00022111
    48ac:	200009b8 	.word	0x200009b8
    48b0:	20000362 	.word	0x20000362
    48b4:	00023ea4 	.word	0x00023ea4
    48b8:	200002a2 	.word	0x200002a2
    48bc:	00023f0c 	.word	0x00023f0c
    48c0:	200007d8 	.word	0x200007d8
    48c4:	fffeae80 	.word	0xfffeae80
    48c8:	00023f1c 	.word	0x00023f1c
    48cc:	20000824 	.word	0x20000824
    48d0:	00023f50 	.word	0x00023f50
    48d4:	20000810 	.word	0x20000810
    48d8:	00023f80 	.word	0x00023f80
    48dc:	200007f8 	.word	0x200007f8
    48e0:	00023fb4 	.word	0x00023fb4
    48e4:	20000300 	.word	0x20000300
    48e8:	20000080 	.word	0x20000080
    48ec:	20000308 	.word	0x20000308
    48f0:	20000304 	.word	0x20000304
    48f4:	20000310 	.word	0x20000310
    48f8:	2000030c 	.word	0x2000030c
    48fc:	00023fe0 	.word	0x00023fe0
    4900:	20000088 	.word	0x20000088
    4904:	00004945 	.word	0x00004945
    4908:	0002402c 	.word	0x0002402c
    490c:	20000372 	.word	0x20000372
    4910:	0002403c 	.word	0x0002403c
    4914:	20000373 	.word	0x20000373
    4918:	0002404c 	.word	0x0002404c
    491c:	20000178 	.word	0x20000178
    4920:	0002405c 	.word	0x0002405c
    4924:	20000375 	.word	0x20000375
    4928:	00024070 	.word	0x00024070
    492c:	20000090 	.word	0x20000090
    4930:	00024080 	.word	0x00024080
    4934:	20000376 	.word	0x20000376
    4938:	00024098 	.word	0x00024098
    493c:	20000378 	.word	0x20000378
    4940:	000240ac 	.word	0x000240ac

00004944 <printErrorStatus>:

void printErrorStatus()
{
    4944:	b5f0      	push	{r4, r5, r6, r7, lr}
    4946:	b087      	sub	sp, #28
    4948:	af04      	add	r7, sp, #16
	if (!enableDbgLoggingMode) { dbg("\n"); }
    494a:	4b32      	ldr	r3, [pc, #200]	; (4a14 <printErrorStatus+0xd0>)
    494c:	781b      	ldrb	r3, [r3, #0]
    494e:	2201      	movs	r2, #1
    4950:	4053      	eors	r3, r2
    4952:	b2db      	uxtb	r3, r3
    4954:	2b00      	cmp	r3, #0
    4956:	d002      	beq.n	495e <printErrorStatus+0x1a>
    4958:	200a      	movs	r0, #10
    495a:	4b2f      	ldr	r3, [pc, #188]	; (4a18 <printErrorStatus+0xd4>)
    495c:	4798      	blx	r3
	dbg_info("maxSnsErrCnt=%d, cha1ErrCnt=%d, cha2ErrCnt=%d, rejErrCnt=%d, rejCritErrCnt=%d,",
    495e:	4b2f      	ldr	r3, [pc, #188]	; (4a1c <printErrorStatus+0xd8>)
    4960:	881b      	ldrh	r3, [r3, #0]
    4962:	1c19      	adds	r1, r3, #0
    4964:	4b2e      	ldr	r3, [pc, #184]	; (4a20 <printErrorStatus+0xdc>)
    4966:	881b      	ldrh	r3, [r3, #0]
    4968:	1c1a      	adds	r2, r3, #0
    496a:	4b2e      	ldr	r3, [pc, #184]	; (4a24 <printErrorStatus+0xe0>)
    496c:	881b      	ldrh	r3, [r3, #0]
    496e:	482e      	ldr	r0, [pc, #184]	; (4a28 <printErrorStatus+0xe4>)
    4970:	8800      	ldrh	r0, [r0, #0]
    4972:	1c05      	adds	r5, r0, #0
    4974:	482d      	ldr	r0, [pc, #180]	; (4a2c <printErrorStatus+0xe8>)
    4976:	8800      	ldrh	r0, [r0, #0]
    4978:	1c04      	adds	r4, r0, #0
    497a:	482d      	ldr	r0, [pc, #180]	; (4a30 <printErrorStatus+0xec>)
    497c:	9500      	str	r5, [sp, #0]
    497e:	9401      	str	r4, [sp, #4]
    4980:	4c2c      	ldr	r4, [pc, #176]	; (4a34 <printErrorStatus+0xf0>)
    4982:	47a0      	blx	r4
		cha1SnsErrCnt,
		cha2SnsErrCnt,
		rejSnsErrCnt,
		rejCritErrCnt);
		
	if (!enableDbgLoggingMode) { dbg("\n"); }
    4984:	4b23      	ldr	r3, [pc, #140]	; (4a14 <printErrorStatus+0xd0>)
    4986:	781b      	ldrb	r3, [r3, #0]
    4988:	2201      	movs	r2, #1
    498a:	4053      	eors	r3, r2
    498c:	b2db      	uxtb	r3, r3
    498e:	2b00      	cmp	r3, #0
    4990:	d002      	beq.n	4998 <printErrorStatus+0x54>
    4992:	200a      	movs	r0, #10
    4994:	4b20      	ldr	r3, [pc, #128]	; (4a18 <printErrorStatus+0xd4>)
    4996:	4798      	blx	r3
	dbg_info("maxFanErrCnt=%d, fan1LowSpdErrCnt=%d, fan1ErrCnt=%d, fan2LowSpdErrCnt=%d, fan2ErrCnt=%d, fan4LowSpdErrCnt=%d, fan4ErrCnt=%d,",
    4998:	4b27      	ldr	r3, [pc, #156]	; (4a38 <printErrorStatus+0xf4>)
    499a:	881b      	ldrh	r3, [r3, #0]
    499c:	1c19      	adds	r1, r3, #0
    499e:	4b27      	ldr	r3, [pc, #156]	; (4a3c <printErrorStatus+0xf8>)
    49a0:	881b      	ldrh	r3, [r3, #0]
    49a2:	1c1a      	adds	r2, r3, #0
    49a4:	4b26      	ldr	r3, [pc, #152]	; (4a40 <printErrorStatus+0xfc>)
    49a6:	881b      	ldrh	r3, [r3, #0]
    49a8:	607b      	str	r3, [r7, #4]
    49aa:	4826      	ldr	r0, [pc, #152]	; (4a44 <printErrorStatus+0x100>)
    49ac:	8800      	ldrh	r0, [r0, #0]
    49ae:	4684      	mov	ip, r0
    49b0:	4825      	ldr	r0, [pc, #148]	; (4a48 <printErrorStatus+0x104>)
    49b2:	8800      	ldrh	r0, [r0, #0]
    49b4:	1c06      	adds	r6, r0, #0
    49b6:	4825      	ldr	r0, [pc, #148]	; (4a4c <printErrorStatus+0x108>)
    49b8:	8800      	ldrh	r0, [r0, #0]
    49ba:	1c05      	adds	r5, r0, #0
    49bc:	4824      	ldr	r0, [pc, #144]	; (4a50 <printErrorStatus+0x10c>)
    49be:	8800      	ldrh	r0, [r0, #0]
    49c0:	1c04      	adds	r4, r0, #0
    49c2:	4824      	ldr	r0, [pc, #144]	; (4a54 <printErrorStatus+0x110>)
    49c4:	4663      	mov	r3, ip
    49c6:	9300      	str	r3, [sp, #0]
    49c8:	9601      	str	r6, [sp, #4]
    49ca:	9502      	str	r5, [sp, #8]
    49cc:	9403      	str	r4, [sp, #12]
    49ce:	687b      	ldr	r3, [r7, #4]
    49d0:	4c18      	ldr	r4, [pc, #96]	; (4a34 <printErrorStatus+0xf0>)
    49d2:	47a0      	blx	r4
		fan2LowSpdErrCnt,
		fan2ErrorCount,
		fan4LowSpdErrCnt,
		fan4ErrorCount);
			
	if (!enableDbgLoggingMode) { dbg("\n"); }
    49d4:	4b0f      	ldr	r3, [pc, #60]	; (4a14 <printErrorStatus+0xd0>)
    49d6:	781b      	ldrb	r3, [r3, #0]
    49d8:	2201      	movs	r2, #1
    49da:	4053      	eors	r3, r2
    49dc:	b2db      	uxtb	r3, r3
    49de:	2b00      	cmp	r3, #0
    49e0:	d002      	beq.n	49e8 <printErrorStatus+0xa4>
    49e2:	200a      	movs	r0, #10
    49e4:	4b0c      	ldr	r3, [pc, #48]	; (4a18 <printErrorStatus+0xd4>)
    49e6:	4798      	blx	r3
	dbg_info("maxPhpErrCnt=%d, php1TotErrCnt=%d,",
    49e8:	4b1b      	ldr	r3, [pc, #108]	; (4a58 <printErrorStatus+0x114>)
    49ea:	881b      	ldrh	r3, [r3, #0]
    49ec:	1c1a      	adds	r2, r3, #0
    49ee:	4b1b      	ldr	r3, [pc, #108]	; (4a5c <printErrorStatus+0x118>)
    49f0:	881b      	ldrh	r3, [r3, #0]
    49f2:	491b      	ldr	r1, [pc, #108]	; (4a60 <printErrorStatus+0x11c>)
    49f4:	1c08      	adds	r0, r1, #0
    49f6:	1c11      	adds	r1, r2, #0
    49f8:	1c1a      	adds	r2, r3, #0
    49fa:	4b0e      	ldr	r3, [pc, #56]	; (4a34 <printErrorStatus+0xf0>)
    49fc:	4798      	blx	r3
		maxPhpErrorCount,
		php1TotalErrorCount);
	
	#ifdef HIGH_PERFORMANCE	
	dbg_info(" php2TotErrCnt=%d,",
    49fe:	4b19      	ldr	r3, [pc, #100]	; (4a64 <printErrorStatus+0x120>)
    4a00:	881b      	ldrh	r3, [r3, #0]
    4a02:	4a19      	ldr	r2, [pc, #100]	; (4a68 <printErrorStatus+0x124>)
    4a04:	1c10      	adds	r0, r2, #0
    4a06:	1c19      	adds	r1, r3, #0
    4a08:	4b0a      	ldr	r3, [pc, #40]	; (4a34 <printErrorStatus+0xf0>)
    4a0a:	4798      	blx	r3
		php2TotalErrorCount);			
	#endif
}
    4a0c:	46bd      	mov	sp, r7
    4a0e:	b003      	add	sp, #12
    4a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a12:	46c0      	nop			; (mov r8, r8)
    4a14:	200002a1 	.word	0x200002a1
    4a18:	0001b685 	.word	0x0001b685
    4a1c:	20000164 	.word	0x20000164
    4a20:	20000354 	.word	0x20000354
    4a24:	20000356 	.word	0x20000356
    4a28:	20000358 	.word	0x20000358
    4a2c:	2000035a 	.word	0x2000035a
    4a30:	000240c4 	.word	0x000240c4
    4a34:	0001b62d 	.word	0x0001b62d
    4a38:	2000003a 	.word	0x2000003a
    4a3c:	200002c0 	.word	0x200002c0
    4a40:	200002ba 	.word	0x200002ba
    4a44:	200002c2 	.word	0x200002c2
    4a48:	200002bc 	.word	0x200002bc
    4a4c:	200002c4 	.word	0x200002c4
    4a50:	200002be 	.word	0x200002be
    4a54:	00024114 	.word	0x00024114
    4a58:	20000064 	.word	0x20000064
    4a5c:	200002fc 	.word	0x200002fc
    4a60:	00024194 	.word	0x00024194
    4a64:	200002fe 	.word	0x200002fe
    4a68:	000241b8 	.word	0x000241b8

00004a6c <printBootMsg>:

void printBootMsg()
{
    4a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a6e:	b085      	sub	sp, #20
    4a70:	af04      	add	r7, sp, #16
	#ifdef HIGH_PERFORMANCE
	dbg("\nproduct is HIGH PERFORMANCE");
    4a72:	4b70      	ldr	r3, [pc, #448]	; (4c34 <printBootMsg+0x1c8>)
    4a74:	1c18      	adds	r0, r3, #0
    4a76:	4b70      	ldr	r3, [pc, #448]	; (4c38 <printBootMsg+0x1cc>)
    4a78:	4798      	blx	r3
	#else
	dbg("\nproduct is GENERAL PURPOSE");
	#endif
	dbg_info("\nps is %s", psNameString[ps1.PsType]);
    4a7a:	4a70      	ldr	r2, [pc, #448]	; (4c3c <printBootMsg+0x1d0>)
    4a7c:	234c      	movs	r3, #76	; 0x4c
    4a7e:	5cd3      	ldrb	r3, [r2, r3]
    4a80:	1c1a      	adds	r2, r3, #0
    4a82:	4b6f      	ldr	r3, [pc, #444]	; (4c40 <printBootMsg+0x1d4>)
    4a84:	0092      	lsls	r2, r2, #2
    4a86:	58d3      	ldr	r3, [r2, r3]
    4a88:	4a6e      	ldr	r2, [pc, #440]	; (4c44 <printBootMsg+0x1d8>)
    4a8a:	1c10      	adds	r0, r2, #0
    4a8c:	1c19      	adds	r1, r3, #0
    4a8e:	4b6a      	ldr	r3, [pc, #424]	; (4c38 <printBootMsg+0x1cc>)
    4a90:	4798      	blx	r3
	dbg_info("\neepromStatus is %lx", eepromStatus);
    4a92:	4b6d      	ldr	r3, [pc, #436]	; (4c48 <printBootMsg+0x1dc>)
    4a94:	681b      	ldr	r3, [r3, #0]
    4a96:	4a6d      	ldr	r2, [pc, #436]	; (4c4c <printBootMsg+0x1e0>)
    4a98:	1c10      	adds	r0, r2, #0
    4a9a:	1c19      	adds	r1, r3, #0
    4a9c:	4b66      	ldr	r3, [pc, #408]	; (4c38 <printBootMsg+0x1cc>)
    4a9e:	4798      	blx	r3
	dbg_info("\nmfgTestModeFlag1 is %x", mfgTestModeFlag1);
    4aa0:	4b6b      	ldr	r3, [pc, #428]	; (4c50 <printBootMsg+0x1e4>)
    4aa2:	781b      	ldrb	r3, [r3, #0]
    4aa4:	4a6b      	ldr	r2, [pc, #428]	; (4c54 <printBootMsg+0x1e8>)
    4aa6:	1c10      	adds	r0, r2, #0
    4aa8:	1c19      	adds	r1, r3, #0
    4aaa:	4b63      	ldr	r3, [pc, #396]	; (4c38 <printBootMsg+0x1cc>)
    4aac:	4798      	blx	r3
	dbg_info("\nmfgTestModeFlag2 is %x", mfgTestModeFlag2);
    4aae:	4b6a      	ldr	r3, [pc, #424]	; (4c58 <printBootMsg+0x1ec>)
    4ab0:	781b      	ldrb	r3, [r3, #0]
    4ab2:	4a6a      	ldr	r2, [pc, #424]	; (4c5c <printBootMsg+0x1f0>)
    4ab4:	1c10      	adds	r0, r2, #0
    4ab6:	1c19      	adds	r1, r3, #0
    4ab8:	4b5f      	ldr	r3, [pc, #380]	; (4c38 <printBootMsg+0x1cc>)
    4aba:	4798      	blx	r3
	dbg_info("\nrunSelfTestOnPor is %x", runSelfTestOnPOR);
    4abc:	4b68      	ldr	r3, [pc, #416]	; (4c60 <printBootMsg+0x1f4>)
    4abe:	781b      	ldrb	r3, [r3, #0]
    4ac0:	4a68      	ldr	r2, [pc, #416]	; (4c64 <printBootMsg+0x1f8>)
    4ac2:	1c10      	adds	r0, r2, #0
    4ac4:	1c19      	adds	r1, r3, #0
    4ac6:	4b5c      	ldr	r3, [pc, #368]	; (4c38 <printBootMsg+0x1cc>)
    4ac8:	4798      	blx	r3
	dbg_info("\nchamber1 offset %4.2f", chamber1.chamberOffset);
    4aca:	4b67      	ldr	r3, [pc, #412]	; (4c68 <printBootMsg+0x1fc>)
    4acc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    4ace:	4b67      	ldr	r3, [pc, #412]	; (4c6c <printBootMsg+0x200>)
    4ad0:	1c10      	adds	r0, r2, #0
    4ad2:	4798      	blx	r3
    4ad4:	1c03      	adds	r3, r0, #0
    4ad6:	1c0c      	adds	r4, r1, #0
    4ad8:	4a65      	ldr	r2, [pc, #404]	; (4c70 <printBootMsg+0x204>)
    4ada:	1c10      	adds	r0, r2, #0
    4adc:	1c1a      	adds	r2, r3, #0
    4ade:	1c23      	adds	r3, r4, #0
    4ae0:	4955      	ldr	r1, [pc, #340]	; (4c38 <printBootMsg+0x1cc>)
    4ae2:	4788      	blx	r1
	dbg_info("\nglycol1 offset %4.2f", chamber1.glycolOffset);
    4ae4:	4b60      	ldr	r3, [pc, #384]	; (4c68 <printBootMsg+0x1fc>)
    4ae6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    4ae8:	4b60      	ldr	r3, [pc, #384]	; (4c6c <printBootMsg+0x200>)
    4aea:	1c10      	adds	r0, r2, #0
    4aec:	4798      	blx	r3
    4aee:	1c03      	adds	r3, r0, #0
    4af0:	1c0c      	adds	r4, r1, #0
    4af2:	4a60      	ldr	r2, [pc, #384]	; (4c74 <printBootMsg+0x208>)
    4af4:	1c10      	adds	r0, r2, #0
    4af6:	1c1a      	adds	r2, r3, #0
    4af8:	1c23      	adds	r3, r4, #0
    4afa:	494f      	ldr	r1, [pc, #316]	; (4c38 <printBootMsg+0x1cc>)
    4afc:	4788      	blx	r1
	dbg_info("\nchamber2 offset %4.2f", chamber2.chamberOffset);
    4afe:	4b5e      	ldr	r3, [pc, #376]	; (4c78 <printBootMsg+0x20c>)
    4b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    4b02:	4b5a      	ldr	r3, [pc, #360]	; (4c6c <printBootMsg+0x200>)
    4b04:	1c10      	adds	r0, r2, #0
    4b06:	4798      	blx	r3
    4b08:	1c03      	adds	r3, r0, #0
    4b0a:	1c0c      	adds	r4, r1, #0
    4b0c:	4a5b      	ldr	r2, [pc, #364]	; (4c7c <printBootMsg+0x210>)
    4b0e:	1c10      	adds	r0, r2, #0
    4b10:	1c1a      	adds	r2, r3, #0
    4b12:	1c23      	adds	r3, r4, #0
    4b14:	4948      	ldr	r1, [pc, #288]	; (4c38 <printBootMsg+0x1cc>)
    4b16:	4788      	blx	r1
	dbg_info("\nchamberThermistorBeta %4d", chamberThermistorBeta);
    4b18:	4b59      	ldr	r3, [pc, #356]	; (4c80 <printBootMsg+0x214>)
    4b1a:	881b      	ldrh	r3, [r3, #0]
    4b1c:	4a59      	ldr	r2, [pc, #356]	; (4c84 <printBootMsg+0x218>)
    4b1e:	1c10      	adds	r0, r2, #0
    4b20:	1c19      	adds	r1, r3, #0
    4b22:	4b45      	ldr	r3, [pc, #276]	; (4c38 <printBootMsg+0x1cc>)
    4b24:	4798      	blx	r3
	dbg_info("\nrejectThermistorBeta %4d", rejectThermistorBeta);
    4b26:	4b58      	ldr	r3, [pc, #352]	; (4c88 <printBootMsg+0x21c>)
    4b28:	881b      	ldrh	r3, [r3, #0]
    4b2a:	4a58      	ldr	r2, [pc, #352]	; (4c8c <printBootMsg+0x220>)
    4b2c:	1c10      	adds	r0, r2, #0
    4b2e:	1c19      	adds	r1, r3, #0
    4b30:	4b41      	ldr	r3, [pc, #260]	; (4c38 <printBootMsg+0x1cc>)
    4b32:	4798      	blx	r3
	dbg_info("\nps1.phpOutputDutyOffset %4.2f", ps1.phpOutputDutyOffset);
    4b34:	4b41      	ldr	r3, [pc, #260]	; (4c3c <printBootMsg+0x1d0>)
    4b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4b38:	4b4c      	ldr	r3, [pc, #304]	; (4c6c <printBootMsg+0x200>)
    4b3a:	1c10      	adds	r0, r2, #0
    4b3c:	4798      	blx	r3
    4b3e:	1c03      	adds	r3, r0, #0
    4b40:	1c0c      	adds	r4, r1, #0
    4b42:	4a53      	ldr	r2, [pc, #332]	; (4c90 <printBootMsg+0x224>)
    4b44:	1c10      	adds	r0, r2, #0
    4b46:	1c1a      	adds	r2, r3, #0
    4b48:	1c23      	adds	r3, r4, #0
    4b4a:	493b      	ldr	r1, [pc, #236]	; (4c38 <printBootMsg+0x1cc>)
    4b4c:	4788      	blx	r1
	dbg_info("\nps2.phpOutputDutyOffset %4.2f", ps2.phpOutputDutyOffset);
    4b4e:	4b51      	ldr	r3, [pc, #324]	; (4c94 <printBootMsg+0x228>)
    4b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4b52:	4b46      	ldr	r3, [pc, #280]	; (4c6c <printBootMsg+0x200>)
    4b54:	1c10      	adds	r0, r2, #0
    4b56:	4798      	blx	r3
    4b58:	1c03      	adds	r3, r0, #0
    4b5a:	1c0c      	adds	r4, r1, #0
    4b5c:	4a4e      	ldr	r2, [pc, #312]	; (4c98 <printBootMsg+0x22c>)
    4b5e:	1c10      	adds	r0, r2, #0
    4b60:	1c1a      	adds	r2, r3, #0
    4b62:	1c23      	adds	r3, r4, #0
    4b64:	4934      	ldr	r1, [pc, #208]	; (4c38 <printBootMsg+0x1cc>)
    4b66:	4788      	blx	r1
	#ifdef HIGH_PERFORMANCE
	dbg_info("\ndefrost freq hrs %d", defrostFreqHrs);
    4b68:	4b4c      	ldr	r3, [pc, #304]	; (4c9c <printBootMsg+0x230>)
    4b6a:	781b      	ldrb	r3, [r3, #0]
    4b6c:	4a4c      	ldr	r2, [pc, #304]	; (4ca0 <printBootMsg+0x234>)
    4b6e:	1c10      	adds	r0, r2, #0
    4b70:	1c19      	adds	r1, r3, #0
    4b72:	4b31      	ldr	r3, [pc, #196]	; (4c38 <printBootMsg+0x1cc>)
    4b74:	4798      	blx	r3
	#else
	dbg_info("\nhigh usage mode 1hr door cnt limit %d", doorOpenCount1HrLimit);	
	dbg_info("\ndefrost min interval hrs %d", defrostFreqHrs);
	dbg_info("\ndefrost max interval hrs %d", defrostFreqMaxHrs);
	#endif
	dbg_info("\ndefrost duration mins %d", defrostDurationMins);
    4b76:	4b4b      	ldr	r3, [pc, #300]	; (4ca4 <printBootMsg+0x238>)
    4b78:	781b      	ldrb	r3, [r3, #0]
    4b7a:	4a4b      	ldr	r2, [pc, #300]	; (4ca8 <printBootMsg+0x23c>)
    4b7c:	1c10      	adds	r0, r2, #0
    4b7e:	1c19      	adds	r1, r3, #0
    4b80:	4b2d      	ldr	r3, [pc, #180]	; (4c38 <printBootMsg+0x1cc>)
    4b82:	4798      	blx	r3
	dbg_info("\nmaxAllowedChamberTemp %4.2f", maxAllowedChamberTemp);
    4b84:	4b49      	ldr	r3, [pc, #292]	; (4cac <printBootMsg+0x240>)
    4b86:	681a      	ldr	r2, [r3, #0]
    4b88:	4b38      	ldr	r3, [pc, #224]	; (4c6c <printBootMsg+0x200>)
    4b8a:	1c10      	adds	r0, r2, #0
    4b8c:	4798      	blx	r3
    4b8e:	1c03      	adds	r3, r0, #0
    4b90:	1c0c      	adds	r4, r1, #0
    4b92:	4a47      	ldr	r2, [pc, #284]	; (4cb0 <printBootMsg+0x244>)
    4b94:	1c10      	adds	r0, r2, #0
    4b96:	1c1a      	adds	r2, r3, #0
    4b98:	1c23      	adds	r3, r4, #0
    4b9a:	4927      	ldr	r1, [pc, #156]	; (4c38 <printBootMsg+0x1cc>)
    4b9c:	4788      	blx	r1
	dbg_info("\nminAllowedChamberTemp %4.2f", minAllowedChamberTemp);		
    4b9e:	4b45      	ldr	r3, [pc, #276]	; (4cb4 <printBootMsg+0x248>)
    4ba0:	681a      	ldr	r2, [r3, #0]
    4ba2:	4b32      	ldr	r3, [pc, #200]	; (4c6c <printBootMsg+0x200>)
    4ba4:	1c10      	adds	r0, r2, #0
    4ba6:	4798      	blx	r3
    4ba8:	1c03      	adds	r3, r0, #0
    4baa:	1c0c      	adds	r4, r1, #0
    4bac:	4a42      	ldr	r2, [pc, #264]	; (4cb8 <printBootMsg+0x24c>)
    4bae:	1c10      	adds	r0, r2, #0
    4bb0:	1c1a      	adds	r2, r3, #0
    4bb2:	1c23      	adds	r3, r4, #0
    4bb4:	4920      	ldr	r1, [pc, #128]	; (4c38 <printBootMsg+0x1cc>)
    4bb6:	4788      	blx	r1
	dbg_info("\nmodel number %s", strModel);
    4bb8:	4a40      	ldr	r2, [pc, #256]	; (4cbc <printBootMsg+0x250>)
    4bba:	4b41      	ldr	r3, [pc, #260]	; (4cc0 <printBootMsg+0x254>)
    4bbc:	1c10      	adds	r0, r2, #0
    4bbe:	1c19      	adds	r1, r3, #0
    4bc0:	4b1d      	ldr	r3, [pc, #116]	; (4c38 <printBootMsg+0x1cc>)
    4bc2:	4798      	blx	r3
	dbg_info("\nserial number %s", strSerial);
    4bc4:	4a3f      	ldr	r2, [pc, #252]	; (4cc4 <printBootMsg+0x258>)
    4bc6:	4b40      	ldr	r3, [pc, #256]	; (4cc8 <printBootMsg+0x25c>)
    4bc8:	1c10      	adds	r0, r2, #0
    4bca:	1c19      	adds	r1, r3, #0
    4bcc:	4b1a      	ldr	r3, [pc, #104]	; (4c38 <printBootMsg+0x1cc>)
    4bce:	4798      	blx	r3
	dbg_info("\nui fw ver %s", strUiFwVer);
    4bd0:	4a3e      	ldr	r2, [pc, #248]	; (4ccc <printBootMsg+0x260>)
    4bd2:	4b3f      	ldr	r3, [pc, #252]	; (4cd0 <printBootMsg+0x264>)
    4bd4:	1c10      	adds	r0, r2, #0
    4bd6:	1c19      	adds	r1, r3, #0
    4bd8:	4b17      	ldr	r3, [pc, #92]	; (4c38 <printBootMsg+0x1cc>)
    4bda:	4798      	blx	r3
	dbg_info("\nmac addr %02X:%02X:%02X:%02X:%02X:%02X",
    4bdc:	4b3d      	ldr	r3, [pc, #244]	; (4cd4 <printBootMsg+0x268>)
    4bde:	781b      	ldrb	r3, [r3, #0]
    4be0:	1c19      	adds	r1, r3, #0
    4be2:	4b3c      	ldr	r3, [pc, #240]	; (4cd4 <printBootMsg+0x268>)
    4be4:	785b      	ldrb	r3, [r3, #1]
    4be6:	1c1a      	adds	r2, r3, #0
    4be8:	4b3a      	ldr	r3, [pc, #232]	; (4cd4 <printBootMsg+0x268>)
    4bea:	789b      	ldrb	r3, [r3, #2]
    4bec:	4839      	ldr	r0, [pc, #228]	; (4cd4 <printBootMsg+0x268>)
    4bee:	78c0      	ldrb	r0, [r0, #3]
    4bf0:	1c06      	adds	r6, r0, #0
    4bf2:	4838      	ldr	r0, [pc, #224]	; (4cd4 <printBootMsg+0x268>)
    4bf4:	7900      	ldrb	r0, [r0, #4]
    4bf6:	1c05      	adds	r5, r0, #0
    4bf8:	4836      	ldr	r0, [pc, #216]	; (4cd4 <printBootMsg+0x268>)
    4bfa:	7940      	ldrb	r0, [r0, #5]
    4bfc:	1c04      	adds	r4, r0, #0
    4bfe:	4836      	ldr	r0, [pc, #216]	; (4cd8 <printBootMsg+0x26c>)
    4c00:	9600      	str	r6, [sp, #0]
    4c02:	9501      	str	r5, [sp, #4]
    4c04:	9402      	str	r4, [sp, #8]
    4c06:	4c0c      	ldr	r4, [pc, #48]	; (4c38 <printBootMsg+0x1cc>)
    4c08:	47a0      	blx	r4
	MAC_address[0], MAC_address[1], MAC_address[2],
	MAC_address[3], MAC_address[4], MAC_address[5] );
	dbg_info("\ndoorOpenLifetimeCnt %ld", doorOpenLifetimeCnt);
    4c0a:	4b34      	ldr	r3, [pc, #208]	; (4cdc <printBootMsg+0x270>)
    4c0c:	681b      	ldr	r3, [r3, #0]
    4c0e:	4a34      	ldr	r2, [pc, #208]	; (4ce0 <printBootMsg+0x274>)
    4c10:	1c10      	adds	r0, r2, #0
    4c12:	1c19      	adds	r1, r3, #0
    4c14:	4b08      	ldr	r3, [pc, #32]	; (4c38 <printBootMsg+0x1cc>)
    4c16:	4798      	blx	r3
	dbg_info("\nfirmware build %.2x.%.2x", firmwareVersion, firmwareRevision);
    4c18:	4b32      	ldr	r3, [pc, #200]	; (4ce4 <printBootMsg+0x278>)
    4c1a:	781b      	ldrb	r3, [r3, #0]
    4c1c:	1c1a      	adds	r2, r3, #0
    4c1e:	4b32      	ldr	r3, [pc, #200]	; (4ce8 <printBootMsg+0x27c>)
    4c20:	781b      	ldrb	r3, [r3, #0]
    4c22:	4932      	ldr	r1, [pc, #200]	; (4cec <printBootMsg+0x280>)
    4c24:	1c08      	adds	r0, r1, #0
    4c26:	1c11      	adds	r1, r2, #0
    4c28:	1c1a      	adds	r2, r3, #0
    4c2a:	4b03      	ldr	r3, [pc, #12]	; (4c38 <printBootMsg+0x1cc>)
    4c2c:	4798      	blx	r3
		
}
    4c2e:	46bd      	mov	sp, r7
    4c30:	b001      	add	sp, #4
    4c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c34:	000241cc 	.word	0x000241cc
    4c38:	0001b62d 	.word	0x0001b62d
    4c3c:	20000a84 	.word	0x20000a84
    4c40:	2000016c 	.word	0x2000016c
    4c44:	000241ec 	.word	0x000241ec
    4c48:	200002f8 	.word	0x200002f8
    4c4c:	000241f8 	.word	0x000241f8
    4c50:	20000088 	.word	0x20000088
    4c54:	00024210 	.word	0x00024210
    4c58:	20000089 	.word	0x20000089
    4c5c:	00024228 	.word	0x00024228
    4c60:	2000004c 	.word	0x2000004c
    4c64:	00024240 	.word	0x00024240
    4c68:	200009b8 	.word	0x200009b8
    4c6c:	00022111 	.word	0x00022111
    4c70:	00024258 	.word	0x00024258
    4c74:	00024270 	.word	0x00024270
    4c78:	20000960 	.word	0x20000960
    4c7c:	00024288 	.word	0x00024288
    4c80:	2000018c 	.word	0x2000018c
    4c84:	000242a0 	.word	0x000242a0
    4c88:	2000018e 	.word	0x2000018e
    4c8c:	000242bc 	.word	0x000242bc
    4c90:	000242d8 	.word	0x000242d8
    4c94:	20000d64 	.word	0x20000d64
    4c98:	000242f8 	.word	0x000242f8
    4c9c:	20000910 	.word	0x20000910
    4ca0:	00024318 	.word	0x00024318
    4ca4:	200008d8 	.word	0x200008d8
    4ca8:	00024330 	.word	0x00024330
    4cac:	20000180 	.word	0x20000180
    4cb0:	0002434c 	.word	0x0002434c
    4cb4:	20000184 	.word	0x20000184
    4cb8:	0002436c 	.word	0x0002436c
    4cbc:	0002438c 	.word	0x0002438c
    4cc0:	200008c4 	.word	0x200008c4
    4cc4:	000243a0 	.word	0x000243a0
    4cc8:	200008f4 	.word	0x200008f4
    4ccc:	000243b4 	.word	0x000243b4
    4cd0:	20000058 	.word	0x20000058
    4cd4:	20000904 	.word	0x20000904
    4cd8:	000243c4 	.word	0x000243c4
    4cdc:	2000090c 	.word	0x2000090c
    4ce0:	000243ec 	.word	0x000243ec
    4ce4:	20000ed0 	.word	0x20000ed0
    4ce8:	20000e0c 	.word	0x20000e0c
    4cec:	00024408 	.word	0x00024408

00004cf0 <initDefrost>:

/************************************************************************/
/* User Functions                                                       */
/************************************************************************/
void initDefrost()
{
    4cf0:	b580      	push	{r7, lr}
    4cf2:	af00      	add	r7, sp, #0
	userTimerReset(&defrostIntervalTimer);
    4cf4:	4b20      	ldr	r3, [pc, #128]	; (4d78 <initDefrost+0x88>)
    4cf6:	1c18      	adds	r0, r3, #0
    4cf8:	4b20      	ldr	r3, [pc, #128]	; (4d7c <initDefrost+0x8c>)
    4cfa:	4798      	blx	r3
	userTimerReset(&defrostFreezupTimer);
    4cfc:	4b20      	ldr	r3, [pc, #128]	; (4d80 <initDefrost+0x90>)
    4cfe:	1c18      	adds	r0, r3, #0
    4d00:	4b1e      	ldr	r3, [pc, #120]	; (4d7c <initDefrost+0x8c>)
    4d02:	4798      	blx	r3
	userTimerStart(&defrostMinimumIntervalTimer, defrostFreqHrs*60);
    4d04:	4b1f      	ldr	r3, [pc, #124]	; (4d84 <initDefrost+0x94>)
    4d06:	781b      	ldrb	r3, [r3, #0]
    4d08:	223c      	movs	r2, #60	; 0x3c
    4d0a:	4353      	muls	r3, r2
    4d0c:	b29b      	uxth	r3, r3
    4d0e:	4a1e      	ldr	r2, [pc, #120]	; (4d88 <initDefrost+0x98>)
    4d10:	1c10      	adds	r0, r2, #0
    4d12:	1c19      	adds	r1, r3, #0
    4d14:	4b1d      	ldr	r3, [pc, #116]	; (4d8c <initDefrost+0x9c>)
    4d16:	4798      	blx	r3
	userTimerStart(&defrostMaximumIntervalTimer, defrostFreqMaxHrs*60);
    4d18:	4b1d      	ldr	r3, [pc, #116]	; (4d90 <initDefrost+0xa0>)
    4d1a:	881b      	ldrh	r3, [r3, #0]
    4d1c:	223c      	movs	r2, #60	; 0x3c
    4d1e:	4353      	muls	r3, r2
    4d20:	b29b      	uxth	r3, r3
    4d22:	4a1c      	ldr	r2, [pc, #112]	; (4d94 <initDefrost+0xa4>)
    4d24:	1c10      	adds	r0, r2, #0
    4d26:	1c19      	adds	r1, r3, #0
    4d28:	4b18      	ldr	r3, [pc, #96]	; (4d8c <initDefrost+0x9c>)
    4d2a:	4798      	blx	r3

	//defrostFreqHrs = DEFAULT_DEFROST_FREQ_HRS;
	//defrostDurationMins = DEFAULT_DEFROST_DURATION_MINS;
	defrostCycleCount = 0;
    4d2c:	4b1a      	ldr	r3, [pc, #104]	; (4d98 <initDefrost+0xa8>)
    4d2e:	2200      	movs	r2, #0
    4d30:	801a      	strh	r2, [r3, #0]
	defrostActive = false;
    4d32:	4b1a      	ldr	r3, [pc, #104]	; (4d9c <initDefrost+0xac>)
    4d34:	2200      	movs	r2, #0
    4d36:	701a      	strb	r2, [r3, #0]
	enableAutoDefrost = true;
    4d38:	4b19      	ldr	r3, [pc, #100]	; (4da0 <initDefrost+0xb0>)
    4d3a:	2201      	movs	r2, #1
    4d3c:	701a      	strb	r2, [r3, #0]
	task4LastTime = presentTimeInSec();
    4d3e:	4b19      	ldr	r3, [pc, #100]	; (4da4 <initDefrost+0xb4>)
    4d40:	4798      	blx	r3
    4d42:	1c02      	adds	r2, r0, #0
    4d44:	4b18      	ldr	r3, [pc, #96]	; (4da8 <initDefrost+0xb8>)
    4d46:	601a      	str	r2, [r3, #0]
	task5LastTime = presentTimeInSec();
    4d48:	4b16      	ldr	r3, [pc, #88]	; (4da4 <initDefrost+0xb4>)
    4d4a:	4798      	blx	r3
    4d4c:	1c02      	adds	r2, r0, #0
    4d4e:	4b17      	ldr	r3, [pc, #92]	; (4dac <initDefrost+0xbc>)
    4d50:	601a      	str	r2, [r3, #0]
	task4Time = 0;
    4d52:	4b17      	ldr	r3, [pc, #92]	; (4db0 <initDefrost+0xc0>)
    4d54:	2200      	movs	r2, #0
    4d56:	601a      	str	r2, [r3, #0]
	task5Time = 0;
    4d58:	4b16      	ldr	r3, [pc, #88]	; (4db4 <initDefrost+0xc4>)
    4d5a:	2200      	movs	r2, #0
    4d5c:	601a      	str	r2, [r3, #0]
	defrostCancelTemp = maxAllowedChamberTemp-1;
    4d5e:	4b16      	ldr	r3, [pc, #88]	; (4db8 <initDefrost+0xc8>)
    4d60:	681a      	ldr	r2, [r3, #0]
    4d62:	4b16      	ldr	r3, [pc, #88]	; (4dbc <initDefrost+0xcc>)
    4d64:	1c10      	adds	r0, r2, #0
    4d66:	21fe      	movs	r1, #254	; 0xfe
    4d68:	0589      	lsls	r1, r1, #22
    4d6a:	4798      	blx	r3
    4d6c:	1c03      	adds	r3, r0, #0
    4d6e:	1c1a      	adds	r2, r3, #0
    4d70:	4b13      	ldr	r3, [pc, #76]	; (4dc0 <initDefrost+0xd0>)
    4d72:	601a      	str	r2, [r3, #0]
}
    4d74:	46bd      	mov	sp, r7
    4d76:	bd80      	pop	{r7, pc}
    4d78:	20000824 	.word	0x20000824
    4d7c:	0000f2b5 	.word	0x0000f2b5
    4d80:	200007f8 	.word	0x200007f8
    4d84:	20000910 	.word	0x20000910
    4d88:	200007d8 	.word	0x200007d8
    4d8c:	0000f211 	.word	0x0000f211
    4d90:	20000dbc 	.word	0x20000dbc
    4d94:	20000810 	.word	0x20000810
    4d98:	200002a2 	.word	0x200002a2
    4d9c:	200002a4 	.word	0x200002a4
    4da0:	20000038 	.word	0x20000038
    4da4:	0000dcad 	.word	0x0000dcad
    4da8:	200002b0 	.word	0x200002b0
    4dac:	200002b4 	.word	0x200002b4
    4db0:	200002a8 	.word	0x200002a8
    4db4:	200002ac 	.word	0x200002ac
    4db8:	20000180 	.word	0x20000180
    4dbc:	00020089 	.word	0x00020089
    4dc0:	2000080c 	.word	0x2000080c

00004dc4 <setDefrostState>:

void setDefrostState(uint8_t state)
{
    4dc4:	b590      	push	{r4, r7, lr}
    4dc6:	b083      	sub	sp, #12
    4dc8:	af00      	add	r7, sp, #0
    4dca:	1c02      	adds	r2, r0, #0
    4dcc:	1dfb      	adds	r3, r7, #7
    4dce:	701a      	strb	r2, [r3, #0]
	if (state == DEFROST_START)
    4dd0:	1dfb      	adds	r3, r7, #7
    4dd2:	781b      	ldrb	r3, [r3, #0]
    4dd4:	2b00      	cmp	r3, #0
    4dd6:	d138      	bne.n	4e4a <setDefrostState+0x86>
	{
		// start defrost cycle
		defrostActive = true;
    4dd8:	4b3e      	ldr	r3, [pc, #248]	; (4ed4 <setDefrostState+0x110>)
    4dda:	2201      	movs	r2, #1
    4ddc:	701a      	strb	r2, [r3, #0]
		///task5LastTime = presentTimeInSec();
		userTimerReset(&defrostIntervalTimer);
    4dde:	4b3e      	ldr	r3, [pc, #248]	; (4ed8 <setDefrostState+0x114>)
    4de0:	1c18      	adds	r0, r3, #0
    4de2:	4b3e      	ldr	r3, [pc, #248]	; (4edc <setDefrostState+0x118>)
    4de4:	4798      	blx	r3
		userTimerStart(&defrostIntervalTimer, defrostDurationMins);
    4de6:	4b3e      	ldr	r3, [pc, #248]	; (4ee0 <setDefrostState+0x11c>)
    4de8:	781b      	ldrb	r3, [r3, #0]
    4dea:	4a3b      	ldr	r2, [pc, #236]	; (4ed8 <setDefrostState+0x114>)
    4dec:	1c10      	adds	r0, r2, #0
    4dee:	1c19      	adds	r1, r3, #0
    4df0:	4b3c      	ldr	r3, [pc, #240]	; (4ee4 <setDefrostState+0x120>)
    4df2:	4798      	blx	r3
		chamber1.deactivateAutoControl = true;
    4df4:	4a3c      	ldr	r2, [pc, #240]	; (4ee8 <setDefrostState+0x124>)
    4df6:	233d      	movs	r3, #61	; 0x3d
    4df8:	2101      	movs	r1, #1
    4dfa:	54d1      	strb	r1, [r2, r3]
		ps1.desiredVoltage = 0;
    4dfc:	4b3b      	ldr	r3, [pc, #236]	; (4eec <setDefrostState+0x128>)
    4dfe:	2200      	movs	r2, #0
    4e00:	615a      	str	r2, [r3, #20]
		pidLoop1.inAuto = false;
    4e02:	4a3b      	ldr	r2, [pc, #236]	; (4ef0 <setDefrostState+0x12c>)
    4e04:	234c      	movs	r3, #76	; 0x4c
    4e06:	2100      	movs	r1, #0
    4e08:	54d1      	strb	r1, [r2, r3]
		//enableFanOverride = true;
		//fan1.targetDutyPercent = 100;
		//fan2.targetDutyPercent = 100;
		defrostCycleCount++;
    4e0a:	4b3a      	ldr	r3, [pc, #232]	; (4ef4 <setDefrostState+0x130>)
    4e0c:	881b      	ldrh	r3, [r3, #0]
    4e0e:	3301      	adds	r3, #1
    4e10:	b29a      	uxth	r2, r3
    4e12:	4b38      	ldr	r3, [pc, #224]	; (4ef4 <setDefrostState+0x130>)
    4e14:	801a      	strh	r2, [r3, #0]
			
		rtc_calendar_get_time(&time_report.time);
    4e16:	4b38      	ldr	r3, [pc, #224]	; (4ef8 <setDefrostState+0x134>)
    4e18:	1c18      	adds	r0, r3, #0
    4e1a:	4b38      	ldr	r3, [pc, #224]	; (4efc <setDefrostState+0x138>)
    4e1c:	4798      	blx	r3
		dbg_info("\n[defrost start %2dh:%2dm:%2ds]",
    4e1e:	4b36      	ldr	r3, [pc, #216]	; (4ef8 <setDefrostState+0x134>)
    4e20:	789b      	ldrb	r3, [r3, #2]
    4e22:	1c19      	adds	r1, r3, #0
    4e24:	4b34      	ldr	r3, [pc, #208]	; (4ef8 <setDefrostState+0x134>)
    4e26:	785b      	ldrb	r3, [r3, #1]
    4e28:	1c1a      	adds	r2, r3, #0
    4e2a:	4b33      	ldr	r3, [pc, #204]	; (4ef8 <setDefrostState+0x134>)
    4e2c:	781b      	ldrb	r3, [r3, #0]
    4e2e:	4834      	ldr	r0, [pc, #208]	; (4f00 <setDefrostState+0x13c>)
    4e30:	4c34      	ldr	r4, [pc, #208]	; (4f04 <setDefrostState+0x140>)
    4e32:	47a0      	blx	r4
			time_report.time.hour,
			time_report.time.minute,
			time_report.time.second);	
		
		last_defrost_timestamp = time_report;
    4e34:	4a34      	ldr	r2, [pc, #208]	; (4f08 <setDefrostState+0x144>)
    4e36:	4b30      	ldr	r3, [pc, #192]	; (4ef8 <setDefrostState+0x134>)
    4e38:	1c11      	adds	r1, r2, #0
    4e3a:	1c1a      	adds	r2, r3, #0
    4e3c:	230a      	movs	r3, #10
    4e3e:	1c08      	adds	r0, r1, #0
    4e40:	1c11      	adds	r1, r2, #0
    4e42:	1c1a      	adds	r2, r3, #0
    4e44:	4b31      	ldr	r3, [pc, #196]	; (4f0c <setDefrostState+0x148>)
    4e46:	4798      	blx	r3
    4e48:	e040      	b.n	4ecc <setDefrostState+0x108>
	}
	else if (state == DEFROST_STOP)
    4e4a:	1dfb      	adds	r3, r7, #7
    4e4c:	781b      	ldrb	r3, [r3, #0]
    4e4e:	2b01      	cmp	r3, #1
    4e50:	d125      	bne.n	4e9e <setDefrostState+0xda>
	{
		// end defrost cycle
		defrostActive = false;
    4e52:	4b20      	ldr	r3, [pc, #128]	; (4ed4 <setDefrostState+0x110>)
    4e54:	2200      	movs	r2, #0
    4e56:	701a      	strb	r2, [r3, #0]
		///task5Time = 0;
		userTimerReset(&defrostIntervalTimer);
    4e58:	4b1f      	ldr	r3, [pc, #124]	; (4ed8 <setDefrostState+0x114>)
    4e5a:	1c18      	adds	r0, r3, #0
    4e5c:	4b1f      	ldr	r3, [pc, #124]	; (4edc <setDefrostState+0x118>)
    4e5e:	4798      	blx	r3
		chamber1.deactivateAutoControl = false;
    4e60:	4a21      	ldr	r2, [pc, #132]	; (4ee8 <setDefrostState+0x124>)
    4e62:	233d      	movs	r3, #61	; 0x3d
    4e64:	2100      	movs	r1, #0
    4e66:	54d1      	strb	r1, [r2, r3]
		pidLoop1.inAuto = true;
    4e68:	4a21      	ldr	r2, [pc, #132]	; (4ef0 <setDefrostState+0x12c>)
    4e6a:	234c      	movs	r3, #76	; 0x4c
    4e6c:	2101      	movs	r1, #1
    4e6e:	54d1      	strb	r1, [r2, r3]
		//enableFanOverride = false;
			
		rtc_calendar_get_time(&time_report.time);
    4e70:	4b21      	ldr	r3, [pc, #132]	; (4ef8 <setDefrostState+0x134>)
    4e72:	1c18      	adds	r0, r3, #0
    4e74:	4b21      	ldr	r3, [pc, #132]	; (4efc <setDefrostState+0x138>)
    4e76:	4798      	blx	r3
		dbg_info("\n[defrost stop %2dh:%2dm:%2ds]",
    4e78:	4b1f      	ldr	r3, [pc, #124]	; (4ef8 <setDefrostState+0x134>)
    4e7a:	789b      	ldrb	r3, [r3, #2]
    4e7c:	1c19      	adds	r1, r3, #0
    4e7e:	4b1e      	ldr	r3, [pc, #120]	; (4ef8 <setDefrostState+0x134>)
    4e80:	785b      	ldrb	r3, [r3, #1]
    4e82:	1c1a      	adds	r2, r3, #0
    4e84:	4b1c      	ldr	r3, [pc, #112]	; (4ef8 <setDefrostState+0x134>)
    4e86:	781b      	ldrb	r3, [r3, #0]
    4e88:	4821      	ldr	r0, [pc, #132]	; (4f10 <setDefrostState+0x14c>)
    4e8a:	4c1e      	ldr	r4, [pc, #120]	; (4f04 <setDefrostState+0x140>)
    4e8c:	47a0      	blx	r4
			time_report.time.hour,
			time_report.time.minute,
			time_report.time.second);
		dbg_info(" [cycle %d]\n", defrostCycleCount);		
    4e8e:	4b19      	ldr	r3, [pc, #100]	; (4ef4 <setDefrostState+0x130>)
    4e90:	881b      	ldrh	r3, [r3, #0]
    4e92:	4a20      	ldr	r2, [pc, #128]	; (4f14 <setDefrostState+0x150>)
    4e94:	1c10      	adds	r0, r2, #0
    4e96:	1c19      	adds	r1, r3, #0
    4e98:	4b1a      	ldr	r3, [pc, #104]	; (4f04 <setDefrostState+0x140>)
    4e9a:	4798      	blx	r3
    4e9c:	e016      	b.n	4ecc <setDefrostState+0x108>
	}
	else if (state == DEFROST_CANCEL)
    4e9e:	1dfb      	adds	r3, r7, #7
    4ea0:	781b      	ldrb	r3, [r3, #0]
    4ea2:	2b02      	cmp	r3, #2
    4ea4:	d112      	bne.n	4ecc <setDefrostState+0x108>
	{
		defrostActive = false;
    4ea6:	4b0b      	ldr	r3, [pc, #44]	; (4ed4 <setDefrostState+0x110>)
    4ea8:	2200      	movs	r2, #0
    4eaa:	701a      	strb	r2, [r3, #0]
		chamber1.deactivateAutoControl = false;
    4eac:	4a0e      	ldr	r2, [pc, #56]	; (4ee8 <setDefrostState+0x124>)
    4eae:	233d      	movs	r3, #61	; 0x3d
    4eb0:	2100      	movs	r1, #0
    4eb2:	54d1      	strb	r1, [r2, r3]
		pidLoop1.inAuto = true;
    4eb4:	4a0e      	ldr	r2, [pc, #56]	; (4ef0 <setDefrostState+0x12c>)
    4eb6:	234c      	movs	r3, #76	; 0x4c
    4eb8:	2101      	movs	r1, #1
    4eba:	54d1      	strb	r1, [r2, r3]
		///task4Time = 0;
		///task4LastTime = presentTimeInSec();
		///task5Time = 0;
		///task5LastTime = presentTimeInSec();
		userTimerReset(&defrostIntervalTimer);
    4ebc:	4b06      	ldr	r3, [pc, #24]	; (4ed8 <setDefrostState+0x114>)
    4ebe:	1c18      	adds	r0, r3, #0
    4ec0:	4b06      	ldr	r3, [pc, #24]	; (4edc <setDefrostState+0x118>)
    4ec2:	4798      	blx	r3
		dbg("\n[defrost cancelled]");
    4ec4:	4b14      	ldr	r3, [pc, #80]	; (4f18 <setDefrostState+0x154>)
    4ec6:	1c18      	adds	r0, r3, #0
    4ec8:	4b0e      	ldr	r3, [pc, #56]	; (4f04 <setDefrostState+0x140>)
    4eca:	4798      	blx	r3
	}		
}
    4ecc:	46bd      	mov	sp, r7
    4ece:	b003      	add	sp, #12
    4ed0:	bd90      	pop	{r4, r7, pc}
    4ed2:	46c0      	nop			; (mov r8, r8)
    4ed4:	200002a4 	.word	0x200002a4
    4ed8:	20000824 	.word	0x20000824
    4edc:	0000f2b5 	.word	0x0000f2b5
    4ee0:	200008d8 	.word	0x200008d8
    4ee4:	0000f211 	.word	0x0000f211
    4ee8:	200009b8 	.word	0x200009b8
    4eec:	20000a84 	.word	0x20000a84
    4ef0:	20000e10 	.word	0x20000e10
    4ef4:	200002a2 	.word	0x200002a2
    4ef8:	20000f54 	.word	0x20000f54
    4efc:	00012939 	.word	0x00012939
    4f00:	000244d4 	.word	0x000244d4
    4f04:	0001b62d 	.word	0x0001b62d
    4f08:	200007ec 	.word	0x200007ec
    4f0c:	0001b375 	.word	0x0001b375
    4f10:	000244f4 	.word	0x000244f4
    4f14:	00024514 	.word	0x00024514
    4f18:	00024524 	.word	0x00024524

00004f1c <defrostStateMachine>:

void defrostStateMachine()
{
    4f1c:	b580      	push	{r7, lr}
    4f1e:	af00      	add	r7, sp, #0
	if (enableAutoDefrost==true) 
    4f20:	4b64      	ldr	r3, [pc, #400]	; (50b4 <defrostStateMachine+0x198>)
    4f22:	781b      	ldrb	r3, [r3, #0]
    4f24:	2b00      	cmp	r3, #0
    4f26:	d100      	bne.n	4f2a <defrostStateMachine+0xe>
    4f28:	e0c2      	b.n	50b0 <defrostStateMachine+0x194>
	{	
		#ifdef HIGH_PERFORMANCE
		// START ///////////////////////////////////////////////
		if ( ( (defrostMinimumIntervalTimer.timerExpired==true) && (highUsageModeFlag==true) ) ||
    4f2a:	4b63      	ldr	r3, [pc, #396]	; (50b8 <defrostStateMachine+0x19c>)
    4f2c:	7b5b      	ldrb	r3, [r3, #13]
    4f2e:	2b00      	cmp	r3, #0
    4f30:	d003      	beq.n	4f3a <defrostStateMachine+0x1e>
    4f32:	4b62      	ldr	r3, [pc, #392]	; (50bc <defrostStateMachine+0x1a0>)
    4f34:	781b      	ldrb	r3, [r3, #0]
    4f36:	2b00      	cmp	r3, #0
    4f38:	d112      	bne.n	4f60 <defrostStateMachine+0x44>
			 ( (defrostMinimumIntervalTimer.timerExpired==true) && 
    4f3a:	4b5f      	ldr	r3, [pc, #380]	; (50b8 <defrostStateMachine+0x19c>)
    4f3c:	7b5b      	ldrb	r3, [r3, #13]
{
	if (enableAutoDefrost==true) 
	{	
		#ifdef HIGH_PERFORMANCE
		// START ///////////////////////////////////////////////
		if ( ( (defrostMinimumIntervalTimer.timerExpired==true) && (highUsageModeFlag==true) ) ||
    4f3e:	2b00      	cmp	r3, #0
    4f40:	d01d      	beq.n	4f7e <defrostStateMachine+0x62>
			 ( (defrostMinimumIntervalTimer.timerExpired==true) && 
			   ( (defrostFreezupTimer.timerExpired==true) ||
    4f42:	4b5f      	ldr	r3, [pc, #380]	; (50c0 <defrostStateMachine+0x1a4>)
    4f44:	7b5b      	ldrb	r3, [r3, #13]
	if (enableAutoDefrost==true) 
	{	
		#ifdef HIGH_PERFORMANCE
		// START ///////////////////////////////////////////////
		if ( ( (defrostMinimumIntervalTimer.timerExpired==true) && (highUsageModeFlag==true) ) ||
			 ( (defrostMinimumIntervalTimer.timerExpired==true) && 
    4f46:	2b00      	cmp	r3, #0
    4f48:	d10a      	bne.n	4f60 <defrostStateMachine+0x44>
			   ( (defrostFreezupTimer.timerExpired==true) ||
			     ((defrostMaximumIntervalTimer.timerExpired==true) && (highUsageModeFlag==false)) 
    4f4a:	4b5e      	ldr	r3, [pc, #376]	; (50c4 <defrostStateMachine+0x1a8>)
    4f4c:	7b5b      	ldrb	r3, [r3, #13]
	{	
		#ifdef HIGH_PERFORMANCE
		// START ///////////////////////////////////////////////
		if ( ( (defrostMinimumIntervalTimer.timerExpired==true) && (highUsageModeFlag==true) ) ||
			 ( (defrostMinimumIntervalTimer.timerExpired==true) && 
			   ( (defrostFreezupTimer.timerExpired==true) ||
    4f4e:	2b00      	cmp	r3, #0
    4f50:	d015      	beq.n	4f7e <defrostStateMachine+0x62>
			     ((defrostMaximumIntervalTimer.timerExpired==true) && (highUsageModeFlag==false)) 
    4f52:	4b5a      	ldr	r3, [pc, #360]	; (50bc <defrostStateMachine+0x1a0>)
    4f54:	781b      	ldrb	r3, [r3, #0]
    4f56:	2201      	movs	r2, #1
    4f58:	4053      	eors	r3, r2
    4f5a:	b2db      	uxtb	r3, r3
    4f5c:	2b00      	cmp	r3, #0
    4f5e:	d00e      	beq.n	4f7e <defrostStateMachine+0x62>
			   ) 
			 )
		   )
		{
			setDefrostState(DEFROST_START);
    4f60:	2000      	movs	r0, #0
    4f62:	4b59      	ldr	r3, [pc, #356]	; (50c8 <defrostStateMachine+0x1ac>)
    4f64:	4798      	blx	r3
			//userTimerStart(&defrostIntervalTimer, defrostDurationMins);
			userTimerReset(&defrostMinimumIntervalTimer);
    4f66:	4b54      	ldr	r3, [pc, #336]	; (50b8 <defrostStateMachine+0x19c>)
    4f68:	1c18      	adds	r0, r3, #0
    4f6a:	4b58      	ldr	r3, [pc, #352]	; (50cc <defrostStateMachine+0x1b0>)
    4f6c:	4798      	blx	r3
			userTimerReset(&defrostMaximumIntervalTimer);
    4f6e:	4b55      	ldr	r3, [pc, #340]	; (50c4 <defrostStateMachine+0x1a8>)
    4f70:	1c18      	adds	r0, r3, #0
    4f72:	4b56      	ldr	r3, [pc, #344]	; (50cc <defrostStateMachine+0x1b0>)
    4f74:	4798      	blx	r3
			userTimerReset(&defrostFreezupTimer);	
    4f76:	4b52      	ldr	r3, [pc, #328]	; (50c0 <defrostStateMachine+0x1a4>)
    4f78:	1c18      	adds	r0, r3, #0
    4f7a:	4b54      	ldr	r3, [pc, #336]	; (50cc <defrostStateMachine+0x1b0>)
    4f7c:	4798      	blx	r3
		}
	
		if (acceptHtxTemperature < DEFROST_ACTIVATE_TEMPERATURE)
    4f7e:	4b54      	ldr	r3, [pc, #336]	; (50d0 <defrostStateMachine+0x1b4>)
    4f80:	681a      	ldr	r2, [r3, #0]
    4f82:	4b54      	ldr	r3, [pc, #336]	; (50d4 <defrostStateMachine+0x1b8>)
    4f84:	1c10      	adds	r0, r2, #0
    4f86:	4954      	ldr	r1, [pc, #336]	; (50d8 <defrostStateMachine+0x1bc>)
    4f88:	4798      	blx	r3
    4f8a:	1c03      	adds	r3, r0, #0
    4f8c:	2b00      	cmp	r3, #0
    4f8e:	d01c      	beq.n	4fca <defrostStateMachine+0xae>
		{
			if (defrostFreezupTimer.timerActive==false)
    4f90:	4b4b      	ldr	r3, [pc, #300]	; (50c0 <defrostStateMachine+0x1a4>)
    4f92:	7b1b      	ldrb	r3, [r3, #12]
    4f94:	2201      	movs	r2, #1
    4f96:	4053      	eors	r3, r2
    4f98:	b2db      	uxtb	r3, r3
    4f9a:	2b00      	cmp	r3, #0
    4f9c:	d012      	beq.n	4fc4 <defrostStateMachine+0xa8>
			{
				frz_up_activate_cnt++;
    4f9e:	4b4f      	ldr	r3, [pc, #316]	; (50dc <defrostStateMachine+0x1c0>)
    4fa0:	781b      	ldrb	r3, [r3, #0]
    4fa2:	3301      	adds	r3, #1
    4fa4:	b2da      	uxtb	r2, r3
    4fa6:	4b4d      	ldr	r3, [pc, #308]	; (50dc <defrostStateMachine+0x1c0>)
    4fa8:	701a      	strb	r2, [r3, #0]
				if (frz_up_activate_cnt > FRZ_UP_ACTIVATE_CNT_LIMIT)
    4faa:	4b4c      	ldr	r3, [pc, #304]	; (50dc <defrostStateMachine+0x1c0>)
    4fac:	781b      	ldrb	r3, [r3, #0]
    4fae:	2b05      	cmp	r3, #5
    4fb0:	d90b      	bls.n	4fca <defrostStateMachine+0xae>
				{
					frz_up_activate_cnt = 0;
    4fb2:	4b4a      	ldr	r3, [pc, #296]	; (50dc <defrostStateMachine+0x1c0>)
    4fb4:	2200      	movs	r2, #0
    4fb6:	701a      	strb	r2, [r3, #0]
					userTimerStart(&defrostFreezupTimer, DEFROST_FREEZEUP_TIMEOUT_IN_MINS);
    4fb8:	4b41      	ldr	r3, [pc, #260]	; (50c0 <defrostStateMachine+0x1a4>)
    4fba:	1c18      	adds	r0, r3, #0
    4fbc:	2103      	movs	r1, #3
    4fbe:	4b48      	ldr	r3, [pc, #288]	; (50e0 <defrostStateMachine+0x1c4>)
    4fc0:	4798      	blx	r3
    4fc2:	e002      	b.n	4fca <defrostStateMachine+0xae>
				}
			}
			else
			{
				frz_up_activate_cnt = 0;
    4fc4:	4b45      	ldr	r3, [pc, #276]	; (50dc <defrostStateMachine+0x1c0>)
    4fc6:	2200      	movs	r2, #0
    4fc8:	701a      	strb	r2, [r3, #0]
			}
		}
	
		// STOP ////////////////////////////////////////////////
		if (defrostIntervalTimer.timerExpired==true)
    4fca:	4b46      	ldr	r3, [pc, #280]	; (50e4 <defrostStateMachine+0x1c8>)
    4fcc:	7b5b      	ldrb	r3, [r3, #13]
    4fce:	2b00      	cmp	r3, #0
    4fd0:	d016      	beq.n	5000 <defrostStateMachine+0xe4>
		{
			setDefrostState(DEFROST_STOP);
    4fd2:	2001      	movs	r0, #1
    4fd4:	4b3c      	ldr	r3, [pc, #240]	; (50c8 <defrostStateMachine+0x1ac>)
    4fd6:	4798      	blx	r3
			//userTimerReset(&defrostIntervalTimer);
			userTimerStart(&defrostMinimumIntervalTimer, defrostFreqHrs*60);
    4fd8:	4b43      	ldr	r3, [pc, #268]	; (50e8 <defrostStateMachine+0x1cc>)
    4fda:	781b      	ldrb	r3, [r3, #0]
    4fdc:	223c      	movs	r2, #60	; 0x3c
    4fde:	4353      	muls	r3, r2
    4fe0:	b29b      	uxth	r3, r3
    4fe2:	4a35      	ldr	r2, [pc, #212]	; (50b8 <defrostStateMachine+0x19c>)
    4fe4:	1c10      	adds	r0, r2, #0
    4fe6:	1c19      	adds	r1, r3, #0
    4fe8:	4b3d      	ldr	r3, [pc, #244]	; (50e0 <defrostStateMachine+0x1c4>)
    4fea:	4798      	blx	r3
			userTimerStart(&defrostMaximumIntervalTimer, defrostFreqMaxHrs*60);
    4fec:	4b3f      	ldr	r3, [pc, #252]	; (50ec <defrostStateMachine+0x1d0>)
    4fee:	881b      	ldrh	r3, [r3, #0]
    4ff0:	223c      	movs	r2, #60	; 0x3c
    4ff2:	4353      	muls	r3, r2
    4ff4:	b29b      	uxth	r3, r3
    4ff6:	4a33      	ldr	r2, [pc, #204]	; (50c4 <defrostStateMachine+0x1a8>)
    4ff8:	1c10      	adds	r0, r2, #0
    4ffa:	1c19      	adds	r1, r3, #0
    4ffc:	4b38      	ldr	r3, [pc, #224]	; (50e0 <defrostStateMachine+0x1c4>)
    4ffe:	4798      	blx	r3
		}

		// CANCEL //////////////////////////////////////////////
		if (acceptHtxTemperature > DEFROST_DEACTIVATE_TEMPERATURE)
    5000:	4b33      	ldr	r3, [pc, #204]	; (50d0 <defrostStateMachine+0x1b4>)
    5002:	681a      	ldr	r2, [r3, #0]
    5004:	4b3a      	ldr	r3, [pc, #232]	; (50f0 <defrostStateMachine+0x1d4>)
    5006:	1c10      	adds	r0, r2, #0
    5008:	493a      	ldr	r1, [pc, #232]	; (50f4 <defrostStateMachine+0x1d8>)
    500a:	4798      	blx	r3
    500c:	1c03      	adds	r3, r0, #0
    500e:	2b00      	cmp	r3, #0
    5010:	d018      	beq.n	5044 <defrostStateMachine+0x128>
		{
			if (defrostFreezupTimer.timerActive==true)
    5012:	4b2b      	ldr	r3, [pc, #172]	; (50c0 <defrostStateMachine+0x1a4>)
    5014:	7b1b      	ldrb	r3, [r3, #12]
    5016:	2b00      	cmp	r3, #0
    5018:	d011      	beq.n	503e <defrostStateMachine+0x122>
			{
				frz_up_deactivate_cnt++;
    501a:	4b37      	ldr	r3, [pc, #220]	; (50f8 <defrostStateMachine+0x1dc>)
    501c:	781b      	ldrb	r3, [r3, #0]
    501e:	3301      	adds	r3, #1
    5020:	b2da      	uxtb	r2, r3
    5022:	4b35      	ldr	r3, [pc, #212]	; (50f8 <defrostStateMachine+0x1dc>)
    5024:	701a      	strb	r2, [r3, #0]
				if (frz_up_deactivate_cnt > FRZ_UP_DEACTIVATE_CNT_LIMIT)
    5026:	4b34      	ldr	r3, [pc, #208]	; (50f8 <defrostStateMachine+0x1dc>)
    5028:	781b      	ldrb	r3, [r3, #0]
    502a:	2b05      	cmp	r3, #5
    502c:	d90a      	bls.n	5044 <defrostStateMachine+0x128>
				{
					frz_up_deactivate_cnt = 0;
    502e:	4b32      	ldr	r3, [pc, #200]	; (50f8 <defrostStateMachine+0x1dc>)
    5030:	2200      	movs	r2, #0
    5032:	701a      	strb	r2, [r3, #0]
					userTimerReset(&defrostFreezupTimer);
    5034:	4b22      	ldr	r3, [pc, #136]	; (50c0 <defrostStateMachine+0x1a4>)
    5036:	1c18      	adds	r0, r3, #0
    5038:	4b24      	ldr	r3, [pc, #144]	; (50cc <defrostStateMachine+0x1b0>)
    503a:	4798      	blx	r3
    503c:	e002      	b.n	5044 <defrostStateMachine+0x128>
				}
			}
			else
			{
				frz_up_deactivate_cnt = 0;
    503e:	4b2e      	ldr	r3, [pc, #184]	; (50f8 <defrostStateMachine+0x1dc>)
    5040:	2200      	movs	r2, #0
    5042:	701a      	strb	r2, [r3, #0]
			}
		}
		
		if ( (controlTemperature > defrostCancelTemp) && (defrostIntervalTimer.timerActive == true) )
    5044:	4b2d      	ldr	r3, [pc, #180]	; (50fc <defrostStateMachine+0x1e0>)
    5046:	6819      	ldr	r1, [r3, #0]
    5048:	4b2d      	ldr	r3, [pc, #180]	; (5100 <defrostStateMachine+0x1e4>)
    504a:	681a      	ldr	r2, [r3, #0]
    504c:	4b28      	ldr	r3, [pc, #160]	; (50f0 <defrostStateMachine+0x1d4>)
    504e:	1c08      	adds	r0, r1, #0
    5050:	1c11      	adds	r1, r2, #0
    5052:	4798      	blx	r3
    5054:	1c03      	adds	r3, r0, #0
    5056:	2b00      	cmp	r3, #0
    5058:	d01a      	beq.n	5090 <defrostStateMachine+0x174>
    505a:	4b22      	ldr	r3, [pc, #136]	; (50e4 <defrostStateMachine+0x1c8>)
    505c:	7b1b      	ldrb	r3, [r3, #12]
    505e:	2b00      	cmp	r3, #0
    5060:	d016      	beq.n	5090 <defrostStateMachine+0x174>
		{
			setDefrostState(DEFROST_CANCEL);
    5062:	2002      	movs	r0, #2
    5064:	4b18      	ldr	r3, [pc, #96]	; (50c8 <defrostStateMachine+0x1ac>)
    5066:	4798      	blx	r3
			//userTimerReset(&defrostIntervalTimer);
			userTimerStart(&defrostMinimumIntervalTimer, defrostFreqHrs*60);
    5068:	4b1f      	ldr	r3, [pc, #124]	; (50e8 <defrostStateMachine+0x1cc>)
    506a:	781b      	ldrb	r3, [r3, #0]
    506c:	223c      	movs	r2, #60	; 0x3c
    506e:	4353      	muls	r3, r2
    5070:	b29b      	uxth	r3, r3
    5072:	4a11      	ldr	r2, [pc, #68]	; (50b8 <defrostStateMachine+0x19c>)
    5074:	1c10      	adds	r0, r2, #0
    5076:	1c19      	adds	r1, r3, #0
    5078:	4b19      	ldr	r3, [pc, #100]	; (50e0 <defrostStateMachine+0x1c4>)
    507a:	4798      	blx	r3
			userTimerStart(&defrostMaximumIntervalTimer, defrostFreqMaxHrs*60);
    507c:	4b1b      	ldr	r3, [pc, #108]	; (50ec <defrostStateMachine+0x1d0>)
    507e:	881b      	ldrh	r3, [r3, #0]
    5080:	223c      	movs	r2, #60	; 0x3c
    5082:	4353      	muls	r3, r2
    5084:	b29b      	uxth	r3, r3
    5086:	4a0f      	ldr	r2, [pc, #60]	; (50c4 <defrostStateMachine+0x1a8>)
    5088:	1c10      	adds	r0, r2, #0
    508a:	1c19      	adds	r1, r3, #0
    508c:	4b14      	ldr	r3, [pc, #80]	; (50e0 <defrostStateMachine+0x1c4>)
    508e:	4798      	blx	r3
		}
				
		// CALCULATE TIME /////////////////////////////////////
		userTimerUpdateStatus(&defrostFreezupTimer);
    5090:	4b0b      	ldr	r3, [pc, #44]	; (50c0 <defrostStateMachine+0x1a4>)
    5092:	1c18      	adds	r0, r3, #0
    5094:	4b1b      	ldr	r3, [pc, #108]	; (5104 <defrostStateMachine+0x1e8>)
    5096:	4798      	blx	r3
		userTimerUpdateStatus(&defrostMinimumIntervalTimer);
    5098:	4b07      	ldr	r3, [pc, #28]	; (50b8 <defrostStateMachine+0x19c>)
    509a:	1c18      	adds	r0, r3, #0
    509c:	4b19      	ldr	r3, [pc, #100]	; (5104 <defrostStateMachine+0x1e8>)
    509e:	4798      	blx	r3
		userTimerUpdateStatus(&defrostMaximumIntervalTimer);
    50a0:	4b08      	ldr	r3, [pc, #32]	; (50c4 <defrostStateMachine+0x1a8>)
    50a2:	1c18      	adds	r0, r3, #0
    50a4:	4b17      	ldr	r3, [pc, #92]	; (5104 <defrostStateMachine+0x1e8>)
    50a6:	4798      	blx	r3
		userTimerUpdateStatus(&defrostIntervalTimer);
    50a8:	4b0e      	ldr	r3, [pc, #56]	; (50e4 <defrostStateMachine+0x1c8>)
    50aa:	1c18      	adds	r0, r3, #0
    50ac:	4b15      	ldr	r3, [pc, #84]	; (5104 <defrostStateMachine+0x1e8>)
    50ae:	4798      	blx	r3
		#endif
	}
}
    50b0:	46bd      	mov	sp, r7
    50b2:	bd80      	pop	{r7, pc}
    50b4:	20000038 	.word	0x20000038
    50b8:	200007d8 	.word	0x200007d8
    50bc:	20000377 	.word	0x20000377
    50c0:	200007f8 	.word	0x200007f8
    50c4:	20000810 	.word	0x20000810
    50c8:	00004dc5 	.word	0x00004dc5
    50cc:	0000f2b5 	.word	0x0000f2b5
    50d0:	20000368 	.word	0x20000368
    50d4:	0001f62d 	.word	0x0001f62d
    50d8:	c0a00000 	.word	0xc0a00000
    50dc:	200002b8 	.word	0x200002b8
    50e0:	0000f211 	.word	0x0000f211
    50e4:	20000824 	.word	0x20000824
    50e8:	20000910 	.word	0x20000910
    50ec:	20000dbc 	.word	0x20000dbc
    50f0:	0001f655 	.word	0x0001f655
    50f4:	40a00000 	.word	0x40a00000
    50f8:	200002b9 	.word	0x200002b9
    50fc:	20000188 	.word	0x20000188
    5100:	2000080c 	.word	0x2000080c
    5104:	0000f269 	.word	0x0000f269

00005108 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
    5108:	b580      	push	{r7, lr}
    510a:	af00      	add	r7, sp, #0
	return test_case_ptr;
    510c:	4b02      	ldr	r3, [pc, #8]	; (5118 <test_get_case+0x10>)
    510e:	681b      	ldr	r3, [r3, #0]
}
    5110:	1c18      	adds	r0, r3, #0
    5112:	46bd      	mov	sp, r7
    5114:	bd80      	pop	{r7, pc}
    5116:	46c0      	nop			; (mov r8, r8)
    5118:	2000041c 	.word	0x2000041c

0000511c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    511c:	b590      	push	{r4, r7, lr}
    511e:	b087      	sub	sp, #28
    5120:	af02      	add	r7, sp, #8
    5122:	1c02      	adds	r2, r0, #0
    5124:	1dfb      	adds	r3, r7, #7
    5126:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    5128:	1c3b      	adds	r3, r7, #0
    512a:	330f      	adds	r3, #15
    512c:	1dfa      	adds	r2, r7, #7
    512e:	7812      	ldrb	r2, [r2, #0]
    5130:	09d2      	lsrs	r2, r2, #7
    5132:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    5134:	1c3b      	adds	r3, r7, #0
    5136:	330e      	adds	r3, #14
    5138:	1dfa      	adds	r2, r7, #7
    513a:	7812      	ldrb	r2, [r2, #0]
    513c:	0952      	lsrs	r2, r2, #5
    513e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    5140:	4b1b      	ldr	r3, [pc, #108]	; (51b0 <system_pinmux_get_group_from_gpio_pin+0x94>)
    5142:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    5144:	1c3b      	adds	r3, r7, #0
    5146:	330f      	adds	r3, #15
    5148:	781b      	ldrb	r3, [r3, #0]
    514a:	2b00      	cmp	r3, #0
    514c:	d10e      	bne.n	516c <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    514e:	1c3b      	adds	r3, r7, #0
    5150:	330f      	adds	r3, #15
    5152:	781b      	ldrb	r3, [r3, #0]
    5154:	009b      	lsls	r3, r3, #2
    5156:	2210      	movs	r2, #16
    5158:	19d2      	adds	r2, r2, r7
    515a:	18d3      	adds	r3, r2, r3
    515c:	3b08      	subs	r3, #8
    515e:	681a      	ldr	r2, [r3, #0]
    5160:	1c3b      	adds	r3, r7, #0
    5162:	330e      	adds	r3, #14
    5164:	781b      	ldrb	r3, [r3, #0]
    5166:	01db      	lsls	r3, r3, #7
    5168:	18d3      	adds	r3, r2, r3
    516a:	e01c      	b.n	51a6 <system_pinmux_get_group_from_gpio_pin+0x8a>
	} else {
		Assert(false);
    516c:	4b11      	ldr	r3, [pc, #68]	; (51b4 <system_pinmux_get_group_from_gpio_pin+0x98>)
    516e:	4798      	blx	r3
    5170:	1c03      	adds	r3, r0, #0
    5172:	2b00      	cmp	r3, #0
    5174:	d00f      	beq.n	5196 <system_pinmux_get_group_from_gpio_pin+0x7a>
    5176:	4b0f      	ldr	r3, [pc, #60]	; (51b4 <system_pinmux_get_group_from_gpio_pin+0x98>)
    5178:	4798      	blx	r3
    517a:	1c01      	adds	r1, r0, #0
    517c:	4a0e      	ldr	r2, [pc, #56]	; (51b8 <system_pinmux_get_group_from_gpio_pin+0x9c>)
    517e:	2368      	movs	r3, #104	; 0x68
    5180:	33ff      	adds	r3, #255	; 0xff
    5182:	480e      	ldr	r0, [pc, #56]	; (51bc <system_pinmux_get_group_from_gpio_pin+0xa0>)
    5184:	9000      	str	r0, [sp, #0]
    5186:	480e      	ldr	r0, [pc, #56]	; (51c0 <system_pinmux_get_group_from_gpio_pin+0xa4>)
    5188:	9001      	str	r0, [sp, #4]
    518a:	1c08      	adds	r0, r1, #0
    518c:	2101      	movs	r1, #1
    518e:	4c0d      	ldr	r4, [pc, #52]	; (51c4 <system_pinmux_get_group_from_gpio_pin+0xa8>)
    5190:	47a0      	blx	r4
		return NULL;
    5192:	2300      	movs	r3, #0
    5194:	e007      	b.n	51a6 <system_pinmux_get_group_from_gpio_pin+0x8a>
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
    5196:	480c      	ldr	r0, [pc, #48]	; (51c8 <system_pinmux_get_group_from_gpio_pin+0xac>)
    5198:	4909      	ldr	r1, [pc, #36]	; (51c0 <system_pinmux_get_group_from_gpio_pin+0xa4>)
    519a:	4a07      	ldr	r2, [pc, #28]	; (51b8 <system_pinmux_get_group_from_gpio_pin+0x9c>)
    519c:	2368      	movs	r3, #104	; 0x68
    519e:	33ff      	adds	r3, #255	; 0xff
    51a0:	4c0a      	ldr	r4, [pc, #40]	; (51cc <system_pinmux_get_group_from_gpio_pin+0xb0>)
    51a2:	47a0      	blx	r4
    51a4:	e7fe      	b.n	51a4 <system_pinmux_get_group_from_gpio_pin+0x88>
		return NULL;
	}
}
    51a6:	1c18      	adds	r0, r3, #0
    51a8:	46bd      	mov	sp, r7
    51aa:	b005      	add	sp, #20
    51ac:	bd90      	pop	{r4, r7, pc}
    51ae:	46c0      	nop			; (mov r8, r8)
    51b0:	41004400 	.word	0x41004400
    51b4:	00005109 	.word	0x00005109
    51b8:	0002453c 	.word	0x0002453c
    51bc:	0002456c 	.word	0x0002456c
    51c0:	00024584 	.word	0x00024584
    51c4:	000106e9 	.word	0x000106e9
    51c8:	0002458c 	.word	0x0002458c
    51cc:	0001b62d 	.word	0x0001b62d

000051d0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    51d0:	b580      	push	{r7, lr}
    51d2:	b082      	sub	sp, #8
    51d4:	af00      	add	r7, sp, #0
    51d6:	1c02      	adds	r2, r0, #0
    51d8:	1dfb      	adds	r3, r7, #7
    51da:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    51dc:	1dfb      	adds	r3, r7, #7
    51de:	781b      	ldrb	r3, [r3, #0]
    51e0:	1c18      	adds	r0, r3, #0
    51e2:	4b03      	ldr	r3, [pc, #12]	; (51f0 <port_get_group_from_gpio_pin+0x20>)
    51e4:	4798      	blx	r3
    51e6:	1c03      	adds	r3, r0, #0
}
    51e8:	1c18      	adds	r0, r3, #0
    51ea:	46bd      	mov	sp, r7
    51ec:	b002      	add	sp, #8
    51ee:	bd80      	pop	{r7, pc}
    51f0:	0000511d 	.word	0x0000511d

000051f4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    51f4:	b580      	push	{r7, lr}
    51f6:	b084      	sub	sp, #16
    51f8:	af00      	add	r7, sp, #0
    51fa:	1c0a      	adds	r2, r1, #0
    51fc:	1dfb      	adds	r3, r7, #7
    51fe:	1c01      	adds	r1, r0, #0
    5200:	7019      	strb	r1, [r3, #0]
    5202:	1dbb      	adds	r3, r7, #6
    5204:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    5206:	1dfb      	adds	r3, r7, #7
    5208:	781b      	ldrb	r3, [r3, #0]
    520a:	1c18      	adds	r0, r3, #0
    520c:	4b0d      	ldr	r3, [pc, #52]	; (5244 <port_pin_set_output_level+0x50>)
    520e:	4798      	blx	r3
    5210:	1c03      	adds	r3, r0, #0
    5212:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5214:	1dfb      	adds	r3, r7, #7
    5216:	781a      	ldrb	r2, [r3, #0]
    5218:	231f      	movs	r3, #31
    521a:	4013      	ands	r3, r2
    521c:	2201      	movs	r2, #1
    521e:	1c11      	adds	r1, r2, #0
    5220:	4099      	lsls	r1, r3
    5222:	1c0b      	adds	r3, r1, #0
    5224:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    5226:	1dbb      	adds	r3, r7, #6
    5228:	781b      	ldrb	r3, [r3, #0]
    522a:	2b00      	cmp	r3, #0
    522c:	d003      	beq.n	5236 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    522e:	68fb      	ldr	r3, [r7, #12]
    5230:	68ba      	ldr	r2, [r7, #8]
    5232:	619a      	str	r2, [r3, #24]
    5234:	e002      	b.n	523c <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    5236:	68fb      	ldr	r3, [r7, #12]
    5238:	68ba      	ldr	r2, [r7, #8]
    523a:	615a      	str	r2, [r3, #20]
	}
}
    523c:	46bd      	mov	sp, r7
    523e:	b004      	add	sp, #16
    5240:	bd80      	pop	{r7, pc}
    5242:	46c0      	nop			; (mov r8, r8)
    5244:	000051d1 	.word	0x000051d1

00005248 <port_pin_set_output_level_EX>:
	float (*fControl[32])(float, bool, int);
	
	static inline bool port_pin_set_output_level_EX(
	const uint8_t gpio_pin,
	const int nLevel, const bool ManualOverride)
	{
    5248:	b580      	push	{r7, lr}
    524a:	b084      	sub	sp, #16
    524c:	af00      	add	r7, sp, #0
    524e:	6039      	str	r1, [r7, #0]
    5250:	1dfb      	adds	r3, r7, #7
    5252:	1c01      	adds	r1, r0, #0
    5254:	7019      	strb	r1, [r3, #0]
    5256:	1dbb      	adds	r3, r7, #6
    5258:	701a      	strb	r2, [r3, #0]
			  break;
		  }
*/			
		}
	
		if (!ManualOverride)
    525a:	1dbb      	adds	r3, r7, #6
    525c:	781b      	ldrb	r3, [r3, #0]
    525e:	2201      	movs	r2, #1
    5260:	4053      	eors	r3, r2
    5262:	b2db      	uxtb	r3, r3
    5264:	2b00      	cmp	r3, #0
    5266:	d00e      	beq.n	5286 <port_pin_set_output_level_EX+0x3e>
		{
		  bool bLevel = (nLevel != 0);
    5268:	1c3b      	adds	r3, r7, #0
    526a:	330f      	adds	r3, #15
    526c:	683a      	ldr	r2, [r7, #0]
    526e:	1e51      	subs	r1, r2, #1
    5270:	418a      	sbcs	r2, r1
    5272:	701a      	strb	r2, [r3, #0]
		  port_pin_set_output_level(gpio_pin, bLevel);
    5274:	1dfb      	adds	r3, r7, #7
    5276:	781a      	ldrb	r2, [r3, #0]
    5278:	1c3b      	adds	r3, r7, #0
    527a:	330f      	adds	r3, #15
    527c:	781b      	ldrb	r3, [r3, #0]
    527e:	1c10      	adds	r0, r2, #0
    5280:	1c19      	adds	r1, r3, #0
    5282:	4b03      	ldr	r3, [pc, #12]	; (5290 <port_pin_set_output_level_EX+0x48>)
    5284:	4798      	blx	r3
		}
		
		return true;
    5286:	2301      	movs	r3, #1
	}
    5288:	1c18      	adds	r0, r3, #0
    528a:	46bd      	mov	sp, r7
    528c:	b004      	add	sp, #16
    528e:	bd80      	pop	{r7, pc}
    5290:	000051f5 	.word	0x000051f5

00005294 <i2cWrite_emc2305>:
/************************************************************************/
/* Functions                                                            */
/************************************************************************/

uint8_t i2cWrite_emc2305(uint8_t numBytes, uint8_t fan_chip)
{
    5294:	b580      	push	{r7, lr}
    5296:	b086      	sub	sp, #24
    5298:	af00      	add	r7, sp, #0
    529a:	1c0a      	adds	r2, r1, #0
    529c:	1dfb      	adds	r3, r7, #7
    529e:	1c01      	adds	r1, r0, #0
    52a0:	7019      	strb	r1, [r3, #0]
    52a2:	1dbb      	adds	r3, r7, #6
    52a4:	701a      	strb	r2, [r3, #0]
	uint8_t error = 0;
    52a6:	1c3b      	adds	r3, r7, #0
    52a8:	3317      	adds	r3, #23
    52aa:	2200      	movs	r2, #0
    52ac:	701a      	strb	r2, [r3, #0]

	// build packet to send
	uint16_t timeout = 0;
    52ae:	1c3b      	adds	r3, r7, #0
    52b0:	3314      	adds	r3, #20
    52b2:	2200      	movs	r2, #0
    52b4:	801a      	strh	r2, [r3, #0]
	struct i2c_packet packet = {
    52b6:	1c3b      	adds	r3, r7, #0
    52b8:	330c      	adds	r3, #12
    52ba:	222c      	movs	r2, #44	; 0x2c
    52bc:	701a      	strb	r2, [r3, #0]
    52be:	1dfb      	adds	r3, r7, #7
    52c0:	781b      	ldrb	r3, [r3, #0]
    52c2:	b29a      	uxth	r2, r3
    52c4:	1c3b      	adds	r3, r7, #0
    52c6:	330c      	adds	r3, #12
    52c8:	805a      	strh	r2, [r3, #2]
    52ca:	1c3b      	adds	r3, r7, #0
    52cc:	330c      	adds	r3, #12
    52ce:	4a15      	ldr	r2, [pc, #84]	; (5324 <i2cWrite_emc2305+0x90>)
    52d0:	605a      	str	r2, [r3, #4]
		.address = F_SLAVE_ADDRESS,
		.data_length = numBytes,
		.data = i2c_txdat,
	};
	
	if (fan_chip == FAN_CHIP2)
    52d2:	1dbb      	adds	r3, r7, #6
    52d4:	781b      	ldrb	r3, [r3, #0]
    52d6:	2b02      	cmp	r3, #2
    52d8:	d104      	bne.n	52e4 <i2cWrite_emc2305+0x50>
	{
		packet.address = F_SLAVE_ADDRESS_2;
    52da:	1c3b      	adds	r3, r7, #0
    52dc:	330c      	adds	r3, #12
    52de:	222f      	movs	r2, #47	; 0x2f
    52e0:	701a      	strb	r2, [r3, #0]
	}
	
	// send byte to set internal register address
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) != STATUS_OK) {
    52e2:	e00e      	b.n	5302 <i2cWrite_emc2305+0x6e>
    52e4:	e00d      	b.n	5302 <i2cWrite_emc2305+0x6e>
		if (timeout++ == F_I2C_COMM_TIMEOUT) {
    52e6:	1c3b      	adds	r3, r7, #0
    52e8:	3314      	adds	r3, #20
    52ea:	881b      	ldrh	r3, [r3, #0]
    52ec:	1c3a      	adds	r2, r7, #0
    52ee:	3214      	adds	r2, #20
    52f0:	1c59      	adds	r1, r3, #1
    52f2:	8011      	strh	r1, [r2, #0]
    52f4:	2b0a      	cmp	r3, #10
    52f6:	d104      	bne.n	5302 <i2cWrite_emc2305+0x6e>
			error = 1;
    52f8:	1c3b      	adds	r3, r7, #0
    52fa:	3317      	adds	r3, #23
    52fc:	2201      	movs	r2, #1
    52fe:	701a      	strb	r2, [r3, #0]
			break;
    5300:	e009      	b.n	5316 <i2cWrite_emc2305+0x82>
	{
		packet.address = F_SLAVE_ADDRESS_2;
	}
	
	// send byte to set internal register address
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) != STATUS_OK) {
    5302:	4a09      	ldr	r2, [pc, #36]	; (5328 <i2cWrite_emc2305+0x94>)
    5304:	1c3b      	adds	r3, r7, #0
    5306:	330c      	adds	r3, #12
    5308:	1c10      	adds	r0, r2, #0
    530a:	1c19      	adds	r1, r3, #0
    530c:	4b07      	ldr	r3, [pc, #28]	; (532c <i2cWrite_emc2305+0x98>)
    530e:	4798      	blx	r3
    5310:	1c03      	adds	r3, r0, #0
    5312:	2b00      	cmp	r3, #0
    5314:	d1e7      	bne.n	52e6 <i2cWrite_emc2305+0x52>
			break;
		}
	}
	
	// exit
	return error;
    5316:	1c3b      	adds	r3, r7, #0
    5318:	3317      	adds	r3, #23
    531a:	781b      	ldrb	r3, [r3, #0]
}
    531c:	1c18      	adds	r0, r3, #0
    531e:	46bd      	mov	sp, r7
    5320:	b006      	add	sp, #24
    5322:	bd80      	pop	{r7, pc}
    5324:	20000040 	.word	0x20000040
    5328:	20000840 	.word	0x20000840
    532c:	00013d09 	.word	0x00013d09

00005330 <i2cWriteRead_emc2305>:

uint8_t i2cWriteRead_emc2305(uint8_t numBytes, uint8_t fan_chip)
{
    5330:	b580      	push	{r7, lr}
    5332:	b086      	sub	sp, #24
    5334:	af00      	add	r7, sp, #0
    5336:	1c0a      	adds	r2, r1, #0
    5338:	1dfb      	adds	r3, r7, #7
    533a:	1c01      	adds	r1, r0, #0
    533c:	7019      	strb	r1, [r3, #0]
    533e:	1dbb      	adds	r3, r7, #6
    5340:	701a      	strb	r2, [r3, #0]
	uint8_t error = 0;
    5342:	1c3b      	adds	r3, r7, #0
    5344:	3317      	adds	r3, #23
    5346:	2200      	movs	r2, #0
    5348:	701a      	strb	r2, [r3, #0]
	
	// build packet to send
	uint16_t timeout = 0;
    534a:	1c3b      	adds	r3, r7, #0
    534c:	3314      	adds	r3, #20
    534e:	2200      	movs	r2, #0
    5350:	801a      	strh	r2, [r3, #0]
	struct i2c_packet packet = {
    5352:	1c3b      	adds	r3, r7, #0
    5354:	330c      	adds	r3, #12
    5356:	222c      	movs	r2, #44	; 0x2c
    5358:	701a      	strb	r2, [r3, #0]
    535a:	1dfb      	adds	r3, r7, #7
    535c:	781b      	ldrb	r3, [r3, #0]
    535e:	b29a      	uxth	r2, r3
    5360:	1c3b      	adds	r3, r7, #0
    5362:	330c      	adds	r3, #12
    5364:	805a      	strh	r2, [r3, #2]
    5366:	1c3b      	adds	r3, r7, #0
    5368:	330c      	adds	r3, #12
    536a:	4a26      	ldr	r2, [pc, #152]	; (5404 <i2cWriteRead_emc2305+0xd4>)
    536c:	605a      	str	r2, [r3, #4]
		.address = F_SLAVE_ADDRESS,
		.data_length = numBytes,
		.data = i2c_txdat,
	};

	if (fan_chip == FAN_CHIP2)
    536e:	1dbb      	adds	r3, r7, #6
    5370:	781b      	ldrb	r3, [r3, #0]
    5372:	2b02      	cmp	r3, #2
    5374:	d104      	bne.n	5380 <i2cWriteRead_emc2305+0x50>
	{
		packet.address = F_SLAVE_ADDRESS_2;
    5376:	1c3b      	adds	r3, r7, #0
    5378:	330c      	adds	r3, #12
    537a:	222f      	movs	r2, #47	; 0x2f
    537c:	701a      	strb	r2, [r3, #0]
	}
	
	// send byte to set internal register address
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) != STATUS_OK) {
    537e:	e00e      	b.n	539e <i2cWriteRead_emc2305+0x6e>
    5380:	e00d      	b.n	539e <i2cWriteRead_emc2305+0x6e>
		if (timeout++ == F_I2C_COMM_TIMEOUT) {
    5382:	1c3b      	adds	r3, r7, #0
    5384:	3314      	adds	r3, #20
    5386:	881b      	ldrh	r3, [r3, #0]
    5388:	1c3a      	adds	r2, r7, #0
    538a:	3214      	adds	r2, #20
    538c:	1c59      	adds	r1, r3, #1
    538e:	8011      	strh	r1, [r2, #0]
    5390:	2b0a      	cmp	r3, #10
    5392:	d104      	bne.n	539e <i2cWriteRead_emc2305+0x6e>
			error = 1;
    5394:	1c3b      	adds	r3, r7, #0
    5396:	3317      	adds	r3, #23
    5398:	2201      	movs	r2, #1
    539a:	701a      	strb	r2, [r3, #0]
			break;
    539c:	e009      	b.n	53b2 <i2cWriteRead_emc2305+0x82>
	{
		packet.address = F_SLAVE_ADDRESS_2;
	}
	
	// send byte to set internal register address
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) != STATUS_OK) {
    539e:	4a1a      	ldr	r2, [pc, #104]	; (5408 <i2cWriteRead_emc2305+0xd8>)
    53a0:	1c3b      	adds	r3, r7, #0
    53a2:	330c      	adds	r3, #12
    53a4:	1c10      	adds	r0, r2, #0
    53a6:	1c19      	adds	r1, r3, #0
    53a8:	4b18      	ldr	r3, [pc, #96]	; (540c <i2cWriteRead_emc2305+0xdc>)
    53aa:	4798      	blx	r3
    53ac:	1c03      	adds	r3, r0, #0
    53ae:	2b00      	cmp	r3, #0
    53b0:	d1e7      	bne.n	5382 <i2cWriteRead_emc2305+0x52>
			break;
		}
	}

	// read register if no prior write error
	if (!error)
    53b2:	1c3b      	adds	r3, r7, #0
    53b4:	3317      	adds	r3, #23
    53b6:	781b      	ldrb	r3, [r3, #0]
    53b8:	2b00      	cmp	r3, #0
    53ba:	d11c      	bne.n	53f6 <i2cWriteRead_emc2305+0xc6>
	{
		timeout=0;
    53bc:	1c3b      	adds	r3, r7, #0
    53be:	3314      	adds	r3, #20
    53c0:	2200      	movs	r2, #0
    53c2:	801a      	strh	r2, [r3, #0]
		packet.data = i2c_rxdat;
    53c4:	1c3b      	adds	r3, r7, #0
    53c6:	330c      	adds	r3, #12
    53c8:	4a11      	ldr	r2, [pc, #68]	; (5410 <i2cWriteRead_emc2305+0xe0>)
    53ca:	605a      	str	r2, [r3, #4]
		while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) != STATUS_OK) {
    53cc:	e009      	b.n	53e2 <i2cWriteRead_emc2305+0xb2>
			if (timeout++ == F_I2C_COMM_TIMEOUT) {
    53ce:	1c3b      	adds	r3, r7, #0
    53d0:	3314      	adds	r3, #20
    53d2:	881b      	ldrh	r3, [r3, #0]
    53d4:	1c3a      	adds	r2, r7, #0
    53d6:	3214      	adds	r2, #20
    53d8:	1c59      	adds	r1, r3, #1
    53da:	8011      	strh	r1, [r2, #0]
    53dc:	2b0a      	cmp	r3, #10
    53de:	d100      	bne.n	53e2 <i2cWriteRead_emc2305+0xb2>
				break;
    53e0:	e009      	b.n	53f6 <i2cWriteRead_emc2305+0xc6>
	// read register if no prior write error
	if (!error)
	{
		timeout=0;
		packet.data = i2c_rxdat;
		while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) != STATUS_OK) {
    53e2:	4a09      	ldr	r2, [pc, #36]	; (5408 <i2cWriteRead_emc2305+0xd8>)
    53e4:	1c3b      	adds	r3, r7, #0
    53e6:	330c      	adds	r3, #12
    53e8:	1c10      	adds	r0, r2, #0
    53ea:	1c19      	adds	r1, r3, #0
    53ec:	4b09      	ldr	r3, [pc, #36]	; (5414 <i2cWriteRead_emc2305+0xe4>)
    53ee:	4798      	blx	r3
    53f0:	1c03      	adds	r3, r0, #0
    53f2:	2b00      	cmp	r3, #0
    53f4:	d1eb      	bne.n	53ce <i2cWriteRead_emc2305+0x9e>
	}
	
	// *** ADD CHECK OF DATA AGAINST WHAT WAS SENT !!!!! *** //
	
	// exit
	return error;
    53f6:	1c3b      	adds	r3, r7, #0
    53f8:	3317      	adds	r3, #23
    53fa:	781b      	ldrb	r3, [r3, #0]
}
    53fc:	1c18      	adds	r0, r3, #0
    53fe:	46bd      	mov	sp, r7
    5400:	b006      	add	sp, #24
    5402:	bd80      	pop	{r7, pc}
    5404:	20000040 	.word	0x20000040
    5408:	20000840 	.word	0x20000840
    540c:	00013d09 	.word	0x00013d09
    5410:	200002e8 	.word	0x200002e8
    5414:	00013ac9 	.word	0x00013ac9

00005418 <fanEmc2305Init>:

uint16_t fanEmc2305Init(uint8_t fan_chip)
{
    5418:	b580      	push	{r7, lr}
    541a:	b082      	sub	sp, #8
    541c:	af00      	add	r7, sp, #0
    541e:	1c02      	adds	r2, r0, #0
    5420:	1dfb      	adds	r3, r7, #7
    5422:	701a      	strb	r2, [r3, #0]
	if (fan_chip == FAN_CHIP1)
    5424:	1dfb      	adds	r3, r7, #7
    5426:	781b      	ldrb	r3, [r3, #0]
    5428:	2b01      	cmp	r3, #1
    542a:	d000      	beq.n	542e <fanEmc2305Init+0x16>
    542c:	e106      	b.n	563c <fanEmc2305Init+0x224>
	{		
		// 'wake-up' emc2305 fan controller by writing twice
		i2c_txdat[0] = 0x00;
    542e:	4bca      	ldr	r3, [pc, #808]	; (5758 <fanEmc2305Init+0x340>)
    5430:	2200      	movs	r2, #0
    5432:	701a      	strb	r2, [r3, #0]
		i2cWrite_emc2305(1, FAN_CHIP1);
    5434:	2001      	movs	r0, #1
    5436:	2101      	movs	r1, #1
    5438:	4bc8      	ldr	r3, [pc, #800]	; (575c <fanEmc2305Init+0x344>)
    543a:	4798      	blx	r3
		if (i2cWrite_emc2305(1, FAN_CHIP1) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    543c:	2001      	movs	r0, #1
    543e:	2101      	movs	r1, #1
    5440:	4bc6      	ldr	r3, [pc, #792]	; (575c <fanEmc2305Init+0x344>)
    5442:	4798      	blx	r3
    5444:	1c03      	adds	r3, r0, #0
    5446:	2b00      	cmp	r3, #0
    5448:	d001      	beq.n	544e <fanEmc2305Init+0x36>
    544a:	2320      	movs	r3, #32
    544c:	e213      	b.n	5876 <fanEmc2305Init+0x45e>

		// read fan configs
		if (fanReadConfig_emc2305(&fan1) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    544e:	4bc4      	ldr	r3, [pc, #784]	; (5760 <fanEmc2305Init+0x348>)
    5450:	1c18      	adds	r0, r3, #0
    5452:	4bc4      	ldr	r3, [pc, #784]	; (5764 <fanEmc2305Init+0x34c>)
    5454:	4798      	blx	r3
    5456:	1c03      	adds	r3, r0, #0
    5458:	2b00      	cmp	r3, #0
    545a:	d001      	beq.n	5460 <fanEmc2305Init+0x48>
    545c:	2320      	movs	r3, #32
    545e:	e20a      	b.n	5876 <fanEmc2305Init+0x45e>
		if (fanReadConfig_emc2305(&fan2) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    5460:	4bc1      	ldr	r3, [pc, #772]	; (5768 <fanEmc2305Init+0x350>)
    5462:	1c18      	adds	r0, r3, #0
    5464:	4bbf      	ldr	r3, [pc, #764]	; (5764 <fanEmc2305Init+0x34c>)
    5466:	4798      	blx	r3
    5468:	1c03      	adds	r3, r0, #0
    546a:	2b00      	cmp	r3, #0
    546c:	d001      	beq.n	5472 <fanEmc2305Init+0x5a>
    546e:	2320      	movs	r3, #32
    5470:	e201      	b.n	5876 <fanEmc2305Init+0x45e>
		if (fanReadConfig_emc2305(&fan3) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    5472:	4bbe      	ldr	r3, [pc, #760]	; (576c <fanEmc2305Init+0x354>)
    5474:	1c18      	adds	r0, r3, #0
    5476:	4bbb      	ldr	r3, [pc, #748]	; (5764 <fanEmc2305Init+0x34c>)
    5478:	4798      	blx	r3
    547a:	1c03      	adds	r3, r0, #0
    547c:	2b00      	cmp	r3, #0
    547e:	d001      	beq.n	5484 <fanEmc2305Init+0x6c>
    5480:	2320      	movs	r3, #32
    5482:	e1f8      	b.n	5876 <fanEmc2305Init+0x45e>
		if (fanReadConfig_emc2305(&fan4) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    5484:	4bba      	ldr	r3, [pc, #744]	; (5770 <fanEmc2305Init+0x358>)
    5486:	1c18      	adds	r0, r3, #0
    5488:	4bb6      	ldr	r3, [pc, #728]	; (5764 <fanEmc2305Init+0x34c>)
    548a:	4798      	blx	r3
    548c:	1c03      	adds	r3, r0, #0
    548e:	2b00      	cmp	r3, #0
    5490:	d001      	beq.n	5496 <fanEmc2305Init+0x7e>
    5492:	2320      	movs	r3, #32
    5494:	e1ef      	b.n	5876 <fanEmc2305Init+0x45e>

		// invert pwm output polarity
		i2c_txdat[0] = 0x2a;
    5496:	4bb0      	ldr	r3, [pc, #704]	; (5758 <fanEmc2305Init+0x340>)
    5498:	222a      	movs	r2, #42	; 0x2a
    549a:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x09;
    549c:	4bae      	ldr	r3, [pc, #696]	; (5758 <fanEmc2305Init+0x340>)
    549e:	2209      	movs	r2, #9
    54a0:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP1) != STATUS_OK)  { return ERROR_FAN_CONTROLLER; }
    54a2:	2002      	movs	r0, #2
    54a4:	2101      	movs	r1, #1
    54a6:	4bad      	ldr	r3, [pc, #692]	; (575c <fanEmc2305Init+0x344>)
    54a8:	4798      	blx	r3
    54aa:	1c03      	adds	r3, r0, #0
    54ac:	2b00      	cmp	r3, #0
    54ae:	d001      	beq.n	54b4 <fanEmc2305Init+0x9c>
    54b0:	2320      	movs	r3, #32
    54b2:	e1e0      	b.n	5876 <fanEmc2305Init+0x45e>
	
		// push-pull pwm outputs
		i2c_txdat[0] = 0x2b;
    54b4:	4ba8      	ldr	r3, [pc, #672]	; (5758 <fanEmc2305Init+0x340>)
    54b6:	222b      	movs	r2, #43	; 0x2b
    54b8:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x0f;
    54ba:	4ba7      	ldr	r3, [pc, #668]	; (5758 <fanEmc2305Init+0x340>)
    54bc:	220f      	movs	r2, #15
    54be:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP1) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    54c0:	2002      	movs	r0, #2
    54c2:	2101      	movs	r1, #1
    54c4:	4ba5      	ldr	r3, [pc, #660]	; (575c <fanEmc2305Init+0x344>)
    54c6:	4798      	blx	r3
    54c8:	1c03      	adds	r3, r0, #0
    54ca:	2b00      	cmp	r3, #0
    54cc:	d001      	beq.n	54d2 <fanEmc2305Init+0xba>
    54ce:	2320      	movs	r3, #32
    54d0:	e1d1      	b.n	5876 <fanEmc2305Init+0x45e>
	
		//////////////////////////////////
		
		// fast pwm freq of ps fan1
		i2c_txdat[0] = 0x31;
    54d2:	4ba1      	ldr	r3, [pc, #644]	; (5758 <fanEmc2305Init+0x340>)
    54d4:	2231      	movs	r2, #49	; 0x31
    54d6:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x08; // 0x80;
    54d8:	4b9f      	ldr	r3, [pc, #636]	; (5758 <fanEmc2305Init+0x340>)
    54da:	2208      	movs	r2, #8
    54dc:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP1) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    54de:	2002      	movs	r0, #2
    54e0:	2101      	movs	r1, #1
    54e2:	4b9e      	ldr	r3, [pc, #632]	; (575c <fanEmc2305Init+0x344>)
    54e4:	4798      	blx	r3
    54e6:	1c03      	adds	r3, r0, #0
    54e8:	2b00      	cmp	r3, #0
    54ea:	d001      	beq.n	54f0 <fanEmc2305Init+0xd8>
    54ec:	2320      	movs	r3, #32
    54ee:	e1c2      	b.n	5876 <fanEmc2305Init+0x45e>

		// slow pwm freq of ps fan2
		i2c_txdat[0] = 0x41;
    54f0:	4b99      	ldr	r3, [pc, #612]	; (5758 <fanEmc2305Init+0x340>)
    54f2:	2241      	movs	r2, #65	; 0x41
    54f4:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x80;
    54f6:	4b98      	ldr	r3, [pc, #608]	; (5758 <fanEmc2305Init+0x340>)
    54f8:	2280      	movs	r2, #128	; 0x80
    54fa:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP1) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    54fc:	2002      	movs	r0, #2
    54fe:	2101      	movs	r1, #1
    5500:	4b96      	ldr	r3, [pc, #600]	; (575c <fanEmc2305Init+0x344>)
    5502:	4798      	blx	r3
    5504:	1c03      	adds	r3, r0, #0
    5506:	2b00      	cmp	r3, #0
    5508:	d001      	beq.n	550e <fanEmc2305Init+0xf6>
    550a:	2320      	movs	r3, #32
    550c:	e1b3      	b.n	5876 <fanEmc2305Init+0x45e>

		// slow pwm freq of ps fan3
		i2c_txdat[0] = 0x51;
    550e:	4b92      	ldr	r3, [pc, #584]	; (5758 <fanEmc2305Init+0x340>)
    5510:	2251      	movs	r2, #81	; 0x51
    5512:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x80;
    5514:	4b90      	ldr	r3, [pc, #576]	; (5758 <fanEmc2305Init+0x340>)
    5516:	2280      	movs	r2, #128	; 0x80
    5518:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP1) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    551a:	2002      	movs	r0, #2
    551c:	2101      	movs	r1, #1
    551e:	4b8f      	ldr	r3, [pc, #572]	; (575c <fanEmc2305Init+0x344>)
    5520:	4798      	blx	r3
    5522:	1c03      	adds	r3, r0, #0
    5524:	2b00      	cmp	r3, #0
    5526:	d001      	beq.n	552c <fanEmc2305Init+0x114>
    5528:	2320      	movs	r3, #32
    552a:	e1a4      	b.n	5876 <fanEmc2305Init+0x45e>
		
		// fast pwm freq of ps fan4
		i2c_txdat[0] = 0x61;
    552c:	4b8a      	ldr	r3, [pc, #552]	; (5758 <fanEmc2305Init+0x340>)
    552e:	2261      	movs	r2, #97	; 0x61
    5530:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x08; // 0x80;
    5532:	4b89      	ldr	r3, [pc, #548]	; (5758 <fanEmc2305Init+0x340>)
    5534:	2208      	movs	r2, #8
    5536:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP1) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }			
    5538:	2002      	movs	r0, #2
    553a:	2101      	movs	r1, #1
    553c:	4b87      	ldr	r3, [pc, #540]	; (575c <fanEmc2305Init+0x344>)
    553e:	4798      	blx	r3
    5540:	1c03      	adds	r3, r0, #0
    5542:	2b00      	cmp	r3, #0
    5544:	d001      	beq.n	554a <fanEmc2305Init+0x132>
    5546:	2320      	movs	r3, #32
    5548:	e195      	b.n	5876 <fanEmc2305Init+0x45e>
						
		//////////////////////////////////
						
		// set min speed of ps fan1 to 500rpm
		i2c_txdat[0] = 0x32;
    554a:	4b83      	ldr	r3, [pc, #524]	; (5758 <fanEmc2305Init+0x340>)
    554c:	2232      	movs	r2, #50	; 0x32
    554e:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x0b;
    5550:	4b81      	ldr	r3, [pc, #516]	; (5758 <fanEmc2305Init+0x340>)
    5552:	220b      	movs	r2, #11
    5554:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP1) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    5556:	2002      	movs	r0, #2
    5558:	2101      	movs	r1, #1
    555a:	4b80      	ldr	r3, [pc, #512]	; (575c <fanEmc2305Init+0x344>)
    555c:	4798      	blx	r3
    555e:	1c03      	adds	r3, r0, #0
    5560:	2b00      	cmp	r3, #0
    5562:	d001      	beq.n	5568 <fanEmc2305Init+0x150>
    5564:	2320      	movs	r3, #32
    5566:	e186      	b.n	5876 <fanEmc2305Init+0x45e>

		// set min speed of ps fan2 to 500rpm
		i2c_txdat[0] = 0x42;
    5568:	4b7b      	ldr	r3, [pc, #492]	; (5758 <fanEmc2305Init+0x340>)
    556a:	2242      	movs	r2, #66	; 0x42
    556c:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x0b;
    556e:	4b7a      	ldr	r3, [pc, #488]	; (5758 <fanEmc2305Init+0x340>)
    5570:	220b      	movs	r2, #11
    5572:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP1) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    5574:	2002      	movs	r0, #2
    5576:	2101      	movs	r1, #1
    5578:	4b78      	ldr	r3, [pc, #480]	; (575c <fanEmc2305Init+0x344>)
    557a:	4798      	blx	r3
    557c:	1c03      	adds	r3, r0, #0
    557e:	2b00      	cmp	r3, #0
    5580:	d001      	beq.n	5586 <fanEmc2305Init+0x16e>
    5582:	2320      	movs	r3, #32
    5584:	e177      	b.n	5876 <fanEmc2305Init+0x45e>

		// set min speed of ps fan3 to 500rpm
		i2c_txdat[0] = 0x52;
    5586:	4b74      	ldr	r3, [pc, #464]	; (5758 <fanEmc2305Init+0x340>)
    5588:	2252      	movs	r2, #82	; 0x52
    558a:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x0b;
    558c:	4b72      	ldr	r3, [pc, #456]	; (5758 <fanEmc2305Init+0x340>)
    558e:	220b      	movs	r2, #11
    5590:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP1) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    5592:	2002      	movs	r0, #2
    5594:	2101      	movs	r1, #1
    5596:	4b71      	ldr	r3, [pc, #452]	; (575c <fanEmc2305Init+0x344>)
    5598:	4798      	blx	r3
    559a:	1c03      	adds	r3, r0, #0
    559c:	2b00      	cmp	r3, #0
    559e:	d001      	beq.n	55a4 <fanEmc2305Init+0x18c>
    55a0:	2320      	movs	r3, #32
    55a2:	e168      	b.n	5876 <fanEmc2305Init+0x45e>

		// set min speed of ps fan4 to 500rpm
		i2c_txdat[0] = 0x62;
    55a4:	4b6c      	ldr	r3, [pc, #432]	; (5758 <fanEmc2305Init+0x340>)
    55a6:	2262      	movs	r2, #98	; 0x62
    55a8:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x0b;
    55aa:	4b6b      	ldr	r3, [pc, #428]	; (5758 <fanEmc2305Init+0x340>)
    55ac:	220b      	movs	r2, #11
    55ae:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP1) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    55b0:	2002      	movs	r0, #2
    55b2:	2101      	movs	r1, #1
    55b4:	4b69      	ldr	r3, [pc, #420]	; (575c <fanEmc2305Init+0x344>)
    55b6:	4798      	blx	r3
    55b8:	1c03      	adds	r3, r0, #0
    55ba:	2b00      	cmp	r3, #0
    55bc:	d001      	beq.n	55c2 <fanEmc2305Init+0x1aa>
    55be:	2320      	movs	r3, #32
    55c0:	e159      	b.n	5876 <fanEmc2305Init+0x45e>
		i2c_txdat[1] = 0x1b;
		if (i2cWrite_emc2305(2, FAN_CHIP1) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }	
		*/
		
		// enable ramp rate control of fan1, 2, 3, and 4
		i2c_txdat[0] = 0x33;
    55c2:	4b65      	ldr	r3, [pc, #404]	; (5758 <fanEmc2305Init+0x340>)
    55c4:	2233      	movs	r2, #51	; 0x33
    55c6:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x68;
    55c8:	4b63      	ldr	r3, [pc, #396]	; (5758 <fanEmc2305Init+0x340>)
    55ca:	2268      	movs	r2, #104	; 0x68
    55cc:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP1) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    55ce:	2002      	movs	r0, #2
    55d0:	2101      	movs	r1, #1
    55d2:	4b62      	ldr	r3, [pc, #392]	; (575c <fanEmc2305Init+0x344>)
    55d4:	4798      	blx	r3
    55d6:	1c03      	adds	r3, r0, #0
    55d8:	2b00      	cmp	r3, #0
    55da:	d001      	beq.n	55e0 <fanEmc2305Init+0x1c8>
    55dc:	2320      	movs	r3, #32
    55de:	e14a      	b.n	5876 <fanEmc2305Init+0x45e>
		i2c_txdat[0] = 0x43;
    55e0:	4b5d      	ldr	r3, [pc, #372]	; (5758 <fanEmc2305Init+0x340>)
    55e2:	2243      	movs	r2, #67	; 0x43
    55e4:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x68;
    55e6:	4b5c      	ldr	r3, [pc, #368]	; (5758 <fanEmc2305Init+0x340>)
    55e8:	2268      	movs	r2, #104	; 0x68
    55ea:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP1) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    55ec:	2002      	movs	r0, #2
    55ee:	2101      	movs	r1, #1
    55f0:	4b5a      	ldr	r3, [pc, #360]	; (575c <fanEmc2305Init+0x344>)
    55f2:	4798      	blx	r3
    55f4:	1c03      	adds	r3, r0, #0
    55f6:	2b00      	cmp	r3, #0
    55f8:	d001      	beq.n	55fe <fanEmc2305Init+0x1e6>
    55fa:	2320      	movs	r3, #32
    55fc:	e13b      	b.n	5876 <fanEmc2305Init+0x45e>
		i2c_txdat[0] = 0x53;
    55fe:	4b56      	ldr	r3, [pc, #344]	; (5758 <fanEmc2305Init+0x340>)
    5600:	2253      	movs	r2, #83	; 0x53
    5602:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x68;
    5604:	4b54      	ldr	r3, [pc, #336]	; (5758 <fanEmc2305Init+0x340>)
    5606:	2268      	movs	r2, #104	; 0x68
    5608:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP1) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }			
    560a:	2002      	movs	r0, #2
    560c:	2101      	movs	r1, #1
    560e:	4b53      	ldr	r3, [pc, #332]	; (575c <fanEmc2305Init+0x344>)
    5610:	4798      	blx	r3
    5612:	1c03      	adds	r3, r0, #0
    5614:	2b00      	cmp	r3, #0
    5616:	d001      	beq.n	561c <fanEmc2305Init+0x204>
    5618:	2320      	movs	r3, #32
    561a:	e12c      	b.n	5876 <fanEmc2305Init+0x45e>
		i2c_txdat[0] = 0x63;
    561c:	4b4e      	ldr	r3, [pc, #312]	; (5758 <fanEmc2305Init+0x340>)
    561e:	2263      	movs	r2, #99	; 0x63
    5620:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x68;
    5622:	4b4d      	ldr	r3, [pc, #308]	; (5758 <fanEmc2305Init+0x340>)
    5624:	2268      	movs	r2, #104	; 0x68
    5626:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP1) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    5628:	2002      	movs	r0, #2
    562a:	2101      	movs	r1, #1
    562c:	4b4b      	ldr	r3, [pc, #300]	; (575c <fanEmc2305Init+0x344>)
    562e:	4798      	blx	r3
    5630:	1c03      	adds	r3, r0, #0
    5632:	2b00      	cmp	r3, #0
    5634:	d100      	bne.n	5638 <fanEmc2305Init+0x220>
    5636:	e11d      	b.n	5874 <fanEmc2305Init+0x45c>
    5638:	2320      	movs	r3, #32
    563a:	e11c      	b.n	5876 <fanEmc2305Init+0x45e>
		
	}
	else
	{
		// 'wake-up' emc2305 fan controller by writing twice
		i2c_txdat[0] = 0x00;
    563c:	4b46      	ldr	r3, [pc, #280]	; (5758 <fanEmc2305Init+0x340>)
    563e:	2200      	movs	r2, #0
    5640:	701a      	strb	r2, [r3, #0]
		i2cWrite_emc2305(1, FAN_CHIP2);
    5642:	2001      	movs	r0, #1
    5644:	2102      	movs	r1, #2
    5646:	4b45      	ldr	r3, [pc, #276]	; (575c <fanEmc2305Init+0x344>)
    5648:	4798      	blx	r3
		if (i2cWrite_emc2305(1, FAN_CHIP2) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    564a:	2001      	movs	r0, #1
    564c:	2102      	movs	r1, #2
    564e:	4b43      	ldr	r3, [pc, #268]	; (575c <fanEmc2305Init+0x344>)
    5650:	4798      	blx	r3
    5652:	1c03      	adds	r3, r0, #0
    5654:	2b00      	cmp	r3, #0
    5656:	d001      	beq.n	565c <fanEmc2305Init+0x244>
    5658:	2320      	movs	r3, #32
    565a:	e10c      	b.n	5876 <fanEmc2305Init+0x45e>

		// read fan configs
		if (fanReadConfig_emc2305(&fan5) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    565c:	4b45      	ldr	r3, [pc, #276]	; (5774 <fanEmc2305Init+0x35c>)
    565e:	1c18      	adds	r0, r3, #0
    5660:	4b40      	ldr	r3, [pc, #256]	; (5764 <fanEmc2305Init+0x34c>)
    5662:	4798      	blx	r3
    5664:	1c03      	adds	r3, r0, #0
    5666:	2b00      	cmp	r3, #0
    5668:	d001      	beq.n	566e <fanEmc2305Init+0x256>
    566a:	2320      	movs	r3, #32
    566c:	e103      	b.n	5876 <fanEmc2305Init+0x45e>
		if (fanReadConfig_emc2305(&fan6) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    566e:	4b42      	ldr	r3, [pc, #264]	; (5778 <fanEmc2305Init+0x360>)
    5670:	1c18      	adds	r0, r3, #0
    5672:	4b3c      	ldr	r3, [pc, #240]	; (5764 <fanEmc2305Init+0x34c>)
    5674:	4798      	blx	r3
    5676:	1c03      	adds	r3, r0, #0
    5678:	2b00      	cmp	r3, #0
    567a:	d001      	beq.n	5680 <fanEmc2305Init+0x268>
    567c:	2320      	movs	r3, #32
    567e:	e0fa      	b.n	5876 <fanEmc2305Init+0x45e>
		if (fanReadConfig_emc2305(&fan7) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    5680:	4b3e      	ldr	r3, [pc, #248]	; (577c <fanEmc2305Init+0x364>)
    5682:	1c18      	adds	r0, r3, #0
    5684:	4b37      	ldr	r3, [pc, #220]	; (5764 <fanEmc2305Init+0x34c>)
    5686:	4798      	blx	r3
    5688:	1c03      	adds	r3, r0, #0
    568a:	2b00      	cmp	r3, #0
    568c:	d001      	beq.n	5692 <fanEmc2305Init+0x27a>
    568e:	2320      	movs	r3, #32
    5690:	e0f1      	b.n	5876 <fanEmc2305Init+0x45e>
		if (fanReadConfig_emc2305(&fan8) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    5692:	4b3b      	ldr	r3, [pc, #236]	; (5780 <fanEmc2305Init+0x368>)
    5694:	1c18      	adds	r0, r3, #0
    5696:	4b33      	ldr	r3, [pc, #204]	; (5764 <fanEmc2305Init+0x34c>)
    5698:	4798      	blx	r3
    569a:	1c03      	adds	r3, r0, #0
    569c:	2b00      	cmp	r3, #0
    569e:	d001      	beq.n	56a4 <fanEmc2305Init+0x28c>
    56a0:	2320      	movs	r3, #32
    56a2:	e0e8      	b.n	5876 <fanEmc2305Init+0x45e>

		// invert pwm output polarity
		i2c_txdat[0] = 0x2a;
    56a4:	4b2c      	ldr	r3, [pc, #176]	; (5758 <fanEmc2305Init+0x340>)
    56a6:	222a      	movs	r2, #42	; 0x2a
    56a8:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x00;
    56aa:	4b2b      	ldr	r3, [pc, #172]	; (5758 <fanEmc2305Init+0x340>)
    56ac:	2200      	movs	r2, #0
    56ae:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP2) != STATUS_OK)  { return ERROR_FAN_CONTROLLER; }
    56b0:	2002      	movs	r0, #2
    56b2:	2102      	movs	r1, #2
    56b4:	4b29      	ldr	r3, [pc, #164]	; (575c <fanEmc2305Init+0x344>)
    56b6:	4798      	blx	r3
    56b8:	1c03      	adds	r3, r0, #0
    56ba:	2b00      	cmp	r3, #0
    56bc:	d001      	beq.n	56c2 <fanEmc2305Init+0x2aa>
    56be:	2320      	movs	r3, #32
    56c0:	e0d9      	b.n	5876 <fanEmc2305Init+0x45e>
	
		// push-pull pwm outputs
		i2c_txdat[0] = 0x2b;
    56c2:	4b25      	ldr	r3, [pc, #148]	; (5758 <fanEmc2305Init+0x340>)
    56c4:	222b      	movs	r2, #43	; 0x2b
    56c6:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x0f;
    56c8:	4b23      	ldr	r3, [pc, #140]	; (5758 <fanEmc2305Init+0x340>)
    56ca:	220f      	movs	r2, #15
    56cc:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP2) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    56ce:	2002      	movs	r0, #2
    56d0:	2102      	movs	r1, #2
    56d2:	4b22      	ldr	r3, [pc, #136]	; (575c <fanEmc2305Init+0x344>)
    56d4:	4798      	blx	r3
    56d6:	1c03      	adds	r3, r0, #0
    56d8:	2b00      	cmp	r3, #0
    56da:	d001      	beq.n	56e0 <fanEmc2305Init+0x2c8>
    56dc:	2320      	movs	r3, #32
    56de:	e0ca      	b.n	5876 <fanEmc2305Init+0x45e>
	
		//////////////////////////////////
		
		// slow pwm freq of ps fan1
		i2c_txdat[0] = 0x31;
    56e0:	4b1d      	ldr	r3, [pc, #116]	; (5758 <fanEmc2305Init+0x340>)
    56e2:	2231      	movs	r2, #49	; 0x31
    56e4:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x80;
    56e6:	4b1c      	ldr	r3, [pc, #112]	; (5758 <fanEmc2305Init+0x340>)
    56e8:	2280      	movs	r2, #128	; 0x80
    56ea:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP2) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    56ec:	2002      	movs	r0, #2
    56ee:	2102      	movs	r1, #2
    56f0:	4b1a      	ldr	r3, [pc, #104]	; (575c <fanEmc2305Init+0x344>)
    56f2:	4798      	blx	r3
    56f4:	1c03      	adds	r3, r0, #0
    56f6:	2b00      	cmp	r3, #0
    56f8:	d001      	beq.n	56fe <fanEmc2305Init+0x2e6>
    56fa:	2320      	movs	r3, #32
    56fc:	e0bb      	b.n	5876 <fanEmc2305Init+0x45e>

		// slow pwm freq of ps fan2
		i2c_txdat[0] = 0x41;
    56fe:	4b16      	ldr	r3, [pc, #88]	; (5758 <fanEmc2305Init+0x340>)
    5700:	2241      	movs	r2, #65	; 0x41
    5702:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x80;
    5704:	4b14      	ldr	r3, [pc, #80]	; (5758 <fanEmc2305Init+0x340>)
    5706:	2280      	movs	r2, #128	; 0x80
    5708:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP2) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    570a:	2002      	movs	r0, #2
    570c:	2102      	movs	r1, #2
    570e:	4b13      	ldr	r3, [pc, #76]	; (575c <fanEmc2305Init+0x344>)
    5710:	4798      	blx	r3
    5712:	1c03      	adds	r3, r0, #0
    5714:	2b00      	cmp	r3, #0
    5716:	d001      	beq.n	571c <fanEmc2305Init+0x304>
    5718:	2320      	movs	r3, #32
    571a:	e0ac      	b.n	5876 <fanEmc2305Init+0x45e>

		// slow pwm freq of ps fan3
		i2c_txdat[0] = 0x51;
    571c:	4b0e      	ldr	r3, [pc, #56]	; (5758 <fanEmc2305Init+0x340>)
    571e:	2251      	movs	r2, #81	; 0x51
    5720:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x80;
    5722:	4b0d      	ldr	r3, [pc, #52]	; (5758 <fanEmc2305Init+0x340>)
    5724:	2280      	movs	r2, #128	; 0x80
    5726:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP2) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    5728:	2002      	movs	r0, #2
    572a:	2102      	movs	r1, #2
    572c:	4b0b      	ldr	r3, [pc, #44]	; (575c <fanEmc2305Init+0x344>)
    572e:	4798      	blx	r3
    5730:	1c03      	adds	r3, r0, #0
    5732:	2b00      	cmp	r3, #0
    5734:	d001      	beq.n	573a <fanEmc2305Init+0x322>
    5736:	2320      	movs	r3, #32
    5738:	e09d      	b.n	5876 <fanEmc2305Init+0x45e>
		
		// slow pwm freq of ps fan4
		i2c_txdat[0] = 0x61;
    573a:	4b07      	ldr	r3, [pc, #28]	; (5758 <fanEmc2305Init+0x340>)
    573c:	2261      	movs	r2, #97	; 0x61
    573e:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x80;
    5740:	4b05      	ldr	r3, [pc, #20]	; (5758 <fanEmc2305Init+0x340>)
    5742:	2280      	movs	r2, #128	; 0x80
    5744:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP2) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }			
    5746:	2002      	movs	r0, #2
    5748:	2102      	movs	r1, #2
    574a:	4b04      	ldr	r3, [pc, #16]	; (575c <fanEmc2305Init+0x344>)
    574c:	4798      	blx	r3
    574e:	1c03      	adds	r3, r0, #0
    5750:	2b00      	cmp	r3, #0
    5752:	d017      	beq.n	5784 <fanEmc2305Init+0x36c>
    5754:	2320      	movs	r3, #32
    5756:	e08e      	b.n	5876 <fanEmc2305Init+0x45e>
    5758:	20000040 	.word	0x20000040
    575c:	00005295 	.word	0x00005295
    5760:	20000e84 	.word	0x20000e84
    5764:	00005e09 	.word	0x00005e09
    5768:	20000c58 	.word	0x20000c58
    576c:	20000d18 	.word	0x20000d18
    5770:	20000adc 	.word	0x20000adc
    5774:	20000b8c 	.word	0x20000b8c
    5778:	20000914 	.word	0x20000914
    577c:	20000dc0 	.word	0x20000dc0
    5780:	20000b40 	.word	0x20000b40
						
		//////////////////////////////////
						
		// set min speed of ps fan1 to 500rpm
		i2c_txdat[0] = 0x32;
    5784:	4b3e      	ldr	r3, [pc, #248]	; (5880 <fanEmc2305Init+0x468>)
    5786:	2232      	movs	r2, #50	; 0x32
    5788:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x0b;
    578a:	4b3d      	ldr	r3, [pc, #244]	; (5880 <fanEmc2305Init+0x468>)
    578c:	220b      	movs	r2, #11
    578e:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP2) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    5790:	2002      	movs	r0, #2
    5792:	2102      	movs	r1, #2
    5794:	4b3b      	ldr	r3, [pc, #236]	; (5884 <fanEmc2305Init+0x46c>)
    5796:	4798      	blx	r3
    5798:	1c03      	adds	r3, r0, #0
    579a:	2b00      	cmp	r3, #0
    579c:	d001      	beq.n	57a2 <fanEmc2305Init+0x38a>
    579e:	2320      	movs	r3, #32
    57a0:	e069      	b.n	5876 <fanEmc2305Init+0x45e>

		// set min speed of ps fan2 to 500rpm
		i2c_txdat[0] = 0x42;
    57a2:	4b37      	ldr	r3, [pc, #220]	; (5880 <fanEmc2305Init+0x468>)
    57a4:	2242      	movs	r2, #66	; 0x42
    57a6:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x0b;
    57a8:	4b35      	ldr	r3, [pc, #212]	; (5880 <fanEmc2305Init+0x468>)
    57aa:	220b      	movs	r2, #11
    57ac:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP2) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    57ae:	2002      	movs	r0, #2
    57b0:	2102      	movs	r1, #2
    57b2:	4b34      	ldr	r3, [pc, #208]	; (5884 <fanEmc2305Init+0x46c>)
    57b4:	4798      	blx	r3
    57b6:	1c03      	adds	r3, r0, #0
    57b8:	2b00      	cmp	r3, #0
    57ba:	d001      	beq.n	57c0 <fanEmc2305Init+0x3a8>
    57bc:	2320      	movs	r3, #32
    57be:	e05a      	b.n	5876 <fanEmc2305Init+0x45e>

		// set min speed of ps fan3 to 500rpm
		i2c_txdat[0] = 0x52;
    57c0:	4b2f      	ldr	r3, [pc, #188]	; (5880 <fanEmc2305Init+0x468>)
    57c2:	2252      	movs	r2, #82	; 0x52
    57c4:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x0b;
    57c6:	4b2e      	ldr	r3, [pc, #184]	; (5880 <fanEmc2305Init+0x468>)
    57c8:	220b      	movs	r2, #11
    57ca:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP2) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    57cc:	2002      	movs	r0, #2
    57ce:	2102      	movs	r1, #2
    57d0:	4b2c      	ldr	r3, [pc, #176]	; (5884 <fanEmc2305Init+0x46c>)
    57d2:	4798      	blx	r3
    57d4:	1c03      	adds	r3, r0, #0
    57d6:	2b00      	cmp	r3, #0
    57d8:	d001      	beq.n	57de <fanEmc2305Init+0x3c6>
    57da:	2320      	movs	r3, #32
    57dc:	e04b      	b.n	5876 <fanEmc2305Init+0x45e>

		// set min speed of ps fan4 to 500rpm
		i2c_txdat[0] = 0x62;
    57de:	4b28      	ldr	r3, [pc, #160]	; (5880 <fanEmc2305Init+0x468>)
    57e0:	2262      	movs	r2, #98	; 0x62
    57e2:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x0b;
    57e4:	4b26      	ldr	r3, [pc, #152]	; (5880 <fanEmc2305Init+0x468>)
    57e6:	220b      	movs	r2, #11
    57e8:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP2) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    57ea:	2002      	movs	r0, #2
    57ec:	2102      	movs	r1, #2
    57ee:	4b25      	ldr	r3, [pc, #148]	; (5884 <fanEmc2305Init+0x46c>)
    57f0:	4798      	blx	r3
    57f2:	1c03      	adds	r3, r0, #0
    57f4:	2b00      	cmp	r3, #0
    57f6:	d001      	beq.n	57fc <fanEmc2305Init+0x3e4>
    57f8:	2320      	movs	r3, #32
    57fa:	e03c      	b.n	5876 <fanEmc2305Init+0x45e>
		i2c_txdat[1] = 0x1b;
		if (i2cWrite_emc2305(2, FAN_CHIP2) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }	
		*/
		
		// enable ramp rate control of fan1, 2, 3, and 4
		i2c_txdat[0] = 0x33;
    57fc:	4b20      	ldr	r3, [pc, #128]	; (5880 <fanEmc2305Init+0x468>)
    57fe:	2233      	movs	r2, #51	; 0x33
    5800:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x68;
    5802:	4b1f      	ldr	r3, [pc, #124]	; (5880 <fanEmc2305Init+0x468>)
    5804:	2268      	movs	r2, #104	; 0x68
    5806:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP2) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    5808:	2002      	movs	r0, #2
    580a:	2102      	movs	r1, #2
    580c:	4b1d      	ldr	r3, [pc, #116]	; (5884 <fanEmc2305Init+0x46c>)
    580e:	4798      	blx	r3
    5810:	1c03      	adds	r3, r0, #0
    5812:	2b00      	cmp	r3, #0
    5814:	d001      	beq.n	581a <fanEmc2305Init+0x402>
    5816:	2320      	movs	r3, #32
    5818:	e02d      	b.n	5876 <fanEmc2305Init+0x45e>
		i2c_txdat[0] = 0x43;
    581a:	4b19      	ldr	r3, [pc, #100]	; (5880 <fanEmc2305Init+0x468>)
    581c:	2243      	movs	r2, #67	; 0x43
    581e:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x68;
    5820:	4b17      	ldr	r3, [pc, #92]	; (5880 <fanEmc2305Init+0x468>)
    5822:	2268      	movs	r2, #104	; 0x68
    5824:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP2) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    5826:	2002      	movs	r0, #2
    5828:	2102      	movs	r1, #2
    582a:	4b16      	ldr	r3, [pc, #88]	; (5884 <fanEmc2305Init+0x46c>)
    582c:	4798      	blx	r3
    582e:	1c03      	adds	r3, r0, #0
    5830:	2b00      	cmp	r3, #0
    5832:	d001      	beq.n	5838 <fanEmc2305Init+0x420>
    5834:	2320      	movs	r3, #32
    5836:	e01e      	b.n	5876 <fanEmc2305Init+0x45e>
		i2c_txdat[0] = 0x53;
    5838:	4b11      	ldr	r3, [pc, #68]	; (5880 <fanEmc2305Init+0x468>)
    583a:	2253      	movs	r2, #83	; 0x53
    583c:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x68;
    583e:	4b10      	ldr	r3, [pc, #64]	; (5880 <fanEmc2305Init+0x468>)
    5840:	2268      	movs	r2, #104	; 0x68
    5842:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP2) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    5844:	2002      	movs	r0, #2
    5846:	2102      	movs	r1, #2
    5848:	4b0e      	ldr	r3, [pc, #56]	; (5884 <fanEmc2305Init+0x46c>)
    584a:	4798      	blx	r3
    584c:	1c03      	adds	r3, r0, #0
    584e:	2b00      	cmp	r3, #0
    5850:	d001      	beq.n	5856 <fanEmc2305Init+0x43e>
    5852:	2320      	movs	r3, #32
    5854:	e00f      	b.n	5876 <fanEmc2305Init+0x45e>
		i2c_txdat[0] = 0x63;
    5856:	4b0a      	ldr	r3, [pc, #40]	; (5880 <fanEmc2305Init+0x468>)
    5858:	2263      	movs	r2, #99	; 0x63
    585a:	701a      	strb	r2, [r3, #0]
		i2c_txdat[1] = 0x68;
    585c:	4b08      	ldr	r3, [pc, #32]	; (5880 <fanEmc2305Init+0x468>)
    585e:	2268      	movs	r2, #104	; 0x68
    5860:	705a      	strb	r2, [r3, #1]
		if (i2cWrite_emc2305(2, FAN_CHIP2) != STATUS_OK) { return ERROR_FAN_CONTROLLER; }
    5862:	2002      	movs	r0, #2
    5864:	2102      	movs	r1, #2
    5866:	4b07      	ldr	r3, [pc, #28]	; (5884 <fanEmc2305Init+0x46c>)
    5868:	4798      	blx	r3
    586a:	1c03      	adds	r3, r0, #0
    586c:	2b00      	cmp	r3, #0
    586e:	d001      	beq.n	5874 <fanEmc2305Init+0x45c>
    5870:	2320      	movs	r3, #32
    5872:	e000      	b.n	5876 <fanEmc2305Init+0x45e>
						
	}
	return ERROR_NONE;
    5874:	2300      	movs	r3, #0
}
    5876:	1c18      	adds	r0, r3, #0
    5878:	46bd      	mov	sp, r7
    587a:	b002      	add	sp, #8
    587c:	bd80      	pop	{r7, pc}
    587e:	46c0      	nop			; (mov r8, r8)
    5880:	20000040 	.word	0x20000040
    5884:	00005295 	.word	0x00005295

00005888 <fanSetSpeed_emc2305>:

uint8_t fanSetSpeed_emc2305(struct fan_vars *fan_inst, uint8_t speedPercent)
{
    5888:	b580      	push	{r7, lr}
    588a:	b084      	sub	sp, #16
    588c:	af00      	add	r7, sp, #0
    588e:	6078      	str	r0, [r7, #4]
    5890:	1c0a      	adds	r2, r1, #0
    5892:	1cfb      	adds	r3, r7, #3
    5894:	701a      	strb	r2, [r3, #0]
	uint8_t numBytes = 2;
    5896:	1c3b      	adds	r3, r7, #0
    5898:	330e      	adds	r3, #14
    589a:	2202      	movs	r2, #2
    589c:	701a      	strb	r2, [r3, #0]
	uint8_t fan_chip = FAN_CHIP1;
    589e:	1c3b      	adds	r3, r7, #0
    58a0:	330f      	adds	r3, #15
    58a2:	2201      	movs	r2, #1
    58a4:	701a      	strb	r2, [r3, #0]
	
	if (fan_inst == &fan1)
    58a6:	687a      	ldr	r2, [r7, #4]
    58a8:	4b3c      	ldr	r3, [pc, #240]	; (599c <fanSetSpeed_emc2305+0x114>)
    58aa:	429a      	cmp	r2, r3
    58ac:	d107      	bne.n	58be <fanSetSpeed_emc2305+0x36>
	{
		i2c_txdat[0] = 0x30;
    58ae:	4b3c      	ldr	r3, [pc, #240]	; (59a0 <fanSetSpeed_emc2305+0x118>)
    58b0:	2230      	movs	r2, #48	; 0x30
    58b2:	701a      	strb	r2, [r3, #0]
		fan_chip = FAN_CHIP1;
    58b4:	1c3b      	adds	r3, r7, #0
    58b6:	330f      	adds	r3, #15
    58b8:	2201      	movs	r2, #1
    58ba:	701a      	strb	r2, [r3, #0]
    58bc:	e052      	b.n	5964 <fanSetSpeed_emc2305+0xdc>
	}
	else if (fan_inst == &fan2)
    58be:	687a      	ldr	r2, [r7, #4]
    58c0:	4b38      	ldr	r3, [pc, #224]	; (59a4 <fanSetSpeed_emc2305+0x11c>)
    58c2:	429a      	cmp	r2, r3
    58c4:	d107      	bne.n	58d6 <fanSetSpeed_emc2305+0x4e>
	{
		i2c_txdat[0] = 0x40;
    58c6:	4b36      	ldr	r3, [pc, #216]	; (59a0 <fanSetSpeed_emc2305+0x118>)
    58c8:	2240      	movs	r2, #64	; 0x40
    58ca:	701a      	strb	r2, [r3, #0]
		fan_chip = FAN_CHIP1;
    58cc:	1c3b      	adds	r3, r7, #0
    58ce:	330f      	adds	r3, #15
    58d0:	2201      	movs	r2, #1
    58d2:	701a      	strb	r2, [r3, #0]
    58d4:	e046      	b.n	5964 <fanSetSpeed_emc2305+0xdc>
	}
	else if (fan_inst == &fan3)
    58d6:	687a      	ldr	r2, [r7, #4]
    58d8:	4b33      	ldr	r3, [pc, #204]	; (59a8 <fanSetSpeed_emc2305+0x120>)
    58da:	429a      	cmp	r2, r3
    58dc:	d107      	bne.n	58ee <fanSetSpeed_emc2305+0x66>
	{
		i2c_txdat[0] = 0x50;
    58de:	4b30      	ldr	r3, [pc, #192]	; (59a0 <fanSetSpeed_emc2305+0x118>)
    58e0:	2250      	movs	r2, #80	; 0x50
    58e2:	701a      	strb	r2, [r3, #0]
		fan_chip = FAN_CHIP1;
    58e4:	1c3b      	adds	r3, r7, #0
    58e6:	330f      	adds	r3, #15
    58e8:	2201      	movs	r2, #1
    58ea:	701a      	strb	r2, [r3, #0]
    58ec:	e03a      	b.n	5964 <fanSetSpeed_emc2305+0xdc>
	}
	else if (fan_inst == &fan4)
    58ee:	687a      	ldr	r2, [r7, #4]
    58f0:	4b2e      	ldr	r3, [pc, #184]	; (59ac <fanSetSpeed_emc2305+0x124>)
    58f2:	429a      	cmp	r2, r3
    58f4:	d107      	bne.n	5906 <fanSetSpeed_emc2305+0x7e>
	{
		i2c_txdat[0] = 0x60;
    58f6:	4b2a      	ldr	r3, [pc, #168]	; (59a0 <fanSetSpeed_emc2305+0x118>)
    58f8:	2260      	movs	r2, #96	; 0x60
    58fa:	701a      	strb	r2, [r3, #0]
		fan_chip = FAN_CHIP1;
    58fc:	1c3b      	adds	r3, r7, #0
    58fe:	330f      	adds	r3, #15
    5900:	2201      	movs	r2, #1
    5902:	701a      	strb	r2, [r3, #0]
    5904:	e02e      	b.n	5964 <fanSetSpeed_emc2305+0xdc>
	}
	else if (fan_inst == &fan5)
    5906:	687a      	ldr	r2, [r7, #4]
    5908:	4b29      	ldr	r3, [pc, #164]	; (59b0 <fanSetSpeed_emc2305+0x128>)
    590a:	429a      	cmp	r2, r3
    590c:	d107      	bne.n	591e <fanSetSpeed_emc2305+0x96>
	{
		i2c_txdat[0] = 0x30;
    590e:	4b24      	ldr	r3, [pc, #144]	; (59a0 <fanSetSpeed_emc2305+0x118>)
    5910:	2230      	movs	r2, #48	; 0x30
    5912:	701a      	strb	r2, [r3, #0]
		fan_chip = FAN_CHIP2;
    5914:	1c3b      	adds	r3, r7, #0
    5916:	330f      	adds	r3, #15
    5918:	2202      	movs	r2, #2
    591a:	701a      	strb	r2, [r3, #0]
    591c:	e022      	b.n	5964 <fanSetSpeed_emc2305+0xdc>
	}
	else if (fan_inst == &fan6)
    591e:	687a      	ldr	r2, [r7, #4]
    5920:	4b24      	ldr	r3, [pc, #144]	; (59b4 <fanSetSpeed_emc2305+0x12c>)
    5922:	429a      	cmp	r2, r3
    5924:	d107      	bne.n	5936 <fanSetSpeed_emc2305+0xae>
	{
		i2c_txdat[0] = 0x40;
    5926:	4b1e      	ldr	r3, [pc, #120]	; (59a0 <fanSetSpeed_emc2305+0x118>)
    5928:	2240      	movs	r2, #64	; 0x40
    592a:	701a      	strb	r2, [r3, #0]
		fan_chip = FAN_CHIP2;
    592c:	1c3b      	adds	r3, r7, #0
    592e:	330f      	adds	r3, #15
    5930:	2202      	movs	r2, #2
    5932:	701a      	strb	r2, [r3, #0]
    5934:	e016      	b.n	5964 <fanSetSpeed_emc2305+0xdc>
	}
	else if (fan_inst == &fan7)
    5936:	687a      	ldr	r2, [r7, #4]
    5938:	4b1f      	ldr	r3, [pc, #124]	; (59b8 <fanSetSpeed_emc2305+0x130>)
    593a:	429a      	cmp	r2, r3
    593c:	d107      	bne.n	594e <fanSetSpeed_emc2305+0xc6>
	{
		i2c_txdat[0] = 0x50;
    593e:	4b18      	ldr	r3, [pc, #96]	; (59a0 <fanSetSpeed_emc2305+0x118>)
    5940:	2250      	movs	r2, #80	; 0x50
    5942:	701a      	strb	r2, [r3, #0]
		fan_chip = FAN_CHIP2;
    5944:	1c3b      	adds	r3, r7, #0
    5946:	330f      	adds	r3, #15
    5948:	2202      	movs	r2, #2
    594a:	701a      	strb	r2, [r3, #0]
    594c:	e00a      	b.n	5964 <fanSetSpeed_emc2305+0xdc>
	}
	else if (fan_inst == &fan8)
    594e:	687a      	ldr	r2, [r7, #4]
    5950:	4b1a      	ldr	r3, [pc, #104]	; (59bc <fanSetSpeed_emc2305+0x134>)
    5952:	429a      	cmp	r2, r3
    5954:	d106      	bne.n	5964 <fanSetSpeed_emc2305+0xdc>
	{
		i2c_txdat[0] = 0x60;
    5956:	4b12      	ldr	r3, [pc, #72]	; (59a0 <fanSetSpeed_emc2305+0x118>)
    5958:	2260      	movs	r2, #96	; 0x60
    595a:	701a      	strb	r2, [r3, #0]
		fan_chip = FAN_CHIP2;
    595c:	1c3b      	adds	r3, r7, #0
    595e:	330f      	adds	r3, #15
    5960:	2202      	movs	r2, #2
    5962:	701a      	strb	r2, [r3, #0]
	}
	
	i2c_txdat[1] = (speedPercent * 0xff) / 100;
    5964:	1cfb      	adds	r3, r7, #3
    5966:	781a      	ldrb	r2, [r3, #0]
    5968:	1c13      	adds	r3, r2, #0
    596a:	021b      	lsls	r3, r3, #8
    596c:	1a9a      	subs	r2, r3, r2
    596e:	4b14      	ldr	r3, [pc, #80]	; (59c0 <fanSetSpeed_emc2305+0x138>)
    5970:	1c10      	adds	r0, r2, #0
    5972:	2164      	movs	r1, #100	; 0x64
    5974:	4798      	blx	r3
    5976:	1c03      	adds	r3, r0, #0
    5978:	b2da      	uxtb	r2, r3
    597a:	4b09      	ldr	r3, [pc, #36]	; (59a0 <fanSetSpeed_emc2305+0x118>)
    597c:	705a      	strb	r2, [r3, #1]
	
	// ** ADD bounds CHECKING HERE ** //

	return i2cWrite_emc2305(numBytes, fan_chip);
    597e:	1c3b      	adds	r3, r7, #0
    5980:	330e      	adds	r3, #14
    5982:	781a      	ldrb	r2, [r3, #0]
    5984:	1c3b      	adds	r3, r7, #0
    5986:	330f      	adds	r3, #15
    5988:	781b      	ldrb	r3, [r3, #0]
    598a:	1c10      	adds	r0, r2, #0
    598c:	1c19      	adds	r1, r3, #0
    598e:	4b0d      	ldr	r3, [pc, #52]	; (59c4 <fanSetSpeed_emc2305+0x13c>)
    5990:	4798      	blx	r3
    5992:	1c03      	adds	r3, r0, #0
}
    5994:	1c18      	adds	r0, r3, #0
    5996:	46bd      	mov	sp, r7
    5998:	b004      	add	sp, #16
    599a:	bd80      	pop	{r7, pc}
    599c:	20000e84 	.word	0x20000e84
    59a0:	20000040 	.word	0x20000040
    59a4:	20000c58 	.word	0x20000c58
    59a8:	20000d18 	.word	0x20000d18
    59ac:	20000adc 	.word	0x20000adc
    59b0:	20000b8c 	.word	0x20000b8c
    59b4:	20000914 	.word	0x20000914
    59b8:	20000dc0 	.word	0x20000dc0
    59bc:	20000b40 	.word	0x20000b40
    59c0:	0001f4c9 	.word	0x0001f4c9
    59c4:	00005295 	.word	0x00005295

000059c8 <fanStart_emc2305>:

void fanStart_emc2305(struct fan_vars *fan_inst)
{
    59c8:	b580      	push	{r7, lr}
    59ca:	b082      	sub	sp, #8
    59cc:	af00      	add	r7, sp, #0
    59ce:	6078      	str	r0, [r7, #4]
	if (fan_inst == &fan1)
    59d0:	687a      	ldr	r2, [r7, #4]
    59d2:	4b36      	ldr	r3, [pc, #216]	; (5aac <fanStart_emc2305+0xe4>)
    59d4:	429a      	cmp	r2, r3
    59d6:	d107      	bne.n	59e8 <fanStart_emc2305+0x20>
	{
		port_pin_set_output_level_EX(PIN_ENBL_FAN1, HIGH, enableManualOverride);
    59d8:	4b35      	ldr	r3, [pc, #212]	; (5ab0 <fanStart_emc2305+0xe8>)
    59da:	781b      	ldrb	r3, [r3, #0]
    59dc:	2015      	movs	r0, #21
    59de:	2101      	movs	r1, #1
    59e0:	1c1a      	adds	r2, r3, #0
    59e2:	4b34      	ldr	r3, [pc, #208]	; (5ab4 <fanStart_emc2305+0xec>)
    59e4:	4798      	blx	r3
    59e6:	e052      	b.n	5a8e <fanStart_emc2305+0xc6>
	}
	else if (fan_inst == &fan2)
    59e8:	687a      	ldr	r2, [r7, #4]
    59ea:	4b33      	ldr	r3, [pc, #204]	; (5ab8 <fanStart_emc2305+0xf0>)
    59ec:	429a      	cmp	r2, r3
    59ee:	d107      	bne.n	5a00 <fanStart_emc2305+0x38>
	{
		port_pin_set_output_level_EX(PIN_ENBL_FAN2, HIGH, enableManualOverride);
    59f0:	4b2f      	ldr	r3, [pc, #188]	; (5ab0 <fanStart_emc2305+0xe8>)
    59f2:	781b      	ldrb	r3, [r3, #0]
    59f4:	2014      	movs	r0, #20
    59f6:	2101      	movs	r1, #1
    59f8:	1c1a      	adds	r2, r3, #0
    59fa:	4b2e      	ldr	r3, [pc, #184]	; (5ab4 <fanStart_emc2305+0xec>)
    59fc:	4798      	blx	r3
    59fe:	e046      	b.n	5a8e <fanStart_emc2305+0xc6>
	}
	else if (fan_inst == &fan3)
    5a00:	687a      	ldr	r2, [r7, #4]
    5a02:	4b2e      	ldr	r3, [pc, #184]	; (5abc <fanStart_emc2305+0xf4>)
    5a04:	429a      	cmp	r2, r3
    5a06:	d107      	bne.n	5a18 <fanStart_emc2305+0x50>
	{
		port_pin_set_output_level_EX(PIN_ENBL_FAN3, HIGH, enableManualOverride);
    5a08:	4b29      	ldr	r3, [pc, #164]	; (5ab0 <fanStart_emc2305+0xe8>)
    5a0a:	781b      	ldrb	r3, [r3, #0]
    5a0c:	2013      	movs	r0, #19
    5a0e:	2101      	movs	r1, #1
    5a10:	1c1a      	adds	r2, r3, #0
    5a12:	4b28      	ldr	r3, [pc, #160]	; (5ab4 <fanStart_emc2305+0xec>)
    5a14:	4798      	blx	r3
    5a16:	e03a      	b.n	5a8e <fanStart_emc2305+0xc6>
	}
	else if (fan_inst == &fan4)
    5a18:	687a      	ldr	r2, [r7, #4]
    5a1a:	4b29      	ldr	r3, [pc, #164]	; (5ac0 <fanStart_emc2305+0xf8>)
    5a1c:	429a      	cmp	r2, r3
    5a1e:	d107      	bne.n	5a30 <fanStart_emc2305+0x68>
	{
		port_pin_set_output_level_EX(PIN_ENBL_FAN4, HIGH, enableManualOverride);
    5a20:	4b23      	ldr	r3, [pc, #140]	; (5ab0 <fanStart_emc2305+0xe8>)
    5a22:	781b      	ldrb	r3, [r3, #0]
    5a24:	202c      	movs	r0, #44	; 0x2c
    5a26:	2101      	movs	r1, #1
    5a28:	1c1a      	adds	r2, r3, #0
    5a2a:	4b22      	ldr	r3, [pc, #136]	; (5ab4 <fanStart_emc2305+0xec>)
    5a2c:	4798      	blx	r3
    5a2e:	e02e      	b.n	5a8e <fanStart_emc2305+0xc6>
	}		
	else if (fan_inst == &fan5)
    5a30:	687a      	ldr	r2, [r7, #4]
    5a32:	4b24      	ldr	r3, [pc, #144]	; (5ac4 <fanStart_emc2305+0xfc>)
    5a34:	429a      	cmp	r2, r3
    5a36:	d107      	bne.n	5a48 <fanStart_emc2305+0x80>
	{
		port_pin_set_output_level_EX(PIN_ENBL_FAN5, HIGH, enableManualOverride);
    5a38:	4b1d      	ldr	r3, [pc, #116]	; (5ab0 <fanStart_emc2305+0xe8>)
    5a3a:	781b      	ldrb	r3, [r3, #0]
    5a3c:	2017      	movs	r0, #23
    5a3e:	2101      	movs	r1, #1
    5a40:	1c1a      	adds	r2, r3, #0
    5a42:	4b1c      	ldr	r3, [pc, #112]	; (5ab4 <fanStart_emc2305+0xec>)
    5a44:	4798      	blx	r3
    5a46:	e022      	b.n	5a8e <fanStart_emc2305+0xc6>
	}
	else if (fan_inst == &fan6)
    5a48:	687a      	ldr	r2, [r7, #4]
    5a4a:	4b1f      	ldr	r3, [pc, #124]	; (5ac8 <fanStart_emc2305+0x100>)
    5a4c:	429a      	cmp	r2, r3
    5a4e:	d107      	bne.n	5a60 <fanStart_emc2305+0x98>
	{
		port_pin_set_output_level_EX(PIN_ENBL_FAN6, HIGH, enableManualOverride);
    5a50:	4b17      	ldr	r3, [pc, #92]	; (5ab0 <fanStart_emc2305+0xe8>)
    5a52:	781b      	ldrb	r3, [r3, #0]
    5a54:	2016      	movs	r0, #22
    5a56:	2101      	movs	r1, #1
    5a58:	1c1a      	adds	r2, r3, #0
    5a5a:	4b16      	ldr	r3, [pc, #88]	; (5ab4 <fanStart_emc2305+0xec>)
    5a5c:	4798      	blx	r3
    5a5e:	e016      	b.n	5a8e <fanStart_emc2305+0xc6>
	}
	else if (fan_inst == &fan7)
    5a60:	687a      	ldr	r2, [r7, #4]
    5a62:	4b1a      	ldr	r3, [pc, #104]	; (5acc <fanStart_emc2305+0x104>)
    5a64:	429a      	cmp	r2, r3
    5a66:	d107      	bne.n	5a78 <fanStart_emc2305+0xb0>
	{
		port_pin_set_output_level_EX(PIN_ENBL_FAN7, HIGH, enableManualOverride);
    5a68:	4b11      	ldr	r3, [pc, #68]	; (5ab0 <fanStart_emc2305+0xe8>)
    5a6a:	781b      	ldrb	r3, [r3, #0]
    5a6c:	2007      	movs	r0, #7
    5a6e:	2101      	movs	r1, #1
    5a70:	1c1a      	adds	r2, r3, #0
    5a72:	4b10      	ldr	r3, [pc, #64]	; (5ab4 <fanStart_emc2305+0xec>)
    5a74:	4798      	blx	r3
    5a76:	e00a      	b.n	5a8e <fanStart_emc2305+0xc6>
	}
	else if (fan_inst == &fan8)
    5a78:	687a      	ldr	r2, [r7, #4]
    5a7a:	4b15      	ldr	r3, [pc, #84]	; (5ad0 <fanStart_emc2305+0x108>)
    5a7c:	429a      	cmp	r2, r3
    5a7e:	d106      	bne.n	5a8e <fanStart_emc2305+0xc6>
	{
		port_pin_set_output_level_EX(PIN_ENBL_FAN8, HIGH, enableManualOverride);
    5a80:	4b0b      	ldr	r3, [pc, #44]	; (5ab0 <fanStart_emc2305+0xe8>)
    5a82:	781b      	ldrb	r3, [r3, #0]
    5a84:	2006      	movs	r0, #6
    5a86:	2101      	movs	r1, #1
    5a88:	1c1a      	adds	r2, r3, #0
    5a8a:	4b0a      	ldr	r3, [pc, #40]	; (5ab4 <fanStart_emc2305+0xec>)
    5a8c:	4798      	blx	r3
	}
	
	fanSetSpeed_emc2305(fan_inst, fan_inst->targetDutyPercent);
    5a8e:	687b      	ldr	r3, [r7, #4]
    5a90:	699b      	ldr	r3, [r3, #24]
    5a92:	b2db      	uxtb	r3, r3
    5a94:	687a      	ldr	r2, [r7, #4]
    5a96:	1c10      	adds	r0, r2, #0
    5a98:	1c19      	adds	r1, r3, #0
    5a9a:	4b0e      	ldr	r3, [pc, #56]	; (5ad4 <fanStart_emc2305+0x10c>)
    5a9c:	4798      	blx	r3
	//delay_ms(1000);
	fan_inst->state = ON;
    5a9e:	687b      	ldr	r3, [r7, #4]
    5aa0:	2201      	movs	r2, #1
    5aa2:	755a      	strb	r2, [r3, #21]
}
    5aa4:	46bd      	mov	sp, r7
    5aa6:	b002      	add	sp, #8
    5aa8:	bd80      	pop	{r7, pc}
    5aaa:	46c0      	nop			; (mov r8, r8)
    5aac:	20000e84 	.word	0x20000e84
    5ab0:	20000372 	.word	0x20000372
    5ab4:	00005249 	.word	0x00005249
    5ab8:	20000c58 	.word	0x20000c58
    5abc:	20000d18 	.word	0x20000d18
    5ac0:	20000adc 	.word	0x20000adc
    5ac4:	20000b8c 	.word	0x20000b8c
    5ac8:	20000914 	.word	0x20000914
    5acc:	20000dc0 	.word	0x20000dc0
    5ad0:	20000b40 	.word	0x20000b40
    5ad4:	00005889 	.word	0x00005889

00005ad8 <fanStop_emc2305>:

void fanStop_emc2305(struct fan_vars *fan_inst)
{
    5ad8:	b580      	push	{r7, lr}
    5ada:	b082      	sub	sp, #8
    5adc:	af00      	add	r7, sp, #0
    5ade:	6078      	str	r0, [r7, #4]
	if (fan_inst == &fan1)
    5ae0:	687a      	ldr	r2, [r7, #4]
    5ae2:	4b34      	ldr	r3, [pc, #208]	; (5bb4 <fanStop_emc2305+0xdc>)
    5ae4:	429a      	cmp	r2, r3
    5ae6:	d107      	bne.n	5af8 <fanStop_emc2305+0x20>
	{
		port_pin_set_output_level_EX(PIN_ENBL_FAN1, LOW, enableManualOverride);
    5ae8:	4b33      	ldr	r3, [pc, #204]	; (5bb8 <fanStop_emc2305+0xe0>)
    5aea:	781b      	ldrb	r3, [r3, #0]
    5aec:	2015      	movs	r0, #21
    5aee:	2100      	movs	r1, #0
    5af0:	1c1a      	adds	r2, r3, #0
    5af2:	4b32      	ldr	r3, [pc, #200]	; (5bbc <fanStop_emc2305+0xe4>)
    5af4:	4798      	blx	r3
    5af6:	e052      	b.n	5b9e <fanStop_emc2305+0xc6>
	}
	else if (fan_inst == &fan2)
    5af8:	687a      	ldr	r2, [r7, #4]
    5afa:	4b31      	ldr	r3, [pc, #196]	; (5bc0 <fanStop_emc2305+0xe8>)
    5afc:	429a      	cmp	r2, r3
    5afe:	d107      	bne.n	5b10 <fanStop_emc2305+0x38>
	{
		port_pin_set_output_level_EX(PIN_ENBL_FAN2, LOW, enableManualOverride);
    5b00:	4b2d      	ldr	r3, [pc, #180]	; (5bb8 <fanStop_emc2305+0xe0>)
    5b02:	781b      	ldrb	r3, [r3, #0]
    5b04:	2014      	movs	r0, #20
    5b06:	2100      	movs	r1, #0
    5b08:	1c1a      	adds	r2, r3, #0
    5b0a:	4b2c      	ldr	r3, [pc, #176]	; (5bbc <fanStop_emc2305+0xe4>)
    5b0c:	4798      	blx	r3
    5b0e:	e046      	b.n	5b9e <fanStop_emc2305+0xc6>
	}
	else if (fan_inst == &fan3)
    5b10:	687a      	ldr	r2, [r7, #4]
    5b12:	4b2c      	ldr	r3, [pc, #176]	; (5bc4 <fanStop_emc2305+0xec>)
    5b14:	429a      	cmp	r2, r3
    5b16:	d107      	bne.n	5b28 <fanStop_emc2305+0x50>
	{
		port_pin_set_output_level_EX(PIN_ENBL_FAN3, LOW, enableManualOverride);
    5b18:	4b27      	ldr	r3, [pc, #156]	; (5bb8 <fanStop_emc2305+0xe0>)
    5b1a:	781b      	ldrb	r3, [r3, #0]
    5b1c:	2013      	movs	r0, #19
    5b1e:	2100      	movs	r1, #0
    5b20:	1c1a      	adds	r2, r3, #0
    5b22:	4b26      	ldr	r3, [pc, #152]	; (5bbc <fanStop_emc2305+0xe4>)
    5b24:	4798      	blx	r3
    5b26:	e03a      	b.n	5b9e <fanStop_emc2305+0xc6>
	}
	else if (fan_inst == &fan4)
    5b28:	687a      	ldr	r2, [r7, #4]
    5b2a:	4b27      	ldr	r3, [pc, #156]	; (5bc8 <fanStop_emc2305+0xf0>)
    5b2c:	429a      	cmp	r2, r3
    5b2e:	d107      	bne.n	5b40 <fanStop_emc2305+0x68>
	{
		port_pin_set_output_level_EX(PIN_ENBL_FAN4, LOW, enableManualOverride);
    5b30:	4b21      	ldr	r3, [pc, #132]	; (5bb8 <fanStop_emc2305+0xe0>)
    5b32:	781b      	ldrb	r3, [r3, #0]
    5b34:	202c      	movs	r0, #44	; 0x2c
    5b36:	2100      	movs	r1, #0
    5b38:	1c1a      	adds	r2, r3, #0
    5b3a:	4b20      	ldr	r3, [pc, #128]	; (5bbc <fanStop_emc2305+0xe4>)
    5b3c:	4798      	blx	r3
    5b3e:	e02e      	b.n	5b9e <fanStop_emc2305+0xc6>
	}
	else if (fan_inst == &fan5)
    5b40:	687a      	ldr	r2, [r7, #4]
    5b42:	4b22      	ldr	r3, [pc, #136]	; (5bcc <fanStop_emc2305+0xf4>)
    5b44:	429a      	cmp	r2, r3
    5b46:	d107      	bne.n	5b58 <fanStop_emc2305+0x80>
	{
		port_pin_set_output_level_EX(PIN_ENBL_FAN5, LOW, enableManualOverride);
    5b48:	4b1b      	ldr	r3, [pc, #108]	; (5bb8 <fanStop_emc2305+0xe0>)
    5b4a:	781b      	ldrb	r3, [r3, #0]
    5b4c:	2017      	movs	r0, #23
    5b4e:	2100      	movs	r1, #0
    5b50:	1c1a      	adds	r2, r3, #0
    5b52:	4b1a      	ldr	r3, [pc, #104]	; (5bbc <fanStop_emc2305+0xe4>)
    5b54:	4798      	blx	r3
    5b56:	e022      	b.n	5b9e <fanStop_emc2305+0xc6>
	}	
	else if (fan_inst == &fan6)
    5b58:	687a      	ldr	r2, [r7, #4]
    5b5a:	4b1d      	ldr	r3, [pc, #116]	; (5bd0 <fanStop_emc2305+0xf8>)
    5b5c:	429a      	cmp	r2, r3
    5b5e:	d107      	bne.n	5b70 <fanStop_emc2305+0x98>
	{
		port_pin_set_output_level_EX(PIN_ENBL_FAN6, LOW, enableManualOverride);
    5b60:	4b15      	ldr	r3, [pc, #84]	; (5bb8 <fanStop_emc2305+0xe0>)
    5b62:	781b      	ldrb	r3, [r3, #0]
    5b64:	2016      	movs	r0, #22
    5b66:	2100      	movs	r1, #0
    5b68:	1c1a      	adds	r2, r3, #0
    5b6a:	4b14      	ldr	r3, [pc, #80]	; (5bbc <fanStop_emc2305+0xe4>)
    5b6c:	4798      	blx	r3
    5b6e:	e016      	b.n	5b9e <fanStop_emc2305+0xc6>
	}	
	else if (fan_inst == &fan7)
    5b70:	687a      	ldr	r2, [r7, #4]
    5b72:	4b18      	ldr	r3, [pc, #96]	; (5bd4 <fanStop_emc2305+0xfc>)
    5b74:	429a      	cmp	r2, r3
    5b76:	d107      	bne.n	5b88 <fanStop_emc2305+0xb0>
	{
		port_pin_set_output_level_EX(PIN_ENBL_FAN7, LOW, enableManualOverride);
    5b78:	4b0f      	ldr	r3, [pc, #60]	; (5bb8 <fanStop_emc2305+0xe0>)
    5b7a:	781b      	ldrb	r3, [r3, #0]
    5b7c:	2007      	movs	r0, #7
    5b7e:	2100      	movs	r1, #0
    5b80:	1c1a      	adds	r2, r3, #0
    5b82:	4b0e      	ldr	r3, [pc, #56]	; (5bbc <fanStop_emc2305+0xe4>)
    5b84:	4798      	blx	r3
    5b86:	e00a      	b.n	5b9e <fanStop_emc2305+0xc6>
	}	
	else if (fan_inst == &fan8)
    5b88:	687a      	ldr	r2, [r7, #4]
    5b8a:	4b13      	ldr	r3, [pc, #76]	; (5bd8 <fanStop_emc2305+0x100>)
    5b8c:	429a      	cmp	r2, r3
    5b8e:	d106      	bne.n	5b9e <fanStop_emc2305+0xc6>
	{
		port_pin_set_output_level_EX(PIN_ENBL_FAN8, LOW, enableManualOverride);
    5b90:	4b09      	ldr	r3, [pc, #36]	; (5bb8 <fanStop_emc2305+0xe0>)
    5b92:	781b      	ldrb	r3, [r3, #0]
    5b94:	2006      	movs	r0, #6
    5b96:	2100      	movs	r1, #0
    5b98:	1c1a      	adds	r2, r3, #0
    5b9a:	4b08      	ldr	r3, [pc, #32]	; (5bbc <fanStop_emc2305+0xe4>)
    5b9c:	4798      	blx	r3
	}	
	
	fanSetSpeed_emc2305(fan_inst, 0);		
    5b9e:	687b      	ldr	r3, [r7, #4]
    5ba0:	1c18      	adds	r0, r3, #0
    5ba2:	2100      	movs	r1, #0
    5ba4:	4b0d      	ldr	r3, [pc, #52]	; (5bdc <fanStop_emc2305+0x104>)
    5ba6:	4798      	blx	r3
	fan_inst->state = OFF;
    5ba8:	687b      	ldr	r3, [r7, #4]
    5baa:	2200      	movs	r2, #0
    5bac:	755a      	strb	r2, [r3, #21]
}
    5bae:	46bd      	mov	sp, r7
    5bb0:	b002      	add	sp, #8
    5bb2:	bd80      	pop	{r7, pc}
    5bb4:	20000e84 	.word	0x20000e84
    5bb8:	20000372 	.word	0x20000372
    5bbc:	00005249 	.word	0x00005249
    5bc0:	20000c58 	.word	0x20000c58
    5bc4:	20000d18 	.word	0x20000d18
    5bc8:	20000adc 	.word	0x20000adc
    5bcc:	20000b8c 	.word	0x20000b8c
    5bd0:	20000914 	.word	0x20000914
    5bd4:	20000dc0 	.word	0x20000dc0
    5bd8:	20000b40 	.word	0x20000b40
    5bdc:	00005889 	.word	0x00005889

00005be0 <fanReadRpm_emc2305>:

uint8_t fanReadRpm_emc2305(struct fan_vars *fan_inst)
{	
    5be0:	b590      	push	{r4, r7, lr}
    5be2:	b087      	sub	sp, #28
    5be4:	af00      	add	r7, sp, #0
    5be6:	6078      	str	r0, [r7, #4]
	uint8_t err = 0;
    5be8:	1c3b      	adds	r3, r7, #0
    5bea:	3312      	adds	r3, #18
    5bec:	2200      	movs	r2, #0
    5bee:	701a      	strb	r2, [r3, #0]
	uint8_t tach_high_byte = 0;
    5bf0:	1c3b      	adds	r3, r7, #0
    5bf2:	3311      	adds	r3, #17
    5bf4:	2200      	movs	r2, #0
    5bf6:	701a      	strb	r2, [r3, #0]
	uint8_t tach_low_byte = 0;
    5bf8:	1c3b      	adds	r3, r7, #0
    5bfa:	3310      	adds	r3, #16
    5bfc:	2200      	movs	r2, #0
    5bfe:	701a      	strb	r2, [r3, #0]
	uint32_t k = 0;
    5c00:	2300      	movs	r3, #0
    5c02:	617b      	str	r3, [r7, #20]
	uint16_t tach = 0;
    5c04:	1c3b      	adds	r3, r7, #0
    5c06:	330e      	adds	r3, #14
    5c08:	2200      	movs	r2, #0
    5c0a:	801a      	strh	r2, [r3, #0]
	uint8_t fan_chip = FAN_CHIP1;
    5c0c:	1c3b      	adds	r3, r7, #0
    5c0e:	3313      	adds	r3, #19
    5c10:	2201      	movs	r2, #1
    5c12:	701a      	strb	r2, [r3, #0]
	
	// read tach count
	if (fan_inst == &fan1)
    5c14:	687a      	ldr	r2, [r7, #4]
    5c16:	4b6d      	ldr	r3, [pc, #436]	; (5dcc <fanReadRpm_emc2305+0x1ec>)
    5c18:	429a      	cmp	r2, r3
    5c1a:	d109      	bne.n	5c30 <fanReadRpm_emc2305+0x50>
	{
		i2c_txdat[0] = 0x3e;
    5c1c:	4b6c      	ldr	r3, [pc, #432]	; (5dd0 <fanReadRpm_emc2305+0x1f0>)
    5c1e:	223e      	movs	r2, #62	; 0x3e
    5c20:	701a      	strb	r2, [r3, #0]
		k = 2;
    5c22:	2302      	movs	r3, #2
    5c24:	617b      	str	r3, [r7, #20]
		fan_chip = FAN_CHIP1;
    5c26:	1c3b      	adds	r3, r7, #0
    5c28:	3313      	adds	r3, #19
    5c2a:	2201      	movs	r2, #1
    5c2c:	701a      	strb	r2, [r3, #0]
    5c2e:	e060      	b.n	5cf2 <fanReadRpm_emc2305+0x112>
	}
	else if (fan_inst == &fan2)
    5c30:	687a      	ldr	r2, [r7, #4]
    5c32:	4b68      	ldr	r3, [pc, #416]	; (5dd4 <fanReadRpm_emc2305+0x1f4>)
    5c34:	429a      	cmp	r2, r3
    5c36:	d109      	bne.n	5c4c <fanReadRpm_emc2305+0x6c>
	{
		i2c_txdat[0] = 0x4e;
    5c38:	4b65      	ldr	r3, [pc, #404]	; (5dd0 <fanReadRpm_emc2305+0x1f0>)
    5c3a:	224e      	movs	r2, #78	; 0x4e
    5c3c:	701a      	strb	r2, [r3, #0]
		k = 2;
    5c3e:	2302      	movs	r3, #2
    5c40:	617b      	str	r3, [r7, #20]
		fan_chip = FAN_CHIP1;
    5c42:	1c3b      	adds	r3, r7, #0
    5c44:	3313      	adds	r3, #19
    5c46:	2201      	movs	r2, #1
    5c48:	701a      	strb	r2, [r3, #0]
    5c4a:	e052      	b.n	5cf2 <fanReadRpm_emc2305+0x112>
	}
	else if (fan_inst == &fan3)
    5c4c:	687a      	ldr	r2, [r7, #4]
    5c4e:	4b62      	ldr	r3, [pc, #392]	; (5dd8 <fanReadRpm_emc2305+0x1f8>)
    5c50:	429a      	cmp	r2, r3
    5c52:	d109      	bne.n	5c68 <fanReadRpm_emc2305+0x88>
	{
		i2c_txdat[0] = 0x5e;
    5c54:	4b5e      	ldr	r3, [pc, #376]	; (5dd0 <fanReadRpm_emc2305+0x1f0>)
    5c56:	225e      	movs	r2, #94	; 0x5e
    5c58:	701a      	strb	r2, [r3, #0]
		k = 2;
    5c5a:	2302      	movs	r3, #2
    5c5c:	617b      	str	r3, [r7, #20]
		fan_chip = FAN_CHIP1;
    5c5e:	1c3b      	adds	r3, r7, #0
    5c60:	3313      	adds	r3, #19
    5c62:	2201      	movs	r2, #1
    5c64:	701a      	strb	r2, [r3, #0]
    5c66:	e044      	b.n	5cf2 <fanReadRpm_emc2305+0x112>
	}
	else if (fan_inst == &fan4)
    5c68:	687a      	ldr	r2, [r7, #4]
    5c6a:	4b5c      	ldr	r3, [pc, #368]	; (5ddc <fanReadRpm_emc2305+0x1fc>)
    5c6c:	429a      	cmp	r2, r3
    5c6e:	d109      	bne.n	5c84 <fanReadRpm_emc2305+0xa4>
	{
		i2c_txdat[0] = 0x6e;
    5c70:	4b57      	ldr	r3, [pc, #348]	; (5dd0 <fanReadRpm_emc2305+0x1f0>)
    5c72:	226e      	movs	r2, #110	; 0x6e
    5c74:	701a      	strb	r2, [r3, #0]
		k = 2;
    5c76:	2302      	movs	r3, #2
    5c78:	617b      	str	r3, [r7, #20]
		fan_chip = FAN_CHIP1;
    5c7a:	1c3b      	adds	r3, r7, #0
    5c7c:	3313      	adds	r3, #19
    5c7e:	2201      	movs	r2, #1
    5c80:	701a      	strb	r2, [r3, #0]
    5c82:	e036      	b.n	5cf2 <fanReadRpm_emc2305+0x112>
	}
	else if (fan_inst == &fan5)
    5c84:	687a      	ldr	r2, [r7, #4]
    5c86:	4b56      	ldr	r3, [pc, #344]	; (5de0 <fanReadRpm_emc2305+0x200>)
    5c88:	429a      	cmp	r2, r3
    5c8a:	d109      	bne.n	5ca0 <fanReadRpm_emc2305+0xc0>
	{
		i2c_txdat[0] = 0x3e;
    5c8c:	4b50      	ldr	r3, [pc, #320]	; (5dd0 <fanReadRpm_emc2305+0x1f0>)
    5c8e:	223e      	movs	r2, #62	; 0x3e
    5c90:	701a      	strb	r2, [r3, #0]
		k = 2;
    5c92:	2302      	movs	r3, #2
    5c94:	617b      	str	r3, [r7, #20]
		fan_chip = FAN_CHIP2;
    5c96:	1c3b      	adds	r3, r7, #0
    5c98:	3313      	adds	r3, #19
    5c9a:	2202      	movs	r2, #2
    5c9c:	701a      	strb	r2, [r3, #0]
    5c9e:	e028      	b.n	5cf2 <fanReadRpm_emc2305+0x112>
	}
	else if (fan_inst == &fan6)
    5ca0:	687a      	ldr	r2, [r7, #4]
    5ca2:	4b50      	ldr	r3, [pc, #320]	; (5de4 <fanReadRpm_emc2305+0x204>)
    5ca4:	429a      	cmp	r2, r3
    5ca6:	d109      	bne.n	5cbc <fanReadRpm_emc2305+0xdc>
	{
		i2c_txdat[0] = 0x4e;
    5ca8:	4b49      	ldr	r3, [pc, #292]	; (5dd0 <fanReadRpm_emc2305+0x1f0>)
    5caa:	224e      	movs	r2, #78	; 0x4e
    5cac:	701a      	strb	r2, [r3, #0]
		k = 2;
    5cae:	2302      	movs	r3, #2
    5cb0:	617b      	str	r3, [r7, #20]
		fan_chip = FAN_CHIP2;
    5cb2:	1c3b      	adds	r3, r7, #0
    5cb4:	3313      	adds	r3, #19
    5cb6:	2202      	movs	r2, #2
    5cb8:	701a      	strb	r2, [r3, #0]
    5cba:	e01a      	b.n	5cf2 <fanReadRpm_emc2305+0x112>
	}
	else if (fan_inst == &fan7)
    5cbc:	687a      	ldr	r2, [r7, #4]
    5cbe:	4b4a      	ldr	r3, [pc, #296]	; (5de8 <fanReadRpm_emc2305+0x208>)
    5cc0:	429a      	cmp	r2, r3
    5cc2:	d109      	bne.n	5cd8 <fanReadRpm_emc2305+0xf8>
	{
		i2c_txdat[0] = 0x5e;
    5cc4:	4b42      	ldr	r3, [pc, #264]	; (5dd0 <fanReadRpm_emc2305+0x1f0>)
    5cc6:	225e      	movs	r2, #94	; 0x5e
    5cc8:	701a      	strb	r2, [r3, #0]
		k = 2;
    5cca:	2302      	movs	r3, #2
    5ccc:	617b      	str	r3, [r7, #20]
		fan_chip = FAN_CHIP2;
    5cce:	1c3b      	adds	r3, r7, #0
    5cd0:	3313      	adds	r3, #19
    5cd2:	2202      	movs	r2, #2
    5cd4:	701a      	strb	r2, [r3, #0]
    5cd6:	e00c      	b.n	5cf2 <fanReadRpm_emc2305+0x112>
	}
	else if (fan_inst == &fan8)
    5cd8:	687a      	ldr	r2, [r7, #4]
    5cda:	4b44      	ldr	r3, [pc, #272]	; (5dec <fanReadRpm_emc2305+0x20c>)
    5cdc:	429a      	cmp	r2, r3
    5cde:	d108      	bne.n	5cf2 <fanReadRpm_emc2305+0x112>
	{
		i2c_txdat[0] = 0x6e;
    5ce0:	4b3b      	ldr	r3, [pc, #236]	; (5dd0 <fanReadRpm_emc2305+0x1f0>)
    5ce2:	226e      	movs	r2, #110	; 0x6e
    5ce4:	701a      	strb	r2, [r3, #0]
		k = 2;
    5ce6:	2302      	movs	r3, #2
    5ce8:	617b      	str	r3, [r7, #20]
		fan_chip = FAN_CHIP2;
    5cea:	1c3b      	adds	r3, r7, #0
    5cec:	3313      	adds	r3, #19
    5cee:	2202      	movs	r2, #2
    5cf0:	701a      	strb	r2, [r3, #0]
	}	
			
	err = i2cWriteRead_emc2305(1, fan_chip);
    5cf2:	1c3c      	adds	r4, r7, #0
    5cf4:	3412      	adds	r4, #18
    5cf6:	1c3b      	adds	r3, r7, #0
    5cf8:	3313      	adds	r3, #19
    5cfa:	781b      	ldrb	r3, [r3, #0]
    5cfc:	2001      	movs	r0, #1
    5cfe:	1c19      	adds	r1, r3, #0
    5d00:	4b3b      	ldr	r3, [pc, #236]	; (5df0 <fanReadRpm_emc2305+0x210>)
    5d02:	4798      	blx	r3
    5d04:	1c03      	adds	r3, r0, #0
    5d06:	7023      	strb	r3, [r4, #0]
	if (err != STATUS_OK)
    5d08:	1c3b      	adds	r3, r7, #0
    5d0a:	3312      	adds	r3, #18
    5d0c:	781b      	ldrb	r3, [r3, #0]
    5d0e:	2b00      	cmp	r3, #0
    5d10:	d003      	beq.n	5d1a <fanReadRpm_emc2305+0x13a>
	{
		return err;
    5d12:	1c3b      	adds	r3, r7, #0
    5d14:	3312      	adds	r3, #18
    5d16:	781b      	ldrb	r3, [r3, #0]
    5d18:	e053      	b.n	5dc2 <fanReadRpm_emc2305+0x1e2>
	}
	tach_high_byte = i2c_rxdat[0];
    5d1a:	1c3b      	adds	r3, r7, #0
    5d1c:	3311      	adds	r3, #17
    5d1e:	4a35      	ldr	r2, [pc, #212]	; (5df4 <fanReadRpm_emc2305+0x214>)
    5d20:	7812      	ldrb	r2, [r2, #0]
    5d22:	701a      	strb	r2, [r3, #0]
	i2c_txdat[0]++;
    5d24:	4b2a      	ldr	r3, [pc, #168]	; (5dd0 <fanReadRpm_emc2305+0x1f0>)
    5d26:	781b      	ldrb	r3, [r3, #0]
    5d28:	3301      	adds	r3, #1
    5d2a:	b2da      	uxtb	r2, r3
    5d2c:	4b28      	ldr	r3, [pc, #160]	; (5dd0 <fanReadRpm_emc2305+0x1f0>)
    5d2e:	701a      	strb	r2, [r3, #0]
	err = i2cWriteRead_emc2305(1, fan_chip);
    5d30:	1c3c      	adds	r4, r7, #0
    5d32:	3412      	adds	r4, #18
    5d34:	1c3b      	adds	r3, r7, #0
    5d36:	3313      	adds	r3, #19
    5d38:	781b      	ldrb	r3, [r3, #0]
    5d3a:	2001      	movs	r0, #1
    5d3c:	1c19      	adds	r1, r3, #0
    5d3e:	4b2c      	ldr	r3, [pc, #176]	; (5df0 <fanReadRpm_emc2305+0x210>)
    5d40:	4798      	blx	r3
    5d42:	1c03      	adds	r3, r0, #0
    5d44:	7023      	strb	r3, [r4, #0]
	if (err != STATUS_OK)
    5d46:	1c3b      	adds	r3, r7, #0
    5d48:	3312      	adds	r3, #18
    5d4a:	781b      	ldrb	r3, [r3, #0]
    5d4c:	2b00      	cmp	r3, #0
    5d4e:	d003      	beq.n	5d58 <fanReadRpm_emc2305+0x178>
	{
		return err;
    5d50:	1c3b      	adds	r3, r7, #0
    5d52:	3312      	adds	r3, #18
    5d54:	781b      	ldrb	r3, [r3, #0]
    5d56:	e034      	b.n	5dc2 <fanReadRpm_emc2305+0x1e2>
	}
	tach_low_byte = i2c_rxdat[0];
    5d58:	1c3b      	adds	r3, r7, #0
    5d5a:	3310      	adds	r3, #16
    5d5c:	4a25      	ldr	r2, [pc, #148]	; (5df4 <fanReadRpm_emc2305+0x214>)
    5d5e:	7812      	ldrb	r2, [r2, #0]
    5d60:	701a      	strb	r2, [r3, #0]
	tach = (tach_high_byte<<5) + (tach_low_byte>>3);
    5d62:	1c3b      	adds	r3, r7, #0
    5d64:	3311      	adds	r3, #17
    5d66:	781b      	ldrb	r3, [r3, #0]
    5d68:	b29b      	uxth	r3, r3
    5d6a:	015b      	lsls	r3, r3, #5
    5d6c:	b299      	uxth	r1, r3
    5d6e:	1c3b      	adds	r3, r7, #0
    5d70:	3310      	adds	r3, #16
    5d72:	781b      	ldrb	r3, [r3, #0]
    5d74:	08db      	lsrs	r3, r3, #3
    5d76:	b2db      	uxtb	r3, r3
    5d78:	1c1a      	adds	r2, r3, #0
    5d7a:	1c3b      	adds	r3, r7, #0
    5d7c:	330e      	adds	r3, #14
    5d7e:	188a      	adds	r2, r1, r2
    5d80:	801a      	strh	r2, [r3, #0]
	
	fan_inst->rpm = (uint32_t) ( (float) (k*FAN_SAMPLE_FREQ*60) / tach );	
    5d82:	697a      	ldr	r2, [r7, #20]
    5d84:	1c13      	adds	r3, r2, #0
    5d86:	011b      	lsls	r3, r3, #4
    5d88:	1a9b      	subs	r3, r3, r2
    5d8a:	045b      	lsls	r3, r3, #17
    5d8c:	1c1a      	adds	r2, r3, #0
    5d8e:	4b1a      	ldr	r3, [pc, #104]	; (5df8 <fanReadRpm_emc2305+0x218>)
    5d90:	1c10      	adds	r0, r2, #0
    5d92:	4798      	blx	r3
    5d94:	1c04      	adds	r4, r0, #0
    5d96:	1c3b      	adds	r3, r7, #0
    5d98:	330e      	adds	r3, #14
    5d9a:	881a      	ldrh	r2, [r3, #0]
    5d9c:	4b17      	ldr	r3, [pc, #92]	; (5dfc <fanReadRpm_emc2305+0x21c>)
    5d9e:	1c10      	adds	r0, r2, #0
    5da0:	4798      	blx	r3
    5da2:	1c02      	adds	r2, r0, #0
    5da4:	4b16      	ldr	r3, [pc, #88]	; (5e00 <fanReadRpm_emc2305+0x220>)
    5da6:	1c20      	adds	r0, r4, #0
    5da8:	1c11      	adds	r1, r2, #0
    5daa:	4798      	blx	r3
    5dac:	1c03      	adds	r3, r0, #0
    5dae:	1c1a      	adds	r2, r3, #0
    5db0:	4b14      	ldr	r3, [pc, #80]	; (5e04 <fanReadRpm_emc2305+0x224>)
    5db2:	1c10      	adds	r0, r2, #0
    5db4:	4798      	blx	r3
    5db6:	1c02      	adds	r2, r0, #0
    5db8:	687b      	ldr	r3, [r7, #4]
    5dba:	611a      	str	r2, [r3, #16]
	
	return err;
    5dbc:	1c3b      	adds	r3, r7, #0
    5dbe:	3312      	adds	r3, #18
    5dc0:	781b      	ldrb	r3, [r3, #0]
}
    5dc2:	1c18      	adds	r0, r3, #0
    5dc4:	46bd      	mov	sp, r7
    5dc6:	b007      	add	sp, #28
    5dc8:	bd90      	pop	{r4, r7, pc}
    5dca:	46c0      	nop			; (mov r8, r8)
    5dcc:	20000e84 	.word	0x20000e84
    5dd0:	20000040 	.word	0x20000040
    5dd4:	20000c58 	.word	0x20000c58
    5dd8:	20000d18 	.word	0x20000d18
    5ddc:	20000adc 	.word	0x20000adc
    5de0:	20000b8c 	.word	0x20000b8c
    5de4:	20000914 	.word	0x20000914
    5de8:	20000dc0 	.word	0x20000dc0
    5dec:	20000b40 	.word	0x20000b40
    5df0:	00005331 	.word	0x00005331
    5df4:	200002e8 	.word	0x200002e8
    5df8:	0002046d 	.word	0x0002046d
    5dfc:	000203b5 	.word	0x000203b5
    5e00:	0001fa75 	.word	0x0001fa75
    5e04:	0001f6bd 	.word	0x0001f6bd

00005e08 <fanReadConfig_emc2305>:

uint8_t fanReadConfig_emc2305(struct fan_vars *fan_inst)
{
    5e08:	b590      	push	{r4, r7, lr}
    5e0a:	b085      	sub	sp, #20
    5e0c:	af00      	add	r7, sp, #0
    5e0e:	6078      	str	r0, [r7, #4]
	uint8_t err = 0;
    5e10:	1c3b      	adds	r3, r7, #0
    5e12:	330e      	adds	r3, #14
    5e14:	2200      	movs	r2, #0
    5e16:	701a      	strb	r2, [r3, #0]
	uint8_t fan_chip = FAN_CHIP1;
    5e18:	1c3b      	adds	r3, r7, #0
    5e1a:	330f      	adds	r3, #15
    5e1c:	2201      	movs	r2, #1
    5e1e:	701a      	strb	r2, [r3, #0]

	// read fan config
	if (fan_inst == &fan1)
    5e20:	687a      	ldr	r2, [r7, #4]
    5e22:	4b44      	ldr	r3, [pc, #272]	; (5f34 <fanReadConfig_emc2305+0x12c>)
    5e24:	429a      	cmp	r2, r3
    5e26:	d107      	bne.n	5e38 <fanReadConfig_emc2305+0x30>
	{
		i2c_txdat[0] = 0x32;
    5e28:	4b43      	ldr	r3, [pc, #268]	; (5f38 <fanReadConfig_emc2305+0x130>)
    5e2a:	2232      	movs	r2, #50	; 0x32
    5e2c:	701a      	strb	r2, [r3, #0]
		fan_chip = FAN_CHIP1;
    5e2e:	1c3b      	adds	r3, r7, #0
    5e30:	330f      	adds	r3, #15
    5e32:	2201      	movs	r2, #1
    5e34:	701a      	strb	r2, [r3, #0]
    5e36:	e052      	b.n	5ede <fanReadConfig_emc2305+0xd6>
	}
	else if (fan_inst == &fan2)
    5e38:	687a      	ldr	r2, [r7, #4]
    5e3a:	4b40      	ldr	r3, [pc, #256]	; (5f3c <fanReadConfig_emc2305+0x134>)
    5e3c:	429a      	cmp	r2, r3
    5e3e:	d107      	bne.n	5e50 <fanReadConfig_emc2305+0x48>
	{
		i2c_txdat[0] = 0x42;
    5e40:	4b3d      	ldr	r3, [pc, #244]	; (5f38 <fanReadConfig_emc2305+0x130>)
    5e42:	2242      	movs	r2, #66	; 0x42
    5e44:	701a      	strb	r2, [r3, #0]
		fan_chip = FAN_CHIP1;
    5e46:	1c3b      	adds	r3, r7, #0
    5e48:	330f      	adds	r3, #15
    5e4a:	2201      	movs	r2, #1
    5e4c:	701a      	strb	r2, [r3, #0]
    5e4e:	e046      	b.n	5ede <fanReadConfig_emc2305+0xd6>
	}
	else if (fan_inst == &fan3)
    5e50:	687a      	ldr	r2, [r7, #4]
    5e52:	4b3b      	ldr	r3, [pc, #236]	; (5f40 <fanReadConfig_emc2305+0x138>)
    5e54:	429a      	cmp	r2, r3
    5e56:	d107      	bne.n	5e68 <fanReadConfig_emc2305+0x60>
	{
		i2c_txdat[0] = 0x52;
    5e58:	4b37      	ldr	r3, [pc, #220]	; (5f38 <fanReadConfig_emc2305+0x130>)
    5e5a:	2252      	movs	r2, #82	; 0x52
    5e5c:	701a      	strb	r2, [r3, #0]
		fan_chip = FAN_CHIP1;
    5e5e:	1c3b      	adds	r3, r7, #0
    5e60:	330f      	adds	r3, #15
    5e62:	2201      	movs	r2, #1
    5e64:	701a      	strb	r2, [r3, #0]
    5e66:	e03a      	b.n	5ede <fanReadConfig_emc2305+0xd6>
	}
	else if (fan_inst == &fan4)
    5e68:	687a      	ldr	r2, [r7, #4]
    5e6a:	4b36      	ldr	r3, [pc, #216]	; (5f44 <fanReadConfig_emc2305+0x13c>)
    5e6c:	429a      	cmp	r2, r3
    5e6e:	d107      	bne.n	5e80 <fanReadConfig_emc2305+0x78>
	{
		i2c_txdat[0] = 0x62;
    5e70:	4b31      	ldr	r3, [pc, #196]	; (5f38 <fanReadConfig_emc2305+0x130>)
    5e72:	2262      	movs	r2, #98	; 0x62
    5e74:	701a      	strb	r2, [r3, #0]
		fan_chip = FAN_CHIP1;
    5e76:	1c3b      	adds	r3, r7, #0
    5e78:	330f      	adds	r3, #15
    5e7a:	2201      	movs	r2, #1
    5e7c:	701a      	strb	r2, [r3, #0]
    5e7e:	e02e      	b.n	5ede <fanReadConfig_emc2305+0xd6>
	}
	else if (fan_inst == &fan5)
    5e80:	687a      	ldr	r2, [r7, #4]
    5e82:	4b31      	ldr	r3, [pc, #196]	; (5f48 <fanReadConfig_emc2305+0x140>)
    5e84:	429a      	cmp	r2, r3
    5e86:	d107      	bne.n	5e98 <fanReadConfig_emc2305+0x90>
	{
		i2c_txdat[0] = 0x32;
    5e88:	4b2b      	ldr	r3, [pc, #172]	; (5f38 <fanReadConfig_emc2305+0x130>)
    5e8a:	2232      	movs	r2, #50	; 0x32
    5e8c:	701a      	strb	r2, [r3, #0]
		fan_chip = FAN_CHIP2;
    5e8e:	1c3b      	adds	r3, r7, #0
    5e90:	330f      	adds	r3, #15
    5e92:	2202      	movs	r2, #2
    5e94:	701a      	strb	r2, [r3, #0]
    5e96:	e022      	b.n	5ede <fanReadConfig_emc2305+0xd6>
	}
	else if (fan_inst == &fan6)
    5e98:	687a      	ldr	r2, [r7, #4]
    5e9a:	4b2c      	ldr	r3, [pc, #176]	; (5f4c <fanReadConfig_emc2305+0x144>)
    5e9c:	429a      	cmp	r2, r3
    5e9e:	d107      	bne.n	5eb0 <fanReadConfig_emc2305+0xa8>
	{
		i2c_txdat[0] = 0x42;
    5ea0:	4b25      	ldr	r3, [pc, #148]	; (5f38 <fanReadConfig_emc2305+0x130>)
    5ea2:	2242      	movs	r2, #66	; 0x42
    5ea4:	701a      	strb	r2, [r3, #0]
		fan_chip = FAN_CHIP2;
    5ea6:	1c3b      	adds	r3, r7, #0
    5ea8:	330f      	adds	r3, #15
    5eaa:	2202      	movs	r2, #2
    5eac:	701a      	strb	r2, [r3, #0]
    5eae:	e016      	b.n	5ede <fanReadConfig_emc2305+0xd6>
	}
	else if (fan_inst == &fan7)
    5eb0:	687a      	ldr	r2, [r7, #4]
    5eb2:	4b27      	ldr	r3, [pc, #156]	; (5f50 <fanReadConfig_emc2305+0x148>)
    5eb4:	429a      	cmp	r2, r3
    5eb6:	d107      	bne.n	5ec8 <fanReadConfig_emc2305+0xc0>
	{
		i2c_txdat[0] = 0x52;
    5eb8:	4b1f      	ldr	r3, [pc, #124]	; (5f38 <fanReadConfig_emc2305+0x130>)
    5eba:	2252      	movs	r2, #82	; 0x52
    5ebc:	701a      	strb	r2, [r3, #0]
		fan_chip = FAN_CHIP2;
    5ebe:	1c3b      	adds	r3, r7, #0
    5ec0:	330f      	adds	r3, #15
    5ec2:	2202      	movs	r2, #2
    5ec4:	701a      	strb	r2, [r3, #0]
    5ec6:	e00a      	b.n	5ede <fanReadConfig_emc2305+0xd6>
	}
	else if (fan_inst == &fan8)
    5ec8:	687a      	ldr	r2, [r7, #4]
    5eca:	4b22      	ldr	r3, [pc, #136]	; (5f54 <fanReadConfig_emc2305+0x14c>)
    5ecc:	429a      	cmp	r2, r3
    5ece:	d106      	bne.n	5ede <fanReadConfig_emc2305+0xd6>
	{
		i2c_txdat[0] = 0x62;
    5ed0:	4b19      	ldr	r3, [pc, #100]	; (5f38 <fanReadConfig_emc2305+0x130>)
    5ed2:	2262      	movs	r2, #98	; 0x62
    5ed4:	701a      	strb	r2, [r3, #0]
		fan_chip = FAN_CHIP2;
    5ed6:	1c3b      	adds	r3, r7, #0
    5ed8:	330f      	adds	r3, #15
    5eda:	2202      	movs	r2, #2
    5edc:	701a      	strb	r2, [r3, #0]
	}	
		
	err = i2cWriteRead_emc2305(1, fan_chip);
    5ede:	1c3c      	adds	r4, r7, #0
    5ee0:	340e      	adds	r4, #14
    5ee2:	1c3b      	adds	r3, r7, #0
    5ee4:	330f      	adds	r3, #15
    5ee6:	781b      	ldrb	r3, [r3, #0]
    5ee8:	2001      	movs	r0, #1
    5eea:	1c19      	adds	r1, r3, #0
    5eec:	4b1a      	ldr	r3, [pc, #104]	; (5f58 <fanReadConfig_emc2305+0x150>)
    5eee:	4798      	blx	r3
    5ef0:	1c03      	adds	r3, r0, #0
    5ef2:	7023      	strb	r3, [r4, #0]
	if (err != STATUS_OK)
    5ef4:	1c3b      	adds	r3, r7, #0
    5ef6:	330e      	adds	r3, #14
    5ef8:	781b      	ldrb	r3, [r3, #0]
    5efa:	2b00      	cmp	r3, #0
    5efc:	d003      	beq.n	5f06 <fanReadConfig_emc2305+0xfe>
	{
		return err;
    5efe:	1c3b      	adds	r3, r7, #0
    5f00:	330e      	adds	r3, #14
    5f02:	781b      	ldrb	r3, [r3, #0]
    5f04:	e011      	b.n	5f2a <fanReadConfig_emc2305+0x122>
	}
	fan_inst->emc2305_fan_config = i2c_rxdat[0];
    5f06:	4b15      	ldr	r3, [pc, #84]	; (5f5c <fanReadConfig_emc2305+0x154>)
    5f08:	781a      	ldrb	r2, [r3, #0]
    5f0a:	687b      	ldr	r3, [r7, #4]
    5f0c:	771a      	strb	r2, [r3, #28]
	//fan_poles = ((fan_config & 0x18)>>3) + 1;
	fan_inst->emc2305_fan_range = ((fan_inst->emc2305_fan_config & 0x60)>>5) * 2;
    5f0e:	687b      	ldr	r3, [r7, #4]
    5f10:	7f1b      	ldrb	r3, [r3, #28]
    5f12:	1c1a      	adds	r2, r3, #0
    5f14:	2360      	movs	r3, #96	; 0x60
    5f16:	4013      	ands	r3, r2
    5f18:	115b      	asrs	r3, r3, #5
    5f1a:	b2db      	uxtb	r3, r3
    5f1c:	18db      	adds	r3, r3, r3
    5f1e:	b2da      	uxtb	r2, r3
    5f20:	687b      	ldr	r3, [r7, #4]
    5f22:	775a      	strb	r2, [r3, #29]
	
	return err;
    5f24:	1c3b      	adds	r3, r7, #0
    5f26:	330e      	adds	r3, #14
    5f28:	781b      	ldrb	r3, [r3, #0]
}
    5f2a:	1c18      	adds	r0, r3, #0
    5f2c:	46bd      	mov	sp, r7
    5f2e:	b005      	add	sp, #20
    5f30:	bd90      	pop	{r4, r7, pc}
    5f32:	46c0      	nop			; (mov r8, r8)
    5f34:	20000e84 	.word	0x20000e84
    5f38:	20000040 	.word	0x20000040
    5f3c:	20000c58 	.word	0x20000c58
    5f40:	20000d18 	.word	0x20000d18
    5f44:	20000adc 	.word	0x20000adc
    5f48:	20000b8c 	.word	0x20000b8c
    5f4c:	20000914 	.word	0x20000914
    5f50:	20000dc0 	.word	0x20000dc0
    5f54:	20000b40 	.word	0x20000b40
    5f58:	00005331 	.word	0x00005331
    5f5c:	200002e8 	.word	0x200002e8

00005f60 <fanReadStallStatus_emc2305>:

uint8_t fanReadStallStatus_emc2305(void)
{
    5f60:	b590      	push	{r4, r7, lr}
    5f62:	b083      	sub	sp, #12
    5f64:	af00      	add	r7, sp, #0
	uint8_t err = 0;
    5f66:	1dfb      	adds	r3, r7, #7
    5f68:	2200      	movs	r2, #0
    5f6a:	701a      	strb	r2, [r3, #0]
	//uint8_t fan_stall_bit = 0;
	
	i2c_txdat[0] = 0x25;
    5f6c:	4b51      	ldr	r3, [pc, #324]	; (60b4 <fanReadStallStatus_emc2305+0x154>)
    5f6e:	2225      	movs	r2, #37	; 0x25
    5f70:	701a      	strb	r2, [r3, #0]
	err = i2cWriteRead_emc2305(1, FAN_CHIP1);
    5f72:	1dfc      	adds	r4, r7, #7
    5f74:	2001      	movs	r0, #1
    5f76:	2101      	movs	r1, #1
    5f78:	4b4f      	ldr	r3, [pc, #316]	; (60b8 <fanReadStallStatus_emc2305+0x158>)
    5f7a:	4798      	blx	r3
    5f7c:	1c03      	adds	r3, r0, #0
    5f7e:	7023      	strb	r3, [r4, #0]
	if (err != STATUS_OK)
    5f80:	1dfb      	adds	r3, r7, #7
    5f82:	781b      	ldrb	r3, [r3, #0]
    5f84:	2b00      	cmp	r3, #0
    5f86:	d002      	beq.n	5f8e <fanReadStallStatus_emc2305+0x2e>
	{
		return err;
    5f88:	1dfb      	adds	r3, r7, #7
    5f8a:	781b      	ldrb	r3, [r3, #0]
    5f8c:	e08d      	b.n	60aa <fanReadStallStatus_emc2305+0x14a>
	}
	err = i2cWriteRead_emc2305(1, FAN_CHIP1);
    5f8e:	1dfc      	adds	r4, r7, #7
    5f90:	2001      	movs	r0, #1
    5f92:	2101      	movs	r1, #1
    5f94:	4b48      	ldr	r3, [pc, #288]	; (60b8 <fanReadStallStatus_emc2305+0x158>)
    5f96:	4798      	blx	r3
    5f98:	1c03      	adds	r3, r0, #0
    5f9a:	7023      	strb	r3, [r4, #0]
	if (err != STATUS_OK)
    5f9c:	1dfb      	adds	r3, r7, #7
    5f9e:	781b      	ldrb	r3, [r3, #0]
    5fa0:	2b00      	cmp	r3, #0
    5fa2:	d002      	beq.n	5faa <fanReadStallStatus_emc2305+0x4a>
	{
		return err;
    5fa4:	1dfb      	adds	r3, r7, #7
    5fa6:	781b      	ldrb	r3, [r3, #0]
    5fa8:	e07f      	b.n	60aa <fanReadStallStatus_emc2305+0x14a>
	}
	
	fan1.stall = i2c_rxdat[0] & 0x01;
    5faa:	4b44      	ldr	r3, [pc, #272]	; (60bc <fanReadStallStatus_emc2305+0x15c>)
    5fac:	781b      	ldrb	r3, [r3, #0]
    5fae:	1c1a      	adds	r2, r3, #0
    5fb0:	2301      	movs	r3, #1
    5fb2:	4013      	ands	r3, r2
    5fb4:	1e5a      	subs	r2, r3, #1
    5fb6:	4193      	sbcs	r3, r2
    5fb8:	b2da      	uxtb	r2, r3
    5fba:	4b41      	ldr	r3, [pc, #260]	; (60c0 <fanReadStallStatus_emc2305+0x160>)
    5fbc:	779a      	strb	r2, [r3, #30]
	fan2.stall = (i2c_rxdat[0] >> 1) & 0x01;
    5fbe:	4b3f      	ldr	r3, [pc, #252]	; (60bc <fanReadStallStatus_emc2305+0x15c>)
    5fc0:	781b      	ldrb	r3, [r3, #0]
    5fc2:	085b      	lsrs	r3, r3, #1
    5fc4:	b2db      	uxtb	r3, r3
    5fc6:	1c1a      	adds	r2, r3, #0
    5fc8:	2301      	movs	r3, #1
    5fca:	4013      	ands	r3, r2
    5fcc:	1e5a      	subs	r2, r3, #1
    5fce:	4193      	sbcs	r3, r2
    5fd0:	b2da      	uxtb	r2, r3
    5fd2:	4b3c      	ldr	r3, [pc, #240]	; (60c4 <fanReadStallStatus_emc2305+0x164>)
    5fd4:	779a      	strb	r2, [r3, #30]
	fan3.stall = (i2c_rxdat[0] >> 2) & 0x01;
    5fd6:	4b39      	ldr	r3, [pc, #228]	; (60bc <fanReadStallStatus_emc2305+0x15c>)
    5fd8:	781b      	ldrb	r3, [r3, #0]
    5fda:	089b      	lsrs	r3, r3, #2
    5fdc:	b2db      	uxtb	r3, r3
    5fde:	1c1a      	adds	r2, r3, #0
    5fe0:	2301      	movs	r3, #1
    5fe2:	4013      	ands	r3, r2
    5fe4:	1e5a      	subs	r2, r3, #1
    5fe6:	4193      	sbcs	r3, r2
    5fe8:	b2da      	uxtb	r2, r3
    5fea:	4b37      	ldr	r3, [pc, #220]	; (60c8 <fanReadStallStatus_emc2305+0x168>)
    5fec:	779a      	strb	r2, [r3, #30]
	fan4.stall = (i2c_rxdat[0] >> 3) & 0x01;
    5fee:	4b33      	ldr	r3, [pc, #204]	; (60bc <fanReadStallStatus_emc2305+0x15c>)
    5ff0:	781b      	ldrb	r3, [r3, #0]
    5ff2:	08db      	lsrs	r3, r3, #3
    5ff4:	b2db      	uxtb	r3, r3
    5ff6:	1c1a      	adds	r2, r3, #0
    5ff8:	2301      	movs	r3, #1
    5ffa:	4013      	ands	r3, r2
    5ffc:	1e5a      	subs	r2, r3, #1
    5ffe:	4193      	sbcs	r3, r2
    6000:	b2da      	uxtb	r2, r3
    6002:	4b32      	ldr	r3, [pc, #200]	; (60cc <fanReadStallStatus_emc2305+0x16c>)
    6004:	779a      	strb	r2, [r3, #30]

	err = 0;
    6006:	1dfb      	adds	r3, r7, #7
    6008:	2200      	movs	r2, #0
    600a:	701a      	strb	r2, [r3, #0]
	i2c_txdat[0] = 0x25;
    600c:	4b29      	ldr	r3, [pc, #164]	; (60b4 <fanReadStallStatus_emc2305+0x154>)
    600e:	2225      	movs	r2, #37	; 0x25
    6010:	701a      	strb	r2, [r3, #0]
	err = i2cWriteRead_emc2305(1, FAN_CHIP2);
    6012:	1dfc      	adds	r4, r7, #7
    6014:	2001      	movs	r0, #1
    6016:	2102      	movs	r1, #2
    6018:	4b27      	ldr	r3, [pc, #156]	; (60b8 <fanReadStallStatus_emc2305+0x158>)
    601a:	4798      	blx	r3
    601c:	1c03      	adds	r3, r0, #0
    601e:	7023      	strb	r3, [r4, #0]
	if (err != STATUS_OK)
    6020:	1dfb      	adds	r3, r7, #7
    6022:	781b      	ldrb	r3, [r3, #0]
    6024:	2b00      	cmp	r3, #0
    6026:	d002      	beq.n	602e <fanReadStallStatus_emc2305+0xce>
	{
		return err;
    6028:	1dfb      	adds	r3, r7, #7
    602a:	781b      	ldrb	r3, [r3, #0]
    602c:	e03d      	b.n	60aa <fanReadStallStatus_emc2305+0x14a>
	}
	err = i2cWriteRead_emc2305(1, FAN_CHIP2);
    602e:	1dfc      	adds	r4, r7, #7
    6030:	2001      	movs	r0, #1
    6032:	2102      	movs	r1, #2
    6034:	4b20      	ldr	r3, [pc, #128]	; (60b8 <fanReadStallStatus_emc2305+0x158>)
    6036:	4798      	blx	r3
    6038:	1c03      	adds	r3, r0, #0
    603a:	7023      	strb	r3, [r4, #0]
	if (err != STATUS_OK)
    603c:	1dfb      	adds	r3, r7, #7
    603e:	781b      	ldrb	r3, [r3, #0]
    6040:	2b00      	cmp	r3, #0
    6042:	d002      	beq.n	604a <fanReadStallStatus_emc2305+0xea>
	{
		return err;
    6044:	1dfb      	adds	r3, r7, #7
    6046:	781b      	ldrb	r3, [r3, #0]
    6048:	e02f      	b.n	60aa <fanReadStallStatus_emc2305+0x14a>
	}
	
	fan5.stall = i2c_rxdat[0] & 0x01;
    604a:	4b1c      	ldr	r3, [pc, #112]	; (60bc <fanReadStallStatus_emc2305+0x15c>)
    604c:	781b      	ldrb	r3, [r3, #0]
    604e:	1c1a      	adds	r2, r3, #0
    6050:	2301      	movs	r3, #1
    6052:	4013      	ands	r3, r2
    6054:	1e5a      	subs	r2, r3, #1
    6056:	4193      	sbcs	r3, r2
    6058:	b2da      	uxtb	r2, r3
    605a:	4b1d      	ldr	r3, [pc, #116]	; (60d0 <fanReadStallStatus_emc2305+0x170>)
    605c:	779a      	strb	r2, [r3, #30]
	fan6.stall = (i2c_rxdat[0] >> 1) & 0x01;
    605e:	4b17      	ldr	r3, [pc, #92]	; (60bc <fanReadStallStatus_emc2305+0x15c>)
    6060:	781b      	ldrb	r3, [r3, #0]
    6062:	085b      	lsrs	r3, r3, #1
    6064:	b2db      	uxtb	r3, r3
    6066:	1c1a      	adds	r2, r3, #0
    6068:	2301      	movs	r3, #1
    606a:	4013      	ands	r3, r2
    606c:	1e5a      	subs	r2, r3, #1
    606e:	4193      	sbcs	r3, r2
    6070:	b2da      	uxtb	r2, r3
    6072:	4b18      	ldr	r3, [pc, #96]	; (60d4 <fanReadStallStatus_emc2305+0x174>)
    6074:	779a      	strb	r2, [r3, #30]
	fan7.stall = (i2c_rxdat[0] >> 2) & 0x01;
    6076:	4b11      	ldr	r3, [pc, #68]	; (60bc <fanReadStallStatus_emc2305+0x15c>)
    6078:	781b      	ldrb	r3, [r3, #0]
    607a:	089b      	lsrs	r3, r3, #2
    607c:	b2db      	uxtb	r3, r3
    607e:	1c1a      	adds	r2, r3, #0
    6080:	2301      	movs	r3, #1
    6082:	4013      	ands	r3, r2
    6084:	1e5a      	subs	r2, r3, #1
    6086:	4193      	sbcs	r3, r2
    6088:	b2da      	uxtb	r2, r3
    608a:	4b13      	ldr	r3, [pc, #76]	; (60d8 <fanReadStallStatus_emc2305+0x178>)
    608c:	779a      	strb	r2, [r3, #30]
	fan8.stall = (i2c_rxdat[0] >> 3) & 0x01;
    608e:	4b0b      	ldr	r3, [pc, #44]	; (60bc <fanReadStallStatus_emc2305+0x15c>)
    6090:	781b      	ldrb	r3, [r3, #0]
    6092:	08db      	lsrs	r3, r3, #3
    6094:	b2db      	uxtb	r3, r3
    6096:	1c1a      	adds	r2, r3, #0
    6098:	2301      	movs	r3, #1
    609a:	4013      	ands	r3, r2
    609c:	1e5a      	subs	r2, r3, #1
    609e:	4193      	sbcs	r3, r2
    60a0:	b2da      	uxtb	r2, r3
    60a2:	4b0e      	ldr	r3, [pc, #56]	; (60dc <fanReadStallStatus_emc2305+0x17c>)
    60a4:	779a      	strb	r2, [r3, #30]

	return err;
    60a6:	1dfb      	adds	r3, r7, #7
    60a8:	781b      	ldrb	r3, [r3, #0]
}
    60aa:	1c18      	adds	r0, r3, #0
    60ac:	46bd      	mov	sp, r7
    60ae:	b003      	add	sp, #12
    60b0:	bd90      	pop	{r4, r7, pc}
    60b2:	46c0      	nop			; (mov r8, r8)
    60b4:	20000040 	.word	0x20000040
    60b8:	00005331 	.word	0x00005331
    60bc:	200002e8 	.word	0x200002e8
    60c0:	20000e84 	.word	0x20000e84
    60c4:	20000c58 	.word	0x20000c58
    60c8:	20000d18 	.word	0x20000d18
    60cc:	20000adc 	.word	0x20000adc
    60d0:	20000b8c 	.word	0x20000b8c
    60d4:	20000914 	.word	0x20000914
    60d8:	20000dc0 	.word	0x20000dc0
    60dc:	20000b40 	.word	0x20000b40

000060e0 <fanControl>:

void fanControl(struct fan_vars *fan_inst, float voltage)
{
    60e0:	b580      	push	{r7, lr}
    60e2:	b082      	sub	sp, #8
    60e4:	af00      	add	r7, sp, #0
    60e6:	6078      	str	r0, [r7, #4]
    60e8:	6039      	str	r1, [r7, #0]
	//if (inhibitOutput==false) {
	
	if (!enableFanOverride)
    60ea:	4b5a      	ldr	r3, [pc, #360]	; (6254 <fanControl+0x174>)
    60ec:	781b      	ldrb	r3, [r3, #0]
    60ee:	2201      	movs	r2, #1
    60f0:	4053      	eors	r3, r2
    60f2:	b2db      	uxtb	r3, r3
    60f4:	2b00      	cmp	r3, #0
    60f6:	d00c      	beq.n	6112 <fanControl+0x32>
	{
		fan_inst->targetDutyPercent = fanCalcPwmDutyPercent(fan_inst, voltage);
    60f8:	687a      	ldr	r2, [r7, #4]
    60fa:	683b      	ldr	r3, [r7, #0]
    60fc:	1c10      	adds	r0, r2, #0
    60fe:	1c19      	adds	r1, r3, #0
    6100:	4b55      	ldr	r3, [pc, #340]	; (6258 <fanControl+0x178>)
    6102:	4798      	blx	r3
    6104:	1c02      	adds	r2, r0, #0
    6106:	4b55      	ldr	r3, [pc, #340]	; (625c <fanControl+0x17c>)
    6108:	1c10      	adds	r0, r2, #0
    610a:	4798      	blx	r3
    610c:	1c02      	adds	r2, r0, #0
    610e:	687b      	ldr	r3, [r7, #4]
    6110:	619a      	str	r2, [r3, #24]
	}
	
	if ( (fan_inst == &fan4) && (inhibitChamberFan == OFF || enableFanOverride == true) )
    6112:	687a      	ldr	r2, [r7, #4]
    6114:	4b52      	ldr	r3, [pc, #328]	; (6260 <fanControl+0x180>)
    6116:	429a      	cmp	r2, r3
    6118:	d134      	bne.n	6184 <fanControl+0xa4>
    611a:	4b52      	ldr	r3, [pc, #328]	; (6264 <fanControl+0x184>)
    611c:	781b      	ldrb	r3, [r3, #0]
    611e:	2201      	movs	r2, #1
    6120:	4053      	eors	r3, r2
    6122:	b2db      	uxtb	r3, r3
    6124:	2b00      	cmp	r3, #0
    6126:	d103      	bne.n	6130 <fanControl+0x50>
    6128:	4b4a      	ldr	r3, [pc, #296]	; (6254 <fanControl+0x174>)
    612a:	781b      	ldrb	r3, [r3, #0]
    612c:	2b00      	cmp	r3, #0
    612e:	d029      	beq.n	6184 <fanControl+0xa4>
	{
		// if fan is currently off, then kick at max power to start
		if ( (fan4.targetDutyPercent > 0) && (fan4.state == OFF) )
    6130:	4b4b      	ldr	r3, [pc, #300]	; (6260 <fanControl+0x180>)
    6132:	699b      	ldr	r3, [r3, #24]
    6134:	2b00      	cmp	r3, #0
    6136:	d00b      	beq.n	6150 <fanControl+0x70>
    6138:	4b49      	ldr	r3, [pc, #292]	; (6260 <fanControl+0x180>)
    613a:	7d5b      	ldrb	r3, [r3, #21]
    613c:	2201      	movs	r2, #1
    613e:	4053      	eors	r3, r2
    6140:	b2db      	uxtb	r3, r3
    6142:	2b00      	cmp	r3, #0
    6144:	d004      	beq.n	6150 <fanControl+0x70>
		{
			fanStart_emc2305(&fan4);
    6146:	4b46      	ldr	r3, [pc, #280]	; (6260 <fanControl+0x180>)
    6148:	1c18      	adds	r0, r3, #0
    614a:	4b47      	ldr	r3, [pc, #284]	; (6268 <fanControl+0x188>)
    614c:	4798      	blx	r3
    614e:	e00b      	b.n	6168 <fanControl+0x88>
		}
		else if ( (fan4.targetDutyPercent==0 && fan4.state != OFF) )
    6150:	4b43      	ldr	r3, [pc, #268]	; (6260 <fanControl+0x180>)
    6152:	699b      	ldr	r3, [r3, #24]
    6154:	2b00      	cmp	r3, #0
    6156:	d107      	bne.n	6168 <fanControl+0x88>
    6158:	4b41      	ldr	r3, [pc, #260]	; (6260 <fanControl+0x180>)
    615a:	7d5b      	ldrb	r3, [r3, #21]
    615c:	2b00      	cmp	r3, #0
    615e:	d003      	beq.n	6168 <fanControl+0x88>
		{
			fanStop_emc2305(&fan4);
    6160:	4b3f      	ldr	r3, [pc, #252]	; (6260 <fanControl+0x180>)
    6162:	1c18      	adds	r0, r3, #0
    6164:	4b41      	ldr	r3, [pc, #260]	; (626c <fanControl+0x18c>)
    6166:	4798      	blx	r3
		}

		fan4.intDutyPercent = fan4.targetDutyPercent;
    6168:	4b3d      	ldr	r3, [pc, #244]	; (6260 <fanControl+0x180>)
    616a:	699b      	ldr	r3, [r3, #24]
    616c:	b2d9      	uxtb	r1, r3
    616e:	4a3c      	ldr	r2, [pc, #240]	; (6260 <fanControl+0x180>)
    6170:	2330      	movs	r3, #48	; 0x30
    6172:	54d1      	strb	r1, [r2, r3]
				
		// after fan has been kicked, then set to target speed
		fanSetSpeed_emc2305(&fan4, fan4.intDutyPercent);
    6174:	4a3a      	ldr	r2, [pc, #232]	; (6260 <fanControl+0x180>)
    6176:	2330      	movs	r3, #48	; 0x30
    6178:	5cd3      	ldrb	r3, [r2, r3]
    617a:	4a39      	ldr	r2, [pc, #228]	; (6260 <fanControl+0x180>)
    617c:	1c10      	adds	r0, r2, #0
    617e:	1c19      	adds	r1, r3, #0
    6180:	4b3b      	ldr	r3, [pc, #236]	; (6270 <fanControl+0x190>)
    6182:	4798      	blx	r3
	}	
	if ( (fan_inst == &fan1) && (inhibitChamberFan == OFF || enableFanOverride == true) )
    6184:	687a      	ldr	r2, [r7, #4]
    6186:	4b3b      	ldr	r3, [pc, #236]	; (6274 <fanControl+0x194>)
    6188:	429a      	cmp	r2, r3
    618a:	d135      	bne.n	61f8 <fanControl+0x118>
    618c:	4b35      	ldr	r3, [pc, #212]	; (6264 <fanControl+0x184>)
    618e:	781b      	ldrb	r3, [r3, #0]
    6190:	2201      	movs	r2, #1
    6192:	4053      	eors	r3, r2
    6194:	b2db      	uxtb	r3, r3
    6196:	2b00      	cmp	r3, #0
    6198:	d103      	bne.n	61a2 <fanControl+0xc2>
    619a:	4b2e      	ldr	r3, [pc, #184]	; (6254 <fanControl+0x174>)
    619c:	781b      	ldrb	r3, [r3, #0]
    619e:	2b00      	cmp	r3, #0
    61a0:	d02a      	beq.n	61f8 <fanControl+0x118>
	{
		// if fan is currently off, then kick at max power to start
		if ( (fan1.targetDutyPercent > 0) && (fan1.state == OFF) )
    61a2:	4b34      	ldr	r3, [pc, #208]	; (6274 <fanControl+0x194>)
    61a4:	699b      	ldr	r3, [r3, #24]
    61a6:	2b00      	cmp	r3, #0
    61a8:	d00b      	beq.n	61c2 <fanControl+0xe2>
    61aa:	4b32      	ldr	r3, [pc, #200]	; (6274 <fanControl+0x194>)
    61ac:	7d5b      	ldrb	r3, [r3, #21]
    61ae:	2201      	movs	r2, #1
    61b0:	4053      	eors	r3, r2
    61b2:	b2db      	uxtb	r3, r3
    61b4:	2b00      	cmp	r3, #0
    61b6:	d004      	beq.n	61c2 <fanControl+0xe2>
		{
			fanStart_emc2305(&fan1);
    61b8:	4b2e      	ldr	r3, [pc, #184]	; (6274 <fanControl+0x194>)
    61ba:	1c18      	adds	r0, r3, #0
    61bc:	4b2a      	ldr	r3, [pc, #168]	; (6268 <fanControl+0x188>)
    61be:	4798      	blx	r3
    61c0:	e00b      	b.n	61da <fanControl+0xfa>
		}
		else if ( (fan1.targetDutyPercent==0 && fan1.state != OFF) )
    61c2:	4b2c      	ldr	r3, [pc, #176]	; (6274 <fanControl+0x194>)
    61c4:	699b      	ldr	r3, [r3, #24]
    61c6:	2b00      	cmp	r3, #0
    61c8:	d107      	bne.n	61da <fanControl+0xfa>
    61ca:	4b2a      	ldr	r3, [pc, #168]	; (6274 <fanControl+0x194>)
    61cc:	7d5b      	ldrb	r3, [r3, #21]
    61ce:	2b00      	cmp	r3, #0
    61d0:	d003      	beq.n	61da <fanControl+0xfa>
		{
			fanStop_emc2305(&fan1);
    61d2:	4b28      	ldr	r3, [pc, #160]	; (6274 <fanControl+0x194>)
    61d4:	1c18      	adds	r0, r3, #0
    61d6:	4b25      	ldr	r3, [pc, #148]	; (626c <fanControl+0x18c>)
    61d8:	4798      	blx	r3
		}

		fan1.intDutyPercent = fan1.targetDutyPercent;
    61da:	4b26      	ldr	r3, [pc, #152]	; (6274 <fanControl+0x194>)
    61dc:	699b      	ldr	r3, [r3, #24]
    61de:	b2d9      	uxtb	r1, r3
    61e0:	4a24      	ldr	r2, [pc, #144]	; (6274 <fanControl+0x194>)
    61e2:	2330      	movs	r3, #48	; 0x30
    61e4:	54d1      	strb	r1, [r2, r3]
		
		// after fan has been kicked, then set to target speed
		fanSetSpeed_emc2305(&fan1, fan1.intDutyPercent);
    61e6:	4a23      	ldr	r2, [pc, #140]	; (6274 <fanControl+0x194>)
    61e8:	2330      	movs	r3, #48	; 0x30
    61ea:	5cd3      	ldrb	r3, [r2, r3]
    61ec:	4a21      	ldr	r2, [pc, #132]	; (6274 <fanControl+0x194>)
    61ee:	1c10      	adds	r0, r2, #0
    61f0:	1c19      	adds	r1, r3, #0
    61f2:	4b1f      	ldr	r3, [pc, #124]	; (6270 <fanControl+0x190>)
    61f4:	4798      	blx	r3
    61f6:	e01b      	b.n	6230 <fanControl+0x150>
	}		
	else
	{
		// if fan is currently off, then kick at max power to start
		if ( (fan_inst->targetDutyPercent > 0) && (fan_inst->state == OFF) )
    61f8:	687b      	ldr	r3, [r7, #4]
    61fa:	699b      	ldr	r3, [r3, #24]
    61fc:	2b00      	cmp	r3, #0
    61fe:	d00b      	beq.n	6218 <fanControl+0x138>
    6200:	687b      	ldr	r3, [r7, #4]
    6202:	7d5b      	ldrb	r3, [r3, #21]
    6204:	2201      	movs	r2, #1
    6206:	4053      	eors	r3, r2
    6208:	b2db      	uxtb	r3, r3
    620a:	2b00      	cmp	r3, #0
    620c:	d004      	beq.n	6218 <fanControl+0x138>
		{
			fanStart_emc2305(fan_inst);
    620e:	687b      	ldr	r3, [r7, #4]
    6210:	1c18      	adds	r0, r3, #0
    6212:	4b15      	ldr	r3, [pc, #84]	; (6268 <fanControl+0x188>)
    6214:	4798      	blx	r3
    6216:	e00b      	b.n	6230 <fanControl+0x150>
		}
		else if ( (fan_inst->targetDutyPercent==0 && fan_inst->state != OFF) )
    6218:	687b      	ldr	r3, [r7, #4]
    621a:	699b      	ldr	r3, [r3, #24]
    621c:	2b00      	cmp	r3, #0
    621e:	d107      	bne.n	6230 <fanControl+0x150>
    6220:	687b      	ldr	r3, [r7, #4]
    6222:	7d5b      	ldrb	r3, [r3, #21]
    6224:	2b00      	cmp	r3, #0
    6226:	d003      	beq.n	6230 <fanControl+0x150>
		{
			fanStop_emc2305(fan_inst);
    6228:	687b      	ldr	r3, [r7, #4]
    622a:	1c18      	adds	r0, r3, #0
    622c:	4b0f      	ldr	r3, [pc, #60]	; (626c <fanControl+0x18c>)
    622e:	4798      	blx	r3
		}
	}
	
	// add inertia to speed change
	//fan_inst->intDutyPercent = fanCalcIntRampVal(fan_inst, fan_inst->targetDutyPercent, TASK2_SEC);
	fan_inst->intDutyPercent = fan_inst->targetDutyPercent;
    6230:	687b      	ldr	r3, [r7, #4]
    6232:	699b      	ldr	r3, [r3, #24]
    6234:	b2d9      	uxtb	r1, r3
    6236:	687a      	ldr	r2, [r7, #4]
    6238:	2330      	movs	r3, #48	; 0x30
    623a:	54d1      	strb	r1, [r2, r3]

	// after fan has been kicked, then set to target speed
	fanSetSpeed_emc2305(fan_inst, fan_inst->intDutyPercent);
    623c:	687a      	ldr	r2, [r7, #4]
    623e:	2330      	movs	r3, #48	; 0x30
    6240:	5cd3      	ldrb	r3, [r2, r3]
    6242:	687a      	ldr	r2, [r7, #4]
    6244:	1c10      	adds	r0, r2, #0
    6246:	1c19      	adds	r1, r3, #0
    6248:	4b09      	ldr	r3, [pc, #36]	; (6270 <fanControl+0x190>)
    624a:	4798      	blx	r3
	//}
}
    624c:	46bd      	mov	sp, r7
    624e:	b002      	add	sp, #8
    6250:	bd80      	pop	{r7, pc}
    6252:	46c0      	nop			; (mov r8, r8)
    6254:	20000375 	.word	0x20000375
    6258:	000064ad 	.word	0x000064ad
    625c:	0001f6bd 	.word	0x0001f6bd
    6260:	20000adc 	.word	0x20000adc
    6264:	20000347 	.word	0x20000347
    6268:	000059c9 	.word	0x000059c9
    626c:	00005ad9 	.word	0x00005ad9
    6270:	00005889 	.word	0x00005889
    6274:	20000e84 	.word	0x20000e84

00006278 <fanStateMachine>:

uint8_t fanStateMachine(struct fan_vars *fan_inst)
{
    6278:	b580      	push	{r7, lr}
    627a:	b084      	sub	sp, #16
    627c:	af00      	add	r7, sp, #0
    627e:	6078      	str	r0, [r7, #4]
	uint8_t newSpeed;
	float vset = ps1.desiredVoltage;
    6280:	4b86      	ldr	r3, [pc, #536]	; (649c <fanStateMachine+0x224>)
    6282:	695b      	ldr	r3, [r3, #20]
    6284:	60bb      	str	r3, [r7, #8]
	
	// S1 /////////////////////////////////
	if (fan_inst->fan_state == FAN_STATE_S1)
    6286:	687b      	ldr	r3, [r7, #4]
    6288:	7fdb      	ldrb	r3, [r3, #31]
    628a:	2b01      	cmp	r3, #1
    628c:	d118      	bne.n	62c0 <fanStateMachine+0x48>
	{
		if		(vset < fan_inst->lim1)		{ fan_inst->fan_state = FAN_STATE_S2; }
    628e:	687a      	ldr	r2, [r7, #4]
    6290:	2320      	movs	r3, #32
    6292:	5cd3      	ldrb	r3, [r2, r3]
    6294:	1c1a      	adds	r2, r3, #0
    6296:	4b82      	ldr	r3, [pc, #520]	; (64a0 <fanStateMachine+0x228>)
    6298:	1c10      	adds	r0, r2, #0
    629a:	4798      	blx	r3
    629c:	1c02      	adds	r2, r0, #0
    629e:	4b81      	ldr	r3, [pc, #516]	; (64a4 <fanStateMachine+0x22c>)
    62a0:	1c10      	adds	r0, r2, #0
    62a2:	68b9      	ldr	r1, [r7, #8]
    62a4:	4798      	blx	r3
    62a6:	1c03      	adds	r3, r0, #0
    62a8:	2b00      	cmp	r3, #0
    62aa:	d002      	beq.n	62b2 <fanStateMachine+0x3a>
    62ac:	687b      	ldr	r3, [r7, #4]
    62ae:	2202      	movs	r2, #2
    62b0:	77da      	strb	r2, [r3, #31]
		//else if (vset >= fan_inst->lim1)	{ fan_inst->fan_state = FAN_STATE_S1; }
			
		newSpeed = fan_inst->spd1;
    62b2:	1c3b      	adds	r3, r7, #0
    62b4:	330f      	adds	r3, #15
    62b6:	6879      	ldr	r1, [r7, #4]
    62b8:	2222      	movs	r2, #34	; 0x22
    62ba:	5c8a      	ldrb	r2, [r1, r2]
    62bc:	701a      	strb	r2, [r3, #0]
    62be:	e0e5      	b.n	648c <fanStateMachine+0x214>
	} 
	
	// S2 /////////////////////////////////
	else if (fan_inst->fan_state == FAN_STATE_S2)
    62c0:	687b      	ldr	r3, [r7, #4]
    62c2:	7fdb      	ldrb	r3, [r3, #31]
    62c4:	2b02      	cmp	r3, #2
    62c6:	d12b      	bne.n	6320 <fanStateMachine+0xa8>
	{
		if		(vset >= fan_inst->lim1p)	{ fan_inst->fan_state = FAN_STATE_S1; }
    62c8:	687a      	ldr	r2, [r7, #4]
    62ca:	2321      	movs	r3, #33	; 0x21
    62cc:	5cd3      	ldrb	r3, [r2, r3]
    62ce:	1c1a      	adds	r2, r3, #0
    62d0:	4b73      	ldr	r3, [pc, #460]	; (64a0 <fanStateMachine+0x228>)
    62d2:	1c10      	adds	r0, r2, #0
    62d4:	4798      	blx	r3
    62d6:	1c02      	adds	r2, r0, #0
    62d8:	4b73      	ldr	r3, [pc, #460]	; (64a8 <fanStateMachine+0x230>)
    62da:	1c10      	adds	r0, r2, #0
    62dc:	68b9      	ldr	r1, [r7, #8]
    62de:	4798      	blx	r3
    62e0:	1c03      	adds	r3, r0, #0
    62e2:	2b00      	cmp	r3, #0
    62e4:	d003      	beq.n	62ee <fanStateMachine+0x76>
    62e6:	687b      	ldr	r3, [r7, #4]
    62e8:	2201      	movs	r2, #1
    62ea:	77da      	strb	r2, [r3, #31]
    62ec:	e011      	b.n	6312 <fanStateMachine+0x9a>
		//else if (vset < fan_inst->lim1p)	{ fan_inst->fan_state = FAN_STATE_S2; }
		else if (vset < fan_inst->lim2)		{ fan_inst->fan_state = FAN_STATE_S3; }
    62ee:	687a      	ldr	r2, [r7, #4]
    62f0:	2323      	movs	r3, #35	; 0x23
    62f2:	5cd3      	ldrb	r3, [r2, r3]
    62f4:	1c1a      	adds	r2, r3, #0
    62f6:	4b6a      	ldr	r3, [pc, #424]	; (64a0 <fanStateMachine+0x228>)
    62f8:	1c10      	adds	r0, r2, #0
    62fa:	4798      	blx	r3
    62fc:	1c02      	adds	r2, r0, #0
    62fe:	4b69      	ldr	r3, [pc, #420]	; (64a4 <fanStateMachine+0x22c>)
    6300:	1c10      	adds	r0, r2, #0
    6302:	68b9      	ldr	r1, [r7, #8]
    6304:	4798      	blx	r3
    6306:	1c03      	adds	r3, r0, #0
    6308:	2b00      	cmp	r3, #0
    630a:	d002      	beq.n	6312 <fanStateMachine+0x9a>
    630c:	687b      	ldr	r3, [r7, #4]
    630e:	2203      	movs	r2, #3
    6310:	77da      	strb	r2, [r3, #31]
		//else if (vset >= fan_inst->lim2)	{ fan_inst->fan_state = FAN_STATE_S2; }		
			
		newSpeed = fan_inst->spd2;			
    6312:	1c3b      	adds	r3, r7, #0
    6314:	330f      	adds	r3, #15
    6316:	6879      	ldr	r1, [r7, #4]
    6318:	2225      	movs	r2, #37	; 0x25
    631a:	5c8a      	ldrb	r2, [r1, r2]
    631c:	701a      	strb	r2, [r3, #0]
    631e:	e0b5      	b.n	648c <fanStateMachine+0x214>
	}
	
	// S3 /////////////////////////////////
	else if (fan_inst->fan_state == FAN_STATE_S3)
    6320:	687b      	ldr	r3, [r7, #4]
    6322:	7fdb      	ldrb	r3, [r3, #31]
    6324:	2b03      	cmp	r3, #3
    6326:	d12b      	bne.n	6380 <fanStateMachine+0x108>
	{
		if		(vset >= fan_inst->lim2p)	{ fan_inst->fan_state = FAN_STATE_S2; }
    6328:	687a      	ldr	r2, [r7, #4]
    632a:	2324      	movs	r3, #36	; 0x24
    632c:	5cd3      	ldrb	r3, [r2, r3]
    632e:	1c1a      	adds	r2, r3, #0
    6330:	4b5b      	ldr	r3, [pc, #364]	; (64a0 <fanStateMachine+0x228>)
    6332:	1c10      	adds	r0, r2, #0
    6334:	4798      	blx	r3
    6336:	1c02      	adds	r2, r0, #0
    6338:	4b5b      	ldr	r3, [pc, #364]	; (64a8 <fanStateMachine+0x230>)
    633a:	1c10      	adds	r0, r2, #0
    633c:	68b9      	ldr	r1, [r7, #8]
    633e:	4798      	blx	r3
    6340:	1c03      	adds	r3, r0, #0
    6342:	2b00      	cmp	r3, #0
    6344:	d003      	beq.n	634e <fanStateMachine+0xd6>
    6346:	687b      	ldr	r3, [r7, #4]
    6348:	2202      	movs	r2, #2
    634a:	77da      	strb	r2, [r3, #31]
    634c:	e011      	b.n	6372 <fanStateMachine+0xfa>
		//else if (vset < fan_inst->lim2p)	{ fan_inst->fan_state = FAN_STATE_S3; }
		else if (vset < fan_inst->lim3)		{ fan_inst->fan_state = FAN_STATE_S4; }
    634e:	687a      	ldr	r2, [r7, #4]
    6350:	2326      	movs	r3, #38	; 0x26
    6352:	5cd3      	ldrb	r3, [r2, r3]
    6354:	1c1a      	adds	r2, r3, #0
    6356:	4b52      	ldr	r3, [pc, #328]	; (64a0 <fanStateMachine+0x228>)
    6358:	1c10      	adds	r0, r2, #0
    635a:	4798      	blx	r3
    635c:	1c02      	adds	r2, r0, #0
    635e:	4b51      	ldr	r3, [pc, #324]	; (64a4 <fanStateMachine+0x22c>)
    6360:	1c10      	adds	r0, r2, #0
    6362:	68b9      	ldr	r1, [r7, #8]
    6364:	4798      	blx	r3
    6366:	1c03      	adds	r3, r0, #0
    6368:	2b00      	cmp	r3, #0
    636a:	d002      	beq.n	6372 <fanStateMachine+0xfa>
    636c:	687b      	ldr	r3, [r7, #4]
    636e:	2204      	movs	r2, #4
    6370:	77da      	strb	r2, [r3, #31]
		//else if (vset >= fan_inst->lim3)	{ fan_inst->fan_state = FAN_STATE_S3; }
			
		newSpeed = fan_inst->spd3;			
    6372:	1c3b      	adds	r3, r7, #0
    6374:	330f      	adds	r3, #15
    6376:	6879      	ldr	r1, [r7, #4]
    6378:	2228      	movs	r2, #40	; 0x28
    637a:	5c8a      	ldrb	r2, [r1, r2]
    637c:	701a      	strb	r2, [r3, #0]
    637e:	e085      	b.n	648c <fanStateMachine+0x214>
	}	
	
	// S4 /////////////////////////////////
	else if (fan_inst->fan_state == FAN_STATE_S4)
    6380:	687b      	ldr	r3, [r7, #4]
    6382:	7fdb      	ldrb	r3, [r3, #31]
    6384:	2b04      	cmp	r3, #4
    6386:	d12b      	bne.n	63e0 <fanStateMachine+0x168>
	{
		if		(vset >= fan_inst->lim3p)	{ fan_inst->fan_state = FAN_STATE_S3; }
    6388:	687a      	ldr	r2, [r7, #4]
    638a:	2327      	movs	r3, #39	; 0x27
    638c:	5cd3      	ldrb	r3, [r2, r3]
    638e:	1c1a      	adds	r2, r3, #0
    6390:	4b43      	ldr	r3, [pc, #268]	; (64a0 <fanStateMachine+0x228>)
    6392:	1c10      	adds	r0, r2, #0
    6394:	4798      	blx	r3
    6396:	1c02      	adds	r2, r0, #0
    6398:	4b43      	ldr	r3, [pc, #268]	; (64a8 <fanStateMachine+0x230>)
    639a:	1c10      	adds	r0, r2, #0
    639c:	68b9      	ldr	r1, [r7, #8]
    639e:	4798      	blx	r3
    63a0:	1c03      	adds	r3, r0, #0
    63a2:	2b00      	cmp	r3, #0
    63a4:	d003      	beq.n	63ae <fanStateMachine+0x136>
    63a6:	687b      	ldr	r3, [r7, #4]
    63a8:	2203      	movs	r2, #3
    63aa:	77da      	strb	r2, [r3, #31]
    63ac:	e011      	b.n	63d2 <fanStateMachine+0x15a>
		//else if (vset < fan_inst->lim3p)	{ fan_inst->fan_state = FAN_STATE_S4; }
		else if (vset < fan_inst->lim4)		{ fan_inst->fan_state = FAN_STATE_S5; }
    63ae:	687a      	ldr	r2, [r7, #4]
    63b0:	2329      	movs	r3, #41	; 0x29
    63b2:	5cd3      	ldrb	r3, [r2, r3]
    63b4:	1c1a      	adds	r2, r3, #0
    63b6:	4b3a      	ldr	r3, [pc, #232]	; (64a0 <fanStateMachine+0x228>)
    63b8:	1c10      	adds	r0, r2, #0
    63ba:	4798      	blx	r3
    63bc:	1c02      	adds	r2, r0, #0
    63be:	4b39      	ldr	r3, [pc, #228]	; (64a4 <fanStateMachine+0x22c>)
    63c0:	1c10      	adds	r0, r2, #0
    63c2:	68b9      	ldr	r1, [r7, #8]
    63c4:	4798      	blx	r3
    63c6:	1c03      	adds	r3, r0, #0
    63c8:	2b00      	cmp	r3, #0
    63ca:	d002      	beq.n	63d2 <fanStateMachine+0x15a>
    63cc:	687b      	ldr	r3, [r7, #4]
    63ce:	2205      	movs	r2, #5
    63d0:	77da      	strb	r2, [r3, #31]
		//else if (vset >= fan_inst->lim4)	{ fan_inst->fan_state = FAN_STATE_S4; }
			
		newSpeed = fan_inst->spd4;		
    63d2:	1c3b      	adds	r3, r7, #0
    63d4:	330f      	adds	r3, #15
    63d6:	6879      	ldr	r1, [r7, #4]
    63d8:	222b      	movs	r2, #43	; 0x2b
    63da:	5c8a      	ldrb	r2, [r1, r2]
    63dc:	701a      	strb	r2, [r3, #0]
    63de:	e055      	b.n	648c <fanStateMachine+0x214>
	}	
	
	// S5 /////////////////////////////////
	else if (fan_inst->fan_state == FAN_STATE_S5)
    63e0:	687b      	ldr	r3, [r7, #4]
    63e2:	7fdb      	ldrb	r3, [r3, #31]
    63e4:	2b05      	cmp	r3, #5
    63e6:	d12b      	bne.n	6440 <fanStateMachine+0x1c8>
	{
		if		(vset >= fan_inst->lim4p)	{ fan_inst->fan_state = FAN_STATE_S4; }
    63e8:	687a      	ldr	r2, [r7, #4]
    63ea:	232a      	movs	r3, #42	; 0x2a
    63ec:	5cd3      	ldrb	r3, [r2, r3]
    63ee:	1c1a      	adds	r2, r3, #0
    63f0:	4b2b      	ldr	r3, [pc, #172]	; (64a0 <fanStateMachine+0x228>)
    63f2:	1c10      	adds	r0, r2, #0
    63f4:	4798      	blx	r3
    63f6:	1c02      	adds	r2, r0, #0
    63f8:	4b2b      	ldr	r3, [pc, #172]	; (64a8 <fanStateMachine+0x230>)
    63fa:	1c10      	adds	r0, r2, #0
    63fc:	68b9      	ldr	r1, [r7, #8]
    63fe:	4798      	blx	r3
    6400:	1c03      	adds	r3, r0, #0
    6402:	2b00      	cmp	r3, #0
    6404:	d003      	beq.n	640e <fanStateMachine+0x196>
    6406:	687b      	ldr	r3, [r7, #4]
    6408:	2204      	movs	r2, #4
    640a:	77da      	strb	r2, [r3, #31]
    640c:	e011      	b.n	6432 <fanStateMachine+0x1ba>
		//else if (vset < fan_inst->lim4p)	{ fan_inst->fan_state = FAN_STATE_S5; }
		else if	(vset < fan_inst->lim5)		{ fan_inst->fan_state = FAN_STATE_S6; }
    640e:	687a      	ldr	r2, [r7, #4]
    6410:	232c      	movs	r3, #44	; 0x2c
    6412:	5cd3      	ldrb	r3, [r2, r3]
    6414:	1c1a      	adds	r2, r3, #0
    6416:	4b22      	ldr	r3, [pc, #136]	; (64a0 <fanStateMachine+0x228>)
    6418:	1c10      	adds	r0, r2, #0
    641a:	4798      	blx	r3
    641c:	1c02      	adds	r2, r0, #0
    641e:	4b21      	ldr	r3, [pc, #132]	; (64a4 <fanStateMachine+0x22c>)
    6420:	1c10      	adds	r0, r2, #0
    6422:	68b9      	ldr	r1, [r7, #8]
    6424:	4798      	blx	r3
    6426:	1c03      	adds	r3, r0, #0
    6428:	2b00      	cmp	r3, #0
    642a:	d002      	beq.n	6432 <fanStateMachine+0x1ba>
    642c:	687b      	ldr	r3, [r7, #4]
    642e:	2206      	movs	r2, #6
    6430:	77da      	strb	r2, [r3, #31]
		//else if (vset >= fan_inst->lim5)	{ fan_inst->fan_state = FAN_STATE_S5; }	
			
		newSpeed = fan_inst->spd5;	
    6432:	1c3b      	adds	r3, r7, #0
    6434:	330f      	adds	r3, #15
    6436:	6879      	ldr	r1, [r7, #4]
    6438:	222e      	movs	r2, #46	; 0x2e
    643a:	5c8a      	ldrb	r2, [r1, r2]
    643c:	701a      	strb	r2, [r3, #0]
    643e:	e025      	b.n	648c <fanStateMachine+0x214>
	}	

	// S6 /////////////////////////////////
	else if (fan_inst->fan_state == FAN_STATE_S6)
    6440:	687b      	ldr	r3, [r7, #4]
    6442:	7fdb      	ldrb	r3, [r3, #31]
    6444:	2b06      	cmp	r3, #6
    6446:	d118      	bne.n	647a <fanStateMachine+0x202>
	{
		if		(vset >= fan_inst->lim5p)	{ fan_inst->fan_state = FAN_STATE_S5; }
    6448:	687a      	ldr	r2, [r7, #4]
    644a:	232d      	movs	r3, #45	; 0x2d
    644c:	5cd3      	ldrb	r3, [r2, r3]
    644e:	1c1a      	adds	r2, r3, #0
    6450:	4b13      	ldr	r3, [pc, #76]	; (64a0 <fanStateMachine+0x228>)
    6452:	1c10      	adds	r0, r2, #0
    6454:	4798      	blx	r3
    6456:	1c02      	adds	r2, r0, #0
    6458:	4b13      	ldr	r3, [pc, #76]	; (64a8 <fanStateMachine+0x230>)
    645a:	1c10      	adds	r0, r2, #0
    645c:	68b9      	ldr	r1, [r7, #8]
    645e:	4798      	blx	r3
    6460:	1c03      	adds	r3, r0, #0
    6462:	2b00      	cmp	r3, #0
    6464:	d002      	beq.n	646c <fanStateMachine+0x1f4>
    6466:	687b      	ldr	r3, [r7, #4]
    6468:	2205      	movs	r2, #5
    646a:	77da      	strb	r2, [r3, #31]
		//else if (vset < fan_inst->lim5p)	{ fan_inst->fan_state = FAN_STATE_S6; }
		
		newSpeed = fan_inst->spd6;
    646c:	1c3b      	adds	r3, r7, #0
    646e:	330f      	adds	r3, #15
    6470:	6879      	ldr	r1, [r7, #4]
    6472:	222f      	movs	r2, #47	; 0x2f
    6474:	5c8a      	ldrb	r2, [r1, r2]
    6476:	701a      	strb	r2, [r3, #0]
    6478:	e008      	b.n	648c <fanStateMachine+0x214>
	}
		
	// DEFAULT ////////////////////////////
	else
	{
		fan_inst->fan_state = FAN_STATE_S1;
    647a:	687b      	ldr	r3, [r7, #4]
    647c:	2201      	movs	r2, #1
    647e:	77da      	strb	r2, [r3, #31]
		newSpeed = fan_inst->spd1;
    6480:	1c3b      	adds	r3, r7, #0
    6482:	330f      	adds	r3, #15
    6484:	6879      	ldr	r1, [r7, #4]
    6486:	2222      	movs	r2, #34	; 0x22
    6488:	5c8a      	ldrb	r2, [r1, r2]
    648a:	701a      	strb	r2, [r3, #0]
	}
	
	return newSpeed;
    648c:	1c3b      	adds	r3, r7, #0
    648e:	330f      	adds	r3, #15
    6490:	781b      	ldrb	r3, [r3, #0]
}
    6492:	1c18      	adds	r0, r3, #0
    6494:	46bd      	mov	sp, r7
    6496:	b004      	add	sp, #16
    6498:	bd80      	pop	{r7, pc}
    649a:	46c0      	nop			; (mov r8, r8)
    649c:	20000a84 	.word	0x20000a84
    64a0:	000203b5 	.word	0x000203b5
    64a4:	0001f655 	.word	0x0001f655
    64a8:	0001f641 	.word	0x0001f641

000064ac <fanCalcPwmDutyPercent>:

float fanCalcPwmDutyPercent(struct fan_vars *fan_inst, float voltage)
{
    64ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    64ae:	b085      	sub	sp, #20
    64b0:	af00      	add	r7, sp, #0
    64b2:	6078      	str	r0, [r7, #4]
    64b4:	6039      	str	r1, [r7, #0]
	float fNewDutyPercent = DEFAULT_FAN_MAX_DUTY;
    64b6:	4ba4      	ldr	r3, [pc, #656]	; (6748 <fanCalcPwmDutyPercent+0x29c>)
    64b8:	60fb      	str	r3, [r7, #12]
	//float voltage = ps1.desiredVoltage;
	//uint8_t idx = 0;

	if (voltage < 0)
    64ba:	4ba4      	ldr	r3, [pc, #656]	; (674c <fanCalcPwmDutyPercent+0x2a0>)
    64bc:	6838      	ldr	r0, [r7, #0]
    64be:	2100      	movs	r1, #0
    64c0:	4798      	blx	r3
    64c2:	1c03      	adds	r3, r0, #0
    64c4:	2b00      	cmp	r3, #0
    64c6:	d002      	beq.n	64ce <fanCalcPwmDutyPercent+0x22>
	{
		voltage = 0;
    64c8:	2300      	movs	r3, #0
    64ca:	603b      	str	r3, [r7, #0]
    64cc:	e00b      	b.n	64e6 <fanCalcPwmDutyPercent+0x3a>
	}
	else if (voltage >= maxOutputVoltage)
    64ce:	4ba0      	ldr	r3, [pc, #640]	; (6750 <fanCalcPwmDutyPercent+0x2a4>)
    64d0:	681a      	ldr	r2, [r3, #0]
    64d2:	4ba0      	ldr	r3, [pc, #640]	; (6754 <fanCalcPwmDutyPercent+0x2a8>)
    64d4:	6838      	ldr	r0, [r7, #0]
    64d6:	1c11      	adds	r1, r2, #0
    64d8:	4798      	blx	r3
    64da:	1c03      	adds	r3, r0, #0
    64dc:	2b00      	cmp	r3, #0
    64de:	d002      	beq.n	64e6 <fanCalcPwmDutyPercent+0x3a>
	{
		voltage = maxOutputVoltage;
    64e0:	4b9b      	ldr	r3, [pc, #620]	; (6750 <fanCalcPwmDutyPercent+0x2a4>)
    64e2:	681b      	ldr	r3, [r3, #0]
    64e4:	603b      	str	r3, [r7, #0]
	}
	voltage = round(voltage);
    64e6:	4b9c      	ldr	r3, [pc, #624]	; (6758 <fanCalcPwmDutyPercent+0x2ac>)
    64e8:	6838      	ldr	r0, [r7, #0]
    64ea:	4798      	blx	r3
    64ec:	1c03      	adds	r3, r0, #0
    64ee:	1c0c      	adds	r4, r1, #0
    64f0:	1c18      	adds	r0, r3, #0
    64f2:	1c21      	adds	r1, r4, #0
    64f4:	4b99      	ldr	r3, [pc, #612]	; (675c <fanCalcPwmDutyPercent+0x2b0>)
    64f6:	4798      	blx	r3
    64f8:	1c03      	adds	r3, r0, #0
    64fa:	1c0c      	adds	r4, r1, #0
    64fc:	4a98      	ldr	r2, [pc, #608]	; (6760 <fanCalcPwmDutyPercent+0x2b4>)
    64fe:	1c18      	adds	r0, r3, #0
    6500:	1c21      	adds	r1, r4, #0
    6502:	4790      	blx	r2
    6504:	1c03      	adds	r3, r0, #0
    6506:	603b      	str	r3, [r7, #0]
	//if (fan_inst == &fan3)
	//{		
	//	fNewDutyPercent = fan3_spd_percent_lookup_table[idx];
	//}
	//else 
	if (fan_inst == &fan2 || fan_inst == &fan5 || fan_inst == &fan6)
    6508:	687a      	ldr	r2, [r7, #4]
    650a:	4b96      	ldr	r3, [pc, #600]	; (6764 <fanCalcPwmDutyPercent+0x2b8>)
    650c:	429a      	cmp	r2, r3
    650e:	d007      	beq.n	6520 <fanCalcPwmDutyPercent+0x74>
    6510:	687a      	ldr	r2, [r7, #4]
    6512:	4b95      	ldr	r3, [pc, #596]	; (6768 <fanCalcPwmDutyPercent+0x2bc>)
    6514:	429a      	cmp	r2, r3
    6516:	d003      	beq.n	6520 <fanCalcPwmDutyPercent+0x74>
    6518:	687a      	ldr	r2, [r7, #4]
    651a:	4b94      	ldr	r3, [pc, #592]	; (676c <fanCalcPwmDutyPercent+0x2c0>)
    651c:	429a      	cmp	r2, r3
    651e:	d13b      	bne.n	6598 <fanCalcPwmDutyPercent+0xec>
	{
		//fNewDutyPercent = round(pidFan2.Output) + fan2_spd_percent_lookup_table[idx];

		if (max(chamber1.rejectTemp, chamber2.rejectTemp) > FAN_MAX_SPD_REJECT_TEMP_LIMIT)
    6520:	4b93      	ldr	r3, [pc, #588]	; (6770 <fanCalcPwmDutyPercent+0x2c4>)
    6522:	68d9      	ldr	r1, [r3, #12]
    6524:	4b93      	ldr	r3, [pc, #588]	; (6774 <fanCalcPwmDutyPercent+0x2c8>)
    6526:	68da      	ldr	r2, [r3, #12]
    6528:	4b93      	ldr	r3, [pc, #588]	; (6778 <fanCalcPwmDutyPercent+0x2cc>)
    652a:	1c08      	adds	r0, r1, #0
    652c:	1c11      	adds	r1, r2, #0
    652e:	4798      	blx	r3
    6530:	1c03      	adds	r3, r0, #0
    6532:	2b00      	cmp	r3, #0
    6534:	d00e      	beq.n	6554 <fanCalcPwmDutyPercent+0xa8>
    6536:	4b8e      	ldr	r3, [pc, #568]	; (6770 <fanCalcPwmDutyPercent+0x2c4>)
    6538:	68da      	ldr	r2, [r3, #12]
    653a:	2301      	movs	r3, #1
    653c:	1c1c      	adds	r4, r3, #0
    653e:	4b8e      	ldr	r3, [pc, #568]	; (6778 <fanCalcPwmDutyPercent+0x2cc>)
    6540:	1c10      	adds	r0, r2, #0
    6542:	498e      	ldr	r1, [pc, #568]	; (677c <fanCalcPwmDutyPercent+0x2d0>)
    6544:	4798      	blx	r3
    6546:	1c03      	adds	r3, r0, #0
    6548:	2b00      	cmp	r3, #0
    654a:	d101      	bne.n	6550 <fanCalcPwmDutyPercent+0xa4>
    654c:	2300      	movs	r3, #0
    654e:	1c1c      	adds	r4, r3, #0
    6550:	b2e3      	uxtb	r3, r4
    6552:	e00d      	b.n	6570 <fanCalcPwmDutyPercent+0xc4>
    6554:	4b87      	ldr	r3, [pc, #540]	; (6774 <fanCalcPwmDutyPercent+0x2c8>)
    6556:	68da      	ldr	r2, [r3, #12]
    6558:	2301      	movs	r3, #1
    655a:	1c1c      	adds	r4, r3, #0
    655c:	4b86      	ldr	r3, [pc, #536]	; (6778 <fanCalcPwmDutyPercent+0x2cc>)
    655e:	1c10      	adds	r0, r2, #0
    6560:	4986      	ldr	r1, [pc, #536]	; (677c <fanCalcPwmDutyPercent+0x2d0>)
    6562:	4798      	blx	r3
    6564:	1c03      	adds	r3, r0, #0
    6566:	2b00      	cmp	r3, #0
    6568:	d101      	bne.n	656e <fanCalcPwmDutyPercent+0xc2>
    656a:	2300      	movs	r3, #0
    656c:	1c1c      	adds	r4, r3, #0
    656e:	b2e3      	uxtb	r3, r4
    6570:	2b00      	cmp	r3, #0
    6572:	d005      	beq.n	6580 <fanCalcPwmDutyPercent+0xd4>
		{
			fNewDutyPercent = 100.0;
    6574:	4b74      	ldr	r3, [pc, #464]	; (6748 <fanCalcPwmDutyPercent+0x29c>)
    6576:	60fb      	str	r3, [r7, #12]
			fan_inst->fan_state = FAN_STATE_REJECT_OT;
    6578:	687b      	ldr	r3, [r7, #4]
    657a:	2207      	movs	r2, #7
    657c:	77da      	strb	r2, [r3, #31]
	//else 
	if (fan_inst == &fan2 || fan_inst == &fan5 || fan_inst == &fan6)
	{
		//fNewDutyPercent = round(pidFan2.Output) + fan2_spd_percent_lookup_table[idx];

		if (max(chamber1.rejectTemp, chamber2.rejectTemp) > FAN_MAX_SPD_REJECT_TEMP_LIMIT)
    657e:	e0cb      	b.n	6718 <fanCalcPwmDutyPercent+0x26c>
			fNewDutyPercent = 100.0;
			fan_inst->fan_state = FAN_STATE_REJECT_OT;
		}
		else
		{
			fNewDutyPercent = (float)fanStateMachine(fan_inst);
    6580:	687b      	ldr	r3, [r7, #4]
    6582:	1c18      	adds	r0, r3, #0
    6584:	4b7e      	ldr	r3, [pc, #504]	; (6780 <fanCalcPwmDutyPercent+0x2d4>)
    6586:	4798      	blx	r3
    6588:	1c03      	adds	r3, r0, #0
    658a:	1c1a      	adds	r2, r3, #0
    658c:	4b7d      	ldr	r3, [pc, #500]	; (6784 <fanCalcPwmDutyPercent+0x2d8>)
    658e:	1c10      	adds	r0, r2, #0
    6590:	4798      	blx	r3
    6592:	1c03      	adds	r3, r0, #0
    6594:	60fb      	str	r3, [r7, #12]
	//else 
	if (fan_inst == &fan2 || fan_inst == &fan5 || fan_inst == &fan6)
	{
		//fNewDutyPercent = round(pidFan2.Output) + fan2_spd_percent_lookup_table[idx];

		if (max(chamber1.rejectTemp, chamber2.rejectTemp) > FAN_MAX_SPD_REJECT_TEMP_LIMIT)
    6596:	e0bf      	b.n	6718 <fanCalcPwmDutyPercent+0x26c>
	else if (fan_inst == &fan3)
	{
		fNewDutyPercent = (float)fanStateMachine(&fan3);
	}
	*/
	else if (fan_inst == &fan1)
    6598:	687a      	ldr	r2, [r7, #4]
    659a:	4b7b      	ldr	r3, [pc, #492]	; (6788 <fanCalcPwmDutyPercent+0x2dc>)
    659c:	429a      	cmp	r2, r3
    659e:	d136      	bne.n	660e <fanCalcPwmDutyPercent+0x162>
	{
		if (defrostActive)
    65a0:	4b7a      	ldr	r3, [pc, #488]	; (678c <fanCalcPwmDutyPercent+0x2e0>)
    65a2:	781b      	ldrb	r3, [r3, #0]
    65a4:	2b00      	cmp	r3, #0
    65a6:	d005      	beq.n	65b4 <fanCalcPwmDutyPercent+0x108>
		{
			fNewDutyPercent = 100.0;
    65a8:	4b67      	ldr	r3, [pc, #412]	; (6748 <fanCalcPwmDutyPercent+0x29c>)
    65aa:	60fb      	str	r3, [r7, #12]
			fan1.fan_state = FAN_STATE_DEFROST;
    65ac:	4b76      	ldr	r3, [pc, #472]	; (6788 <fanCalcPwmDutyPercent+0x2dc>)
    65ae:	2208      	movs	r2, #8
    65b0:	77da      	strb	r2, [r3, #31]
    65b2:	e00a      	b.n	65ca <fanCalcPwmDutyPercent+0x11e>
		}	
		else
		{
			fNewDutyPercent = (float)fanStateMachine(&fan1);
    65b4:	4b74      	ldr	r3, [pc, #464]	; (6788 <fanCalcPwmDutyPercent+0x2dc>)
    65b6:	1c18      	adds	r0, r3, #0
    65b8:	4b71      	ldr	r3, [pc, #452]	; (6780 <fanCalcPwmDutyPercent+0x2d4>)
    65ba:	4798      	blx	r3
    65bc:	1c03      	adds	r3, r0, #0
    65be:	1c1a      	adds	r2, r3, #0
    65c0:	4b70      	ldr	r3, [pc, #448]	; (6784 <fanCalcPwmDutyPercent+0x2d8>)
    65c2:	1c10      	adds	r0, r2, #0
    65c4:	4798      	blx	r3
    65c6:	1c03      	adds	r3, r0, #0
    65c8:	60fb      	str	r3, [r7, #12]
		}	
		
		fNewDutyPercent =  round(pidFan4.Output) + fNewDutyPercent;	
    65ca:	4b71      	ldr	r3, [pc, #452]	; (6790 <fanCalcPwmDutyPercent+0x2e4>)
    65cc:	6a1a      	ldr	r2, [r3, #32]
    65ce:	4b62      	ldr	r3, [pc, #392]	; (6758 <fanCalcPwmDutyPercent+0x2ac>)
    65d0:	1c10      	adds	r0, r2, #0
    65d2:	4798      	blx	r3
    65d4:	1c03      	adds	r3, r0, #0
    65d6:	1c0c      	adds	r4, r1, #0
    65d8:	1c18      	adds	r0, r3, #0
    65da:	1c21      	adds	r1, r4, #0
    65dc:	4b5f      	ldr	r3, [pc, #380]	; (675c <fanCalcPwmDutyPercent+0x2b0>)
    65de:	4798      	blx	r3
    65e0:	1c05      	adds	r5, r0, #0
    65e2:	1c0e      	adds	r6, r1, #0
    65e4:	4b5c      	ldr	r3, [pc, #368]	; (6758 <fanCalcPwmDutyPercent+0x2ac>)
    65e6:	68f8      	ldr	r0, [r7, #12]
    65e8:	4798      	blx	r3
    65ea:	1c03      	adds	r3, r0, #0
    65ec:	1c0c      	adds	r4, r1, #0
    65ee:	4a69      	ldr	r2, [pc, #420]	; (6794 <fanCalcPwmDutyPercent+0x2e8>)
    65f0:	4694      	mov	ip, r2
    65f2:	1c28      	adds	r0, r5, #0
    65f4:	1c31      	adds	r1, r6, #0
    65f6:	1c1a      	adds	r2, r3, #0
    65f8:	1c23      	adds	r3, r4, #0
    65fa:	47e0      	blx	ip
    65fc:	1c03      	adds	r3, r0, #0
    65fe:	1c0c      	adds	r4, r1, #0
    6600:	4a57      	ldr	r2, [pc, #348]	; (6760 <fanCalcPwmDutyPercent+0x2b4>)
    6602:	1c18      	adds	r0, r3, #0
    6604:	1c21      	adds	r1, r4, #0
    6606:	4790      	blx	r2
    6608:	1c03      	adds	r3, r0, #0
    660a:	60fb      	str	r3, [r7, #12]
    660c:	e084      	b.n	6718 <fanCalcPwmDutyPercent+0x26c>
	}
	else if (fan_inst == &fan3 || fan_inst == &fan8 || fan_inst == &fan7)
    660e:	687a      	ldr	r2, [r7, #4]
    6610:	4b61      	ldr	r3, [pc, #388]	; (6798 <fanCalcPwmDutyPercent+0x2ec>)
    6612:	429a      	cmp	r2, r3
    6614:	d007      	beq.n	6626 <fanCalcPwmDutyPercent+0x17a>
    6616:	687a      	ldr	r2, [r7, #4]
    6618:	4b60      	ldr	r3, [pc, #384]	; (679c <fanCalcPwmDutyPercent+0x2f0>)
    661a:	429a      	cmp	r2, r3
    661c:	d003      	beq.n	6626 <fanCalcPwmDutyPercent+0x17a>
    661e:	687a      	ldr	r2, [r7, #4]
    6620:	4b5f      	ldr	r3, [pc, #380]	; (67a0 <fanCalcPwmDutyPercent+0x2f4>)
    6622:	429a      	cmp	r2, r3
    6624:	d13b      	bne.n	669e <fanCalcPwmDutyPercent+0x1f2>
	{
		//fNewDutyPercent = round(pidFan2.Output) + fan2_spd_percent_lookup_table[idx];

		if (max(chamber1.rejectTemp, chamber2.rejectTemp) > FAN_MAX_SPD_REJECT_TEMP_LIMIT)
    6626:	4b52      	ldr	r3, [pc, #328]	; (6770 <fanCalcPwmDutyPercent+0x2c4>)
    6628:	68d9      	ldr	r1, [r3, #12]
    662a:	4b52      	ldr	r3, [pc, #328]	; (6774 <fanCalcPwmDutyPercent+0x2c8>)
    662c:	68da      	ldr	r2, [r3, #12]
    662e:	4b52      	ldr	r3, [pc, #328]	; (6778 <fanCalcPwmDutyPercent+0x2cc>)
    6630:	1c08      	adds	r0, r1, #0
    6632:	1c11      	adds	r1, r2, #0
    6634:	4798      	blx	r3
    6636:	1c03      	adds	r3, r0, #0
    6638:	2b00      	cmp	r3, #0
    663a:	d00e      	beq.n	665a <fanCalcPwmDutyPercent+0x1ae>
    663c:	4b4c      	ldr	r3, [pc, #304]	; (6770 <fanCalcPwmDutyPercent+0x2c4>)
    663e:	68da      	ldr	r2, [r3, #12]
    6640:	2301      	movs	r3, #1
    6642:	1c1c      	adds	r4, r3, #0
    6644:	4b4c      	ldr	r3, [pc, #304]	; (6778 <fanCalcPwmDutyPercent+0x2cc>)
    6646:	1c10      	adds	r0, r2, #0
    6648:	494c      	ldr	r1, [pc, #304]	; (677c <fanCalcPwmDutyPercent+0x2d0>)
    664a:	4798      	blx	r3
    664c:	1c03      	adds	r3, r0, #0
    664e:	2b00      	cmp	r3, #0
    6650:	d101      	bne.n	6656 <fanCalcPwmDutyPercent+0x1aa>
    6652:	2300      	movs	r3, #0
    6654:	1c1c      	adds	r4, r3, #0
    6656:	b2e3      	uxtb	r3, r4
    6658:	e00d      	b.n	6676 <fanCalcPwmDutyPercent+0x1ca>
    665a:	4b46      	ldr	r3, [pc, #280]	; (6774 <fanCalcPwmDutyPercent+0x2c8>)
    665c:	68da      	ldr	r2, [r3, #12]
    665e:	2301      	movs	r3, #1
    6660:	1c1c      	adds	r4, r3, #0
    6662:	4b45      	ldr	r3, [pc, #276]	; (6778 <fanCalcPwmDutyPercent+0x2cc>)
    6664:	1c10      	adds	r0, r2, #0
    6666:	4945      	ldr	r1, [pc, #276]	; (677c <fanCalcPwmDutyPercent+0x2d0>)
    6668:	4798      	blx	r3
    666a:	1c03      	adds	r3, r0, #0
    666c:	2b00      	cmp	r3, #0
    666e:	d101      	bne.n	6674 <fanCalcPwmDutyPercent+0x1c8>
    6670:	2300      	movs	r3, #0
    6672:	1c1c      	adds	r4, r3, #0
    6674:	b2e3      	uxtb	r3, r4
    6676:	2b00      	cmp	r3, #0
    6678:	d005      	beq.n	6686 <fanCalcPwmDutyPercent+0x1da>
		{
			fNewDutyPercent = 100.0;
    667a:	4b33      	ldr	r3, [pc, #204]	; (6748 <fanCalcPwmDutyPercent+0x29c>)
    667c:	60fb      	str	r3, [r7, #12]
			fan_inst->fan_state = FAN_STATE_REJECT_OT;
    667e:	687b      	ldr	r3, [r7, #4]
    6680:	2207      	movs	r2, #7
    6682:	77da      	strb	r2, [r3, #31]
	}
	else if (fan_inst == &fan3 || fan_inst == &fan8 || fan_inst == &fan7)
	{
		//fNewDutyPercent = round(pidFan2.Output) + fan2_spd_percent_lookup_table[idx];

		if (max(chamber1.rejectTemp, chamber2.rejectTemp) > FAN_MAX_SPD_REJECT_TEMP_LIMIT)
    6684:	e048      	b.n	6718 <fanCalcPwmDutyPercent+0x26c>
			fNewDutyPercent = 100.0;
			fan_inst->fan_state = FAN_STATE_REJECT_OT;
		}
		else
		{
			fNewDutyPercent = (float)fanStateMachine(fan_inst);
    6686:	687b      	ldr	r3, [r7, #4]
    6688:	1c18      	adds	r0, r3, #0
    668a:	4b3d      	ldr	r3, [pc, #244]	; (6780 <fanCalcPwmDutyPercent+0x2d4>)
    668c:	4798      	blx	r3
    668e:	1c03      	adds	r3, r0, #0
    6690:	1c1a      	adds	r2, r3, #0
    6692:	4b3c      	ldr	r3, [pc, #240]	; (6784 <fanCalcPwmDutyPercent+0x2d8>)
    6694:	1c10      	adds	r0, r2, #0
    6696:	4798      	blx	r3
    6698:	1c03      	adds	r3, r0, #0
    669a:	60fb      	str	r3, [r7, #12]
	}
	else if (fan_inst == &fan3 || fan_inst == &fan8 || fan_inst == &fan7)
	{
		//fNewDutyPercent = round(pidFan2.Output) + fan2_spd_percent_lookup_table[idx];

		if (max(chamber1.rejectTemp, chamber2.rejectTemp) > FAN_MAX_SPD_REJECT_TEMP_LIMIT)
    669c:	e03c      	b.n	6718 <fanCalcPwmDutyPercent+0x26c>
		else
		{
			fNewDutyPercent = (float)fanStateMachine(fan_inst);
		}
	}
	else if (fan_inst == &fan4)
    669e:	687a      	ldr	r2, [r7, #4]
    66a0:	4b40      	ldr	r3, [pc, #256]	; (67a4 <fanCalcPwmDutyPercent+0x2f8>)
    66a2:	429a      	cmp	r2, r3
    66a4:	d136      	bne.n	6714 <fanCalcPwmDutyPercent+0x268>
	{
		if (defrostActive)
    66a6:	4b39      	ldr	r3, [pc, #228]	; (678c <fanCalcPwmDutyPercent+0x2e0>)
    66a8:	781b      	ldrb	r3, [r3, #0]
    66aa:	2b00      	cmp	r3, #0
    66ac:	d005      	beq.n	66ba <fanCalcPwmDutyPercent+0x20e>
		{
			fNewDutyPercent = 100.0;
    66ae:	4b26      	ldr	r3, [pc, #152]	; (6748 <fanCalcPwmDutyPercent+0x29c>)
    66b0:	60fb      	str	r3, [r7, #12]
			fan4.fan_state = FAN_STATE_DEFROST;
    66b2:	4b3c      	ldr	r3, [pc, #240]	; (67a4 <fanCalcPwmDutyPercent+0x2f8>)
    66b4:	2208      	movs	r2, #8
    66b6:	77da      	strb	r2, [r3, #31]
    66b8:	e00a      	b.n	66d0 <fanCalcPwmDutyPercent+0x224>
		}
		else
		{
			fNewDutyPercent = (float)fanStateMachine(&fan4);
    66ba:	4b3a      	ldr	r3, [pc, #232]	; (67a4 <fanCalcPwmDutyPercent+0x2f8>)
    66bc:	1c18      	adds	r0, r3, #0
    66be:	4b30      	ldr	r3, [pc, #192]	; (6780 <fanCalcPwmDutyPercent+0x2d4>)
    66c0:	4798      	blx	r3
    66c2:	1c03      	adds	r3, r0, #0
    66c4:	1c1a      	adds	r2, r3, #0
    66c6:	4b2f      	ldr	r3, [pc, #188]	; (6784 <fanCalcPwmDutyPercent+0x2d8>)
    66c8:	1c10      	adds	r0, r2, #0
    66ca:	4798      	blx	r3
    66cc:	1c03      	adds	r3, r0, #0
    66ce:	60fb      	str	r3, [r7, #12]
		}
		
		fNewDutyPercent =  round(pidFan4.Output) + fNewDutyPercent;
    66d0:	4b2f      	ldr	r3, [pc, #188]	; (6790 <fanCalcPwmDutyPercent+0x2e4>)
    66d2:	6a1a      	ldr	r2, [r3, #32]
    66d4:	4b20      	ldr	r3, [pc, #128]	; (6758 <fanCalcPwmDutyPercent+0x2ac>)
    66d6:	1c10      	adds	r0, r2, #0
    66d8:	4798      	blx	r3
    66da:	1c03      	adds	r3, r0, #0
    66dc:	1c0c      	adds	r4, r1, #0
    66de:	1c18      	adds	r0, r3, #0
    66e0:	1c21      	adds	r1, r4, #0
    66e2:	4b1e      	ldr	r3, [pc, #120]	; (675c <fanCalcPwmDutyPercent+0x2b0>)
    66e4:	4798      	blx	r3
    66e6:	1c05      	adds	r5, r0, #0
    66e8:	1c0e      	adds	r6, r1, #0
    66ea:	4b1b      	ldr	r3, [pc, #108]	; (6758 <fanCalcPwmDutyPercent+0x2ac>)
    66ec:	68f8      	ldr	r0, [r7, #12]
    66ee:	4798      	blx	r3
    66f0:	1c03      	adds	r3, r0, #0
    66f2:	1c0c      	adds	r4, r1, #0
    66f4:	4a27      	ldr	r2, [pc, #156]	; (6794 <fanCalcPwmDutyPercent+0x2e8>)
    66f6:	4694      	mov	ip, r2
    66f8:	1c28      	adds	r0, r5, #0
    66fa:	1c31      	adds	r1, r6, #0
    66fc:	1c1a      	adds	r2, r3, #0
    66fe:	1c23      	adds	r3, r4, #0
    6700:	47e0      	blx	ip
    6702:	1c03      	adds	r3, r0, #0
    6704:	1c0c      	adds	r4, r1, #0
    6706:	4a16      	ldr	r2, [pc, #88]	; (6760 <fanCalcPwmDutyPercent+0x2b4>)
    6708:	1c18      	adds	r0, r3, #0
    670a:	1c21      	adds	r1, r4, #0
    670c:	4790      	blx	r2
    670e:	1c03      	adds	r3, r0, #0
    6710:	60fb      	str	r3, [r7, #12]
    6712:	e001      	b.n	6718 <fanCalcPwmDutyPercent+0x26c>
	}	
	else
	{
		fNewDutyPercent = 100.0;
    6714:	4b0c      	ldr	r3, [pc, #48]	; (6748 <fanCalcPwmDutyPercent+0x29c>)
    6716:	60fb      	str	r3, [r7, #12]
	}
	
	if (fNewDutyPercent >= DEFAULT_FAN_MAX_DUTY)
    6718:	4b0e      	ldr	r3, [pc, #56]	; (6754 <fanCalcPwmDutyPercent+0x2a8>)
    671a:	68f8      	ldr	r0, [r7, #12]
    671c:	490a      	ldr	r1, [pc, #40]	; (6748 <fanCalcPwmDutyPercent+0x29c>)
    671e:	4798      	blx	r3
    6720:	1c03      	adds	r3, r0, #0
    6722:	2b00      	cmp	r3, #0
    6724:	d002      	beq.n	672c <fanCalcPwmDutyPercent+0x280>
	{
		fNewDutyPercent = DEFAULT_FAN_MAX_DUTY;
    6726:	4b08      	ldr	r3, [pc, #32]	; (6748 <fanCalcPwmDutyPercent+0x29c>)
    6728:	60fb      	str	r3, [r7, #12]
    672a:	e008      	b.n	673e <fanCalcPwmDutyPercent+0x292>
	}
	else if (fNewDutyPercent <= 0)
    672c:	4b1e      	ldr	r3, [pc, #120]	; (67a8 <fanCalcPwmDutyPercent+0x2fc>)
    672e:	68f8      	ldr	r0, [r7, #12]
    6730:	2100      	movs	r1, #0
    6732:	4798      	blx	r3
    6734:	1c03      	adds	r3, r0, #0
    6736:	2b00      	cmp	r3, #0
    6738:	d001      	beq.n	673e <fanCalcPwmDutyPercent+0x292>
	{
		fNewDutyPercent = 0;
    673a:	2300      	movs	r3, #0
    673c:	60fb      	str	r3, [r7, #12]
	}	
	
	return fNewDutyPercent;
    673e:	68fb      	ldr	r3, [r7, #12]
}
    6740:	1c18      	adds	r0, r3, #0
    6742:	46bd      	mov	sp, r7
    6744:	b005      	add	sp, #20
    6746:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6748:	42c80000 	.word	0x42c80000
    674c:	0001f62d 	.word	0x0001f62d
    6750:	20000084 	.word	0x20000084
    6754:	0001f669 	.word	0x0001f669
    6758:	00022111 	.word	0x00022111
    675c:	00019ac9 	.word	0x00019ac9
    6760:	000221b5 	.word	0x000221b5
    6764:	20000c58 	.word	0x20000c58
    6768:	20000b8c 	.word	0x20000b8c
    676c:	20000914 	.word	0x20000914
    6770:	200009b8 	.word	0x200009b8
    6774:	20000960 	.word	0x20000960
    6778:	0001f655 	.word	0x0001f655
    677c:	42480000 	.word	0x42480000
    6780:	00006279 	.word	0x00006279
    6784:	0002046d 	.word	0x0002046d
    6788:	20000e84 	.word	0x20000e84
    678c:	200002a4 	.word	0x200002a4
    6790:	20000bd8 	.word	0x20000bd8
    6794:	0002050d 	.word	0x0002050d
    6798:	20000d18 	.word	0x20000d18
    679c:	20000b40 	.word	0x20000b40
    67a0:	20000dc0 	.word	0x20000dc0
    67a4:	20000adc 	.word	0x20000adc
    67a8:	0001f641 	.word	0x0001f641

000067ac <fanCheckRpmOutOfBounds>:
	
	return int_spd_setting;
}
*/
uint8_t fanCheckRpmOutOfBounds(struct fan_vars *fan_inst)
{
    67ac:	b580      	push	{r7, lr}
    67ae:	b084      	sub	sp, #16
    67b0:	af00      	add	r7, sp, #0
    67b2:	6078      	str	r0, [r7, #4]
	uint8_t idx = 0;
    67b4:	1c3b      	adds	r3, r7, #0
    67b6:	330f      	adds	r3, #15
    67b8:	2200      	movs	r2, #0
    67ba:	701a      	strb	r2, [r3, #0]
	
	idx = fan_inst->intDutyPercent;
    67bc:	1c3b      	adds	r3, r7, #0
    67be:	330f      	adds	r3, #15
    67c0:	6879      	ldr	r1, [r7, #4]
    67c2:	2230      	movs	r2, #48	; 0x30
    67c4:	5c8a      	ldrb	r2, [r1, r2]
    67c6:	701a      	strb	r2, [r3, #0]
	
	if (idx >= FAN_RPM_LOOKUP_TABLE_SIZE) { idx = FAN_RPM_LOOKUP_TABLE_SIZE; }
    67c8:	1c3b      	adds	r3, r7, #0
    67ca:	330f      	adds	r3, #15
    67cc:	781b      	ldrb	r3, [r3, #0]
    67ce:	2b64      	cmp	r3, #100	; 0x64
    67d0:	d904      	bls.n	67dc <fanCheckRpmOutOfBounds+0x30>
    67d2:	1c3b      	adds	r3, r7, #0
    67d4:	330f      	adds	r3, #15
    67d6:	2265      	movs	r2, #101	; 0x65
    67d8:	701a      	strb	r2, [r3, #0]
    67da:	e008      	b.n	67ee <fanCheckRpmOutOfBounds+0x42>
	else if (idx <= 0) { idx = 0; }
    67dc:	1c3b      	adds	r3, r7, #0
    67de:	330f      	adds	r3, #15
    67e0:	781b      	ldrb	r3, [r3, #0]
    67e2:	2b00      	cmp	r3, #0
    67e4:	d103      	bne.n	67ee <fanCheckRpmOutOfBounds+0x42>
    67e6:	1c3b      	adds	r3, r7, #0
    67e8:	330f      	adds	r3, #15
    67ea:	2200      	movs	r2, #0
    67ec:	701a      	strb	r2, [r3, #0]
	
	if (fan_inst->fanType==Sanyo_9ga0912p4g03)
    67ee:	687a      	ldr	r2, [r7, #4]
    67f0:	2348      	movs	r3, #72	; 0x48
    67f2:	5cd3      	ldrb	r3, [r2, r3]
    67f4:	2b00      	cmp	r3, #0
    67f6:	d10c      	bne.n	6812 <fanCheckRpmOutOfBounds+0x66>
	{
		fan_inst->fanRpmSetting = fan_sanyo_9ga0912p4g03_rpm_lookup_table[idx];
    67f8:	1c3b      	adds	r3, r7, #0
    67fa:	330f      	adds	r3, #15
    67fc:	781a      	ldrb	r2, [r3, #0]
    67fe:	4b30      	ldr	r3, [pc, #192]	; (68c0 <fanCheckRpmOutOfBounds+0x114>)
    6800:	0052      	lsls	r2, r2, #1
    6802:	5ad2      	ldrh	r2, [r2, r3]
    6804:	4b2f      	ldr	r3, [pc, #188]	; (68c4 <fanCheckRpmOutOfBounds+0x118>)
    6806:	1c10      	adds	r0, r2, #0
    6808:	4798      	blx	r3
    680a:	1c02      	adds	r2, r0, #0
    680c:	687b      	ldr	r3, [r7, #4]
    680e:	63da      	str	r2, [r3, #60]	; 0x3c
    6810:	e034      	b.n	687c <fanCheckRpmOutOfBounds+0xd0>
	}
	else if (fan_inst->fanType==Sanyo_9s0912p4f011)
    6812:	687a      	ldr	r2, [r7, #4]
    6814:	2348      	movs	r3, #72	; 0x48
    6816:	5cd3      	ldrb	r3, [r2, r3]
    6818:	2b01      	cmp	r3, #1
    681a:	d10c      	bne.n	6836 <fanCheckRpmOutOfBounds+0x8a>
	{
		fan_inst->fanRpmSetting = fan_sanyo_9ga0912p4g03_rpm_lookup_table[idx];
    681c:	1c3b      	adds	r3, r7, #0
    681e:	330f      	adds	r3, #15
    6820:	781a      	ldrb	r2, [r3, #0]
    6822:	4b27      	ldr	r3, [pc, #156]	; (68c0 <fanCheckRpmOutOfBounds+0x114>)
    6824:	0052      	lsls	r2, r2, #1
    6826:	5ad2      	ldrh	r2, [r2, r3]
    6828:	4b26      	ldr	r3, [pc, #152]	; (68c4 <fanCheckRpmOutOfBounds+0x118>)
    682a:	1c10      	adds	r0, r2, #0
    682c:	4798      	blx	r3
    682e:	1c02      	adds	r2, r0, #0
    6830:	687b      	ldr	r3, [r7, #4]
    6832:	63da      	str	r2, [r3, #60]	; 0x3c
    6834:	e022      	b.n	687c <fanCheckRpmOutOfBounds+0xd0>
	}
	else if (fan_inst->fanType==Sanyo_9ga0912p4j03)
    6836:	687a      	ldr	r2, [r7, #4]
    6838:	2348      	movs	r3, #72	; 0x48
    683a:	5cd3      	ldrb	r3, [r2, r3]
    683c:	2b02      	cmp	r3, #2
    683e:	d10c      	bne.n	685a <fanCheckRpmOutOfBounds+0xae>
	{
		fan_inst->fanRpmSetting = fan_sanyo_9ga0912p4j03_rpm_lookup_table[idx];
    6840:	1c3b      	adds	r3, r7, #0
    6842:	330f      	adds	r3, #15
    6844:	781a      	ldrb	r2, [r3, #0]
    6846:	4b20      	ldr	r3, [pc, #128]	; (68c8 <fanCheckRpmOutOfBounds+0x11c>)
    6848:	0052      	lsls	r2, r2, #1
    684a:	5ad2      	ldrh	r2, [r2, r3]
    684c:	4b1d      	ldr	r3, [pc, #116]	; (68c4 <fanCheckRpmOutOfBounds+0x118>)
    684e:	1c10      	adds	r0, r2, #0
    6850:	4798      	blx	r3
    6852:	1c02      	adds	r2, r0, #0
    6854:	687b      	ldr	r3, [r7, #4]
    6856:	63da      	str	r2, [r3, #60]	; 0x3c
    6858:	e010      	b.n	687c <fanCheckRpmOutOfBounds+0xd0>
	}
	else if (fan_inst->fanType==Nidec_v12e12bmm9)
    685a:	687a      	ldr	r2, [r7, #4]
    685c:	2348      	movs	r3, #72	; 0x48
    685e:	5cd3      	ldrb	r3, [r2, r3]
    6860:	2b03      	cmp	r3, #3
    6862:	d10b      	bne.n	687c <fanCheckRpmOutOfBounds+0xd0>
	{
		fan_inst->fanRpmSetting = fan_nidec_v12e12bmm9_rpm_lookup_table[idx];
    6864:	1c3b      	adds	r3, r7, #0
    6866:	330f      	adds	r3, #15
    6868:	781a      	ldrb	r2, [r3, #0]
    686a:	4b18      	ldr	r3, [pc, #96]	; (68cc <fanCheckRpmOutOfBounds+0x120>)
    686c:	0052      	lsls	r2, r2, #1
    686e:	5ad2      	ldrh	r2, [r2, r3]
    6870:	4b14      	ldr	r3, [pc, #80]	; (68c4 <fanCheckRpmOutOfBounds+0x118>)
    6872:	1c10      	adds	r0, r2, #0
    6874:	4798      	blx	r3
    6876:	1c02      	adds	r2, r0, #0
    6878:	687b      	ldr	r3, [r7, #4]
    687a:	63da      	str	r2, [r3, #60]	; 0x3c
	}
		
	//fan_inst->fanSpdUprLim = fan_inst->fanRpmSetting + (fan_inst->fanRpmSetting * ((float)fanRpmErrorPercentage/100) );
	//fan_inst->fanSpdLwrLim = fan_inst->fanRpmSetting - (fan_inst->fanRpmSetting * ((float)fanRpmErrorPercentage/100) );
	fan_inst->fanSpdLwrLim = fan_inst->fanRpmSetting - fanSpdTolerance;
    687c:	687b      	ldr	r3, [r7, #4]
    687e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    6880:	4b13      	ldr	r3, [pc, #76]	; (68d0 <fanCheckRpmOutOfBounds+0x124>)
    6882:	681a      	ldr	r2, [r3, #0]
    6884:	4b13      	ldr	r3, [pc, #76]	; (68d4 <fanCheckRpmOutOfBounds+0x128>)
    6886:	1c08      	adds	r0, r1, #0
    6888:	1c11      	adds	r1, r2, #0
    688a:	4798      	blx	r3
    688c:	1c03      	adds	r3, r0, #0
    688e:	1c1a      	adds	r2, r3, #0
    6890:	687b      	ldr	r3, [r7, #4]
    6892:	645a      	str	r2, [r3, #68]	; 0x44
	
	if ( (fan_inst->rpm <= fan_inst->fanSpdLwrLim) )
    6894:	687b      	ldr	r3, [r7, #4]
    6896:	691a      	ldr	r2, [r3, #16]
    6898:	4b0a      	ldr	r3, [pc, #40]	; (68c4 <fanCheckRpmOutOfBounds+0x118>)
    689a:	1c10      	adds	r0, r2, #0
    689c:	4798      	blx	r3
    689e:	1c01      	adds	r1, r0, #0
    68a0:	687b      	ldr	r3, [r7, #4]
    68a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    68a4:	4b0c      	ldr	r3, [pc, #48]	; (68d8 <fanCheckRpmOutOfBounds+0x12c>)
    68a6:	1c08      	adds	r0, r1, #0
    68a8:	1c11      	adds	r1, r2, #0
    68aa:	4798      	blx	r3
    68ac:	1c03      	adds	r3, r0, #0
    68ae:	2b00      	cmp	r3, #0
    68b0:	d001      	beq.n	68b6 <fanCheckRpmOutOfBounds+0x10a>
	{
		return 1;
    68b2:	2301      	movs	r3, #1
    68b4:	e000      	b.n	68b8 <fanCheckRpmOutOfBounds+0x10c>
		// may be loss of pwm control 
	}
	*/
	else
	{
		return 0;
    68b6:	2300      	movs	r3, #0
	}
}
    68b8:	1c18      	adds	r0, r3, #0
    68ba:	46bd      	mov	sp, r7
    68bc:	b004      	add	sp, #16
    68be:	bd80      	pop	{r7, pc}
    68c0:	0002349c 	.word	0x0002349c
    68c4:	0002046d 	.word	0x0002046d
    68c8:	00023568 	.word	0x00023568
    68cc:	00023634 	.word	0x00023634
    68d0:	2000003c 	.word	0x2000003c
    68d4:	00020089 	.word	0x00020089
    68d8:	0001f641 	.word	0x0001f641

000068dc <checkForFanFaults>:

void checkForFanFaults()
{
    68dc:	b580      	push	{r7, lr}
    68de:	af00      	add	r7, sp, #0
	// fan stall, reject 1 //////////////////////////////
	if ( (fanCheckRpmOutOfBounds(&fan1)==true) && (fan1.state==ON ) )
    68e0:	4b5b      	ldr	r3, [pc, #364]	; (6a50 <checkForFanFaults+0x174>)
    68e2:	1c18      	adds	r0, r3, #0
    68e4:	4b5b      	ldr	r3, [pc, #364]	; (6a54 <checkForFanFaults+0x178>)
    68e6:	4798      	blx	r3
    68e8:	1c03      	adds	r3, r0, #0
    68ea:	2b01      	cmp	r3, #1
    68ec:	d115      	bne.n	691a <checkForFanFaults+0x3e>
    68ee:	4b58      	ldr	r3, [pc, #352]	; (6a50 <checkForFanFaults+0x174>)
    68f0:	7d5b      	ldrb	r3, [r3, #21]
    68f2:	2b00      	cmp	r3, #0
    68f4:	d011      	beq.n	691a <checkForFanFaults+0x3e>
	{
		fan1LowSpdErrCnt++;
    68f6:	4b58      	ldr	r3, [pc, #352]	; (6a58 <checkForFanFaults+0x17c>)
    68f8:	881b      	ldrh	r3, [r3, #0]
    68fa:	3301      	adds	r3, #1
    68fc:	b29a      	uxth	r2, r3
    68fe:	4b56      	ldr	r3, [pc, #344]	; (6a58 <checkForFanFaults+0x17c>)
    6900:	801a      	strh	r2, [r3, #0]
		
		if (fan1.stall==FAN_STALLED)
    6902:	4b53      	ldr	r3, [pc, #332]	; (6a50 <checkForFanFaults+0x174>)
    6904:	7f9b      	ldrb	r3, [r3, #30]
    6906:	2b00      	cmp	r3, #0
    6908:	d006      	beq.n	6918 <checkForFanFaults+0x3c>
		{
			fan1ErrorCount++;
    690a:	4b54      	ldr	r3, [pc, #336]	; (6a5c <checkForFanFaults+0x180>)
    690c:	881b      	ldrh	r3, [r3, #0]
    690e:	3301      	adds	r3, #1
    6910:	b29a      	uxth	r2, r3
    6912:	4b52      	ldr	r3, [pc, #328]	; (6a5c <checkForFanFaults+0x180>)
    6914:	801a      	strh	r2, [r3, #0]
	// fan stall, reject 1 //////////////////////////////
	if ( (fanCheckRpmOutOfBounds(&fan1)==true) && (fan1.state==ON ) )
	{
		fan1LowSpdErrCnt++;
		
		if (fan1.stall==FAN_STALLED)
    6916:	e006      	b.n	6926 <checkForFanFaults+0x4a>
    6918:	e005      	b.n	6926 <checkForFanFaults+0x4a>
			fan1ErrorCount++;
		}
	}
	else
	{
		fan1LowSpdErrCnt = 0;
    691a:	4b4f      	ldr	r3, [pc, #316]	; (6a58 <checkForFanFaults+0x17c>)
    691c:	2200      	movs	r2, #0
    691e:	801a      	strh	r2, [r3, #0]
		fan1ErrorCount = 0;
    6920:	4b4e      	ldr	r3, [pc, #312]	; (6a5c <checkForFanFaults+0x180>)
    6922:	2200      	movs	r2, #0
    6924:	801a      	strh	r2, [r3, #0]
	}
	
	// fan stall, reject 2 //////////////////////////////
	if ( (fanCheckRpmOutOfBounds(&fan2)==true) && (fan2.state==ON) )
    6926:	4b4e      	ldr	r3, [pc, #312]	; (6a60 <checkForFanFaults+0x184>)
    6928:	1c18      	adds	r0, r3, #0
    692a:	4b4a      	ldr	r3, [pc, #296]	; (6a54 <checkForFanFaults+0x178>)
    692c:	4798      	blx	r3
    692e:	1c03      	adds	r3, r0, #0
    6930:	2b01      	cmp	r3, #1
    6932:	d115      	bne.n	6960 <checkForFanFaults+0x84>
    6934:	4b4a      	ldr	r3, [pc, #296]	; (6a60 <checkForFanFaults+0x184>)
    6936:	7d5b      	ldrb	r3, [r3, #21]
    6938:	2b00      	cmp	r3, #0
    693a:	d011      	beq.n	6960 <checkForFanFaults+0x84>
	{
		fan2LowSpdErrCnt++;
    693c:	4b49      	ldr	r3, [pc, #292]	; (6a64 <checkForFanFaults+0x188>)
    693e:	881b      	ldrh	r3, [r3, #0]
    6940:	3301      	adds	r3, #1
    6942:	b29a      	uxth	r2, r3
    6944:	4b47      	ldr	r3, [pc, #284]	; (6a64 <checkForFanFaults+0x188>)
    6946:	801a      	strh	r2, [r3, #0]
		
		if (fan2.stall==FAN_STALLED)
    6948:	4b45      	ldr	r3, [pc, #276]	; (6a60 <checkForFanFaults+0x184>)
    694a:	7f9b      	ldrb	r3, [r3, #30]
    694c:	2b00      	cmp	r3, #0
    694e:	d006      	beq.n	695e <checkForFanFaults+0x82>
		{
			fan2ErrorCount++;
    6950:	4b45      	ldr	r3, [pc, #276]	; (6a68 <checkForFanFaults+0x18c>)
    6952:	881b      	ldrh	r3, [r3, #0]
    6954:	3301      	adds	r3, #1
    6956:	b29a      	uxth	r2, r3
    6958:	4b43      	ldr	r3, [pc, #268]	; (6a68 <checkForFanFaults+0x18c>)
    695a:	801a      	strh	r2, [r3, #0]
	// fan stall, reject 2 //////////////////////////////
	if ( (fanCheckRpmOutOfBounds(&fan2)==true) && (fan2.state==ON) )
	{
		fan2LowSpdErrCnt++;
		
		if (fan2.stall==FAN_STALLED)
    695c:	e006      	b.n	696c <checkForFanFaults+0x90>
    695e:	e005      	b.n	696c <checkForFanFaults+0x90>
			fan2ErrorCount++;
		}
	}
	else
	{
		fan2LowSpdErrCnt = 0;
    6960:	4b40      	ldr	r3, [pc, #256]	; (6a64 <checkForFanFaults+0x188>)
    6962:	2200      	movs	r2, #0
    6964:	801a      	strh	r2, [r3, #0]
		fan2ErrorCount = 0;
    6966:	4b40      	ldr	r3, [pc, #256]	; (6a68 <checkForFanFaults+0x18c>)
    6968:	2200      	movs	r2, #0
    696a:	801a      	strh	r2, [r3, #0]
	}
	
	// fan stall, chamber ///////////////////////////////
	if ( (fanCheckRpmOutOfBounds(&fan4)==true) && (fan4.state==ON) )
    696c:	4b3f      	ldr	r3, [pc, #252]	; (6a6c <checkForFanFaults+0x190>)
    696e:	1c18      	adds	r0, r3, #0
    6970:	4b38      	ldr	r3, [pc, #224]	; (6a54 <checkForFanFaults+0x178>)
    6972:	4798      	blx	r3
    6974:	1c03      	adds	r3, r0, #0
    6976:	2b01      	cmp	r3, #1
    6978:	d115      	bne.n	69a6 <checkForFanFaults+0xca>
    697a:	4b3c      	ldr	r3, [pc, #240]	; (6a6c <checkForFanFaults+0x190>)
    697c:	7d5b      	ldrb	r3, [r3, #21]
    697e:	2b00      	cmp	r3, #0
    6980:	d011      	beq.n	69a6 <checkForFanFaults+0xca>
	{
		fan4LowSpdErrCnt++;
    6982:	4b3b      	ldr	r3, [pc, #236]	; (6a70 <checkForFanFaults+0x194>)
    6984:	881b      	ldrh	r3, [r3, #0]
    6986:	3301      	adds	r3, #1
    6988:	b29a      	uxth	r2, r3
    698a:	4b39      	ldr	r3, [pc, #228]	; (6a70 <checkForFanFaults+0x194>)
    698c:	801a      	strh	r2, [r3, #0]
		
		if (fan4.stall==FAN_STALLED)
    698e:	4b37      	ldr	r3, [pc, #220]	; (6a6c <checkForFanFaults+0x190>)
    6990:	7f9b      	ldrb	r3, [r3, #30]
    6992:	2b00      	cmp	r3, #0
    6994:	d006      	beq.n	69a4 <checkForFanFaults+0xc8>
		{
			fan4ErrorCount++;
    6996:	4b37      	ldr	r3, [pc, #220]	; (6a74 <checkForFanFaults+0x198>)
    6998:	881b      	ldrh	r3, [r3, #0]
    699a:	3301      	adds	r3, #1
    699c:	b29a      	uxth	r2, r3
    699e:	4b35      	ldr	r3, [pc, #212]	; (6a74 <checkForFanFaults+0x198>)
    69a0:	801a      	strh	r2, [r3, #0]
	// fan stall, chamber ///////////////////////////////
	if ( (fanCheckRpmOutOfBounds(&fan4)==true) && (fan4.state==ON) )
	{
		fan4LowSpdErrCnt++;
		
		if (fan4.stall==FAN_STALLED)
    69a2:	e00d      	b.n	69c0 <checkForFanFaults+0xe4>
    69a4:	e00c      	b.n	69c0 <checkForFanFaults+0xe4>
			fan4ErrorCount++;
		}
	}
	else
	{
		if (doorOpenPresentStatus==CLOSED)
    69a6:	4b34      	ldr	r3, [pc, #208]	; (6a78 <checkForFanFaults+0x19c>)
    69a8:	781b      	ldrb	r3, [r3, #0]
    69aa:	2201      	movs	r2, #1
    69ac:	4053      	eors	r3, r2
    69ae:	b2db      	uxtb	r3, r3
    69b0:	2b00      	cmp	r3, #0
    69b2:	d005      	beq.n	69c0 <checkForFanFaults+0xe4>
		{
			fan4LowSpdErrCnt = 0;
    69b4:	4b2e      	ldr	r3, [pc, #184]	; (6a70 <checkForFanFaults+0x194>)
    69b6:	2200      	movs	r2, #0
    69b8:	801a      	strh	r2, [r3, #0]
			fan4ErrorCount = 0;
    69ba:	4b2e      	ldr	r3, [pc, #184]	; (6a74 <checkForFanFaults+0x198>)
    69bc:	2200      	movs	r2, #0
    69be:	801a      	strh	r2, [r3, #0]
		}
	}

	// update error register for fan errors /////////////
	if (maxFanErrorCount > 0)
    69c0:	4b2e      	ldr	r3, [pc, #184]	; (6a7c <checkForFanFaults+0x1a0>)
    69c2:	881b      	ldrh	r3, [r3, #0]
    69c4:	2b00      	cmp	r3, #0
    69c6:	d040      	beq.n	6a4a <checkForFanFaults+0x16e>
	{
		if (fan1ErrorCount >= maxFanErrorCount)
    69c8:	4b24      	ldr	r3, [pc, #144]	; (6a5c <checkForFanFaults+0x180>)
    69ca:	881a      	ldrh	r2, [r3, #0]
    69cc:	4b2b      	ldr	r3, [pc, #172]	; (6a7c <checkForFanFaults+0x1a0>)
    69ce:	881b      	ldrh	r3, [r3, #0]
    69d0:	429a      	cmp	r2, r3
    69d2:	d308      	bcc.n	69e6 <checkForFanFaults+0x10a>
		{
			errorRegister |= ERROR_REJ_FAN_SPEED;
    69d4:	4b2a      	ldr	r3, [pc, #168]	; (6a80 <checkForFanFaults+0x1a4>)
    69d6:	881b      	ldrh	r3, [r3, #0]
    69d8:	2280      	movs	r2, #128	; 0x80
    69da:	0052      	lsls	r2, r2, #1
    69dc:	4313      	orrs	r3, r2
    69de:	b29a      	uxth	r2, r3
    69e0:	4b27      	ldr	r3, [pc, #156]	; (6a80 <checkForFanFaults+0x1a4>)
    69e2:	801a      	strh	r2, [r3, #0]
    69e4:	e006      	b.n	69f4 <checkForFanFaults+0x118>
		}
		else
		{
			errorRegister &= ~ERROR_REJ_FAN_SPEED;
    69e6:	4b26      	ldr	r3, [pc, #152]	; (6a80 <checkForFanFaults+0x1a4>)
    69e8:	881a      	ldrh	r2, [r3, #0]
    69ea:	4b26      	ldr	r3, [pc, #152]	; (6a84 <checkForFanFaults+0x1a8>)
    69ec:	4013      	ands	r3, r2
    69ee:	b29a      	uxth	r2, r3
    69f0:	4b23      	ldr	r3, [pc, #140]	; (6a80 <checkForFanFaults+0x1a4>)
    69f2:	801a      	strh	r2, [r3, #0]
		}
		
		if (fan2ErrorCount >= maxFanErrorCount)
    69f4:	4b1c      	ldr	r3, [pc, #112]	; (6a68 <checkForFanFaults+0x18c>)
    69f6:	881a      	ldrh	r2, [r3, #0]
    69f8:	4b20      	ldr	r3, [pc, #128]	; (6a7c <checkForFanFaults+0x1a0>)
    69fa:	881b      	ldrh	r3, [r3, #0]
    69fc:	429a      	cmp	r2, r3
    69fe:	d308      	bcc.n	6a12 <checkForFanFaults+0x136>
		{
			errorRegister |= ERROR_REJ_FAN_SPEED;
    6a00:	4b1f      	ldr	r3, [pc, #124]	; (6a80 <checkForFanFaults+0x1a4>)
    6a02:	881b      	ldrh	r3, [r3, #0]
    6a04:	2280      	movs	r2, #128	; 0x80
    6a06:	0052      	lsls	r2, r2, #1
    6a08:	4313      	orrs	r3, r2
    6a0a:	b29a      	uxth	r2, r3
    6a0c:	4b1c      	ldr	r3, [pc, #112]	; (6a80 <checkForFanFaults+0x1a4>)
    6a0e:	801a      	strh	r2, [r3, #0]
    6a10:	e006      	b.n	6a20 <checkForFanFaults+0x144>
		}
		else
		{
			errorRegister &= ~ERROR_REJ_FAN_SPEED;
    6a12:	4b1b      	ldr	r3, [pc, #108]	; (6a80 <checkForFanFaults+0x1a4>)
    6a14:	881a      	ldrh	r2, [r3, #0]
    6a16:	4b1b      	ldr	r3, [pc, #108]	; (6a84 <checkForFanFaults+0x1a8>)
    6a18:	4013      	ands	r3, r2
    6a1a:	b29a      	uxth	r2, r3
    6a1c:	4b18      	ldr	r3, [pc, #96]	; (6a80 <checkForFanFaults+0x1a4>)
    6a1e:	801a      	strh	r2, [r3, #0]
		}
		
		if (fan4ErrorCount >= maxFanErrorCount)
    6a20:	4b14      	ldr	r3, [pc, #80]	; (6a74 <checkForFanFaults+0x198>)
    6a22:	881a      	ldrh	r2, [r3, #0]
    6a24:	4b15      	ldr	r3, [pc, #84]	; (6a7c <checkForFanFaults+0x1a0>)
    6a26:	881b      	ldrh	r3, [r3, #0]
    6a28:	429a      	cmp	r2, r3
    6a2a:	d307      	bcc.n	6a3c <checkForFanFaults+0x160>
		{
			errorRegister |= ERROR_CHA_FAN_SPEED;
    6a2c:	4b14      	ldr	r3, [pc, #80]	; (6a80 <checkForFanFaults+0x1a4>)
    6a2e:	881b      	ldrh	r3, [r3, #0]
    6a30:	2204      	movs	r2, #4
    6a32:	4313      	orrs	r3, r2
    6a34:	b29a      	uxth	r2, r3
    6a36:	4b12      	ldr	r3, [pc, #72]	; (6a80 <checkForFanFaults+0x1a4>)
    6a38:	801a      	strh	r2, [r3, #0]
    6a3a:	e006      	b.n	6a4a <checkForFanFaults+0x16e>
		}
		else
		{
			errorRegister &= ~ERROR_CHA_FAN_SPEED;
    6a3c:	4b10      	ldr	r3, [pc, #64]	; (6a80 <checkForFanFaults+0x1a4>)
    6a3e:	881b      	ldrh	r3, [r3, #0]
    6a40:	2204      	movs	r2, #4
    6a42:	4393      	bics	r3, r2
    6a44:	b29a      	uxth	r2, r3
    6a46:	4b0e      	ldr	r3, [pc, #56]	; (6a80 <checkForFanFaults+0x1a4>)
    6a48:	801a      	strh	r2, [r3, #0]
		}
	}
    6a4a:	46bd      	mov	sp, r7
    6a4c:	bd80      	pop	{r7, pc}
    6a4e:	46c0      	nop			; (mov r8, r8)
    6a50:	20000e84 	.word	0x20000e84
    6a54:	000067ad 	.word	0x000067ad
    6a58:	200002c0 	.word	0x200002c0
    6a5c:	200002ba 	.word	0x200002ba
    6a60:	20000c58 	.word	0x20000c58
    6a64:	200002c2 	.word	0x200002c2
    6a68:	200002bc 	.word	0x200002bc
    6a6c:	20000adc 	.word	0x20000adc
    6a70:	200002c4 	.word	0x200002c4
    6a74:	200002be 	.word	0x200002be
    6a78:	20000345 	.word	0x20000345
    6a7c:	2000003a 	.word	0x2000003a
    6a80:	20000332 	.word	0x20000332
    6a84:	fffffeff 	.word	0xfffffeff

00006a88 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
    6a88:	b580      	push	{r7, lr}
    6a8a:	af00      	add	r7, sp, #0
	return test_case_ptr;
    6a8c:	4b02      	ldr	r3, [pc, #8]	; (6a98 <test_get_case+0x10>)
    6a8e:	681b      	ldr	r3, [r3, #0]
}
    6a90:	1c18      	adds	r0, r3, #0
    6a92:	46bd      	mov	sp, r7
    6a94:	bd80      	pop	{r7, pc}
    6a96:	46c0      	nop			; (mov r8, r8)
    6a98:	2000041c 	.word	0x2000041c

00006a9c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    6a9c:	b590      	push	{r4, r7, lr}
    6a9e:	b085      	sub	sp, #20
    6aa0:	af02      	add	r7, sp, #8
    6aa2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
    6aa4:	4b16      	ldr	r3, [pc, #88]	; (6b00 <system_pinmux_get_config_defaults+0x64>)
    6aa6:	4798      	blx	r3
    6aa8:	1c03      	adds	r3, r0, #0
    6aaa:	2b00      	cmp	r3, #0
    6aac:	d011      	beq.n	6ad2 <system_pinmux_get_config_defaults+0x36>
    6aae:	687b      	ldr	r3, [r7, #4]
    6ab0:	2b00      	cmp	r3, #0
    6ab2:	d119      	bne.n	6ae8 <system_pinmux_get_config_defaults+0x4c>
    6ab4:	4b12      	ldr	r3, [pc, #72]	; (6b00 <system_pinmux_get_config_defaults+0x64>)
    6ab6:	4798      	blx	r3
    6ab8:	1c01      	adds	r1, r0, #0
    6aba:	4a12      	ldr	r2, [pc, #72]	; (6b04 <system_pinmux_get_config_defaults+0x68>)
    6abc:	239d      	movs	r3, #157	; 0x9d
    6abe:	005b      	lsls	r3, r3, #1
    6ac0:	4811      	ldr	r0, [pc, #68]	; (6b08 <system_pinmux_get_config_defaults+0x6c>)
    6ac2:	9000      	str	r0, [sp, #0]
    6ac4:	4811      	ldr	r0, [pc, #68]	; (6b0c <system_pinmux_get_config_defaults+0x70>)
    6ac6:	9001      	str	r0, [sp, #4]
    6ac8:	1c08      	adds	r0, r1, #0
    6aca:	2101      	movs	r1, #1
    6acc:	4c10      	ldr	r4, [pc, #64]	; (6b10 <system_pinmux_get_config_defaults+0x74>)
    6ace:	47a0      	blx	r4
    6ad0:	e00a      	b.n	6ae8 <system_pinmux_get_config_defaults+0x4c>
    6ad2:	687b      	ldr	r3, [r7, #4]
    6ad4:	2b00      	cmp	r3, #0
    6ad6:	d107      	bne.n	6ae8 <system_pinmux_get_config_defaults+0x4c>
    6ad8:	480e      	ldr	r0, [pc, #56]	; (6b14 <system_pinmux_get_config_defaults+0x78>)
    6ada:	490c      	ldr	r1, [pc, #48]	; (6b0c <system_pinmux_get_config_defaults+0x70>)
    6adc:	4a09      	ldr	r2, [pc, #36]	; (6b04 <system_pinmux_get_config_defaults+0x68>)
    6ade:	239d      	movs	r3, #157	; 0x9d
    6ae0:	005b      	lsls	r3, r3, #1
    6ae2:	4c0d      	ldr	r4, [pc, #52]	; (6b18 <system_pinmux_get_config_defaults+0x7c>)
    6ae4:	47a0      	blx	r4
    6ae6:	e7fe      	b.n	6ae6 <system_pinmux_get_config_defaults+0x4a>

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6ae8:	687b      	ldr	r3, [r7, #4]
    6aea:	2280      	movs	r2, #128	; 0x80
    6aec:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6aee:	687b      	ldr	r3, [r7, #4]
    6af0:	2200      	movs	r2, #0
    6af2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6af4:	687b      	ldr	r3, [r7, #4]
    6af6:	2201      	movs	r2, #1
    6af8:	709a      	strb	r2, [r3, #2]
}
    6afa:	46bd      	mov	sp, r7
    6afc:	b003      	add	sp, #12
    6afe:	bd90      	pop	{r4, r7, pc}
    6b00:	00006a89 	.word	0x00006a89
    6b04:	00024624 	.word	0x00024624
    6b08:	00024654 	.word	0x00024654
    6b0c:	0002466c 	.word	0x0002466c
    6b10:	000106e9 	.word	0x000106e9
    6b14:	00024674 	.word	0x00024674
    6b18:	0001b62d 	.word	0x0001b62d

00006b1c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    6b1c:	b590      	push	{r4, r7, lr}
    6b1e:	b087      	sub	sp, #28
    6b20:	af02      	add	r7, sp, #8
    6b22:	1c02      	adds	r2, r0, #0
    6b24:	1dfb      	adds	r3, r7, #7
    6b26:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6b28:	1c3b      	adds	r3, r7, #0
    6b2a:	330f      	adds	r3, #15
    6b2c:	1dfa      	adds	r2, r7, #7
    6b2e:	7812      	ldrb	r2, [r2, #0]
    6b30:	09d2      	lsrs	r2, r2, #7
    6b32:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6b34:	1c3b      	adds	r3, r7, #0
    6b36:	330e      	adds	r3, #14
    6b38:	1dfa      	adds	r2, r7, #7
    6b3a:	7812      	ldrb	r2, [r2, #0]
    6b3c:	0952      	lsrs	r2, r2, #5
    6b3e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6b40:	4b1b      	ldr	r3, [pc, #108]	; (6bb0 <system_pinmux_get_group_from_gpio_pin+0x94>)
    6b42:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    6b44:	1c3b      	adds	r3, r7, #0
    6b46:	330f      	adds	r3, #15
    6b48:	781b      	ldrb	r3, [r3, #0]
    6b4a:	2b00      	cmp	r3, #0
    6b4c:	d10e      	bne.n	6b6c <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    6b4e:	1c3b      	adds	r3, r7, #0
    6b50:	330f      	adds	r3, #15
    6b52:	781b      	ldrb	r3, [r3, #0]
    6b54:	009b      	lsls	r3, r3, #2
    6b56:	2210      	movs	r2, #16
    6b58:	19d2      	adds	r2, r2, r7
    6b5a:	18d3      	adds	r3, r2, r3
    6b5c:	3b08      	subs	r3, #8
    6b5e:	681a      	ldr	r2, [r3, #0]
    6b60:	1c3b      	adds	r3, r7, #0
    6b62:	330e      	adds	r3, #14
    6b64:	781b      	ldrb	r3, [r3, #0]
    6b66:	01db      	lsls	r3, r3, #7
    6b68:	18d3      	adds	r3, r2, r3
    6b6a:	e01c      	b.n	6ba6 <system_pinmux_get_group_from_gpio_pin+0x8a>
	} else {
		Assert(false);
    6b6c:	4b11      	ldr	r3, [pc, #68]	; (6bb4 <system_pinmux_get_group_from_gpio_pin+0x98>)
    6b6e:	4798      	blx	r3
    6b70:	1c03      	adds	r3, r0, #0
    6b72:	2b00      	cmp	r3, #0
    6b74:	d00f      	beq.n	6b96 <system_pinmux_get_group_from_gpio_pin+0x7a>
    6b76:	4b0f      	ldr	r3, [pc, #60]	; (6bb4 <system_pinmux_get_group_from_gpio_pin+0x98>)
    6b78:	4798      	blx	r3
    6b7a:	1c01      	adds	r1, r0, #0
    6b7c:	4a0e      	ldr	r2, [pc, #56]	; (6bb8 <system_pinmux_get_group_from_gpio_pin+0x9c>)
    6b7e:	2368      	movs	r3, #104	; 0x68
    6b80:	33ff      	adds	r3, #255	; 0xff
    6b82:	480e      	ldr	r0, [pc, #56]	; (6bbc <system_pinmux_get_group_from_gpio_pin+0xa0>)
    6b84:	9000      	str	r0, [sp, #0]
    6b86:	480e      	ldr	r0, [pc, #56]	; (6bc0 <system_pinmux_get_group_from_gpio_pin+0xa4>)
    6b88:	9001      	str	r0, [sp, #4]
    6b8a:	1c08      	adds	r0, r1, #0
    6b8c:	2101      	movs	r1, #1
    6b8e:	4c0d      	ldr	r4, [pc, #52]	; (6bc4 <system_pinmux_get_group_from_gpio_pin+0xa8>)
    6b90:	47a0      	blx	r4
		return NULL;
    6b92:	2300      	movs	r3, #0
    6b94:	e007      	b.n	6ba6 <system_pinmux_get_group_from_gpio_pin+0x8a>
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
    6b96:	480c      	ldr	r0, [pc, #48]	; (6bc8 <system_pinmux_get_group_from_gpio_pin+0xac>)
    6b98:	4909      	ldr	r1, [pc, #36]	; (6bc0 <system_pinmux_get_group_from_gpio_pin+0xa4>)
    6b9a:	4a07      	ldr	r2, [pc, #28]	; (6bb8 <system_pinmux_get_group_from_gpio_pin+0x9c>)
    6b9c:	2368      	movs	r3, #104	; 0x68
    6b9e:	33ff      	adds	r3, #255	; 0xff
    6ba0:	4c0a      	ldr	r4, [pc, #40]	; (6bcc <system_pinmux_get_group_from_gpio_pin+0xb0>)
    6ba2:	47a0      	blx	r4
    6ba4:	e7fe      	b.n	6ba4 <system_pinmux_get_group_from_gpio_pin+0x88>
		return NULL;
	}
}
    6ba6:	1c18      	adds	r0, r3, #0
    6ba8:	46bd      	mov	sp, r7
    6baa:	b005      	add	sp, #20
    6bac:	bd90      	pop	{r4, r7, pc}
    6bae:	46c0      	nop			; (mov r8, r8)
    6bb0:	41004400 	.word	0x41004400
    6bb4:	00006a89 	.word	0x00006a89
    6bb8:	00024624 	.word	0x00024624
    6bbc:	00024654 	.word	0x00024654
    6bc0:	00024698 	.word	0x00024698
    6bc4:	000106e9 	.word	0x000106e9
    6bc8:	00024674 	.word	0x00024674
    6bcc:	0001b62d 	.word	0x0001b62d

00006bd0 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
    6bd0:	b580      	push	{r7, lr}
    6bd2:	b086      	sub	sp, #24
    6bd4:	af00      	add	r7, sp, #0
    6bd6:	1c02      	adds	r2, r0, #0
    6bd8:	1dfb      	adds	r3, r7, #7
    6bda:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6bdc:	1dfb      	adds	r3, r7, #7
    6bde:	781b      	ldrb	r3, [r3, #0]
    6be0:	1c18      	adds	r0, r3, #0
    6be2:	4b19      	ldr	r3, [pc, #100]	; (6c48 <system_pinmux_pin_get_mux_position+0x78>)
    6be4:	4798      	blx	r3
    6be6:	1c03      	adds	r3, r0, #0
    6be8:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
    6bea:	1dfb      	adds	r3, r7, #7
    6bec:	781a      	ldrb	r2, [r3, #0]
    6bee:	231f      	movs	r3, #31
    6bf0:	4013      	ands	r3, r2
    6bf2:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    6bf4:	6979      	ldr	r1, [r7, #20]
    6bf6:	2340      	movs	r3, #64	; 0x40
    6bf8:	693a      	ldr	r2, [r7, #16]
    6bfa:	188a      	adds	r2, r1, r2
    6bfc:	18d3      	adds	r3, r2, r3
    6bfe:	781b      	ldrb	r3, [r3, #0]
    6c00:	b2db      	uxtb	r3, r3
    6c02:	1c1a      	adds	r2, r3, #0
    6c04:	2301      	movs	r3, #1
    6c06:	4013      	ands	r3, r2
    6c08:	d101      	bne.n	6c0e <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
    6c0a:	2380      	movs	r3, #128	; 0x80
    6c0c:	e017      	b.n	6c3e <system_pinmux_pin_get_mux_position+0x6e>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    6c0e:	693b      	ldr	r3, [r7, #16]
    6c10:	085a      	lsrs	r2, r3, #1
    6c12:	6979      	ldr	r1, [r7, #20]
    6c14:	2330      	movs	r3, #48	; 0x30
    6c16:	188a      	adds	r2, r1, r2
    6c18:	18d3      	adds	r3, r2, r3
    6c1a:	781b      	ldrb	r3, [r3, #0]
    6c1c:	b2db      	uxtb	r3, r3
    6c1e:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
    6c20:	693a      	ldr	r2, [r7, #16]
    6c22:	2301      	movs	r3, #1
    6c24:	4013      	ands	r3, r2
    6c26:	d005      	beq.n	6c34 <system_pinmux_pin_get_mux_position+0x64>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    6c28:	68fa      	ldr	r2, [r7, #12]
    6c2a:	23f0      	movs	r3, #240	; 0xf0
    6c2c:	4013      	ands	r3, r2
    6c2e:	091b      	lsrs	r3, r3, #4
    6c30:	b2db      	uxtb	r3, r3
    6c32:	e004      	b.n	6c3e <system_pinmux_pin_get_mux_position+0x6e>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    6c34:	68fb      	ldr	r3, [r7, #12]
    6c36:	b2da      	uxtb	r2, r3
    6c38:	230f      	movs	r3, #15
    6c3a:	4013      	ands	r3, r2
    6c3c:	b2db      	uxtb	r3, r3
	}
}
    6c3e:	1c18      	adds	r0, r3, #0
    6c40:	46bd      	mov	sp, r7
    6c42:	b006      	add	sp, #24
    6c44:	bd80      	pop	{r7, pc}
    6c46:	46c0      	nop			; (mov r8, r8)
    6c48:	00006b1d 	.word	0x00006b1d

00006c4c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    6c4c:	b580      	push	{r7, lr}
    6c4e:	b082      	sub	sp, #8
    6c50:	af00      	add	r7, sp, #0
    6c52:	1c02      	adds	r2, r0, #0
    6c54:	1dfb      	adds	r3, r7, #7
    6c56:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6c58:	1dfb      	adds	r3, r7, #7
    6c5a:	781b      	ldrb	r3, [r3, #0]
    6c5c:	1c18      	adds	r0, r3, #0
    6c5e:	4b03      	ldr	r3, [pc, #12]	; (6c6c <port_get_group_from_gpio_pin+0x20>)
    6c60:	4798      	blx	r3
    6c62:	1c03      	adds	r3, r0, #0
}
    6c64:	1c18      	adds	r0, r3, #0
    6c66:	46bd      	mov	sp, r7
    6c68:	b002      	add	sp, #8
    6c6a:	bd80      	pop	{r7, pc}
    6c6c:	00006b1d 	.word	0x00006b1d

00006c70 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    6c70:	b590      	push	{r4, r7, lr}
    6c72:	b085      	sub	sp, #20
    6c74:	af02      	add	r7, sp, #8
    6c76:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
    6c78:	4b15      	ldr	r3, [pc, #84]	; (6cd0 <port_get_config_defaults+0x60>)
    6c7a:	4798      	blx	r3
    6c7c:	1c03      	adds	r3, r0, #0
    6c7e:	2b00      	cmp	r3, #0
    6c80:	d011      	beq.n	6ca6 <port_get_config_defaults+0x36>
    6c82:	687b      	ldr	r3, [r7, #4]
    6c84:	2b00      	cmp	r3, #0
    6c86:	d119      	bne.n	6cbc <port_get_config_defaults+0x4c>
    6c88:	4b11      	ldr	r3, [pc, #68]	; (6cd0 <port_get_config_defaults+0x60>)
    6c8a:	4798      	blx	r3
    6c8c:	1c01      	adds	r1, r0, #0
    6c8e:	4a11      	ldr	r2, [pc, #68]	; (6cd4 <port_get_config_defaults+0x64>)
    6c90:	23ad      	movs	r3, #173	; 0xad
    6c92:	005b      	lsls	r3, r3, #1
    6c94:	4810      	ldr	r0, [pc, #64]	; (6cd8 <port_get_config_defaults+0x68>)
    6c96:	9000      	str	r0, [sp, #0]
    6c98:	4810      	ldr	r0, [pc, #64]	; (6cdc <port_get_config_defaults+0x6c>)
    6c9a:	9001      	str	r0, [sp, #4]
    6c9c:	1c08      	adds	r0, r1, #0
    6c9e:	2101      	movs	r1, #1
    6ca0:	4c0f      	ldr	r4, [pc, #60]	; (6ce0 <port_get_config_defaults+0x70>)
    6ca2:	47a0      	blx	r4
    6ca4:	e00a      	b.n	6cbc <port_get_config_defaults+0x4c>
    6ca6:	687b      	ldr	r3, [r7, #4]
    6ca8:	2b00      	cmp	r3, #0
    6caa:	d107      	bne.n	6cbc <port_get_config_defaults+0x4c>
    6cac:	480d      	ldr	r0, [pc, #52]	; (6ce4 <port_get_config_defaults+0x74>)
    6cae:	490b      	ldr	r1, [pc, #44]	; (6cdc <port_get_config_defaults+0x6c>)
    6cb0:	4a08      	ldr	r2, [pc, #32]	; (6cd4 <port_get_config_defaults+0x64>)
    6cb2:	23ad      	movs	r3, #173	; 0xad
    6cb4:	005b      	lsls	r3, r3, #1
    6cb6:	4c0c      	ldr	r4, [pc, #48]	; (6ce8 <port_get_config_defaults+0x78>)
    6cb8:	47a0      	blx	r4
    6cba:	e7fe      	b.n	6cba <port_get_config_defaults+0x4a>

	/* Default configuration values */
	config->direction = PORT_PIN_DIR_INPUT;
    6cbc:	687b      	ldr	r3, [r7, #4]
    6cbe:	2200      	movs	r2, #0
    6cc0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    6cc2:	687b      	ldr	r3, [r7, #4]
    6cc4:	2201      	movs	r2, #1
    6cc6:	705a      	strb	r2, [r3, #1]
}
    6cc8:	46bd      	mov	sp, r7
    6cca:	b003      	add	sp, #12
    6ccc:	bd90      	pop	{r4, r7, pc}
    6cce:	46c0      	nop			; (mov r8, r8)
    6cd0:	00006a89 	.word	0x00006a89
    6cd4:	000246a0 	.word	0x000246a0
    6cd8:	00024654 	.word	0x00024654
    6cdc:	0002466c 	.word	0x0002466c
    6ce0:	000106e9 	.word	0x000106e9
    6ce4:	00024674 	.word	0x00024674
    6ce8:	0001b62d 	.word	0x0001b62d

00006cec <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    6cec:	b580      	push	{r7, lr}
    6cee:	b084      	sub	sp, #16
    6cf0:	af00      	add	r7, sp, #0
    6cf2:	1c0a      	adds	r2, r1, #0
    6cf4:	1dfb      	adds	r3, r7, #7
    6cf6:	1c01      	adds	r1, r0, #0
    6cf8:	7019      	strb	r1, [r3, #0]
    6cfa:	1dbb      	adds	r3, r7, #6
    6cfc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    6cfe:	1dfb      	adds	r3, r7, #7
    6d00:	781b      	ldrb	r3, [r3, #0]
    6d02:	1c18      	adds	r0, r3, #0
    6d04:	4b0d      	ldr	r3, [pc, #52]	; (6d3c <port_pin_set_output_level+0x50>)
    6d06:	4798      	blx	r3
    6d08:	1c03      	adds	r3, r0, #0
    6d0a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6d0c:	1dfb      	adds	r3, r7, #7
    6d0e:	781a      	ldrb	r2, [r3, #0]
    6d10:	231f      	movs	r3, #31
    6d12:	4013      	ands	r3, r2
    6d14:	2201      	movs	r2, #1
    6d16:	1c11      	adds	r1, r2, #0
    6d18:	4099      	lsls	r1, r3
    6d1a:	1c0b      	adds	r3, r1, #0
    6d1c:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    6d1e:	1dbb      	adds	r3, r7, #6
    6d20:	781b      	ldrb	r3, [r3, #0]
    6d22:	2b00      	cmp	r3, #0
    6d24:	d003      	beq.n	6d2e <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    6d26:	68fb      	ldr	r3, [r7, #12]
    6d28:	68ba      	ldr	r2, [r7, #8]
    6d2a:	619a      	str	r2, [r3, #24]
    6d2c:	e002      	b.n	6d34 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    6d2e:	68fb      	ldr	r3, [r7, #12]
    6d30:	68ba      	ldr	r2, [r7, #8]
    6d32:	615a      	str	r2, [r3, #20]
	}
}
    6d34:	46bd      	mov	sp, r7
    6d36:	b004      	add	sp, #16
    6d38:	bd80      	pop	{r7, pc}
    6d3a:	46c0      	nop			; (mov r8, r8)
    6d3c:	00006c4d 	.word	0x00006c4d

00006d40 <tc_is_syncing>:
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    6d40:	b590      	push	{r4, r7, lr}
    6d42:	b087      	sub	sp, #28
    6d44:	af02      	add	r7, sp, #8
    6d46:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
    6d48:	4b29      	ldr	r3, [pc, #164]	; (6df0 <tc_is_syncing+0xb0>)
    6d4a:	4798      	blx	r3
    6d4c:	1c03      	adds	r3, r0, #0
    6d4e:	2b00      	cmp	r3, #0
    6d50:	d010      	beq.n	6d74 <tc_is_syncing+0x34>
    6d52:	687b      	ldr	r3, [r7, #4]
    6d54:	2b00      	cmp	r3, #0
    6d56:	d117      	bne.n	6d88 <tc_is_syncing+0x48>
    6d58:	4b25      	ldr	r3, [pc, #148]	; (6df0 <tc_is_syncing+0xb0>)
    6d5a:	4798      	blx	r3
    6d5c:	1c01      	adds	r1, r0, #0
    6d5e:	4a25      	ldr	r2, [pc, #148]	; (6df4 <tc_is_syncing+0xb4>)
    6d60:	4b25      	ldr	r3, [pc, #148]	; (6df8 <tc_is_syncing+0xb8>)
    6d62:	4826      	ldr	r0, [pc, #152]	; (6dfc <tc_is_syncing+0xbc>)
    6d64:	9000      	str	r0, [sp, #0]
    6d66:	4826      	ldr	r0, [pc, #152]	; (6e00 <tc_is_syncing+0xc0>)
    6d68:	9001      	str	r0, [sp, #4]
    6d6a:	1c08      	adds	r0, r1, #0
    6d6c:	2101      	movs	r1, #1
    6d6e:	4c25      	ldr	r4, [pc, #148]	; (6e04 <tc_is_syncing+0xc4>)
    6d70:	47a0      	blx	r4
    6d72:	e009      	b.n	6d88 <tc_is_syncing+0x48>
    6d74:	687b      	ldr	r3, [r7, #4]
    6d76:	2b00      	cmp	r3, #0
    6d78:	d106      	bne.n	6d88 <tc_is_syncing+0x48>
    6d7a:	4823      	ldr	r0, [pc, #140]	; (6e08 <tc_is_syncing+0xc8>)
    6d7c:	4920      	ldr	r1, [pc, #128]	; (6e00 <tc_is_syncing+0xc0>)
    6d7e:	4a1d      	ldr	r2, [pc, #116]	; (6df4 <tc_is_syncing+0xb4>)
    6d80:	4b1d      	ldr	r3, [pc, #116]	; (6df8 <tc_is_syncing+0xb8>)
    6d82:	4c22      	ldr	r4, [pc, #136]	; (6e0c <tc_is_syncing+0xcc>)
    6d84:	47a0      	blx	r4
    6d86:	e7fe      	b.n	6d86 <tc_is_syncing+0x46>
	Assert(module_inst->hw);
    6d88:	4b19      	ldr	r3, [pc, #100]	; (6df0 <tc_is_syncing+0xb0>)
    6d8a:	4798      	blx	r3
    6d8c:	1c03      	adds	r3, r0, #0
    6d8e:	2b00      	cmp	r3, #0
    6d90:	d011      	beq.n	6db6 <tc_is_syncing+0x76>
    6d92:	687b      	ldr	r3, [r7, #4]
    6d94:	681b      	ldr	r3, [r3, #0]
    6d96:	2b00      	cmp	r3, #0
    6d98:	d118      	bne.n	6dcc <tc_is_syncing+0x8c>
    6d9a:	4b15      	ldr	r3, [pc, #84]	; (6df0 <tc_is_syncing+0xb0>)
    6d9c:	4798      	blx	r3
    6d9e:	1c01      	adds	r1, r0, #0
    6da0:	4a14      	ldr	r2, [pc, #80]	; (6df4 <tc_is_syncing+0xb4>)
    6da2:	4b1b      	ldr	r3, [pc, #108]	; (6e10 <tc_is_syncing+0xd0>)
    6da4:	4815      	ldr	r0, [pc, #84]	; (6dfc <tc_is_syncing+0xbc>)
    6da6:	9000      	str	r0, [sp, #0]
    6da8:	481a      	ldr	r0, [pc, #104]	; (6e14 <tc_is_syncing+0xd4>)
    6daa:	9001      	str	r0, [sp, #4]
    6dac:	1c08      	adds	r0, r1, #0
    6dae:	2101      	movs	r1, #1
    6db0:	4c14      	ldr	r4, [pc, #80]	; (6e04 <tc_is_syncing+0xc4>)
    6db2:	47a0      	blx	r4
    6db4:	e00a      	b.n	6dcc <tc_is_syncing+0x8c>
    6db6:	687b      	ldr	r3, [r7, #4]
    6db8:	681b      	ldr	r3, [r3, #0]
    6dba:	2b00      	cmp	r3, #0
    6dbc:	d106      	bne.n	6dcc <tc_is_syncing+0x8c>
    6dbe:	4812      	ldr	r0, [pc, #72]	; (6e08 <tc_is_syncing+0xc8>)
    6dc0:	4914      	ldr	r1, [pc, #80]	; (6e14 <tc_is_syncing+0xd4>)
    6dc2:	4a0c      	ldr	r2, [pc, #48]	; (6df4 <tc_is_syncing+0xb4>)
    6dc4:	4b12      	ldr	r3, [pc, #72]	; (6e10 <tc_is_syncing+0xd0>)
    6dc6:	4c11      	ldr	r4, [pc, #68]	; (6e0c <tc_is_syncing+0xcc>)
    6dc8:	47a0      	blx	r4
    6dca:	e7fe      	b.n	6dca <tc_is_syncing+0x8a>

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6dcc:	687b      	ldr	r3, [r7, #4]
    6dce:	681b      	ldr	r3, [r3, #0]
    6dd0:	60fb      	str	r3, [r7, #12]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    6dd2:	68fb      	ldr	r3, [r7, #12]
    6dd4:	89db      	ldrh	r3, [r3, #14]
    6dd6:	041b      	lsls	r3, r3, #16
    6dd8:	0e1b      	lsrs	r3, r3, #24
    6dda:	b2db      	uxtb	r3, r3
    6ddc:	1c1a      	adds	r2, r3, #0
    6dde:	2380      	movs	r3, #128	; 0x80
    6de0:	4013      	ands	r3, r2
    6de2:	1e5a      	subs	r2, r3, #1
    6de4:	4193      	sbcs	r3, r2
    6de6:	b2db      	uxtb	r3, r3
}
    6de8:	1c18      	adds	r0, r3, #0
    6dea:	46bd      	mov	sp, r7
    6dec:	b005      	add	sp, #20
    6dee:	bd90      	pop	{r4, r7, pc}
    6df0:	00006a89 	.word	0x00006a89
    6df4:	00024738 	.word	0x00024738
    6df8:	0000033e 	.word	0x0000033e
    6dfc:	00024654 	.word	0x00024654
    6e00:	00024758 	.word	0x00024758
    6e04:	000106e9 	.word	0x000106e9
    6e08:	00024674 	.word	0x00024674
    6e0c:	0001b62d 	.word	0x0001b62d
    6e10:	0000033f 	.word	0x0000033f
    6e14:	00024764 	.word	0x00024764

00006e18 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    6e18:	b590      	push	{r4, r7, lr}
    6e1a:	b087      	sub	sp, #28
    6e1c:	af02      	add	r7, sp, #8
    6e1e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
    6e20:	4b2b      	ldr	r3, [pc, #172]	; (6ed0 <tc_enable+0xb8>)
    6e22:	4798      	blx	r3
    6e24:	1c03      	adds	r3, r0, #0
    6e26:	2b00      	cmp	r3, #0
    6e28:	d010      	beq.n	6e4c <tc_enable+0x34>
    6e2a:	687b      	ldr	r3, [r7, #4]
    6e2c:	2b00      	cmp	r3, #0
    6e2e:	d117      	bne.n	6e60 <tc_enable+0x48>
    6e30:	4b27      	ldr	r3, [pc, #156]	; (6ed0 <tc_enable+0xb8>)
    6e32:	4798      	blx	r3
    6e34:	1c01      	adds	r1, r0, #0
    6e36:	4a27      	ldr	r2, [pc, #156]	; (6ed4 <tc_enable+0xbc>)
    6e38:	4b27      	ldr	r3, [pc, #156]	; (6ed8 <tc_enable+0xc0>)
    6e3a:	4828      	ldr	r0, [pc, #160]	; (6edc <tc_enable+0xc4>)
    6e3c:	9000      	str	r0, [sp, #0]
    6e3e:	4828      	ldr	r0, [pc, #160]	; (6ee0 <tc_enable+0xc8>)
    6e40:	9001      	str	r0, [sp, #4]
    6e42:	1c08      	adds	r0, r1, #0
    6e44:	2101      	movs	r1, #1
    6e46:	4c27      	ldr	r4, [pc, #156]	; (6ee4 <tc_enable+0xcc>)
    6e48:	47a0      	blx	r4
    6e4a:	e009      	b.n	6e60 <tc_enable+0x48>
    6e4c:	687b      	ldr	r3, [r7, #4]
    6e4e:	2b00      	cmp	r3, #0
    6e50:	d106      	bne.n	6e60 <tc_enable+0x48>
    6e52:	4825      	ldr	r0, [pc, #148]	; (6ee8 <tc_enable+0xd0>)
    6e54:	4922      	ldr	r1, [pc, #136]	; (6ee0 <tc_enable+0xc8>)
    6e56:	4a1f      	ldr	r2, [pc, #124]	; (6ed4 <tc_enable+0xbc>)
    6e58:	4b1f      	ldr	r3, [pc, #124]	; (6ed8 <tc_enable+0xc0>)
    6e5a:	4c24      	ldr	r4, [pc, #144]	; (6eec <tc_enable+0xd4>)
    6e5c:	47a0      	blx	r4
    6e5e:	e7fe      	b.n	6e5e <tc_enable+0x46>
	Assert(module_inst->hw);
    6e60:	4b1b      	ldr	r3, [pc, #108]	; (6ed0 <tc_enable+0xb8>)
    6e62:	4798      	blx	r3
    6e64:	1c03      	adds	r3, r0, #0
    6e66:	2b00      	cmp	r3, #0
    6e68:	d011      	beq.n	6e8e <tc_enable+0x76>
    6e6a:	687b      	ldr	r3, [r7, #4]
    6e6c:	681b      	ldr	r3, [r3, #0]
    6e6e:	2b00      	cmp	r3, #0
    6e70:	d118      	bne.n	6ea4 <tc_enable+0x8c>
    6e72:	4b17      	ldr	r3, [pc, #92]	; (6ed0 <tc_enable+0xb8>)
    6e74:	4798      	blx	r3
    6e76:	1c01      	adds	r1, r0, #0
    6e78:	4a16      	ldr	r2, [pc, #88]	; (6ed4 <tc_enable+0xbc>)
    6e7a:	4b1d      	ldr	r3, [pc, #116]	; (6ef0 <tc_enable+0xd8>)
    6e7c:	4817      	ldr	r0, [pc, #92]	; (6edc <tc_enable+0xc4>)
    6e7e:	9000      	str	r0, [sp, #0]
    6e80:	481c      	ldr	r0, [pc, #112]	; (6ef4 <tc_enable+0xdc>)
    6e82:	9001      	str	r0, [sp, #4]
    6e84:	1c08      	adds	r0, r1, #0
    6e86:	2101      	movs	r1, #1
    6e88:	4c16      	ldr	r4, [pc, #88]	; (6ee4 <tc_enable+0xcc>)
    6e8a:	47a0      	blx	r4
    6e8c:	e00a      	b.n	6ea4 <tc_enable+0x8c>
    6e8e:	687b      	ldr	r3, [r7, #4]
    6e90:	681b      	ldr	r3, [r3, #0]
    6e92:	2b00      	cmp	r3, #0
    6e94:	d106      	bne.n	6ea4 <tc_enable+0x8c>
    6e96:	4814      	ldr	r0, [pc, #80]	; (6ee8 <tc_enable+0xd0>)
    6e98:	4916      	ldr	r1, [pc, #88]	; (6ef4 <tc_enable+0xdc>)
    6e9a:	4a0e      	ldr	r2, [pc, #56]	; (6ed4 <tc_enable+0xbc>)
    6e9c:	4b14      	ldr	r3, [pc, #80]	; (6ef0 <tc_enable+0xd8>)
    6e9e:	4c13      	ldr	r4, [pc, #76]	; (6eec <tc_enable+0xd4>)
    6ea0:	47a0      	blx	r4
    6ea2:	e7fe      	b.n	6ea2 <tc_enable+0x8a>

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6ea4:	687b      	ldr	r3, [r7, #4]
    6ea6:	681b      	ldr	r3, [r3, #0]
    6ea8:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    6eaa:	46c0      	nop			; (mov r8, r8)
    6eac:	687b      	ldr	r3, [r7, #4]
    6eae:	1c18      	adds	r0, r3, #0
    6eb0:	4b11      	ldr	r3, [pc, #68]	; (6ef8 <tc_enable+0xe0>)
    6eb2:	4798      	blx	r3
    6eb4:	1c03      	adds	r3, r0, #0
    6eb6:	2b00      	cmp	r3, #0
    6eb8:	d1f8      	bne.n	6eac <tc_enable+0x94>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    6eba:	68fb      	ldr	r3, [r7, #12]
    6ebc:	881b      	ldrh	r3, [r3, #0]
    6ebe:	b29b      	uxth	r3, r3
    6ec0:	2202      	movs	r2, #2
    6ec2:	4313      	orrs	r3, r2
    6ec4:	b29a      	uxth	r2, r3
    6ec6:	68fb      	ldr	r3, [r7, #12]
    6ec8:	801a      	strh	r2, [r3, #0]
}
    6eca:	46bd      	mov	sp, r7
    6ecc:	b005      	add	sp, #20
    6ece:	bd90      	pop	{r4, r7, pc}
    6ed0:	00006a89 	.word	0x00006a89
    6ed4:	00024738 	.word	0x00024738
    6ed8:	0000040e 	.word	0x0000040e
    6edc:	00024654 	.word	0x00024654
    6ee0:	00024758 	.word	0x00024758
    6ee4:	000106e9 	.word	0x000106e9
    6ee8:	00024674 	.word	0x00024674
    6eec:	0001b62d 	.word	0x0001b62d
    6ef0:	0000040f 	.word	0x0000040f
    6ef4:	00024764 	.word	0x00024764
    6ef8:	00006d41 	.word	0x00006d41
    6efc:	00000000 	.word	0x00000000

00006f00 <lookupDoorHeaterDutyVal>:

/************************************************************************/
/* User Functions                                                       */
/************************************************************************/
uint8_t lookupDoorHeaterDutyVal(float setpoint)
{
    6f00:	b5b0      	push	{r4, r5, r7, lr}
    6f02:	b084      	sub	sp, #16
    6f04:	af00      	add	r7, sp, #0
    6f06:	6078      	str	r0, [r7, #4]
	uint16_t dutyVal = 0;
    6f08:	1c3b      	adds	r3, r7, #0
    6f0a:	330e      	adds	r3, #14
    6f0c:	2200      	movs	r2, #0
    6f0e:	801a      	strh	r2, [r3, #0]
	uint8_t idx = 0;
    6f10:	1c3b      	adds	r3, r7, #0
    6f12:	330d      	adds	r3, #13
    6f14:	2200      	movs	r2, #0
    6f16:	701a      	strb	r2, [r3, #0]
	float sp = 0;
    6f18:	2300      	movs	r3, #0
    6f1a:	60bb      	str	r3, [r7, #8]
	
	if (setpoint >= HTR_UPPER_TCHA_LIMIT)
    6f1c:	4b38      	ldr	r3, [pc, #224]	; (7000 <lookupDoorHeaterDutyVal+0x100>)
    6f1e:	6878      	ldr	r0, [r7, #4]
    6f20:	2182      	movs	r1, #130	; 0x82
    6f22:	05c9      	lsls	r1, r1, #23
    6f24:	4798      	blx	r3
    6f26:	1c03      	adds	r3, r0, #0
    6f28:	2b00      	cmp	r3, #0
    6f2a:	d002      	beq.n	6f32 <lookupDoorHeaterDutyVal+0x32>
	{
		setpoint = HTR_UPPER_TCHA_LIMIT;
    6f2c:	2382      	movs	r3, #130	; 0x82
    6f2e:	05db      	lsls	r3, r3, #23
    6f30:	607b      	str	r3, [r7, #4]
	}
	sp = round(setpoint * 10) / 10;
    6f32:	4b34      	ldr	r3, [pc, #208]	; (7004 <lookupDoorHeaterDutyVal+0x104>)
    6f34:	6878      	ldr	r0, [r7, #4]
    6f36:	4934      	ldr	r1, [pc, #208]	; (7008 <lookupDoorHeaterDutyVal+0x108>)
    6f38:	4798      	blx	r3
    6f3a:	1c03      	adds	r3, r0, #0
    6f3c:	1c1a      	adds	r2, r3, #0
    6f3e:	4b33      	ldr	r3, [pc, #204]	; (700c <lookupDoorHeaterDutyVal+0x10c>)
    6f40:	1c10      	adds	r0, r2, #0
    6f42:	4798      	blx	r3
    6f44:	1c03      	adds	r3, r0, #0
    6f46:	1c0c      	adds	r4, r1, #0
    6f48:	1c18      	adds	r0, r3, #0
    6f4a:	1c21      	adds	r1, r4, #0
    6f4c:	4b30      	ldr	r3, [pc, #192]	; (7010 <lookupDoorHeaterDutyVal+0x110>)
    6f4e:	4798      	blx	r3
    6f50:	1c03      	adds	r3, r0, #0
    6f52:	1c0c      	adds	r4, r1, #0
    6f54:	4d2f      	ldr	r5, [pc, #188]	; (7014 <lookupDoorHeaterDutyVal+0x114>)
    6f56:	1c18      	adds	r0, r3, #0
    6f58:	1c21      	adds	r1, r4, #0
    6f5a:	4b28      	ldr	r3, [pc, #160]	; (6ffc <lookupDoorHeaterDutyVal+0xfc>)
    6f5c:	4a26      	ldr	r2, [pc, #152]	; (6ff8 <lookupDoorHeaterDutyVal+0xf8>)
    6f5e:	47a8      	blx	r5
    6f60:	1c03      	adds	r3, r0, #0
    6f62:	1c0c      	adds	r4, r1, #0
    6f64:	4a2c      	ldr	r2, [pc, #176]	; (7018 <lookupDoorHeaterDutyVal+0x118>)
    6f66:	1c18      	adds	r0, r3, #0
    6f68:	1c21      	adds	r1, r4, #0
    6f6a:	4790      	blx	r2
    6f6c:	1c03      	adds	r3, r0, #0
    6f6e:	60bb      	str	r3, [r7, #8]
	idx = (uint8_t) ( (2*sp) - (2*HTR_LOWER_TCHA_LIMIT) );
    6f70:	68bb      	ldr	r3, [r7, #8]
    6f72:	4a2a      	ldr	r2, [pc, #168]	; (701c <lookupDoorHeaterDutyVal+0x11c>)
    6f74:	1c18      	adds	r0, r3, #0
    6f76:	1c19      	adds	r1, r3, #0
    6f78:	4790      	blx	r2
    6f7a:	1c03      	adds	r3, r0, #0
    6f7c:	1c1a      	adds	r2, r3, #0
    6f7e:	4b28      	ldr	r3, [pc, #160]	; (7020 <lookupDoorHeaterDutyVal+0x120>)
    6f80:	1c10      	adds	r0, r2, #0
    6f82:	2181      	movs	r1, #129	; 0x81
    6f84:	05c9      	lsls	r1, r1, #23
    6f86:	4798      	blx	r3
    6f88:	1c03      	adds	r3, r0, #0
    6f8a:	1c1a      	adds	r2, r3, #0
    6f8c:	1c3c      	adds	r4, r7, #0
    6f8e:	340d      	adds	r4, #13
    6f90:	4b24      	ldr	r3, [pc, #144]	; (7024 <lookupDoorHeaterDutyVal+0x124>)
    6f92:	1c10      	adds	r0, r2, #0
    6f94:	4798      	blx	r3
    6f96:	1c03      	adds	r3, r0, #0
    6f98:	7023      	strb	r3, [r4, #0]
	if (idx < 0)
	{
		idx = 0;
	}
	else if (idx > DOOR_HEATER_DUTY_LOOKUP_TABLE_SIZE)
    6f9a:	1c3b      	adds	r3, r7, #0
    6f9c:	330d      	adds	r3, #13
    6f9e:	781b      	ldrb	r3, [r3, #0]
    6fa0:	2b0d      	cmp	r3, #13
    6fa2:	d903      	bls.n	6fac <lookupDoorHeaterDutyVal+0xac>
	{
		idx = DOOR_HEATER_DUTY_LOOKUP_TABLE_SIZE-1;
    6fa4:	1c3b      	adds	r3, r7, #0
    6fa6:	330d      	adds	r3, #13
    6fa8:	220c      	movs	r2, #12
    6faa:	701a      	strb	r2, [r3, #0]
	}
	dutyVal = door_heater_duty_lookup_table[idx];
    6fac:	1c3b      	adds	r3, r7, #0
    6fae:	330d      	adds	r3, #13
    6fb0:	781b      	ldrb	r3, [r3, #0]
    6fb2:	4a1d      	ldr	r2, [pc, #116]	; (7028 <lookupDoorHeaterDutyVal+0x128>)
    6fb4:	5cd2      	ldrb	r2, [r2, r3]
    6fb6:	1c3b      	adds	r3, r7, #0
    6fb8:	330e      	adds	r3, #14
    6fba:	801a      	strh	r2, [r3, #0]
	if (dutyVal >= 100)
    6fbc:	1c3b      	adds	r3, r7, #0
    6fbe:	330e      	adds	r3, #14
    6fc0:	881b      	ldrh	r3, [r3, #0]
    6fc2:	2b63      	cmp	r3, #99	; 0x63
    6fc4:	d904      	bls.n	6fd0 <lookupDoorHeaterDutyVal+0xd0>
	{
		dutyVal = 100;
    6fc6:	1c3b      	adds	r3, r7, #0
    6fc8:	330e      	adds	r3, #14
    6fca:	2264      	movs	r2, #100	; 0x64
    6fcc:	801a      	strh	r2, [r3, #0]
    6fce:	e008      	b.n	6fe2 <lookupDoorHeaterDutyVal+0xe2>
	}
	else if (dutyVal <= 0)
    6fd0:	1c3b      	adds	r3, r7, #0
    6fd2:	330e      	adds	r3, #14
    6fd4:	881b      	ldrh	r3, [r3, #0]
    6fd6:	2b00      	cmp	r3, #0
    6fd8:	d103      	bne.n	6fe2 <lookupDoorHeaterDutyVal+0xe2>
	{
		dutyVal = 0;
    6fda:	1c3b      	adds	r3, r7, #0
    6fdc:	330e      	adds	r3, #14
    6fde:	2200      	movs	r2, #0
    6fe0:	801a      	strh	r2, [r3, #0]
	}
	return dutyVal;
    6fe2:	1c3b      	adds	r3, r7, #0
    6fe4:	330e      	adds	r3, #14
    6fe6:	881b      	ldrh	r3, [r3, #0]
    6fe8:	b2db      	uxtb	r3, r3
}
    6fea:	1c18      	adds	r0, r3, #0
    6fec:	46bd      	mov	sp, r7
    6fee:	b004      	add	sp, #16
    6ff0:	bdb0      	pop	{r4, r5, r7, pc}
    6ff2:	46c0      	nop			; (mov r8, r8)
    6ff4:	46c0      	nop			; (mov r8, r8)
    6ff6:	46c0      	nop			; (mov r8, r8)
    6ff8:	00000000 	.word	0x00000000
    6ffc:	40240000 	.word	0x40240000
    7000:	0001f669 	.word	0x0001f669
    7004:	0001fe31 	.word	0x0001fe31
    7008:	41200000 	.word	0x41200000
    700c:	00022111 	.word	0x00022111
    7010:	00019ac9 	.word	0x00019ac9
    7014:	00020b55 	.word	0x00020b55
    7018:	000221b5 	.word	0x000221b5
    701c:	0001f79d 	.word	0x0001f79d
    7020:	00020089 	.word	0x00020089
    7024:	0001f6bd 	.word	0x0001f6bd
    7028:	000233c0 	.word	0x000233c0
    702c:	46c0      	nop			; (mov r8, r8)
    702e:	46c0      	nop			; (mov r8, r8)

00007030 <condHeaterStateMachine>:

uint8_t condHeaterStateMachine()
{
    7030:	b580      	push	{r7, lr}
    7032:	b082      	sub	sp, #8
    7034:	af00      	add	r7, sp, #0
	uint8_t htrDuty = 0;
    7036:	1dfb      	adds	r3, r7, #7
    7038:	2200      	movs	r2, #0
    703a:	701a      	strb	r2, [r3, #0]
	
	#ifdef HIGH_PERFORMANCE

	// OFF ////////////////////////////////
	if (condHeater.sm_state==STATE_CONDHTR_OFF)
    703c:	4b7e      	ldr	r3, [pc, #504]	; (7238 <condHeaterStateMachine+0x208>)
    703e:	7a1b      	ldrb	r3, [r3, #8]
    7040:	2b00      	cmp	r3, #0
    7042:	d127      	bne.n	7094 <condHeaterStateMachine+0x64>
	{
		if (condensateTemp<TSNS_INSANE_LOW_LIMIT)
    7044:	4b7d      	ldr	r3, [pc, #500]	; (723c <condHeaterStateMachine+0x20c>)
    7046:	681a      	ldr	r2, [r3, #0]
    7048:	4b7d      	ldr	r3, [pc, #500]	; (7240 <condHeaterStateMachine+0x210>)
    704a:	1c10      	adds	r0, r2, #0
    704c:	497d      	ldr	r1, [pc, #500]	; (7244 <condHeaterStateMachine+0x214>)
    704e:	4798      	blx	r3
    7050:	1c03      	adds	r3, r0, #0
    7052:	2b00      	cmp	r3, #0
    7054:	d003      	beq.n	705e <condHeaterStateMachine+0x2e>
		{
			condHeater.sm_state = STATE_CONDHTR_S1;
    7056:	4b78      	ldr	r3, [pc, #480]	; (7238 <condHeaterStateMachine+0x208>)
    7058:	2201      	movs	r2, #1
    705a:	721a      	strb	r2, [r3, #8]
    705c:	e013      	b.n	7086 <condHeaterStateMachine+0x56>
		}
		else if (condensateTemp>TSNS_INSANE_LOW_LIMIT)
    705e:	4b77      	ldr	r3, [pc, #476]	; (723c <condHeaterStateMachine+0x20c>)
    7060:	681a      	ldr	r2, [r3, #0]
    7062:	4b79      	ldr	r3, [pc, #484]	; (7248 <condHeaterStateMachine+0x218>)
    7064:	1c10      	adds	r0, r2, #0
    7066:	4977      	ldr	r1, [pc, #476]	; (7244 <condHeaterStateMachine+0x214>)
    7068:	4798      	blx	r3
    706a:	1c03      	adds	r3, r0, #0
    706c:	2b00      	cmp	r3, #0
    706e:	d00a      	beq.n	7086 <condHeaterStateMachine+0x56>
		{
			if (highUsageModeFlag==true)
    7070:	4b76      	ldr	r3, [pc, #472]	; (724c <condHeaterStateMachine+0x21c>)
    7072:	781b      	ldrb	r3, [r3, #0]
    7074:	2b00      	cmp	r3, #0
    7076:	d003      	beq.n	7080 <condHeaterStateMachine+0x50>
			{
				condHeater.sm_state = STATE_CONDHTR_S4;
    7078:	4b6f      	ldr	r3, [pc, #444]	; (7238 <condHeaterStateMachine+0x208>)
    707a:	2204      	movs	r2, #4
    707c:	721a      	strb	r2, [r3, #8]
    707e:	e002      	b.n	7086 <condHeaterStateMachine+0x56>
			}
			else
			{
				condHeater.sm_state = STATE_CONDHTR_S2;
    7080:	4b6d      	ldr	r3, [pc, #436]	; (7238 <condHeaterStateMachine+0x208>)
    7082:	2202      	movs	r2, #2
    7084:	721a      	strb	r2, [r3, #8]
			}
		}
		
		htrDuty = COND_HTR_OFF_DUTY;
    7086:	1dfb      	adds	r3, r7, #7
    7088:	2200      	movs	r2, #0
    708a:	701a      	strb	r2, [r3, #0]
		condHeater.prev_sm_state =  STATE_CONDHTR_OFF;
    708c:	4b6a      	ldr	r3, [pc, #424]	; (7238 <condHeaterStateMachine+0x208>)
    708e:	2200      	movs	r2, #0
    7090:	725a      	strb	r2, [r3, #9]
    7092:	e0cb      	b.n	722c <condHeaterStateMachine+0x1fc>
	}
	
	// S1 /////////////////////////////////
	else if (condHeater.sm_state==STATE_CONDHTR_S1)
    7094:	4b68      	ldr	r3, [pc, #416]	; (7238 <condHeaterStateMachine+0x208>)
    7096:	7a1b      	ldrb	r3, [r3, #8]
    7098:	2b01      	cmp	r3, #1
    709a:	d112      	bne.n	70c2 <condHeaterStateMachine+0x92>
	{
		if (condensateTemp>TSNS_INSANE_LOW_LIMIT)
    709c:	4b67      	ldr	r3, [pc, #412]	; (723c <condHeaterStateMachine+0x20c>)
    709e:	681a      	ldr	r2, [r3, #0]
    70a0:	4b69      	ldr	r3, [pc, #420]	; (7248 <condHeaterStateMachine+0x218>)
    70a2:	1c10      	adds	r0, r2, #0
    70a4:	4967      	ldr	r1, [pc, #412]	; (7244 <condHeaterStateMachine+0x214>)
    70a6:	4798      	blx	r3
    70a8:	1c03      	adds	r3, r0, #0
    70aa:	2b00      	cmp	r3, #0
    70ac:	d002      	beq.n	70b4 <condHeaterStateMachine+0x84>
		{
			condHeater.sm_state = STATE_CONDHTR_S2;
    70ae:	4b62      	ldr	r3, [pc, #392]	; (7238 <condHeaterStateMachine+0x208>)
    70b0:	2202      	movs	r2, #2
    70b2:	721a      	strb	r2, [r3, #8]
		}
		
		htrDuty = COND_HTR_S1_DUTY;
    70b4:	1dfb      	adds	r3, r7, #7
    70b6:	223a      	movs	r2, #58	; 0x3a
    70b8:	701a      	strb	r2, [r3, #0]
		condHeater.prev_sm_state =  STATE_CONDHTR_S1;
    70ba:	4b5f      	ldr	r3, [pc, #380]	; (7238 <condHeaterStateMachine+0x208>)
    70bc:	2201      	movs	r2, #1
    70be:	725a      	strb	r2, [r3, #9]
    70c0:	e0b4      	b.n	722c <condHeaterStateMachine+0x1fc>
	}
	
	// S2 /////////////////////////////////
	else if (condHeater.sm_state==STATE_CONDHTR_S2)
    70c2:	4b5d      	ldr	r3, [pc, #372]	; (7238 <condHeaterStateMachine+0x208>)
    70c4:	7a1b      	ldrb	r3, [r3, #8]
    70c6:	2b02      	cmp	r3, #2
    70c8:	d14c      	bne.n	7164 <condHeaterStateMachine+0x134>
	{
		if (condensateTemp<TSNS_INSANE_LOW_LIMIT)
    70ca:	4b5c      	ldr	r3, [pc, #368]	; (723c <condHeaterStateMachine+0x20c>)
    70cc:	681a      	ldr	r2, [r3, #0]
    70ce:	4b5c      	ldr	r3, [pc, #368]	; (7240 <condHeaterStateMachine+0x210>)
    70d0:	1c10      	adds	r0, r2, #0
    70d2:	495c      	ldr	r1, [pc, #368]	; (7244 <condHeaterStateMachine+0x214>)
    70d4:	4798      	blx	r3
    70d6:	1c03      	adds	r3, r0, #0
    70d8:	2b00      	cmp	r3, #0
    70da:	d003      	beq.n	70e4 <condHeaterStateMachine+0xb4>
		{
			condHeater.sm_state = STATE_CONDHTR_S1;
    70dc:	4b56      	ldr	r3, [pc, #344]	; (7238 <condHeaterStateMachine+0x208>)
    70de:	2201      	movs	r2, #1
    70e0:	721a      	strb	r2, [r3, #8]
    70e2:	e038      	b.n	7156 <condHeaterStateMachine+0x126>
		}
		else if ( condensateTemp >= (min(COND_HTR_OFF_TEMP_LIMIT, chamber1.rejectTemp+5)) )
    70e4:	4b5a      	ldr	r3, [pc, #360]	; (7250 <condHeaterStateMachine+0x220>)
    70e6:	68da      	ldr	r2, [r3, #12]
    70e8:	4b5a      	ldr	r3, [pc, #360]	; (7254 <condHeaterStateMachine+0x224>)
    70ea:	1c10      	adds	r0, r2, #0
    70ec:	495a      	ldr	r1, [pc, #360]	; (7258 <condHeaterStateMachine+0x228>)
    70ee:	4798      	blx	r3
    70f0:	1c03      	adds	r3, r0, #0
    70f2:	1c1a      	adds	r2, r3, #0
    70f4:	4b54      	ldr	r3, [pc, #336]	; (7248 <condHeaterStateMachine+0x218>)
    70f6:	1c10      	adds	r0, r2, #0
    70f8:	4958      	ldr	r1, [pc, #352]	; (725c <condHeaterStateMachine+0x22c>)
    70fa:	4798      	blx	r3
    70fc:	1c03      	adds	r3, r0, #0
    70fe:	2b00      	cmp	r3, #0
    7100:	d001      	beq.n	7106 <condHeaterStateMachine+0xd6>
    7102:	4b56      	ldr	r3, [pc, #344]	; (725c <condHeaterStateMachine+0x22c>)
    7104:	e006      	b.n	7114 <condHeaterStateMachine+0xe4>
    7106:	4b52      	ldr	r3, [pc, #328]	; (7250 <condHeaterStateMachine+0x220>)
    7108:	68da      	ldr	r2, [r3, #12]
    710a:	4b52      	ldr	r3, [pc, #328]	; (7254 <condHeaterStateMachine+0x224>)
    710c:	1c10      	adds	r0, r2, #0
    710e:	4952      	ldr	r1, [pc, #328]	; (7258 <condHeaterStateMachine+0x228>)
    7110:	4798      	blx	r3
    7112:	1c03      	adds	r3, r0, #0
    7114:	4a49      	ldr	r2, [pc, #292]	; (723c <condHeaterStateMachine+0x20c>)
    7116:	6811      	ldr	r1, [r2, #0]
    7118:	4a51      	ldr	r2, [pc, #324]	; (7260 <condHeaterStateMachine+0x230>)
    711a:	1c18      	adds	r0, r3, #0
    711c:	4790      	blx	r2
    711e:	1c03      	adds	r3, r0, #0
    7120:	2b00      	cmp	r3, #0
    7122:	d008      	beq.n	7136 <condHeaterStateMachine+0x106>
		{
			condHeater.sm_state = STATE_CONDHTR_S3;
    7124:	4b44      	ldr	r3, [pc, #272]	; (7238 <condHeaterStateMachine+0x208>)
    7126:	2203      	movs	r2, #3
    7128:	721a      	strb	r2, [r3, #8]
			condHeaterStartTime = presentTimeInSec();
    712a:	4b4e      	ldr	r3, [pc, #312]	; (7264 <condHeaterStateMachine+0x234>)
    712c:	4798      	blx	r3
    712e:	1c02      	adds	r2, r0, #0
    7130:	4b4d      	ldr	r3, [pc, #308]	; (7268 <condHeaterStateMachine+0x238>)
    7132:	601a      	str	r2, [r3, #0]
    7134:	e00f      	b.n	7156 <condHeaterStateMachine+0x126>
		}
		else if ( (condensateTemp>TSNS_INSANE_LOW_LIMIT) && (highUsageModeFlag==true) )
    7136:	4b41      	ldr	r3, [pc, #260]	; (723c <condHeaterStateMachine+0x20c>)
    7138:	681a      	ldr	r2, [r3, #0]
    713a:	4b43      	ldr	r3, [pc, #268]	; (7248 <condHeaterStateMachine+0x218>)
    713c:	1c10      	adds	r0, r2, #0
    713e:	4941      	ldr	r1, [pc, #260]	; (7244 <condHeaterStateMachine+0x214>)
    7140:	4798      	blx	r3
    7142:	1c03      	adds	r3, r0, #0
    7144:	2b00      	cmp	r3, #0
    7146:	d006      	beq.n	7156 <condHeaterStateMachine+0x126>
    7148:	4b40      	ldr	r3, [pc, #256]	; (724c <condHeaterStateMachine+0x21c>)
    714a:	781b      	ldrb	r3, [r3, #0]
    714c:	2b00      	cmp	r3, #0
    714e:	d002      	beq.n	7156 <condHeaterStateMachine+0x126>
		{
			condHeater.sm_state = STATE_CONDHTR_S4;
    7150:	4b39      	ldr	r3, [pc, #228]	; (7238 <condHeaterStateMachine+0x208>)
    7152:	2204      	movs	r2, #4
    7154:	721a      	strb	r2, [r3, #8]
		}
		
		htrDuty = COND_HTR_S2_DUTY;
    7156:	1dfb      	adds	r3, r7, #7
    7158:	2243      	movs	r2, #67	; 0x43
    715a:	701a      	strb	r2, [r3, #0]
		condHeater.prev_sm_state =  STATE_CONDHTR_S2;
    715c:	4b36      	ldr	r3, [pc, #216]	; (7238 <condHeaterStateMachine+0x208>)
    715e:	2202      	movs	r2, #2
    7160:	725a      	strb	r2, [r3, #9]
    7162:	e063      	b.n	722c <condHeaterStateMachine+0x1fc>
	}

	// S3 /////////////////////////////////
	else if (condHeater.sm_state==STATE_CONDHTR_S3)
    7164:	4b34      	ldr	r3, [pc, #208]	; (7238 <condHeaterStateMachine+0x208>)
    7166:	7a1b      	ldrb	r3, [r3, #8]
    7168:	2b03      	cmp	r3, #3
    716a:	d119      	bne.n	71a0 <condHeaterStateMachine+0x170>
	{
		if ( (presentTimeInSec() > condHeaterStartTime+COND_HTR_OFFTIME_IN_SEC) || (highUsageModeFlag==true) )
    716c:	4b3d      	ldr	r3, [pc, #244]	; (7264 <condHeaterStateMachine+0x234>)
    716e:	4798      	blx	r3
    7170:	1c02      	adds	r2, r0, #0
    7172:	4b3d      	ldr	r3, [pc, #244]	; (7268 <condHeaterStateMachine+0x238>)
    7174:	681b      	ldr	r3, [r3, #0]
    7176:	493d      	ldr	r1, [pc, #244]	; (726c <condHeaterStateMachine+0x23c>)
    7178:	185b      	adds	r3, r3, r1
    717a:	429a      	cmp	r2, r3
    717c:	d803      	bhi.n	7186 <condHeaterStateMachine+0x156>
    717e:	4b33      	ldr	r3, [pc, #204]	; (724c <condHeaterStateMachine+0x21c>)
    7180:	781b      	ldrb	r3, [r3, #0]
    7182:	2b00      	cmp	r3, #0
    7184:	d005      	beq.n	7192 <condHeaterStateMachine+0x162>
		{
			condHeater.sm_state = STATE_CONDHTR_OFF;
    7186:	4b2c      	ldr	r3, [pc, #176]	; (7238 <condHeaterStateMachine+0x208>)
    7188:	2200      	movs	r2, #0
    718a:	721a      	strb	r2, [r3, #8]
			condHeaterStartTime = 0;
    718c:	4b36      	ldr	r3, [pc, #216]	; (7268 <condHeaterStateMachine+0x238>)
    718e:	2200      	movs	r2, #0
    7190:	601a      	str	r2, [r3, #0]
		}
		
		htrDuty = COND_HTR_OFF_DUTY;
    7192:	1dfb      	adds	r3, r7, #7
    7194:	2200      	movs	r2, #0
    7196:	701a      	strb	r2, [r3, #0]
		condHeater.prev_sm_state =  STATE_CONDHTR_S3;
    7198:	4b27      	ldr	r3, [pc, #156]	; (7238 <condHeaterStateMachine+0x208>)
    719a:	2203      	movs	r2, #3
    719c:	725a      	strb	r2, [r3, #9]
    719e:	e045      	b.n	722c <condHeaterStateMachine+0x1fc>
	}

	// S4 /////////////////////////////////
	else if (condHeater.sm_state==STATE_CONDHTR_S4)
    71a0:	4b25      	ldr	r3, [pc, #148]	; (7238 <condHeaterStateMachine+0x208>)
    71a2:	7a1b      	ldrb	r3, [r3, #8]
    71a4:	2b04      	cmp	r3, #4
    71a6:	d141      	bne.n	722c <condHeaterStateMachine+0x1fc>
	{
		if (condensateTemp<TSNS_INSANE_LOW_LIMIT)
    71a8:	4b24      	ldr	r3, [pc, #144]	; (723c <condHeaterStateMachine+0x20c>)
    71aa:	681a      	ldr	r2, [r3, #0]
    71ac:	4b24      	ldr	r3, [pc, #144]	; (7240 <condHeaterStateMachine+0x210>)
    71ae:	1c10      	adds	r0, r2, #0
    71b0:	4924      	ldr	r1, [pc, #144]	; (7244 <condHeaterStateMachine+0x214>)
    71b2:	4798      	blx	r3
    71b4:	1c03      	adds	r3, r0, #0
    71b6:	2b00      	cmp	r3, #0
    71b8:	d003      	beq.n	71c2 <condHeaterStateMachine+0x192>
		{
			condHeater.sm_state = STATE_CONDHTR_S1;
    71ba:	4b1f      	ldr	r3, [pc, #124]	; (7238 <condHeaterStateMachine+0x208>)
    71bc:	2201      	movs	r2, #1
    71be:	721a      	strb	r2, [r3, #8]
    71c0:	e02e      	b.n	7220 <condHeaterStateMachine+0x1f0>
		}		
		else if ( condensateTemp >= (min(COND_HTR_OFF_TEMP_LIMIT, chamber1.rejectTemp+15)) )
    71c2:	4b23      	ldr	r3, [pc, #140]	; (7250 <condHeaterStateMachine+0x220>)
    71c4:	68da      	ldr	r2, [r3, #12]
    71c6:	4b23      	ldr	r3, [pc, #140]	; (7254 <condHeaterStateMachine+0x224>)
    71c8:	1c10      	adds	r0, r2, #0
    71ca:	4929      	ldr	r1, [pc, #164]	; (7270 <condHeaterStateMachine+0x240>)
    71cc:	4798      	blx	r3
    71ce:	1c03      	adds	r3, r0, #0
    71d0:	1c1a      	adds	r2, r3, #0
    71d2:	4b1d      	ldr	r3, [pc, #116]	; (7248 <condHeaterStateMachine+0x218>)
    71d4:	1c10      	adds	r0, r2, #0
    71d6:	4921      	ldr	r1, [pc, #132]	; (725c <condHeaterStateMachine+0x22c>)
    71d8:	4798      	blx	r3
    71da:	1c03      	adds	r3, r0, #0
    71dc:	2b00      	cmp	r3, #0
    71de:	d001      	beq.n	71e4 <condHeaterStateMachine+0x1b4>
    71e0:	4b1e      	ldr	r3, [pc, #120]	; (725c <condHeaterStateMachine+0x22c>)
    71e2:	e006      	b.n	71f2 <condHeaterStateMachine+0x1c2>
    71e4:	4b1a      	ldr	r3, [pc, #104]	; (7250 <condHeaterStateMachine+0x220>)
    71e6:	68da      	ldr	r2, [r3, #12]
    71e8:	4b1a      	ldr	r3, [pc, #104]	; (7254 <condHeaterStateMachine+0x224>)
    71ea:	1c10      	adds	r0, r2, #0
    71ec:	4920      	ldr	r1, [pc, #128]	; (7270 <condHeaterStateMachine+0x240>)
    71ee:	4798      	blx	r3
    71f0:	1c03      	adds	r3, r0, #0
    71f2:	4a12      	ldr	r2, [pc, #72]	; (723c <condHeaterStateMachine+0x20c>)
    71f4:	6811      	ldr	r1, [r2, #0]
    71f6:	4a1a      	ldr	r2, [pc, #104]	; (7260 <condHeaterStateMachine+0x230>)
    71f8:	1c18      	adds	r0, r3, #0
    71fa:	4790      	blx	r2
    71fc:	1c03      	adds	r3, r0, #0
    71fe:	2b00      	cmp	r3, #0
    7200:	d00e      	beq.n	7220 <condHeaterStateMachine+0x1f0>
		{
			condHeater.sm_state = STATE_CONDHTR_S3;
    7202:	4b0d      	ldr	r3, [pc, #52]	; (7238 <condHeaterStateMachine+0x208>)
    7204:	2203      	movs	r2, #3
    7206:	721a      	strb	r2, [r3, #8]
			condHeaterStartTime = presentTimeInSec();
    7208:	4b16      	ldr	r3, [pc, #88]	; (7264 <condHeaterStateMachine+0x234>)
    720a:	4798      	blx	r3
    720c:	1c02      	adds	r2, r0, #0
    720e:	4b16      	ldr	r3, [pc, #88]	; (7268 <condHeaterStateMachine+0x238>)
    7210:	601a      	str	r2, [r3, #0]
			if (highUsageModeFlag==true)
    7212:	4b0e      	ldr	r3, [pc, #56]	; (724c <condHeaterStateMachine+0x21c>)
    7214:	781b      	ldrb	r3, [r3, #0]
    7216:	2b00      	cmp	r3, #0
    7218:	d002      	beq.n	7220 <condHeaterStateMachine+0x1f0>
			{
				highUsageModeFlag = false;
    721a:	4b0c      	ldr	r3, [pc, #48]	; (724c <condHeaterStateMachine+0x21c>)
    721c:	2200      	movs	r2, #0
    721e:	701a      	strb	r2, [r3, #0]
			}			
		}
		
		htrDuty = COND_HTR_HTR_S4_DUTY;
    7220:	1dfb      	adds	r3, r7, #7
    7222:	2253      	movs	r2, #83	; 0x53
    7224:	701a      	strb	r2, [r3, #0]
		condHeater.prev_sm_state =  STATE_CONDHTR_S4;
    7226:	4b04      	ldr	r3, [pc, #16]	; (7238 <condHeaterStateMachine+0x208>)
    7228:	2204      	movs	r2, #4
    722a:	725a      	strb	r2, [r3, #9]
	}
		
	#endif
	
	//condHeater.duty = htrDuty;
	return htrDuty;
    722c:	1dfb      	adds	r3, r7, #7
    722e:	781b      	ldrb	r3, [r3, #0]
}
    7230:	1c18      	adds	r0, r3, #0
    7232:	46bd      	mov	sp, r7
    7234:	b002      	add	sp, #8
    7236:	bd80      	pop	{r7, pc}
    7238:	20000ed4 	.word	0x20000ed4
    723c:	200003b4 	.word	0x200003b4
    7240:	0001f62d 	.word	0x0001f62d
    7244:	c2200000 	.word	0xc2200000
    7248:	0001f655 	.word	0x0001f655
    724c:	20000377 	.word	0x20000377
    7250:	200009b8 	.word	0x200009b8
    7254:	0001f79d 	.word	0x0001f79d
    7258:	40a00000 	.word	0x40a00000
    725c:	42340000 	.word	0x42340000
    7260:	0001f641 	.word	0x0001f641
    7264:	0000dcad 	.word	0x0000dcad
    7268:	200002c8 	.word	0x200002c8
    726c:	00002a30 	.word	0x00002a30
    7270:	41700000 	.word	0x41700000

00007274 <setHeaterState>:

void setHeaterState(struct heater_vars *htr_inst, uint8_t val)
{
    7274:	b580      	push	{r7, lr}
    7276:	b086      	sub	sp, #24
    7278:	af00      	add	r7, sp, #0
    727a:	6078      	str	r0, [r7, #4]
    727c:	1c0a      	adds	r2, r1, #0
    727e:	1cfb      	adds	r3, r7, #3
    7280:	701a      	strb	r2, [r3, #0]
	uint8_t pin;
	
	htr_inst->duty = val;
    7282:	1cfb      	adds	r3, r7, #3
    7284:	781a      	ldrb	r2, [r3, #0]
    7286:	687b      	ldr	r3, [r7, #4]
    7288:	605a      	str	r2, [r3, #4]
	
	if (htr_inst == &condHeater)
    728a:	687a      	ldr	r2, [r7, #4]
    728c:	4b6b      	ldr	r3, [pc, #428]	; (743c <setHeaterState+0x1c8>)
    728e:	429a      	cmp	r2, r3
    7290:	d104      	bne.n	729c <setHeaterState+0x28>
	{
		pin = PIN_ENBL_VHTR1;
    7292:	1c3b      	adds	r3, r7, #0
    7294:	3317      	adds	r3, #23
    7296:	2236      	movs	r2, #54	; 0x36
    7298:	701a      	strb	r2, [r3, #0]
    729a:	e019      	b.n	72d0 <setHeaterState+0x5c>
	}
	else if (htr_inst == &doorHeater)
    729c:	687a      	ldr	r2, [r7, #4]
    729e:	4b68      	ldr	r3, [pc, #416]	; (7440 <setHeaterState+0x1cc>)
    72a0:	429a      	cmp	r2, r3
    72a2:	d104      	bne.n	72ae <setHeaterState+0x3a>
	{
		pin = PIN_ENBL_VHTR2;
    72a4:	1c3b      	adds	r3, r7, #0
    72a6:	3317      	adds	r3, #23
    72a8:	2237      	movs	r2, #55	; 0x37
    72aa:	701a      	strb	r2, [r3, #0]
    72ac:	e010      	b.n	72d0 <setHeaterState+0x5c>
	}
	else if (htr_inst == &htxAHeater)
    72ae:	687a      	ldr	r2, [r7, #4]
    72b0:	4b64      	ldr	r3, [pc, #400]	; (7444 <setHeaterState+0x1d0>)
    72b2:	429a      	cmp	r2, r3
    72b4:	d104      	bne.n	72c0 <setHeaterState+0x4c>
	{
		pin = PIN_ENBL_OUTPUT1;
    72b6:	1c3b      	adds	r3, r7, #0
    72b8:	3317      	adds	r3, #23
    72ba:	222e      	movs	r2, #46	; 0x2e
    72bc:	701a      	strb	r2, [r3, #0]
    72be:	e007      	b.n	72d0 <setHeaterState+0x5c>
	}
	else if (htr_inst == &htxBHeater)
    72c0:	687a      	ldr	r2, [r7, #4]
    72c2:	4b61      	ldr	r3, [pc, #388]	; (7448 <setHeaterState+0x1d4>)
    72c4:	429a      	cmp	r2, r3
    72c6:	d103      	bne.n	72d0 <setHeaterState+0x5c>
	{
		pin = PIN_ENBL_OUTPUT2;
    72c8:	1c3b      	adds	r3, r7, #0
    72ca:	3317      	adds	r3, #23
    72cc:	220f      	movs	r2, #15
    72ce:	701a      	strb	r2, [r3, #0]
	}
	
	if ( (val>=100) || (val==0) )
    72d0:	1cfb      	adds	r3, r7, #3
    72d2:	781b      	ldrb	r3, [r3, #0]
    72d4:	2b63      	cmp	r3, #99	; 0x63
    72d6:	d803      	bhi.n	72e0 <setHeaterState+0x6c>
    72d8:	1cfb      	adds	r3, r7, #3
    72da:	781b      	ldrb	r3, [r3, #0]
    72dc:	2b00      	cmp	r3, #0
    72de:	d14b      	bne.n	7378 <setHeaterState+0x104>
	{
		// gpio mode
		
		// if pin not configured as gpio, then configure pin as gpio output
		if (system_pinmux_pin_get_mux_position(pin) != SYSTEM_PINMUX_GPIO)
    72e0:	1c3b      	adds	r3, r7, #0
    72e2:	3317      	adds	r3, #23
    72e4:	781b      	ldrb	r3, [r3, #0]
    72e6:	1c18      	adds	r0, r3, #0
    72e8:	4b58      	ldr	r3, [pc, #352]	; (744c <setHeaterState+0x1d8>)
    72ea:	4798      	blx	r3
    72ec:	1c03      	adds	r3, r0, #0
    72ee:	2b80      	cmp	r3, #128	; 0x80
    72f0:	d027      	beq.n	7342 <setHeaterState+0xce>
		{
			struct system_pinmux_config config_pinmux;
			system_pinmux_get_config_defaults(&config_pinmux);
    72f2:	1c3b      	adds	r3, r7, #0
    72f4:	3314      	adds	r3, #20
    72f6:	1c18      	adds	r0, r3, #0
    72f8:	4b55      	ldr	r3, [pc, #340]	; (7450 <setHeaterState+0x1dc>)
    72fa:	4798      	blx	r3
			config_pinmux.mux_position = SYSTEM_PINMUX_GPIO;
    72fc:	1c3b      	adds	r3, r7, #0
    72fe:	3314      	adds	r3, #20
    7300:	2280      	movs	r2, #128	; 0x80
    7302:	701a      	strb	r2, [r3, #0]
			config_pinmux.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    7304:	1c3b      	adds	r3, r7, #0
    7306:	3314      	adds	r3, #20
    7308:	2201      	movs	r2, #1
    730a:	705a      	strb	r2, [r3, #1]
			system_pinmux_pin_set_config(pin, &config_pinmux);
    730c:	1c3b      	adds	r3, r7, #0
    730e:	3317      	adds	r3, #23
    7310:	781a      	ldrb	r2, [r3, #0]
    7312:	1c3b      	adds	r3, r7, #0
    7314:	3314      	adds	r3, #20
    7316:	1c10      	adds	r0, r2, #0
    7318:	1c19      	adds	r1, r3, #0
    731a:	4b4e      	ldr	r3, [pc, #312]	; (7454 <setHeaterState+0x1e0>)
    731c:	4798      	blx	r3
			struct port_config config_port_pin;
			port_get_config_defaults(&config_port_pin);
    731e:	1c3b      	adds	r3, r7, #0
    7320:	3310      	adds	r3, #16
    7322:	1c18      	adds	r0, r3, #0
    7324:	4b4c      	ldr	r3, [pc, #304]	; (7458 <setHeaterState+0x1e4>)
    7326:	4798      	blx	r3
			config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    7328:	1c3b      	adds	r3, r7, #0
    732a:	3310      	adds	r3, #16
    732c:	2201      	movs	r2, #1
    732e:	701a      	strb	r2, [r3, #0]
			port_pin_set_config(pin, &config_port_pin);
    7330:	1c3b      	adds	r3, r7, #0
    7332:	3317      	adds	r3, #23
    7334:	781a      	ldrb	r2, [r3, #0]
    7336:	1c3b      	adds	r3, r7, #0
    7338:	3310      	adds	r3, #16
    733a:	1c10      	adds	r0, r2, #0
    733c:	1c19      	adds	r1, r3, #0
    733e:	4b47      	ldr	r3, [pc, #284]	; (745c <setHeaterState+0x1e8>)
    7340:	4798      	blx	r3
		}
		
		// bound to boolean
		if (val > 0)
    7342:	1cfb      	adds	r3, r7, #3
    7344:	781b      	ldrb	r3, [r3, #0]
    7346:	2b00      	cmp	r3, #0
    7348:	d002      	beq.n	7350 <setHeaterState+0xdc>
		{
			val = 1;
    734a:	1cfb      	adds	r3, r7, #3
    734c:	2201      	movs	r2, #1
    734e:	701a      	strb	r2, [r3, #0]
		}
		
		// set output pin to val1
		port_pin_set_output_level(pin, val);
    7350:	1cfb      	adds	r3, r7, #3
    7352:	781b      	ldrb	r3, [r3, #0]
    7354:	1e5a      	subs	r2, r3, #1
    7356:	4193      	sbcs	r3, r2
    7358:	b2db      	uxtb	r3, r3
    735a:	1c3a      	adds	r2, r7, #0
    735c:	3217      	adds	r2, #23
    735e:	7812      	ldrb	r2, [r2, #0]
    7360:	1c10      	adds	r0, r2, #0
    7362:	1c19      	adds	r1, r3, #0
    7364:	4b3e      	ldr	r3, [pc, #248]	; (7460 <setHeaterState+0x1ec>)
    7366:	4798      	blx	r3
		
		// update status
		htr_inst->output_state = val;
    7368:	1cfb      	adds	r3, r7, #3
    736a:	781b      	ldrb	r3, [r3, #0]
    736c:	1e5a      	subs	r2, r3, #1
    736e:	4193      	sbcs	r3, r2
    7370:	b2da      	uxtb	r2, r3
    7372:	687b      	ldr	r3, [r7, #4]
    7374:	701a      	strb	r2, [r3, #0]
    7376:	e05d      	b.n	7434 <setHeaterState+0x1c0>
	}
	else
	{
		// pwm mode
		
		if (pin == PIN_ENBL_VHTR1)
    7378:	1c3b      	adds	r3, r7, #0
    737a:	3317      	adds	r3, #23
    737c:	781b      	ldrb	r3, [r3, #0]
    737e:	2b36      	cmp	r3, #54	; 0x36
    7380:	d129      	bne.n	73d6 <setHeaterState+0x162>
		{
			// configure as tc7 pwm output
			struct system_pinmux_config config_pinmux;
			system_pinmux_get_config_defaults(&config_pinmux);
    7382:	1c3b      	adds	r3, r7, #0
    7384:	330c      	adds	r3, #12
    7386:	1c18      	adds	r0, r3, #0
    7388:	4b31      	ldr	r3, [pc, #196]	; (7450 <setHeaterState+0x1dc>)
    738a:	4798      	blx	r3
			config_pinmux.mux_position = PINMUX_PB22F_TC7_WO0;
    738c:	1c3b      	adds	r3, r7, #0
    738e:	330c      	adds	r3, #12
    7390:	2205      	movs	r2, #5
    7392:	701a      	strb	r2, [r3, #0]
			config_pinmux.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    7394:	1c3b      	adds	r3, r7, #0
    7396:	330c      	adds	r3, #12
    7398:	2201      	movs	r2, #1
    739a:	705a      	strb	r2, [r3, #1]
			system_pinmux_pin_set_config(pin, &config_pinmux);
    739c:	1c3b      	adds	r3, r7, #0
    739e:	3317      	adds	r3, #23
    73a0:	781a      	ldrb	r2, [r3, #0]
    73a2:	1c3b      	adds	r3, r7, #0
    73a4:	330c      	adds	r3, #12
    73a6:	1c10      	adds	r0, r2, #0
    73a8:	1c19      	adds	r1, r3, #0
    73aa:	4b2a      	ldr	r3, [pc, #168]	; (7454 <setHeaterState+0x1e0>)
    73ac:	4798      	blx	r3
			tc_enable(&tc7_instance);
    73ae:	4b2d      	ldr	r3, [pc, #180]	; (7464 <setHeaterState+0x1f0>)
    73b0:	1c18      	adds	r0, r3, #0
    73b2:	4b2d      	ldr	r3, [pc, #180]	; (7468 <setHeaterState+0x1f4>)
    73b4:	4798      	blx	r3
			
			// set duty
			pwm7_1_cmp_val = (val * PWM_MAX_DUTY_VAL) / 100;
    73b6:	1cfb      	adds	r3, r7, #3
    73b8:	781a      	ldrb	r2, [r3, #0]
    73ba:	1c13      	adds	r3, r2, #0
    73bc:	041b      	lsls	r3, r3, #16
    73be:	1a9a      	subs	r2, r3, r2
    73c0:	4b2a      	ldr	r3, [pc, #168]	; (746c <setHeaterState+0x1f8>)
    73c2:	1c10      	adds	r0, r2, #0
    73c4:	2164      	movs	r1, #100	; 0x64
    73c6:	4798      	blx	r3
    73c8:	1c03      	adds	r3, r0, #0
    73ca:	1c1a      	adds	r2, r3, #0
    73cc:	4b28      	ldr	r3, [pc, #160]	; (7470 <setHeaterState+0x1fc>)
    73ce:	601a      	str	r2, [r3, #0]
			
			// set status
			htr_inst->output_state = ON;
    73d0:	687b      	ldr	r3, [r7, #4]
    73d2:	2201      	movs	r2, #1
    73d4:	701a      	strb	r2, [r3, #0]
		}
		if (pin == PIN_ENBL_VHTR2)
    73d6:	1c3b      	adds	r3, r7, #0
    73d8:	3317      	adds	r3, #23
    73da:	781b      	ldrb	r3, [r3, #0]
    73dc:	2b37      	cmp	r3, #55	; 0x37
    73de:	d129      	bne.n	7434 <setHeaterState+0x1c0>
		{
			// configure as tc7 pwm output
			struct system_pinmux_config config_pinmux;
			system_pinmux_get_config_defaults(&config_pinmux);
    73e0:	1c3b      	adds	r3, r7, #0
    73e2:	3308      	adds	r3, #8
    73e4:	1c18      	adds	r0, r3, #0
    73e6:	4b1a      	ldr	r3, [pc, #104]	; (7450 <setHeaterState+0x1dc>)
    73e8:	4798      	blx	r3
			config_pinmux.mux_position = PINMUX_PB23F_TC7_WO1;
    73ea:	1c3b      	adds	r3, r7, #0
    73ec:	3308      	adds	r3, #8
    73ee:	2205      	movs	r2, #5
    73f0:	701a      	strb	r2, [r3, #0]
			config_pinmux.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    73f2:	1c3b      	adds	r3, r7, #0
    73f4:	3308      	adds	r3, #8
    73f6:	2201      	movs	r2, #1
    73f8:	705a      	strb	r2, [r3, #1]
			system_pinmux_pin_set_config(pin, &config_pinmux);
    73fa:	1c3b      	adds	r3, r7, #0
    73fc:	3317      	adds	r3, #23
    73fe:	781a      	ldrb	r2, [r3, #0]
    7400:	1c3b      	adds	r3, r7, #0
    7402:	3308      	adds	r3, #8
    7404:	1c10      	adds	r0, r2, #0
    7406:	1c19      	adds	r1, r3, #0
    7408:	4b12      	ldr	r3, [pc, #72]	; (7454 <setHeaterState+0x1e0>)
    740a:	4798      	blx	r3
			tc_enable(&tc7_instance);
    740c:	4b15      	ldr	r3, [pc, #84]	; (7464 <setHeaterState+0x1f0>)
    740e:	1c18      	adds	r0, r3, #0
    7410:	4b15      	ldr	r3, [pc, #84]	; (7468 <setHeaterState+0x1f4>)
    7412:	4798      	blx	r3
			
			// set duty
			pwm7_2_cmp_val = (val * PWM_MAX_DUTY_VAL) / 100;
    7414:	1cfb      	adds	r3, r7, #3
    7416:	781a      	ldrb	r2, [r3, #0]
    7418:	1c13      	adds	r3, r2, #0
    741a:	041b      	lsls	r3, r3, #16
    741c:	1a9a      	subs	r2, r3, r2
    741e:	4b13      	ldr	r3, [pc, #76]	; (746c <setHeaterState+0x1f8>)
    7420:	1c10      	adds	r0, r2, #0
    7422:	2164      	movs	r1, #100	; 0x64
    7424:	4798      	blx	r3
    7426:	1c03      	adds	r3, r0, #0
    7428:	1c1a      	adds	r2, r3, #0
    742a:	4b12      	ldr	r3, [pc, #72]	; (7474 <setHeaterState+0x200>)
    742c:	601a      	str	r2, [r3, #0]
			
			// set status
			htr_inst->output_state = ON;
    742e:	687b      	ldr	r3, [r7, #4]
    7430:	2201      	movs	r2, #1
    7432:	701a      	strb	r2, [r3, #0]
		}
	}
    7434:	46bd      	mov	sp, r7
    7436:	b006      	add	sp, #24
    7438:	bd80      	pop	{r7, pc}
    743a:	46c0      	nop			; (mov r8, r8)
    743c:	20000ed4 	.word	0x20000ed4
    7440:	20000b34 	.word	0x20000b34
    7444:	20000b28 	.word	0x20000b28
    7448:	20000c4c 	.word	0x20000c4c
    744c:	00006bd1 	.word	0x00006bd1
    7450:	00006a9d 	.word	0x00006a9d
    7454:	00017d71 	.word	0x00017d71
    7458:	00006c71 	.word	0x00006c71
    745c:	00012345 	.word	0x00012345
    7460:	00006ced 	.word	0x00006ced
    7464:	20000fc4 	.word	0x20000fc4
    7468:	00006e19 	.word	0x00006e19
    746c:	0001f4c9 	.word	0x0001f4c9
    7470:	20000154 	.word	0x20000154
    7474:	20000158 	.word	0x20000158

00007478 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
    7478:	b580      	push	{r7, lr}
    747a:	af00      	add	r7, sp, #0
	return test_case_ptr;
    747c:	4b02      	ldr	r3, [pc, #8]	; (7488 <test_get_case+0x10>)
    747e:	681b      	ldr	r3, [r3, #0]
}
    7480:	1c18      	adds	r0, r3, #0
    7482:	46bd      	mov	sp, r7
    7484:	bd80      	pop	{r7, pc}
    7486:	46c0      	nop			; (mov r8, r8)
    7488:	2000041c 	.word	0x2000041c

0000748c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    748c:	b580      	push	{r7, lr}
    748e:	b082      	sub	sp, #8
    7490:	af00      	add	r7, sp, #0
    7492:	1c02      	adds	r2, r0, #0
    7494:	1dfb      	adds	r3, r7, #7
    7496:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    7498:	4b06      	ldr	r3, [pc, #24]	; (74b4 <system_interrupt_enable+0x28>)
    749a:	1dfa      	adds	r2, r7, #7
    749c:	7812      	ldrb	r2, [r2, #0]
    749e:	1c11      	adds	r1, r2, #0
    74a0:	221f      	movs	r2, #31
    74a2:	400a      	ands	r2, r1
    74a4:	2101      	movs	r1, #1
    74a6:	1c08      	adds	r0, r1, #0
    74a8:	4090      	lsls	r0, r2
    74aa:	1c02      	adds	r2, r0, #0
    74ac:	601a      	str	r2, [r3, #0]
}
    74ae:	46bd      	mov	sp, r7
    74b0:	b002      	add	sp, #8
    74b2:	bd80      	pop	{r7, pc}
    74b4:	e000e100 	.word	0xe000e100

000074b8 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    74b8:	b590      	push	{r4, r7, lr}
    74ba:	b087      	sub	sp, #28
    74bc:	af02      	add	r7, sp, #8
    74be:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);
    74c0:	4b2b      	ldr	r3, [pc, #172]	; (7570 <_i2c_master_wait_for_sync+0xb8>)
    74c2:	4798      	blx	r3
    74c4:	1c03      	adds	r3, r0, #0
    74c6:	2b00      	cmp	r3, #0
    74c8:	d011      	beq.n	74ee <_i2c_master_wait_for_sync+0x36>
    74ca:	687b      	ldr	r3, [r7, #4]
    74cc:	2b00      	cmp	r3, #0
    74ce:	d11b      	bne.n	7508 <_i2c_master_wait_for_sync+0x50>
    74d0:	4b27      	ldr	r3, [pc, #156]	; (7570 <_i2c_master_wait_for_sync+0xb8>)
    74d2:	4798      	blx	r3
    74d4:	1c02      	adds	r2, r0, #0
    74d6:	4b27      	ldr	r3, [pc, #156]	; (7574 <_i2c_master_wait_for_sync+0xbc>)
    74d8:	4927      	ldr	r1, [pc, #156]	; (7578 <_i2c_master_wait_for_sync+0xc0>)
    74da:	9100      	str	r1, [sp, #0]
    74dc:	4927      	ldr	r1, [pc, #156]	; (757c <_i2c_master_wait_for_sync+0xc4>)
    74de:	9101      	str	r1, [sp, #4]
    74e0:	1c10      	adds	r0, r2, #0
    74e2:	2101      	movs	r1, #1
    74e4:	1c1a      	adds	r2, r3, #0
    74e6:	23f1      	movs	r3, #241	; 0xf1
    74e8:	4c25      	ldr	r4, [pc, #148]	; (7580 <_i2c_master_wait_for_sync+0xc8>)
    74ea:	47a0      	blx	r4
    74ec:	e00c      	b.n	7508 <_i2c_master_wait_for_sync+0x50>
    74ee:	687b      	ldr	r3, [r7, #4]
    74f0:	2b00      	cmp	r3, #0
    74f2:	d109      	bne.n	7508 <_i2c_master_wait_for_sync+0x50>
    74f4:	4923      	ldr	r1, [pc, #140]	; (7584 <_i2c_master_wait_for_sync+0xcc>)
    74f6:	4a21      	ldr	r2, [pc, #132]	; (757c <_i2c_master_wait_for_sync+0xc4>)
    74f8:	4b1e      	ldr	r3, [pc, #120]	; (7574 <_i2c_master_wait_for_sync+0xbc>)
    74fa:	1c08      	adds	r0, r1, #0
    74fc:	1c11      	adds	r1, r2, #0
    74fe:	1c1a      	adds	r2, r3, #0
    7500:	23f1      	movs	r3, #241	; 0xf1
    7502:	4c21      	ldr	r4, [pc, #132]	; (7588 <_i2c_master_wait_for_sync+0xd0>)
    7504:	47a0      	blx	r4
    7506:	e7fe      	b.n	7506 <_i2c_master_wait_for_sync+0x4e>
	Assert(module->hw);
    7508:	4b19      	ldr	r3, [pc, #100]	; (7570 <_i2c_master_wait_for_sync+0xb8>)
    750a:	4798      	blx	r3
    750c:	1c03      	adds	r3, r0, #0
    750e:	2b00      	cmp	r3, #0
    7510:	d012      	beq.n	7538 <_i2c_master_wait_for_sync+0x80>
    7512:	687b      	ldr	r3, [r7, #4]
    7514:	681b      	ldr	r3, [r3, #0]
    7516:	2b00      	cmp	r3, #0
    7518:	d11c      	bne.n	7554 <_i2c_master_wait_for_sync+0x9c>
    751a:	4b15      	ldr	r3, [pc, #84]	; (7570 <_i2c_master_wait_for_sync+0xb8>)
    751c:	4798      	blx	r3
    751e:	1c02      	adds	r2, r0, #0
    7520:	4b14      	ldr	r3, [pc, #80]	; (7574 <_i2c_master_wait_for_sync+0xbc>)
    7522:	4915      	ldr	r1, [pc, #84]	; (7578 <_i2c_master_wait_for_sync+0xc0>)
    7524:	9100      	str	r1, [sp, #0]
    7526:	4919      	ldr	r1, [pc, #100]	; (758c <_i2c_master_wait_for_sync+0xd4>)
    7528:	9101      	str	r1, [sp, #4]
    752a:	1c10      	adds	r0, r2, #0
    752c:	2101      	movs	r1, #1
    752e:	1c1a      	adds	r2, r3, #0
    7530:	23f2      	movs	r3, #242	; 0xf2
    7532:	4c13      	ldr	r4, [pc, #76]	; (7580 <_i2c_master_wait_for_sync+0xc8>)
    7534:	47a0      	blx	r4
    7536:	e00d      	b.n	7554 <_i2c_master_wait_for_sync+0x9c>
    7538:	687b      	ldr	r3, [r7, #4]
    753a:	681b      	ldr	r3, [r3, #0]
    753c:	2b00      	cmp	r3, #0
    753e:	d109      	bne.n	7554 <_i2c_master_wait_for_sync+0x9c>
    7540:	4910      	ldr	r1, [pc, #64]	; (7584 <_i2c_master_wait_for_sync+0xcc>)
    7542:	4a12      	ldr	r2, [pc, #72]	; (758c <_i2c_master_wait_for_sync+0xd4>)
    7544:	4b0b      	ldr	r3, [pc, #44]	; (7574 <_i2c_master_wait_for_sync+0xbc>)
    7546:	1c08      	adds	r0, r1, #0
    7548:	1c11      	adds	r1, r2, #0
    754a:	1c1a      	adds	r2, r3, #0
    754c:	23f2      	movs	r3, #242	; 0xf2
    754e:	4c0e      	ldr	r4, [pc, #56]	; (7588 <_i2c_master_wait_for_sync+0xd0>)
    7550:	47a0      	blx	r4
    7552:	e7fe      	b.n	7552 <_i2c_master_wait_for_sync+0x9a>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    7554:	687b      	ldr	r3, [r7, #4]
    7556:	681b      	ldr	r3, [r3, #0]
    7558:	60fb      	str	r3, [r7, #12]

	while (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY) {
    755a:	46c0      	nop			; (mov r8, r8)
    755c:	68fb      	ldr	r3, [r7, #12]
    755e:	691b      	ldr	r3, [r3, #16]
    7560:	b29b      	uxth	r3, r3
    7562:	b29b      	uxth	r3, r3
    7564:	b21b      	sxth	r3, r3
    7566:	2b00      	cmp	r3, #0
    7568:	dbf8      	blt.n	755c <_i2c_master_wait_for_sync+0xa4>
		/* Wait for I2C module to sync. */
	}
}
    756a:	46bd      	mov	sp, r7
    756c:	b005      	add	sp, #20
    756e:	bd90      	pop	{r4, r7, pc}
    7570:	00007479 	.word	0x00007479
    7574:	00024774 	.word	0x00024774
    7578:	000247a4 	.word	0x000247a4
    757c:	000247bc 	.word	0x000247bc
    7580:	000106e9 	.word	0x000106e9
    7584:	000247c4 	.word	0x000247c4
    7588:	0001b62d 	.word	0x0001b62d
    758c:	000247e8 	.word	0x000247e8

00007590 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    7590:	b590      	push	{r4, r7, lr}
    7592:	b085      	sub	sp, #20
    7594:	af02      	add	r7, sp, #8
    7596:	6078      	str	r0, [r7, #4]
	/*Sanity check argument. */
	Assert(config);
    7598:	4b1f      	ldr	r3, [pc, #124]	; (7618 <i2c_master_get_config_defaults+0x88>)
    759a:	4798      	blx	r3
    759c:	1c03      	adds	r3, r0, #0
    759e:	2b00      	cmp	r3, #0
    75a0:	d011      	beq.n	75c6 <i2c_master_get_config_defaults+0x36>
    75a2:	687b      	ldr	r3, [r7, #4]
    75a4:	2b00      	cmp	r3, #0
    75a6:	d119      	bne.n	75dc <i2c_master_get_config_defaults+0x4c>
    75a8:	4b1b      	ldr	r3, [pc, #108]	; (7618 <i2c_master_get_config_defaults+0x88>)
    75aa:	4798      	blx	r3
    75ac:	1c01      	adds	r1, r0, #0
    75ae:	4a1b      	ldr	r2, [pc, #108]	; (761c <i2c_master_get_config_defaults+0x8c>)
    75b0:	2394      	movs	r3, #148	; 0x94
    75b2:	005b      	lsls	r3, r3, #1
    75b4:	481a      	ldr	r0, [pc, #104]	; (7620 <i2c_master_get_config_defaults+0x90>)
    75b6:	9000      	str	r0, [sp, #0]
    75b8:	481a      	ldr	r0, [pc, #104]	; (7624 <i2c_master_get_config_defaults+0x94>)
    75ba:	9001      	str	r0, [sp, #4]
    75bc:	1c08      	adds	r0, r1, #0
    75be:	2101      	movs	r1, #1
    75c0:	4c19      	ldr	r4, [pc, #100]	; (7628 <i2c_master_get_config_defaults+0x98>)
    75c2:	47a0      	blx	r4
    75c4:	e00a      	b.n	75dc <i2c_master_get_config_defaults+0x4c>
    75c6:	687b      	ldr	r3, [r7, #4]
    75c8:	2b00      	cmp	r3, #0
    75ca:	d107      	bne.n	75dc <i2c_master_get_config_defaults+0x4c>
    75cc:	4817      	ldr	r0, [pc, #92]	; (762c <i2c_master_get_config_defaults+0x9c>)
    75ce:	4915      	ldr	r1, [pc, #84]	; (7624 <i2c_master_get_config_defaults+0x94>)
    75d0:	4a12      	ldr	r2, [pc, #72]	; (761c <i2c_master_get_config_defaults+0x8c>)
    75d2:	2394      	movs	r3, #148	; 0x94
    75d4:	005b      	lsls	r3, r3, #1
    75d6:	4c16      	ldr	r4, [pc, #88]	; (7630 <i2c_master_get_config_defaults+0xa0>)
    75d8:	47a0      	blx	r4
    75da:	e7fe      	b.n	75da <i2c_master_get_config_defaults+0x4a>
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    75dc:	687b      	ldr	r3, [r7, #4]
    75de:	2264      	movs	r2, #100	; 0x64
    75e0:	801a      	strh	r2, [r3, #0]
	config->generator_source = GCLK_GENERATOR_0;
    75e2:	687b      	ldr	r3, [r7, #4]
    75e4:	2200      	movs	r2, #0
    75e6:	709a      	strb	r2, [r3, #2]
	config->run_in_standby   = false;
    75e8:	687b      	ldr	r3, [r7, #4]
    75ea:	2200      	movs	r2, #0
    75ec:	731a      	strb	r2, [r3, #12]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    75ee:	687b      	ldr	r3, [r7, #4]
    75f0:	2280      	movs	r2, #128	; 0x80
    75f2:	0392      	lsls	r2, r2, #14
    75f4:	605a      	str	r2, [r3, #4]
	config->buffer_timeout   = 65535;
    75f6:	687b      	ldr	r3, [r7, #4]
    75f8:	2201      	movs	r2, #1
    75fa:	4252      	negs	r2, r2
    75fc:	815a      	strh	r2, [r3, #10]
	config->unknown_bus_state_timeout = 65535;
    75fe:	687b      	ldr	r3, [r7, #4]
    7600:	2201      	movs	r2, #1
    7602:	4252      	negs	r2, r2
    7604:	811a      	strh	r2, [r3, #8]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    7606:	687b      	ldr	r3, [r7, #4]
    7608:	2200      	movs	r2, #0
    760a:	611a      	str	r2, [r3, #16]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    760c:	687b      	ldr	r3, [r7, #4]
    760e:	2200      	movs	r2, #0
    7610:	615a      	str	r2, [r3, #20]
}
    7612:	46bd      	mov	sp, r7
    7614:	b003      	add	sp, #12
    7616:	bd90      	pop	{r4, r7, pc}
    7618:	00007479 	.word	0x00007479
    761c:	00024774 	.word	0x00024774
    7620:	000247a4 	.word	0x000247a4
    7624:	000247f4 	.word	0x000247f4
    7628:	000106e9 	.word	0x000106e9
    762c:	000247c4 	.word	0x000247c4
    7630:	0001b62d 	.word	0x0001b62d

00007634 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    7634:	b590      	push	{r4, r7, lr}
    7636:	b087      	sub	sp, #28
    7638:	af02      	add	r7, sp, #8
    763a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments. */
	Assert(module);
    763c:	4b36      	ldr	r3, [pc, #216]	; (7718 <i2c_master_enable+0xe4>)
    763e:	4798      	blx	r3
    7640:	1c03      	adds	r3, r0, #0
    7642:	2b00      	cmp	r3, #0
    7644:	d011      	beq.n	766a <i2c_master_enable+0x36>
    7646:	687b      	ldr	r3, [r7, #4]
    7648:	2b00      	cmp	r3, #0
    764a:	d119      	bne.n	7680 <i2c_master_enable+0x4c>
    764c:	4b32      	ldr	r3, [pc, #200]	; (7718 <i2c_master_enable+0xe4>)
    764e:	4798      	blx	r3
    7650:	1c01      	adds	r1, r0, #0
    7652:	4a32      	ldr	r2, [pc, #200]	; (771c <i2c_master_enable+0xe8>)
    7654:	2346      	movs	r3, #70	; 0x46
    7656:	33ff      	adds	r3, #255	; 0xff
    7658:	4831      	ldr	r0, [pc, #196]	; (7720 <i2c_master_enable+0xec>)
    765a:	9000      	str	r0, [sp, #0]
    765c:	4831      	ldr	r0, [pc, #196]	; (7724 <i2c_master_enable+0xf0>)
    765e:	9001      	str	r0, [sp, #4]
    7660:	1c08      	adds	r0, r1, #0
    7662:	2101      	movs	r1, #1
    7664:	4c30      	ldr	r4, [pc, #192]	; (7728 <i2c_master_enable+0xf4>)
    7666:	47a0      	blx	r4
    7668:	e00a      	b.n	7680 <i2c_master_enable+0x4c>
    766a:	687b      	ldr	r3, [r7, #4]
    766c:	2b00      	cmp	r3, #0
    766e:	d107      	bne.n	7680 <i2c_master_enable+0x4c>
    7670:	482e      	ldr	r0, [pc, #184]	; (772c <i2c_master_enable+0xf8>)
    7672:	492c      	ldr	r1, [pc, #176]	; (7724 <i2c_master_enable+0xf0>)
    7674:	4a29      	ldr	r2, [pc, #164]	; (771c <i2c_master_enable+0xe8>)
    7676:	2346      	movs	r3, #70	; 0x46
    7678:	33ff      	adds	r3, #255	; 0xff
    767a:	4c2d      	ldr	r4, [pc, #180]	; (7730 <i2c_master_enable+0xfc>)
    767c:	47a0      	blx	r4
    767e:	e7fe      	b.n	767e <i2c_master_enable+0x4a>
	Assert(module->hw);
    7680:	4b25      	ldr	r3, [pc, #148]	; (7718 <i2c_master_enable+0xe4>)
    7682:	4798      	blx	r3
    7684:	1c03      	adds	r3, r0, #0
    7686:	2b00      	cmp	r3, #0
    7688:	d012      	beq.n	76b0 <i2c_master_enable+0x7c>
    768a:	687b      	ldr	r3, [r7, #4]
    768c:	681b      	ldr	r3, [r3, #0]
    768e:	2b00      	cmp	r3, #0
    7690:	d11a      	bne.n	76c8 <i2c_master_enable+0x94>
    7692:	4b21      	ldr	r3, [pc, #132]	; (7718 <i2c_master_enable+0xe4>)
    7694:	4798      	blx	r3
    7696:	1c01      	adds	r1, r0, #0
    7698:	4a20      	ldr	r2, [pc, #128]	; (771c <i2c_master_enable+0xe8>)
    769a:	23a3      	movs	r3, #163	; 0xa3
    769c:	005b      	lsls	r3, r3, #1
    769e:	4820      	ldr	r0, [pc, #128]	; (7720 <i2c_master_enable+0xec>)
    76a0:	9000      	str	r0, [sp, #0]
    76a2:	4824      	ldr	r0, [pc, #144]	; (7734 <i2c_master_enable+0x100>)
    76a4:	9001      	str	r0, [sp, #4]
    76a6:	1c08      	adds	r0, r1, #0
    76a8:	2101      	movs	r1, #1
    76aa:	4c1f      	ldr	r4, [pc, #124]	; (7728 <i2c_master_enable+0xf4>)
    76ac:	47a0      	blx	r4
    76ae:	e00b      	b.n	76c8 <i2c_master_enable+0x94>
    76b0:	687b      	ldr	r3, [r7, #4]
    76b2:	681b      	ldr	r3, [r3, #0]
    76b4:	2b00      	cmp	r3, #0
    76b6:	d107      	bne.n	76c8 <i2c_master_enable+0x94>
    76b8:	481c      	ldr	r0, [pc, #112]	; (772c <i2c_master_enable+0xf8>)
    76ba:	491e      	ldr	r1, [pc, #120]	; (7734 <i2c_master_enable+0x100>)
    76bc:	4a17      	ldr	r2, [pc, #92]	; (771c <i2c_master_enable+0xe8>)
    76be:	23a3      	movs	r3, #163	; 0xa3
    76c0:	005b      	lsls	r3, r3, #1
    76c2:	4c1b      	ldr	r4, [pc, #108]	; (7730 <i2c_master_enable+0xfc>)
    76c4:	47a0      	blx	r4
    76c6:	e7fe      	b.n	76c6 <i2c_master_enable+0x92>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    76c8:	687b      	ldr	r3, [r7, #4]
    76ca:	681b      	ldr	r3, [r3, #0]
    76cc:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state. */
	uint32_t timeout_counter = 0;
    76ce:	2300      	movs	r3, #0
    76d0:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync. */
	_i2c_master_wait_for_sync(module);
    76d2:	687b      	ldr	r3, [r7, #4]
    76d4:	1c18      	adds	r0, r3, #0
    76d6:	4b18      	ldr	r3, [pc, #96]	; (7738 <i2c_master_enable+0x104>)
    76d8:	4798      	blx	r3

	/* Enable module. */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    76da:	68bb      	ldr	r3, [r7, #8]
    76dc:	681b      	ldr	r3, [r3, #0]
    76de:	2202      	movs	r2, #2
    76e0:	431a      	orrs	r2, r3
    76e2:	68bb      	ldr	r3, [r7, #8]
    76e4:	601a      	str	r2, [r3, #0]
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    76e6:	e00c      	b.n	7702 <i2c_master_enable+0xce>
		timeout_counter++;
    76e8:	68fb      	ldr	r3, [r7, #12]
    76ea:	3301      	adds	r3, #1
    76ec:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    76ee:	687b      	ldr	r3, [r7, #4]
    76f0:	889b      	ldrh	r3, [r3, #4]
    76f2:	1c1a      	adds	r2, r3, #0
    76f4:	68fb      	ldr	r3, [r7, #12]
    76f6:	429a      	cmp	r2, r3
    76f8:	d803      	bhi.n	7702 <i2c_master_enable+0xce>
			/* Timeout, force bus state to idle. */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    76fa:	68bb      	ldr	r3, [r7, #8]
    76fc:	2210      	movs	r2, #16
    76fe:	821a      	strh	r2, [r3, #16]
			/* Workaround #1 */
			return;
    7700:	e006      	b.n	7710 <i2c_master_enable+0xdc>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    7702:	68bb      	ldr	r3, [r7, #8]
    7704:	691b      	ldr	r3, [r3, #16]
    7706:	b29b      	uxth	r3, r3
    7708:	1c1a      	adds	r2, r3, #0
    770a:	2310      	movs	r3, #16
    770c:	4013      	ands	r3, r2
    770e:	d0eb      	beq.n	76e8 <i2c_master_enable+0xb4>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
			/* Workaround #1 */
			return;
		}
	}
}
    7710:	46bd      	mov	sp, r7
    7712:	b005      	add	sp, #20
    7714:	bd90      	pop	{r4, r7, pc}
    7716:	46c0      	nop			; (mov r8, r8)
    7718:	00007479 	.word	0x00007479
    771c:	00024774 	.word	0x00024774
    7720:	000247a4 	.word	0x000247a4
    7724:	000247bc 	.word	0x000247bc
    7728:	000106e9 	.word	0x000106e9
    772c:	000247c4 	.word	0x000247c4
    7730:	0001b62d 	.word	0x0001b62d
    7734:	000247e8 	.word	0x000247e8
    7738:	000074b9 	.word	0x000074b9

0000773c <_i2c_slave_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_slave_wait_for_sync(
		const struct i2c_slave_module *const module)
{
    773c:	b590      	push	{r4, r7, lr}
    773e:	b087      	sub	sp, #28
    7740:	af02      	add	r7, sp, #8
    7742:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);
    7744:	4b29      	ldr	r3, [pc, #164]	; (77ec <_i2c_slave_wait_for_sync+0xb0>)
    7746:	4798      	blx	r3
    7748:	1c03      	adds	r3, r0, #0
    774a:	2b00      	cmp	r3, #0
    774c:	d011      	beq.n	7772 <_i2c_slave_wait_for_sync+0x36>
    774e:	687b      	ldr	r3, [r7, #4]
    7750:	2b00      	cmp	r3, #0
    7752:	d119      	bne.n	7788 <_i2c_slave_wait_for_sync+0x4c>
    7754:	4b25      	ldr	r3, [pc, #148]	; (77ec <_i2c_slave_wait_for_sync+0xb0>)
    7756:	4798      	blx	r3
    7758:	1c01      	adds	r1, r0, #0
    775a:	4a25      	ldr	r2, [pc, #148]	; (77f0 <_i2c_slave_wait_for_sync+0xb4>)
    775c:	2399      	movs	r3, #153	; 0x99
    775e:	005b      	lsls	r3, r3, #1
    7760:	4824      	ldr	r0, [pc, #144]	; (77f4 <_i2c_slave_wait_for_sync+0xb8>)
    7762:	9000      	str	r0, [sp, #0]
    7764:	4824      	ldr	r0, [pc, #144]	; (77f8 <_i2c_slave_wait_for_sync+0xbc>)
    7766:	9001      	str	r0, [sp, #4]
    7768:	1c08      	adds	r0, r1, #0
    776a:	2101      	movs	r1, #1
    776c:	4c23      	ldr	r4, [pc, #140]	; (77fc <_i2c_slave_wait_for_sync+0xc0>)
    776e:	47a0      	blx	r4
    7770:	e00a      	b.n	7788 <_i2c_slave_wait_for_sync+0x4c>
    7772:	687b      	ldr	r3, [r7, #4]
    7774:	2b00      	cmp	r3, #0
    7776:	d107      	bne.n	7788 <_i2c_slave_wait_for_sync+0x4c>
    7778:	4821      	ldr	r0, [pc, #132]	; (7800 <_i2c_slave_wait_for_sync+0xc4>)
    777a:	491f      	ldr	r1, [pc, #124]	; (77f8 <_i2c_slave_wait_for_sync+0xbc>)
    777c:	4a1c      	ldr	r2, [pc, #112]	; (77f0 <_i2c_slave_wait_for_sync+0xb4>)
    777e:	2399      	movs	r3, #153	; 0x99
    7780:	005b      	lsls	r3, r3, #1
    7782:	4c20      	ldr	r4, [pc, #128]	; (7804 <_i2c_slave_wait_for_sync+0xc8>)
    7784:	47a0      	blx	r4
    7786:	e7fe      	b.n	7786 <_i2c_slave_wait_for_sync+0x4a>
	Assert(module->hw);
    7788:	4b18      	ldr	r3, [pc, #96]	; (77ec <_i2c_slave_wait_for_sync+0xb0>)
    778a:	4798      	blx	r3
    778c:	1c03      	adds	r3, r0, #0
    778e:	2b00      	cmp	r3, #0
    7790:	d012      	beq.n	77b8 <_i2c_slave_wait_for_sync+0x7c>
    7792:	687b      	ldr	r3, [r7, #4]
    7794:	681b      	ldr	r3, [r3, #0]
    7796:	2b00      	cmp	r3, #0
    7798:	d11a      	bne.n	77d0 <_i2c_slave_wait_for_sync+0x94>
    779a:	4b14      	ldr	r3, [pc, #80]	; (77ec <_i2c_slave_wait_for_sync+0xb0>)
    779c:	4798      	blx	r3
    779e:	1c01      	adds	r1, r0, #0
    77a0:	4a13      	ldr	r2, [pc, #76]	; (77f0 <_i2c_slave_wait_for_sync+0xb4>)
    77a2:	2334      	movs	r3, #52	; 0x34
    77a4:	33ff      	adds	r3, #255	; 0xff
    77a6:	4813      	ldr	r0, [pc, #76]	; (77f4 <_i2c_slave_wait_for_sync+0xb8>)
    77a8:	9000      	str	r0, [sp, #0]
    77aa:	4817      	ldr	r0, [pc, #92]	; (7808 <_i2c_slave_wait_for_sync+0xcc>)
    77ac:	9001      	str	r0, [sp, #4]
    77ae:	1c08      	adds	r0, r1, #0
    77b0:	2101      	movs	r1, #1
    77b2:	4c12      	ldr	r4, [pc, #72]	; (77fc <_i2c_slave_wait_for_sync+0xc0>)
    77b4:	47a0      	blx	r4
    77b6:	e00b      	b.n	77d0 <_i2c_slave_wait_for_sync+0x94>
    77b8:	687b      	ldr	r3, [r7, #4]
    77ba:	681b      	ldr	r3, [r3, #0]
    77bc:	2b00      	cmp	r3, #0
    77be:	d107      	bne.n	77d0 <_i2c_slave_wait_for_sync+0x94>
    77c0:	480f      	ldr	r0, [pc, #60]	; (7800 <_i2c_slave_wait_for_sync+0xc4>)
    77c2:	4911      	ldr	r1, [pc, #68]	; (7808 <_i2c_slave_wait_for_sync+0xcc>)
    77c4:	4a0a      	ldr	r2, [pc, #40]	; (77f0 <_i2c_slave_wait_for_sync+0xb4>)
    77c6:	2334      	movs	r3, #52	; 0x34
    77c8:	33ff      	adds	r3, #255	; 0xff
    77ca:	4c0e      	ldr	r4, [pc, #56]	; (7804 <_i2c_slave_wait_for_sync+0xc8>)
    77cc:	47a0      	blx	r4
    77ce:	e7fe      	b.n	77ce <_i2c_slave_wait_for_sync+0x92>

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    77d0:	687b      	ldr	r3, [r7, #4]
    77d2:	681b      	ldr	r3, [r3, #0]
    77d4:	60fb      	str	r3, [r7, #12]

	while (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_SYNCBUSY) {
    77d6:	46c0      	nop			; (mov r8, r8)
    77d8:	68fb      	ldr	r3, [r7, #12]
    77da:	691b      	ldr	r3, [r3, #16]
    77dc:	b29b      	uxth	r3, r3
    77de:	b29b      	uxth	r3, r3
    77e0:	b21b      	sxth	r3, r3
    77e2:	2b00      	cmp	r3, #0
    77e4:	dbf8      	blt.n	77d8 <_i2c_slave_wait_for_sync+0x9c>
		/* Wait for I2C module to sync */
	}
}
    77e6:	46bd      	mov	sp, r7
    77e8:	b005      	add	sp, #20
    77ea:	bd90      	pop	{r4, r7, pc}
    77ec:	00007479 	.word	0x00007479
    77f0:	000247fc 	.word	0x000247fc
    77f4:	000247a4 	.word	0x000247a4
    77f8:	000247bc 	.word	0x000247bc
    77fc:	000106e9 	.word	0x000106e9
    7800:	000247c4 	.word	0x000247c4
    7804:	0001b62d 	.word	0x0001b62d
    7808:	000247e8 	.word	0x000247e8

0000780c <i2c_slave_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initialized
 */
static inline void i2c_slave_get_config_defaults(
		struct i2c_slave_config *const config)
{
    780c:	b590      	push	{r4, r7, lr}
    780e:	b085      	sub	sp, #20
    7810:	af02      	add	r7, sp, #8
    7812:	6078      	str	r0, [r7, #4]
	/*Sanity check argument. */
	Assert(config);
    7814:	4b25      	ldr	r3, [pc, #148]	; (78ac <i2c_slave_get_config_defaults+0xa0>)
    7816:	4798      	blx	r3
    7818:	1c03      	adds	r3, r0, #0
    781a:	2b00      	cmp	r3, #0
    781c:	d011      	beq.n	7842 <i2c_slave_get_config_defaults+0x36>
    781e:	687b      	ldr	r3, [r7, #4]
    7820:	2b00      	cmp	r3, #0
    7822:	d119      	bne.n	7858 <i2c_slave_get_config_defaults+0x4c>
    7824:	4b21      	ldr	r3, [pc, #132]	; (78ac <i2c_slave_get_config_defaults+0xa0>)
    7826:	4798      	blx	r3
    7828:	1c01      	adds	r1, r0, #0
    782a:	4a21      	ldr	r2, [pc, #132]	; (78b0 <i2c_slave_get_config_defaults+0xa4>)
    782c:	23b7      	movs	r3, #183	; 0xb7
    782e:	005b      	lsls	r3, r3, #1
    7830:	4820      	ldr	r0, [pc, #128]	; (78b4 <i2c_slave_get_config_defaults+0xa8>)
    7832:	9000      	str	r0, [sp, #0]
    7834:	4820      	ldr	r0, [pc, #128]	; (78b8 <i2c_slave_get_config_defaults+0xac>)
    7836:	9001      	str	r0, [sp, #4]
    7838:	1c08      	adds	r0, r1, #0
    783a:	2101      	movs	r1, #1
    783c:	4c1f      	ldr	r4, [pc, #124]	; (78bc <i2c_slave_get_config_defaults+0xb0>)
    783e:	47a0      	blx	r4
    7840:	e00a      	b.n	7858 <i2c_slave_get_config_defaults+0x4c>
    7842:	687b      	ldr	r3, [r7, #4]
    7844:	2b00      	cmp	r3, #0
    7846:	d107      	bne.n	7858 <i2c_slave_get_config_defaults+0x4c>
    7848:	481d      	ldr	r0, [pc, #116]	; (78c0 <i2c_slave_get_config_defaults+0xb4>)
    784a:	491b      	ldr	r1, [pc, #108]	; (78b8 <i2c_slave_get_config_defaults+0xac>)
    784c:	4a18      	ldr	r2, [pc, #96]	; (78b0 <i2c_slave_get_config_defaults+0xa4>)
    784e:	23b7      	movs	r3, #183	; 0xb7
    7850:	005b      	lsls	r3, r3, #1
    7852:	4c1c      	ldr	r4, [pc, #112]	; (78c4 <i2c_slave_get_config_defaults+0xb8>)
    7854:	47a0      	blx	r4
    7856:	e7fe      	b.n	7856 <i2c_slave_get_config_defaults+0x4a>
	config->enable_scl_low_timeout = false;
    7858:	687b      	ldr	r3, [r7, #4]
    785a:	2200      	movs	r2, #0
    785c:	701a      	strb	r2, [r3, #0]
	config->sda_hold_time = I2C_SLAVE_SDA_HOLD_TIME_300NS_600NS;
    785e:	687b      	ldr	r3, [r7, #4]
    7860:	2280      	movs	r2, #128	; 0x80
    7862:	0392      	lsls	r2, r2, #14
    7864:	605a      	str	r2, [r3, #4]
	config->buffer_timeout = 65535;
    7866:	687b      	ldr	r3, [r7, #4]
    7868:	2201      	movs	r2, #1
    786a:	4252      	negs	r2, r2
    786c:	811a      	strh	r2, [r3, #8]
	config->address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
    786e:	687b      	ldr	r3, [r7, #4]
    7870:	2200      	movs	r2, #0
    7872:	815a      	strh	r2, [r3, #10]
	config->address = 0;
    7874:	687b      	ldr	r3, [r7, #4]
    7876:	2200      	movs	r2, #0
    7878:	731a      	strb	r2, [r3, #12]
	config->address_mask = 0;
    787a:	687b      	ldr	r3, [r7, #4]
    787c:	2200      	movs	r2, #0
    787e:	735a      	strb	r2, [r3, #13]
	config->enable_general_call_address = false;
    7880:	687b      	ldr	r3, [r7, #4]
    7882:	2200      	movs	r2, #0
    7884:	739a      	strb	r2, [r3, #14]
#if I2C_SLAVE_CALLBACK_MODE == true
	config->enable_nack_on_address = false;
    7886:	687b      	ldr	r3, [r7, #4]
    7888:	2200      	movs	r2, #0
    788a:	73da      	strb	r2, [r3, #15]
#endif
	config->generator_source = GCLK_GENERATOR_6;
    788c:	687b      	ldr	r3, [r7, #4]
    788e:	2206      	movs	r2, #6
    7890:	741a      	strb	r2, [r3, #16]
	config->run_in_standby = false;
    7892:	687b      	ldr	r3, [r7, #4]
    7894:	2200      	movs	r2, #0
    7896:	745a      	strb	r2, [r3, #17]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    7898:	687b      	ldr	r3, [r7, #4]
    789a:	2200      	movs	r2, #0
    789c:	615a      	str	r2, [r3, #20]
	config->pinmux_pad1 = PINMUX_DEFAULT;
    789e:	687b      	ldr	r3, [r7, #4]
    78a0:	2200      	movs	r2, #0
    78a2:	619a      	str	r2, [r3, #24]
}
    78a4:	46bd      	mov	sp, r7
    78a6:	b003      	add	sp, #12
    78a8:	bd90      	pop	{r4, r7, pc}
    78aa:	46c0      	nop			; (mov r8, r8)
    78ac:	00007479 	.word	0x00007479
    78b0:	000247fc 	.word	0x000247fc
    78b4:	000247a4 	.word	0x000247a4
    78b8:	000247f4 	.word	0x000247f4
    78bc:	000106e9 	.word	0x000106e9
    78c0:	000247c4 	.word	0x000247c4
    78c4:	0001b62d 	.word	0x0001b62d

000078c8 <i2c_slave_enable>:
 *
 * \param[in]  module Pointer to the software module struct
 */
static inline void i2c_slave_enable(
		const struct i2c_slave_module *const module)
{
    78c8:	b590      	push	{r4, r7, lr}
    78ca:	b087      	sub	sp, #28
    78cc:	af02      	add	r7, sp, #8
    78ce:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments. */
	Assert(module);
    78d0:	4b2f      	ldr	r3, [pc, #188]	; (7990 <i2c_slave_enable+0xc8>)
    78d2:	4798      	blx	r3
    78d4:	1c03      	adds	r3, r0, #0
    78d6:	2b00      	cmp	r3, #0
    78d8:	d011      	beq.n	78fe <i2c_slave_enable+0x36>
    78da:	687b      	ldr	r3, [r7, #4]
    78dc:	2b00      	cmp	r3, #0
    78de:	d119      	bne.n	7914 <i2c_slave_enable+0x4c>
    78e0:	4b2b      	ldr	r3, [pc, #172]	; (7990 <i2c_slave_enable+0xc8>)
    78e2:	4798      	blx	r3
    78e4:	1c01      	adds	r1, r0, #0
    78e6:	4a2b      	ldr	r2, [pc, #172]	; (7994 <i2c_slave_enable+0xcc>)
    78e8:	23c7      	movs	r3, #199	; 0xc7
    78ea:	005b      	lsls	r3, r3, #1
    78ec:	482a      	ldr	r0, [pc, #168]	; (7998 <i2c_slave_enable+0xd0>)
    78ee:	9000      	str	r0, [sp, #0]
    78f0:	482a      	ldr	r0, [pc, #168]	; (799c <i2c_slave_enable+0xd4>)
    78f2:	9001      	str	r0, [sp, #4]
    78f4:	1c08      	adds	r0, r1, #0
    78f6:	2101      	movs	r1, #1
    78f8:	4c29      	ldr	r4, [pc, #164]	; (79a0 <i2c_slave_enable+0xd8>)
    78fa:	47a0      	blx	r4
    78fc:	e00a      	b.n	7914 <i2c_slave_enable+0x4c>
    78fe:	687b      	ldr	r3, [r7, #4]
    7900:	2b00      	cmp	r3, #0
    7902:	d107      	bne.n	7914 <i2c_slave_enable+0x4c>
    7904:	4827      	ldr	r0, [pc, #156]	; (79a4 <i2c_slave_enable+0xdc>)
    7906:	4925      	ldr	r1, [pc, #148]	; (799c <i2c_slave_enable+0xd4>)
    7908:	4a22      	ldr	r2, [pc, #136]	; (7994 <i2c_slave_enable+0xcc>)
    790a:	23c7      	movs	r3, #199	; 0xc7
    790c:	005b      	lsls	r3, r3, #1
    790e:	4c26      	ldr	r4, [pc, #152]	; (79a8 <i2c_slave_enable+0xe0>)
    7910:	47a0      	blx	r4
    7912:	e7fe      	b.n	7912 <i2c_slave_enable+0x4a>
	Assert(module->hw);
    7914:	4b1e      	ldr	r3, [pc, #120]	; (7990 <i2c_slave_enable+0xc8>)
    7916:	4798      	blx	r3
    7918:	1c03      	adds	r3, r0, #0
    791a:	2b00      	cmp	r3, #0
    791c:	d012      	beq.n	7944 <i2c_slave_enable+0x7c>
    791e:	687b      	ldr	r3, [r7, #4]
    7920:	681b      	ldr	r3, [r3, #0]
    7922:	2b00      	cmp	r3, #0
    7924:	d11a      	bne.n	795c <i2c_slave_enable+0x94>
    7926:	4b1a      	ldr	r3, [pc, #104]	; (7990 <i2c_slave_enable+0xc8>)
    7928:	4798      	blx	r3
    792a:	1c01      	adds	r1, r0, #0
    792c:	4a19      	ldr	r2, [pc, #100]	; (7994 <i2c_slave_enable+0xcc>)
    792e:	2390      	movs	r3, #144	; 0x90
    7930:	33ff      	adds	r3, #255	; 0xff
    7932:	4819      	ldr	r0, [pc, #100]	; (7998 <i2c_slave_enable+0xd0>)
    7934:	9000      	str	r0, [sp, #0]
    7936:	481d      	ldr	r0, [pc, #116]	; (79ac <i2c_slave_enable+0xe4>)
    7938:	9001      	str	r0, [sp, #4]
    793a:	1c08      	adds	r0, r1, #0
    793c:	2101      	movs	r1, #1
    793e:	4c18      	ldr	r4, [pc, #96]	; (79a0 <i2c_slave_enable+0xd8>)
    7940:	47a0      	blx	r4
    7942:	e00b      	b.n	795c <i2c_slave_enable+0x94>
    7944:	687b      	ldr	r3, [r7, #4]
    7946:	681b      	ldr	r3, [r3, #0]
    7948:	2b00      	cmp	r3, #0
    794a:	d107      	bne.n	795c <i2c_slave_enable+0x94>
    794c:	4815      	ldr	r0, [pc, #84]	; (79a4 <i2c_slave_enable+0xdc>)
    794e:	4917      	ldr	r1, [pc, #92]	; (79ac <i2c_slave_enable+0xe4>)
    7950:	4a10      	ldr	r2, [pc, #64]	; (7994 <i2c_slave_enable+0xcc>)
    7952:	2390      	movs	r3, #144	; 0x90
    7954:	33ff      	adds	r3, #255	; 0xff
    7956:	4c14      	ldr	r4, [pc, #80]	; (79a8 <i2c_slave_enable+0xe0>)
    7958:	47a0      	blx	r4
    795a:	e7fe      	b.n	795a <i2c_slave_enable+0x92>

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    795c:	687b      	ldr	r3, [r7, #4]
    795e:	681b      	ldr	r3, [r3, #0]
    7960:	60fb      	str	r3, [r7, #12]

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Enable global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    7962:	687b      	ldr	r3, [r7, #4]
    7964:	681b      	ldr	r3, [r3, #0]
    7966:	1c18      	adds	r0, r3, #0
    7968:	4b11      	ldr	r3, [pc, #68]	; (79b0 <i2c_slave_enable+0xe8>)
    796a:	4798      	blx	r3
    796c:	1c03      	adds	r3, r0, #0
    796e:	1c18      	adds	r0, r3, #0
    7970:	4b10      	ldr	r3, [pc, #64]	; (79b4 <i2c_slave_enable+0xec>)
    7972:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_slave_wait_for_sync(module);
    7974:	687b      	ldr	r3, [r7, #4]
    7976:	1c18      	adds	r0, r3, #0
    7978:	4b0f      	ldr	r3, [pc, #60]	; (79b8 <i2c_slave_enable+0xf0>)
    797a:	4798      	blx	r3

	/* Enable module */
	i2c_hw->CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    797c:	68fb      	ldr	r3, [r7, #12]
    797e:	681b      	ldr	r3, [r3, #0]
    7980:	2202      	movs	r2, #2
    7982:	431a      	orrs	r2, r3
    7984:	68fb      	ldr	r3, [r7, #12]
    7986:	601a      	str	r2, [r3, #0]
}
    7988:	46bd      	mov	sp, r7
    798a:	b005      	add	sp, #20
    798c:	bd90      	pop	{r4, r7, pc}
    798e:	46c0      	nop			; (mov r8, r8)
    7990:	00007479 	.word	0x00007479
    7994:	000247fc 	.word	0x000247fc
    7998:	000247a4 	.word	0x000247a4
    799c:	000247bc 	.word	0x000247bc
    79a0:	000106e9 	.word	0x000106e9
    79a4:	000247c4 	.word	0x000247c4
    79a8:	0001b62d 	.word	0x0001b62d
    79ac:	000247e8 	.word	0x000247e8
    79b0:	00015281 	.word	0x00015281
    79b4:	0000748d 	.word	0x0000748d
    79b8:	0000773d 	.word	0x0000773d

000079bc <i2c_slave_enable_callback>:
 * \param[in]      callback_type  Callback type to enable
 */
static inline void i2c_slave_enable_callback(
		struct i2c_slave_module *const module,
		enum i2c_slave_callback callback_type)
{
    79bc:	b590      	push	{r4, r7, lr}
    79be:	b087      	sub	sp, #28
    79c0:	af02      	add	r7, sp, #8
    79c2:	6078      	str	r0, [r7, #4]
    79c4:	1c0a      	adds	r2, r1, #0
    79c6:	1cfb      	adds	r3, r7, #3
    79c8:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
    79ca:	4b37      	ldr	r3, [pc, #220]	; (7aa8 <i2c_slave_enable_callback+0xec>)
    79cc:	4798      	blx	r3
    79ce:	1c03      	adds	r3, r0, #0
    79d0:	2b00      	cmp	r3, #0
    79d2:	d011      	beq.n	79f8 <i2c_slave_enable_callback+0x3c>
    79d4:	687b      	ldr	r3, [r7, #4]
    79d6:	2b00      	cmp	r3, #0
    79d8:	d11b      	bne.n	7a12 <i2c_slave_enable_callback+0x56>
    79da:	4b33      	ldr	r3, [pc, #204]	; (7aa8 <i2c_slave_enable_callback+0xec>)
    79dc:	4798      	blx	r3
    79de:	1c02      	adds	r2, r0, #0
    79e0:	4b32      	ldr	r3, [pc, #200]	; (7aac <i2c_slave_enable_callback+0xf0>)
    79e2:	4933      	ldr	r1, [pc, #204]	; (7ab0 <i2c_slave_enable_callback+0xf4>)
    79e4:	9100      	str	r1, [sp, #0]
    79e6:	4933      	ldr	r1, [pc, #204]	; (7ab4 <i2c_slave_enable_callback+0xf8>)
    79e8:	9101      	str	r1, [sp, #4]
    79ea:	1c10      	adds	r0, r2, #0
    79ec:	2101      	movs	r1, #1
    79ee:	1c1a      	adds	r2, r3, #0
    79f0:	2365      	movs	r3, #101	; 0x65
    79f2:	4c31      	ldr	r4, [pc, #196]	; (7ab8 <i2c_slave_enable_callback+0xfc>)
    79f4:	47a0      	blx	r4
    79f6:	e00c      	b.n	7a12 <i2c_slave_enable_callback+0x56>
    79f8:	687b      	ldr	r3, [r7, #4]
    79fa:	2b00      	cmp	r3, #0
    79fc:	d109      	bne.n	7a12 <i2c_slave_enable_callback+0x56>
    79fe:	492f      	ldr	r1, [pc, #188]	; (7abc <i2c_slave_enable_callback+0x100>)
    7a00:	4a2c      	ldr	r2, [pc, #176]	; (7ab4 <i2c_slave_enable_callback+0xf8>)
    7a02:	4b2a      	ldr	r3, [pc, #168]	; (7aac <i2c_slave_enable_callback+0xf0>)
    7a04:	1c08      	adds	r0, r1, #0
    7a06:	1c11      	adds	r1, r2, #0
    7a08:	1c1a      	adds	r2, r3, #0
    7a0a:	2365      	movs	r3, #101	; 0x65
    7a0c:	4c2c      	ldr	r4, [pc, #176]	; (7ac0 <i2c_slave_enable_callback+0x104>)
    7a0e:	47a0      	blx	r4
    7a10:	e7fe      	b.n	7a10 <i2c_slave_enable_callback+0x54>
	Assert(module->hw);
    7a12:	4b25      	ldr	r3, [pc, #148]	; (7aa8 <i2c_slave_enable_callback+0xec>)
    7a14:	4798      	blx	r3
    7a16:	1c03      	adds	r3, r0, #0
    7a18:	2b00      	cmp	r3, #0
    7a1a:	d012      	beq.n	7a42 <i2c_slave_enable_callback+0x86>
    7a1c:	687b      	ldr	r3, [r7, #4]
    7a1e:	681b      	ldr	r3, [r3, #0]
    7a20:	2b00      	cmp	r3, #0
    7a22:	d11c      	bne.n	7a5e <i2c_slave_enable_callback+0xa2>
    7a24:	4b20      	ldr	r3, [pc, #128]	; (7aa8 <i2c_slave_enable_callback+0xec>)
    7a26:	4798      	blx	r3
    7a28:	1c02      	adds	r2, r0, #0
    7a2a:	4b20      	ldr	r3, [pc, #128]	; (7aac <i2c_slave_enable_callback+0xf0>)
    7a2c:	4920      	ldr	r1, [pc, #128]	; (7ab0 <i2c_slave_enable_callback+0xf4>)
    7a2e:	9100      	str	r1, [sp, #0]
    7a30:	4924      	ldr	r1, [pc, #144]	; (7ac4 <i2c_slave_enable_callback+0x108>)
    7a32:	9101      	str	r1, [sp, #4]
    7a34:	1c10      	adds	r0, r2, #0
    7a36:	2101      	movs	r1, #1
    7a38:	1c1a      	adds	r2, r3, #0
    7a3a:	2366      	movs	r3, #102	; 0x66
    7a3c:	4c1e      	ldr	r4, [pc, #120]	; (7ab8 <i2c_slave_enable_callback+0xfc>)
    7a3e:	47a0      	blx	r4
    7a40:	e00d      	b.n	7a5e <i2c_slave_enable_callback+0xa2>
    7a42:	687b      	ldr	r3, [r7, #4]
    7a44:	681b      	ldr	r3, [r3, #0]
    7a46:	2b00      	cmp	r3, #0
    7a48:	d109      	bne.n	7a5e <i2c_slave_enable_callback+0xa2>
    7a4a:	491c      	ldr	r1, [pc, #112]	; (7abc <i2c_slave_enable_callback+0x100>)
    7a4c:	4a1d      	ldr	r2, [pc, #116]	; (7ac4 <i2c_slave_enable_callback+0x108>)
    7a4e:	4b17      	ldr	r3, [pc, #92]	; (7aac <i2c_slave_enable_callback+0xf0>)
    7a50:	1c08      	adds	r0, r1, #0
    7a52:	1c11      	adds	r1, r2, #0
    7a54:	1c1a      	adds	r2, r3, #0
    7a56:	2366      	movs	r3, #102	; 0x66
    7a58:	4c19      	ldr	r4, [pc, #100]	; (7ac0 <i2c_slave_enable_callback+0x104>)
    7a5a:	47a0      	blx	r4
    7a5c:	e7fe      	b.n	7a5c <i2c_slave_enable_callback+0xa0>

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    7a5e:	687b      	ldr	r3, [r7, #4]
    7a60:	6a1b      	ldr	r3, [r3, #32]
    7a62:	041b      	lsls	r3, r3, #16
    7a64:	0e1b      	lsrs	r3, r3, #24
    7a66:	b2db      	uxtb	r3, r3
    7a68:	b2da      	uxtb	r2, r3
    7a6a:	1cfb      	adds	r3, r7, #3
    7a6c:	781b      	ldrb	r3, [r3, #0]
    7a6e:	2101      	movs	r1, #1
    7a70:	1c08      	adds	r0, r1, #0
    7a72:	4098      	lsls	r0, r3
    7a74:	1c03      	adds	r3, r0, #0
    7a76:	b2db      	uxtb	r3, r3
    7a78:	4313      	orrs	r3, r2
    7a7a:	b2db      	uxtb	r3, r3
    7a7c:	b2d9      	uxtb	r1, r3
    7a7e:	687a      	ldr	r2, [r7, #4]
    7a80:	2321      	movs	r3, #33	; 0x21
    7a82:	54d1      	strb	r1, [r2, r3]

	/* Enable address callback */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    7a84:	687b      	ldr	r3, [r7, #4]
    7a86:	681b      	ldr	r3, [r3, #0]
    7a88:	60fb      	str	r3, [r7, #12]
	if (callback_type == I2C_SLAVE_CALLBACK_READ_REQUEST ||
    7a8a:	1cfb      	adds	r3, r7, #3
    7a8c:	781b      	ldrb	r3, [r3, #0]
    7a8e:	2b02      	cmp	r3, #2
    7a90:	d003      	beq.n	7a9a <i2c_slave_enable_callback+0xde>
    7a92:	1cfb      	adds	r3, r7, #3
    7a94:	781b      	ldrb	r3, [r3, #0]
    7a96:	2b03      	cmp	r3, #3
    7a98:	d102      	bne.n	7aa0 <i2c_slave_enable_callback+0xe4>
			callback_type == I2C_SLAVE_CALLBACK_WRITE_REQUEST) {
		i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    7a9a:	68fb      	ldr	r3, [r7, #12]
    7a9c:	2202      	movs	r2, #2
    7a9e:	735a      	strb	r2, [r3, #13]
	}
}
    7aa0:	46bd      	mov	sp, r7
    7aa2:	b005      	add	sp, #20
    7aa4:	bd90      	pop	{r4, r7, pc}
    7aa6:	46c0      	nop			; (mov r8, r8)
    7aa8:	00007479 	.word	0x00007479
    7aac:	0002482c 	.word	0x0002482c
    7ab0:	000247a4 	.word	0x000247a4
    7ab4:	000247bc 	.word	0x000247bc
    7ab8:	000106e9 	.word	0x000106e9
    7abc:	000247c4 	.word	0x000247c4
    7ac0:	0001b62d 	.word	0x0001b62d
    7ac4:	000247e8 	.word	0x000247e8

00007ac8 <i2c_read_request_callback>:

// read request from master
// master reads, slave writes
// slave writes data on bus back to master
void i2c_read_request_callback(struct i2c_slave_module *const module)
{
    7ac8:	b590      	push	{r4, r7, lr}
    7aca:	b087      	sub	sp, #28
    7acc:	af00      	add	r7, sp, #0
    7ace:	6078      	str	r0, [r7, #4]
	/* Init i2c packet. */
	wr_packet.data_length = RX_BUFR_SIZE;
    7ad0:	4b71      	ldr	r3, [pc, #452]	; (7c98 <i2c_read_request_callback+0x1d0>)
    7ad2:	2205      	movs	r2, #5
    7ad4:	805a      	strh	r2, [r3, #2]
	wr_packet.data = regArray;
    7ad6:	4b70      	ldr	r3, [pc, #448]	; (7c98 <i2c_read_request_callback+0x1d0>)
    7ad8:	4a70      	ldr	r2, [pc, #448]	; (7c9c <i2c_read_request_callback+0x1d4>)
    7ada:	605a      	str	r2, [r3, #4]
	
	//float tmpValue;
	//Wire.write(&regArray[i2cIndex*2], 2);
	regArray[FLAGS_INDEX] = ZONE1_FLAG;
    7adc:	4b6f      	ldr	r3, [pc, #444]	; (7c9c <i2c_read_request_callback+0x1d4>)
    7ade:	2201      	movs	r2, #1
    7ae0:	70da      	strb	r2, [r3, #3]
	regArray[HIGH_BYTE_INDEX] = 0;
    7ae2:	4b6e      	ldr	r3, [pc, #440]	; (7c9c <i2c_read_request_callback+0x1d4>)
    7ae4:	2200      	movs	r2, #0
    7ae6:	705a      	strb	r2, [r3, #1]
	
	// lookup mac addr
	if (i2cIndex>=IDX_MAC_ADDR && i2cIndex<=IDX_MAC_ADDR+MAC_ADDR_SIZE-1)
    7ae8:	4b6d      	ldr	r3, [pc, #436]	; (7ca0 <i2c_read_request_callback+0x1d8>)
    7aea:	781b      	ldrb	r3, [r3, #0]
    7aec:	2b31      	cmp	r3, #49	; 0x31
    7aee:	d90b      	bls.n	7b08 <i2c_read_request_callback+0x40>
    7af0:	4b6b      	ldr	r3, [pc, #428]	; (7ca0 <i2c_read_request_callback+0x1d8>)
    7af2:	781b      	ldrb	r3, [r3, #0]
    7af4:	2b37      	cmp	r3, #55	; 0x37
    7af6:	d807      	bhi.n	7b08 <i2c_read_request_callback+0x40>
	{
		regArray[LOW_BYTE_INDEX] = MAC_address[i2cIndex-IDX_MAC_ADDR];
    7af8:	4b69      	ldr	r3, [pc, #420]	; (7ca0 <i2c_read_request_callback+0x1d8>)
    7afa:	781b      	ldrb	r3, [r3, #0]
    7afc:	3b32      	subs	r3, #50	; 0x32
    7afe:	4a69      	ldr	r2, [pc, #420]	; (7ca4 <i2c_read_request_callback+0x1dc>)
    7b00:	5cd2      	ldrb	r2, [r2, r3]
    7b02:	4b66      	ldr	r3, [pc, #408]	; (7c9c <i2c_read_request_callback+0x1d4>)
    7b04:	701a      	strb	r2, [r3, #0]
    7b06:	e0b1      	b.n	7c6c <i2c_read_request_callback+0x1a4>
	}
	// lookup serial number
	else if (i2cIndex>=IDX_SERIAL && i2cIndex<=IDX_SERIAL+SERIAL_SIZE-1)
    7b08:	4b65      	ldr	r3, [pc, #404]	; (7ca0 <i2c_read_request_callback+0x1d8>)
    7b0a:	781b      	ldrb	r3, [r3, #0]
    7b0c:	2b37      	cmp	r3, #55	; 0x37
    7b0e:	d90b      	bls.n	7b28 <i2c_read_request_callback+0x60>
    7b10:	4b63      	ldr	r3, [pc, #396]	; (7ca0 <i2c_read_request_callback+0x1d8>)
    7b12:	781b      	ldrb	r3, [r3, #0]
    7b14:	2b46      	cmp	r3, #70	; 0x46
    7b16:	d807      	bhi.n	7b28 <i2c_read_request_callback+0x60>
	{
		regArray[LOW_BYTE_INDEX] = strSerial[i2cIndex-IDX_SERIAL];
    7b18:	4b61      	ldr	r3, [pc, #388]	; (7ca0 <i2c_read_request_callback+0x1d8>)
    7b1a:	781b      	ldrb	r3, [r3, #0]
    7b1c:	3b38      	subs	r3, #56	; 0x38
    7b1e:	4a62      	ldr	r2, [pc, #392]	; (7ca8 <i2c_read_request_callback+0x1e0>)
    7b20:	5cd2      	ldrb	r2, [r2, r3]
    7b22:	4b5e      	ldr	r3, [pc, #376]	; (7c9c <i2c_read_request_callback+0x1d4>)
    7b24:	701a      	strb	r2, [r3, #0]
    7b26:	e0a1      	b.n	7c6c <i2c_read_request_callback+0x1a4>
	}
	// lookup model number
	else if (i2cIndex>=IDX_MODEL && i2cIndex<=IDX_MODEL+MODEL_SIZE-1)
    7b28:	4b5d      	ldr	r3, [pc, #372]	; (7ca0 <i2c_read_request_callback+0x1d8>)
    7b2a:	781b      	ldrb	r3, [r3, #0]
    7b2c:	2b46      	cmp	r3, #70	; 0x46
    7b2e:	d90b      	bls.n	7b48 <i2c_read_request_callback+0x80>
    7b30:	4b5b      	ldr	r3, [pc, #364]	; (7ca0 <i2c_read_request_callback+0x1d8>)
    7b32:	781b      	ldrb	r3, [r3, #0]
    7b34:	2b53      	cmp	r3, #83	; 0x53
    7b36:	d807      	bhi.n	7b48 <i2c_read_request_callback+0x80>
	{
		regArray[LOW_BYTE_INDEX] = strModel[i2cIndex-IDX_MODEL];
    7b38:	4b59      	ldr	r3, [pc, #356]	; (7ca0 <i2c_read_request_callback+0x1d8>)
    7b3a:	781b      	ldrb	r3, [r3, #0]
    7b3c:	3b47      	subs	r3, #71	; 0x47
    7b3e:	4a5b      	ldr	r2, [pc, #364]	; (7cac <i2c_read_request_callback+0x1e4>)
    7b40:	5cd2      	ldrb	r2, [r2, r3]
    7b42:	4b56      	ldr	r3, [pc, #344]	; (7c9c <i2c_read_request_callback+0x1d4>)
    7b44:	701a      	strb	r2, [r3, #0]
    7b46:	e091      	b.n	7c6c <i2c_read_request_callback+0x1a4>
	}
	// lookup ui fw ver string
	else if (i2cIndex>=IDX_UIFWVER && i2cIndex<=IDX_UIFWVER+UIFWVER_SIZE-1)
    7b48:	4b55      	ldr	r3, [pc, #340]	; (7ca0 <i2c_read_request_callback+0x1d8>)
    7b4a:	781b      	ldrb	r3, [r3, #0]
    7b4c:	2b79      	cmp	r3, #121	; 0x79
    7b4e:	d90b      	bls.n	7b68 <i2c_read_request_callback+0xa0>
    7b50:	4b53      	ldr	r3, [pc, #332]	; (7ca0 <i2c_read_request_callback+0x1d8>)
    7b52:	781b      	ldrb	r3, [r3, #0]
    7b54:	2b80      	cmp	r3, #128	; 0x80
    7b56:	d807      	bhi.n	7b68 <i2c_read_request_callback+0xa0>
	{
		regArray[LOW_BYTE_INDEX] = strUiFwVer[i2cIndex-IDX_UIFWVER];
    7b58:	4b51      	ldr	r3, [pc, #324]	; (7ca0 <i2c_read_request_callback+0x1d8>)
    7b5a:	781b      	ldrb	r3, [r3, #0]
    7b5c:	3b7a      	subs	r3, #122	; 0x7a
    7b5e:	4a54      	ldr	r2, [pc, #336]	; (7cb0 <i2c_read_request_callback+0x1e8>)
    7b60:	5cd2      	ldrb	r2, [r2, r3]
    7b62:	4b4e      	ldr	r3, [pc, #312]	; (7c9c <i2c_read_request_callback+0x1d4>)
    7b64:	701a      	strb	r2, [r3, #0]
    7b66:	e081      	b.n	7c6c <i2c_read_request_callback+0x1a4>
	}	
	// lookup other variable
	else
	{
		struct _varInfo varInfo = paramLookup(i2cIndex);
    7b68:	4b4d      	ldr	r3, [pc, #308]	; (7ca0 <i2c_read_request_callback+0x1d8>)
    7b6a:	781b      	ldrb	r3, [r3, #0]
    7b6c:	1c3a      	adds	r2, r7, #0
    7b6e:	3208      	adds	r2, #8
    7b70:	1c10      	adds	r0, r2, #0
    7b72:	1c19      	adds	r1, r3, #0
    7b74:	4b4f      	ldr	r3, [pc, #316]	; (7cb4 <i2c_read_request_callback+0x1ec>)
    7b76:	4798      	blx	r3
	
		if (varInfo.size == sizeof(uint8_t))
    7b78:	1c3b      	adds	r3, r7, #0
    7b7a:	3308      	adds	r3, #8
    7b7c:	791b      	ldrb	r3, [r3, #4]
    7b7e:	2b01      	cmp	r3, #1
    7b80:	d106      	bne.n	7b90 <i2c_read_request_callback+0xc8>
		{
			regArray[LOW_BYTE_INDEX] = *(uint8_t*)(varInfo.pAddr);
    7b82:	1c3b      	adds	r3, r7, #0
    7b84:	3308      	adds	r3, #8
    7b86:	681b      	ldr	r3, [r3, #0]
    7b88:	781a      	ldrb	r2, [r3, #0]
    7b8a:	4b44      	ldr	r3, [pc, #272]	; (7c9c <i2c_read_request_callback+0x1d4>)
    7b8c:	701a      	strb	r2, [r3, #0]
    7b8e:	e06d      	b.n	7c6c <i2c_read_request_callback+0x1a4>

		} 
		else if (varInfo.size == sizeof(uint16_t))
    7b90:	1c3b      	adds	r3, r7, #0
    7b92:	3308      	adds	r3, #8
    7b94:	791b      	ldrb	r3, [r3, #4]
    7b96:	2b02      	cmp	r3, #2
    7b98:	d115      	bne.n	7bc6 <i2c_read_request_callback+0xfe>
		{
			uint16_t tmpValue = *(uint16_t*)(varInfo.pAddr);
    7b9a:	1c3b      	adds	r3, r7, #0
    7b9c:	3308      	adds	r3, #8
    7b9e:	681a      	ldr	r2, [r3, #0]
    7ba0:	1c3b      	adds	r3, r7, #0
    7ba2:	3312      	adds	r3, #18
    7ba4:	8812      	ldrh	r2, [r2, #0]
    7ba6:	801a      	strh	r2, [r3, #0]
			regArray[LOW_BYTE_INDEX] = (uint8_t)tmpValue;
    7ba8:	1c3b      	adds	r3, r7, #0
    7baa:	3312      	adds	r3, #18
    7bac:	881b      	ldrh	r3, [r3, #0]
    7bae:	b2da      	uxtb	r2, r3
    7bb0:	4b3a      	ldr	r3, [pc, #232]	; (7c9c <i2c_read_request_callback+0x1d4>)
    7bb2:	701a      	strb	r2, [r3, #0]
			regArray[HIGH_BYTE_INDEX] = (uint8_t)(tmpValue>>8);
    7bb4:	1c3b      	adds	r3, r7, #0
    7bb6:	3312      	adds	r3, #18
    7bb8:	881b      	ldrh	r3, [r3, #0]
    7bba:	0a1b      	lsrs	r3, r3, #8
    7bbc:	b29b      	uxth	r3, r3
    7bbe:	b2da      	uxtb	r2, r3
    7bc0:	4b36      	ldr	r3, [pc, #216]	; (7c9c <i2c_read_request_callback+0x1d4>)
    7bc2:	705a      	strb	r2, [r3, #1]
    7bc4:	e052      	b.n	7c6c <i2c_read_request_callback+0x1a4>
		}
		else if (varInfo.size == sizeof(float))
    7bc6:	1c3b      	adds	r3, r7, #0
    7bc8:	3308      	adds	r3, #8
    7bca:	791b      	ldrb	r3, [r3, #4]
    7bcc:	2b04      	cmp	r3, #4
    7bce:	d147      	bne.n	7c60 <i2c_read_request_callback+0x198>
		{
			float tmpValue = *(float*)(varInfo.pAddr);
    7bd0:	1c3b      	adds	r3, r7, #0
    7bd2:	3308      	adds	r3, #8
    7bd4:	681b      	ldr	r3, [r3, #0]
    7bd6:	681b      	ldr	r3, [r3, #0]
    7bd8:	617b      	str	r3, [r7, #20]
			if (tmpValue < 0)
    7bda:	4b37      	ldr	r3, [pc, #220]	; (7cb8 <i2c_read_request_callback+0x1f0>)
    7bdc:	6978      	ldr	r0, [r7, #20]
    7bde:	2100      	movs	r1, #0
    7be0:	4798      	blx	r3
    7be2:	1c03      	adds	r3, r0, #0
    7be4:	2b00      	cmp	r3, #0
    7be6:	d00b      	beq.n	7c00 <i2c_read_request_callback+0x138>
			{
				regArray[FLAGS_INDEX] |= SIGN_NEGATIVE_FLAG;
    7be8:	4b2c      	ldr	r3, [pc, #176]	; (7c9c <i2c_read_request_callback+0x1d4>)
    7bea:	78db      	ldrb	r3, [r3, #3]
    7bec:	2210      	movs	r2, #16
    7bee:	4313      	orrs	r3, r2
    7bf0:	b2da      	uxtb	r2, r3
    7bf2:	4b2a      	ldr	r3, [pc, #168]	; (7c9c <i2c_read_request_callback+0x1d4>)
    7bf4:	70da      	strb	r2, [r3, #3]
				tmpValue = -1.0 * tmpValue; //abs(tmpValue);
    7bf6:	697b      	ldr	r3, [r7, #20]
    7bf8:	2280      	movs	r2, #128	; 0x80
    7bfa:	0612      	lsls	r2, r2, #24
    7bfc:	4053      	eors	r3, r2
    7bfe:	617b      	str	r3, [r7, #20]
			}
			regArray[LOW_BYTE_INDEX] = (uint8_t)(tmpValue);
    7c00:	4b2e      	ldr	r3, [pc, #184]	; (7cbc <i2c_read_request_callback+0x1f4>)
    7c02:	6978      	ldr	r0, [r7, #20]
    7c04:	4798      	blx	r3
    7c06:	1c03      	adds	r3, r0, #0
    7c08:	b2da      	uxtb	r2, r3
    7c0a:	4b24      	ldr	r3, [pc, #144]	; (7c9c <i2c_read_request_callback+0x1d4>)
    7c0c:	701a      	strb	r2, [r3, #0]
			regArray[DECIMAL_BYTE_INDEX] = round((float)((tmpValue - (float)((uint8_t)(tmpValue)))) * 100);		
    7c0e:	4b2b      	ldr	r3, [pc, #172]	; (7cbc <i2c_read_request_callback+0x1f4>)
    7c10:	6978      	ldr	r0, [r7, #20]
    7c12:	4798      	blx	r3
    7c14:	1c03      	adds	r3, r0, #0
    7c16:	b2da      	uxtb	r2, r3
    7c18:	4b29      	ldr	r3, [pc, #164]	; (7cc0 <i2c_read_request_callback+0x1f8>)
    7c1a:	1c10      	adds	r0, r2, #0
    7c1c:	4798      	blx	r3
    7c1e:	1c02      	adds	r2, r0, #0
    7c20:	4b28      	ldr	r3, [pc, #160]	; (7cc4 <i2c_read_request_callback+0x1fc>)
    7c22:	6978      	ldr	r0, [r7, #20]
    7c24:	1c11      	adds	r1, r2, #0
    7c26:	4798      	blx	r3
    7c28:	1c03      	adds	r3, r0, #0
    7c2a:	1c1a      	adds	r2, r3, #0
    7c2c:	4b26      	ldr	r3, [pc, #152]	; (7cc8 <i2c_read_request_callback+0x200>)
    7c2e:	1c10      	adds	r0, r2, #0
    7c30:	4926      	ldr	r1, [pc, #152]	; (7ccc <i2c_read_request_callback+0x204>)
    7c32:	4798      	blx	r3
    7c34:	1c03      	adds	r3, r0, #0
    7c36:	1c1a      	adds	r2, r3, #0
    7c38:	4b25      	ldr	r3, [pc, #148]	; (7cd0 <i2c_read_request_callback+0x208>)
    7c3a:	1c10      	adds	r0, r2, #0
    7c3c:	4798      	blx	r3
    7c3e:	1c03      	adds	r3, r0, #0
    7c40:	1c0c      	adds	r4, r1, #0
    7c42:	1c18      	adds	r0, r3, #0
    7c44:	1c21      	adds	r1, r4, #0
    7c46:	4b23      	ldr	r3, [pc, #140]	; (7cd4 <i2c_read_request_callback+0x20c>)
    7c48:	4798      	blx	r3
    7c4a:	1c03      	adds	r3, r0, #0
    7c4c:	1c0c      	adds	r4, r1, #0
    7c4e:	4a22      	ldr	r2, [pc, #136]	; (7cd8 <i2c_read_request_callback+0x210>)
    7c50:	1c18      	adds	r0, r3, #0
    7c52:	1c21      	adds	r1, r4, #0
    7c54:	4790      	blx	r2
    7c56:	1c03      	adds	r3, r0, #0
    7c58:	b2da      	uxtb	r2, r3
    7c5a:	4b10      	ldr	r3, [pc, #64]	; (7c9c <i2c_read_request_callback+0x1d4>)
    7c5c:	705a      	strb	r2, [r3, #1]
    7c5e:	e005      	b.n	7c6c <i2c_read_request_callback+0x1a4>
		}
		else
		{
			// interpret as uint8_t by default
			regArray[LOW_BYTE_INDEX] = *(uint8_t*)(varInfo.pAddr);
    7c60:	1c3b      	adds	r3, r7, #0
    7c62:	3308      	adds	r3, #8
    7c64:	681b      	ldr	r3, [r3, #0]
    7c66:	781a      	ldrb	r2, [r3, #0]
    7c68:	4b0c      	ldr	r3, [pc, #48]	; (7c9c <i2c_read_request_callback+0x1d4>)
    7c6a:	701a      	strb	r2, [r3, #0]
		}
	}
	
	regArray[PARAMETER_ID_INDEX] = i2cIndex;	// i2cIndex was set in the preceeding write, whether write was enabled or not
    7c6c:	4b0c      	ldr	r3, [pc, #48]	; (7ca0 <i2c_read_request_callback+0x1d8>)
    7c6e:	781a      	ldrb	r2, [r3, #0]
    7c70:	4b0a      	ldr	r3, [pc, #40]	; (7c9c <i2c_read_request_callback+0x1d4>)
    7c72:	709a      	strb	r2, [r3, #2]
	regArray[CRC_INDEX] = calcCRC(regArray, PROTOCOL_BUFR_SIZE - 1);
    7c74:	4b09      	ldr	r3, [pc, #36]	; (7c9c <i2c_read_request_callback+0x1d4>)
    7c76:	1c18      	adds	r0, r3, #0
    7c78:	2104      	movs	r1, #4
    7c7a:	4b18      	ldr	r3, [pc, #96]	; (7cdc <i2c_read_request_callback+0x214>)
    7c7c:	4798      	blx	r3
    7c7e:	1c03      	adds	r3, r0, #0
    7c80:	1c1a      	adds	r2, r3, #0
    7c82:	4b06      	ldr	r3, [pc, #24]	; (7c9c <i2c_read_request_callback+0x1d4>)
    7c84:	711a      	strb	r2, [r3, #4]
	/*
	dbg_info("\n[i2c slv txdat: %x %x %x %x %x]",
		regArray[0], regArray[1], regArray[2], regArray[3], regArray[4]);
	*/
	/* Write buffer to master */
	i2c_slave_write_packet_job(module, &wr_packet);
    7c86:	687a      	ldr	r2, [r7, #4]
    7c88:	4b03      	ldr	r3, [pc, #12]	; (7c98 <i2c_read_request_callback+0x1d0>)
    7c8a:	1c10      	adds	r0, r2, #0
    7c8c:	1c19      	adds	r1, r3, #0
    7c8e:	4b14      	ldr	r3, [pc, #80]	; (7ce0 <i2c_read_request_callback+0x218>)
    7c90:	4798      	blx	r3

}
    7c92:	46bd      	mov	sp, r7
    7c94:	b007      	add	sp, #28
    7c96:	bd90      	pop	{r4, r7, pc}
    7c98:	20000838 	.word	0x20000838
    7c9c:	200002d8 	.word	0x200002d8
    7ca0:	200002d6 	.word	0x200002d6
    7ca4:	20000904 	.word	0x20000904
    7ca8:	200008f4 	.word	0x200008f4
    7cac:	200008c4 	.word	0x200008c4
    7cb0:	20000058 	.word	0x20000058
    7cb4:	0000acbd 	.word	0x0000acbd
    7cb8:	0001f62d 	.word	0x0001f62d
    7cbc:	0001f6bd 	.word	0x0001f6bd
    7cc0:	0002046d 	.word	0x0002046d
    7cc4:	00020089 	.word	0x00020089
    7cc8:	0001fe31 	.word	0x0001fe31
    7ccc:	42c80000 	.word	0x42c80000
    7cd0:	00022111 	.word	0x00022111
    7cd4:	00019ac9 	.word	0x00019ac9
    7cd8:	0001f6f1 	.word	0x0001f6f1
    7cdc:	0000bacd 	.word	0x0000bacd
    7ce0:	00014719 	.word	0x00014719

00007ce4 <i2c_write_request_callback>:

// write request from master
// master writes, slave receives
// slave reads data from master off of bus
void i2c_write_request_callback(struct i2c_slave_module *const module)
{
    7ce4:	b580      	push	{r7, lr}
    7ce6:	b082      	sub	sp, #8
    7ce8:	af00      	add	r7, sp, #0
    7cea:	6078      	str	r0, [r7, #4]
	/* Init i2c packet. */
	rd_packet.data_length = RX_BUFR_SIZE;
    7cec:	4b07      	ldr	r3, [pc, #28]	; (7d0c <i2c_write_request_callback+0x28>)
    7cee:	2205      	movs	r2, #5
    7cf0:	805a      	strh	r2, [r3, #2]
	rd_packet.data = i2cRxBufr;
    7cf2:	4b06      	ldr	r3, [pc, #24]	; (7d0c <i2c_write_request_callback+0x28>)
    7cf4:	4a06      	ldr	r2, [pc, #24]	; (7d10 <i2c_write_request_callback+0x2c>)
    7cf6:	605a      	str	r2, [r3, #4]
	
	/* Read buffer from master */
	if (i2c_slave_read_packet_job(module, &rd_packet) != STATUS_OK) {
    7cf8:	687a      	ldr	r2, [r7, #4]
    7cfa:	4b04      	ldr	r3, [pc, #16]	; (7d0c <i2c_write_request_callback+0x28>)
    7cfc:	1c10      	adds	r0, r2, #0
    7cfe:	1c19      	adds	r1, r3, #0
    7d00:	4b04      	ldr	r3, [pc, #16]	; (7d14 <i2c_write_request_callback+0x30>)
    7d02:	4798      	blx	r3
	}
	
}
    7d04:	46bd      	mov	sp, r7
    7d06:	b002      	add	sp, #8
    7d08:	bd80      	pop	{r7, pc}
    7d0a:	46c0      	nop			; (mov r8, r8)
    7d0c:	20000850 	.word	0x20000850
    7d10:	200002cc 	.word	0x200002cc
    7d14:	000145c9 	.word	0x000145c9

00007d18 <i2c_buffer_full_request_callback>:

void i2c_buffer_full_request_callback(struct i2c_slave_module *const module)
{
    7d18:	b580      	push	{r7, lr}
    7d1a:	b082      	sub	sp, #8
    7d1c:	af00      	add	r7, sp, #0
    7d1e:	6078      	str	r0, [r7, #4]
	
}
    7d20:	46bd      	mov	sp, r7
    7d22:	b002      	add	sp, #8
    7d24:	bd80      	pop	{r7, pc}
    7d26:	46c0      	nop			; (mov r8, r8)

00007d28 <i2c_buffer_ready_request_callback>:

// master writes, slave has finished receiving all data
// parse data and store to memory
void i2c_buffer_ready_request_callback(struct i2c_slave_module *const module)
{
    7d28:	b590      	push	{r4, r7, lr}
    7d2a:	b087      	sub	sp, #28
    7d2c:	af00      	add	r7, sp, #0
    7d2e:	6078      	str	r0, [r7, #4]
	//float tmpValue = 0.0f;

	i2cBytesRecevied  = rd_packet.data_length;
    7d30:	4bb0      	ldr	r3, [pc, #704]	; (7ff4 <i2c_buffer_ready_request_callback+0x2cc>)
    7d32:	885b      	ldrh	r3, [r3, #2]
    7d34:	b2da      	uxtb	r2, r3
    7d36:	4bb0      	ldr	r3, [pc, #704]	; (7ff8 <i2c_buffer_ready_request_callback+0x2d0>)
    7d38:	701a      	strb	r2, [r3, #0]
	/*
	dbg_info("\n[i2c slv rxdat: %x %x %x %x %x]",
		i2cRxBufr[0], i2cRxBufr[1], i2cRxBufr[2], i2cRxBufr[3], i2cRxBufr[4]);
	*/
	if (checkCRC(i2cRxBufr, i2cBytesRecevied))
    7d3a:	4baf      	ldr	r3, [pc, #700]	; (7ff8 <i2c_buffer_ready_request_callback+0x2d0>)
    7d3c:	781b      	ldrb	r3, [r3, #0]
    7d3e:	4aaf      	ldr	r2, [pc, #700]	; (7ffc <i2c_buffer_ready_request_callback+0x2d4>)
    7d40:	1c10      	adds	r0, r2, #0
    7d42:	1c19      	adds	r1, r3, #0
    7d44:	4bae      	ldr	r3, [pc, #696]	; (8000 <i2c_buffer_ready_request_callback+0x2d8>)
    7d46:	4798      	blx	r3
    7d48:	1c03      	adds	r3, r0, #0
    7d4a:	2b00      	cmp	r3, #0
    7d4c:	d100      	bne.n	7d50 <i2c_buffer_ready_request_callback+0x28>
    7d4e:	e143      	b.n	7fd8 <i2c_buffer_ready_request_callback+0x2b0>
	{
		i2cZone = (i2cRxBufr[FLAGS_INDEX] & (ZONE1_FLAG)); // | ZONE2_FLAG));	// 1, 2, or both = 3
    7d50:	4baa      	ldr	r3, [pc, #680]	; (7ffc <i2c_buffer_ready_request_callback+0x2d4>)
    7d52:	78da      	ldrb	r2, [r3, #3]
    7d54:	2301      	movs	r3, #1
    7d56:	4013      	ands	r3, r2
    7d58:	b2da      	uxtb	r2, r3
    7d5a:	4baa      	ldr	r3, [pc, #680]	; (8004 <i2c_buffer_ready_request_callback+0x2dc>)
    7d5c:	701a      	strb	r2, [r3, #0]
		i2cIndex = i2cRxBufr[PARAMETER_ID_INDEX];  // index will be used for following read, whether write is done here or not
    7d5e:	4ba7      	ldr	r3, [pc, #668]	; (7ffc <i2c_buffer_ready_request_callback+0x2d4>)
    7d60:	789a      	ldrb	r2, [r3, #2]
    7d62:	4ba9      	ldr	r3, [pc, #676]	; (8008 <i2c_buffer_ready_request_callback+0x2e0>)
    7d64:	701a      	strb	r2, [r3, #0]
		if ((i2cRxBufr[FLAGS_INDEX] & WRITE_ENABLE_FLAG) != 0)
    7d66:	4ba5      	ldr	r3, [pc, #660]	; (7ffc <i2c_buffer_ready_request_callback+0x2d4>)
    7d68:	78db      	ldrb	r3, [r3, #3]
    7d6a:	1c1a      	adds	r2, r3, #0
    7d6c:	2308      	movs	r3, #8
    7d6e:	4013      	ands	r3, r2
    7d70:	d100      	bne.n	7d74 <i2c_buffer_ready_request_callback+0x4c>
    7d72:	e136      	b.n	7fe2 <i2c_buffer_ready_request_callback+0x2ba>
		{
			// index mac addr
			if (i2cIndex>=IDX_MAC_ADDR && i2cIndex<=IDX_MAC_ADDR+MAC_ADDR_SIZE-1)
    7d74:	4ba4      	ldr	r3, [pc, #656]	; (8008 <i2c_buffer_ready_request_callback+0x2e0>)
    7d76:	781b      	ldrb	r3, [r3, #0]
    7d78:	2b31      	cmp	r3, #49	; 0x31
    7d7a:	d950      	bls.n	7e1e <i2c_buffer_ready_request_callback+0xf6>
    7d7c:	4ba2      	ldr	r3, [pc, #648]	; (8008 <i2c_buffer_ready_request_callback+0x2e0>)
    7d7e:	781b      	ldrb	r3, [r3, #0]
    7d80:	2b37      	cmp	r3, #55	; 0x37
    7d82:	d84c      	bhi.n	7e1e <i2c_buffer_ready_request_callback+0xf6>
			{
				MAC_address[i2cIndex-IDX_MAC_ADDR] = i2cRxBufr[LOW_BYTE_INDEX];
    7d84:	4ba0      	ldr	r3, [pc, #640]	; (8008 <i2c_buffer_ready_request_callback+0x2e0>)
    7d86:	781b      	ldrb	r3, [r3, #0]
    7d88:	3b32      	subs	r3, #50	; 0x32
    7d8a:	4a9c      	ldr	r2, [pc, #624]	; (7ffc <i2c_buffer_ready_request_callback+0x2d4>)
    7d8c:	7811      	ldrb	r1, [r2, #0]
    7d8e:	4a9f      	ldr	r2, [pc, #636]	; (800c <i2c_buffer_ready_request_callback+0x2e4>)
    7d90:	54d1      	strb	r1, [r2, r3]
				eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    7d92:	4b9f      	ldr	r3, [pc, #636]	; (8010 <i2c_buffer_ready_request_callback+0x2e8>)
    7d94:	2000      	movs	r0, #0
    7d96:	1c19      	adds	r1, r3, #0
    7d98:	4b9e      	ldr	r3, [pc, #632]	; (8014 <i2c_buffer_ready_request_callback+0x2ec>)
    7d9a:	4798      	blx	r3
				eepromPageData[12] = MAC_address[0];
    7d9c:	4b9b      	ldr	r3, [pc, #620]	; (800c <i2c_buffer_ready_request_callback+0x2e4>)
    7d9e:	781a      	ldrb	r2, [r3, #0]
    7da0:	4b9b      	ldr	r3, [pc, #620]	; (8010 <i2c_buffer_ready_request_callback+0x2e8>)
    7da2:	731a      	strb	r2, [r3, #12]
				eepromPageData[13] = MAC_address[1];
    7da4:	4b99      	ldr	r3, [pc, #612]	; (800c <i2c_buffer_ready_request_callback+0x2e4>)
    7da6:	785a      	ldrb	r2, [r3, #1]
    7da8:	4b99      	ldr	r3, [pc, #612]	; (8010 <i2c_buffer_ready_request_callback+0x2e8>)
    7daa:	735a      	strb	r2, [r3, #13]
				eepromPageData[14] = MAC_address[2];
    7dac:	4b97      	ldr	r3, [pc, #604]	; (800c <i2c_buffer_ready_request_callback+0x2e4>)
    7dae:	789a      	ldrb	r2, [r3, #2]
    7db0:	4b97      	ldr	r3, [pc, #604]	; (8010 <i2c_buffer_ready_request_callback+0x2e8>)
    7db2:	739a      	strb	r2, [r3, #14]
				eepromPageData[15] = MAC_address[3];
    7db4:	4b95      	ldr	r3, [pc, #596]	; (800c <i2c_buffer_ready_request_callback+0x2e4>)
    7db6:	78da      	ldrb	r2, [r3, #3]
    7db8:	4b95      	ldr	r3, [pc, #596]	; (8010 <i2c_buffer_ready_request_callback+0x2e8>)
    7dba:	73da      	strb	r2, [r3, #15]
				eepromPageData[16] = MAC_address[4];
    7dbc:	4b93      	ldr	r3, [pc, #588]	; (800c <i2c_buffer_ready_request_callback+0x2e4>)
    7dbe:	791a      	ldrb	r2, [r3, #4]
    7dc0:	4b93      	ldr	r3, [pc, #588]	; (8010 <i2c_buffer_ready_request_callback+0x2e8>)
    7dc2:	741a      	strb	r2, [r3, #16]
				eepromPageData[17] = MAC_address[5];
    7dc4:	4b91      	ldr	r3, [pc, #580]	; (800c <i2c_buffer_ready_request_callback+0x2e4>)
    7dc6:	795a      	ldrb	r2, [r3, #5]
    7dc8:	4b91      	ldr	r3, [pc, #580]	; (8010 <i2c_buffer_ready_request_callback+0x2e8>)
    7dca:	745a      	strb	r2, [r3, #17]
				eepromStatus |= EEPROM_MACADDR_WRITTEN;
    7dcc:	4b92      	ldr	r3, [pc, #584]	; (8018 <i2c_buffer_ready_request_callback+0x2f0>)
    7dce:	681b      	ldr	r3, [r3, #0]
    7dd0:	2220      	movs	r2, #32
    7dd2:	431a      	orrs	r2, r3
    7dd4:	4b90      	ldr	r3, [pc, #576]	; (8018 <i2c_buffer_ready_request_callback+0x2f0>)
    7dd6:	601a      	str	r2, [r3, #0]
				eepromPageData[19]  = (~eepromStatus) & 0x0000ff;
    7dd8:	4b8f      	ldr	r3, [pc, #572]	; (8018 <i2c_buffer_ready_request_callback+0x2f0>)
    7dda:	681b      	ldr	r3, [r3, #0]
    7ddc:	b2db      	uxtb	r3, r3
    7dde:	43db      	mvns	r3, r3
    7de0:	b2da      	uxtb	r2, r3
    7de2:	4b8b      	ldr	r3, [pc, #556]	; (8010 <i2c_buffer_ready_request_callback+0x2e8>)
    7de4:	74da      	strb	r2, [r3, #19]
				eepromPageData[20]  = ((~eepromStatus) & 0x00ff00) >> 8;
    7de6:	4b8c      	ldr	r3, [pc, #560]	; (8018 <i2c_buffer_ready_request_callback+0x2f0>)
    7de8:	681b      	ldr	r3, [r3, #0]
    7dea:	43da      	mvns	r2, r3
    7dec:	23ff      	movs	r3, #255	; 0xff
    7dee:	021b      	lsls	r3, r3, #8
    7df0:	4013      	ands	r3, r2
    7df2:	0a1b      	lsrs	r3, r3, #8
    7df4:	b2da      	uxtb	r2, r3
    7df6:	4b86      	ldr	r3, [pc, #536]	; (8010 <i2c_buffer_ready_request_callback+0x2e8>)
    7df8:	751a      	strb	r2, [r3, #20]
				eepromPageData[21]  = ((~eepromStatus) & 0xff0000) >> 16;
    7dfa:	4b87      	ldr	r3, [pc, #540]	; (8018 <i2c_buffer_ready_request_callback+0x2f0>)
    7dfc:	681b      	ldr	r3, [r3, #0]
    7dfe:	43da      	mvns	r2, r3
    7e00:	23ff      	movs	r3, #255	; 0xff
    7e02:	041b      	lsls	r3, r3, #16
    7e04:	4013      	ands	r3, r2
    7e06:	0c1b      	lsrs	r3, r3, #16
    7e08:	b2da      	uxtb	r2, r3
    7e0a:	4b81      	ldr	r3, [pc, #516]	; (8010 <i2c_buffer_ready_request_callback+0x2e8>)
    7e0c:	755a      	strb	r2, [r3, #21]
				eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
    7e0e:	4b80      	ldr	r3, [pc, #512]	; (8010 <i2c_buffer_ready_request_callback+0x2e8>)
    7e10:	2000      	movs	r0, #0
    7e12:	1c19      	adds	r1, r3, #0
    7e14:	4b81      	ldr	r3, [pc, #516]	; (801c <i2c_buffer_ready_request_callback+0x2f4>)
    7e16:	4798      	blx	r3
				eeprom_emulator_commit_page_buffer();
    7e18:	4b81      	ldr	r3, [pc, #516]	; (8020 <i2c_buffer_ready_request_callback+0x2f8>)
    7e1a:	4798      	blx	r3
    7e1c:	e0db      	b.n	7fd6 <i2c_buffer_ready_request_callback+0x2ae>
			}
			else if (i2cIndex>=IDX_UIFWVER && i2cIndex<=IDX_UIFWVER+UIFWVER_SIZE-2)
    7e1e:	4b7a      	ldr	r3, [pc, #488]	; (8008 <i2c_buffer_ready_request_callback+0x2e0>)
    7e20:	781b      	ldrb	r3, [r3, #0]
    7e22:	2b79      	cmp	r3, #121	; 0x79
    7e24:	d958      	bls.n	7ed8 <i2c_buffer_ready_request_callback+0x1b0>
    7e26:	4b78      	ldr	r3, [pc, #480]	; (8008 <i2c_buffer_ready_request_callback+0x2e0>)
    7e28:	781b      	ldrb	r3, [r3, #0]
    7e2a:	b2db      	uxtb	r3, r3
    7e2c:	b25b      	sxtb	r3, r3
    7e2e:	2b00      	cmp	r3, #0
    7e30:	db52      	blt.n	7ed8 <i2c_buffer_ready_request_callback+0x1b0>
			{
				strUiFwVer[i2cIndex-IDX_UIFWVER] = i2cRxBufr[LOW_BYTE_INDEX];
    7e32:	4b75      	ldr	r3, [pc, #468]	; (8008 <i2c_buffer_ready_request_callback+0x2e0>)
    7e34:	781b      	ldrb	r3, [r3, #0]
    7e36:	3b7a      	subs	r3, #122	; 0x7a
    7e38:	4a70      	ldr	r2, [pc, #448]	; (7ffc <i2c_buffer_ready_request_callback+0x2d4>)
    7e3a:	7811      	ldrb	r1, [r2, #0]
    7e3c:	4a79      	ldr	r2, [pc, #484]	; (8024 <i2c_buffer_ready_request_callback+0x2fc>)
    7e3e:	54d1      	strb	r1, [r2, r3]
				eeprom_emulator_read_page(EEPROM_PAGE1, eepromPageData);
    7e40:	4b73      	ldr	r3, [pc, #460]	; (8010 <i2c_buffer_ready_request_callback+0x2e8>)
    7e42:	2001      	movs	r0, #1
    7e44:	1c19      	adds	r1, r3, #0
    7e46:	4b73      	ldr	r3, [pc, #460]	; (8014 <i2c_buffer_ready_request_callback+0x2ec>)
    7e48:	4798      	blx	r3
				eepromPageData[13] = strUiFwVer[0];
    7e4a:	4b76      	ldr	r3, [pc, #472]	; (8024 <i2c_buffer_ready_request_callback+0x2fc>)
    7e4c:	781a      	ldrb	r2, [r3, #0]
    7e4e:	4b70      	ldr	r3, [pc, #448]	; (8010 <i2c_buffer_ready_request_callback+0x2e8>)
    7e50:	735a      	strb	r2, [r3, #13]
				eepromPageData[14] = strUiFwVer[1];
    7e52:	4b74      	ldr	r3, [pc, #464]	; (8024 <i2c_buffer_ready_request_callback+0x2fc>)
    7e54:	785a      	ldrb	r2, [r3, #1]
    7e56:	4b6e      	ldr	r3, [pc, #440]	; (8010 <i2c_buffer_ready_request_callback+0x2e8>)
    7e58:	739a      	strb	r2, [r3, #14]
				eepromPageData[15] = strUiFwVer[2];
    7e5a:	4b72      	ldr	r3, [pc, #456]	; (8024 <i2c_buffer_ready_request_callback+0x2fc>)
    7e5c:	789a      	ldrb	r2, [r3, #2]
    7e5e:	4b6c      	ldr	r3, [pc, #432]	; (8010 <i2c_buffer_ready_request_callback+0x2e8>)
    7e60:	73da      	strb	r2, [r3, #15]
				eepromPageData[16] = strUiFwVer[3];
    7e62:	4b70      	ldr	r3, [pc, #448]	; (8024 <i2c_buffer_ready_request_callback+0x2fc>)
    7e64:	78da      	ldrb	r2, [r3, #3]
    7e66:	4b6a      	ldr	r3, [pc, #424]	; (8010 <i2c_buffer_ready_request_callback+0x2e8>)
    7e68:	741a      	strb	r2, [r3, #16]
				eepromPageData[17] = strUiFwVer[4];
    7e6a:	4b6e      	ldr	r3, [pc, #440]	; (8024 <i2c_buffer_ready_request_callback+0x2fc>)
    7e6c:	791a      	ldrb	r2, [r3, #4]
    7e6e:	4b68      	ldr	r3, [pc, #416]	; (8010 <i2c_buffer_ready_request_callback+0x2e8>)
    7e70:	745a      	strb	r2, [r3, #17]
				eepromPageData[18] = strUiFwVer[5];
    7e72:	4b6c      	ldr	r3, [pc, #432]	; (8024 <i2c_buffer_ready_request_callback+0x2fc>)
    7e74:	795a      	ldrb	r2, [r3, #5]
    7e76:	4b66      	ldr	r3, [pc, #408]	; (8010 <i2c_buffer_ready_request_callback+0x2e8>)
    7e78:	749a      	strb	r2, [r3, #18]
				//eepromPageData[19] = strUiFwVer[6];				
				eepromStatus |= EEPROM_UIFWVER_WRITTEN;
    7e7a:	4b67      	ldr	r3, [pc, #412]	; (8018 <i2c_buffer_ready_request_callback+0x2f0>)
    7e7c:	681b      	ldr	r3, [r3, #0]
    7e7e:	2280      	movs	r2, #128	; 0x80
    7e80:	0192      	lsls	r2, r2, #6
    7e82:	431a      	orrs	r2, r3
    7e84:	4b64      	ldr	r3, [pc, #400]	; (8018 <i2c_buffer_ready_request_callback+0x2f0>)
    7e86:	601a      	str	r2, [r3, #0]
				eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    7e88:	4b61      	ldr	r3, [pc, #388]	; (8010 <i2c_buffer_ready_request_callback+0x2e8>)
    7e8a:	2000      	movs	r0, #0
    7e8c:	1c19      	adds	r1, r3, #0
    7e8e:	4b61      	ldr	r3, [pc, #388]	; (8014 <i2c_buffer_ready_request_callback+0x2ec>)
    7e90:	4798      	blx	r3
				eepromPageData[19]  = (~eepromStatus) & 0x0000ff;
    7e92:	4b61      	ldr	r3, [pc, #388]	; (8018 <i2c_buffer_ready_request_callback+0x2f0>)
    7e94:	681b      	ldr	r3, [r3, #0]
    7e96:	b2db      	uxtb	r3, r3
    7e98:	43db      	mvns	r3, r3
    7e9a:	b2da      	uxtb	r2, r3
    7e9c:	4b5c      	ldr	r3, [pc, #368]	; (8010 <i2c_buffer_ready_request_callback+0x2e8>)
    7e9e:	74da      	strb	r2, [r3, #19]
				eepromPageData[20]  = ((~eepromStatus) & 0x00ff00) >> 8;
    7ea0:	4b5d      	ldr	r3, [pc, #372]	; (8018 <i2c_buffer_ready_request_callback+0x2f0>)
    7ea2:	681b      	ldr	r3, [r3, #0]
    7ea4:	43da      	mvns	r2, r3
    7ea6:	23ff      	movs	r3, #255	; 0xff
    7ea8:	021b      	lsls	r3, r3, #8
    7eaa:	4013      	ands	r3, r2
    7eac:	0a1b      	lsrs	r3, r3, #8
    7eae:	b2da      	uxtb	r2, r3
    7eb0:	4b57      	ldr	r3, [pc, #348]	; (8010 <i2c_buffer_ready_request_callback+0x2e8>)
    7eb2:	751a      	strb	r2, [r3, #20]
				eepromPageData[21]  = ((~eepromStatus) & 0xff0000) >> 16;
    7eb4:	4b58      	ldr	r3, [pc, #352]	; (8018 <i2c_buffer_ready_request_callback+0x2f0>)
    7eb6:	681b      	ldr	r3, [r3, #0]
    7eb8:	43da      	mvns	r2, r3
    7eba:	23ff      	movs	r3, #255	; 0xff
    7ebc:	041b      	lsls	r3, r3, #16
    7ebe:	4013      	ands	r3, r2
    7ec0:	0c1b      	lsrs	r3, r3, #16
    7ec2:	b2da      	uxtb	r2, r3
    7ec4:	4b52      	ldr	r3, [pc, #328]	; (8010 <i2c_buffer_ready_request_callback+0x2e8>)
    7ec6:	755a      	strb	r2, [r3, #21]
				eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
    7ec8:	4b51      	ldr	r3, [pc, #324]	; (8010 <i2c_buffer_ready_request_callback+0x2e8>)
    7eca:	2000      	movs	r0, #0
    7ecc:	1c19      	adds	r1, r3, #0
    7ece:	4b53      	ldr	r3, [pc, #332]	; (801c <i2c_buffer_ready_request_callback+0x2f4>)
    7ed0:	4798      	blx	r3
				eeprom_emulator_commit_page_buffer();
    7ed2:	4b53      	ldr	r3, [pc, #332]	; (8020 <i2c_buffer_ready_request_callback+0x2f8>)
    7ed4:	4798      	blx	r3
    7ed6:	e07e      	b.n	7fd6 <i2c_buffer_ready_request_callback+0x2ae>
			}			
			else if (uiSetpointControl==false && i2cIndex==IDX_SETPOINT)
    7ed8:	4b53      	ldr	r3, [pc, #332]	; (8028 <i2c_buffer_ready_request_callback+0x300>)
    7eda:	781b      	ldrb	r3, [r3, #0]
    7edc:	2201      	movs	r2, #1
    7ede:	4053      	eors	r3, r2
    7ee0:	b2db      	uxtb	r3, r3
    7ee2:	2b00      	cmp	r3, #0
    7ee4:	d004      	beq.n	7ef0 <i2c_buffer_ready_request_callback+0x1c8>
    7ee6:	4b48      	ldr	r3, [pc, #288]	; (8008 <i2c_buffer_ready_request_callback+0x2e0>)
    7ee8:	781b      	ldrb	r3, [r3, #0]
    7eea:	2b01      	cmp	r3, #1
    7eec:	d100      	bne.n	7ef0 <i2c_buffer_ready_request_callback+0x1c8>
			{
				return;
    7eee:	e07e      	b.n	7fee <i2c_buffer_ready_request_callback+0x2c6>
			}
			else
			{			
				struct _varInfo varInfo = paramLookup(i2cIndex);
    7ef0:	4b45      	ldr	r3, [pc, #276]	; (8008 <i2c_buffer_ready_request_callback+0x2e0>)
    7ef2:	781b      	ldrb	r3, [r3, #0]
    7ef4:	1c3a      	adds	r2, r7, #0
    7ef6:	3208      	adds	r2, #8
    7ef8:	1c10      	adds	r0, r2, #0
    7efa:	1c19      	adds	r1, r3, #0
    7efc:	4b4b      	ldr	r3, [pc, #300]	; (802c <i2c_buffer_ready_request_callback+0x304>)
    7efe:	4798      	blx	r3
	
				if (varInfo.size == sizeof(uint8_t))
    7f00:	1c3b      	adds	r3, r7, #0
    7f02:	3308      	adds	r3, #8
    7f04:	791b      	ldrb	r3, [r3, #4]
    7f06:	2b01      	cmp	r3, #1
    7f08:	d106      	bne.n	7f18 <i2c_buffer_ready_request_callback+0x1f0>
				{
					*(uint8_t*)(varInfo.pAddr) = i2cRxBufr[LOW_BYTE_INDEX];
    7f0a:	1c3b      	adds	r3, r7, #0
    7f0c:	3308      	adds	r3, #8
    7f0e:	681b      	ldr	r3, [r3, #0]
    7f10:	4a3a      	ldr	r2, [pc, #232]	; (7ffc <i2c_buffer_ready_request_callback+0x2d4>)
    7f12:	7812      	ldrb	r2, [r2, #0]
    7f14:	701a      	strb	r2, [r3, #0]
    7f16:	e050      	b.n	7fba <i2c_buffer_ready_request_callback+0x292>
				}
				else if (varInfo.size == sizeof(uint16_t))
    7f18:	1c3b      	adds	r3, r7, #0
    7f1a:	3308      	adds	r3, #8
    7f1c:	791b      	ldrb	r3, [r3, #4]
    7f1e:	2b02      	cmp	r3, #2
    7f20:	d117      	bne.n	7f52 <i2c_buffer_ready_request_callback+0x22a>
				{
					uint16_t tmpValue = regArray[LOW_BYTE_INDEX];
    7f22:	4b43      	ldr	r3, [pc, #268]	; (8030 <i2c_buffer_ready_request_callback+0x308>)
    7f24:	781a      	ldrb	r2, [r3, #0]
    7f26:	1c3b      	adds	r3, r7, #0
    7f28:	3312      	adds	r3, #18
    7f2a:	801a      	strh	r2, [r3, #0]
					tmpValue += ((uint16_t)regArray[HIGH_BYTE_INDEX])<<8;
    7f2c:	4b40      	ldr	r3, [pc, #256]	; (8030 <i2c_buffer_ready_request_callback+0x308>)
    7f2e:	785b      	ldrb	r3, [r3, #1]
    7f30:	021b      	lsls	r3, r3, #8
    7f32:	b299      	uxth	r1, r3
    7f34:	1c3b      	adds	r3, r7, #0
    7f36:	3312      	adds	r3, #18
    7f38:	1c3a      	adds	r2, r7, #0
    7f3a:	3212      	adds	r2, #18
    7f3c:	8812      	ldrh	r2, [r2, #0]
    7f3e:	188a      	adds	r2, r1, r2
    7f40:	801a      	strh	r2, [r3, #0]
					*(uint16_t*)(varInfo.pAddr) = tmpValue;
    7f42:	1c3b      	adds	r3, r7, #0
    7f44:	3308      	adds	r3, #8
    7f46:	681b      	ldr	r3, [r3, #0]
    7f48:	1c3a      	adds	r2, r7, #0
    7f4a:	3212      	adds	r2, #18
    7f4c:	8812      	ldrh	r2, [r2, #0]
    7f4e:	801a      	strh	r2, [r3, #0]
    7f50:	e033      	b.n	7fba <i2c_buffer_ready_request_callback+0x292>
				}
				else if (varInfo.size == sizeof(float))
    7f52:	1c3b      	adds	r3, r7, #0
    7f54:	3308      	adds	r3, #8
    7f56:	791b      	ldrb	r3, [r3, #4]
    7f58:	2b04      	cmp	r3, #4
    7f5a:	d128      	bne.n	7fae <i2c_buffer_ready_request_callback+0x286>
				{
					float tmpValue = ((float)(i2cRxBufr[LOW_BYTE_INDEX]) + (float)((float)(i2cRxBufr[DECIMAL_BYTE_INDEX])/(100)));
    7f5c:	4b27      	ldr	r3, [pc, #156]	; (7ffc <i2c_buffer_ready_request_callback+0x2d4>)
    7f5e:	781a      	ldrb	r2, [r3, #0]
    7f60:	4b34      	ldr	r3, [pc, #208]	; (8034 <i2c_buffer_ready_request_callback+0x30c>)
    7f62:	1c10      	adds	r0, r2, #0
    7f64:	4798      	blx	r3
    7f66:	1c04      	adds	r4, r0, #0
    7f68:	4b24      	ldr	r3, [pc, #144]	; (7ffc <i2c_buffer_ready_request_callback+0x2d4>)
    7f6a:	785a      	ldrb	r2, [r3, #1]
    7f6c:	4b31      	ldr	r3, [pc, #196]	; (8034 <i2c_buffer_ready_request_callback+0x30c>)
    7f6e:	1c10      	adds	r0, r2, #0
    7f70:	4798      	blx	r3
    7f72:	1c02      	adds	r2, r0, #0
    7f74:	4b30      	ldr	r3, [pc, #192]	; (8038 <i2c_buffer_ready_request_callback+0x310>)
    7f76:	1c10      	adds	r0, r2, #0
    7f78:	4930      	ldr	r1, [pc, #192]	; (803c <i2c_buffer_ready_request_callback+0x314>)
    7f7a:	4798      	blx	r3
    7f7c:	1c03      	adds	r3, r0, #0
    7f7e:	1c1a      	adds	r2, r3, #0
    7f80:	4b2f      	ldr	r3, [pc, #188]	; (8040 <i2c_buffer_ready_request_callback+0x318>)
    7f82:	1c20      	adds	r0, r4, #0
    7f84:	1c11      	adds	r1, r2, #0
    7f86:	4798      	blx	r3
    7f88:	1c03      	adds	r3, r0, #0
    7f8a:	617b      	str	r3, [r7, #20]
					if ((i2cRxBufr[FLAGS_INDEX] & SIGN_NEGATIVE_FLAG) != 0)
    7f8c:	4b1b      	ldr	r3, [pc, #108]	; (7ffc <i2c_buffer_ready_request_callback+0x2d4>)
    7f8e:	78db      	ldrb	r3, [r3, #3]
    7f90:	1c1a      	adds	r2, r3, #0
    7f92:	2310      	movs	r3, #16
    7f94:	4013      	ands	r3, r2
    7f96:	d004      	beq.n	7fa2 <i2c_buffer_ready_request_callback+0x27a>
					{
						tmpValue *= -1;
    7f98:	697b      	ldr	r3, [r7, #20]
    7f9a:	2280      	movs	r2, #128	; 0x80
    7f9c:	0612      	lsls	r2, r2, #24
    7f9e:	4053      	eors	r3, r2
    7fa0:	617b      	str	r3, [r7, #20]
					}
					*(float*)(varInfo.pAddr) = tmpValue;
    7fa2:	1c3b      	adds	r3, r7, #0
    7fa4:	3308      	adds	r3, #8
    7fa6:	681b      	ldr	r3, [r3, #0]
    7fa8:	697a      	ldr	r2, [r7, #20]
    7faa:	601a      	str	r2, [r3, #0]
    7fac:	e005      	b.n	7fba <i2c_buffer_ready_request_callback+0x292>
				}
				else
				{
					// interpret as uint8_t by default
					*(uint8_t*)(varInfo.pAddr) = i2cRxBufr[LOW_BYTE_INDEX];
    7fae:	1c3b      	adds	r3, r7, #0
    7fb0:	3308      	adds	r3, #8
    7fb2:	681b      	ldr	r3, [r3, #0]
    7fb4:	4a11      	ldr	r2, [pc, #68]	; (7ffc <i2c_buffer_ready_request_callback+0x2d4>)
    7fb6:	7812      	ldrb	r2, [r2, #0]
    7fb8:	701a      	strb	r2, [r3, #0]
				}
			
				if (varInfo.nonvolatileFlag == true)
    7fba:	1c3b      	adds	r3, r7, #0
    7fbc:	3308      	adds	r3, #8
    7fbe:	795b      	ldrb	r3, [r3, #5]
    7fc0:	2b00      	cmp	r3, #0
    7fc2:	d008      	beq.n	7fd6 <i2c_buffer_ready_request_callback+0x2ae>
				{
					writeToEepromFlag = true;
    7fc4:	4b1f      	ldr	r3, [pc, #124]	; (8044 <i2c_buffer_ready_request_callback+0x31c>)
    7fc6:	2201      	movs	r2, #1
    7fc8:	701a      	strb	r2, [r3, #0]
					eepromDataInfo = varInfo;
    7fca:	4b1f      	ldr	r3, [pc, #124]	; (8048 <i2c_buffer_ready_request_callback+0x320>)
    7fcc:	1c3a      	adds	r2, r7, #0
    7fce:	3208      	adds	r2, #8
    7fd0:	ca03      	ldmia	r2!, {r0, r1}
    7fd2:	c303      	stmia	r3!, {r0, r1}
    7fd4:	e005      	b.n	7fe2 <i2c_buffer_ready_request_callback+0x2ba>
    7fd6:	e004      	b.n	7fe2 <i2c_buffer_ready_request_callback+0x2ba>
			}
		}
	}
	else
	{
		errorCRC++;
    7fd8:	4b1c      	ldr	r3, [pc, #112]	; (804c <i2c_buffer_ready_request_callback+0x324>)
    7fda:	681b      	ldr	r3, [r3, #0]
    7fdc:	1c5a      	adds	r2, r3, #1
    7fde:	4b1b      	ldr	r3, [pc, #108]	; (804c <i2c_buffer_ready_request_callback+0x324>)
    7fe0:	601a      	str	r2, [r3, #0]
	}
	/*
	dbg_info(" [errorCRC: %i]", errorCRC);
	*/
	module->buffer_remaining = module->buffer_length;
    7fe2:	687b      	ldr	r3, [r7, #4]
    7fe4:	6a1b      	ldr	r3, [r3, #32]
    7fe6:	0c1b      	lsrs	r3, r3, #16
    7fe8:	b29a      	uxth	r2, r3
    7fea:	687b      	ldr	r3, [r7, #4]
    7fec:	849a      	strh	r2, [r3, #36]	; 0x24
	
}
    7fee:	46bd      	mov	sp, r7
    7ff0:	b007      	add	sp, #28
    7ff2:	bd90      	pop	{r4, r7, pc}
    7ff4:	20000850 	.word	0x20000850
    7ff8:	200002d4 	.word	0x200002d4
    7ffc:	200002cc 	.word	0x200002cc
    8000:	0000ba55 	.word	0x0000ba55
    8004:	200002d5 	.word	0x200002d5
    8008:	200002d6 	.word	0x200002d6
    800c:	20000904 	.word	0x20000904
    8010:	20000888 	.word	0x20000888
    8014:	00019695 	.word	0x00019695
    8018:	200002f8 	.word	0x200002f8
    801c:	00019575 	.word	0x00019575
    8020:	0001973d 	.word	0x0001973d
    8024:	20000058 	.word	0x20000058
    8028:	20000090 	.word	0x20000090
    802c:	0000acbd 	.word	0x0000acbd
    8030:	200002d8 	.word	0x200002d8
    8034:	0002046d 	.word	0x0002046d
    8038:	0001fa75 	.word	0x0001fa75
    803c:	42c80000 	.word	0x42c80000
    8040:	0001f79d 	.word	0x0001f79d
    8044:	200002f4 	.word	0x200002f4
    8048:	200008dc 	.word	0x200008dc
    804c:	200002e4 	.word	0x200002e4

00008050 <i2c_error_request_callback>:

void i2c_error_request_callback(struct i2c_slave_module *const module)
{
    8050:	b580      	push	{r7, lr}
    8052:	b082      	sub	sp, #8
    8054:	af00      	add	r7, sp, #0
    8056:	6078      	str	r0, [r7, #4]
	//put something in here to alert of I2C error
	
}
    8058:	46bd      	mov	sp, r7
    805a:	b002      	add	sp, #8
    805c:	bd80      	pop	{r7, pc}
    805e:	46c0      	nop			; (mov r8, r8)

00008060 <configure_i2c_master>:

/************************************************************************/
/* Configuration                                                        */
/************************************************************************/
void configure_i2c_master(void)
{
    8060:	b580      	push	{r7, lr}
    8062:	b086      	sub	sp, #24
    8064:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module. */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    8066:	1c3b      	adds	r3, r7, #0
    8068:	1c18      	adds	r0, r3, #0
    806a:	4b10      	ldr	r3, [pc, #64]	; (80ac <configure_i2c_master+0x4c>)
    806c:	4798      	blx	r3
	
	/* Change buffer timeout to something longer. */
	config_i2c_master.buffer_timeout = 10000;
    806e:	1c3b      	adds	r3, r7, #0
    8070:	4a0f      	ldr	r2, [pc, #60]	; (80b0 <configure_i2c_master+0x50>)
    8072:	815a      	strh	r2, [r3, #10]
	config_i2c_master.generator_source = GCLK_GENERATOR_0;
    8074:	1c3b      	adds	r3, r7, #0
    8076:	2200      	movs	r2, #0
    8078:	709a      	strb	r2, [r3, #2]
	config_i2c_master.baud_rate = I2C_MASTER_BAUD_RATE_400KHZ;
    807a:	1c3b      	adds	r3, r7, #0
    807c:	22c8      	movs	r2, #200	; 0xc8
    807e:	0052      	lsls	r2, r2, #1
    8080:	801a      	strh	r2, [r3, #0]
	config_i2c_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    8082:	1c3b      	adds	r3, r7, #0
    8084:	4a0b      	ldr	r2, [pc, #44]	; (80b4 <configure_i2c_master+0x54>)
    8086:	611a      	str	r2, [r3, #16]
	config_i2c_master.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    8088:	1c3b      	adds	r3, r7, #0
    808a:	4a0b      	ldr	r2, [pc, #44]	; (80b8 <configure_i2c_master+0x58>)
    808c:	615a      	str	r2, [r3, #20]

	/* Initialize and enable device with config. */
	i2c_master_init(&i2c_master_instance, SERCOM1, &config_i2c_master);
    808e:	490b      	ldr	r1, [pc, #44]	; (80bc <configure_i2c_master+0x5c>)
    8090:	4a0b      	ldr	r2, [pc, #44]	; (80c0 <configure_i2c_master+0x60>)
    8092:	1c3b      	adds	r3, r7, #0
    8094:	1c08      	adds	r0, r1, #0
    8096:	1c11      	adds	r1, r2, #0
    8098:	1c1a      	adds	r2, r3, #0
    809a:	4b0a      	ldr	r3, [pc, #40]	; (80c4 <configure_i2c_master+0x64>)
    809c:	4798      	blx	r3
	i2c_master_enable(&i2c_master_instance);
    809e:	4b07      	ldr	r3, [pc, #28]	; (80bc <configure_i2c_master+0x5c>)
    80a0:	1c18      	adds	r0, r3, #0
    80a2:	4b09      	ldr	r3, [pc, #36]	; (80c8 <configure_i2c_master+0x68>)
    80a4:	4798      	blx	r3
}
    80a6:	46bd      	mov	sp, r7
    80a8:	b006      	add	sp, #24
    80aa:	bd80      	pop	{r7, pc}
    80ac:	00007591 	.word	0x00007591
    80b0:	00002710 	.word	0x00002710
    80b4:	00100002 	.word	0x00100002
    80b8:	00110002 	.word	0x00110002
    80bc:	20000840 	.word	0x20000840
    80c0:	42000c00 	.word	0x42000c00
    80c4:	0001348d 	.word	0x0001348d
    80c8:	00007635 	.word	0x00007635

000080cc <configure_i2c_slave>:

void configure_i2c_slave(void)
{
    80cc:	b580      	push	{r7, lr}
    80ce:	b088      	sub	sp, #32
    80d0:	af00      	add	r7, sp, #0
	/* Initialize config structure and module instance. */
	struct i2c_slave_config config_i2c_slave;
	i2c_slave_get_config_defaults(&config_i2c_slave);
    80d2:	1d3b      	adds	r3, r7, #4
    80d4:	1c18      	adds	r0, r3, #0
    80d6:	4b0f      	ldr	r3, [pc, #60]	; (8114 <configure_i2c_slave+0x48>)
    80d8:	4798      	blx	r3
	/* Change address and address_mode. */
	config_i2c_slave.address = SLAVE_ADDRESS;
    80da:	1d3b      	adds	r3, r7, #4
    80dc:	2232      	movs	r2, #50	; 0x32
    80de:	731a      	strb	r2, [r3, #12]
	config_i2c_slave.address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
    80e0:	1d3b      	adds	r3, r7, #4
    80e2:	2200      	movs	r2, #0
    80e4:	815a      	strh	r2, [r3, #10]
	config_i2c_slave.buffer_timeout = 20000;
    80e6:	1d3b      	adds	r3, r7, #4
    80e8:	4a0b      	ldr	r2, [pc, #44]	; (8118 <configure_i2c_slave+0x4c>)
    80ea:	811a      	strh	r2, [r3, #8]
	config_i2c_slave.sda_hold_time = I2C_SLAVE_SDA_HOLD_TIME_50NS_100NS;
    80ec:	1d3b      	adds	r3, r7, #4
    80ee:	2280      	movs	r2, #128	; 0x80
    80f0:	0352      	lsls	r2, r2, #13
    80f2:	605a      	str	r2, [r3, #4]
	
	/* Initialize and enable device with config. */
	i2c_slave_init(&i2c_slave_instance, SERCOM5, &config_i2c_slave);
    80f4:	4909      	ldr	r1, [pc, #36]	; (811c <configure_i2c_slave+0x50>)
    80f6:	4a0a      	ldr	r2, [pc, #40]	; (8120 <configure_i2c_slave+0x54>)
    80f8:	1d3b      	adds	r3, r7, #4
    80fa:	1c08      	adds	r0, r1, #0
    80fc:	1c11      	adds	r1, r2, #0
    80fe:	1c1a      	adds	r2, r3, #0
    8100:	4b08      	ldr	r3, [pc, #32]	; (8124 <configure_i2c_slave+0x58>)
    8102:	4798      	blx	r3
	i2c_slave_enable(&i2c_slave_instance);
    8104:	4b05      	ldr	r3, [pc, #20]	; (811c <configure_i2c_slave+0x50>)
    8106:	1c18      	adds	r0, r3, #0
    8108:	4b07      	ldr	r3, [pc, #28]	; (8128 <configure_i2c_slave+0x5c>)
    810a:	4798      	blx	r3
}
    810c:	46bd      	mov	sp, r7
    810e:	b008      	add	sp, #32
    8110:	bd80      	pop	{r7, pc}
    8112:	46c0      	nop			; (mov r8, r8)
    8114:	0000780d 	.word	0x0000780d
    8118:	00004e20 	.word	0x00004e20
    811c:	20000858 	.word	0x20000858
    8120:	42001c00 	.word	0x42001c00
    8124:	000141e1 	.word	0x000141e1
    8128:	000078c9 	.word	0x000078c9

0000812c <configure_i2c_slave_callbacks>:

void configure_i2c_slave_callbacks(void)
{
    812c:	b580      	push	{r7, lr}
    812e:	af00      	add	r7, sp, #0
	/* Register and enable callback functions */
	i2c_slave_register_callback(&i2c_slave_instance, i2c_read_request_callback,
    8130:	4a1e      	ldr	r2, [pc, #120]	; (81ac <configure_i2c_slave_callbacks+0x80>)
    8132:	4b1f      	ldr	r3, [pc, #124]	; (81b0 <configure_i2c_slave_callbacks+0x84>)
    8134:	1c10      	adds	r0, r2, #0
    8136:	1c19      	adds	r1, r3, #0
    8138:	2202      	movs	r2, #2
    813a:	4b1e      	ldr	r3, [pc, #120]	; (81b4 <configure_i2c_slave_callbacks+0x88>)
    813c:	4798      	blx	r3
	I2C_SLAVE_CALLBACK_READ_REQUEST);
	i2c_slave_enable_callback(&i2c_slave_instance,
    813e:	4b1b      	ldr	r3, [pc, #108]	; (81ac <configure_i2c_slave_callbacks+0x80>)
    8140:	1c18      	adds	r0, r3, #0
    8142:	2102      	movs	r1, #2
    8144:	4b1c      	ldr	r3, [pc, #112]	; (81b8 <configure_i2c_slave_callbacks+0x8c>)
    8146:	4798      	blx	r3
	I2C_SLAVE_CALLBACK_READ_REQUEST);
	i2c_slave_register_callback(&i2c_slave_instance, i2c_write_request_callback,
    8148:	4a18      	ldr	r2, [pc, #96]	; (81ac <configure_i2c_slave_callbacks+0x80>)
    814a:	4b1c      	ldr	r3, [pc, #112]	; (81bc <configure_i2c_slave_callbacks+0x90>)
    814c:	1c10      	adds	r0, r2, #0
    814e:	1c19      	adds	r1, r3, #0
    8150:	2203      	movs	r2, #3
    8152:	4b18      	ldr	r3, [pc, #96]	; (81b4 <configure_i2c_slave_callbacks+0x88>)
    8154:	4798      	blx	r3
	I2C_SLAVE_CALLBACK_WRITE_REQUEST);
	i2c_slave_enable_callback(&i2c_slave_instance,
    8156:	4b15      	ldr	r3, [pc, #84]	; (81ac <configure_i2c_slave_callbacks+0x80>)
    8158:	1c18      	adds	r0, r3, #0
    815a:	2103      	movs	r1, #3
    815c:	4b16      	ldr	r3, [pc, #88]	; (81b8 <configure_i2c_slave_callbacks+0x8c>)
    815e:	4798      	blx	r3
	I2C_SLAVE_CALLBACK_WRITE_REQUEST);
	i2c_slave_register_callback(&i2c_slave_instance, i2c_buffer_ready_request_callback,
    8160:	4a12      	ldr	r2, [pc, #72]	; (81ac <configure_i2c_slave_callbacks+0x80>)
    8162:	4b17      	ldr	r3, [pc, #92]	; (81c0 <configure_i2c_slave_callbacks+0x94>)
    8164:	1c10      	adds	r0, r2, #0
    8166:	1c19      	adds	r1, r3, #0
    8168:	2200      	movs	r2, #0
    816a:	4b12      	ldr	r3, [pc, #72]	; (81b4 <configure_i2c_slave_callbacks+0x88>)
    816c:	4798      	blx	r3
	I2C_SLAVE_CALLBACK_WRITE_COMPLETE);
	i2c_slave_enable_callback(&i2c_slave_instance,
    816e:	4b0f      	ldr	r3, [pc, #60]	; (81ac <configure_i2c_slave_callbacks+0x80>)
    8170:	1c18      	adds	r0, r3, #0
    8172:	2100      	movs	r1, #0
    8174:	4b10      	ldr	r3, [pc, #64]	; (81b8 <configure_i2c_slave_callbacks+0x8c>)
    8176:	4798      	blx	r3
	I2C_SLAVE_CALLBACK_WRITE_COMPLETE);
	i2c_slave_register_callback(&i2c_slave_instance, i2c_buffer_full_request_callback,
    8178:	4a0c      	ldr	r2, [pc, #48]	; (81ac <configure_i2c_slave_callbacks+0x80>)
    817a:	4b12      	ldr	r3, [pc, #72]	; (81c4 <configure_i2c_slave_callbacks+0x98>)
    817c:	1c10      	adds	r0, r2, #0
    817e:	1c19      	adds	r1, r3, #0
    8180:	2201      	movs	r2, #1
    8182:	4b0c      	ldr	r3, [pc, #48]	; (81b4 <configure_i2c_slave_callbacks+0x88>)
    8184:	4798      	blx	r3
	I2C_SLAVE_CALLBACK_READ_COMPLETE);
	i2c_slave_enable_callback(&i2c_slave_instance,
    8186:	4b09      	ldr	r3, [pc, #36]	; (81ac <configure_i2c_slave_callbacks+0x80>)
    8188:	1c18      	adds	r0, r3, #0
    818a:	2101      	movs	r1, #1
    818c:	4b0a      	ldr	r3, [pc, #40]	; (81b8 <configure_i2c_slave_callbacks+0x8c>)
    818e:	4798      	blx	r3
	I2C_SLAVE_CALLBACK_READ_COMPLETE);
	i2c_slave_register_callback(&i2c_slave_instance, i2c_error_request_callback,
    8190:	4a06      	ldr	r2, [pc, #24]	; (81ac <configure_i2c_slave_callbacks+0x80>)
    8192:	4b0d      	ldr	r3, [pc, #52]	; (81c8 <configure_i2c_slave_callbacks+0x9c>)
    8194:	1c10      	adds	r0, r2, #0
    8196:	1c19      	adds	r1, r3, #0
    8198:	2204      	movs	r2, #4
    819a:	4b06      	ldr	r3, [pc, #24]	; (81b4 <configure_i2c_slave_callbacks+0x88>)
    819c:	4798      	blx	r3
	I2C_SLAVE_CALLBACK_ERROR);
	i2c_slave_enable_callback(&i2c_slave_instance,
    819e:	4b03      	ldr	r3, [pc, #12]	; (81ac <configure_i2c_slave_callbacks+0x80>)
    81a0:	1c18      	adds	r0, r3, #0
    81a2:	2104      	movs	r1, #4
    81a4:	4b04      	ldr	r3, [pc, #16]	; (81b8 <configure_i2c_slave_callbacks+0x8c>)
    81a6:	4798      	blx	r3
	I2C_SLAVE_CALLBACK_ERROR);
}
    81a8:	46bd      	mov	sp, r7
    81aa:	bd80      	pop	{r7, pc}
    81ac:	20000858 	.word	0x20000858
    81b0:	00007ac9 	.word	0x00007ac9
    81b4:	00014485 	.word	0x00014485
    81b8:	000079bd 	.word	0x000079bd
    81bc:	00007ce5 	.word	0x00007ce5
    81c0:	00007d29 	.word	0x00007d29
    81c4:	00007d19 	.word	0x00007d19
    81c8:	00008051 	.word	0x00008051

000081cc <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
    81cc:	b580      	push	{r7, lr}
    81ce:	af00      	add	r7, sp, #0
	return test_case_ptr;
    81d0:	4b02      	ldr	r3, [pc, #8]	; (81dc <test_get_case+0x10>)
    81d2:	681b      	ldr	r3, [r3, #0]
}
    81d4:	1c18      	adds	r0, r3, #0
    81d6:	46bd      	mov	sp, r7
    81d8:	bd80      	pop	{r7, pc}
    81da:	46c0      	nop			; (mov r8, r8)
    81dc:	2000041c 	.word	0x2000041c

000081e0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    81e0:	b590      	push	{r4, r7, lr}
    81e2:	b087      	sub	sp, #28
    81e4:	af02      	add	r7, sp, #8
    81e6:	1c02      	adds	r2, r0, #0
    81e8:	1dfb      	adds	r3, r7, #7
    81ea:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    81ec:	1c3b      	adds	r3, r7, #0
    81ee:	330f      	adds	r3, #15
    81f0:	1dfa      	adds	r2, r7, #7
    81f2:	7812      	ldrb	r2, [r2, #0]
    81f4:	09d2      	lsrs	r2, r2, #7
    81f6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    81f8:	1c3b      	adds	r3, r7, #0
    81fa:	330e      	adds	r3, #14
    81fc:	1dfa      	adds	r2, r7, #7
    81fe:	7812      	ldrb	r2, [r2, #0]
    8200:	0952      	lsrs	r2, r2, #5
    8202:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    8204:	4b1b      	ldr	r3, [pc, #108]	; (8274 <system_pinmux_get_group_from_gpio_pin+0x94>)
    8206:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    8208:	1c3b      	adds	r3, r7, #0
    820a:	330f      	adds	r3, #15
    820c:	781b      	ldrb	r3, [r3, #0]
    820e:	2b00      	cmp	r3, #0
    8210:	d10e      	bne.n	8230 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    8212:	1c3b      	adds	r3, r7, #0
    8214:	330f      	adds	r3, #15
    8216:	781b      	ldrb	r3, [r3, #0]
    8218:	009b      	lsls	r3, r3, #2
    821a:	2210      	movs	r2, #16
    821c:	19d2      	adds	r2, r2, r7
    821e:	18d3      	adds	r3, r2, r3
    8220:	3b08      	subs	r3, #8
    8222:	681a      	ldr	r2, [r3, #0]
    8224:	1c3b      	adds	r3, r7, #0
    8226:	330e      	adds	r3, #14
    8228:	781b      	ldrb	r3, [r3, #0]
    822a:	01db      	lsls	r3, r3, #7
    822c:	18d3      	adds	r3, r2, r3
    822e:	e01c      	b.n	826a <system_pinmux_get_group_from_gpio_pin+0x8a>
	} else {
		Assert(false);
    8230:	4b11      	ldr	r3, [pc, #68]	; (8278 <system_pinmux_get_group_from_gpio_pin+0x98>)
    8232:	4798      	blx	r3
    8234:	1c03      	adds	r3, r0, #0
    8236:	2b00      	cmp	r3, #0
    8238:	d00f      	beq.n	825a <system_pinmux_get_group_from_gpio_pin+0x7a>
    823a:	4b0f      	ldr	r3, [pc, #60]	; (8278 <system_pinmux_get_group_from_gpio_pin+0x98>)
    823c:	4798      	blx	r3
    823e:	1c01      	adds	r1, r0, #0
    8240:	4a0e      	ldr	r2, [pc, #56]	; (827c <system_pinmux_get_group_from_gpio_pin+0x9c>)
    8242:	2368      	movs	r3, #104	; 0x68
    8244:	33ff      	adds	r3, #255	; 0xff
    8246:	480e      	ldr	r0, [pc, #56]	; (8280 <system_pinmux_get_group_from_gpio_pin+0xa0>)
    8248:	9000      	str	r0, [sp, #0]
    824a:	480e      	ldr	r0, [pc, #56]	; (8284 <system_pinmux_get_group_from_gpio_pin+0xa4>)
    824c:	9001      	str	r0, [sp, #4]
    824e:	1c08      	adds	r0, r1, #0
    8250:	2101      	movs	r1, #1
    8252:	4c0d      	ldr	r4, [pc, #52]	; (8288 <system_pinmux_get_group_from_gpio_pin+0xa8>)
    8254:	47a0      	blx	r4
		return NULL;
    8256:	2300      	movs	r3, #0
    8258:	e007      	b.n	826a <system_pinmux_get_group_from_gpio_pin+0x8a>
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
    825a:	480c      	ldr	r0, [pc, #48]	; (828c <system_pinmux_get_group_from_gpio_pin+0xac>)
    825c:	4909      	ldr	r1, [pc, #36]	; (8284 <system_pinmux_get_group_from_gpio_pin+0xa4>)
    825e:	4a07      	ldr	r2, [pc, #28]	; (827c <system_pinmux_get_group_from_gpio_pin+0x9c>)
    8260:	2368      	movs	r3, #104	; 0x68
    8262:	33ff      	adds	r3, #255	; 0xff
    8264:	4c0a      	ldr	r4, [pc, #40]	; (8290 <system_pinmux_get_group_from_gpio_pin+0xb0>)
    8266:	47a0      	blx	r4
    8268:	e7fe      	b.n	8268 <system_pinmux_get_group_from_gpio_pin+0x88>
		return NULL;
	}
}
    826a:	1c18      	adds	r0, r3, #0
    826c:	46bd      	mov	sp, r7
    826e:	b005      	add	sp, #20
    8270:	bd90      	pop	{r4, r7, pc}
    8272:	46c0      	nop			; (mov r8, r8)
    8274:	41004400 	.word	0x41004400
    8278:	000081cd 	.word	0x000081cd
    827c:	00024868 	.word	0x00024868
    8280:	00024898 	.word	0x00024898
    8284:	000248b0 	.word	0x000248b0
    8288:	000106e9 	.word	0x000106e9
    828c:	000248b8 	.word	0x000248b8
    8290:	0001b62d 	.word	0x0001b62d

00008294 <system_interrupt_enable_global>:
 * \brief Enables global interrupts
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    8294:	b580      	push	{r7, lr}
    8296:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    8298:	4b03      	ldr	r3, [pc, #12]	; (82a8 <system_interrupt_enable_global+0x14>)
    829a:	2201      	movs	r2, #1
    829c:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    829e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    82a2:	b662      	cpsie	i
}
    82a4:	46bd      	mov	sp, r7
    82a6:	bd80      	pop	{r7, pc}
    82a8:	2000019c 	.word	0x2000019c

000082ac <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    82ac:	b580      	push	{r7, lr}
    82ae:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    82b0:	b672      	cpsid	i
    82b2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    82b6:	4b02      	ldr	r3, [pc, #8]	; (82c0 <system_interrupt_disable_global+0x14>)
    82b8:	2200      	movs	r2, #0
    82ba:	701a      	strb	r2, [r3, #0]
}
    82bc:	46bd      	mov	sp, r7
    82be:	bd80      	pop	{r7, pc}
    82c0:	2000019c 	.word	0x2000019c

000082c4 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    82c4:	b580      	push	{r7, lr}
    82c6:	b082      	sub	sp, #8
    82c8:	af00      	add	r7, sp, #0
    82ca:	1c02      	adds	r2, r0, #0
    82cc:	1dfb      	adds	r3, r7, #7
    82ce:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    82d0:	4b06      	ldr	r3, [pc, #24]	; (82ec <system_interrupt_enable+0x28>)
    82d2:	1dfa      	adds	r2, r7, #7
    82d4:	7812      	ldrb	r2, [r2, #0]
    82d6:	1c11      	adds	r1, r2, #0
    82d8:	221f      	movs	r2, #31
    82da:	400a      	ands	r2, r1
    82dc:	2101      	movs	r1, #1
    82de:	1c08      	adds	r0, r1, #0
    82e0:	4090      	lsls	r0, r2
    82e2:	1c02      	adds	r2, r0, #0
    82e4:	601a      	str	r2, [r3, #0]
}
    82e6:	46bd      	mov	sp, r7
    82e8:	b002      	add	sp, #8
    82ea:	bd80      	pop	{r7, pc}
    82ec:	e000e100 	.word	0xe000e100

000082f0 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    82f0:	b580      	push	{r7, lr}
    82f2:	b082      	sub	sp, #8
    82f4:	af00      	add	r7, sp, #0
    82f6:	1c02      	adds	r2, r0, #0
    82f8:	1dfb      	adds	r3, r7, #7
    82fa:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    82fc:	4a07      	ldr	r2, [pc, #28]	; (831c <system_interrupt_disable+0x2c>)
    82fe:	1dfb      	adds	r3, r7, #7
    8300:	781b      	ldrb	r3, [r3, #0]
    8302:	1c19      	adds	r1, r3, #0
    8304:	231f      	movs	r3, #31
    8306:	400b      	ands	r3, r1
    8308:	2101      	movs	r1, #1
    830a:	1c08      	adds	r0, r1, #0
    830c:	4098      	lsls	r0, r3
    830e:	1c03      	adds	r3, r0, #0
    8310:	1c19      	adds	r1, r3, #0
    8312:	2380      	movs	r3, #128	; 0x80
    8314:	50d1      	str	r1, [r2, r3]
}
    8316:	46bd      	mov	sp, r7
    8318:	b002      	add	sp, #8
    831a:	bd80      	pop	{r7, pc}
    831c:	e000e100 	.word	0xe000e100

00008320 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    8320:	b580      	push	{r7, lr}
    8322:	b082      	sub	sp, #8
    8324:	af00      	add	r7, sp, #0
    8326:	1c02      	adds	r2, r0, #0
    8328:	1dfb      	adds	r3, r7, #7
    832a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    832c:	1dfb      	adds	r3, r7, #7
    832e:	781b      	ldrb	r3, [r3, #0]
    8330:	1c18      	adds	r0, r3, #0
    8332:	4b03      	ldr	r3, [pc, #12]	; (8340 <port_get_group_from_gpio_pin+0x20>)
    8334:	4798      	blx	r3
    8336:	1c03      	adds	r3, r0, #0
}
    8338:	1c18      	adds	r0, r3, #0
    833a:	46bd      	mov	sp, r7
    833c:	b002      	add	sp, #8
    833e:	bd80      	pop	{r7, pc}
    8340:	000081e1 	.word	0x000081e1

00008344 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    8344:	b580      	push	{r7, lr}
    8346:	b084      	sub	sp, #16
    8348:	af00      	add	r7, sp, #0
    834a:	1c0a      	adds	r2, r1, #0
    834c:	1dfb      	adds	r3, r7, #7
    834e:	1c01      	adds	r1, r0, #0
    8350:	7019      	strb	r1, [r3, #0]
    8352:	1dbb      	adds	r3, r7, #6
    8354:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    8356:	1dfb      	adds	r3, r7, #7
    8358:	781b      	ldrb	r3, [r3, #0]
    835a:	1c18      	adds	r0, r3, #0
    835c:	4b0d      	ldr	r3, [pc, #52]	; (8394 <port_pin_set_output_level+0x50>)
    835e:	4798      	blx	r3
    8360:	1c03      	adds	r3, r0, #0
    8362:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8364:	1dfb      	adds	r3, r7, #7
    8366:	781a      	ldrb	r2, [r3, #0]
    8368:	231f      	movs	r3, #31
    836a:	4013      	ands	r3, r2
    836c:	2201      	movs	r2, #1
    836e:	1c11      	adds	r1, r2, #0
    8370:	4099      	lsls	r1, r3
    8372:	1c0b      	adds	r3, r1, #0
    8374:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    8376:	1dbb      	adds	r3, r7, #6
    8378:	781b      	ldrb	r3, [r3, #0]
    837a:	2b00      	cmp	r3, #0
    837c:	d003      	beq.n	8386 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    837e:	68fb      	ldr	r3, [r7, #12]
    8380:	68ba      	ldr	r2, [r7, #8]
    8382:	619a      	str	r2, [r3, #24]
    8384:	e002      	b.n	838c <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    8386:	68fb      	ldr	r3, [r7, #12]
    8388:	68ba      	ldr	r2, [r7, #8]
    838a:	615a      	str	r2, [r3, #20]
	}
}
    838c:	46bd      	mov	sp, r7
    838e:	b004      	add	sp, #16
    8390:	bd80      	pop	{r7, pc}
    8392:	46c0      	nop			; (mov r8, r8)
    8394:	00008321 	.word	0x00008321

00008398 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize.
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
    8398:	b580      	push	{r7, lr}
    839a:	b082      	sub	sp, #8
    839c:	af00      	add	r7, sp, #0
    839e:	6078      	str	r0, [r7, #4]
	time->second = 0;
    83a0:	687b      	ldr	r3, [r7, #4]
    83a2:	2200      	movs	r2, #0
    83a4:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
    83a6:	687b      	ldr	r3, [r7, #4]
    83a8:	2200      	movs	r2, #0
    83aa:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
    83ac:	687b      	ldr	r3, [r7, #4]
    83ae:	2200      	movs	r2, #0
    83b0:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
    83b2:	687b      	ldr	r3, [r7, #4]
    83b4:	2200      	movs	r2, #0
    83b6:	70da      	strb	r2, [r3, #3]
	time->day 	 = 1;
    83b8:	687b      	ldr	r3, [r7, #4]
    83ba:	2201      	movs	r2, #1
    83bc:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
    83be:	687b      	ldr	r3, [r7, #4]
    83c0:	2201      	movs	r2, #1
    83c2:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
    83c4:	687b      	ldr	r3, [r7, #4]
    83c6:	22fa      	movs	r2, #250	; 0xfa
    83c8:	00d2      	lsls	r2, r2, #3
    83ca:	80da      	strh	r2, [r3, #6]
}
    83cc:	46bd      	mov	sp, r7
    83ce:	b002      	add	sp, #8
    83d0:	bd80      	pop	{r7, pc}
    83d2:	46c0      	nop			; (mov r8, r8)

000083d4 <tc_is_syncing>:
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    83d4:	b590      	push	{r4, r7, lr}
    83d6:	b087      	sub	sp, #28
    83d8:	af02      	add	r7, sp, #8
    83da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
    83dc:	4b29      	ldr	r3, [pc, #164]	; (8484 <tc_is_syncing+0xb0>)
    83de:	4798      	blx	r3
    83e0:	1c03      	adds	r3, r0, #0
    83e2:	2b00      	cmp	r3, #0
    83e4:	d010      	beq.n	8408 <tc_is_syncing+0x34>
    83e6:	687b      	ldr	r3, [r7, #4]
    83e8:	2b00      	cmp	r3, #0
    83ea:	d117      	bne.n	841c <tc_is_syncing+0x48>
    83ec:	4b25      	ldr	r3, [pc, #148]	; (8484 <tc_is_syncing+0xb0>)
    83ee:	4798      	blx	r3
    83f0:	1c01      	adds	r1, r0, #0
    83f2:	4a25      	ldr	r2, [pc, #148]	; (8488 <tc_is_syncing+0xb4>)
    83f4:	4b25      	ldr	r3, [pc, #148]	; (848c <tc_is_syncing+0xb8>)
    83f6:	4826      	ldr	r0, [pc, #152]	; (8490 <tc_is_syncing+0xbc>)
    83f8:	9000      	str	r0, [sp, #0]
    83fa:	4826      	ldr	r0, [pc, #152]	; (8494 <tc_is_syncing+0xc0>)
    83fc:	9001      	str	r0, [sp, #4]
    83fe:	1c08      	adds	r0, r1, #0
    8400:	2101      	movs	r1, #1
    8402:	4c25      	ldr	r4, [pc, #148]	; (8498 <tc_is_syncing+0xc4>)
    8404:	47a0      	blx	r4
    8406:	e009      	b.n	841c <tc_is_syncing+0x48>
    8408:	687b      	ldr	r3, [r7, #4]
    840a:	2b00      	cmp	r3, #0
    840c:	d106      	bne.n	841c <tc_is_syncing+0x48>
    840e:	4823      	ldr	r0, [pc, #140]	; (849c <tc_is_syncing+0xc8>)
    8410:	4920      	ldr	r1, [pc, #128]	; (8494 <tc_is_syncing+0xc0>)
    8412:	4a1d      	ldr	r2, [pc, #116]	; (8488 <tc_is_syncing+0xb4>)
    8414:	4b1d      	ldr	r3, [pc, #116]	; (848c <tc_is_syncing+0xb8>)
    8416:	4c22      	ldr	r4, [pc, #136]	; (84a0 <tc_is_syncing+0xcc>)
    8418:	47a0      	blx	r4
    841a:	e7fe      	b.n	841a <tc_is_syncing+0x46>
	Assert(module_inst->hw);
    841c:	4b19      	ldr	r3, [pc, #100]	; (8484 <tc_is_syncing+0xb0>)
    841e:	4798      	blx	r3
    8420:	1c03      	adds	r3, r0, #0
    8422:	2b00      	cmp	r3, #0
    8424:	d011      	beq.n	844a <tc_is_syncing+0x76>
    8426:	687b      	ldr	r3, [r7, #4]
    8428:	681b      	ldr	r3, [r3, #0]
    842a:	2b00      	cmp	r3, #0
    842c:	d118      	bne.n	8460 <tc_is_syncing+0x8c>
    842e:	4b15      	ldr	r3, [pc, #84]	; (8484 <tc_is_syncing+0xb0>)
    8430:	4798      	blx	r3
    8432:	1c01      	adds	r1, r0, #0
    8434:	4a14      	ldr	r2, [pc, #80]	; (8488 <tc_is_syncing+0xb4>)
    8436:	4b1b      	ldr	r3, [pc, #108]	; (84a4 <tc_is_syncing+0xd0>)
    8438:	4815      	ldr	r0, [pc, #84]	; (8490 <tc_is_syncing+0xbc>)
    843a:	9000      	str	r0, [sp, #0]
    843c:	481a      	ldr	r0, [pc, #104]	; (84a8 <tc_is_syncing+0xd4>)
    843e:	9001      	str	r0, [sp, #4]
    8440:	1c08      	adds	r0, r1, #0
    8442:	2101      	movs	r1, #1
    8444:	4c14      	ldr	r4, [pc, #80]	; (8498 <tc_is_syncing+0xc4>)
    8446:	47a0      	blx	r4
    8448:	e00a      	b.n	8460 <tc_is_syncing+0x8c>
    844a:	687b      	ldr	r3, [r7, #4]
    844c:	681b      	ldr	r3, [r3, #0]
    844e:	2b00      	cmp	r3, #0
    8450:	d106      	bne.n	8460 <tc_is_syncing+0x8c>
    8452:	4812      	ldr	r0, [pc, #72]	; (849c <tc_is_syncing+0xc8>)
    8454:	4914      	ldr	r1, [pc, #80]	; (84a8 <tc_is_syncing+0xd4>)
    8456:	4a0c      	ldr	r2, [pc, #48]	; (8488 <tc_is_syncing+0xb4>)
    8458:	4b12      	ldr	r3, [pc, #72]	; (84a4 <tc_is_syncing+0xd0>)
    845a:	4c11      	ldr	r4, [pc, #68]	; (84a0 <tc_is_syncing+0xcc>)
    845c:	47a0      	blx	r4
    845e:	e7fe      	b.n	845e <tc_is_syncing+0x8a>

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8460:	687b      	ldr	r3, [r7, #4]
    8462:	681b      	ldr	r3, [r3, #0]
    8464:	60fb      	str	r3, [r7, #12]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    8466:	68fb      	ldr	r3, [r7, #12]
    8468:	89db      	ldrh	r3, [r3, #14]
    846a:	041b      	lsls	r3, r3, #16
    846c:	0e1b      	lsrs	r3, r3, #24
    846e:	b2db      	uxtb	r3, r3
    8470:	1c1a      	adds	r2, r3, #0
    8472:	2380      	movs	r3, #128	; 0x80
    8474:	4013      	ands	r3, r2
    8476:	1e5a      	subs	r2, r3, #1
    8478:	4193      	sbcs	r3, r2
    847a:	b2db      	uxtb	r3, r3
}
    847c:	1c18      	adds	r0, r3, #0
    847e:	46bd      	mov	sp, r7
    8480:	b005      	add	sp, #20
    8482:	bd90      	pop	{r4, r7, pc}
    8484:	000081cd 	.word	0x000081cd
    8488:	00024950 	.word	0x00024950
    848c:	0000033e 	.word	0x0000033e
    8490:	00024898 	.word	0x00024898
    8494:	00024970 	.word	0x00024970
    8498:	000106e9 	.word	0x000106e9
    849c:	000248b8 	.word	0x000248b8
    84a0:	0001b62d 	.word	0x0001b62d
    84a4:	0000033f 	.word	0x0000033f
    84a8:	0002497c 	.word	0x0002497c

000084ac <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    84ac:	b590      	push	{r4, r7, lr}
    84ae:	b087      	sub	sp, #28
    84b0:	af02      	add	r7, sp, #8
    84b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
    84b4:	4b2b      	ldr	r3, [pc, #172]	; (8564 <tc_enable+0xb8>)
    84b6:	4798      	blx	r3
    84b8:	1c03      	adds	r3, r0, #0
    84ba:	2b00      	cmp	r3, #0
    84bc:	d010      	beq.n	84e0 <tc_enable+0x34>
    84be:	687b      	ldr	r3, [r7, #4]
    84c0:	2b00      	cmp	r3, #0
    84c2:	d117      	bne.n	84f4 <tc_enable+0x48>
    84c4:	4b27      	ldr	r3, [pc, #156]	; (8564 <tc_enable+0xb8>)
    84c6:	4798      	blx	r3
    84c8:	1c01      	adds	r1, r0, #0
    84ca:	4a27      	ldr	r2, [pc, #156]	; (8568 <tc_enable+0xbc>)
    84cc:	4b27      	ldr	r3, [pc, #156]	; (856c <tc_enable+0xc0>)
    84ce:	4828      	ldr	r0, [pc, #160]	; (8570 <tc_enable+0xc4>)
    84d0:	9000      	str	r0, [sp, #0]
    84d2:	4828      	ldr	r0, [pc, #160]	; (8574 <tc_enable+0xc8>)
    84d4:	9001      	str	r0, [sp, #4]
    84d6:	1c08      	adds	r0, r1, #0
    84d8:	2101      	movs	r1, #1
    84da:	4c27      	ldr	r4, [pc, #156]	; (8578 <tc_enable+0xcc>)
    84dc:	47a0      	blx	r4
    84de:	e009      	b.n	84f4 <tc_enable+0x48>
    84e0:	687b      	ldr	r3, [r7, #4]
    84e2:	2b00      	cmp	r3, #0
    84e4:	d106      	bne.n	84f4 <tc_enable+0x48>
    84e6:	4825      	ldr	r0, [pc, #148]	; (857c <tc_enable+0xd0>)
    84e8:	4922      	ldr	r1, [pc, #136]	; (8574 <tc_enable+0xc8>)
    84ea:	4a1f      	ldr	r2, [pc, #124]	; (8568 <tc_enable+0xbc>)
    84ec:	4b1f      	ldr	r3, [pc, #124]	; (856c <tc_enable+0xc0>)
    84ee:	4c24      	ldr	r4, [pc, #144]	; (8580 <tc_enable+0xd4>)
    84f0:	47a0      	blx	r4
    84f2:	e7fe      	b.n	84f2 <tc_enable+0x46>
	Assert(module_inst->hw);
    84f4:	4b1b      	ldr	r3, [pc, #108]	; (8564 <tc_enable+0xb8>)
    84f6:	4798      	blx	r3
    84f8:	1c03      	adds	r3, r0, #0
    84fa:	2b00      	cmp	r3, #0
    84fc:	d011      	beq.n	8522 <tc_enable+0x76>
    84fe:	687b      	ldr	r3, [r7, #4]
    8500:	681b      	ldr	r3, [r3, #0]
    8502:	2b00      	cmp	r3, #0
    8504:	d118      	bne.n	8538 <tc_enable+0x8c>
    8506:	4b17      	ldr	r3, [pc, #92]	; (8564 <tc_enable+0xb8>)
    8508:	4798      	blx	r3
    850a:	1c01      	adds	r1, r0, #0
    850c:	4a16      	ldr	r2, [pc, #88]	; (8568 <tc_enable+0xbc>)
    850e:	4b1d      	ldr	r3, [pc, #116]	; (8584 <tc_enable+0xd8>)
    8510:	4817      	ldr	r0, [pc, #92]	; (8570 <tc_enable+0xc4>)
    8512:	9000      	str	r0, [sp, #0]
    8514:	481c      	ldr	r0, [pc, #112]	; (8588 <tc_enable+0xdc>)
    8516:	9001      	str	r0, [sp, #4]
    8518:	1c08      	adds	r0, r1, #0
    851a:	2101      	movs	r1, #1
    851c:	4c16      	ldr	r4, [pc, #88]	; (8578 <tc_enable+0xcc>)
    851e:	47a0      	blx	r4
    8520:	e00a      	b.n	8538 <tc_enable+0x8c>
    8522:	687b      	ldr	r3, [r7, #4]
    8524:	681b      	ldr	r3, [r3, #0]
    8526:	2b00      	cmp	r3, #0
    8528:	d106      	bne.n	8538 <tc_enable+0x8c>
    852a:	4814      	ldr	r0, [pc, #80]	; (857c <tc_enable+0xd0>)
    852c:	4916      	ldr	r1, [pc, #88]	; (8588 <tc_enable+0xdc>)
    852e:	4a0e      	ldr	r2, [pc, #56]	; (8568 <tc_enable+0xbc>)
    8530:	4b14      	ldr	r3, [pc, #80]	; (8584 <tc_enable+0xd8>)
    8532:	4c13      	ldr	r4, [pc, #76]	; (8580 <tc_enable+0xd4>)
    8534:	47a0      	blx	r4
    8536:	e7fe      	b.n	8536 <tc_enable+0x8a>

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8538:	687b      	ldr	r3, [r7, #4]
    853a:	681b      	ldr	r3, [r3, #0]
    853c:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    853e:	46c0      	nop			; (mov r8, r8)
    8540:	687b      	ldr	r3, [r7, #4]
    8542:	1c18      	adds	r0, r3, #0
    8544:	4b11      	ldr	r3, [pc, #68]	; (858c <tc_enable+0xe0>)
    8546:	4798      	blx	r3
    8548:	1c03      	adds	r3, r0, #0
    854a:	2b00      	cmp	r3, #0
    854c:	d1f8      	bne.n	8540 <tc_enable+0x94>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    854e:	68fb      	ldr	r3, [r7, #12]
    8550:	881b      	ldrh	r3, [r3, #0]
    8552:	b29b      	uxth	r3, r3
    8554:	2202      	movs	r2, #2
    8556:	4313      	orrs	r3, r2
    8558:	b29a      	uxth	r2, r3
    855a:	68fb      	ldr	r3, [r7, #12]
    855c:	801a      	strh	r2, [r3, #0]
}
    855e:	46bd      	mov	sp, r7
    8560:	b005      	add	sp, #20
    8562:	bd90      	pop	{r4, r7, pc}
    8564:	000081cd 	.word	0x000081cd
    8568:	00024950 	.word	0x00024950
    856c:	0000040e 	.word	0x0000040e
    8570:	00024898 	.word	0x00024898
    8574:	00024970 	.word	0x00024970
    8578:	000106e9 	.word	0x000106e9
    857c:	000248b8 	.word	0x000248b8
    8580:	0001b62d 	.word	0x0001b62d
    8584:	0000040f 	.word	0x0000040f
    8588:	0002497c 	.word	0x0002497c
    858c:	000083d5 	.word	0x000083d5

00008590 <_tc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    8590:	b580      	push	{r7, lr}
    8592:	b082      	sub	sp, #8
    8594:	af00      	add	r7, sp, #0
    8596:	6078      	str	r0, [r7, #4]
	static uint8_t tc_interrupt_vectors[TC_INST_NUM] =
		{
			MREPEAT(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, ~)
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    8598:	4a04      	ldr	r2, [pc, #16]	; (85ac <_tc_interrupt_get_interrupt_vector+0x1c>)
    859a:	687b      	ldr	r3, [r7, #4]
    859c:	18d3      	adds	r3, r2, r3
    859e:	781b      	ldrb	r3, [r3, #0]
    85a0:	b2db      	uxtb	r3, r3
    85a2:	b25b      	sxtb	r3, r3
}
    85a4:	1c18      	adds	r0, r3, #0
    85a6:	46bd      	mov	sp, r7
    85a8:	b002      	add	sp, #8
    85aa:	bd80      	pop	{r7, pc}
    85ac:	20000050 	.word	0x20000050

000085b0 <tc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type)
{
    85b0:	b590      	push	{r4, r7, lr}
    85b2:	b085      	sub	sp, #20
    85b4:	af02      	add	r7, sp, #8
    85b6:	6078      	str	r0, [r7, #4]
    85b8:	1c0a      	adds	r2, r1, #0
    85ba:	1cfb      	adds	r3, r7, #3
    85bc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
    85be:	4b36      	ldr	r3, [pc, #216]	; (8698 <tc_enable_callback+0xe8>)
    85c0:	4798      	blx	r3
    85c2:	1c03      	adds	r3, r0, #0
    85c4:	2b00      	cmp	r3, #0
    85c6:	d011      	beq.n	85ec <tc_enable_callback+0x3c>
    85c8:	687b      	ldr	r3, [r7, #4]
    85ca:	2b00      	cmp	r3, #0
    85cc:	d11b      	bne.n	8606 <tc_enable_callback+0x56>
    85ce:	4b32      	ldr	r3, [pc, #200]	; (8698 <tc_enable_callback+0xe8>)
    85d0:	4798      	blx	r3
    85d2:	1c02      	adds	r2, r0, #0
    85d4:	4b31      	ldr	r3, [pc, #196]	; (869c <tc_enable_callback+0xec>)
    85d6:	4932      	ldr	r1, [pc, #200]	; (86a0 <tc_enable_callback+0xf0>)
    85d8:	9100      	str	r1, [sp, #0]
    85da:	4932      	ldr	r1, [pc, #200]	; (86a4 <tc_enable_callback+0xf4>)
    85dc:	9101      	str	r1, [sp, #4]
    85de:	1c10      	adds	r0, r2, #0
    85e0:	2101      	movs	r1, #1
    85e2:	1c1a      	adds	r2, r3, #0
    85e4:	2368      	movs	r3, #104	; 0x68
    85e6:	4c30      	ldr	r4, [pc, #192]	; (86a8 <tc_enable_callback+0xf8>)
    85e8:	47a0      	blx	r4
    85ea:	e00c      	b.n	8606 <tc_enable_callback+0x56>
    85ec:	687b      	ldr	r3, [r7, #4]
    85ee:	2b00      	cmp	r3, #0
    85f0:	d109      	bne.n	8606 <tc_enable_callback+0x56>
    85f2:	492e      	ldr	r1, [pc, #184]	; (86ac <tc_enable_callback+0xfc>)
    85f4:	4a2b      	ldr	r2, [pc, #172]	; (86a4 <tc_enable_callback+0xf4>)
    85f6:	4b29      	ldr	r3, [pc, #164]	; (869c <tc_enable_callback+0xec>)
    85f8:	1c08      	adds	r0, r1, #0
    85fa:	1c11      	adds	r1, r2, #0
    85fc:	1c1a      	adds	r2, r3, #0
    85fe:	2368      	movs	r3, #104	; 0x68
    8600:	4c2b      	ldr	r4, [pc, #172]	; (86b0 <tc_enable_callback+0x100>)
    8602:	47a0      	blx	r4
    8604:	e7fe      	b.n	8604 <tc_enable_callback+0x54>


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    8606:	687b      	ldr	r3, [r7, #4]
    8608:	681b      	ldr	r3, [r3, #0]
    860a:	1c18      	adds	r0, r3, #0
    860c:	4b29      	ldr	r3, [pc, #164]	; (86b4 <tc_enable_callback+0x104>)
    860e:	4798      	blx	r3
    8610:	1c03      	adds	r3, r0, #0
    8612:	1c18      	adds	r0, r3, #0
    8614:	4b28      	ldr	r3, [pc, #160]	; (86b8 <tc_enable_callback+0x108>)
    8616:	4798      	blx	r3
    8618:	1c03      	adds	r3, r0, #0
    861a:	1c18      	adds	r0, r3, #0
    861c:	4b27      	ldr	r3, [pc, #156]	; (86bc <tc_enable_callback+0x10c>)
    861e:	4798      	blx	r3

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    8620:	1cfb      	adds	r3, r7, #3
    8622:	781b      	ldrb	r3, [r3, #0]
    8624:	2b02      	cmp	r3, #2
    8626:	d10b      	bne.n	8640 <tc_enable_callback+0x90>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    8628:	687b      	ldr	r3, [r7, #4]
    862a:	7e5b      	ldrb	r3, [r3, #25]
    862c:	2210      	movs	r2, #16
    862e:	4313      	orrs	r3, r2
    8630:	b2da      	uxtb	r2, r3
    8632:	687b      	ldr	r3, [r7, #4]
    8634:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    8636:	687b      	ldr	r3, [r7, #4]
    8638:	681b      	ldr	r3, [r3, #0]
    863a:	2210      	movs	r2, #16
    863c:	735a      	strb	r2, [r3, #13]
    863e:	e028      	b.n	8692 <tc_enable_callback+0xe2>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    8640:	1cfb      	adds	r3, r7, #3
    8642:	781b      	ldrb	r3, [r3, #0]
    8644:	2b03      	cmp	r3, #3
    8646:	d10b      	bne.n	8660 <tc_enable_callback+0xb0>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
    8648:	687b      	ldr	r3, [r7, #4]
    864a:	7e5b      	ldrb	r3, [r3, #25]
    864c:	2220      	movs	r2, #32
    864e:	4313      	orrs	r3, r2
    8650:	b2da      	uxtb	r2, r3
    8652:	687b      	ldr	r3, [r7, #4]
    8654:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
    8656:	687b      	ldr	r3, [r7, #4]
    8658:	681b      	ldr	r3, [r3, #0]
    865a:	2220      	movs	r2, #32
    865c:	735a      	strb	r2, [r3, #13]
    865e:	e018      	b.n	8692 <tc_enable_callback+0xe2>
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    8660:	687b      	ldr	r3, [r7, #4]
    8662:	7e5b      	ldrb	r3, [r3, #25]
    8664:	b2da      	uxtb	r2, r3
    8666:	1cfb      	adds	r3, r7, #3
    8668:	781b      	ldrb	r3, [r3, #0]
    866a:	2101      	movs	r1, #1
    866c:	1c08      	adds	r0, r1, #0
    866e:	4098      	lsls	r0, r3
    8670:	1c03      	adds	r3, r0, #0
    8672:	b2db      	uxtb	r3, r3
    8674:	4313      	orrs	r3, r2
    8676:	b2db      	uxtb	r3, r3
    8678:	b2da      	uxtb	r2, r3
    867a:	687b      	ldr	r3, [r7, #4]
    867c:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    867e:	687b      	ldr	r3, [r7, #4]
    8680:	681b      	ldr	r3, [r3, #0]
    8682:	1cfa      	adds	r2, r7, #3
    8684:	7812      	ldrb	r2, [r2, #0]
    8686:	2101      	movs	r1, #1
    8688:	1c08      	adds	r0, r1, #0
    868a:	4090      	lsls	r0, r2
    868c:	1c02      	adds	r2, r0, #0
    868e:	b2d2      	uxtb	r2, r2
    8690:	735a      	strb	r2, [r3, #13]
	}
}
    8692:	46bd      	mov	sp, r7
    8694:	b003      	add	sp, #12
    8696:	bd90      	pop	{r4, r7, pc}
    8698:	000081cd 	.word	0x000081cd
    869c:	0002498c 	.word	0x0002498c
    86a0:	00024898 	.word	0x00024898
    86a4:	0002490c 	.word	0x0002490c
    86a8:	000106e9 	.word	0x000106e9
    86ac:	000248b8 	.word	0x000248b8
    86b0:	0001b62d 	.word	0x0001b62d
    86b4:	000180dd 	.word	0x000180dd
    86b8:	00008591 	.word	0x00008591
    86bc:	000082c5 	.word	0x000082c5

000086c0 <port_pin_set_output_level_EX>:
	float (*fControl[32])(float, bool, int);
	
	static inline bool port_pin_set_output_level_EX(
	const uint8_t gpio_pin,
	const int nLevel, const bool ManualOverride)
	{
    86c0:	b580      	push	{r7, lr}
    86c2:	b084      	sub	sp, #16
    86c4:	af00      	add	r7, sp, #0
    86c6:	6039      	str	r1, [r7, #0]
    86c8:	1dfb      	adds	r3, r7, #7
    86ca:	1c01      	adds	r1, r0, #0
    86cc:	7019      	strb	r1, [r3, #0]
    86ce:	1dbb      	adds	r3, r7, #6
    86d0:	701a      	strb	r2, [r3, #0]
			  break;
		  }
*/			
		}
	
		if (!ManualOverride)
    86d2:	1dbb      	adds	r3, r7, #6
    86d4:	781b      	ldrb	r3, [r3, #0]
    86d6:	2201      	movs	r2, #1
    86d8:	4053      	eors	r3, r2
    86da:	b2db      	uxtb	r3, r3
    86dc:	2b00      	cmp	r3, #0
    86de:	d00e      	beq.n	86fe <port_pin_set_output_level_EX+0x3e>
		{
		  bool bLevel = (nLevel != 0);
    86e0:	1c3b      	adds	r3, r7, #0
    86e2:	330f      	adds	r3, #15
    86e4:	683a      	ldr	r2, [r7, #0]
    86e6:	1e51      	subs	r1, r2, #1
    86e8:	418a      	sbcs	r2, r1
    86ea:	701a      	strb	r2, [r3, #0]
		  port_pin_set_output_level(gpio_pin, bLevel);
    86ec:	1dfb      	adds	r3, r7, #7
    86ee:	781a      	ldrb	r2, [r3, #0]
    86f0:	1c3b      	adds	r3, r7, #0
    86f2:	330f      	adds	r3, #15
    86f4:	781b      	ldrb	r3, [r3, #0]
    86f6:	1c10      	adds	r0, r2, #0
    86f8:	1c19      	adds	r1, r3, #0
    86fa:	4b03      	ldr	r3, [pc, #12]	; (8708 <port_pin_set_output_level_EX+0x48>)
    86fc:	4798      	blx	r3
		}
		
		return true;
    86fe:	2301      	movs	r3, #1
	}
    8700:	1c18      	adds	r0, r3, #0
    8702:	46bd      	mov	sp, r7
    8704:	b004      	add	sp, #16
    8706:	bd80      	pop	{r7, pc}
    8708:	00008345 	.word	0x00008345

0000870c <initMain>:

/************************************************************************/
/* User Functions                                                       */
/************************************************************************/
void initMain()
{
    870c:	b590      	push	{r4, r7, lr}
    870e:	b083      	sub	sp, #12
    8710:	af00      	add	r7, sp, #0
	system_interrupt_disable_global();
    8712:	4bd0      	ldr	r3, [pc, #832]	; (8a54 <initMain+0x348>)
    8714:	4798      	blx	r3
	set_fuses();
    8716:	4bd0      	ldr	r3, [pc, #832]	; (8a58 <initMain+0x34c>)
    8718:	4798      	blx	r3
	system_init();
    871a:	4bd0      	ldr	r3, [pc, #832]	; (8a5c <initMain+0x350>)
    871c:	4798      	blx	r3
	configure_port_pins();
    871e:	4bd0      	ldr	r3, [pc, #832]	; (8a60 <initMain+0x354>)
    8720:	4798      	blx	r3
	cdc_uart_init();
    8722:	4bd0      	ldr	r3, [pc, #832]	; (8a64 <initMain+0x358>)
    8724:	4798      	blx	r3
	configure_usart_callbacks();
    8726:	4bd0      	ldr	r3, [pc, #832]	; (8a68 <initMain+0x35c>)
    8728:	4798      	blx	r3
	
	rtc_calendar_get_time_defaults(&time);
    872a:	4bd0      	ldr	r3, [pc, #832]	; (8a6c <initMain+0x360>)
    872c:	1c18      	adds	r0, r3, #0
    872e:	4bd0      	ldr	r3, [pc, #832]	; (8a70 <initMain+0x364>)
    8730:	4798      	blx	r3
	time.year = 2016;
    8732:	4bce      	ldr	r3, [pc, #824]	; (8a6c <initMain+0x360>)
    8734:	22fc      	movs	r2, #252	; 0xfc
    8736:	00d2      	lsls	r2, r2, #3
    8738:	80da      	strh	r2, [r3, #6]
	time.month = 1;
    873a:	4bcc      	ldr	r3, [pc, #816]	; (8a6c <initMain+0x360>)
    873c:	2201      	movs	r2, #1
    873e:	715a      	strb	r2, [r3, #5]
	time.day = 1;
    8740:	4bca      	ldr	r3, [pc, #808]	; (8a6c <initMain+0x360>)
    8742:	2201      	movs	r2, #1
    8744:	711a      	strb	r2, [r3, #4]
	time.hour = 0;
    8746:	4bc9      	ldr	r3, [pc, #804]	; (8a6c <initMain+0x360>)
    8748:	2200      	movs	r2, #0
    874a:	709a      	strb	r2, [r3, #2]
	time.minute = 0;
    874c:	4bc7      	ldr	r3, [pc, #796]	; (8a6c <initMain+0x360>)
    874e:	2200      	movs	r2, #0
    8750:	705a      	strb	r2, [r3, #1]
	time.second = 0;
    8752:	4bc6      	ldr	r3, [pc, #792]	; (8a6c <initMain+0x360>)
    8754:	2200      	movs	r2, #0
    8756:	701a      	strb	r2, [r3, #0]
	configure_rtc_calendar();		// configure and enable RTC
    8758:	4bc6      	ldr	r3, [pc, #792]	; (8a74 <initMain+0x368>)
    875a:	4798      	blx	r3
	configure_rtc_callbacks();		// configure and enable callback
    875c:	4bc6      	ldr	r3, [pc, #792]	; (8a78 <initMain+0x36c>)
    875e:	4798      	blx	r3
	rtc_calendar_set_time(&time);	// set current time
    8760:	4bc2      	ldr	r3, [pc, #776]	; (8a6c <initMain+0x360>)
    8762:	1c18      	adds	r0, r3, #0
    8764:	4bc5      	ldr	r3, [pc, #788]	; (8a7c <initMain+0x370>)
    8766:	4798      	blx	r3
	
	delay_init();
    8768:	4bc5      	ldr	r3, [pc, #788]	; (8a80 <initMain+0x374>)
    876a:	4798      	blx	r3

	// tc0 cmp1 is php output3
	configure_tc0();
    876c:	4bc5      	ldr	r3, [pc, #788]	; (8a84 <initMain+0x378>)
    876e:	4798      	blx	r3
	//tc_enable(&tc0_module);
	configure_tc0_callbacks();
    8770:	4bc5      	ldr	r3, [pc, #788]	; (8a88 <initMain+0x37c>)
    8772:	4798      	blx	r3
	tc_enable_callback(&tc0_module, TC_CALLBACK_CC_CHANNEL1);
    8774:	4bc5      	ldr	r3, [pc, #788]	; (8a8c <initMain+0x380>)
    8776:	1c18      	adds	r0, r3, #0
    8778:	2103      	movs	r1, #3
    877a:	4bc5      	ldr	r3, [pc, #788]	; (8a90 <initMain+0x384>)
    877c:	4798      	blx	r3
	
	// tc2 cmp1 is boost pwm out
	// tc2 cmp2 is bulk pwm out
	configure_tc2();
    877e:	4bc5      	ldr	r3, [pc, #788]	; (8a94 <initMain+0x388>)
    8780:	4798      	blx	r3
	configure_tc2_callbacks();
    8782:	4bc5      	ldr	r3, [pc, #788]	; (8a98 <initMain+0x38c>)
    8784:	4798      	blx	r3
	// tc4 cap1 is fan1 tachometer capture
	//configure_tc4();
	//configure_tc4_callbacks();
	
	// tc5 cmp0 is php output1
	configure_tc5();
    8786:	4bc5      	ldr	r3, [pc, #788]	; (8a9c <initMain+0x390>)
    8788:	4798      	blx	r3
	//tc_enable(&tc5_module);
	configure_tc5_callbacks();
    878a:	4bc5      	ldr	r3, [pc, #788]	; (8aa0 <initMain+0x394>)
    878c:	4798      	blx	r3
	tc_enable_callback(&tc5_module, TC_CALLBACK_CC_CHANNEL0);
    878e:	4bc5      	ldr	r3, [pc, #788]	; (8aa4 <initMain+0x398>)
    8790:	1c18      	adds	r0, r3, #0
    8792:	2102      	movs	r1, #2
    8794:	4bbe      	ldr	r3, [pc, #760]	; (8a90 <initMain+0x384>)
    8796:	4798      	blx	r3
	
	// tc7 cmp1 is heater1 pwm out
	// tc7 cmp2 is heater2 pwm out
	configure_tc7();
    8798:	4bc3      	ldr	r3, [pc, #780]	; (8aa8 <initMain+0x39c>)
    879a:	4798      	blx	r3
	tc_enable(&tc7_instance);
    879c:	4bc3      	ldr	r3, [pc, #780]	; (8aac <initMain+0x3a0>)
    879e:	1c18      	adds	r0, r3, #0
    87a0:	4bc3      	ldr	r3, [pc, #780]	; (8ab0 <initMain+0x3a4>)
    87a2:	4798      	blx	r3
	configure_tc7_callbacks();
    87a4:	4bc3      	ldr	r3, [pc, #780]	; (8ab4 <initMain+0x3a8>)
    87a6:	4798      	blx	r3
	configure_extint();
	configure_extint_callbacks();
	configure_event_sys();
	#endif
	
	system_interrupt_disable(EIC_IRQn);
    87a8:	2004      	movs	r0, #4
    87aa:	4bc3      	ldr	r3, [pc, #780]	; (8ab8 <initMain+0x3ac>)
    87ac:	4798      	blx	r3
	system_interrupt_enable_global();
    87ae:	4bc3      	ldr	r3, [pc, #780]	; (8abc <initMain+0x3b0>)
    87b0:	4798      	blx	r3

	// initialize adc
	configure_adc(ADC_REFERENCE_AREFA);
    87b2:	2003      	movs	r0, #3
    87b4:	4bc2      	ldr	r3, [pc, #776]	; (8ac0 <initMain+0x3b4>)
    87b6:	4798      	blx	r3
		
	delay_ms(50);
    87b8:	2032      	movs	r0, #50	; 0x32
    87ba:	4bc2      	ldr	r3, [pc, #776]	; (8ac4 <initMain+0x3b8>)
    87bc:	4798      	blx	r3
	dbg("\n\n[system reset detected]");
    87be:	4bc2      	ldr	r3, [pc, #776]	; (8ac8 <initMain+0x3bc>)
    87c0:	1c18      	adds	r0, r3, #0
    87c2:	4bc2      	ldr	r3, [pc, #776]	; (8acc <initMain+0x3c0>)
    87c4:	4798      	blx	r3
	//dbg("\n[peripheral init...");
	delay_ms(50);
    87c6:	2032      	movs	r0, #50	; 0x32
    87c8:	4bbe      	ldr	r3, [pc, #760]	; (8ac4 <initMain+0x3b8>)
    87ca:	4798      	blx	r3

	uiSetpointControl = true;
    87cc:	4bc0      	ldr	r3, [pc, #768]	; (8ad0 <initMain+0x3c4>)
    87ce:	2201      	movs	r2, #1
    87d0:	701a      	strb	r2, [r3, #0]

	pidSetup(&pidLoop1);
    87d2:	4bc0      	ldr	r3, [pc, #768]	; (8ad4 <initMain+0x3c8>)
    87d4:	1c18      	adds	r0, r3, #0
    87d6:	4bc0      	ldr	r3, [pc, #768]	; (8ad8 <initMain+0x3cc>)
    87d8:	4798      	blx	r3
	initChamber(&chamber1);
    87da:	4bc0      	ldr	r3, [pc, #768]	; (8adc <initMain+0x3d0>)
    87dc:	1c18      	adds	r0, r3, #0
    87de:	4bc0      	ldr	r3, [pc, #768]	; (8ae0 <initMain+0x3d4>)
    87e0:	4798      	blx	r3
	initChamber(&chamber2);
    87e2:	4bc0      	ldr	r3, [pc, #768]	; (8ae4 <initMain+0x3d8>)
    87e4:	1c18      	adds	r0, r3, #0
    87e6:	4bbe      	ldr	r3, [pc, #760]	; (8ae0 <initMain+0x3d4>)
    87e8:	4798      	blx	r3
	initPowerSupply(&ps1);
    87ea:	4bbf      	ldr	r3, [pc, #764]	; (8ae8 <initMain+0x3dc>)
    87ec:	1c18      	adds	r0, r3, #0
    87ee:	4bbf      	ldr	r3, [pc, #764]	; (8aec <initMain+0x3e0>)
    87f0:	4798      	blx	r3
	
	enableFanOverride = false;
    87f2:	4bbf      	ldr	r3, [pc, #764]	; (8af0 <initMain+0x3e4>)
    87f4:	2200      	movs	r2, #0
    87f6:	701a      	strb	r2, [r3, #0]
	
	#ifdef HIGH_PERFORMANCE
	fan1.fanType = Sanyo_9ga0912p4g03;
    87f8:	4abe      	ldr	r2, [pc, #760]	; (8af4 <initMain+0x3e8>)
    87fa:	2348      	movs	r3, #72	; 0x48
    87fc:	2100      	movs	r1, #0
    87fe:	54d1      	strb	r1, [r2, r3]
	fan2.fanType = Nidec_v12e12bmm9;
    8800:	4abd      	ldr	r2, [pc, #756]	; (8af8 <initMain+0x3ec>)
    8802:	2348      	movs	r3, #72	; 0x48
    8804:	2103      	movs	r1, #3
    8806:	54d1      	strb	r1, [r2, r3]
	fan5.fanType = Nidec_v12e12bmm9;
    8808:	4abc      	ldr	r2, [pc, #752]	; (8afc <initMain+0x3f0>)
    880a:	2348      	movs	r3, #72	; 0x48
    880c:	2103      	movs	r1, #3
    880e:	54d1      	strb	r1, [r2, r3]
	fan6.fanType = Nidec_v12e12bmm9;
    8810:	4abb      	ldr	r2, [pc, #748]	; (8b00 <initMain+0x3f4>)
    8812:	2348      	movs	r3, #72	; 0x48
    8814:	2103      	movs	r1, #3
    8816:	54d1      	strb	r1, [r2, r3]
	fan3.fanType = Nidec_v12e12bmm9;
    8818:	4aba      	ldr	r2, [pc, #744]	; (8b04 <initMain+0x3f8>)
    881a:	2348      	movs	r3, #72	; 0x48
    881c:	2103      	movs	r1, #3
    881e:	54d1      	strb	r1, [r2, r3]
	fan4.fanType = Sanyo_9ga0912p4g03;
    8820:	4ab9      	ldr	r2, [pc, #740]	; (8b08 <initMain+0x3fc>)
    8822:	2348      	movs	r3, #72	; 0x48
    8824:	2100      	movs	r1, #0
    8826:	54d1      	strb	r1, [r2, r3]
	fan7.fanType = Nidec_v12e12bmm9;
    8828:	4ab8      	ldr	r2, [pc, #736]	; (8b0c <initMain+0x400>)
    882a:	2348      	movs	r3, #72	; 0x48
    882c:	2103      	movs	r1, #3
    882e:	54d1      	strb	r1, [r2, r3]
	fan8.fanType = Nidec_v12e12bmm9;		
    8830:	4ab7      	ldr	r2, [pc, #732]	; (8b10 <initMain+0x404>)
    8832:	2348      	movs	r3, #72	; 0x48
    8834:	2103      	movs	r1, #3
    8836:	54d1      	strb	r1, [r2, r3]
	#endif

	initFan(&fan1);
    8838:	4bae      	ldr	r3, [pc, #696]	; (8af4 <initMain+0x3e8>)
    883a:	1c18      	adds	r0, r3, #0
    883c:	4bb5      	ldr	r3, [pc, #724]	; (8b14 <initMain+0x408>)
    883e:	4798      	blx	r3
	initFan(&fan2);
    8840:	4bad      	ldr	r3, [pc, #692]	; (8af8 <initMain+0x3ec>)
    8842:	1c18      	adds	r0, r3, #0
    8844:	4bb3      	ldr	r3, [pc, #716]	; (8b14 <initMain+0x408>)
    8846:	4798      	blx	r3
	initFan(&fan3);
    8848:	4bae      	ldr	r3, [pc, #696]	; (8b04 <initMain+0x3f8>)
    884a:	1c18      	adds	r0, r3, #0
    884c:	4bb1      	ldr	r3, [pc, #708]	; (8b14 <initMain+0x408>)
    884e:	4798      	blx	r3
	pidFanSetup(&pidFan4, KP_FAN4, KI_FAN1, KD_FAN4);
    8850:	48b1      	ldr	r0, [pc, #708]	; (8b18 <initMain+0x40c>)
    8852:	49b2      	ldr	r1, [pc, #712]	; (8b1c <initMain+0x410>)
    8854:	2200      	movs	r2, #0
    8856:	2300      	movs	r3, #0
    8858:	4cb1      	ldr	r4, [pc, #708]	; (8b20 <initMain+0x414>)
    885a:	47a0      	blx	r4
	initFan(&fan4);
    885c:	4baa      	ldr	r3, [pc, #680]	; (8b08 <initMain+0x3fc>)
    885e:	1c18      	adds	r0, r3, #0
    8860:	4bac      	ldr	r3, [pc, #688]	; (8b14 <initMain+0x408>)
    8862:	4798      	blx	r3
	initFan(&fan5);
    8864:	4ba5      	ldr	r3, [pc, #660]	; (8afc <initMain+0x3f0>)
    8866:	1c18      	adds	r0, r3, #0
    8868:	4baa      	ldr	r3, [pc, #680]	; (8b14 <initMain+0x408>)
    886a:	4798      	blx	r3
	initFan(&fan6);
    886c:	4ba4      	ldr	r3, [pc, #656]	; (8b00 <initMain+0x3f4>)
    886e:	1c18      	adds	r0, r3, #0
    8870:	4ba8      	ldr	r3, [pc, #672]	; (8b14 <initMain+0x408>)
    8872:	4798      	blx	r3
	initFan(&fan7);
    8874:	4ba5      	ldr	r3, [pc, #660]	; (8b0c <initMain+0x400>)
    8876:	1c18      	adds	r0, r3, #0
    8878:	4ba6      	ldr	r3, [pc, #664]	; (8b14 <initMain+0x408>)
    887a:	4798      	blx	r3
	initFan(&fan8);
    887c:	4ba4      	ldr	r3, [pc, #656]	; (8b10 <initMain+0x404>)
    887e:	1c18      	adds	r0, r3, #0
    8880:	4ba4      	ldr	r3, [pc, #656]	; (8b14 <initMain+0x408>)
    8882:	4798      	blx	r3
	port_pin_set_output_level(PIN_ENBL_PSFAN, HIGH);
    8884:	202a      	movs	r0, #42	; 0x2a
    8886:	2101      	movs	r1, #1
    8888:	4ba6      	ldr	r3, [pc, #664]	; (8b24 <initMain+0x418>)
    888a:	4798      	blx	r3
	
	initDbgCtrlFunctions();
    888c:	4ba6      	ldr	r3, [pc, #664]	; (8b28 <initMain+0x41c>)
    888e:	4798      	blx	r3
		
	condHeater.sm_state = STATE_CONDHTR_OFF;
    8890:	4ba6      	ldr	r3, [pc, #664]	; (8b2c <initMain+0x420>)
    8892:	2200      	movs	r2, #0
    8894:	721a      	strb	r2, [r3, #8]
	setHeaterState(&htxAHeater, 0);
    8896:	4ba6      	ldr	r3, [pc, #664]	; (8b30 <initMain+0x424>)
    8898:	1c18      	adds	r0, r3, #0
    889a:	2100      	movs	r1, #0
    889c:	4ba5      	ldr	r3, [pc, #660]	; (8b34 <initMain+0x428>)
    889e:	4798      	blx	r3
	setHeaterState(&htxBHeater, 0);
    88a0:	4ba5      	ldr	r3, [pc, #660]	; (8b38 <initMain+0x42c>)
    88a2:	1c18      	adds	r0, r3, #0
    88a4:	2100      	movs	r1, #0
    88a6:	4ba3      	ldr	r3, [pc, #652]	; (8b34 <initMain+0x428>)
    88a8:	4798      	blx	r3
	setHeaterState(&condHeater, 0);
    88aa:	4ba0      	ldr	r3, [pc, #640]	; (8b2c <initMain+0x420>)
    88ac:	1c18      	adds	r0, r3, #0
    88ae:	2100      	movs	r1, #0
    88b0:	4ba0      	ldr	r3, [pc, #640]	; (8b34 <initMain+0x428>)
    88b2:	4798      	blx	r3
	setHeaterState(&doorHeater, 0);
    88b4:	4ba1      	ldr	r3, [pc, #644]	; (8b3c <initMain+0x430>)
    88b6:	1c18      	adds	r0, r3, #0
    88b8:	2100      	movs	r1, #0
    88ba:	4b9e      	ldr	r3, [pc, #632]	; (8b34 <initMain+0x428>)
    88bc:	4798      	blx	r3
		
	// initialize globals to defaults
	firmwareVersion = FIRMWARE_VERSION;
    88be:	4ba0      	ldr	r3, [pc, #640]	; (8b40 <initMain+0x434>)
    88c0:	22ff      	movs	r2, #255	; 0xff
    88c2:	701a      	strb	r2, [r3, #0]
	firmwareRevision = FIRMWARE_REVISION;
    88c4:	4b9f      	ldr	r3, [pc, #636]	; (8b44 <initMain+0x438>)
    88c6:	2203      	movs	r2, #3
    88c8:	701a      	strb	r2, [r3, #0]
	defrostFreqMaxHrs = DEFROST_MAX_INTERVAL_TIME_IN_HRS;
    88ca:	4b9f      	ldr	r3, [pc, #636]	; (8b48 <initMain+0x43c>)
    88cc:	22a8      	movs	r2, #168	; 0xa8
    88ce:	801a      	strh	r2, [r3, #0]
	i2cFunctionReg = 0;
    88d0:	4b9e      	ldr	r3, [pc, #632]	; (8b4c <initMain+0x440>)
    88d2:	2200      	movs	r2, #0
    88d4:	701a      	strb	r2, [r3, #0]
	errorRegister = ERROR_NONE;
    88d6:	4b9e      	ldr	r3, [pc, #632]	; (8b50 <initMain+0x444>)
    88d8:	2200      	movs	r2, #0
    88da:	801a      	strh	r2, [r3, #0]
	chamberThermistorBeta = BCOEFFICIENT_TCHAMBER;
    88dc:	4b9d      	ldr	r3, [pc, #628]	; (8b54 <initMain+0x448>)
    88de:	4a9e      	ldr	r2, [pc, #632]	; (8b58 <initMain+0x44c>)
    88e0:	801a      	strh	r2, [r3, #0]
	rejectThermistorBeta = BCOEFFICIENT_TREJ;
    88e2:	4b9e      	ldr	r3, [pc, #632]	; (8b5c <initMain+0x450>)
    88e4:	4a9e      	ldr	r2, [pc, #632]	; (8b60 <initMain+0x454>)
    88e6:	801a      	strh	r2, [r3, #0]
		
	// configure eeprom emulator
	configure_eeprom();
    88e8:	4b9e      	ldr	r3, [pc, #632]	; (8b64 <initMain+0x458>)
    88ea:	4798      	blx	r3
	struct eeprom_emulator_parameters eeprom_param;
	eeprom_emulator_get_parameters(&eeprom_param);
    88ec:	1c3b      	adds	r3, r7, #0
    88ee:	1c18      	adds	r0, r3, #0
    88f0:	4b9d      	ldr	r3, [pc, #628]	; (8b68 <initMain+0x45c>)
    88f2:	4798      	blx	r3
	eepromReadParams();
    88f4:	4b9d      	ldr	r3, [pc, #628]	; (8b6c <initMain+0x460>)
    88f6:	4798      	blx	r3

	//initDefrost();
	//initPhpSelfCheck();
	
	printBootMsg();
    88f8:	4b9d      	ldr	r3, [pc, #628]	; (8b70 <initMain+0x464>)
    88fa:	4798      	blx	r3

	//detectPHP();
	phpDetected = true;
    88fc:	4b9d      	ldr	r3, [pc, #628]	; (8b74 <initMain+0x468>)
    88fe:	2201      	movs	r2, #1
    8900:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<MAX_RX_BUFFER_LENGTH; i++) {rx_buffer[i] = 0; }
    8902:	2300      	movs	r3, #0
    8904:	607b      	str	r3, [r7, #4]
    8906:	e007      	b.n	8918 <initMain+0x20c>
    8908:	4a9b      	ldr	r2, [pc, #620]	; (8b78 <initMain+0x46c>)
    890a:	687b      	ldr	r3, [r7, #4]
    890c:	18d3      	adds	r3, r2, r3
    890e:	2200      	movs	r2, #0
    8910:	701a      	strb	r2, [r3, #0]
    8912:	687b      	ldr	r3, [r7, #4]
    8914:	3301      	adds	r3, #1
    8916:	607b      	str	r3, [r7, #4]
    8918:	687b      	ldr	r3, [r7, #4]
    891a:	2b13      	cmp	r3, #19
    891c:	ddf4      	ble.n	8908 <initMain+0x1fc>

	task1LastTime = presentTimeInSec();
    891e:	4b97      	ldr	r3, [pc, #604]	; (8b7c <initMain+0x470>)
    8920:	4798      	blx	r3
    8922:	1c02      	adds	r2, r0, #0
    8924:	4b96      	ldr	r3, [pc, #600]	; (8b80 <initMain+0x474>)
    8926:	601a      	str	r2, [r3, #0]
	task2LastTime = presentTimeInSec();
    8928:	4b94      	ldr	r3, [pc, #592]	; (8b7c <initMain+0x470>)
    892a:	4798      	blx	r3
    892c:	1c02      	adds	r2, r0, #0
    892e:	4b95      	ldr	r3, [pc, #596]	; (8b84 <initMain+0x478>)
    8930:	601a      	str	r2, [r3, #0]
	task3LastTime = presentTimeInSec();
    8932:	4b92      	ldr	r3, [pc, #584]	; (8b7c <initMain+0x470>)
    8934:	4798      	blx	r3
    8936:	1c02      	adds	r2, r0, #0
    8938:	4b93      	ldr	r3, [pc, #588]	; (8b88 <initMain+0x47c>)
    893a:	601a      	str	r2, [r3, #0]
	// task4 used for defrost
	// task5 used for defrost
	task6LastTime = presentTimeInSec();
    893c:	4b8f      	ldr	r3, [pc, #572]	; (8b7c <initMain+0x470>)
    893e:	4798      	blx	r3
    8940:	1c02      	adds	r2, r0, #0
    8942:	4b92      	ldr	r3, [pc, #584]	; (8b8c <initMain+0x480>)
    8944:	601a      	str	r2, [r3, #0]
	task7LastTime = presentTimeInSec();
    8946:	4b8d      	ldr	r3, [pc, #564]	; (8b7c <initMain+0x470>)
    8948:	4798      	blx	r3
    894a:	1c02      	adds	r2, r0, #0
    894c:	4b90      	ldr	r3, [pc, #576]	; (8b90 <initMain+0x484>)
    894e:	601a      	str	r2, [r3, #0]
	// task8 used for php self-check
	// task9 used for php self-check
	// task10 used for php self-check
	task11LastTime = presentTimeInSec();
    8950:	4b8a      	ldr	r3, [pc, #552]	; (8b7c <initMain+0x470>)
    8952:	4798      	blx	r3
    8954:	1c02      	adds	r2, r0, #0
    8956:	4b8f      	ldr	r3, [pc, #572]	; (8b94 <initMain+0x488>)
    8958:	601a      	str	r2, [r3, #0]
	task12LastTime = presentTimeInSec();
    895a:	4b88      	ldr	r3, [pc, #544]	; (8b7c <initMain+0x470>)
    895c:	4798      	blx	r3
    895e:	1c02      	adds	r2, r0, #0
    8960:	4b8d      	ldr	r3, [pc, #564]	; (8b98 <initMain+0x48c>)
    8962:	601a      	str	r2, [r3, #0]
	
	task1Time = 0;
    8964:	4b8d      	ldr	r3, [pc, #564]	; (8b9c <initMain+0x490>)
    8966:	2200      	movs	r2, #0
    8968:	601a      	str	r2, [r3, #0]
	task2Time = 0;
    896a:	4b8d      	ldr	r3, [pc, #564]	; (8ba0 <initMain+0x494>)
    896c:	2200      	movs	r2, #0
    896e:	601a      	str	r2, [r3, #0]
	task3Time = 0;
    8970:	4b8c      	ldr	r3, [pc, #560]	; (8ba4 <initMain+0x498>)
    8972:	2200      	movs	r2, #0
    8974:	601a      	str	r2, [r3, #0]
	// task4 used for defrost
	// task5 used for defrost
	task6Time = 0;
    8976:	4b8c      	ldr	r3, [pc, #560]	; (8ba8 <initMain+0x49c>)
    8978:	2200      	movs	r2, #0
    897a:	601a      	str	r2, [r3, #0]
	task7Time = 0;
    897c:	4b8b      	ldr	r3, [pc, #556]	; (8bac <initMain+0x4a0>)
    897e:	2200      	movs	r2, #0
    8980:	601a      	str	r2, [r3, #0]
	// task8 used for php self-check
	// task9 used for php self-check
	// task10 used for php self-check
	task11Time = 0;	
    8982:	4b8b      	ldr	r3, [pc, #556]	; (8bb0 <initMain+0x4a4>)
    8984:	2200      	movs	r2, #0
    8986:	601a      	str	r2, [r3, #0]
	task12Time = 0;
    8988:	4b8a      	ldr	r3, [pc, #552]	; (8bb4 <initMain+0x4a8>)
    898a:	2200      	movs	r2, #0
    898c:	601a      	str	r2, [r3, #0]
	
	configure_i2c_slave();
    898e:	4b8a      	ldr	r3, [pc, #552]	; (8bb8 <initMain+0x4ac>)
    8990:	4798      	blx	r3
	configure_i2c_slave_callbacks();
    8992:	4b8a      	ldr	r3, [pc, #552]	; (8bbc <initMain+0x4b0>)
    8994:	4798      	blx	r3
	configure_i2c_master();
    8996:	4b8a      	ldr	r3, [pc, #552]	; (8bc0 <initMain+0x4b4>)
    8998:	4798      	blx	r3
	
	REG_EIC_INTFLAG = 0x8000;			// clear interrupt flag
    899a:	4b8a      	ldr	r3, [pc, #552]	; (8bc4 <initMain+0x4b8>)
    899c:	2280      	movs	r2, #128	; 0x80
    899e:	0212      	lsls	r2, r2, #8
    89a0:	601a      	str	r2, [r3, #0]
	system_interrupt_enable(EIC_IRQn);
    89a2:	2004      	movs	r0, #4
    89a4:	4b88      	ldr	r3, [pc, #544]	; (8bc8 <initMain+0x4bc>)
    89a6:	4798      	blx	r3
	
	port_pin_set_output_level_EX(PIN_RDY_N, LOW, enableManualOverride);   // assert RDY pin
    89a8:	4b88      	ldr	r3, [pc, #544]	; (8bcc <initMain+0x4c0>)
    89aa:	781b      	ldrb	r3, [r3, #0]
    89ac:	201c      	movs	r0, #28
    89ae:	2100      	movs	r1, #0
    89b0:	1c1a      	adds	r2, r3, #0
    89b2:	4b87      	ldr	r3, [pc, #540]	; (8bd0 <initMain+0x4c4>)
    89b4:	4798      	blx	r3
	port_pin_set_output_level_EX(PIN_LED_0_PIN, LOW, false);
    89b6:	200e      	movs	r0, #14
    89b8:	2100      	movs	r1, #0
    89ba:	2200      	movs	r2, #0
    89bc:	4b84      	ldr	r3, [pc, #528]	; (8bd0 <initMain+0x4c4>)
    89be:	4798      	blx	r3
	
	tc_enable(&tc0_module);
    89c0:	4b32      	ldr	r3, [pc, #200]	; (8a8c <initMain+0x380>)
    89c2:	1c18      	adds	r0, r3, #0
    89c4:	4b3a      	ldr	r3, [pc, #232]	; (8ab0 <initMain+0x3a4>)
    89c6:	4798      	blx	r3
	tc_enable(&tc5_module);
    89c8:	4b36      	ldr	r3, [pc, #216]	; (8aa4 <initMain+0x398>)
    89ca:	1c18      	adds	r0, r3, #0
    89cc:	4b38      	ldr	r3, [pc, #224]	; (8ab0 <initMain+0x3a4>)
    89ce:	4798      	blx	r3

	setOutputSwitch(PIN_ENBL_OUTA_COLD, GPIO_MODE, OFF);
    89d0:	203f      	movs	r0, #63	; 0x3f
    89d2:	2101      	movs	r1, #1
    89d4:	2200      	movs	r2, #0
    89d6:	4b7f      	ldr	r3, [pc, #508]	; (8bd4 <initMain+0x4c8>)
    89d8:	4798      	blx	r3
	setOutputSwitch(PIN_ENBL_OUTA_HOT , GPIO_MODE, OFF);
    89da:	2023      	movs	r0, #35	; 0x23
    89dc:	2101      	movs	r1, #1
    89de:	2200      	movs	r2, #0
    89e0:	4b7c      	ldr	r3, [pc, #496]	; (8bd4 <initMain+0x4c8>)
    89e2:	4798      	blx	r3
	setOutputSwitch(PIN_ENBL_OUTB_COLD, GPIO_MODE, OFF);
    89e4:	2008      	movs	r0, #8
    89e6:	2101      	movs	r1, #1
    89e8:	2200      	movs	r2, #0
    89ea:	4b7a      	ldr	r3, [pc, #488]	; (8bd4 <initMain+0x4c8>)
    89ec:	4798      	blx	r3
	setOutputSwitch(PIN_ENBL_OUTB_HOT , GPIO_MODE, OFF);
    89ee:	2004      	movs	r0, #4
    89f0:	2101      	movs	r1, #1
    89f2:	2200      	movs	r2, #0
    89f4:	4b77      	ldr	r3, [pc, #476]	; (8bd4 <initMain+0x4c8>)
    89f6:	4798      	blx	r3

	if (fanEmc2305Init(FAN_CHIP1) != ERROR_NONE)
    89f8:	2001      	movs	r0, #1
    89fa:	4b77      	ldr	r3, [pc, #476]	; (8bd8 <initMain+0x4cc>)
    89fc:	4798      	blx	r3
    89fe:	1c03      	adds	r3, r0, #0
    8a00:	2b00      	cmp	r3, #0
    8a02:	d003      	beq.n	8a0c <initMain+0x300>
	{
		dbg("\n...fan controller1 failure; system halted\n");
    8a04:	4b75      	ldr	r3, [pc, #468]	; (8bdc <initMain+0x4d0>)
    8a06:	1c18      	adds	r0, r3, #0
    8a08:	4b75      	ldr	r3, [pc, #468]	; (8be0 <initMain+0x4d4>)
    8a0a:	4798      	blx	r3
		//while (1) {};
	}
	
	if (fanEmc2305Init(FAN_CHIP2) != ERROR_NONE)
    8a0c:	2002      	movs	r0, #2
    8a0e:	4b72      	ldr	r3, [pc, #456]	; (8bd8 <initMain+0x4cc>)
    8a10:	4798      	blx	r3
    8a12:	1c03      	adds	r3, r0, #0
    8a14:	2b00      	cmp	r3, #0
    8a16:	d003      	beq.n	8a20 <initMain+0x314>
	{
		dbg("\n...fan controller2 failure; system halted\n");
    8a18:	4b72      	ldr	r3, [pc, #456]	; (8be4 <initMain+0x4d8>)
    8a1a:	1c18      	adds	r0, r3, #0
    8a1c:	4b70      	ldr	r3, [pc, #448]	; (8be0 <initMain+0x4d4>)
    8a1e:	4798      	blx	r3
		//while (1) {};
	}
	
	if (runSelfTestOnPOR > 0)
    8a20:	4b71      	ldr	r3, [pc, #452]	; (8be8 <initMain+0x4dc>)
    8a22:	781b      	ldrb	r3, [r3, #0]
    8a24:	2b00      	cmp	r3, #0
    8a26:	d001      	beq.n	8a2c <initMain+0x320>
	{
		selfTest();
    8a28:	4b70      	ldr	r3, [pc, #448]	; (8bec <initMain+0x4e0>)
    8a2a:	4798      	blx	r3
	}
	
	#ifdef ENABLE_DEBUG_CMD_INTERFACE
	enableDebugCmds = true;
    8a2c:	4b70      	ldr	r3, [pc, #448]	; (8bf0 <initMain+0x4e4>)
    8a2e:	2201      	movs	r2, #1
    8a30:	701a      	strb	r2, [r3, #0]
	enablePsDbgMsgs = false;
    8a32:	4b70      	ldr	r3, [pc, #448]	; (8bf4 <initMain+0x4e8>)
    8a34:	2200      	movs	r2, #0
    8a36:	701a      	strb	r2, [r3, #0]
	#else
	enableDebugCmds = false;
	enablePsDbgMsgs = true;
	#endif
	
	readSensors();
    8a38:	4b6f      	ldr	r3, [pc, #444]	; (8bf8 <initMain+0x4ec>)
    8a3a:	4798      	blx	r3
	controlTemperature = chamber2.chamberTemp;
    8a3c:	4b29      	ldr	r3, [pc, #164]	; (8ae4 <initMain+0x3d8>)
    8a3e:	685a      	ldr	r2, [r3, #4]
    8a40:	4b6e      	ldr	r3, [pc, #440]	; (8bfc <initMain+0x4f0>)
    8a42:	601a      	str	r2, [r3, #0]
	
	dbg("\n[system ready]\n");	
    8a44:	4b6e      	ldr	r3, [pc, #440]	; (8c00 <initMain+0x4f4>)
    8a46:	1c18      	adds	r0, r3, #0
    8a48:	4b65      	ldr	r3, [pc, #404]	; (8be0 <initMain+0x4d4>)
    8a4a:	4798      	blx	r3
}
    8a4c:	46bd      	mov	sp, r7
    8a4e:	b003      	add	sp, #12
    8a50:	bd90      	pop	{r4, r7, pc}
    8a52:	46c0      	nop			; (mov r8, r8)
    8a54:	000082ad 	.word	0x000082ad
    8a58:	000092b1 	.word	0x000092b1
    8a5c:	00017e31 	.word	0x00017e31
    8a60:	0000a8dd 	.word	0x0000a8dd
    8a64:	0000f91d 	.word	0x0000f91d
    8a68:	0000f9a9 	.word	0x0000f9a9
    8a6c:	20000f60 	.word	0x20000f60
    8a70:	00008399 	.word	0x00008399
    8a74:	0000bdb5 	.word	0x0000bdb5
    8a78:	0000be35 	.word	0x0000be35
    8a7c:	000128fd 	.word	0x000128fd
    8a80:	00010555 	.word	0x00010555
    8a84:	0000cd79 	.word	0x0000cd79
    8a88:	0000cde9 	.word	0x0000cde9
    8a8c:	20000f70 	.word	0x20000f70
    8a90:	000085b1 	.word	0x000085b1
    8a94:	0000cea1 	.word	0x0000cea1
    8a98:	0000cf2d 	.word	0x0000cf2d
    8a9c:	0000ce0d 	.word	0x0000ce0d
    8aa0:	0000ce7d 	.word	0x0000ce7d
    8aa4:	20000f8c 	.word	0x20000f8c
    8aa8:	0000cf79 	.word	0x0000cf79
    8aac:	20000fc4 	.word	0x20000fc4
    8ab0:	000084ad 	.word	0x000084ad
    8ab4:	0000cffd 	.word	0x0000cffd
    8ab8:	000082f1 	.word	0x000082f1
    8abc:	00008295 	.word	0x00008295
    8ac0:	0000fce9 	.word	0x0000fce9
    8ac4:	000105b1 	.word	0x000105b1
    8ac8:	000249b8 	.word	0x000249b8
    8acc:	0001b62d 	.word	0x0001b62d
    8ad0:	20000090 	.word	0x20000090
    8ad4:	20000e10 	.word	0x20000e10
    8ad8:	0000a13d 	.word	0x0000a13d
    8adc:	200009b8 	.word	0x200009b8
    8ae0:	00008c05 	.word	0x00008c05
    8ae4:	20000960 	.word	0x20000960
    8ae8:	20000a84 	.word	0x20000a84
    8aec:	00008cbd 	.word	0x00008cbd
    8af0:	20000375 	.word	0x20000375
    8af4:	20000e84 	.word	0x20000e84
    8af8:	20000c58 	.word	0x20000c58
    8afc:	20000b8c 	.word	0x20000b8c
    8b00:	20000914 	.word	0x20000914
    8b04:	20000d18 	.word	0x20000d18
    8b08:	20000adc 	.word	0x20000adc
    8b0c:	20000dc0 	.word	0x20000dc0
    8b10:	20000b40 	.word	0x20000b40
    8b14:	00008d75 	.word	0x00008d75
    8b18:	20000bd8 	.word	0x20000bd8
    8b1c:	42200000 	.word	0x42200000
    8b20:	0000a245 	.word	0x0000a245
    8b24:	00008345 	.word	0x00008345
    8b28:	0000909d 	.word	0x0000909d
    8b2c:	20000ed4 	.word	0x20000ed4
    8b30:	20000b28 	.word	0x20000b28
    8b34:	00007275 	.word	0x00007275
    8b38:	20000c4c 	.word	0x20000c4c
    8b3c:	20000b34 	.word	0x20000b34
    8b40:	20000ed0 	.word	0x20000ed0
    8b44:	20000e0c 	.word	0x20000e0c
    8b48:	20000dbc 	.word	0x20000dbc
    8b4c:	20000330 	.word	0x20000330
    8b50:	20000332 	.word	0x20000332
    8b54:	2000018c 	.word	0x2000018c
    8b58:	00000e88 	.word	0x00000e88
    8b5c:	2000018e 	.word	0x2000018e
    8b60:	00000f86 	.word	0x00000f86
    8b64:	00009301 	.word	0x00009301
    8b68:	000193e5 	.word	0x000193e5
    8b6c:	00009429 	.word	0x00009429
    8b70:	00004a6d 	.word	0x00004a6d
    8b74:	20000374 	.word	0x20000374
    8b78:	20001094 	.word	0x20001094
    8b7c:	0000dcad 	.word	0x0000dcad
    8b80:	20000398 	.word	0x20000398
    8b84:	2000039c 	.word	0x2000039c
    8b88:	200003a0 	.word	0x200003a0
    8b8c:	200003a4 	.word	0x200003a4
    8b90:	200003a8 	.word	0x200003a8
    8b94:	200003ac 	.word	0x200003ac
    8b98:	200003b0 	.word	0x200003b0
    8b9c:	2000037c 	.word	0x2000037c
    8ba0:	20000380 	.word	0x20000380
    8ba4:	20000384 	.word	0x20000384
    8ba8:	20000388 	.word	0x20000388
    8bac:	2000038c 	.word	0x2000038c
    8bb0:	20000390 	.word	0x20000390
    8bb4:	20000394 	.word	0x20000394
    8bb8:	000080cd 	.word	0x000080cd
    8bbc:	0000812d 	.word	0x0000812d
    8bc0:	00008061 	.word	0x00008061
    8bc4:	40001810 	.word	0x40001810
    8bc8:	000082c5 	.word	0x000082c5
    8bcc:	20000372 	.word	0x20000372
    8bd0:	000086c1 	.word	0x000086c1
    8bd4:	0000ecc9 	.word	0x0000ecc9
    8bd8:	00005419 	.word	0x00005419
    8bdc:	000249d4 	.word	0x000249d4
    8be0:	0001b899 	.word	0x0001b899
    8be4:	00024a00 	.word	0x00024a00
    8be8:	2000004c 	.word	0x2000004c
    8bec:	0000c021 	.word	0x0000c021
    8bf0:	20000179 	.word	0x20000179
    8bf4:	20000371 	.word	0x20000371
    8bf8:	0000dde1 	.word	0x0000dde1
    8bfc:	20000188 	.word	0x20000188
    8c00:	00024a2c 	.word	0x00024a2c

00008c04 <initChamber>:

void initChamber(struct chamber_vars *ch_inst)
{
    8c04:	b580      	push	{r7, lr}
    8c06:	b082      	sub	sp, #8
    8c08:	af00      	add	r7, sp, #0
    8c0a:	6078      	str	r0, [r7, #4]
	ch_inst->mode_state = 0;
    8c0c:	687b      	ldr	r3, [r7, #4]
    8c0e:	2200      	movs	r2, #0
    8c10:	701a      	strb	r2, [r3, #0]
	ch_inst->previousModeState = 0;
    8c12:	687b      	ldr	r3, [r7, #4]
    8c14:	2200      	movs	r2, #0
    8c16:	705a      	strb	r2, [r3, #1]
	ch_inst->chamberTemp = 0;
    8c18:	687b      	ldr	r3, [r7, #4]
    8c1a:	2200      	movs	r2, #0
    8c1c:	605a      	str	r2, [r3, #4]
	ch_inst->rejectTemp = 0;
    8c1e:	687b      	ldr	r3, [r7, #4]
    8c20:	2200      	movs	r2, #0
    8c22:	60da      	str	r2, [r3, #12]
	ch_inst->deltaT = 0;
    8c24:	687b      	ldr	r3, [r7, #4]
    8c26:	2200      	movs	r2, #0
    8c28:	615a      	str	r2, [r3, #20]
	ch_inst->setpoint = SETPOINT_DEFAULT;
    8c2a:	687b      	ldr	r3, [r7, #4]
    8c2c:	4a1b      	ldr	r2, [pc, #108]	; (8c9c <initChamber+0x98>)
    8c2e:	619a      	str	r2, [r3, #24]
	ch_inst->previousSetpoint = SETPOINT_DEFAULT;
    8c30:	687b      	ldr	r3, [r7, #4]
    8c32:	4a1a      	ldr	r2, [pc, #104]	; (8c9c <initChamber+0x98>)
    8c34:	61da      	str	r2, [r3, #28]
	ch_inst->VmaxCOP = VMAXCOP_DEFAULT;
    8c36:	687b      	ldr	r3, [r7, #4]
    8c38:	4a19      	ldr	r2, [pc, #100]	; (8ca0 <initChamber+0x9c>)
    8c3a:	621a      	str	r2, [r3, #32]
	ch_inst->Vvarq = VARQ_VOLTAGE_DEFAULT;
    8c3c:	687b      	ldr	r3, [r7, #4]
    8c3e:	4a19      	ldr	r2, [pc, #100]	; (8ca4 <initChamber+0xa0>)
    8c40:	625a      	str	r2, [r3, #36]	; 0x24
	ch_inst->rejectLimit = REJECT_LIMIT_DEFAULT;
    8c42:	687b      	ldr	r3, [r7, #4]
    8c44:	4a18      	ldr	r2, [pc, #96]	; (8ca8 <initChamber+0xa4>)
    8c46:	629a      	str	r2, [r3, #40]	; 0x28
	ch_inst->rejectLimitCritical = REJECT_LIMIT_CRITICAL_DEFAULT;
    8c48:	687b      	ldr	r3, [r7, #4]
    8c4a:	4a18      	ldr	r2, [pc, #96]	; (8cac <initChamber+0xa8>)
    8c4c:	62da      	str	r2, [r3, #44]	; 0x2c
	ch_inst->rejectLowLimit = REJECT_LIMIT_DEFAULT-REJECT_DEADBAND_DEFAULT;
    8c4e:	687b      	ldr	r3, [r7, #4]
    8c50:	4a17      	ldr	r2, [pc, #92]	; (8cb0 <initChamber+0xac>)
    8c52:	631a      	str	r2, [r3, #48]	; 0x30
	ch_inst->deadband = DEADBAND_DEFAULT;
    8c54:	687b      	ldr	r3, [r7, #4]
    8c56:	4a17      	ldr	r2, [pc, #92]	; (8cb4 <initChamber+0xb0>)
    8c58:	635a      	str	r2, [r3, #52]	; 0x34
	ch_inst->deadbandLow = DEADBANDLOW_DEFAULT;
    8c5a:	687b      	ldr	r3, [r7, #4]
    8c5c:	4a15      	ldr	r2, [pc, #84]	; (8cb4 <initChamber+0xb0>)
    8c5e:	639a      	str	r2, [r3, #56]	; 0x38
	ch_inst->operatingMode = PID_MODE;
    8c60:	687a      	ldr	r2, [r7, #4]
    8c62:	233c      	movs	r3, #60	; 0x3c
    8c64:	2100      	movs	r1, #0
    8c66:	54d1      	strb	r1, [r2, r3]
	ch_inst->deactivateAutoControl = false;
    8c68:	687a      	ldr	r2, [r7, #4]
    8c6a:	233d      	movs	r3, #61	; 0x3d
    8c6c:	2100      	movs	r1, #0
    8c6e:	54d1      	strb	r1, [r2, r3]
	ch_inst->chamberOffset = 0;
    8c70:	687b      	ldr	r3, [r7, #4]
    8c72:	2200      	movs	r2, #0
    8c74:	641a      	str	r2, [r3, #64]	; 0x40
	ch_inst->heatLeak = HEATLEAK_DEFAULT;
    8c76:	687b      	ldr	r3, [r7, #4]
    8c78:	4a0f      	ldr	r2, [pc, #60]	; (8cb8 <initChamber+0xb4>)
    8c7a:	645a      	str	r2, [r3, #68]	; 0x44
	ch_inst->COP = 0;
    8c7c:	687b      	ldr	r3, [r7, #4]
    8c7e:	2200      	movs	r2, #0
    8c80:	64da      	str	r2, [r3, #76]	; 0x4c
	ch_inst->Qc = 0;
    8c82:	687b      	ldr	r3, [r7, #4]
    8c84:	2200      	movs	r2, #0
    8c86:	649a      	str	r2, [r3, #72]	; 0x48
	ch_inst->glycolTemp = 0;
    8c88:	687b      	ldr	r3, [r7, #4]
    8c8a:	2200      	movs	r2, #0
    8c8c:	651a      	str	r2, [r3, #80]	; 0x50
	ch_inst->glycolOffset = 0;
    8c8e:	687b      	ldr	r3, [r7, #4]
    8c90:	2200      	movs	r2, #0
    8c92:	655a      	str	r2, [r3, #84]	; 0x54
		
	return;
    8c94:	46c0      	nop			; (mov r8, r8)
}
    8c96:	46bd      	mov	sp, r7
    8c98:	b002      	add	sp, #8
    8c9a:	bd80      	pop	{r7, pc}
    8c9c:	c1900000 	.word	0xc1900000
    8ca0:	41380000 	.word	0x41380000
    8ca4:	42780000 	.word	0x42780000
    8ca8:	42640000 	.word	0x42640000
    8cac:	42700000 	.word	0x42700000
    8cb0:	42540000 	.word	0x42540000
    8cb4:	3ee66666 	.word	0x3ee66666
    8cb8:	3f866666 	.word	0x3f866666

00008cbc <initPowerSupply>:

void initPowerSupply(struct ps_vars *ps_inst)
{
    8cbc:	b580      	push	{r7, lr}
    8cbe:	b082      	sub	sp, #8
    8cc0:	af00      	add	r7, sp, #0
    8cc2:	6078      	str	r0, [r7, #4]
	// initialize variables
	ps_inst->phpVoltage = 0;
    8cc4:	687b      	ldr	r3, [r7, #4]
    8cc6:	2200      	movs	r2, #0
    8cc8:	61da      	str	r2, [r3, #28]
	ps_inst->desiredVoltage = 0;
    8cca:	687b      	ldr	r3, [r7, #4]
    8ccc:	2200      	movs	r2, #0
    8cce:	615a      	str	r2, [r3, #20]
	ps_inst->previousDesiredVoltage = 0;
    8cd0:	687b      	ldr	r3, [r7, #4]
    8cd2:	2200      	movs	r2, #0
    8cd4:	619a      	str	r2, [r3, #24]
	ps_inst->boostPwm = BOOST_OFF_DUTY;
    8cd6:	687b      	ldr	r3, [r7, #4]
    8cd8:	4a1a      	ldr	r2, [pc, #104]	; (8d44 <initPowerSupply+0x88>)
    8cda:	60da      	str	r2, [r3, #12]
	ps_inst->boostPwmTarget = BOOST_OFF_DUTY;
    8cdc:	687b      	ldr	r3, [r7, #4]
    8cde:	4a19      	ldr	r2, [pc, #100]	; (8d44 <initPowerSupply+0x88>)
    8ce0:	611a      	str	r2, [r3, #16]
	ps_inst->outputStatus = OFF;
    8ce2:	687b      	ldr	r3, [r7, #4]
    8ce4:	2200      	movs	r2, #0
    8ce6:	709a      	strb	r2, [r3, #2]

	if (ps_inst == &ps1)
    8ce8:	687a      	ldr	r2, [r7, #4]
    8cea:	4b17      	ldr	r3, [pc, #92]	; (8d48 <initPowerSupply+0x8c>)
    8cec:	429a      	cmp	r2, r3
    8cee:	d106      	bne.n	8cfe <initPowerSupply+0x42>
	{
		ps_inst->minVoltage = PCP_COLD_STAGE_MIN_OUTPUT_VOLTAGE;
    8cf0:	687b      	ldr	r3, [r7, #4]
    8cf2:	4a16      	ldr	r2, [pc, #88]	; (8d4c <initPowerSupply+0x90>)
    8cf4:	651a      	str	r2, [r3, #80]	; 0x50
		ps_inst->maxVoltage = PCP_COLD_STAGE_MAX_OUTPUT_VOLTAGE;
    8cf6:	687b      	ldr	r3, [r7, #4]
    8cf8:	4a15      	ldr	r2, [pc, #84]	; (8d50 <initPowerSupply+0x94>)
    8cfa:	655a      	str	r2, [r3, #84]	; 0x54
    8cfc:	e009      	b.n	8d12 <initPowerSupply+0x56>
	}
	else if (ps_inst == &ps2)
    8cfe:	687a      	ldr	r2, [r7, #4]
    8d00:	4b14      	ldr	r3, [pc, #80]	; (8d54 <initPowerSupply+0x98>)
    8d02:	429a      	cmp	r2, r3
    8d04:	d105      	bne.n	8d12 <initPowerSupply+0x56>
	{
		ps_inst->minVoltage = PCP_HOT_STAGE_MIN_OUTPUT_VOLTAGE;
    8d06:	687b      	ldr	r3, [r7, #4]
    8d08:	4a13      	ldr	r2, [pc, #76]	; (8d58 <initPowerSupply+0x9c>)
    8d0a:	651a      	str	r2, [r3, #80]	; 0x50
		ps_inst->maxVoltage = PCP_HOT_STAGE_MAX_OUTPUT_VOLTAGE;
    8d0c:	687b      	ldr	r3, [r7, #4]
    8d0e:	4a13      	ldr	r2, [pc, #76]	; (8d5c <initPowerSupply+0xa0>)
    8d10:	655a      	str	r2, [r3, #84]	; 0x54
	}

	setBoostVoltage(ps_inst, BOOST_OFF_DUTY);
    8d12:	687a      	ldr	r2, [r7, #4]
    8d14:	4b0b      	ldr	r3, [pc, #44]	; (8d44 <initPowerSupply+0x88>)
    8d16:	1c10      	adds	r0, r2, #0
    8d18:	1c19      	adds	r1, r3, #0
    8d1a:	4b11      	ldr	r3, [pc, #68]	; (8d60 <initPowerSupply+0xa4>)
    8d1c:	4798      	blx	r3
	ps_inst->boostPwmState = OFF;
    8d1e:	687b      	ldr	r3, [r7, #4]
    8d20:	2200      	movs	r2, #0
    8d22:	705a      	strb	r2, [r3, #1]
	
	#ifdef HIGH_PERFORMANCE
	bulk_voltage_max = BULK_VOLTAGE_48V_MAX;
    8d24:	4b0f      	ldr	r3, [pc, #60]	; (8d64 <initPowerSupply+0xa8>)
    8d26:	2231      	movs	r2, #49	; 0x31
    8d28:	701a      	strb	r2, [r3, #0]
	bulk_voltage_nom = BULK_VOLTAGE_48V_NOM;
    8d2a:	4b0f      	ldr	r3, [pc, #60]	; (8d68 <initPowerSupply+0xac>)
    8d2c:	2230      	movs	r2, #48	; 0x30
    8d2e:	701a      	strb	r2, [r3, #0]
	bulk_voltage_min = BULK_VOLTAGE_48V_MIN;
    8d30:	4b0e      	ldr	r3, [pc, #56]	; (8d6c <initPowerSupply+0xb0>)
    8d32:	222f      	movs	r2, #47	; 0x2f
    8d34:	701a      	strb	r2, [r3, #0]
	boost_idx_offset = 0;	// hp boost table starts at 48V
    8d36:	4b0e      	ldr	r3, [pc, #56]	; (8d70 <initPowerSupply+0xb4>)
    8d38:	2200      	movs	r2, #0
    8d3a:	701a      	strb	r2, [r3, #0]
							// if ctl brd hw is permanently change to 36V scaling,
							// then this should be changed to match below
	#endif
		
	return;
    8d3c:	46c0      	nop			; (mov r8, r8)
}
    8d3e:	46bd      	mov	sp, r7
    8d40:	b002      	add	sp, #8
    8d42:	bd80      	pop	{r7, pc}
    8d44:	0000ffff 	.word	0x0000ffff
    8d48:	20000a84 	.word	0x20000a84
    8d4c:	41380000 	.word	0x41380000
    8d50:	41880000 	.word	0x41880000
    8d54:	20000d64 	.word	0x20000d64
    8d58:	417c0000 	.word	0x417c0000
    8d5c:	41cc0000 	.word	0x41cc0000
    8d60:	0000ee79 	.word	0x0000ee79
    8d64:	20000168 	.word	0x20000168
    8d68:	20000169 	.word	0x20000169
    8d6c:	2000016a 	.word	0x2000016a
    8d70:	2000036c 	.word	0x2000036c

00008d74 <initFan>:

void initFan(struct fan_vars *fan_inst)
{
    8d74:	b580      	push	{r7, lr}
    8d76:	b082      	sub	sp, #8
    8d78:	af00      	add	r7, sp, #0
    8d7a:	6078      	str	r0, [r7, #4]
	if (fan_inst->fanType==Sanyo_9ga0912p4g03)
    8d7c:	687a      	ldr	r2, [r7, #4]
    8d7e:	2348      	movs	r3, #72	; 0x48
    8d80:	5cd3      	ldrb	r3, [r2, r3]
    8d82:	2b00      	cmp	r3, #0
    8d84:	d105      	bne.n	8d92 <initFan+0x1e>
	{
		fan_inst->maxRpm = fan_sanyo_9ga0912p4g03_rpm_lookup_table[FAN_RPM_LOOKUP_TABLE_SIZE-1];
    8d86:	4ab3      	ldr	r2, [pc, #716]	; (9054 <initFan+0x2e0>)
    8d88:	23c8      	movs	r3, #200	; 0xc8
    8d8a:	5ad2      	ldrh	r2, [r2, r3]
    8d8c:	687b      	ldr	r3, [r7, #4]
    8d8e:	871a      	strh	r2, [r3, #56]	; 0x38
    8d90:	e01f      	b.n	8dd2 <initFan+0x5e>
	}
	else if (fan_inst->fanType==Sanyo_9s0912p4f011)
    8d92:	687a      	ldr	r2, [r7, #4]
    8d94:	2348      	movs	r3, #72	; 0x48
    8d96:	5cd3      	ldrb	r3, [r2, r3]
    8d98:	2b01      	cmp	r3, #1
    8d9a:	d105      	bne.n	8da8 <initFan+0x34>
	{
		fan_inst->maxRpm = fan_sanyo_9s0912p4f011_rpm_lookup_table[FAN_RPM_LOOKUP_TABLE_SIZE-1];
    8d9c:	4aae      	ldr	r2, [pc, #696]	; (9058 <initFan+0x2e4>)
    8d9e:	23c8      	movs	r3, #200	; 0xc8
    8da0:	5ad2      	ldrh	r2, [r2, r3]
    8da2:	687b      	ldr	r3, [r7, #4]
    8da4:	871a      	strh	r2, [r3, #56]	; 0x38
    8da6:	e014      	b.n	8dd2 <initFan+0x5e>
	}
	else if (fan_inst->fanType==Sanyo_9ga0912p4j03)
    8da8:	687a      	ldr	r2, [r7, #4]
    8daa:	2348      	movs	r3, #72	; 0x48
    8dac:	5cd3      	ldrb	r3, [r2, r3]
    8dae:	2b02      	cmp	r3, #2
    8db0:	d105      	bne.n	8dbe <initFan+0x4a>
	{
		fan_inst->maxRpm = fan_sanyo_9ga0912p4j03_rpm_lookup_table[FAN_RPM_LOOKUP_TABLE_SIZE-1];
    8db2:	4aaa      	ldr	r2, [pc, #680]	; (905c <initFan+0x2e8>)
    8db4:	23c8      	movs	r3, #200	; 0xc8
    8db6:	5ad2      	ldrh	r2, [r2, r3]
    8db8:	687b      	ldr	r3, [r7, #4]
    8dba:	871a      	strh	r2, [r3, #56]	; 0x38
    8dbc:	e009      	b.n	8dd2 <initFan+0x5e>
	}
	else if (fan_inst->fanType==Nidec_v12e12bmm9)
    8dbe:	687a      	ldr	r2, [r7, #4]
    8dc0:	2348      	movs	r3, #72	; 0x48
    8dc2:	5cd3      	ldrb	r3, [r2, r3]
    8dc4:	2b03      	cmp	r3, #3
    8dc6:	d104      	bne.n	8dd2 <initFan+0x5e>
	{
		fan_inst->maxRpm = fan_nidec_v12e12bmm9_rpm_lookup_table[FAN_RPM_LOOKUP_TABLE_SIZE-1];
    8dc8:	4aa5      	ldr	r2, [pc, #660]	; (9060 <initFan+0x2ec>)
    8dca:	23c8      	movs	r3, #200	; 0xc8
    8dcc:	5ad2      	ldrh	r2, [r2, r3]
    8dce:	687b      	ldr	r3, [r7, #4]
    8dd0:	871a      	strh	r2, [r3, #56]	; 0x38
	}
	fan_inst->speedPwmDutyRegVal = MAX_FAN_PWM_DUTY_REG_VAL;
    8dd2:	687b      	ldr	r3, [r7, #4]
    8dd4:	4aa3      	ldr	r2, [pc, #652]	; (9064 <initFan+0x2f0>)
    8dd6:	605a      	str	r2, [r3, #4]
	//fan_inst->Vtop = DEFAULT_FAN_VTOP;
	//fan_inst->Vbottom = DEFAULT_FAN_VTOP;
	fan_inst->minDuty = DEFAULT_FAN_MIN_DUTY;
    8dd8:	687b      	ldr	r3, [r7, #4]
    8dda:	2200      	movs	r2, #0
    8ddc:	609a      	str	r2, [r3, #8]
	fan_inst->maxDuty = DEFAULT_FAN_MAX_DUTY;
    8dde:	687b      	ldr	r3, [r7, #4]
    8de0:	4aa1      	ldr	r2, [pc, #644]	; (9068 <initFan+0x2f4>)
    8de2:	60da      	str	r2, [r3, #12]
	fan_inst->rpm = 0;
    8de4:	687b      	ldr	r3, [r7, #4]
    8de6:	2200      	movs	r2, #0
    8de8:	611a      	str	r2, [r3, #16]
	fan_inst->state = OFF;
    8dea:	687b      	ldr	r3, [r7, #4]
    8dec:	2200      	movs	r2, #0
    8dee:	755a      	strb	r2, [r3, #21]
	fan_inst->targetDutyPercent = 100.0;
    8df0:	687b      	ldr	r3, [r7, #4]
    8df2:	2264      	movs	r2, #100	; 0x64
    8df4:	619a      	str	r2, [r3, #24]
	fan_inst->rc = FAN_RESPONSE_TIMECONSTANT;
    8df6:	687b      	ldr	r3, [r7, #4]
    8df8:	4a9c      	ldr	r2, [pc, #624]	; (906c <initFan+0x2f8>)
    8dfa:	635a      	str	r2, [r3, #52]	; 0x34
	fan_inst->fanRpmSetting = 0;
    8dfc:	687b      	ldr	r3, [r7, #4]
    8dfe:	2200      	movs	r2, #0
    8e00:	63da      	str	r2, [r3, #60]	; 0x3c
	fan_inst->fanSpdUprLim = DEFAULT_FAN_MAX_RPM;
    8e02:	687b      	ldr	r3, [r7, #4]
    8e04:	4a9a      	ldr	r2, [pc, #616]	; (9070 <initFan+0x2fc>)
    8e06:	641a      	str	r2, [r3, #64]	; 0x40
	fan_inst->fanSpdLwrLim = 0;	
    8e08:	687b      	ldr	r3, [r7, #4]
    8e0a:	2200      	movs	r2, #0
    8e0c:	645a      	str	r2, [r3, #68]	; 0x44
	fan_inst->maxRpm = DEFAULT_FAN_MAX_RPM;
    8e0e:	687b      	ldr	r3, [r7, #4]
    8e10:	4a98      	ldr	r2, [pc, #608]	; (9074 <initFan+0x300>)
    8e12:	871a      	strh	r2, [r3, #56]	; 0x38

	if		(fan_inst == &fan1) { fan_inst->fan_id = 1; }
    8e14:	687a      	ldr	r2, [r7, #4]
    8e16:	4b98      	ldr	r3, [pc, #608]	; (9078 <initFan+0x304>)
    8e18:	429a      	cmp	r2, r3
    8e1a:	d103      	bne.n	8e24 <initFan+0xb0>
    8e1c:	687b      	ldr	r3, [r7, #4]
    8e1e:	2201      	movs	r2, #1
    8e20:	701a      	strb	r2, [r3, #0]
    8e22:	e036      	b.n	8e92 <initFan+0x11e>
	else if (fan_inst == &fan2) { fan_inst->fan_id = 2; }
    8e24:	687a      	ldr	r2, [r7, #4]
    8e26:	4b95      	ldr	r3, [pc, #596]	; (907c <initFan+0x308>)
    8e28:	429a      	cmp	r2, r3
    8e2a:	d103      	bne.n	8e34 <initFan+0xc0>
    8e2c:	687b      	ldr	r3, [r7, #4]
    8e2e:	2202      	movs	r2, #2
    8e30:	701a      	strb	r2, [r3, #0]
    8e32:	e02e      	b.n	8e92 <initFan+0x11e>
	else if (fan_inst == &fan3) { fan_inst->fan_id = 3; }
    8e34:	687a      	ldr	r2, [r7, #4]
    8e36:	4b92      	ldr	r3, [pc, #584]	; (9080 <initFan+0x30c>)
    8e38:	429a      	cmp	r2, r3
    8e3a:	d103      	bne.n	8e44 <initFan+0xd0>
    8e3c:	687b      	ldr	r3, [r7, #4]
    8e3e:	2203      	movs	r2, #3
    8e40:	701a      	strb	r2, [r3, #0]
    8e42:	e026      	b.n	8e92 <initFan+0x11e>
	else if (fan_inst == &fan4) { fan_inst->fan_id = 4; }
    8e44:	687a      	ldr	r2, [r7, #4]
    8e46:	4b8f      	ldr	r3, [pc, #572]	; (9084 <initFan+0x310>)
    8e48:	429a      	cmp	r2, r3
    8e4a:	d103      	bne.n	8e54 <initFan+0xe0>
    8e4c:	687b      	ldr	r3, [r7, #4]
    8e4e:	2204      	movs	r2, #4
    8e50:	701a      	strb	r2, [r3, #0]
    8e52:	e01e      	b.n	8e92 <initFan+0x11e>
	else if (fan_inst == &fan5) { fan_inst->fan_id = 5; }
    8e54:	687a      	ldr	r2, [r7, #4]
    8e56:	4b8c      	ldr	r3, [pc, #560]	; (9088 <initFan+0x314>)
    8e58:	429a      	cmp	r2, r3
    8e5a:	d103      	bne.n	8e64 <initFan+0xf0>
    8e5c:	687b      	ldr	r3, [r7, #4]
    8e5e:	2205      	movs	r2, #5
    8e60:	701a      	strb	r2, [r3, #0]
    8e62:	e016      	b.n	8e92 <initFan+0x11e>
	else if (fan_inst == &fan6) { fan_inst->fan_id = 6; }
    8e64:	687a      	ldr	r2, [r7, #4]
    8e66:	4b89      	ldr	r3, [pc, #548]	; (908c <initFan+0x318>)
    8e68:	429a      	cmp	r2, r3
    8e6a:	d103      	bne.n	8e74 <initFan+0x100>
    8e6c:	687b      	ldr	r3, [r7, #4]
    8e6e:	2206      	movs	r2, #6
    8e70:	701a      	strb	r2, [r3, #0]
    8e72:	e00e      	b.n	8e92 <initFan+0x11e>
	else if (fan_inst == &fan7) { fan_inst->fan_id = 7; }
    8e74:	687a      	ldr	r2, [r7, #4]
    8e76:	4b86      	ldr	r3, [pc, #536]	; (9090 <initFan+0x31c>)
    8e78:	429a      	cmp	r2, r3
    8e7a:	d103      	bne.n	8e84 <initFan+0x110>
    8e7c:	687b      	ldr	r3, [r7, #4]
    8e7e:	2207      	movs	r2, #7
    8e80:	701a      	strb	r2, [r3, #0]
    8e82:	e006      	b.n	8e92 <initFan+0x11e>
	else if (fan_inst == &fan8) { fan_inst->fan_id = 8; }						
    8e84:	687a      	ldr	r2, [r7, #4]
    8e86:	4b83      	ldr	r3, [pc, #524]	; (9094 <initFan+0x320>)
    8e88:	429a      	cmp	r2, r3
    8e8a:	d102      	bne.n	8e92 <initFan+0x11e>
    8e8c:	687b      	ldr	r3, [r7, #4]
    8e8e:	2208      	movs	r2, #8
    8e90:	701a      	strb	r2, [r3, #0]

	fan_inst->spd1  =  fan_limit_table[fan_inst->fan_id-1][0];
    8e92:	687b      	ldr	r3, [r7, #4]
    8e94:	781b      	ldrb	r3, [r3, #0]
    8e96:	1e5a      	subs	r2, r3, #1
    8e98:	497f      	ldr	r1, [pc, #508]	; (9098 <initFan+0x324>)
    8e9a:	1c13      	adds	r3, r2, #0
    8e9c:	011b      	lsls	r3, r3, #4
    8e9e:	189b      	adds	r3, r3, r2
    8ea0:	5c59      	ldrb	r1, [r3, r1]
    8ea2:	687a      	ldr	r2, [r7, #4]
    8ea4:	2322      	movs	r3, #34	; 0x22
    8ea6:	54d1      	strb	r1, [r2, r3]
	fan_inst->lim1p =  fan_limit_table[fan_inst->fan_id-1][1];
    8ea8:	687b      	ldr	r3, [r7, #4]
    8eaa:	781b      	ldrb	r3, [r3, #0]
    8eac:	1e5a      	subs	r2, r3, #1
    8eae:	497a      	ldr	r1, [pc, #488]	; (9098 <initFan+0x324>)
    8eb0:	1c13      	adds	r3, r2, #0
    8eb2:	011b      	lsls	r3, r3, #4
    8eb4:	189b      	adds	r3, r3, r2
    8eb6:	18cb      	adds	r3, r1, r3
    8eb8:	3301      	adds	r3, #1
    8eba:	7819      	ldrb	r1, [r3, #0]
    8ebc:	687a      	ldr	r2, [r7, #4]
    8ebe:	2321      	movs	r3, #33	; 0x21
    8ec0:	54d1      	strb	r1, [r2, r3]
	fan_inst->lim1  =  fan_limit_table[fan_inst->fan_id-1][2];
    8ec2:	687b      	ldr	r3, [r7, #4]
    8ec4:	781b      	ldrb	r3, [r3, #0]
    8ec6:	1e5a      	subs	r2, r3, #1
    8ec8:	4973      	ldr	r1, [pc, #460]	; (9098 <initFan+0x324>)
    8eca:	1c13      	adds	r3, r2, #0
    8ecc:	011b      	lsls	r3, r3, #4
    8ece:	189b      	adds	r3, r3, r2
    8ed0:	18cb      	adds	r3, r1, r3
    8ed2:	3302      	adds	r3, #2
    8ed4:	7819      	ldrb	r1, [r3, #0]
    8ed6:	687a      	ldr	r2, [r7, #4]
    8ed8:	2320      	movs	r3, #32
    8eda:	54d1      	strb	r1, [r2, r3]
	fan_inst->spd2  =  fan_limit_table[fan_inst->fan_id-1][3];
    8edc:	687b      	ldr	r3, [r7, #4]
    8ede:	781b      	ldrb	r3, [r3, #0]
    8ee0:	1e5a      	subs	r2, r3, #1
    8ee2:	496d      	ldr	r1, [pc, #436]	; (9098 <initFan+0x324>)
    8ee4:	1c13      	adds	r3, r2, #0
    8ee6:	011b      	lsls	r3, r3, #4
    8ee8:	189b      	adds	r3, r3, r2
    8eea:	18cb      	adds	r3, r1, r3
    8eec:	3303      	adds	r3, #3
    8eee:	7819      	ldrb	r1, [r3, #0]
    8ef0:	687a      	ldr	r2, [r7, #4]
    8ef2:	2325      	movs	r3, #37	; 0x25
    8ef4:	54d1      	strb	r1, [r2, r3]
	fan_inst->lim2p =  fan_limit_table[fan_inst->fan_id-1][4];
    8ef6:	687b      	ldr	r3, [r7, #4]
    8ef8:	781b      	ldrb	r3, [r3, #0]
    8efa:	1e5a      	subs	r2, r3, #1
    8efc:	4966      	ldr	r1, [pc, #408]	; (9098 <initFan+0x324>)
    8efe:	1c13      	adds	r3, r2, #0
    8f00:	011b      	lsls	r3, r3, #4
    8f02:	189b      	adds	r3, r3, r2
    8f04:	18cb      	adds	r3, r1, r3
    8f06:	3304      	adds	r3, #4
    8f08:	7819      	ldrb	r1, [r3, #0]
    8f0a:	687a      	ldr	r2, [r7, #4]
    8f0c:	2324      	movs	r3, #36	; 0x24
    8f0e:	54d1      	strb	r1, [r2, r3]
	fan_inst->lim2  =  fan_limit_table[fan_inst->fan_id-1][5];
    8f10:	687b      	ldr	r3, [r7, #4]
    8f12:	781b      	ldrb	r3, [r3, #0]
    8f14:	1e5a      	subs	r2, r3, #1
    8f16:	4960      	ldr	r1, [pc, #384]	; (9098 <initFan+0x324>)
    8f18:	1c13      	adds	r3, r2, #0
    8f1a:	011b      	lsls	r3, r3, #4
    8f1c:	189b      	adds	r3, r3, r2
    8f1e:	18cb      	adds	r3, r1, r3
    8f20:	3305      	adds	r3, #5
    8f22:	7819      	ldrb	r1, [r3, #0]
    8f24:	687a      	ldr	r2, [r7, #4]
    8f26:	2323      	movs	r3, #35	; 0x23
    8f28:	54d1      	strb	r1, [r2, r3]
	fan_inst->spd3  =  fan_limit_table[fan_inst->fan_id-1][6];
    8f2a:	687b      	ldr	r3, [r7, #4]
    8f2c:	781b      	ldrb	r3, [r3, #0]
    8f2e:	1e5a      	subs	r2, r3, #1
    8f30:	4959      	ldr	r1, [pc, #356]	; (9098 <initFan+0x324>)
    8f32:	1c13      	adds	r3, r2, #0
    8f34:	011b      	lsls	r3, r3, #4
    8f36:	189b      	adds	r3, r3, r2
    8f38:	18cb      	adds	r3, r1, r3
    8f3a:	3306      	adds	r3, #6
    8f3c:	7819      	ldrb	r1, [r3, #0]
    8f3e:	687a      	ldr	r2, [r7, #4]
    8f40:	2328      	movs	r3, #40	; 0x28
    8f42:	54d1      	strb	r1, [r2, r3]
	fan_inst->lim3p =  fan_limit_table[fan_inst->fan_id-1][7];
    8f44:	687b      	ldr	r3, [r7, #4]
    8f46:	781b      	ldrb	r3, [r3, #0]
    8f48:	1e5a      	subs	r2, r3, #1
    8f4a:	4953      	ldr	r1, [pc, #332]	; (9098 <initFan+0x324>)
    8f4c:	1c13      	adds	r3, r2, #0
    8f4e:	011b      	lsls	r3, r3, #4
    8f50:	189b      	adds	r3, r3, r2
    8f52:	18cb      	adds	r3, r1, r3
    8f54:	3307      	adds	r3, #7
    8f56:	7819      	ldrb	r1, [r3, #0]
    8f58:	687a      	ldr	r2, [r7, #4]
    8f5a:	2327      	movs	r3, #39	; 0x27
    8f5c:	54d1      	strb	r1, [r2, r3]
	fan_inst->lim3  =  fan_limit_table[fan_inst->fan_id-1][8];
    8f5e:	687b      	ldr	r3, [r7, #4]
    8f60:	781b      	ldrb	r3, [r3, #0]
    8f62:	1e5a      	subs	r2, r3, #1
    8f64:	494c      	ldr	r1, [pc, #304]	; (9098 <initFan+0x324>)
    8f66:	1c13      	adds	r3, r2, #0
    8f68:	011b      	lsls	r3, r3, #4
    8f6a:	189b      	adds	r3, r3, r2
    8f6c:	18cb      	adds	r3, r1, r3
    8f6e:	3308      	adds	r3, #8
    8f70:	7819      	ldrb	r1, [r3, #0]
    8f72:	687a      	ldr	r2, [r7, #4]
    8f74:	2326      	movs	r3, #38	; 0x26
    8f76:	54d1      	strb	r1, [r2, r3]
	fan_inst->spd4  =  fan_limit_table[fan_inst->fan_id-1][9];
    8f78:	687b      	ldr	r3, [r7, #4]
    8f7a:	781b      	ldrb	r3, [r3, #0]
    8f7c:	1e5a      	subs	r2, r3, #1
    8f7e:	4946      	ldr	r1, [pc, #280]	; (9098 <initFan+0x324>)
    8f80:	1c13      	adds	r3, r2, #0
    8f82:	011b      	lsls	r3, r3, #4
    8f84:	189b      	adds	r3, r3, r2
    8f86:	18cb      	adds	r3, r1, r3
    8f88:	3309      	adds	r3, #9
    8f8a:	7819      	ldrb	r1, [r3, #0]
    8f8c:	687a      	ldr	r2, [r7, #4]
    8f8e:	232b      	movs	r3, #43	; 0x2b
    8f90:	54d1      	strb	r1, [r2, r3]
	fan_inst->lim4p =  fan_limit_table[fan_inst->fan_id-1][10];
    8f92:	687b      	ldr	r3, [r7, #4]
    8f94:	781b      	ldrb	r3, [r3, #0]
    8f96:	1e5a      	subs	r2, r3, #1
    8f98:	493f      	ldr	r1, [pc, #252]	; (9098 <initFan+0x324>)
    8f9a:	1c13      	adds	r3, r2, #0
    8f9c:	011b      	lsls	r3, r3, #4
    8f9e:	189b      	adds	r3, r3, r2
    8fa0:	18cb      	adds	r3, r1, r3
    8fa2:	330a      	adds	r3, #10
    8fa4:	7819      	ldrb	r1, [r3, #0]
    8fa6:	687a      	ldr	r2, [r7, #4]
    8fa8:	232a      	movs	r3, #42	; 0x2a
    8faa:	54d1      	strb	r1, [r2, r3]
	fan_inst->lim4  =  fan_limit_table[fan_inst->fan_id-1][11];
    8fac:	687b      	ldr	r3, [r7, #4]
    8fae:	781b      	ldrb	r3, [r3, #0]
    8fb0:	1e5a      	subs	r2, r3, #1
    8fb2:	4939      	ldr	r1, [pc, #228]	; (9098 <initFan+0x324>)
    8fb4:	1c13      	adds	r3, r2, #0
    8fb6:	011b      	lsls	r3, r3, #4
    8fb8:	189b      	adds	r3, r3, r2
    8fba:	18cb      	adds	r3, r1, r3
    8fbc:	330b      	adds	r3, #11
    8fbe:	7819      	ldrb	r1, [r3, #0]
    8fc0:	687a      	ldr	r2, [r7, #4]
    8fc2:	2329      	movs	r3, #41	; 0x29
    8fc4:	54d1      	strb	r1, [r2, r3]
	fan_inst->spd5  =  fan_limit_table[fan_inst->fan_id-1][12];
    8fc6:	687b      	ldr	r3, [r7, #4]
    8fc8:	781b      	ldrb	r3, [r3, #0]
    8fca:	1e5a      	subs	r2, r3, #1
    8fcc:	4932      	ldr	r1, [pc, #200]	; (9098 <initFan+0x324>)
    8fce:	1c13      	adds	r3, r2, #0
    8fd0:	011b      	lsls	r3, r3, #4
    8fd2:	189b      	adds	r3, r3, r2
    8fd4:	18cb      	adds	r3, r1, r3
    8fd6:	330c      	adds	r3, #12
    8fd8:	7819      	ldrb	r1, [r3, #0]
    8fda:	687a      	ldr	r2, [r7, #4]
    8fdc:	232e      	movs	r3, #46	; 0x2e
    8fde:	54d1      	strb	r1, [r2, r3]
	fan_inst->lim5p =  fan_limit_table[fan_inst->fan_id-1][13];
    8fe0:	687b      	ldr	r3, [r7, #4]
    8fe2:	781b      	ldrb	r3, [r3, #0]
    8fe4:	1e5a      	subs	r2, r3, #1
    8fe6:	492c      	ldr	r1, [pc, #176]	; (9098 <initFan+0x324>)
    8fe8:	1c13      	adds	r3, r2, #0
    8fea:	011b      	lsls	r3, r3, #4
    8fec:	189b      	adds	r3, r3, r2
    8fee:	18cb      	adds	r3, r1, r3
    8ff0:	330d      	adds	r3, #13
    8ff2:	7819      	ldrb	r1, [r3, #0]
    8ff4:	687a      	ldr	r2, [r7, #4]
    8ff6:	232d      	movs	r3, #45	; 0x2d
    8ff8:	54d1      	strb	r1, [r2, r3]
	fan_inst->lim5  =  fan_limit_table[fan_inst->fan_id-1][14];
    8ffa:	687b      	ldr	r3, [r7, #4]
    8ffc:	781b      	ldrb	r3, [r3, #0]
    8ffe:	1e5a      	subs	r2, r3, #1
    9000:	4925      	ldr	r1, [pc, #148]	; (9098 <initFan+0x324>)
    9002:	1c13      	adds	r3, r2, #0
    9004:	011b      	lsls	r3, r3, #4
    9006:	189b      	adds	r3, r3, r2
    9008:	18cb      	adds	r3, r1, r3
    900a:	330e      	adds	r3, #14
    900c:	7819      	ldrb	r1, [r3, #0]
    900e:	687a      	ldr	r2, [r7, #4]
    9010:	232c      	movs	r3, #44	; 0x2c
    9012:	54d1      	strb	r1, [r2, r3]
	fan_inst->spd6  =  fan_limit_table[fan_inst->fan_id-1][15];
    9014:	687b      	ldr	r3, [r7, #4]
    9016:	781b      	ldrb	r3, [r3, #0]
    9018:	1e5a      	subs	r2, r3, #1
    901a:	491f      	ldr	r1, [pc, #124]	; (9098 <initFan+0x324>)
    901c:	1c13      	adds	r3, r2, #0
    901e:	011b      	lsls	r3, r3, #4
    9020:	189b      	adds	r3, r3, r2
    9022:	18cb      	adds	r3, r1, r3
    9024:	330f      	adds	r3, #15
    9026:	7819      	ldrb	r1, [r3, #0]
    9028:	687a      	ldr	r2, [r7, #4]
    902a:	232f      	movs	r3, #47	; 0x2f
    902c:	54d1      	strb	r1, [r2, r3]
	fan_inst->k		=  fan_limit_table[fan_inst->fan_id-1][16];
    902e:	687b      	ldr	r3, [r7, #4]
    9030:	781b      	ldrb	r3, [r3, #0]
    9032:	1e5a      	subs	r2, r3, #1
    9034:	4918      	ldr	r1, [pc, #96]	; (9098 <initFan+0x324>)
    9036:	1c13      	adds	r3, r2, #0
    9038:	011b      	lsls	r3, r3, #4
    903a:	189b      	adds	r3, r3, r2
    903c:	18cb      	adds	r3, r1, r3
    903e:	3310      	adds	r3, #16
    9040:	781a      	ldrb	r2, [r3, #0]
    9042:	687b      	ldr	r3, [r7, #4]
    9044:	751a      	strb	r2, [r3, #20]
		
	fan_inst->fan_state = FAN_STATE_S6;
    9046:	687b      	ldr	r3, [r7, #4]
    9048:	2206      	movs	r2, #6
    904a:	77da      	strb	r2, [r3, #31]
}
    904c:	46bd      	mov	sp, r7
    904e:	b002      	add	sp, #8
    9050:	bd80      	pop	{r7, pc}
    9052:	46c0      	nop			; (mov r8, r8)
    9054:	0002349c 	.word	0x0002349c
    9058:	000233d0 	.word	0x000233d0
    905c:	00023568 	.word	0x00023568
    9060:	00023634 	.word	0x00023634
    9064:	0000ffff 	.word	0x0000ffff
    9068:	42c80000 	.word	0x42c80000
    906c:	40a00000 	.word	0x40a00000
    9070:	45898000 	.word	0x45898000
    9074:	00001130 	.word	0x00001130
    9078:	20000e84 	.word	0x20000e84
    907c:	20000c58 	.word	0x20000c58
    9080:	20000d18 	.word	0x20000d18
    9084:	20000adc 	.word	0x20000adc
    9088:	20000b8c 	.word	0x20000b8c
    908c:	20000914 	.word	0x20000914
    9090:	20000dc0 	.word	0x20000dc0
    9094:	20000b40 	.word	0x20000b40
    9098:	00023700 	.word	0x00023700

0000909c <initDbgCtrlFunctions>:

void initDbgCtrlFunctions()
{
    909c:	b580      	push	{r7, lr}
    909e:	af00      	add	r7, sp, #0
	// define chamber functions
	fChamber[0] = set_setPointValue;
    90a0:	4b52      	ldr	r3, [pc, #328]	; (91ec <initDbgCtrlFunctions+0x150>)
    90a2:	4a53      	ldr	r2, [pc, #332]	; (91f0 <initDbgCtrlFunctions+0x154>)
    90a4:	601a      	str	r2, [r3, #0]
	fChamber[1] = set_setRejectLimit;
    90a6:	4b51      	ldr	r3, [pc, #324]	; (91ec <initDbgCtrlFunctions+0x150>)
    90a8:	4a52      	ldr	r2, [pc, #328]	; (91f4 <initDbgCtrlFunctions+0x158>)
    90aa:	605a      	str	r2, [r3, #4]
	fChamber[2] = set_setRejectLimitCritical;
    90ac:	4b4f      	ldr	r3, [pc, #316]	; (91ec <initDbgCtrlFunctions+0x150>)
    90ae:	4a52      	ldr	r2, [pc, #328]	; (91f8 <initDbgCtrlFunctions+0x15c>)
    90b0:	609a      	str	r2, [r3, #8]
	fChamber[3] = set_setRejectDeadband;
    90b2:	4b4e      	ldr	r3, [pc, #312]	; (91ec <initDbgCtrlFunctions+0x150>)
    90b4:	4a51      	ldr	r2, [pc, #324]	; (91fc <initDbgCtrlFunctions+0x160>)
    90b6:	60da      	str	r2, [r3, #12]
	fChamber[4] = set_setDeadband;
    90b8:	4b4c      	ldr	r3, [pc, #304]	; (91ec <initDbgCtrlFunctions+0x150>)
    90ba:	4a51      	ldr	r2, [pc, #324]	; (9200 <initDbgCtrlFunctions+0x164>)
    90bc:	611a      	str	r2, [r3, #16]
	fChamber[5] = set_setDeadbandLow;
    90be:	4b4b      	ldr	r3, [pc, #300]	; (91ec <initDbgCtrlFunctions+0x150>)
    90c0:	4a50      	ldr	r2, [pc, #320]	; (9204 <initDbgCtrlFunctions+0x168>)
    90c2:	615a      	str	r2, [r3, #20]
	fChamber[6] = set_setGlycolTemp;
    90c4:	4b49      	ldr	r3, [pc, #292]	; (91ec <initDbgCtrlFunctions+0x150>)
    90c6:	4a50      	ldr	r2, [pc, #320]	; (9208 <initDbgCtrlFunctions+0x16c>)
    90c8:	619a      	str	r2, [r3, #24]
	fChamber[7] = set_setChamberTemp;
    90ca:	4b48      	ldr	r3, [pc, #288]	; (91ec <initDbgCtrlFunctions+0x150>)
    90cc:	4a4f      	ldr	r2, [pc, #316]	; (920c <initDbgCtrlFunctions+0x170>)
    90ce:	61da      	str	r2, [r3, #28]
	fChamber[8] = set_setRejectTemp;
    90d0:	4b46      	ldr	r3, [pc, #280]	; (91ec <initDbgCtrlFunctions+0x150>)
    90d2:	4a4f      	ldr	r2, [pc, #316]	; (9210 <initDbgCtrlFunctions+0x174>)
    90d4:	621a      	str	r2, [r3, #32]
	fChamber[9] = set_setGlycolOffset;
    90d6:	4b45      	ldr	r3, [pc, #276]	; (91ec <initDbgCtrlFunctions+0x150>)
    90d8:	4a4e      	ldr	r2, [pc, #312]	; (9214 <initDbgCtrlFunctions+0x178>)
    90da:	625a      	str	r2, [r3, #36]	; 0x24
	fChamber[10] = set_setChamberOffset;
    90dc:	4b43      	ldr	r3, [pc, #268]	; (91ec <initDbgCtrlFunctions+0x150>)
    90de:	4a4e      	ldr	r2, [pc, #312]	; (9218 <initDbgCtrlFunctions+0x17c>)
    90e0:	629a      	str	r2, [r3, #40]	; 0x28
	fChamber[11] = set_setModeState;
    90e2:	4b42      	ldr	r3, [pc, #264]	; (91ec <initDbgCtrlFunctions+0x150>)
    90e4:	4a4d      	ldr	r2, [pc, #308]	; (921c <initDbgCtrlFunctions+0x180>)
    90e6:	62da      	str	r2, [r3, #44]	; 0x2c
	
	// define power supply functions
	fPower[0] = set_setVarqVoltage;
    90e8:	4b4d      	ldr	r3, [pc, #308]	; (9220 <initDbgCtrlFunctions+0x184>)
    90ea:	4a4e      	ldr	r2, [pc, #312]	; (9224 <initDbgCtrlFunctions+0x188>)
    90ec:	601a      	str	r2, [r3, #0]
	fPower[1] = set_setVmaxCOP;
    90ee:	4b4c      	ldr	r3, [pc, #304]	; (9220 <initDbgCtrlFunctions+0x184>)
    90f0:	4a4d      	ldr	r2, [pc, #308]	; (9228 <initDbgCtrlFunctions+0x18c>)
    90f2:	605a      	str	r2, [r3, #4]
	fPower[2] = set_setMaxBulkPower;
    90f4:	4b4a      	ldr	r3, [pc, #296]	; (9220 <initDbgCtrlFunctions+0x184>)
    90f6:	4a4d      	ldr	r2, [pc, #308]	; (922c <initDbgCtrlFunctions+0x190>)
    90f8:	609a      	str	r2, [r3, #8]
	fPower[3] = readPhpVoltage;
    90fa:	4b49      	ldr	r3, [pc, #292]	; (9220 <initDbgCtrlFunctions+0x184>)
    90fc:	4a4c      	ldr	r2, [pc, #304]	; (9230 <initDbgCtrlFunctions+0x194>)
    90fe:	60da      	str	r2, [r3, #12]
	fPower[4] = readPhpCurrent;
    9100:	4b47      	ldr	r3, [pc, #284]	; (9220 <initDbgCtrlFunctions+0x184>)
    9102:	4a4c      	ldr	r2, [pc, #304]	; (9234 <initDbgCtrlFunctions+0x198>)
    9104:	611a      	str	r2, [r3, #16]
	fPower[5] = readBulkVoltage;
    9106:	4b46      	ldr	r3, [pc, #280]	; (9220 <initDbgCtrlFunctions+0x184>)
    9108:	4a4b      	ldr	r2, [pc, #300]	; (9238 <initDbgCtrlFunctions+0x19c>)
    910a:	615a      	str	r2, [r3, #20]
	fPower[6] = set_setDesiredVoltage;
    910c:	4b44      	ldr	r3, [pc, #272]	; (9220 <initDbgCtrlFunctions+0x184>)
    910e:	4a4b      	ldr	r2, [pc, #300]	; (923c <initDbgCtrlFunctions+0x1a0>)
    9110:	619a      	str	r2, [r3, #24]
	fPower[7] = readLogicVoltage;
    9112:	4b43      	ldr	r3, [pc, #268]	; (9220 <initDbgCtrlFunctions+0x184>)
    9114:	4a4a      	ldr	r2, [pc, #296]	; (9240 <initDbgCtrlFunctions+0x1a4>)
    9116:	61da      	str	r2, [r3, #28]
	fPower[8] = readStandbyVoltage;
    9118:	4b41      	ldr	r3, [pc, #260]	; (9220 <initDbgCtrlFunctions+0x184>)
    911a:	4a4a      	ldr	r2, [pc, #296]	; (9244 <initDbgCtrlFunctions+0x1a8>)
    911c:	621a      	str	r2, [r3, #32]
	fPower[9] = readBatteryVoltage;
    911e:	4b40      	ldr	r3, [pc, #256]	; (9220 <initDbgCtrlFunctions+0x184>)
    9120:	4a49      	ldr	r2, [pc, #292]	; (9248 <initDbgCtrlFunctions+0x1ac>)
    9122:	625a      	str	r2, [r3, #36]	; 0x24
	fPower[10] = readPhpVoltage2;
    9124:	4b3e      	ldr	r3, [pc, #248]	; (9220 <initDbgCtrlFunctions+0x184>)
    9126:	4a49      	ldr	r2, [pc, #292]	; (924c <initDbgCtrlFunctions+0x1b0>)
    9128:	629a      	str	r2, [r3, #40]	; 0x28
	fPower[11] = readPhpCurrent2;
    912a:	4b3d      	ldr	r3, [pc, #244]	; (9220 <initDbgCtrlFunctions+0x184>)
    912c:	4a48      	ldr	r2, [pc, #288]	; (9250 <initDbgCtrlFunctions+0x1b4>)
    912e:	62da      	str	r2, [r3, #44]	; 0x2c
	fPower[12] = set_setEnablePcp;
    9130:	4b3b      	ldr	r3, [pc, #236]	; (9220 <initDbgCtrlFunctions+0x184>)
    9132:	4a48      	ldr	r2, [pc, #288]	; (9254 <initDbgCtrlFunctions+0x1b8>)
    9134:	631a      	str	r2, [r3, #48]	; 0x30
	
	// define fan functions
	fFan[0] = set_setFan1;
    9136:	4b48      	ldr	r3, [pc, #288]	; (9258 <initDbgCtrlFunctions+0x1bc>)
    9138:	4a48      	ldr	r2, [pc, #288]	; (925c <initDbgCtrlFunctions+0x1c0>)
    913a:	601a      	str	r2, [r3, #0]
	fFan[1] = fNoAction;
    913c:	4b46      	ldr	r3, [pc, #280]	; (9258 <initDbgCtrlFunctions+0x1bc>)
    913e:	4a48      	ldr	r2, [pc, #288]	; (9260 <initDbgCtrlFunctions+0x1c4>)
    9140:	605a      	str	r2, [r3, #4]
	fFan[2] = fNoAction;
    9142:	4b45      	ldr	r3, [pc, #276]	; (9258 <initDbgCtrlFunctions+0x1bc>)
    9144:	4a46      	ldr	r2, [pc, #280]	; (9260 <initDbgCtrlFunctions+0x1c4>)
    9146:	609a      	str	r2, [r3, #8]
	fFan[3] = set_setFanMin;
    9148:	4b43      	ldr	r3, [pc, #268]	; (9258 <initDbgCtrlFunctions+0x1bc>)
    914a:	4a46      	ldr	r2, [pc, #280]	; (9264 <initDbgCtrlFunctions+0x1c8>)
    914c:	60da      	str	r2, [r3, #12]
	fFan[4] = set_setFanMax;
    914e:	4b42      	ldr	r3, [pc, #264]	; (9258 <initDbgCtrlFunctions+0x1bc>)
    9150:	4a45      	ldr	r2, [pc, #276]	; (9268 <initDbgCtrlFunctions+0x1cc>)
    9152:	611a      	str	r2, [r3, #16]
	fFan[5] = set_setFanRPM1;
    9154:	4b40      	ldr	r3, [pc, #256]	; (9258 <initDbgCtrlFunctions+0x1bc>)
    9156:	4a45      	ldr	r2, [pc, #276]	; (926c <initDbgCtrlFunctions+0x1d0>)
    9158:	615a      	str	r2, [r3, #20]
	fFan[6] = set_setFanState;
    915a:	4b3f      	ldr	r3, [pc, #252]	; (9258 <initDbgCtrlFunctions+0x1bc>)
    915c:	4a44      	ldr	r2, [pc, #272]	; (9270 <initDbgCtrlFunctions+0x1d4>)
    915e:	619a      	str	r2, [r3, #24]
	fFan[7] = set_setFan2;
    9160:	4b3d      	ldr	r3, [pc, #244]	; (9258 <initDbgCtrlFunctions+0x1bc>)
    9162:	4a44      	ldr	r2, [pc, #272]	; (9274 <initDbgCtrlFunctions+0x1d8>)
    9164:	61da      	str	r2, [r3, #28]
	fFan[8] = fNoAction;
    9166:	4b3c      	ldr	r3, [pc, #240]	; (9258 <initDbgCtrlFunctions+0x1bc>)
    9168:	4a3d      	ldr	r2, [pc, #244]	; (9260 <initDbgCtrlFunctions+0x1c4>)
    916a:	621a      	str	r2, [r3, #32]
	fFan[9] = fNoAction;
    916c:	4b3a      	ldr	r3, [pc, #232]	; (9258 <initDbgCtrlFunctions+0x1bc>)
    916e:	4a3c      	ldr	r2, [pc, #240]	; (9260 <initDbgCtrlFunctions+0x1c4>)
    9170:	625a      	str	r2, [r3, #36]	; 0x24
	fFan[10] = set_setFanMin;
    9172:	4b39      	ldr	r3, [pc, #228]	; (9258 <initDbgCtrlFunctions+0x1bc>)
    9174:	4a3b      	ldr	r2, [pc, #236]	; (9264 <initDbgCtrlFunctions+0x1c8>)
    9176:	629a      	str	r2, [r3, #40]	; 0x28
	fFan[11] = set_setFanMax;
    9178:	4b37      	ldr	r3, [pc, #220]	; (9258 <initDbgCtrlFunctions+0x1bc>)
    917a:	4a3b      	ldr	r2, [pc, #236]	; (9268 <initDbgCtrlFunctions+0x1cc>)
    917c:	62da      	str	r2, [r3, #44]	; 0x2c
	fFan[12] = set_setFanRPM2;
    917e:	4b36      	ldr	r3, [pc, #216]	; (9258 <initDbgCtrlFunctions+0x1bc>)
    9180:	4a3d      	ldr	r2, [pc, #244]	; (9278 <initDbgCtrlFunctions+0x1dc>)
    9182:	631a      	str	r2, [r3, #48]	; 0x30
	fFan[13] = set_setFanState;
    9184:	4b34      	ldr	r3, [pc, #208]	; (9258 <initDbgCtrlFunctions+0x1bc>)
    9186:	4a3a      	ldr	r2, [pc, #232]	; (9270 <initDbgCtrlFunctions+0x1d4>)
    9188:	635a      	str	r2, [r3, #52]	; 0x34
	fFan[14] = set_setFan3;
    918a:	4b33      	ldr	r3, [pc, #204]	; (9258 <initDbgCtrlFunctions+0x1bc>)
    918c:	4a3b      	ldr	r2, [pc, #236]	; (927c <initDbgCtrlFunctions+0x1e0>)
    918e:	639a      	str	r2, [r3, #56]	; 0x38
	fFan[15] = set_setFan4;
    9190:	4b31      	ldr	r3, [pc, #196]	; (9258 <initDbgCtrlFunctions+0x1bc>)
    9192:	4a3b      	ldr	r2, [pc, #236]	; (9280 <initDbgCtrlFunctions+0x1e4>)
    9194:	63da      	str	r2, [r3, #60]	; 0x3c

	// define control functions
	fControl[0] = fNoAction;
    9196:	4b3b      	ldr	r3, [pc, #236]	; (9284 <initDbgCtrlFunctions+0x1e8>)
    9198:	4a31      	ldr	r2, [pc, #196]	; (9260 <initDbgCtrlFunctions+0x1c4>)
    919a:	601a      	str	r2, [r3, #0]
	fControl[1] = fNoAction;
    919c:	4b39      	ldr	r3, [pc, #228]	; (9284 <initDbgCtrlFunctions+0x1e8>)
    919e:	4a30      	ldr	r2, [pc, #192]	; (9260 <initDbgCtrlFunctions+0x1c4>)
    91a0:	605a      	str	r2, [r3, #4]
	fControl[2] = fNoAction;
    91a2:	4b38      	ldr	r3, [pc, #224]	; (9284 <initDbgCtrlFunctions+0x1e8>)
    91a4:	4a2e      	ldr	r2, [pc, #184]	; (9260 <initDbgCtrlFunctions+0x1c4>)
    91a6:	609a      	str	r2, [r3, #8]
	fControl[3] = readChamberThermistorBeta;
    91a8:	4b36      	ldr	r3, [pc, #216]	; (9284 <initDbgCtrlFunctions+0x1e8>)
    91aa:	4a37      	ldr	r2, [pc, #220]	; (9288 <initDbgCtrlFunctions+0x1ec>)
    91ac:	60da      	str	r2, [r3, #12]
	fControl[4] = readRejectThermistorBeta;
    91ae:	4b35      	ldr	r3, [pc, #212]	; (9284 <initDbgCtrlFunctions+0x1e8>)
    91b0:	4a36      	ldr	r2, [pc, #216]	; (928c <initDbgCtrlFunctions+0x1f0>)
    91b2:	611a      	str	r2, [r3, #16]
	fControl[5] = readPhp1OutputDutyOffset;
    91b4:	4b33      	ldr	r3, [pc, #204]	; (9284 <initDbgCtrlFunctions+0x1e8>)
    91b6:	4a36      	ldr	r2, [pc, #216]	; (9290 <initDbgCtrlFunctions+0x1f4>)
    91b8:	615a      	str	r2, [r3, #20]
	fControl[6] = readPhp2OutputDutyOffset;
    91ba:	4b32      	ldr	r3, [pc, #200]	; (9284 <initDbgCtrlFunctions+0x1e8>)
    91bc:	4a35      	ldr	r2, [pc, #212]	; (9294 <initDbgCtrlFunctions+0x1f8>)
    91be:	619a      	str	r2, [r3, #24]
	fControl[7] = set_maxSnsErrorCount;
    91c0:	4b30      	ldr	r3, [pc, #192]	; (9284 <initDbgCtrlFunctions+0x1e8>)
    91c2:	4a35      	ldr	r2, [pc, #212]	; (9298 <initDbgCtrlFunctions+0x1fc>)
    91c4:	61da      	str	r2, [r3, #28]
	fControl[8] = set_maxFanErrorCount;
    91c6:	4b2f      	ldr	r3, [pc, #188]	; (9284 <initDbgCtrlFunctions+0x1e8>)
    91c8:	4a34      	ldr	r2, [pc, #208]	; (929c <initDbgCtrlFunctions+0x200>)
    91ca:	621a      	str	r2, [r3, #32]
	fControl[9] = set_maxPhpErrorCount;
    91cc:	4b2d      	ldr	r3, [pc, #180]	; (9284 <initDbgCtrlFunctions+0x1e8>)
    91ce:	4a34      	ldr	r2, [pc, #208]	; (92a0 <initDbgCtrlFunctions+0x204>)
    91d0:	625a      	str	r2, [r3, #36]	; 0x24
	fControl[10] = set_maxAllowedChamberTemp;
    91d2:	4b2c      	ldr	r3, [pc, #176]	; (9284 <initDbgCtrlFunctions+0x1e8>)
    91d4:	4a33      	ldr	r2, [pc, #204]	; (92a4 <initDbgCtrlFunctions+0x208>)
    91d6:	629a      	str	r2, [r3, #40]	; 0x28
	fControl[11] = set_minAllowedChamberTemp;
    91d8:	4b2a      	ldr	r3, [pc, #168]	; (9284 <initDbgCtrlFunctions+0x1e8>)
    91da:	4a33      	ldr	r2, [pc, #204]	; (92a8 <initDbgCtrlFunctions+0x20c>)
    91dc:	62da      	str	r2, [r3, #44]	; 0x2c
	fControl[12] = set_doorOpenCount1HrLimit;
    91de:	4b29      	ldr	r3, [pc, #164]	; (9284 <initDbgCtrlFunctions+0x1e8>)
    91e0:	4a32      	ldr	r2, [pc, #200]	; (92ac <initDbgCtrlFunctions+0x210>)
    91e2:	631a      	str	r2, [r3, #48]	; 0x30
	
	return;	
    91e4:	46c0      	nop			; (mov r8, r8)
    91e6:	46bd      	mov	sp, r7
    91e8:	bd80      	pop	{r7, pc}
    91ea:	46c0      	nop			; (mov r8, r8)
    91ec:	200006d8 	.word	0x200006d8
    91f0:	00000301 	.word	0x00000301
    91f4:	00000355 	.word	0x00000355
    91f8:	000003a9 	.word	0x000003a9
    91fc:	000003fd 	.word	0x000003fd
    9200:	00000451 	.word	0x00000451
    9204:	000004a5 	.word	0x000004a5
    9208:	0000114d 	.word	0x0000114d
    920c:	00000ef9 	.word	0x00000ef9
    9210:	00000f59 	.word	0x00000f59
    9214:	00000fad 	.word	0x00000fad
    9218:	000004f9 	.word	0x000004f9
    921c:	00001005 	.word	0x00001005
    9220:	200005b4 	.word	0x200005b4
    9224:	0000077d 	.word	0x0000077d
    9228:	000007d1 	.word	0x000007d1
    922c:	0000085d 	.word	0x0000085d
    9230:	000008a5 	.word	0x000008a5
    9234:	000008c9 	.word	0x000008c9
    9238:	000008ed 	.word	0x000008ed
    923c:	00001119 	.word	0x00001119
    9240:	00000911 	.word	0x00000911
    9244:	00000935 	.word	0x00000935
    9248:	00000959 	.word	0x00000959
    924c:	0000097d 	.word	0x0000097d
    9250:	000009a1 	.word	0x000009a1
    9254:	00001081 	.word	0x00001081
    9258:	20000758 	.word	0x20000758
    925c:	0000058d 	.word	0x0000058d
    9260:	0000130d 	.word	0x0000130d
    9264:	0000067d 	.word	0x0000067d
    9268:	000006d1 	.word	0x000006d1
    926c:	00000725 	.word	0x00000725
    9270:	00000825 	.word	0x00000825
    9274:	000005c1 	.word	0x000005c1
    9278:	00000751 	.word	0x00000751
    927c:	000005f5 	.word	0x000005f5
    9280:	00000639 	.word	0x00000639
    9284:	20000534 	.word	0x20000534
    9288:	00001329 	.word	0x00001329
    928c:	00001359 	.word	0x00001359
    9290:	00001389 	.word	0x00001389
    9294:	000013ad 	.word	0x000013ad
    9298:	00001181 	.word	0x00001181
    929c:	000011cd 	.word	0x000011cd
    92a0:	00001219 	.word	0x00001219
    92a4:	00001265 	.word	0x00001265
    92a8:	000012b9 	.word	0x000012b9
    92ac:	000013d1 	.word	0x000013d1

000092b0 <set_fuses>:

/************************************************************************/
/* Configuration                                                        */
/************************************************************************/
void set_fuses()
{
    92b0:	b580      	push	{r7, lr}
    92b2:	b082      	sub	sp, #8
    92b4:	af00      	add	r7, sp, #0
	bool writeFlag = false;
    92b6:	1dfb      	adds	r3, r7, #7
    92b8:	2200      	movs	r2, #0
    92ba:	701a      	strb	r2, [r3, #0]
	
	nvm_get_fuses(&fuses_settings);
    92bc:	4b0d      	ldr	r3, [pc, #52]	; (92f4 <set_fuses+0x44>)
    92be:	1c18      	adds	r0, r3, #0
    92c0:	4b0d      	ldr	r3, [pc, #52]	; (92f8 <set_fuses+0x48>)
    92c2:	4798      	blx	r3
	
	if (fuses_settings.eeprom_size != NVM_EEPROM_EMULATOR_SIZE_1024)
    92c4:	4b0b      	ldr	r3, [pc, #44]	; (92f4 <set_fuses+0x44>)
    92c6:	785b      	ldrb	r3, [r3, #1]
    92c8:	2b04      	cmp	r3, #4
    92ca:	d005      	beq.n	92d8 <set_fuses+0x28>
	{
		fuses_settings.eeprom_size = NVM_EEPROM_EMULATOR_SIZE_1024;
    92cc:	4b09      	ldr	r3, [pc, #36]	; (92f4 <set_fuses+0x44>)
    92ce:	2204      	movs	r2, #4
    92d0:	705a      	strb	r2, [r3, #1]
		writeFlag = true;
    92d2:	1dfb      	adds	r3, r7, #7
    92d4:	2201      	movs	r2, #1
    92d6:	701a      	strb	r2, [r3, #0]
	}
	
	// add more fuse settings here !!!
	
	if (writeFlag == true)
    92d8:	1dfb      	adds	r3, r7, #7
    92da:	781b      	ldrb	r3, [r3, #0]
    92dc:	2b00      	cmp	r3, #0
    92de:	d003      	beq.n	92e8 <set_fuses+0x38>
	{
		nvm_set_fuses(&fuses_settings);
    92e0:	4b04      	ldr	r3, [pc, #16]	; (92f4 <set_fuses+0x44>)
    92e2:	1c18      	adds	r0, r3, #0
    92e4:	4b05      	ldr	r3, [pc, #20]	; (92fc <set_fuses+0x4c>)
    92e6:	4798      	blx	r3
	}
	
	writeFlag = false;
    92e8:	1dfb      	adds	r3, r7, #7
    92ea:	2200      	movs	r2, #0
    92ec:	701a      	strb	r2, [r3, #0]
}
    92ee:	46bd      	mov	sp, r7
    92f0:	b002      	add	sp, #8
    92f2:	bd80      	pop	{r7, pc}
    92f4:	200008e4 	.word	0x200008e4
    92f8:	00012081 	.word	0x00012081
    92fc:	0001210d 	.word	0x0001210d

00009300 <configure_eeprom>:

void configure_eeprom(void)
{
    9300:	b590      	push	{r4, r7, lr}
    9302:	b083      	sub	sp, #12
    9304:	af00      	add	r7, sp, #0
	// Setup EEPROM emulator service
	enum status_code error_code = eeprom_emulator_init();
    9306:	1dfc      	adds	r4, r7, #7
    9308:	4b09      	ldr	r3, [pc, #36]	; (9330 <configure_eeprom+0x30>)
    930a:	4798      	blx	r3
    930c:	1c03      	adds	r3, r0, #0
    930e:	7023      	strb	r3, [r4, #0]
	if (error_code == STATUS_ERR_NO_MEMORY) {
    9310:	1dfb      	adds	r3, r7, #7
    9312:	781b      	ldrb	r3, [r3, #0]
    9314:	2b16      	cmp	r3, #22
    9316:	d100      	bne.n	931a <configure_eeprom+0x1a>
		while (true) {
			// No EEPROM section has been set in the device's fuses
		}
    9318:	e7fe      	b.n	9318 <configure_eeprom+0x18>
	}
	else if (error_code != STATUS_OK) {
    931a:	1dfb      	adds	r3, r7, #7
    931c:	781b      	ldrb	r3, [r3, #0]
    931e:	2b00      	cmp	r3, #0
    9320:	d003      	beq.n	932a <configure_eeprom+0x2a>
		// Erase the emulated EEPROM memory (assume it is unformatted or
		// irrecoverably corrupt)
		eeprom_emulator_erase_memory();
    9322:	4b04      	ldr	r3, [pc, #16]	; (9334 <configure_eeprom+0x34>)
    9324:	4798      	blx	r3
		eeprom_emulator_init();
    9326:	4b02      	ldr	r3, [pc, #8]	; (9330 <configure_eeprom+0x30>)
    9328:	4798      	blx	r3
	}
}
    932a:	46bd      	mov	sp, r7
    932c:	b003      	add	sp, #12
    932e:	bd90      	pop	{r4, r7, pc}
    9330:	0001941d 	.word	0x0001941d
    9334:	00019555 	.word	0x00019555

00009338 <floatToByteArray>:

/************************************************************************/
/* User Functions                                                       */
/************************************************************************/
uint8_t* floatToByteArray(float f)
{
    9338:	b580      	push	{r7, lr}
    933a:	b086      	sub	sp, #24
    933c:	af00      	add	r7, sp, #0
    933e:	6078      	str	r0, [r7, #4]
	uint8_t* ret = malloc(4 * sizeof(uint8_t));
    9340:	2004      	movs	r0, #4
    9342:	4b10      	ldr	r3, [pc, #64]	; (9384 <floatToByteArray+0x4c>)
    9344:	4798      	blx	r3
    9346:	1c03      	adds	r3, r0, #0
    9348:	613b      	str	r3, [r7, #16]
	unsigned int asInt = *((int*)&f);
    934a:	1d3b      	adds	r3, r7, #4
    934c:	681b      	ldr	r3, [r3, #0]
    934e:	60fb      	str	r3, [r7, #12]

	int i;
	for (i = 0; i < 4; i++) {
    9350:	2300      	movs	r3, #0
    9352:	617b      	str	r3, [r7, #20]
    9354:	e00d      	b.n	9372 <floatToByteArray+0x3a>
		ret[i] = (asInt >> 8 * i) & 0xFF;
    9356:	697b      	ldr	r3, [r7, #20]
    9358:	693a      	ldr	r2, [r7, #16]
    935a:	18d3      	adds	r3, r2, r3
    935c:	697a      	ldr	r2, [r7, #20]
    935e:	00d2      	lsls	r2, r2, #3
    9360:	68f9      	ldr	r1, [r7, #12]
    9362:	1c08      	adds	r0, r1, #0
    9364:	40d0      	lsrs	r0, r2
    9366:	1c02      	adds	r2, r0, #0
    9368:	b2d2      	uxtb	r2, r2
    936a:	701a      	strb	r2, [r3, #0]
{
	uint8_t* ret = malloc(4 * sizeof(uint8_t));
	unsigned int asInt = *((int*)&f);

	int i;
	for (i = 0; i < 4; i++) {
    936c:	697b      	ldr	r3, [r7, #20]
    936e:	3301      	adds	r3, #1
    9370:	617b      	str	r3, [r7, #20]
    9372:	697b      	ldr	r3, [r7, #20]
    9374:	2b03      	cmp	r3, #3
    9376:	ddee      	ble.n	9356 <floatToByteArray+0x1e>
		ret[i] = (asInt >> 8 * i) & 0xFF;
	}

	return ret;
    9378:	693b      	ldr	r3, [r7, #16]
}
    937a:	1c18      	adds	r0, r3, #0
    937c:	46bd      	mov	sp, r7
    937e:	b006      	add	sp, #24
    9380:	bd80      	pop	{r7, pc}
    9382:	46c0      	nop			; (mov r8, r8)
    9384:	0001b34d 	.word	0x0001b34d

00009388 <intToByteArray>:

uint8_t* intToByteArray(uint16_t f)
{
    9388:	b580      	push	{r7, lr}
    938a:	b084      	sub	sp, #16
    938c:	af00      	add	r7, sp, #0
    938e:	1c02      	adds	r2, r0, #0
    9390:	1dbb      	adds	r3, r7, #6
    9392:	801a      	strh	r2, [r3, #0]
	uint8_t* ret = malloc(2 * sizeof(uint8_t));
    9394:	2002      	movs	r0, #2
    9396:	4b0f      	ldr	r3, [pc, #60]	; (93d4 <intToByteArray+0x4c>)
    9398:	4798      	blx	r3
    939a:	1c03      	adds	r3, r0, #0
    939c:	60bb      	str	r3, [r7, #8]
	//unsigned int asInt = *((int*)&f);

	int i;
	for (i = 0; i < 2; i++) {
    939e:	2300      	movs	r3, #0
    93a0:	60fb      	str	r3, [r7, #12]
    93a2:	e00e      	b.n	93c2 <intToByteArray+0x3a>
		ret[i] = (f >> 8 * i) & 0xFF;
    93a4:	68fb      	ldr	r3, [r7, #12]
    93a6:	68ba      	ldr	r2, [r7, #8]
    93a8:	18d3      	adds	r3, r2, r3
    93aa:	1dba      	adds	r2, r7, #6
    93ac:	8811      	ldrh	r1, [r2, #0]
    93ae:	68fa      	ldr	r2, [r7, #12]
    93b0:	00d2      	lsls	r2, r2, #3
    93b2:	1c08      	adds	r0, r1, #0
    93b4:	4110      	asrs	r0, r2
    93b6:	1c02      	adds	r2, r0, #0
    93b8:	b2d2      	uxtb	r2, r2
    93ba:	701a      	strb	r2, [r3, #0]
{
	uint8_t* ret = malloc(2 * sizeof(uint8_t));
	//unsigned int asInt = *((int*)&f);

	int i;
	for (i = 0; i < 2; i++) {
    93bc:	68fb      	ldr	r3, [r7, #12]
    93be:	3301      	adds	r3, #1
    93c0:	60fb      	str	r3, [r7, #12]
    93c2:	68fb      	ldr	r3, [r7, #12]
    93c4:	2b01      	cmp	r3, #1
    93c6:	dded      	ble.n	93a4 <intToByteArray+0x1c>
		ret[i] = (f >> 8 * i) & 0xFF;
	}

	return ret;
    93c8:	68bb      	ldr	r3, [r7, #8]
}
    93ca:	1c18      	adds	r0, r3, #0
    93cc:	46bd      	mov	sp, r7
    93ce:	b004      	add	sp, #16
    93d0:	bd80      	pop	{r7, pc}
    93d2:	46c0      	nop			; (mov r8, r8)
    93d4:	0001b34d 	.word	0x0001b34d

000093d8 <longToByteArray>:

uint8_t* longToByteArray(uint32_t l)
{
    93d8:	b580      	push	{r7, lr}
    93da:	b086      	sub	sp, #24
    93dc:	af00      	add	r7, sp, #0
    93de:	6078      	str	r0, [r7, #4]
	uint8_t* ret = malloc(4 * sizeof(uint8_t));
    93e0:	2004      	movs	r0, #4
    93e2:	4b10      	ldr	r3, [pc, #64]	; (9424 <longToByteArray+0x4c>)
    93e4:	4798      	blx	r3
    93e6:	1c03      	adds	r3, r0, #0
    93e8:	613b      	str	r3, [r7, #16]
	unsigned int asInt = *((int*)&l);
    93ea:	1d3b      	adds	r3, r7, #4
    93ec:	681b      	ldr	r3, [r3, #0]
    93ee:	60fb      	str	r3, [r7, #12]

	int i;
	for (i = 0; i < 4; i++) {
    93f0:	2300      	movs	r3, #0
    93f2:	617b      	str	r3, [r7, #20]
    93f4:	e00d      	b.n	9412 <longToByteArray+0x3a>
		ret[i] = (asInt >> 8 * i) & 0xFF;
    93f6:	697b      	ldr	r3, [r7, #20]
    93f8:	693a      	ldr	r2, [r7, #16]
    93fa:	18d3      	adds	r3, r2, r3
    93fc:	697a      	ldr	r2, [r7, #20]
    93fe:	00d2      	lsls	r2, r2, #3
    9400:	68f9      	ldr	r1, [r7, #12]
    9402:	1c08      	adds	r0, r1, #0
    9404:	40d0      	lsrs	r0, r2
    9406:	1c02      	adds	r2, r0, #0
    9408:	b2d2      	uxtb	r2, r2
    940a:	701a      	strb	r2, [r3, #0]
{
	uint8_t* ret = malloc(4 * sizeof(uint8_t));
	unsigned int asInt = *((int*)&l);

	int i;
	for (i = 0; i < 4; i++) {
    940c:	697b      	ldr	r3, [r7, #20]
    940e:	3301      	adds	r3, #1
    9410:	617b      	str	r3, [r7, #20]
    9412:	697b      	ldr	r3, [r7, #20]
    9414:	2b03      	cmp	r3, #3
    9416:	ddee      	ble.n	93f6 <longToByteArray+0x1e>
		ret[i] = (asInt >> 8 * i) & 0xFF;
	}

	return ret;
    9418:	693b      	ldr	r3, [r7, #16]
}
    941a:	1c18      	adds	r0, r3, #0
    941c:	46bd      	mov	sp, r7
    941e:	b006      	add	sp, #24
    9420:	bd80      	pop	{r7, pc}
    9422:	46c0      	nop			; (mov r8, r8)
    9424:	0001b34d 	.word	0x0001b34d

00009428 <eepromReadParams>:

void eepromReadParams(void)
{
    9428:	b598      	push	{r3, r4, r7, lr}
    942a:	af00      	add	r7, sp, #0
	eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    942c:	4bde      	ldr	r3, [pc, #888]	; (97a8 <eepromReadParams+0x380>)
    942e:	2000      	movs	r0, #0
    9430:	1c19      	adds	r1, r3, #0
    9432:	4bde      	ldr	r3, [pc, #888]	; (97ac <eepromReadParams+0x384>)
    9434:	4798      	blx	r3
	*(pTempEepromBuf + 0) = eepromPageData[19];
    9436:	4bde      	ldr	r3, [pc, #888]	; (97b0 <eepromReadParams+0x388>)
    9438:	681b      	ldr	r3, [r3, #0]
    943a:	4adb      	ldr	r2, [pc, #876]	; (97a8 <eepromReadParams+0x380>)
    943c:	7cd2      	ldrb	r2, [r2, #19]
    943e:	701a      	strb	r2, [r3, #0]
	*(pTempEepromBuf + 1) = eepromPageData[20];
    9440:	4bdb      	ldr	r3, [pc, #876]	; (97b0 <eepromReadParams+0x388>)
    9442:	681b      	ldr	r3, [r3, #0]
    9444:	3301      	adds	r3, #1
    9446:	4ad8      	ldr	r2, [pc, #864]	; (97a8 <eepromReadParams+0x380>)
    9448:	7d12      	ldrb	r2, [r2, #20]
    944a:	701a      	strb	r2, [r3, #0]
	*(pTempEepromBuf + 2) = eepromPageData[21];
    944c:	4bd8      	ldr	r3, [pc, #864]	; (97b0 <eepromReadParams+0x388>)
    944e:	681b      	ldr	r3, [r3, #0]
    9450:	3302      	adds	r3, #2
    9452:	4ad5      	ldr	r2, [pc, #852]	; (97a8 <eepromReadParams+0x380>)
    9454:	7d52      	ldrb	r2, [r2, #21]
    9456:	701a      	strb	r2, [r3, #0]
	*(pTempEepromBuf + 3) = 0xff;
    9458:	4bd5      	ldr	r3, [pc, #852]	; (97b0 <eepromReadParams+0x388>)
    945a:	681b      	ldr	r3, [r3, #0]
    945c:	3303      	adds	r3, #3
    945e:	22ff      	movs	r2, #255	; 0xff
    9460:	701a      	strb	r2, [r3, #0]
	eepromStatus = (*(uint32_t *)pTempEepromBuf);
    9462:	4bd3      	ldr	r3, [pc, #844]	; (97b0 <eepromReadParams+0x388>)
    9464:	681b      	ldr	r3, [r3, #0]
    9466:	681a      	ldr	r2, [r3, #0]
    9468:	4bd2      	ldr	r3, [pc, #840]	; (97b4 <eepromReadParams+0x38c>)
    946a:	601a      	str	r2, [r3, #0]
	eepromStatus = ~eepromStatus;
    946c:	4bd1      	ldr	r3, [pc, #836]	; (97b4 <eepromReadParams+0x38c>)
    946e:	681b      	ldr	r3, [r3, #0]
    9470:	43da      	mvns	r2, r3
    9472:	4bd0      	ldr	r3, [pc, #832]	; (97b4 <eepromReadParams+0x38c>)
    9474:	601a      	str	r2, [r3, #0]
	
	if ( (eepromStatus & EEPROM_MFGTESTFLAG1_WRITTEN) == EEPROM_MFGTESTFLAG1_WRITTEN)
    9476:	4bcf      	ldr	r3, [pc, #828]	; (97b4 <eepromReadParams+0x38c>)
    9478:	681a      	ldr	r2, [r3, #0]
    947a:	2380      	movs	r3, #128	; 0x80
    947c:	005b      	lsls	r3, r3, #1
    947e:	4013      	ands	r3, r2
    9480:	d009      	beq.n	9496 <eepromReadParams+0x6e>
	{
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    9482:	4bc9      	ldr	r3, [pc, #804]	; (97a8 <eepromReadParams+0x380>)
    9484:	2000      	movs	r0, #0
    9486:	1c19      	adds	r1, r3, #0
    9488:	4bc8      	ldr	r3, [pc, #800]	; (97ac <eepromReadParams+0x384>)
    948a:	4798      	blx	r3
		mfgTestModeFlag1 = eepromPageData[22];
    948c:	4bc6      	ldr	r3, [pc, #792]	; (97a8 <eepromReadParams+0x380>)
    948e:	7d9a      	ldrb	r2, [r3, #22]
    9490:	4bc9      	ldr	r3, [pc, #804]	; (97b8 <eepromReadParams+0x390>)
    9492:	701a      	strb	r2, [r3, #0]
    9494:	e002      	b.n	949c <eepromReadParams+0x74>
	}
	else
	{
		mfgTestModeFlag1 = 0x01;
    9496:	4bc8      	ldr	r3, [pc, #800]	; (97b8 <eepromReadParams+0x390>)
    9498:	2201      	movs	r2, #1
    949a:	701a      	strb	r2, [r3, #0]
	}

	if ( (eepromStatus & EEPROM_MFGTESTFLAG2_WRITTEN) == EEPROM_MFGTESTFLAG2_WRITTEN)
    949c:	4bc5      	ldr	r3, [pc, #788]	; (97b4 <eepromReadParams+0x38c>)
    949e:	681a      	ldr	r2, [r3, #0]
    94a0:	2380      	movs	r3, #128	; 0x80
    94a2:	009b      	lsls	r3, r3, #2
    94a4:	4013      	ands	r3, r2
    94a6:	d009      	beq.n	94bc <eepromReadParams+0x94>
	{
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    94a8:	4bbf      	ldr	r3, [pc, #764]	; (97a8 <eepromReadParams+0x380>)
    94aa:	2000      	movs	r0, #0
    94ac:	1c19      	adds	r1, r3, #0
    94ae:	4bbf      	ldr	r3, [pc, #764]	; (97ac <eepromReadParams+0x384>)
    94b0:	4798      	blx	r3
		mfgTestModeFlag2 = eepromPageData[23];
    94b2:	4bbd      	ldr	r3, [pc, #756]	; (97a8 <eepromReadParams+0x380>)
    94b4:	7dda      	ldrb	r2, [r3, #23]
    94b6:	4bc1      	ldr	r3, [pc, #772]	; (97bc <eepromReadParams+0x394>)
    94b8:	701a      	strb	r2, [r3, #0]
    94ba:	e002      	b.n	94c2 <eepromReadParams+0x9a>
	}
	else
	{
		mfgTestModeFlag2 = 0x01;
    94bc:	4bbf      	ldr	r3, [pc, #764]	; (97bc <eepromReadParams+0x394>)
    94be:	2201      	movs	r2, #1
    94c0:	701a      	strb	r2, [r3, #0]
	}
	
	if ( (eepromStatus & EEPROM_CHAMBEROFFSET_WRITTEN) == EEPROM_CHAMBEROFFSET_WRITTEN)
    94c2:	4bbc      	ldr	r3, [pc, #752]	; (97b4 <eepromReadParams+0x38c>)
    94c4:	681a      	ldr	r2, [r3, #0]
    94c6:	2301      	movs	r3, #1
    94c8:	4013      	ands	r3, r2
    94ca:	d021      	beq.n	9510 <eepromReadParams+0xe8>
	{
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    94cc:	4bb6      	ldr	r3, [pc, #728]	; (97a8 <eepromReadParams+0x380>)
    94ce:	2000      	movs	r0, #0
    94d0:	1c19      	adds	r1, r3, #0
    94d2:	4bb6      	ldr	r3, [pc, #728]	; (97ac <eepromReadParams+0x384>)
    94d4:	4798      	blx	r3
		*(pTempEepromBuf + 0) = eepromPageData[0];
    94d6:	4bb6      	ldr	r3, [pc, #728]	; (97b0 <eepromReadParams+0x388>)
    94d8:	681b      	ldr	r3, [r3, #0]
    94da:	4ab3      	ldr	r2, [pc, #716]	; (97a8 <eepromReadParams+0x380>)
    94dc:	7812      	ldrb	r2, [r2, #0]
    94de:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 1) = eepromPageData[1];
    94e0:	4bb3      	ldr	r3, [pc, #716]	; (97b0 <eepromReadParams+0x388>)
    94e2:	681b      	ldr	r3, [r3, #0]
    94e4:	3301      	adds	r3, #1
    94e6:	4ab0      	ldr	r2, [pc, #704]	; (97a8 <eepromReadParams+0x380>)
    94e8:	7852      	ldrb	r2, [r2, #1]
    94ea:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 2) = eepromPageData[2];
    94ec:	4bb0      	ldr	r3, [pc, #704]	; (97b0 <eepromReadParams+0x388>)
    94ee:	681b      	ldr	r3, [r3, #0]
    94f0:	3302      	adds	r3, #2
    94f2:	4aad      	ldr	r2, [pc, #692]	; (97a8 <eepromReadParams+0x380>)
    94f4:	7892      	ldrb	r2, [r2, #2]
    94f6:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 3) = eepromPageData[3];
    94f8:	4bad      	ldr	r3, [pc, #692]	; (97b0 <eepromReadParams+0x388>)
    94fa:	681b      	ldr	r3, [r3, #0]
    94fc:	3303      	adds	r3, #3
    94fe:	4aaa      	ldr	r2, [pc, #680]	; (97a8 <eepromReadParams+0x380>)
    9500:	78d2      	ldrb	r2, [r2, #3]
    9502:	701a      	strb	r2, [r3, #0]
		chamber1.chamberOffset = *(float *)pTempEepromBuf;
    9504:	4baa      	ldr	r3, [pc, #680]	; (97b0 <eepromReadParams+0x388>)
    9506:	681b      	ldr	r3, [r3, #0]
    9508:	681a      	ldr	r2, [r3, #0]
    950a:	4bad      	ldr	r3, [pc, #692]	; (97c0 <eepromReadParams+0x398>)
    950c:	641a      	str	r2, [r3, #64]	; 0x40
    950e:	e002      	b.n	9516 <eepromReadParams+0xee>
	}
	else
	{
		chamber1.chamberOffset = 0.0;
    9510:	4bab      	ldr	r3, [pc, #684]	; (97c0 <eepromReadParams+0x398>)
    9512:	2200      	movs	r2, #0
    9514:	641a      	str	r2, [r3, #64]	; 0x40
	}
	
	if ( (eepromStatus & EEPROM_GLYCOLOFFSET_WRITTEN) == EEPROM_GLYCOLOFFSET_WRITTEN)
    9516:	4ba7      	ldr	r3, [pc, #668]	; (97b4 <eepromReadParams+0x38c>)
    9518:	681a      	ldr	r2, [r3, #0]
    951a:	2302      	movs	r3, #2
    951c:	4013      	ands	r3, r2
    951e:	d021      	beq.n	9564 <eepromReadParams+0x13c>
	{
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    9520:	4ba1      	ldr	r3, [pc, #644]	; (97a8 <eepromReadParams+0x380>)
    9522:	2000      	movs	r0, #0
    9524:	1c19      	adds	r1, r3, #0
    9526:	4ba1      	ldr	r3, [pc, #644]	; (97ac <eepromReadParams+0x384>)
    9528:	4798      	blx	r3
		*(pTempEepromBuf + 0) = eepromPageData[4];
    952a:	4ba1      	ldr	r3, [pc, #644]	; (97b0 <eepromReadParams+0x388>)
    952c:	681b      	ldr	r3, [r3, #0]
    952e:	4a9e      	ldr	r2, [pc, #632]	; (97a8 <eepromReadParams+0x380>)
    9530:	7912      	ldrb	r2, [r2, #4]
    9532:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 1) = eepromPageData[5];
    9534:	4b9e      	ldr	r3, [pc, #632]	; (97b0 <eepromReadParams+0x388>)
    9536:	681b      	ldr	r3, [r3, #0]
    9538:	3301      	adds	r3, #1
    953a:	4a9b      	ldr	r2, [pc, #620]	; (97a8 <eepromReadParams+0x380>)
    953c:	7952      	ldrb	r2, [r2, #5]
    953e:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 2) = eepromPageData[6];
    9540:	4b9b      	ldr	r3, [pc, #620]	; (97b0 <eepromReadParams+0x388>)
    9542:	681b      	ldr	r3, [r3, #0]
    9544:	3302      	adds	r3, #2
    9546:	4a98      	ldr	r2, [pc, #608]	; (97a8 <eepromReadParams+0x380>)
    9548:	7992      	ldrb	r2, [r2, #6]
    954a:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 3) = eepromPageData[7];
    954c:	4b98      	ldr	r3, [pc, #608]	; (97b0 <eepromReadParams+0x388>)
    954e:	681b      	ldr	r3, [r3, #0]
    9550:	3303      	adds	r3, #3
    9552:	4a95      	ldr	r2, [pc, #596]	; (97a8 <eepromReadParams+0x380>)
    9554:	79d2      	ldrb	r2, [r2, #7]
    9556:	701a      	strb	r2, [r3, #0]
		chamber1.glycolOffset = *(float *)pTempEepromBuf;
    9558:	4b95      	ldr	r3, [pc, #596]	; (97b0 <eepromReadParams+0x388>)
    955a:	681b      	ldr	r3, [r3, #0]
    955c:	681a      	ldr	r2, [r3, #0]
    955e:	4b98      	ldr	r3, [pc, #608]	; (97c0 <eepromReadParams+0x398>)
    9560:	655a      	str	r2, [r3, #84]	; 0x54
    9562:	e002      	b.n	956a <eepromReadParams+0x142>
	}
	else
	{
		chamber1.glycolOffset = 0.0;
    9564:	4b96      	ldr	r3, [pc, #600]	; (97c0 <eepromReadParams+0x398>)
    9566:	2200      	movs	r2, #0
    9568:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if ( (eepromStatus & EEPROM_CHAMBER2OFFSET_WRITTEN) == EEPROM_CHAMBER2OFFSET_WRITTEN)
    956a:	4b92      	ldr	r3, [pc, #584]	; (97b4 <eepromReadParams+0x38c>)
    956c:	681a      	ldr	r2, [r3, #0]
    956e:	2380      	movs	r3, #128	; 0x80
    9570:	00db      	lsls	r3, r3, #3
    9572:	4013      	ands	r3, r2
    9574:	d021      	beq.n	95ba <eepromReadParams+0x192>
	{
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    9576:	4b8c      	ldr	r3, [pc, #560]	; (97a8 <eepromReadParams+0x380>)
    9578:	2000      	movs	r0, #0
    957a:	1c19      	adds	r1, r3, #0
    957c:	4b8b      	ldr	r3, [pc, #556]	; (97ac <eepromReadParams+0x384>)
    957e:	4798      	blx	r3
		*(pTempEepromBuf + 0) = eepromPageData[24];
    9580:	4b8b      	ldr	r3, [pc, #556]	; (97b0 <eepromReadParams+0x388>)
    9582:	681b      	ldr	r3, [r3, #0]
    9584:	4a88      	ldr	r2, [pc, #544]	; (97a8 <eepromReadParams+0x380>)
    9586:	7e12      	ldrb	r2, [r2, #24]
    9588:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 1) = eepromPageData[25];
    958a:	4b89      	ldr	r3, [pc, #548]	; (97b0 <eepromReadParams+0x388>)
    958c:	681b      	ldr	r3, [r3, #0]
    958e:	3301      	adds	r3, #1
    9590:	4a85      	ldr	r2, [pc, #532]	; (97a8 <eepromReadParams+0x380>)
    9592:	7e52      	ldrb	r2, [r2, #25]
    9594:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 2) = eepromPageData[26];
    9596:	4b86      	ldr	r3, [pc, #536]	; (97b0 <eepromReadParams+0x388>)
    9598:	681b      	ldr	r3, [r3, #0]
    959a:	3302      	adds	r3, #2
    959c:	4a82      	ldr	r2, [pc, #520]	; (97a8 <eepromReadParams+0x380>)
    959e:	7e92      	ldrb	r2, [r2, #26]
    95a0:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 3) = eepromPageData[27];
    95a2:	4b83      	ldr	r3, [pc, #524]	; (97b0 <eepromReadParams+0x388>)
    95a4:	681b      	ldr	r3, [r3, #0]
    95a6:	3303      	adds	r3, #3
    95a8:	4a7f      	ldr	r2, [pc, #508]	; (97a8 <eepromReadParams+0x380>)
    95aa:	7ed2      	ldrb	r2, [r2, #27]
    95ac:	701a      	strb	r2, [r3, #0]
		chamber2.chamberOffset = *(float *)pTempEepromBuf;
    95ae:	4b80      	ldr	r3, [pc, #512]	; (97b0 <eepromReadParams+0x388>)
    95b0:	681b      	ldr	r3, [r3, #0]
    95b2:	681a      	ldr	r2, [r3, #0]
    95b4:	4b83      	ldr	r3, [pc, #524]	; (97c4 <eepromReadParams+0x39c>)
    95b6:	641a      	str	r2, [r3, #64]	; 0x40
    95b8:	e002      	b.n	95c0 <eepromReadParams+0x198>
	}
	else
	{
		chamber2.chamberOffset = 0.0;
    95ba:	4b82      	ldr	r3, [pc, #520]	; (97c4 <eepromReadParams+0x39c>)
    95bc:	2200      	movs	r2, #0
    95be:	641a      	str	r2, [r3, #64]	; 0x40
	}
	
	if ( (eepromStatus & EEPROM_DEFROSTFREQMAXHRS_WRITTEN) == EEPROM_DEFROSTFREQMAXHRS_WRITTEN)
    95c0:	4b7c      	ldr	r3, [pc, #496]	; (97b4 <eepromReadParams+0x38c>)
    95c2:	681a      	ldr	r2, [r3, #0]
    95c4:	2304      	movs	r3, #4
    95c6:	4013      	ands	r3, r2
    95c8:	d015      	beq.n	95f6 <eepromReadParams+0x1ce>
	{
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    95ca:	4b77      	ldr	r3, [pc, #476]	; (97a8 <eepromReadParams+0x380>)
    95cc:	2000      	movs	r0, #0
    95ce:	1c19      	adds	r1, r3, #0
    95d0:	4b76      	ldr	r3, [pc, #472]	; (97ac <eepromReadParams+0x384>)
    95d2:	4798      	blx	r3
		*(pTempEepromBuf + 0) = eepromPageData[8];
    95d4:	4b76      	ldr	r3, [pc, #472]	; (97b0 <eepromReadParams+0x388>)
    95d6:	681b      	ldr	r3, [r3, #0]
    95d8:	4a73      	ldr	r2, [pc, #460]	; (97a8 <eepromReadParams+0x380>)
    95da:	7a12      	ldrb	r2, [r2, #8]
    95dc:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 1) = eepromPageData[9];
    95de:	4b74      	ldr	r3, [pc, #464]	; (97b0 <eepromReadParams+0x388>)
    95e0:	681b      	ldr	r3, [r3, #0]
    95e2:	3301      	adds	r3, #1
    95e4:	4a70      	ldr	r2, [pc, #448]	; (97a8 <eepromReadParams+0x380>)
    95e6:	7a52      	ldrb	r2, [r2, #9]
    95e8:	701a      	strb	r2, [r3, #0]
		defrostFreqMaxHrs = *(uint16_t *)pTempEepromBuf;
    95ea:	4b71      	ldr	r3, [pc, #452]	; (97b0 <eepromReadParams+0x388>)
    95ec:	681b      	ldr	r3, [r3, #0]
    95ee:	881a      	ldrh	r2, [r3, #0]
    95f0:	4b75      	ldr	r3, [pc, #468]	; (97c8 <eepromReadParams+0x3a0>)
    95f2:	801a      	strh	r2, [r3, #0]
    95f4:	e002      	b.n	95fc <eepromReadParams+0x1d4>
	}
	else
	{
		defrostFreqMaxHrs = DEFROST_MAX_INTERVAL_TIME_IN_HRS;
    95f6:	4b74      	ldr	r3, [pc, #464]	; (97c8 <eepromReadParams+0x3a0>)
    95f8:	22a8      	movs	r2, #168	; 0xa8
    95fa:	801a      	strh	r2, [r3, #0]
	}
	
	if ( (eepromStatus & EEPROM_DEFROSTFREQHRS_WRITTEN) == EEPROM_DEFROSTFREQHRS_WRITTEN)
    95fc:	4b6d      	ldr	r3, [pc, #436]	; (97b4 <eepromReadParams+0x38c>)
    95fe:	681a      	ldr	r2, [r3, #0]
    9600:	2308      	movs	r3, #8
    9602:	4013      	ands	r3, r2
    9604:	d009      	beq.n	961a <eepromReadParams+0x1f2>
	{
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    9606:	4b68      	ldr	r3, [pc, #416]	; (97a8 <eepromReadParams+0x380>)
    9608:	2000      	movs	r0, #0
    960a:	1c19      	adds	r1, r3, #0
    960c:	4b67      	ldr	r3, [pc, #412]	; (97ac <eepromReadParams+0x384>)
    960e:	4798      	blx	r3
		defrostFreqHrs = eepromPageData[10];
    9610:	4b65      	ldr	r3, [pc, #404]	; (97a8 <eepromReadParams+0x380>)
    9612:	7a9a      	ldrb	r2, [r3, #10]
    9614:	4b6d      	ldr	r3, [pc, #436]	; (97cc <eepromReadParams+0x3a4>)
    9616:	701a      	strb	r2, [r3, #0]
    9618:	e002      	b.n	9620 <eepromReadParams+0x1f8>
	}
	else
	{
		defrostFreqHrs = DEFAULT_DEFROST_FREQ_HRS;
    961a:	4b6c      	ldr	r3, [pc, #432]	; (97cc <eepromReadParams+0x3a4>)
    961c:	2218      	movs	r2, #24
    961e:	701a      	strb	r2, [r3, #0]
	}
	
	if ( (eepromStatus & EEPROM_DEFROSTDURATIONMINS_WRITTEN) == EEPROM_DEFROSTDURATIONMINS_WRITTEN)
    9620:	4b64      	ldr	r3, [pc, #400]	; (97b4 <eepromReadParams+0x38c>)
    9622:	681a      	ldr	r2, [r3, #0]
    9624:	2310      	movs	r3, #16
    9626:	4013      	ands	r3, r2
    9628:	d009      	beq.n	963e <eepromReadParams+0x216>
	{
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    962a:	4b5f      	ldr	r3, [pc, #380]	; (97a8 <eepromReadParams+0x380>)
    962c:	2000      	movs	r0, #0
    962e:	1c19      	adds	r1, r3, #0
    9630:	4b5e      	ldr	r3, [pc, #376]	; (97ac <eepromReadParams+0x384>)
    9632:	4798      	blx	r3
		defrostDurationMins = eepromPageData[11];
    9634:	4b5c      	ldr	r3, [pc, #368]	; (97a8 <eepromReadParams+0x380>)
    9636:	7ada      	ldrb	r2, [r3, #11]
    9638:	4b65      	ldr	r3, [pc, #404]	; (97d0 <eepromReadParams+0x3a8>)
    963a:	701a      	strb	r2, [r3, #0]
    963c:	e002      	b.n	9644 <eepromReadParams+0x21c>
	}
	else
	{
		defrostDurationMins = DEFAULT_DEFROST_DURATION_MINS;
    963e:	4b64      	ldr	r3, [pc, #400]	; (97d0 <eepromReadParams+0x3a8>)
    9640:	220c      	movs	r2, #12
    9642:	701a      	strb	r2, [r3, #0]
	}
	
	if ( (eepromStatus & EEPROM_MACADDR_WRITTEN) == EEPROM_MACADDR_WRITTEN)
    9644:	4b5b      	ldr	r3, [pc, #364]	; (97b4 <eepromReadParams+0x38c>)
    9646:	681a      	ldr	r2, [r3, #0]
    9648:	2320      	movs	r3, #32
    964a:	4013      	ands	r3, r2
    964c:	d01c      	beq.n	9688 <eepromReadParams+0x260>
	{
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    964e:	4b56      	ldr	r3, [pc, #344]	; (97a8 <eepromReadParams+0x380>)
    9650:	2000      	movs	r0, #0
    9652:	1c19      	adds	r1, r3, #0
    9654:	4b55      	ldr	r3, [pc, #340]	; (97ac <eepromReadParams+0x384>)
    9656:	4798      	blx	r3
		MAC_address[0] = eepromPageData[12];
    9658:	4b53      	ldr	r3, [pc, #332]	; (97a8 <eepromReadParams+0x380>)
    965a:	7b1a      	ldrb	r2, [r3, #12]
    965c:	4b5d      	ldr	r3, [pc, #372]	; (97d4 <eepromReadParams+0x3ac>)
    965e:	701a      	strb	r2, [r3, #0]
		MAC_address[1] = eepromPageData[13];
    9660:	4b51      	ldr	r3, [pc, #324]	; (97a8 <eepromReadParams+0x380>)
    9662:	7b5a      	ldrb	r2, [r3, #13]
    9664:	4b5b      	ldr	r3, [pc, #364]	; (97d4 <eepromReadParams+0x3ac>)
    9666:	705a      	strb	r2, [r3, #1]
		MAC_address[2] = eepromPageData[14];
    9668:	4b4f      	ldr	r3, [pc, #316]	; (97a8 <eepromReadParams+0x380>)
    966a:	7b9a      	ldrb	r2, [r3, #14]
    966c:	4b59      	ldr	r3, [pc, #356]	; (97d4 <eepromReadParams+0x3ac>)
    966e:	709a      	strb	r2, [r3, #2]
		MAC_address[3] = eepromPageData[15];
    9670:	4b4d      	ldr	r3, [pc, #308]	; (97a8 <eepromReadParams+0x380>)
    9672:	7bda      	ldrb	r2, [r3, #15]
    9674:	4b57      	ldr	r3, [pc, #348]	; (97d4 <eepromReadParams+0x3ac>)
    9676:	70da      	strb	r2, [r3, #3]
		MAC_address[4] = eepromPageData[16];
    9678:	4b4b      	ldr	r3, [pc, #300]	; (97a8 <eepromReadParams+0x380>)
    967a:	7c1a      	ldrb	r2, [r3, #16]
    967c:	4b55      	ldr	r3, [pc, #340]	; (97d4 <eepromReadParams+0x3ac>)
    967e:	711a      	strb	r2, [r3, #4]
		MAC_address[5] = eepromPageData[17];
    9680:	4b49      	ldr	r3, [pc, #292]	; (97a8 <eepromReadParams+0x380>)
    9682:	7c5a      	ldrb	r2, [r3, #17]
    9684:	4b53      	ldr	r3, [pc, #332]	; (97d4 <eepromReadParams+0x3ac>)
    9686:	715a      	strb	r2, [r3, #5]
	else
	{
		;
	}

	if ( (eepromStatus & EEPROM_MODEL_WRITTEN) == EEPROM_MODEL_WRITTEN)
    9688:	4b4a      	ldr	r3, [pc, #296]	; (97b4 <eepromReadParams+0x38c>)
    968a:	681a      	ldr	r2, [r3, #0]
    968c:	2380      	movs	r3, #128	; 0x80
    968e:	4013      	ands	r3, r2
    9690:	d00b      	beq.n	96aa <eepromReadParams+0x282>
	{
		eeprom_emulator_read_page(EEPROM_PAGE1, eepromPageData);
    9692:	4b45      	ldr	r3, [pc, #276]	; (97a8 <eepromReadParams+0x380>)
    9694:	2001      	movs	r0, #1
    9696:	1c19      	adds	r1, r3, #0
    9698:	4b44      	ldr	r3, [pc, #272]	; (97ac <eepromReadParams+0x384>)
    969a:	4798      	blx	r3
		memcpy(strModel, eepromPageData, MODEL_SIZE);
    969c:	4b4e      	ldr	r3, [pc, #312]	; (97d8 <eepromReadParams+0x3b0>)
    969e:	4a42      	ldr	r2, [pc, #264]	; (97a8 <eepromReadParams+0x380>)
    96a0:	ca13      	ldmia	r2!, {r0, r1, r4}
    96a2:	c313      	stmia	r3!, {r0, r1, r4}
    96a4:	7812      	ldrb	r2, [r2, #0]
    96a6:	701a      	strb	r2, [r3, #0]
    96a8:	e005      	b.n	96b6 <eepromReadParams+0x28e>
	}
	else
	{
		strcpy(strModel, DEFAULT_MODEL);
    96aa:	4b4b      	ldr	r3, [pc, #300]	; (97d8 <eepromReadParams+0x3b0>)
    96ac:	4a4b      	ldr	r2, [pc, #300]	; (97dc <eepromReadParams+0x3b4>)
    96ae:	ca13      	ldmia	r2!, {r0, r1, r4}
    96b0:	c313      	stmia	r3!, {r0, r1, r4}
    96b2:	7812      	ldrb	r2, [r2, #0]
    96b4:	701a      	strb	r2, [r3, #0]
	}

	if ( (eepromStatus & EEPROM_UIFWVER_WRITTEN) == EEPROM_UIFWVER_WRITTEN)
    96b6:	4b3f      	ldr	r3, [pc, #252]	; (97b4 <eepromReadParams+0x38c>)
    96b8:	681a      	ldr	r2, [r3, #0]
    96ba:	2380      	movs	r3, #128	; 0x80
    96bc:	019b      	lsls	r3, r3, #6
    96be:	4013      	ands	r3, r2
    96c0:	d010      	beq.n	96e4 <eepromReadParams+0x2bc>
	{
		eeprom_emulator_read_page(EEPROM_PAGE1, eepromPageData);
    96c2:	4b39      	ldr	r3, [pc, #228]	; (97a8 <eepromReadParams+0x380>)
    96c4:	2001      	movs	r0, #1
    96c6:	1c19      	adds	r1, r3, #0
    96c8:	4b38      	ldr	r3, [pc, #224]	; (97ac <eepromReadParams+0x384>)
    96ca:	4798      	blx	r3
		memcpy(strUiFwVer, eepromPageData, UIFWVER_SIZE);
    96cc:	4b44      	ldr	r3, [pc, #272]	; (97e0 <eepromReadParams+0x3b8>)
    96ce:	4a36      	ldr	r2, [pc, #216]	; (97a8 <eepromReadParams+0x380>)
    96d0:	6811      	ldr	r1, [r2, #0]
    96d2:	6019      	str	r1, [r3, #0]
    96d4:	8891      	ldrh	r1, [r2, #4]
    96d6:	8099      	strh	r1, [r3, #4]
    96d8:	7992      	ldrb	r2, [r2, #6]
    96da:	719a      	strb	r2, [r3, #6]
		strUiFwVer[UIFWVER_SIZE-1] = '\0';
    96dc:	4b40      	ldr	r3, [pc, #256]	; (97e0 <eepromReadParams+0x3b8>)
    96de:	2200      	movs	r2, #0
    96e0:	719a      	strb	r2, [r3, #6]
    96e2:	e00a      	b.n	96fa <eepromReadParams+0x2d2>
	}
	else
	{
		strcpy(strUiFwVer, DEFAULT_UIFWVER);
    96e4:	4b3e      	ldr	r3, [pc, #248]	; (97e0 <eepromReadParams+0x3b8>)
    96e6:	4a3f      	ldr	r2, [pc, #252]	; (97e4 <eepromReadParams+0x3bc>)
    96e8:	6811      	ldr	r1, [r2, #0]
    96ea:	6019      	str	r1, [r3, #0]
    96ec:	8891      	ldrh	r1, [r2, #4]
    96ee:	8099      	strh	r1, [r3, #4]
    96f0:	7992      	ldrb	r2, [r2, #6]
    96f2:	719a      	strb	r2, [r3, #6]
		strUiFwVer[UIFWVER_SIZE-1] = '\0';
    96f4:	4b3a      	ldr	r3, [pc, #232]	; (97e0 <eepromReadParams+0x3b8>)
    96f6:	2200      	movs	r2, #0
    96f8:	719a      	strb	r2, [r3, #6]
	}	

	if ( (eepromStatus & EEPROM_SERIAL_WRITTEN) == EEPROM_SERIAL_WRITTEN)
    96fa:	4b2e      	ldr	r3, [pc, #184]	; (97b4 <eepromReadParams+0x38c>)
    96fc:	681a      	ldr	r2, [r3, #0]
    96fe:	2340      	movs	r3, #64	; 0x40
    9700:	4013      	ands	r3, r2
    9702:	d00d      	beq.n	9720 <eepromReadParams+0x2f8>
	{
		eeprom_emulator_read_page(EEPROM_PAGE2, eepromPageData);
    9704:	4b28      	ldr	r3, [pc, #160]	; (97a8 <eepromReadParams+0x380>)
    9706:	2002      	movs	r0, #2
    9708:	1c19      	adds	r1, r3, #0
    970a:	4b28      	ldr	r3, [pc, #160]	; (97ac <eepromReadParams+0x384>)
    970c:	4798      	blx	r3
		memcpy(strSerial, eepromPageData, SERIAL_SIZE);
    970e:	4b36      	ldr	r3, [pc, #216]	; (97e8 <eepromReadParams+0x3c0>)
    9710:	4a25      	ldr	r2, [pc, #148]	; (97a8 <eepromReadParams+0x380>)
    9712:	ca13      	ldmia	r2!, {r0, r1, r4}
    9714:	c313      	stmia	r3!, {r0, r1, r4}
    9716:	8811      	ldrh	r1, [r2, #0]
    9718:	8019      	strh	r1, [r3, #0]
    971a:	7892      	ldrb	r2, [r2, #2]
    971c:	709a      	strb	r2, [r3, #2]
    971e:	e007      	b.n	9730 <eepromReadParams+0x308>
	}
	else
	{
		strcpy(strSerial, DEFAULT_SERIAL);
    9720:	4b31      	ldr	r3, [pc, #196]	; (97e8 <eepromReadParams+0x3c0>)
    9722:	4a32      	ldr	r2, [pc, #200]	; (97ec <eepromReadParams+0x3c4>)
    9724:	ca13      	ldmia	r2!, {r0, r1, r4}
    9726:	c313      	stmia	r3!, {r0, r1, r4}
    9728:	8811      	ldrh	r1, [r2, #0]
    972a:	8019      	strh	r1, [r3, #0]
    972c:	7892      	ldrb	r2, [r2, #2]
    972e:	709a      	strb	r2, [r3, #2]
	}

	if ( (eepromStatus & EEPROM_CHAMBERBETA_WRITTEN) == EEPROM_CHAMBERBETA_WRITTEN)
    9730:	4b20      	ldr	r3, [pc, #128]	; (97b4 <eepromReadParams+0x38c>)
    9732:	681a      	ldr	r2, [r3, #0]
    9734:	2380      	movs	r3, #128	; 0x80
    9736:	011b      	lsls	r3, r3, #4
    9738:	4013      	ands	r3, r2
    973a:	d015      	beq.n	9768 <eepromReadParams+0x340>
	{
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    973c:	4b1a      	ldr	r3, [pc, #104]	; (97a8 <eepromReadParams+0x380>)
    973e:	2000      	movs	r0, #0
    9740:	1c19      	adds	r1, r3, #0
    9742:	4b1a      	ldr	r3, [pc, #104]	; (97ac <eepromReadParams+0x384>)
    9744:	4798      	blx	r3
		*(pTempEepromBuf + 0) = eepromPageData[28];
    9746:	4b1a      	ldr	r3, [pc, #104]	; (97b0 <eepromReadParams+0x388>)
    9748:	681b      	ldr	r3, [r3, #0]
    974a:	4a17      	ldr	r2, [pc, #92]	; (97a8 <eepromReadParams+0x380>)
    974c:	7f12      	ldrb	r2, [r2, #28]
    974e:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 1) = eepromPageData[29];
    9750:	4b17      	ldr	r3, [pc, #92]	; (97b0 <eepromReadParams+0x388>)
    9752:	681b      	ldr	r3, [r3, #0]
    9754:	3301      	adds	r3, #1
    9756:	4a14      	ldr	r2, [pc, #80]	; (97a8 <eepromReadParams+0x380>)
    9758:	7f52      	ldrb	r2, [r2, #29]
    975a:	701a      	strb	r2, [r3, #0]
		chamberThermistorBeta = *(uint16_t *)pTempEepromBuf;
    975c:	4b14      	ldr	r3, [pc, #80]	; (97b0 <eepromReadParams+0x388>)
    975e:	681b      	ldr	r3, [r3, #0]
    9760:	881a      	ldrh	r2, [r3, #0]
    9762:	4b23      	ldr	r3, [pc, #140]	; (97f0 <eepromReadParams+0x3c8>)
    9764:	801a      	strh	r2, [r3, #0]
    9766:	e002      	b.n	976e <eepromReadParams+0x346>
	}
	else
	{
		chamberThermistorBeta = BCOEFFICIENT_TCHAMBER;
    9768:	4b21      	ldr	r3, [pc, #132]	; (97f0 <eepromReadParams+0x3c8>)
    976a:	4a22      	ldr	r2, [pc, #136]	; (97f4 <eepromReadParams+0x3cc>)
    976c:	801a      	strh	r2, [r3, #0]
	}

	if ( (eepromStatus & EEPROM_REJECTBETA_WRITTEN) == EEPROM_REJECTBETA_WRITTEN)
    976e:	4b11      	ldr	r3, [pc, #68]	; (97b4 <eepromReadParams+0x38c>)
    9770:	681a      	ldr	r2, [r3, #0]
    9772:	2380      	movs	r3, #128	; 0x80
    9774:	015b      	lsls	r3, r3, #5
    9776:	4013      	ands	r3, r2
    9778:	d040      	beq.n	97fc <eepromReadParams+0x3d4>
	{
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    977a:	4b0b      	ldr	r3, [pc, #44]	; (97a8 <eepromReadParams+0x380>)
    977c:	2000      	movs	r0, #0
    977e:	1c19      	adds	r1, r3, #0
    9780:	4b0a      	ldr	r3, [pc, #40]	; (97ac <eepromReadParams+0x384>)
    9782:	4798      	blx	r3
		*(pTempEepromBuf + 0) = eepromPageData[30];
    9784:	4b0a      	ldr	r3, [pc, #40]	; (97b0 <eepromReadParams+0x388>)
    9786:	681b      	ldr	r3, [r3, #0]
    9788:	4a07      	ldr	r2, [pc, #28]	; (97a8 <eepromReadParams+0x380>)
    978a:	7f92      	ldrb	r2, [r2, #30]
    978c:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 1) = eepromPageData[31];
    978e:	4b08      	ldr	r3, [pc, #32]	; (97b0 <eepromReadParams+0x388>)
    9790:	681b      	ldr	r3, [r3, #0]
    9792:	3301      	adds	r3, #1
    9794:	4a04      	ldr	r2, [pc, #16]	; (97a8 <eepromReadParams+0x380>)
    9796:	7fd2      	ldrb	r2, [r2, #31]
    9798:	701a      	strb	r2, [r3, #0]
		rejectThermistorBeta = *(uint16_t *)pTempEepromBuf;
    979a:	4b05      	ldr	r3, [pc, #20]	; (97b0 <eepromReadParams+0x388>)
    979c:	681b      	ldr	r3, [r3, #0]
    979e:	881a      	ldrh	r2, [r3, #0]
    97a0:	4b15      	ldr	r3, [pc, #84]	; (97f8 <eepromReadParams+0x3d0>)
    97a2:	801a      	strh	r2, [r3, #0]
    97a4:	e02d      	b.n	9802 <eepromReadParams+0x3da>
    97a6:	46c0      	nop			; (mov r8, r8)
    97a8:	20000888 	.word	0x20000888
    97ac:	00019695 	.word	0x00019695
    97b0:	20000060 	.word	0x20000060
    97b4:	200002f8 	.word	0x200002f8
    97b8:	20000088 	.word	0x20000088
    97bc:	20000089 	.word	0x20000089
    97c0:	200009b8 	.word	0x200009b8
    97c4:	20000960 	.word	0x20000960
    97c8:	20000dbc 	.word	0x20000dbc
    97cc:	20000910 	.word	0x20000910
    97d0:	200008d8 	.word	0x200008d8
    97d4:	20000904 	.word	0x20000904
    97d8:	200008c4 	.word	0x200008c4
    97dc:	00024aec 	.word	0x00024aec
    97e0:	20000058 	.word	0x20000058
    97e4:	00024afc 	.word	0x00024afc
    97e8:	200008f4 	.word	0x200008f4
    97ec:	00024b04 	.word	0x00024b04
    97f0:	2000018c 	.word	0x2000018c
    97f4:	00000e88 	.word	0x00000e88
    97f8:	2000018e 	.word	0x2000018e
	}
	else
	{
		rejectThermistorBeta = BCOEFFICIENT_TREJ;
    97fc:	4b8c      	ldr	r3, [pc, #560]	; (9a30 <eepromReadParams+0x608>)
    97fe:	4a8d      	ldr	r2, [pc, #564]	; (9a34 <eepromReadParams+0x60c>)
    9800:	801a      	strh	r2, [r3, #0]
	}	

	if ( (eepromStatus & EEPROM_RUNSELFTESTFLAG_WRITTEN) == EEPROM_RUNSELFTESTFLAG_WRITTEN)
    9802:	4b8d      	ldr	r3, [pc, #564]	; (9a38 <eepromReadParams+0x610>)
    9804:	681a      	ldr	r2, [r3, #0]
    9806:	2380      	movs	r3, #128	; 0x80
    9808:	01db      	lsls	r3, r3, #7
    980a:	4013      	ands	r3, r2
    980c:	d00a      	beq.n	9824 <eepromReadParams+0x3fc>
	{
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    980e:	4b8b      	ldr	r3, [pc, #556]	; (9a3c <eepromReadParams+0x614>)
    9810:	2000      	movs	r0, #0
    9812:	1c19      	adds	r1, r3, #0
    9814:	4b8a      	ldr	r3, [pc, #552]	; (9a40 <eepromReadParams+0x618>)
    9816:	4798      	blx	r3
		runSelfTestOnPOR = eepromPageData[32];
    9818:	4a88      	ldr	r2, [pc, #544]	; (9a3c <eepromReadParams+0x614>)
    981a:	2320      	movs	r3, #32
    981c:	5cd2      	ldrb	r2, [r2, r3]
    981e:	4b89      	ldr	r3, [pc, #548]	; (9a44 <eepromReadParams+0x61c>)
    9820:	701a      	strb	r2, [r3, #0]
    9822:	e002      	b.n	982a <eepromReadParams+0x402>
	}
	else
	{
		runSelfTestOnPOR = DEFAULT_SELFTESTONPOR_SETTING;
    9824:	4b87      	ldr	r3, [pc, #540]	; (9a44 <eepromReadParams+0x61c>)
    9826:	2200      	movs	r2, #0
    9828:	701a      	strb	r2, [r3, #0]
	}

	if ( (eepromStatus & EEPROM_PS1OUTPUTDUTYOFFSET_WRITTEN) == EEPROM_PS1OUTPUTDUTYOFFSET_WRITTEN)
    982a:	4b83      	ldr	r3, [pc, #524]	; (9a38 <eepromReadParams+0x610>)
    982c:	681a      	ldr	r2, [r3, #0]
    982e:	2380      	movs	r3, #128	; 0x80
    9830:	021b      	lsls	r3, r3, #8
    9832:	4013      	ands	r3, r2
    9834:	d025      	beq.n	9882 <eepromReadParams+0x45a>
	{
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    9836:	4b81      	ldr	r3, [pc, #516]	; (9a3c <eepromReadParams+0x614>)
    9838:	2000      	movs	r0, #0
    983a:	1c19      	adds	r1, r3, #0
    983c:	4b80      	ldr	r3, [pc, #512]	; (9a40 <eepromReadParams+0x618>)
    983e:	4798      	blx	r3
		*(pTempEepromBuf + 0) = eepromPageData[33];
    9840:	4b81      	ldr	r3, [pc, #516]	; (9a48 <eepromReadParams+0x620>)
    9842:	681b      	ldr	r3, [r3, #0]
    9844:	497d      	ldr	r1, [pc, #500]	; (9a3c <eepromReadParams+0x614>)
    9846:	2221      	movs	r2, #33	; 0x21
    9848:	5c8a      	ldrb	r2, [r1, r2]
    984a:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 1) = eepromPageData[34];
    984c:	4b7e      	ldr	r3, [pc, #504]	; (9a48 <eepromReadParams+0x620>)
    984e:	681b      	ldr	r3, [r3, #0]
    9850:	3301      	adds	r3, #1
    9852:	497a      	ldr	r1, [pc, #488]	; (9a3c <eepromReadParams+0x614>)
    9854:	2222      	movs	r2, #34	; 0x22
    9856:	5c8a      	ldrb	r2, [r1, r2]
    9858:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 2) = eepromPageData[35];
    985a:	4b7b      	ldr	r3, [pc, #492]	; (9a48 <eepromReadParams+0x620>)
    985c:	681b      	ldr	r3, [r3, #0]
    985e:	3302      	adds	r3, #2
    9860:	4976      	ldr	r1, [pc, #472]	; (9a3c <eepromReadParams+0x614>)
    9862:	2223      	movs	r2, #35	; 0x23
    9864:	5c8a      	ldrb	r2, [r1, r2]
    9866:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 3) = eepromPageData[36];
    9868:	4b77      	ldr	r3, [pc, #476]	; (9a48 <eepromReadParams+0x620>)
    986a:	681b      	ldr	r3, [r3, #0]
    986c:	3303      	adds	r3, #3
    986e:	4973      	ldr	r1, [pc, #460]	; (9a3c <eepromReadParams+0x614>)
    9870:	2224      	movs	r2, #36	; 0x24
    9872:	5c8a      	ldrb	r2, [r1, r2]
    9874:	701a      	strb	r2, [r3, #0]
		ps1.phpOutputDutyOffset = *(float *)pTempEepromBuf;
    9876:	4b74      	ldr	r3, [pc, #464]	; (9a48 <eepromReadParams+0x620>)
    9878:	681b      	ldr	r3, [r3, #0]
    987a:	681a      	ldr	r2, [r3, #0]
    987c:	4b73      	ldr	r3, [pc, #460]	; (9a4c <eepromReadParams+0x624>)
    987e:	631a      	str	r2, [r3, #48]	; 0x30
    9880:	e002      	b.n	9888 <eepromReadParams+0x460>
	}
	else
	{
		ps1.phpOutputDutyOffset = DEFAULT_PS1OUTPUTDUTYOFFSET_SETTING;
    9882:	4b72      	ldr	r3, [pc, #456]	; (9a4c <eepromReadParams+0x624>)
    9884:	2200      	movs	r2, #0
    9886:	631a      	str	r2, [r3, #48]	; 0x30
	}
	
	if ( (eepromStatus & EEPROM_PS2OUTPUTDUTYOFFSET_WRITTEN) == EEPROM_PS2OUTPUTDUTYOFFSET_WRITTEN)
    9888:	4b6b      	ldr	r3, [pc, #428]	; (9a38 <eepromReadParams+0x610>)
    988a:	681a      	ldr	r2, [r3, #0]
    988c:	2380      	movs	r3, #128	; 0x80
    988e:	025b      	lsls	r3, r3, #9
    9890:	4013      	ands	r3, r2
    9892:	d025      	beq.n	98e0 <eepromReadParams+0x4b8>
	{
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    9894:	4b69      	ldr	r3, [pc, #420]	; (9a3c <eepromReadParams+0x614>)
    9896:	2000      	movs	r0, #0
    9898:	1c19      	adds	r1, r3, #0
    989a:	4b69      	ldr	r3, [pc, #420]	; (9a40 <eepromReadParams+0x618>)
    989c:	4798      	blx	r3
		*(pTempEepromBuf + 0) = eepromPageData[37];
    989e:	4b6a      	ldr	r3, [pc, #424]	; (9a48 <eepromReadParams+0x620>)
    98a0:	681b      	ldr	r3, [r3, #0]
    98a2:	4966      	ldr	r1, [pc, #408]	; (9a3c <eepromReadParams+0x614>)
    98a4:	2225      	movs	r2, #37	; 0x25
    98a6:	5c8a      	ldrb	r2, [r1, r2]
    98a8:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 1) = eepromPageData[38];
    98aa:	4b67      	ldr	r3, [pc, #412]	; (9a48 <eepromReadParams+0x620>)
    98ac:	681b      	ldr	r3, [r3, #0]
    98ae:	3301      	adds	r3, #1
    98b0:	4962      	ldr	r1, [pc, #392]	; (9a3c <eepromReadParams+0x614>)
    98b2:	2226      	movs	r2, #38	; 0x26
    98b4:	5c8a      	ldrb	r2, [r1, r2]
    98b6:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 2) = eepromPageData[39];
    98b8:	4b63      	ldr	r3, [pc, #396]	; (9a48 <eepromReadParams+0x620>)
    98ba:	681b      	ldr	r3, [r3, #0]
    98bc:	3302      	adds	r3, #2
    98be:	495f      	ldr	r1, [pc, #380]	; (9a3c <eepromReadParams+0x614>)
    98c0:	2227      	movs	r2, #39	; 0x27
    98c2:	5c8a      	ldrb	r2, [r1, r2]
    98c4:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 3) = eepromPageData[40];
    98c6:	4b60      	ldr	r3, [pc, #384]	; (9a48 <eepromReadParams+0x620>)
    98c8:	681b      	ldr	r3, [r3, #0]
    98ca:	3303      	adds	r3, #3
    98cc:	495b      	ldr	r1, [pc, #364]	; (9a3c <eepromReadParams+0x614>)
    98ce:	2228      	movs	r2, #40	; 0x28
    98d0:	5c8a      	ldrb	r2, [r1, r2]
    98d2:	701a      	strb	r2, [r3, #0]
		ps2.phpOutputDutyOffset = *(float *)pTempEepromBuf;
    98d4:	4b5c      	ldr	r3, [pc, #368]	; (9a48 <eepromReadParams+0x620>)
    98d6:	681b      	ldr	r3, [r3, #0]
    98d8:	681a      	ldr	r2, [r3, #0]
    98da:	4b5d      	ldr	r3, [pc, #372]	; (9a50 <eepromReadParams+0x628>)
    98dc:	631a      	str	r2, [r3, #48]	; 0x30
    98de:	e002      	b.n	98e6 <eepromReadParams+0x4be>
	}
	else
	{
		ps2.phpOutputDutyOffset = DEFAULT_PS2OUTPUTDUTYOFFSET_SETTING;
    98e0:	4b5b      	ldr	r3, [pc, #364]	; (9a50 <eepromReadParams+0x628>)
    98e2:	2200      	movs	r2, #0
    98e4:	631a      	str	r2, [r3, #48]	; 0x30
	}	

	if ( (eepromStatus & EEPROM_MAXALLOWEDTEMP_WRITTEN) == EEPROM_MAXALLOWEDTEMP_WRITTEN)
    98e6:	4b54      	ldr	r3, [pc, #336]	; (9a38 <eepromReadParams+0x610>)
    98e8:	681a      	ldr	r2, [r3, #0]
    98ea:	2380      	movs	r3, #128	; 0x80
    98ec:	029b      	lsls	r3, r3, #10
    98ee:	4013      	ands	r3, r2
    98f0:	d025      	beq.n	993e <eepromReadParams+0x516>
	{
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    98f2:	4b52      	ldr	r3, [pc, #328]	; (9a3c <eepromReadParams+0x614>)
    98f4:	2000      	movs	r0, #0
    98f6:	1c19      	adds	r1, r3, #0
    98f8:	4b51      	ldr	r3, [pc, #324]	; (9a40 <eepromReadParams+0x618>)
    98fa:	4798      	blx	r3
		*(pTempEepromBuf + 0) = eepromPageData[41];
    98fc:	4b52      	ldr	r3, [pc, #328]	; (9a48 <eepromReadParams+0x620>)
    98fe:	681b      	ldr	r3, [r3, #0]
    9900:	494e      	ldr	r1, [pc, #312]	; (9a3c <eepromReadParams+0x614>)
    9902:	2229      	movs	r2, #41	; 0x29
    9904:	5c8a      	ldrb	r2, [r1, r2]
    9906:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 1) = eepromPageData[42];
    9908:	4b4f      	ldr	r3, [pc, #316]	; (9a48 <eepromReadParams+0x620>)
    990a:	681b      	ldr	r3, [r3, #0]
    990c:	3301      	adds	r3, #1
    990e:	494b      	ldr	r1, [pc, #300]	; (9a3c <eepromReadParams+0x614>)
    9910:	222a      	movs	r2, #42	; 0x2a
    9912:	5c8a      	ldrb	r2, [r1, r2]
    9914:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 2) = eepromPageData[43];
    9916:	4b4c      	ldr	r3, [pc, #304]	; (9a48 <eepromReadParams+0x620>)
    9918:	681b      	ldr	r3, [r3, #0]
    991a:	3302      	adds	r3, #2
    991c:	4947      	ldr	r1, [pc, #284]	; (9a3c <eepromReadParams+0x614>)
    991e:	222b      	movs	r2, #43	; 0x2b
    9920:	5c8a      	ldrb	r2, [r1, r2]
    9922:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 3) = eepromPageData[44];
    9924:	4b48      	ldr	r3, [pc, #288]	; (9a48 <eepromReadParams+0x620>)
    9926:	681b      	ldr	r3, [r3, #0]
    9928:	3303      	adds	r3, #3
    992a:	4944      	ldr	r1, [pc, #272]	; (9a3c <eepromReadParams+0x614>)
    992c:	222c      	movs	r2, #44	; 0x2c
    992e:	5c8a      	ldrb	r2, [r1, r2]
    9930:	701a      	strb	r2, [r3, #0]
		maxAllowedChamberTemp = *(float *)pTempEepromBuf;
    9932:	4b45      	ldr	r3, [pc, #276]	; (9a48 <eepromReadParams+0x620>)
    9934:	681b      	ldr	r3, [r3, #0]
    9936:	681a      	ldr	r2, [r3, #0]
    9938:	4b46      	ldr	r3, [pc, #280]	; (9a54 <eepromReadParams+0x62c>)
    993a:	601a      	str	r2, [r3, #0]
    993c:	e002      	b.n	9944 <eepromReadParams+0x51c>
	}
	else
	{
		maxAllowedChamberTemp = DEFAULT_MAX_ALLOWED_TCHA;
    993e:	4b45      	ldr	r3, [pc, #276]	; (9a54 <eepromReadParams+0x62c>)
    9940:	4a45      	ldr	r2, [pc, #276]	; (9a58 <eepromReadParams+0x630>)
    9942:	601a      	str	r2, [r3, #0]
	}	
	
	if ( (eepromStatus & EEPROM_MINALLOWEDTEMP_WRITTEN) == EEPROM_MINALLOWEDTEMP_WRITTEN)
    9944:	4b3c      	ldr	r3, [pc, #240]	; (9a38 <eepromReadParams+0x610>)
    9946:	681a      	ldr	r2, [r3, #0]
    9948:	2380      	movs	r3, #128	; 0x80
    994a:	02db      	lsls	r3, r3, #11
    994c:	4013      	ands	r3, r2
    994e:	d025      	beq.n	999c <eepromReadParams+0x574>
	{
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    9950:	4b3a      	ldr	r3, [pc, #232]	; (9a3c <eepromReadParams+0x614>)
    9952:	2000      	movs	r0, #0
    9954:	1c19      	adds	r1, r3, #0
    9956:	4b3a      	ldr	r3, [pc, #232]	; (9a40 <eepromReadParams+0x618>)
    9958:	4798      	blx	r3
		*(pTempEepromBuf + 0) = eepromPageData[45];
    995a:	4b3b      	ldr	r3, [pc, #236]	; (9a48 <eepromReadParams+0x620>)
    995c:	681b      	ldr	r3, [r3, #0]
    995e:	4937      	ldr	r1, [pc, #220]	; (9a3c <eepromReadParams+0x614>)
    9960:	222d      	movs	r2, #45	; 0x2d
    9962:	5c8a      	ldrb	r2, [r1, r2]
    9964:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 1) = eepromPageData[46];
    9966:	4b38      	ldr	r3, [pc, #224]	; (9a48 <eepromReadParams+0x620>)
    9968:	681b      	ldr	r3, [r3, #0]
    996a:	3301      	adds	r3, #1
    996c:	4933      	ldr	r1, [pc, #204]	; (9a3c <eepromReadParams+0x614>)
    996e:	222e      	movs	r2, #46	; 0x2e
    9970:	5c8a      	ldrb	r2, [r1, r2]
    9972:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 2) = eepromPageData[47];
    9974:	4b34      	ldr	r3, [pc, #208]	; (9a48 <eepromReadParams+0x620>)
    9976:	681b      	ldr	r3, [r3, #0]
    9978:	3302      	adds	r3, #2
    997a:	4930      	ldr	r1, [pc, #192]	; (9a3c <eepromReadParams+0x614>)
    997c:	222f      	movs	r2, #47	; 0x2f
    997e:	5c8a      	ldrb	r2, [r1, r2]
    9980:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 3) = eepromPageData[48];
    9982:	4b31      	ldr	r3, [pc, #196]	; (9a48 <eepromReadParams+0x620>)
    9984:	681b      	ldr	r3, [r3, #0]
    9986:	3303      	adds	r3, #3
    9988:	492c      	ldr	r1, [pc, #176]	; (9a3c <eepromReadParams+0x614>)
    998a:	2230      	movs	r2, #48	; 0x30
    998c:	5c8a      	ldrb	r2, [r1, r2]
    998e:	701a      	strb	r2, [r3, #0]
		minAllowedChamberTemp = *(float *)pTempEepromBuf;
    9990:	4b2d      	ldr	r3, [pc, #180]	; (9a48 <eepromReadParams+0x620>)
    9992:	681b      	ldr	r3, [r3, #0]
    9994:	681a      	ldr	r2, [r3, #0]
    9996:	4b31      	ldr	r3, [pc, #196]	; (9a5c <eepromReadParams+0x634>)
    9998:	601a      	str	r2, [r3, #0]
    999a:	e002      	b.n	99a2 <eepromReadParams+0x57a>
	}
	else
	{
		minAllowedChamberTemp = DEFAULT_MIN_ALLOWED_TCHA;
    999c:	4b2f      	ldr	r3, [pc, #188]	; (9a5c <eepromReadParams+0x634>)
    999e:	4a30      	ldr	r2, [pc, #192]	; (9a60 <eepromReadParams+0x638>)
    99a0:	601a      	str	r2, [r3, #0]
	}	

	if ( (eepromStatus & EEPROM_DOOROPENLIFETIMECNT_WRITTEN) == EEPROM_DOOROPENLIFETIMECNT_WRITTEN)
    99a2:	4b25      	ldr	r3, [pc, #148]	; (9a38 <eepromReadParams+0x610>)
    99a4:	681a      	ldr	r2, [r3, #0]
    99a6:	2380      	movs	r3, #128	; 0x80
    99a8:	031b      	lsls	r3, r3, #12
    99aa:	4013      	ands	r3, r2
    99ac:	d025      	beq.n	99fa <eepromReadParams+0x5d2>
	{
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    99ae:	4b23      	ldr	r3, [pc, #140]	; (9a3c <eepromReadParams+0x614>)
    99b0:	2000      	movs	r0, #0
    99b2:	1c19      	adds	r1, r3, #0
    99b4:	4b22      	ldr	r3, [pc, #136]	; (9a40 <eepromReadParams+0x618>)
    99b6:	4798      	blx	r3
		*(pTempEepromBuf + 0) = eepromPageData[49];
    99b8:	4b23      	ldr	r3, [pc, #140]	; (9a48 <eepromReadParams+0x620>)
    99ba:	681b      	ldr	r3, [r3, #0]
    99bc:	491f      	ldr	r1, [pc, #124]	; (9a3c <eepromReadParams+0x614>)
    99be:	2231      	movs	r2, #49	; 0x31
    99c0:	5c8a      	ldrb	r2, [r1, r2]
    99c2:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 1) = eepromPageData[50];
    99c4:	4b20      	ldr	r3, [pc, #128]	; (9a48 <eepromReadParams+0x620>)
    99c6:	681b      	ldr	r3, [r3, #0]
    99c8:	3301      	adds	r3, #1
    99ca:	491c      	ldr	r1, [pc, #112]	; (9a3c <eepromReadParams+0x614>)
    99cc:	2232      	movs	r2, #50	; 0x32
    99ce:	5c8a      	ldrb	r2, [r1, r2]
    99d0:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 2) = eepromPageData[51];
    99d2:	4b1d      	ldr	r3, [pc, #116]	; (9a48 <eepromReadParams+0x620>)
    99d4:	681b      	ldr	r3, [r3, #0]
    99d6:	3302      	adds	r3, #2
    99d8:	4918      	ldr	r1, [pc, #96]	; (9a3c <eepromReadParams+0x614>)
    99da:	2233      	movs	r2, #51	; 0x33
    99dc:	5c8a      	ldrb	r2, [r1, r2]
    99de:	701a      	strb	r2, [r3, #0]
		*(pTempEepromBuf + 3) = eepromPageData[52];
    99e0:	4b19      	ldr	r3, [pc, #100]	; (9a48 <eepromReadParams+0x620>)
    99e2:	681b      	ldr	r3, [r3, #0]
    99e4:	3303      	adds	r3, #3
    99e6:	4915      	ldr	r1, [pc, #84]	; (9a3c <eepromReadParams+0x614>)
    99e8:	2234      	movs	r2, #52	; 0x34
    99ea:	5c8a      	ldrb	r2, [r1, r2]
    99ec:	701a      	strb	r2, [r3, #0]
		doorOpenLifetimeCnt = (*(uint32_t *)pTempEepromBuf);
    99ee:	4b16      	ldr	r3, [pc, #88]	; (9a48 <eepromReadParams+0x620>)
    99f0:	681b      	ldr	r3, [r3, #0]
    99f2:	681a      	ldr	r2, [r3, #0]
    99f4:	4b1b      	ldr	r3, [pc, #108]	; (9a64 <eepromReadParams+0x63c>)
    99f6:	601a      	str	r2, [r3, #0]
    99f8:	e002      	b.n	9a00 <eepromReadParams+0x5d8>
	}
	else
	{
		doorOpenLifetimeCnt = 0x00;
    99fa:	4b1a      	ldr	r3, [pc, #104]	; (9a64 <eepromReadParams+0x63c>)
    99fc:	2200      	movs	r2, #0
    99fe:	601a      	str	r2, [r3, #0]
	}	
	
	if ( (eepromStatus & EEPROM_DOOROPENCOUNT1HRLIMIT_WRITTEN) == EEPROM_DOOROPENCOUNT1HRLIMIT_WRITTEN)
    9a00:	4b0d      	ldr	r3, [pc, #52]	; (9a38 <eepromReadParams+0x610>)
    9a02:	681a      	ldr	r2, [r3, #0]
    9a04:	2380      	movs	r3, #128	; 0x80
    9a06:	035b      	lsls	r3, r3, #13
    9a08:	4013      	ands	r3, r2
    9a0a:	d00b      	beq.n	9a24 <eepromReadParams+0x5fc>
	{
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    9a0c:	4b0b      	ldr	r3, [pc, #44]	; (9a3c <eepromReadParams+0x614>)
    9a0e:	2000      	movs	r0, #0
    9a10:	1c19      	adds	r1, r3, #0
    9a12:	4b0b      	ldr	r3, [pc, #44]	; (9a40 <eepromReadParams+0x618>)
    9a14:	4798      	blx	r3
		doorOpenCount1HrLimit = eepromPageData[53];
    9a16:	4a09      	ldr	r2, [pc, #36]	; (9a3c <eepromReadParams+0x614>)
    9a18:	2335      	movs	r3, #53	; 0x35
    9a1a:	5cd3      	ldrb	r3, [r2, r3]
    9a1c:	1c1a      	adds	r2, r3, #0
    9a1e:	4b12      	ldr	r3, [pc, #72]	; (9a68 <eepromReadParams+0x640>)
    9a20:	801a      	strh	r2, [r3, #0]
    9a22:	e002      	b.n	9a2a <eepromReadParams+0x602>
	}
	else
	{
		doorOpenCount1HrLimit = DEFAULT_DOOR_OPEN_CNT_1HR_LIMIT;
    9a24:	4b10      	ldr	r3, [pc, #64]	; (9a68 <eepromReadParams+0x640>)
    9a26:	220a      	movs	r2, #10
    9a28:	801a      	strh	r2, [r3, #0]
	}	

}
    9a2a:	46bd      	mov	sp, r7
    9a2c:	bd98      	pop	{r3, r4, r7, pc}
    9a2e:	46c0      	nop			; (mov r8, r8)
    9a30:	2000018e 	.word	0x2000018e
    9a34:	00000f86 	.word	0x00000f86
    9a38:	200002f8 	.word	0x200002f8
    9a3c:	20000888 	.word	0x20000888
    9a40:	00019695 	.word	0x00019695
    9a44:	2000004c 	.word	0x2000004c
    9a48:	20000060 	.word	0x20000060
    9a4c:	20000a84 	.word	0x20000a84
    9a50:	20000d64 	.word	0x20000d64
    9a54:	20000180 	.word	0x20000180
    9a58:	c1700000 	.word	0xc1700000
    9a5c:	20000184 	.word	0x20000184
    9a60:	c1c80000 	.word	0xc1c80000
    9a64:	2000090c 	.word	0x2000090c
    9a68:	20000166 	.word	0x20000166

00009a6c <eepromWriteParams>:

void eepromWriteParams(void)
{
    9a6c:	b580      	push	{r7, lr}
    9a6e:	af00      	add	r7, sp, #0
	// [13..19] (string) ui fw ver string
	
	// PAGE2
	// [0..15]  (string) serial
	
	if (eepromDataInfo.pAddr == &chamber1.chamberOffset)
    9a70:	4bd6      	ldr	r3, [pc, #856]	; (9dcc <eepromWriteParams+0x360>)
    9a72:	681a      	ldr	r2, [r3, #0]
    9a74:	4bd6      	ldr	r3, [pc, #856]	; (9dd0 <eepromWriteParams+0x364>)
    9a76:	429a      	cmp	r2, r3
    9a78:	d12e      	bne.n	9ad8 <eepromWriteParams+0x6c>
	{
		pTempEepromBuf = floatToByteArray((float)chamber1.chamberOffset);
    9a7a:	4bd6      	ldr	r3, [pc, #856]	; (9dd4 <eepromWriteParams+0x368>)
    9a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9a7e:	1c18      	adds	r0, r3, #0
    9a80:	4bd5      	ldr	r3, [pc, #852]	; (9dd8 <eepromWriteParams+0x36c>)
    9a82:	4798      	blx	r3
    9a84:	1c02      	adds	r2, r0, #0
    9a86:	4bd5      	ldr	r3, [pc, #852]	; (9ddc <eepromWriteParams+0x370>)
    9a88:	601a      	str	r2, [r3, #0]
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    9a8a:	4bd5      	ldr	r3, [pc, #852]	; (9de0 <eepromWriteParams+0x374>)
    9a8c:	2000      	movs	r0, #0
    9a8e:	1c19      	adds	r1, r3, #0
    9a90:	4bd4      	ldr	r3, [pc, #848]	; (9de4 <eepromWriteParams+0x378>)
    9a92:	4798      	blx	r3
		eepromPageData[0] = *(pTempEepromBuf + 0);
    9a94:	4bd1      	ldr	r3, [pc, #836]	; (9ddc <eepromWriteParams+0x370>)
    9a96:	681b      	ldr	r3, [r3, #0]
    9a98:	781a      	ldrb	r2, [r3, #0]
    9a9a:	4bd1      	ldr	r3, [pc, #836]	; (9de0 <eepromWriteParams+0x374>)
    9a9c:	701a      	strb	r2, [r3, #0]
		eepromPageData[1] = *(pTempEepromBuf + 1);
    9a9e:	4bcf      	ldr	r3, [pc, #828]	; (9ddc <eepromWriteParams+0x370>)
    9aa0:	681b      	ldr	r3, [r3, #0]
    9aa2:	785a      	ldrb	r2, [r3, #1]
    9aa4:	4bce      	ldr	r3, [pc, #824]	; (9de0 <eepromWriteParams+0x374>)
    9aa6:	705a      	strb	r2, [r3, #1]
		eepromPageData[2] = *(pTempEepromBuf + 2);
    9aa8:	4bcc      	ldr	r3, [pc, #816]	; (9ddc <eepromWriteParams+0x370>)
    9aaa:	681b      	ldr	r3, [r3, #0]
    9aac:	789a      	ldrb	r2, [r3, #2]
    9aae:	4bcc      	ldr	r3, [pc, #816]	; (9de0 <eepromWriteParams+0x374>)
    9ab0:	709a      	strb	r2, [r3, #2]
		eepromPageData[3] = *(pTempEepromBuf + 3);
    9ab2:	4bca      	ldr	r3, [pc, #808]	; (9ddc <eepromWriteParams+0x370>)
    9ab4:	681b      	ldr	r3, [r3, #0]
    9ab6:	78da      	ldrb	r2, [r3, #3]
    9ab8:	4bc9      	ldr	r3, [pc, #804]	; (9de0 <eepromWriteParams+0x374>)
    9aba:	70da      	strb	r2, [r3, #3]
		eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
    9abc:	4bc8      	ldr	r3, [pc, #800]	; (9de0 <eepromWriteParams+0x374>)
    9abe:	2000      	movs	r0, #0
    9ac0:	1c19      	adds	r1, r3, #0
    9ac2:	4bc9      	ldr	r3, [pc, #804]	; (9de8 <eepromWriteParams+0x37c>)
    9ac4:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    9ac6:	4bc9      	ldr	r3, [pc, #804]	; (9dec <eepromWriteParams+0x380>)
    9ac8:	4798      	blx	r3
		eepromStatus |= EEPROM_CHAMBEROFFSET_WRITTEN;
    9aca:	4bc9      	ldr	r3, [pc, #804]	; (9df0 <eepromWriteParams+0x384>)
    9acc:	681b      	ldr	r3, [r3, #0]
    9ace:	2201      	movs	r2, #1
    9ad0:	431a      	orrs	r2, r3
    9ad2:	4bc7      	ldr	r3, [pc, #796]	; (9df0 <eepromWriteParams+0x384>)
    9ad4:	601a      	str	r2, [r3, #0]
    9ad6:	e2e0      	b.n	a09a <eepromWriteParams+0x62e>
		//dbg("\neeprom programmed");
	}
	else if (eepromDataInfo.pAddr == &chamber1.glycolOffset)
    9ad8:	4bbc      	ldr	r3, [pc, #752]	; (9dcc <eepromWriteParams+0x360>)
    9ada:	681a      	ldr	r2, [r3, #0]
    9adc:	4bc5      	ldr	r3, [pc, #788]	; (9df4 <eepromWriteParams+0x388>)
    9ade:	429a      	cmp	r2, r3
    9ae0:	d12e      	bne.n	9b40 <eepromWriteParams+0xd4>
	{
		pTempEepromBuf = floatToByteArray((float)chamber1.glycolOffset);
    9ae2:	4bbc      	ldr	r3, [pc, #752]	; (9dd4 <eepromWriteParams+0x368>)
    9ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    9ae6:	1c18      	adds	r0, r3, #0
    9ae8:	4bbb      	ldr	r3, [pc, #748]	; (9dd8 <eepromWriteParams+0x36c>)
    9aea:	4798      	blx	r3
    9aec:	1c02      	adds	r2, r0, #0
    9aee:	4bbb      	ldr	r3, [pc, #748]	; (9ddc <eepromWriteParams+0x370>)
    9af0:	601a      	str	r2, [r3, #0]
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    9af2:	4bbb      	ldr	r3, [pc, #748]	; (9de0 <eepromWriteParams+0x374>)
    9af4:	2000      	movs	r0, #0
    9af6:	1c19      	adds	r1, r3, #0
    9af8:	4bba      	ldr	r3, [pc, #744]	; (9de4 <eepromWriteParams+0x378>)
    9afa:	4798      	blx	r3
		eepromPageData[4] = *(pTempEepromBuf + 0);
    9afc:	4bb7      	ldr	r3, [pc, #732]	; (9ddc <eepromWriteParams+0x370>)
    9afe:	681b      	ldr	r3, [r3, #0]
    9b00:	781a      	ldrb	r2, [r3, #0]
    9b02:	4bb7      	ldr	r3, [pc, #732]	; (9de0 <eepromWriteParams+0x374>)
    9b04:	711a      	strb	r2, [r3, #4]
		eepromPageData[5] = *(pTempEepromBuf + 1);
    9b06:	4bb5      	ldr	r3, [pc, #724]	; (9ddc <eepromWriteParams+0x370>)
    9b08:	681b      	ldr	r3, [r3, #0]
    9b0a:	785a      	ldrb	r2, [r3, #1]
    9b0c:	4bb4      	ldr	r3, [pc, #720]	; (9de0 <eepromWriteParams+0x374>)
    9b0e:	715a      	strb	r2, [r3, #5]
		eepromPageData[6] = *(pTempEepromBuf + 2);
    9b10:	4bb2      	ldr	r3, [pc, #712]	; (9ddc <eepromWriteParams+0x370>)
    9b12:	681b      	ldr	r3, [r3, #0]
    9b14:	789a      	ldrb	r2, [r3, #2]
    9b16:	4bb2      	ldr	r3, [pc, #712]	; (9de0 <eepromWriteParams+0x374>)
    9b18:	719a      	strb	r2, [r3, #6]
		eepromPageData[7] = *(pTempEepromBuf + 3);
    9b1a:	4bb0      	ldr	r3, [pc, #704]	; (9ddc <eepromWriteParams+0x370>)
    9b1c:	681b      	ldr	r3, [r3, #0]
    9b1e:	78da      	ldrb	r2, [r3, #3]
    9b20:	4baf      	ldr	r3, [pc, #700]	; (9de0 <eepromWriteParams+0x374>)
    9b22:	71da      	strb	r2, [r3, #7]
		eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
    9b24:	4bae      	ldr	r3, [pc, #696]	; (9de0 <eepromWriteParams+0x374>)
    9b26:	2000      	movs	r0, #0
    9b28:	1c19      	adds	r1, r3, #0
    9b2a:	4baf      	ldr	r3, [pc, #700]	; (9de8 <eepromWriteParams+0x37c>)
    9b2c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    9b2e:	4baf      	ldr	r3, [pc, #700]	; (9dec <eepromWriteParams+0x380>)
    9b30:	4798      	blx	r3
		eepromStatus |= EEPROM_GLYCOLOFFSET_WRITTEN;
    9b32:	4baf      	ldr	r3, [pc, #700]	; (9df0 <eepromWriteParams+0x384>)
    9b34:	681b      	ldr	r3, [r3, #0]
    9b36:	2202      	movs	r2, #2
    9b38:	431a      	orrs	r2, r3
    9b3a:	4bad      	ldr	r3, [pc, #692]	; (9df0 <eepromWriteParams+0x384>)
    9b3c:	601a      	str	r2, [r3, #0]
    9b3e:	e2ac      	b.n	a09a <eepromWriteParams+0x62e>
		//dbg("\neeprom programmed");
	}
	else if (eepromDataInfo.pAddr == &defrostFreqMaxHrs)
    9b40:	4ba2      	ldr	r3, [pc, #648]	; (9dcc <eepromWriteParams+0x360>)
    9b42:	681a      	ldr	r2, [r3, #0]
    9b44:	4bac      	ldr	r3, [pc, #688]	; (9df8 <eepromWriteParams+0x38c>)
    9b46:	429a      	cmp	r2, r3
    9b48:	d124      	bne.n	9b94 <eepromWriteParams+0x128>
	{
		pTempEepromBuf = intToByteArray((uint16_t)defrostFreqMaxHrs);
    9b4a:	4bab      	ldr	r3, [pc, #684]	; (9df8 <eepromWriteParams+0x38c>)
    9b4c:	881b      	ldrh	r3, [r3, #0]
    9b4e:	1c18      	adds	r0, r3, #0
    9b50:	4baa      	ldr	r3, [pc, #680]	; (9dfc <eepromWriteParams+0x390>)
    9b52:	4798      	blx	r3
    9b54:	1c02      	adds	r2, r0, #0
    9b56:	4ba1      	ldr	r3, [pc, #644]	; (9ddc <eepromWriteParams+0x370>)
    9b58:	601a      	str	r2, [r3, #0]
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    9b5a:	4ba1      	ldr	r3, [pc, #644]	; (9de0 <eepromWriteParams+0x374>)
    9b5c:	2000      	movs	r0, #0
    9b5e:	1c19      	adds	r1, r3, #0
    9b60:	4ba0      	ldr	r3, [pc, #640]	; (9de4 <eepromWriteParams+0x378>)
    9b62:	4798      	blx	r3
		eepromPageData[8]  = *(pTempEepromBuf + 0);
    9b64:	4b9d      	ldr	r3, [pc, #628]	; (9ddc <eepromWriteParams+0x370>)
    9b66:	681b      	ldr	r3, [r3, #0]
    9b68:	781a      	ldrb	r2, [r3, #0]
    9b6a:	4b9d      	ldr	r3, [pc, #628]	; (9de0 <eepromWriteParams+0x374>)
    9b6c:	721a      	strb	r2, [r3, #8]
		eepromPageData[9]  = *(pTempEepromBuf + 1);
    9b6e:	4b9b      	ldr	r3, [pc, #620]	; (9ddc <eepromWriteParams+0x370>)
    9b70:	681b      	ldr	r3, [r3, #0]
    9b72:	785a      	ldrb	r2, [r3, #1]
    9b74:	4b9a      	ldr	r3, [pc, #616]	; (9de0 <eepromWriteParams+0x374>)
    9b76:	725a      	strb	r2, [r3, #9]
		eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
    9b78:	4b99      	ldr	r3, [pc, #612]	; (9de0 <eepromWriteParams+0x374>)
    9b7a:	2000      	movs	r0, #0
    9b7c:	1c19      	adds	r1, r3, #0
    9b7e:	4b9a      	ldr	r3, [pc, #616]	; (9de8 <eepromWriteParams+0x37c>)
    9b80:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    9b82:	4b9a      	ldr	r3, [pc, #616]	; (9dec <eepromWriteParams+0x380>)
    9b84:	4798      	blx	r3
		eepromStatus |= EEPROM_DEFROSTFREQMAXHRS_WRITTEN;
    9b86:	4b9a      	ldr	r3, [pc, #616]	; (9df0 <eepromWriteParams+0x384>)
    9b88:	681b      	ldr	r3, [r3, #0]
    9b8a:	2204      	movs	r2, #4
    9b8c:	431a      	orrs	r2, r3
    9b8e:	4b98      	ldr	r3, [pc, #608]	; (9df0 <eepromWriteParams+0x384>)
    9b90:	601a      	str	r2, [r3, #0]
    9b92:	e282      	b.n	a09a <eepromWriteParams+0x62e>
		//dbg("\neeprom programmed");
	}
	else if (eepromDataInfo.pAddr == &defrostFreqHrs)
    9b94:	4b8d      	ldr	r3, [pc, #564]	; (9dcc <eepromWriteParams+0x360>)
    9b96:	681a      	ldr	r2, [r3, #0]
    9b98:	4b99      	ldr	r3, [pc, #612]	; (9e00 <eepromWriteParams+0x394>)
    9b9a:	429a      	cmp	r2, r3
    9b9c:	d116      	bne.n	9bcc <eepromWriteParams+0x160>
	{
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    9b9e:	4b90      	ldr	r3, [pc, #576]	; (9de0 <eepromWriteParams+0x374>)
    9ba0:	2000      	movs	r0, #0
    9ba2:	1c19      	adds	r1, r3, #0
    9ba4:	4b8f      	ldr	r3, [pc, #572]	; (9de4 <eepromWriteParams+0x378>)
    9ba6:	4798      	blx	r3
		eepromPageData[10]  = defrostFreqHrs;
    9ba8:	4b95      	ldr	r3, [pc, #596]	; (9e00 <eepromWriteParams+0x394>)
    9baa:	781a      	ldrb	r2, [r3, #0]
    9bac:	4b8c      	ldr	r3, [pc, #560]	; (9de0 <eepromWriteParams+0x374>)
    9bae:	729a      	strb	r2, [r3, #10]
		eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
    9bb0:	4b8b      	ldr	r3, [pc, #556]	; (9de0 <eepromWriteParams+0x374>)
    9bb2:	2000      	movs	r0, #0
    9bb4:	1c19      	adds	r1, r3, #0
    9bb6:	4b8c      	ldr	r3, [pc, #560]	; (9de8 <eepromWriteParams+0x37c>)
    9bb8:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    9bba:	4b8c      	ldr	r3, [pc, #560]	; (9dec <eepromWriteParams+0x380>)
    9bbc:	4798      	blx	r3
		eepromStatus |= EEPROM_DEFROSTFREQHRS_WRITTEN;
    9bbe:	4b8c      	ldr	r3, [pc, #560]	; (9df0 <eepromWriteParams+0x384>)
    9bc0:	681b      	ldr	r3, [r3, #0]
    9bc2:	2208      	movs	r2, #8
    9bc4:	431a      	orrs	r2, r3
    9bc6:	4b8a      	ldr	r3, [pc, #552]	; (9df0 <eepromWriteParams+0x384>)
    9bc8:	601a      	str	r2, [r3, #0]
    9bca:	e266      	b.n	a09a <eepromWriteParams+0x62e>
		//dbg("\neeprom programmed");
	}
	else if (eepromDataInfo.pAddr == &defrostDurationMins)
    9bcc:	4b7f      	ldr	r3, [pc, #508]	; (9dcc <eepromWriteParams+0x360>)
    9bce:	681a      	ldr	r2, [r3, #0]
    9bd0:	4b8c      	ldr	r3, [pc, #560]	; (9e04 <eepromWriteParams+0x398>)
    9bd2:	429a      	cmp	r2, r3
    9bd4:	d116      	bne.n	9c04 <eepromWriteParams+0x198>
	{
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    9bd6:	4b82      	ldr	r3, [pc, #520]	; (9de0 <eepromWriteParams+0x374>)
    9bd8:	2000      	movs	r0, #0
    9bda:	1c19      	adds	r1, r3, #0
    9bdc:	4b81      	ldr	r3, [pc, #516]	; (9de4 <eepromWriteParams+0x378>)
    9bde:	4798      	blx	r3
		eepromPageData[11]  = defrostDurationMins;
    9be0:	4b88      	ldr	r3, [pc, #544]	; (9e04 <eepromWriteParams+0x398>)
    9be2:	781a      	ldrb	r2, [r3, #0]
    9be4:	4b7e      	ldr	r3, [pc, #504]	; (9de0 <eepromWriteParams+0x374>)
    9be6:	72da      	strb	r2, [r3, #11]
		eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
    9be8:	4b7d      	ldr	r3, [pc, #500]	; (9de0 <eepromWriteParams+0x374>)
    9bea:	2000      	movs	r0, #0
    9bec:	1c19      	adds	r1, r3, #0
    9bee:	4b7e      	ldr	r3, [pc, #504]	; (9de8 <eepromWriteParams+0x37c>)
    9bf0:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    9bf2:	4b7e      	ldr	r3, [pc, #504]	; (9dec <eepromWriteParams+0x380>)
    9bf4:	4798      	blx	r3
		eepromStatus |= EEPROM_DEFROSTDURATIONMINS_WRITTEN;
    9bf6:	4b7e      	ldr	r3, [pc, #504]	; (9df0 <eepromWriteParams+0x384>)
    9bf8:	681b      	ldr	r3, [r3, #0]
    9bfa:	2210      	movs	r2, #16
    9bfc:	431a      	orrs	r2, r3
    9bfe:	4b7c      	ldr	r3, [pc, #496]	; (9df0 <eepromWriteParams+0x384>)
    9c00:	601a      	str	r2, [r3, #0]
    9c02:	e24a      	b.n	a09a <eepromWriteParams+0x62e>
		//dbg("\neeprom programmed");
	}
	else if (eepromDataInfo.pAddr == &mfgTestModeFlag1)
    9c04:	4b71      	ldr	r3, [pc, #452]	; (9dcc <eepromWriteParams+0x360>)
    9c06:	681a      	ldr	r2, [r3, #0]
    9c08:	4b7f      	ldr	r3, [pc, #508]	; (9e08 <eepromWriteParams+0x39c>)
    9c0a:	429a      	cmp	r2, r3
    9c0c:	d117      	bne.n	9c3e <eepromWriteParams+0x1d2>
	{
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    9c0e:	4b74      	ldr	r3, [pc, #464]	; (9de0 <eepromWriteParams+0x374>)
    9c10:	2000      	movs	r0, #0
    9c12:	1c19      	adds	r1, r3, #0
    9c14:	4b73      	ldr	r3, [pc, #460]	; (9de4 <eepromWriteParams+0x378>)
    9c16:	4798      	blx	r3
		eepromPageData[22]  = mfgTestModeFlag1;
    9c18:	4b7b      	ldr	r3, [pc, #492]	; (9e08 <eepromWriteParams+0x39c>)
    9c1a:	781a      	ldrb	r2, [r3, #0]
    9c1c:	4b70      	ldr	r3, [pc, #448]	; (9de0 <eepromWriteParams+0x374>)
    9c1e:	759a      	strb	r2, [r3, #22]
		eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
    9c20:	4b6f      	ldr	r3, [pc, #444]	; (9de0 <eepromWriteParams+0x374>)
    9c22:	2000      	movs	r0, #0
    9c24:	1c19      	adds	r1, r3, #0
    9c26:	4b70      	ldr	r3, [pc, #448]	; (9de8 <eepromWriteParams+0x37c>)
    9c28:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    9c2a:	4b70      	ldr	r3, [pc, #448]	; (9dec <eepromWriteParams+0x380>)
    9c2c:	4798      	blx	r3
		eepromStatus |= EEPROM_MFGTESTFLAG1_WRITTEN;
    9c2e:	4b70      	ldr	r3, [pc, #448]	; (9df0 <eepromWriteParams+0x384>)
    9c30:	681b      	ldr	r3, [r3, #0]
    9c32:	2280      	movs	r2, #128	; 0x80
    9c34:	0052      	lsls	r2, r2, #1
    9c36:	431a      	orrs	r2, r3
    9c38:	4b6d      	ldr	r3, [pc, #436]	; (9df0 <eepromWriteParams+0x384>)
    9c3a:	601a      	str	r2, [r3, #0]
    9c3c:	e22d      	b.n	a09a <eepromWriteParams+0x62e>
		//dbg("\neeprom programmed");
	}
	else if (eepromDataInfo.pAddr == &mfgTestModeFlag2)
    9c3e:	4b63      	ldr	r3, [pc, #396]	; (9dcc <eepromWriteParams+0x360>)
    9c40:	681a      	ldr	r2, [r3, #0]
    9c42:	4b72      	ldr	r3, [pc, #456]	; (9e0c <eepromWriteParams+0x3a0>)
    9c44:	429a      	cmp	r2, r3
    9c46:	d117      	bne.n	9c78 <eepromWriteParams+0x20c>
	{
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    9c48:	4b65      	ldr	r3, [pc, #404]	; (9de0 <eepromWriteParams+0x374>)
    9c4a:	2000      	movs	r0, #0
    9c4c:	1c19      	adds	r1, r3, #0
    9c4e:	4b65      	ldr	r3, [pc, #404]	; (9de4 <eepromWriteParams+0x378>)
    9c50:	4798      	blx	r3
		eepromPageData[23]  = mfgTestModeFlag2;
    9c52:	4b6e      	ldr	r3, [pc, #440]	; (9e0c <eepromWriteParams+0x3a0>)
    9c54:	781a      	ldrb	r2, [r3, #0]
    9c56:	4b62      	ldr	r3, [pc, #392]	; (9de0 <eepromWriteParams+0x374>)
    9c58:	75da      	strb	r2, [r3, #23]
		eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
    9c5a:	4b61      	ldr	r3, [pc, #388]	; (9de0 <eepromWriteParams+0x374>)
    9c5c:	2000      	movs	r0, #0
    9c5e:	1c19      	adds	r1, r3, #0
    9c60:	4b61      	ldr	r3, [pc, #388]	; (9de8 <eepromWriteParams+0x37c>)
    9c62:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    9c64:	4b61      	ldr	r3, [pc, #388]	; (9dec <eepromWriteParams+0x380>)
    9c66:	4798      	blx	r3
		eepromStatus |= EEPROM_MFGTESTFLAG2_WRITTEN;
    9c68:	4b61      	ldr	r3, [pc, #388]	; (9df0 <eepromWriteParams+0x384>)
    9c6a:	681b      	ldr	r3, [r3, #0]
    9c6c:	2280      	movs	r2, #128	; 0x80
    9c6e:	0092      	lsls	r2, r2, #2
    9c70:	431a      	orrs	r2, r3
    9c72:	4b5f      	ldr	r3, [pc, #380]	; (9df0 <eepromWriteParams+0x384>)
    9c74:	601a      	str	r2, [r3, #0]
    9c76:	e210      	b.n	a09a <eepromWriteParams+0x62e>
		//dbg("\neeprom programmed");
	}
	else if (eepromDataInfo.pAddr == &chamber2.chamberOffset)
    9c78:	4b54      	ldr	r3, [pc, #336]	; (9dcc <eepromWriteParams+0x360>)
    9c7a:	681a      	ldr	r2, [r3, #0]
    9c7c:	4b64      	ldr	r3, [pc, #400]	; (9e10 <eepromWriteParams+0x3a4>)
    9c7e:	429a      	cmp	r2, r3
    9c80:	d12f      	bne.n	9ce2 <eepromWriteParams+0x276>
	{
		pTempEepromBuf = floatToByteArray((float)chamber2.chamberOffset);
    9c82:	4b64      	ldr	r3, [pc, #400]	; (9e14 <eepromWriteParams+0x3a8>)
    9c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9c86:	1c18      	adds	r0, r3, #0
    9c88:	4b53      	ldr	r3, [pc, #332]	; (9dd8 <eepromWriteParams+0x36c>)
    9c8a:	4798      	blx	r3
    9c8c:	1c02      	adds	r2, r0, #0
    9c8e:	4b53      	ldr	r3, [pc, #332]	; (9ddc <eepromWriteParams+0x370>)
    9c90:	601a      	str	r2, [r3, #0]
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    9c92:	4b53      	ldr	r3, [pc, #332]	; (9de0 <eepromWriteParams+0x374>)
    9c94:	2000      	movs	r0, #0
    9c96:	1c19      	adds	r1, r3, #0
    9c98:	4b52      	ldr	r3, [pc, #328]	; (9de4 <eepromWriteParams+0x378>)
    9c9a:	4798      	blx	r3
		eepromPageData[24] = *(pTempEepromBuf + 0);
    9c9c:	4b4f      	ldr	r3, [pc, #316]	; (9ddc <eepromWriteParams+0x370>)
    9c9e:	681b      	ldr	r3, [r3, #0]
    9ca0:	781a      	ldrb	r2, [r3, #0]
    9ca2:	4b4f      	ldr	r3, [pc, #316]	; (9de0 <eepromWriteParams+0x374>)
    9ca4:	761a      	strb	r2, [r3, #24]
		eepromPageData[25] = *(pTempEepromBuf + 1);
    9ca6:	4b4d      	ldr	r3, [pc, #308]	; (9ddc <eepromWriteParams+0x370>)
    9ca8:	681b      	ldr	r3, [r3, #0]
    9caa:	785a      	ldrb	r2, [r3, #1]
    9cac:	4b4c      	ldr	r3, [pc, #304]	; (9de0 <eepromWriteParams+0x374>)
    9cae:	765a      	strb	r2, [r3, #25]
		eepromPageData[26] = *(pTempEepromBuf + 2);
    9cb0:	4b4a      	ldr	r3, [pc, #296]	; (9ddc <eepromWriteParams+0x370>)
    9cb2:	681b      	ldr	r3, [r3, #0]
    9cb4:	789a      	ldrb	r2, [r3, #2]
    9cb6:	4b4a      	ldr	r3, [pc, #296]	; (9de0 <eepromWriteParams+0x374>)
    9cb8:	769a      	strb	r2, [r3, #26]
		eepromPageData[27] = *(pTempEepromBuf + 3);
    9cba:	4b48      	ldr	r3, [pc, #288]	; (9ddc <eepromWriteParams+0x370>)
    9cbc:	681b      	ldr	r3, [r3, #0]
    9cbe:	78da      	ldrb	r2, [r3, #3]
    9cc0:	4b47      	ldr	r3, [pc, #284]	; (9de0 <eepromWriteParams+0x374>)
    9cc2:	76da      	strb	r2, [r3, #27]
		eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
    9cc4:	4b46      	ldr	r3, [pc, #280]	; (9de0 <eepromWriteParams+0x374>)
    9cc6:	2000      	movs	r0, #0
    9cc8:	1c19      	adds	r1, r3, #0
    9cca:	4b47      	ldr	r3, [pc, #284]	; (9de8 <eepromWriteParams+0x37c>)
    9ccc:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    9cce:	4b47      	ldr	r3, [pc, #284]	; (9dec <eepromWriteParams+0x380>)
    9cd0:	4798      	blx	r3
		eepromStatus |= EEPROM_CHAMBER2OFFSET_WRITTEN;
    9cd2:	4b47      	ldr	r3, [pc, #284]	; (9df0 <eepromWriteParams+0x384>)
    9cd4:	681b      	ldr	r3, [r3, #0]
    9cd6:	2280      	movs	r2, #128	; 0x80
    9cd8:	00d2      	lsls	r2, r2, #3
    9cda:	431a      	orrs	r2, r3
    9cdc:	4b44      	ldr	r3, [pc, #272]	; (9df0 <eepromWriteParams+0x384>)
    9cde:	601a      	str	r2, [r3, #0]
    9ce0:	e1db      	b.n	a09a <eepromWriteParams+0x62e>
		//dbg("\neeprom programmed");
	}
	else if (eepromDataInfo.pAddr == &chamberThermistorBeta)
    9ce2:	4b3a      	ldr	r3, [pc, #232]	; (9dcc <eepromWriteParams+0x360>)
    9ce4:	681a      	ldr	r2, [r3, #0]
    9ce6:	4b4c      	ldr	r3, [pc, #304]	; (9e18 <eepromWriteParams+0x3ac>)
    9ce8:	429a      	cmp	r2, r3
    9cea:	d125      	bne.n	9d38 <eepromWriteParams+0x2cc>
	{
		pTempEepromBuf = intToByteArray((uint16_t)chamberThermistorBeta);
    9cec:	4b4a      	ldr	r3, [pc, #296]	; (9e18 <eepromWriteParams+0x3ac>)
    9cee:	881b      	ldrh	r3, [r3, #0]
    9cf0:	1c18      	adds	r0, r3, #0
    9cf2:	4b42      	ldr	r3, [pc, #264]	; (9dfc <eepromWriteParams+0x390>)
    9cf4:	4798      	blx	r3
    9cf6:	1c02      	adds	r2, r0, #0
    9cf8:	4b38      	ldr	r3, [pc, #224]	; (9ddc <eepromWriteParams+0x370>)
    9cfa:	601a      	str	r2, [r3, #0]
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    9cfc:	4b38      	ldr	r3, [pc, #224]	; (9de0 <eepromWriteParams+0x374>)
    9cfe:	2000      	movs	r0, #0
    9d00:	1c19      	adds	r1, r3, #0
    9d02:	4b38      	ldr	r3, [pc, #224]	; (9de4 <eepromWriteParams+0x378>)
    9d04:	4798      	blx	r3
		eepromPageData[28]  = *(pTempEepromBuf + 0);
    9d06:	4b35      	ldr	r3, [pc, #212]	; (9ddc <eepromWriteParams+0x370>)
    9d08:	681b      	ldr	r3, [r3, #0]
    9d0a:	781a      	ldrb	r2, [r3, #0]
    9d0c:	4b34      	ldr	r3, [pc, #208]	; (9de0 <eepromWriteParams+0x374>)
    9d0e:	771a      	strb	r2, [r3, #28]
		eepromPageData[29]  = *(pTempEepromBuf + 1);
    9d10:	4b32      	ldr	r3, [pc, #200]	; (9ddc <eepromWriteParams+0x370>)
    9d12:	681b      	ldr	r3, [r3, #0]
    9d14:	785a      	ldrb	r2, [r3, #1]
    9d16:	4b32      	ldr	r3, [pc, #200]	; (9de0 <eepromWriteParams+0x374>)
    9d18:	775a      	strb	r2, [r3, #29]
		eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
    9d1a:	4b31      	ldr	r3, [pc, #196]	; (9de0 <eepromWriteParams+0x374>)
    9d1c:	2000      	movs	r0, #0
    9d1e:	1c19      	adds	r1, r3, #0
    9d20:	4b31      	ldr	r3, [pc, #196]	; (9de8 <eepromWriteParams+0x37c>)
    9d22:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    9d24:	4b31      	ldr	r3, [pc, #196]	; (9dec <eepromWriteParams+0x380>)
    9d26:	4798      	blx	r3
		eepromStatus |= EEPROM_CHAMBERBETA_WRITTEN;
    9d28:	4b31      	ldr	r3, [pc, #196]	; (9df0 <eepromWriteParams+0x384>)
    9d2a:	681b      	ldr	r3, [r3, #0]
    9d2c:	2280      	movs	r2, #128	; 0x80
    9d2e:	0112      	lsls	r2, r2, #4
    9d30:	431a      	orrs	r2, r3
    9d32:	4b2f      	ldr	r3, [pc, #188]	; (9df0 <eepromWriteParams+0x384>)
    9d34:	601a      	str	r2, [r3, #0]
    9d36:	e1b0      	b.n	a09a <eepromWriteParams+0x62e>
		//dbg("\neeprom programmed");
	}
	else if (eepromDataInfo.pAddr == &rejectThermistorBeta)
    9d38:	4b24      	ldr	r3, [pc, #144]	; (9dcc <eepromWriteParams+0x360>)
    9d3a:	681a      	ldr	r2, [r3, #0]
    9d3c:	4b37      	ldr	r3, [pc, #220]	; (9e1c <eepromWriteParams+0x3b0>)
    9d3e:	429a      	cmp	r2, r3
    9d40:	d125      	bne.n	9d8e <eepromWriteParams+0x322>
	{
		pTempEepromBuf = intToByteArray((uint16_t)rejectThermistorBeta);
    9d42:	4b36      	ldr	r3, [pc, #216]	; (9e1c <eepromWriteParams+0x3b0>)
    9d44:	881b      	ldrh	r3, [r3, #0]
    9d46:	1c18      	adds	r0, r3, #0
    9d48:	4b2c      	ldr	r3, [pc, #176]	; (9dfc <eepromWriteParams+0x390>)
    9d4a:	4798      	blx	r3
    9d4c:	1c02      	adds	r2, r0, #0
    9d4e:	4b23      	ldr	r3, [pc, #140]	; (9ddc <eepromWriteParams+0x370>)
    9d50:	601a      	str	r2, [r3, #0]
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    9d52:	4b23      	ldr	r3, [pc, #140]	; (9de0 <eepromWriteParams+0x374>)
    9d54:	2000      	movs	r0, #0
    9d56:	1c19      	adds	r1, r3, #0
    9d58:	4b22      	ldr	r3, [pc, #136]	; (9de4 <eepromWriteParams+0x378>)
    9d5a:	4798      	blx	r3
		eepromPageData[30]  = *(pTempEepromBuf + 0);
    9d5c:	4b1f      	ldr	r3, [pc, #124]	; (9ddc <eepromWriteParams+0x370>)
    9d5e:	681b      	ldr	r3, [r3, #0]
    9d60:	781a      	ldrb	r2, [r3, #0]
    9d62:	4b1f      	ldr	r3, [pc, #124]	; (9de0 <eepromWriteParams+0x374>)
    9d64:	779a      	strb	r2, [r3, #30]
		eepromPageData[31]  = *(pTempEepromBuf + 1);
    9d66:	4b1d      	ldr	r3, [pc, #116]	; (9ddc <eepromWriteParams+0x370>)
    9d68:	681b      	ldr	r3, [r3, #0]
    9d6a:	785a      	ldrb	r2, [r3, #1]
    9d6c:	4b1c      	ldr	r3, [pc, #112]	; (9de0 <eepromWriteParams+0x374>)
    9d6e:	77da      	strb	r2, [r3, #31]
		eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
    9d70:	4b1b      	ldr	r3, [pc, #108]	; (9de0 <eepromWriteParams+0x374>)
    9d72:	2000      	movs	r0, #0
    9d74:	1c19      	adds	r1, r3, #0
    9d76:	4b1c      	ldr	r3, [pc, #112]	; (9de8 <eepromWriteParams+0x37c>)
    9d78:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    9d7a:	4b1c      	ldr	r3, [pc, #112]	; (9dec <eepromWriteParams+0x380>)
    9d7c:	4798      	blx	r3
		eepromStatus |= EEPROM_REJECTBETA_WRITTEN;
    9d7e:	4b1c      	ldr	r3, [pc, #112]	; (9df0 <eepromWriteParams+0x384>)
    9d80:	681b      	ldr	r3, [r3, #0]
    9d82:	2280      	movs	r2, #128	; 0x80
    9d84:	0152      	lsls	r2, r2, #5
    9d86:	431a      	orrs	r2, r3
    9d88:	4b19      	ldr	r3, [pc, #100]	; (9df0 <eepromWriteParams+0x384>)
    9d8a:	601a      	str	r2, [r3, #0]
    9d8c:	e185      	b.n	a09a <eepromWriteParams+0x62e>
		//dbg("\neeprom programmed");
	}	
	else if (eepromDataInfo.pAddr == &runSelfTestOnPOR)
    9d8e:	4b0f      	ldr	r3, [pc, #60]	; (9dcc <eepromWriteParams+0x360>)
    9d90:	681a      	ldr	r2, [r3, #0]
    9d92:	4b23      	ldr	r3, [pc, #140]	; (9e20 <eepromWriteParams+0x3b4>)
    9d94:	429a      	cmp	r2, r3
    9d96:	d145      	bne.n	9e24 <eepromWriteParams+0x3b8>
	{
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    9d98:	4b11      	ldr	r3, [pc, #68]	; (9de0 <eepromWriteParams+0x374>)
    9d9a:	2000      	movs	r0, #0
    9d9c:	1c19      	adds	r1, r3, #0
    9d9e:	4b11      	ldr	r3, [pc, #68]	; (9de4 <eepromWriteParams+0x378>)
    9da0:	4798      	blx	r3
		eepromPageData[32]  = runSelfTestOnPOR;
    9da2:	4b1f      	ldr	r3, [pc, #124]	; (9e20 <eepromWriteParams+0x3b4>)
    9da4:	7819      	ldrb	r1, [r3, #0]
    9da6:	4a0e      	ldr	r2, [pc, #56]	; (9de0 <eepromWriteParams+0x374>)
    9da8:	2320      	movs	r3, #32
    9daa:	54d1      	strb	r1, [r2, r3]
		eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
    9dac:	4b0c      	ldr	r3, [pc, #48]	; (9de0 <eepromWriteParams+0x374>)
    9dae:	2000      	movs	r0, #0
    9db0:	1c19      	adds	r1, r3, #0
    9db2:	4b0d      	ldr	r3, [pc, #52]	; (9de8 <eepromWriteParams+0x37c>)
    9db4:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    9db6:	4b0d      	ldr	r3, [pc, #52]	; (9dec <eepromWriteParams+0x380>)
    9db8:	4798      	blx	r3
		eepromStatus |= EEPROM_RUNSELFTESTFLAG_WRITTEN;
    9dba:	4b0d      	ldr	r3, [pc, #52]	; (9df0 <eepromWriteParams+0x384>)
    9dbc:	681b      	ldr	r3, [r3, #0]
    9dbe:	2280      	movs	r2, #128	; 0x80
    9dc0:	01d2      	lsls	r2, r2, #7
    9dc2:	431a      	orrs	r2, r3
    9dc4:	4b0a      	ldr	r3, [pc, #40]	; (9df0 <eepromWriteParams+0x384>)
    9dc6:	601a      	str	r2, [r3, #0]
    9dc8:	e167      	b.n	a09a <eepromWriteParams+0x62e>
    9dca:	46c0      	nop			; (mov r8, r8)
    9dcc:	200008dc 	.word	0x200008dc
    9dd0:	200009f8 	.word	0x200009f8
    9dd4:	200009b8 	.word	0x200009b8
    9dd8:	00009339 	.word	0x00009339
    9ddc:	20000060 	.word	0x20000060
    9de0:	20000888 	.word	0x20000888
    9de4:	00019695 	.word	0x00019695
    9de8:	00019575 	.word	0x00019575
    9dec:	0001973d 	.word	0x0001973d
    9df0:	200002f8 	.word	0x200002f8
    9df4:	20000a0c 	.word	0x20000a0c
    9df8:	20000dbc 	.word	0x20000dbc
    9dfc:	00009389 	.word	0x00009389
    9e00:	20000910 	.word	0x20000910
    9e04:	200008d8 	.word	0x200008d8
    9e08:	20000088 	.word	0x20000088
    9e0c:	20000089 	.word	0x20000089
    9e10:	200009a0 	.word	0x200009a0
    9e14:	20000960 	.word	0x20000960
    9e18:	2000018c 	.word	0x2000018c
    9e1c:	2000018e 	.word	0x2000018e
    9e20:	2000004c 	.word	0x2000004c
	}
	else if (eepromDataInfo.pAddr == &ps1.phpOutputDutyOffset)
    9e24:	4bb3      	ldr	r3, [pc, #716]	; (a0f4 <eepromWriteParams+0x688>)
    9e26:	681a      	ldr	r2, [r3, #0]
    9e28:	4bb3      	ldr	r3, [pc, #716]	; (a0f8 <eepromWriteParams+0x68c>)
    9e2a:	429a      	cmp	r2, r3
    9e2c:	d133      	bne.n	9e96 <eepromWriteParams+0x42a>
	{
		pTempEepromBuf = floatToByteArray((float)ps1.phpOutputDutyOffset);
    9e2e:	4bb3      	ldr	r3, [pc, #716]	; (a0fc <eepromWriteParams+0x690>)
    9e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9e32:	1c18      	adds	r0, r3, #0
    9e34:	4bb2      	ldr	r3, [pc, #712]	; (a100 <eepromWriteParams+0x694>)
    9e36:	4798      	blx	r3
    9e38:	1c02      	adds	r2, r0, #0
    9e3a:	4bb2      	ldr	r3, [pc, #712]	; (a104 <eepromWriteParams+0x698>)
    9e3c:	601a      	str	r2, [r3, #0]
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    9e3e:	4bb2      	ldr	r3, [pc, #712]	; (a108 <eepromWriteParams+0x69c>)
    9e40:	2000      	movs	r0, #0
    9e42:	1c19      	adds	r1, r3, #0
    9e44:	4bb1      	ldr	r3, [pc, #708]	; (a10c <eepromWriteParams+0x6a0>)
    9e46:	4798      	blx	r3
		eepromPageData[33] = *(pTempEepromBuf + 0);
    9e48:	4bae      	ldr	r3, [pc, #696]	; (a104 <eepromWriteParams+0x698>)
    9e4a:	681b      	ldr	r3, [r3, #0]
    9e4c:	7819      	ldrb	r1, [r3, #0]
    9e4e:	4aae      	ldr	r2, [pc, #696]	; (a108 <eepromWriteParams+0x69c>)
    9e50:	2321      	movs	r3, #33	; 0x21
    9e52:	54d1      	strb	r1, [r2, r3]
		eepromPageData[34] = *(pTempEepromBuf + 1);
    9e54:	4bab      	ldr	r3, [pc, #684]	; (a104 <eepromWriteParams+0x698>)
    9e56:	681b      	ldr	r3, [r3, #0]
    9e58:	7859      	ldrb	r1, [r3, #1]
    9e5a:	4aab      	ldr	r2, [pc, #684]	; (a108 <eepromWriteParams+0x69c>)
    9e5c:	2322      	movs	r3, #34	; 0x22
    9e5e:	54d1      	strb	r1, [r2, r3]
		eepromPageData[35] = *(pTempEepromBuf + 2);
    9e60:	4ba8      	ldr	r3, [pc, #672]	; (a104 <eepromWriteParams+0x698>)
    9e62:	681b      	ldr	r3, [r3, #0]
    9e64:	7899      	ldrb	r1, [r3, #2]
    9e66:	4aa8      	ldr	r2, [pc, #672]	; (a108 <eepromWriteParams+0x69c>)
    9e68:	2323      	movs	r3, #35	; 0x23
    9e6a:	54d1      	strb	r1, [r2, r3]
		eepromPageData[36] = *(pTempEepromBuf + 3);
    9e6c:	4ba5      	ldr	r3, [pc, #660]	; (a104 <eepromWriteParams+0x698>)
    9e6e:	681b      	ldr	r3, [r3, #0]
    9e70:	78d9      	ldrb	r1, [r3, #3]
    9e72:	4aa5      	ldr	r2, [pc, #660]	; (a108 <eepromWriteParams+0x69c>)
    9e74:	2324      	movs	r3, #36	; 0x24
    9e76:	54d1      	strb	r1, [r2, r3]
		eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
    9e78:	4ba3      	ldr	r3, [pc, #652]	; (a108 <eepromWriteParams+0x69c>)
    9e7a:	2000      	movs	r0, #0
    9e7c:	1c19      	adds	r1, r3, #0
    9e7e:	4ba4      	ldr	r3, [pc, #656]	; (a110 <eepromWriteParams+0x6a4>)
    9e80:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    9e82:	4ba4      	ldr	r3, [pc, #656]	; (a114 <eepromWriteParams+0x6a8>)
    9e84:	4798      	blx	r3
		eepromStatus |= EEPROM_PS1OUTPUTDUTYOFFSET_WRITTEN;
    9e86:	4ba4      	ldr	r3, [pc, #656]	; (a118 <eepromWriteParams+0x6ac>)
    9e88:	681b      	ldr	r3, [r3, #0]
    9e8a:	2280      	movs	r2, #128	; 0x80
    9e8c:	0212      	lsls	r2, r2, #8
    9e8e:	431a      	orrs	r2, r3
    9e90:	4ba1      	ldr	r3, [pc, #644]	; (a118 <eepromWriteParams+0x6ac>)
    9e92:	601a      	str	r2, [r3, #0]
    9e94:	e101      	b.n	a09a <eepromWriteParams+0x62e>
		//dbg("\neeprom programmed");
	}	
	else if (eepromDataInfo.pAddr == &ps2.phpOutputDutyOffset)
    9e96:	4b97      	ldr	r3, [pc, #604]	; (a0f4 <eepromWriteParams+0x688>)
    9e98:	681a      	ldr	r2, [r3, #0]
    9e9a:	4ba0      	ldr	r3, [pc, #640]	; (a11c <eepromWriteParams+0x6b0>)
    9e9c:	429a      	cmp	r2, r3
    9e9e:	d133      	bne.n	9f08 <eepromWriteParams+0x49c>
	{
		pTempEepromBuf = floatToByteArray((float)ps2.phpOutputDutyOffset);
    9ea0:	4b9f      	ldr	r3, [pc, #636]	; (a120 <eepromWriteParams+0x6b4>)
    9ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9ea4:	1c18      	adds	r0, r3, #0
    9ea6:	4b96      	ldr	r3, [pc, #600]	; (a100 <eepromWriteParams+0x694>)
    9ea8:	4798      	blx	r3
    9eaa:	1c02      	adds	r2, r0, #0
    9eac:	4b95      	ldr	r3, [pc, #596]	; (a104 <eepromWriteParams+0x698>)
    9eae:	601a      	str	r2, [r3, #0]
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    9eb0:	4b95      	ldr	r3, [pc, #596]	; (a108 <eepromWriteParams+0x69c>)
    9eb2:	2000      	movs	r0, #0
    9eb4:	1c19      	adds	r1, r3, #0
    9eb6:	4b95      	ldr	r3, [pc, #596]	; (a10c <eepromWriteParams+0x6a0>)
    9eb8:	4798      	blx	r3
		eepromPageData[37] = *(pTempEepromBuf + 0);
    9eba:	4b92      	ldr	r3, [pc, #584]	; (a104 <eepromWriteParams+0x698>)
    9ebc:	681b      	ldr	r3, [r3, #0]
    9ebe:	7819      	ldrb	r1, [r3, #0]
    9ec0:	4a91      	ldr	r2, [pc, #580]	; (a108 <eepromWriteParams+0x69c>)
    9ec2:	2325      	movs	r3, #37	; 0x25
    9ec4:	54d1      	strb	r1, [r2, r3]
		eepromPageData[38] = *(pTempEepromBuf + 1);
    9ec6:	4b8f      	ldr	r3, [pc, #572]	; (a104 <eepromWriteParams+0x698>)
    9ec8:	681b      	ldr	r3, [r3, #0]
    9eca:	7859      	ldrb	r1, [r3, #1]
    9ecc:	4a8e      	ldr	r2, [pc, #568]	; (a108 <eepromWriteParams+0x69c>)
    9ece:	2326      	movs	r3, #38	; 0x26
    9ed0:	54d1      	strb	r1, [r2, r3]
		eepromPageData[39] = *(pTempEepromBuf + 2);
    9ed2:	4b8c      	ldr	r3, [pc, #560]	; (a104 <eepromWriteParams+0x698>)
    9ed4:	681b      	ldr	r3, [r3, #0]
    9ed6:	7899      	ldrb	r1, [r3, #2]
    9ed8:	4a8b      	ldr	r2, [pc, #556]	; (a108 <eepromWriteParams+0x69c>)
    9eda:	2327      	movs	r3, #39	; 0x27
    9edc:	54d1      	strb	r1, [r2, r3]
		eepromPageData[40] = *(pTempEepromBuf + 3);
    9ede:	4b89      	ldr	r3, [pc, #548]	; (a104 <eepromWriteParams+0x698>)
    9ee0:	681b      	ldr	r3, [r3, #0]
    9ee2:	78d9      	ldrb	r1, [r3, #3]
    9ee4:	4a88      	ldr	r2, [pc, #544]	; (a108 <eepromWriteParams+0x69c>)
    9ee6:	2328      	movs	r3, #40	; 0x28
    9ee8:	54d1      	strb	r1, [r2, r3]
		eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
    9eea:	4b87      	ldr	r3, [pc, #540]	; (a108 <eepromWriteParams+0x69c>)
    9eec:	2000      	movs	r0, #0
    9eee:	1c19      	adds	r1, r3, #0
    9ef0:	4b87      	ldr	r3, [pc, #540]	; (a110 <eepromWriteParams+0x6a4>)
    9ef2:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    9ef4:	4b87      	ldr	r3, [pc, #540]	; (a114 <eepromWriteParams+0x6a8>)
    9ef6:	4798      	blx	r3
		eepromStatus |= EEPROM_PS2OUTPUTDUTYOFFSET_WRITTEN;
    9ef8:	4b87      	ldr	r3, [pc, #540]	; (a118 <eepromWriteParams+0x6ac>)
    9efa:	681b      	ldr	r3, [r3, #0]
    9efc:	2280      	movs	r2, #128	; 0x80
    9efe:	0252      	lsls	r2, r2, #9
    9f00:	431a      	orrs	r2, r3
    9f02:	4b85      	ldr	r3, [pc, #532]	; (a118 <eepromWriteParams+0x6ac>)
    9f04:	601a      	str	r2, [r3, #0]
    9f06:	e0c8      	b.n	a09a <eepromWriteParams+0x62e>
		//dbg("\neeprom programmed");
	}	
	else if (eepromDataInfo.pAddr == &maxAllowedChamberTemp)
    9f08:	4b7a      	ldr	r3, [pc, #488]	; (a0f4 <eepromWriteParams+0x688>)
    9f0a:	681a      	ldr	r2, [r3, #0]
    9f0c:	4b85      	ldr	r3, [pc, #532]	; (a124 <eepromWriteParams+0x6b8>)
    9f0e:	429a      	cmp	r2, r3
    9f10:	d133      	bne.n	9f7a <eepromWriteParams+0x50e>
	{
		pTempEepromBuf = floatToByteArray((float)maxAllowedChamberTemp);
    9f12:	4b84      	ldr	r3, [pc, #528]	; (a124 <eepromWriteParams+0x6b8>)
    9f14:	681b      	ldr	r3, [r3, #0]
    9f16:	1c18      	adds	r0, r3, #0
    9f18:	4b79      	ldr	r3, [pc, #484]	; (a100 <eepromWriteParams+0x694>)
    9f1a:	4798      	blx	r3
    9f1c:	1c02      	adds	r2, r0, #0
    9f1e:	4b79      	ldr	r3, [pc, #484]	; (a104 <eepromWriteParams+0x698>)
    9f20:	601a      	str	r2, [r3, #0]
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    9f22:	4b79      	ldr	r3, [pc, #484]	; (a108 <eepromWriteParams+0x69c>)
    9f24:	2000      	movs	r0, #0
    9f26:	1c19      	adds	r1, r3, #0
    9f28:	4b78      	ldr	r3, [pc, #480]	; (a10c <eepromWriteParams+0x6a0>)
    9f2a:	4798      	blx	r3
		eepromPageData[41] = *(pTempEepromBuf + 0);
    9f2c:	4b75      	ldr	r3, [pc, #468]	; (a104 <eepromWriteParams+0x698>)
    9f2e:	681b      	ldr	r3, [r3, #0]
    9f30:	7819      	ldrb	r1, [r3, #0]
    9f32:	4a75      	ldr	r2, [pc, #468]	; (a108 <eepromWriteParams+0x69c>)
    9f34:	2329      	movs	r3, #41	; 0x29
    9f36:	54d1      	strb	r1, [r2, r3]
		eepromPageData[42] = *(pTempEepromBuf + 1);
    9f38:	4b72      	ldr	r3, [pc, #456]	; (a104 <eepromWriteParams+0x698>)
    9f3a:	681b      	ldr	r3, [r3, #0]
    9f3c:	7859      	ldrb	r1, [r3, #1]
    9f3e:	4a72      	ldr	r2, [pc, #456]	; (a108 <eepromWriteParams+0x69c>)
    9f40:	232a      	movs	r3, #42	; 0x2a
    9f42:	54d1      	strb	r1, [r2, r3]
		eepromPageData[43] = *(pTempEepromBuf + 2);
    9f44:	4b6f      	ldr	r3, [pc, #444]	; (a104 <eepromWriteParams+0x698>)
    9f46:	681b      	ldr	r3, [r3, #0]
    9f48:	7899      	ldrb	r1, [r3, #2]
    9f4a:	4a6f      	ldr	r2, [pc, #444]	; (a108 <eepromWriteParams+0x69c>)
    9f4c:	232b      	movs	r3, #43	; 0x2b
    9f4e:	54d1      	strb	r1, [r2, r3]
		eepromPageData[44] = *(pTempEepromBuf + 3);
    9f50:	4b6c      	ldr	r3, [pc, #432]	; (a104 <eepromWriteParams+0x698>)
    9f52:	681b      	ldr	r3, [r3, #0]
    9f54:	78d9      	ldrb	r1, [r3, #3]
    9f56:	4a6c      	ldr	r2, [pc, #432]	; (a108 <eepromWriteParams+0x69c>)
    9f58:	232c      	movs	r3, #44	; 0x2c
    9f5a:	54d1      	strb	r1, [r2, r3]
		eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
    9f5c:	4b6a      	ldr	r3, [pc, #424]	; (a108 <eepromWriteParams+0x69c>)
    9f5e:	2000      	movs	r0, #0
    9f60:	1c19      	adds	r1, r3, #0
    9f62:	4b6b      	ldr	r3, [pc, #428]	; (a110 <eepromWriteParams+0x6a4>)
    9f64:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    9f66:	4b6b      	ldr	r3, [pc, #428]	; (a114 <eepromWriteParams+0x6a8>)
    9f68:	4798      	blx	r3
		eepromStatus |= EEPROM_MAXALLOWEDTEMP_WRITTEN;
    9f6a:	4b6b      	ldr	r3, [pc, #428]	; (a118 <eepromWriteParams+0x6ac>)
    9f6c:	681b      	ldr	r3, [r3, #0]
    9f6e:	2280      	movs	r2, #128	; 0x80
    9f70:	0292      	lsls	r2, r2, #10
    9f72:	431a      	orrs	r2, r3
    9f74:	4b68      	ldr	r3, [pc, #416]	; (a118 <eepromWriteParams+0x6ac>)
    9f76:	601a      	str	r2, [r3, #0]
    9f78:	e08f      	b.n	a09a <eepromWriteParams+0x62e>
		//dbg("\neeprom programmed");
	}	
	else if (eepromDataInfo.pAddr == &minAllowedChamberTemp)
    9f7a:	4b5e      	ldr	r3, [pc, #376]	; (a0f4 <eepromWriteParams+0x688>)
    9f7c:	681a      	ldr	r2, [r3, #0]
    9f7e:	4b6a      	ldr	r3, [pc, #424]	; (a128 <eepromWriteParams+0x6bc>)
    9f80:	429a      	cmp	r2, r3
    9f82:	d133      	bne.n	9fec <eepromWriteParams+0x580>
	{
		pTempEepromBuf = floatToByteArray((float)minAllowedChamberTemp);
    9f84:	4b68      	ldr	r3, [pc, #416]	; (a128 <eepromWriteParams+0x6bc>)
    9f86:	681b      	ldr	r3, [r3, #0]
    9f88:	1c18      	adds	r0, r3, #0
    9f8a:	4b5d      	ldr	r3, [pc, #372]	; (a100 <eepromWriteParams+0x694>)
    9f8c:	4798      	blx	r3
    9f8e:	1c02      	adds	r2, r0, #0
    9f90:	4b5c      	ldr	r3, [pc, #368]	; (a104 <eepromWriteParams+0x698>)
    9f92:	601a      	str	r2, [r3, #0]
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    9f94:	4b5c      	ldr	r3, [pc, #368]	; (a108 <eepromWriteParams+0x69c>)
    9f96:	2000      	movs	r0, #0
    9f98:	1c19      	adds	r1, r3, #0
    9f9a:	4b5c      	ldr	r3, [pc, #368]	; (a10c <eepromWriteParams+0x6a0>)
    9f9c:	4798      	blx	r3
		eepromPageData[45] = *(pTempEepromBuf + 0);
    9f9e:	4b59      	ldr	r3, [pc, #356]	; (a104 <eepromWriteParams+0x698>)
    9fa0:	681b      	ldr	r3, [r3, #0]
    9fa2:	7819      	ldrb	r1, [r3, #0]
    9fa4:	4a58      	ldr	r2, [pc, #352]	; (a108 <eepromWriteParams+0x69c>)
    9fa6:	232d      	movs	r3, #45	; 0x2d
    9fa8:	54d1      	strb	r1, [r2, r3]
		eepromPageData[46] = *(pTempEepromBuf + 1);
    9faa:	4b56      	ldr	r3, [pc, #344]	; (a104 <eepromWriteParams+0x698>)
    9fac:	681b      	ldr	r3, [r3, #0]
    9fae:	7859      	ldrb	r1, [r3, #1]
    9fb0:	4a55      	ldr	r2, [pc, #340]	; (a108 <eepromWriteParams+0x69c>)
    9fb2:	232e      	movs	r3, #46	; 0x2e
    9fb4:	54d1      	strb	r1, [r2, r3]
		eepromPageData[47] = *(pTempEepromBuf + 2);
    9fb6:	4b53      	ldr	r3, [pc, #332]	; (a104 <eepromWriteParams+0x698>)
    9fb8:	681b      	ldr	r3, [r3, #0]
    9fba:	7899      	ldrb	r1, [r3, #2]
    9fbc:	4a52      	ldr	r2, [pc, #328]	; (a108 <eepromWriteParams+0x69c>)
    9fbe:	232f      	movs	r3, #47	; 0x2f
    9fc0:	54d1      	strb	r1, [r2, r3]
		eepromPageData[48] = *(pTempEepromBuf + 3);
    9fc2:	4b50      	ldr	r3, [pc, #320]	; (a104 <eepromWriteParams+0x698>)
    9fc4:	681b      	ldr	r3, [r3, #0]
    9fc6:	78d9      	ldrb	r1, [r3, #3]
    9fc8:	4a4f      	ldr	r2, [pc, #316]	; (a108 <eepromWriteParams+0x69c>)
    9fca:	2330      	movs	r3, #48	; 0x30
    9fcc:	54d1      	strb	r1, [r2, r3]
		eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
    9fce:	4b4e      	ldr	r3, [pc, #312]	; (a108 <eepromWriteParams+0x69c>)
    9fd0:	2000      	movs	r0, #0
    9fd2:	1c19      	adds	r1, r3, #0
    9fd4:	4b4e      	ldr	r3, [pc, #312]	; (a110 <eepromWriteParams+0x6a4>)
    9fd6:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    9fd8:	4b4e      	ldr	r3, [pc, #312]	; (a114 <eepromWriteParams+0x6a8>)
    9fda:	4798      	blx	r3
		eepromStatus |= EEPROM_MINALLOWEDTEMP_WRITTEN;
    9fdc:	4b4e      	ldr	r3, [pc, #312]	; (a118 <eepromWriteParams+0x6ac>)
    9fde:	681b      	ldr	r3, [r3, #0]
    9fe0:	2280      	movs	r2, #128	; 0x80
    9fe2:	02d2      	lsls	r2, r2, #11
    9fe4:	431a      	orrs	r2, r3
    9fe6:	4b4c      	ldr	r3, [pc, #304]	; (a118 <eepromWriteParams+0x6ac>)
    9fe8:	601a      	str	r2, [r3, #0]
    9fea:	e056      	b.n	a09a <eepromWriteParams+0x62e>
		//dbg("\neeprom programmed");
	}	
	else if (eepromDataInfo.pAddr == &doorOpenLifetimeCnt)
    9fec:	4b41      	ldr	r3, [pc, #260]	; (a0f4 <eepromWriteParams+0x688>)
    9fee:	681a      	ldr	r2, [r3, #0]
    9ff0:	4b4e      	ldr	r3, [pc, #312]	; (a12c <eepromWriteParams+0x6c0>)
    9ff2:	429a      	cmp	r2, r3
    9ff4:	d133      	bne.n	a05e <eepromWriteParams+0x5f2>
	{
		pTempEepromBuf = longToByteArray((uint32_t)(doorOpenLifetimeCnt));
    9ff6:	4b4d      	ldr	r3, [pc, #308]	; (a12c <eepromWriteParams+0x6c0>)
    9ff8:	681b      	ldr	r3, [r3, #0]
    9ffa:	1c18      	adds	r0, r3, #0
    9ffc:	4b4c      	ldr	r3, [pc, #304]	; (a130 <eepromWriteParams+0x6c4>)
    9ffe:	4798      	blx	r3
    a000:	1c02      	adds	r2, r0, #0
    a002:	4b40      	ldr	r3, [pc, #256]	; (a104 <eepromWriteParams+0x698>)
    a004:	601a      	str	r2, [r3, #0]
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    a006:	4b40      	ldr	r3, [pc, #256]	; (a108 <eepromWriteParams+0x69c>)
    a008:	2000      	movs	r0, #0
    a00a:	1c19      	adds	r1, r3, #0
    a00c:	4b3f      	ldr	r3, [pc, #252]	; (a10c <eepromWriteParams+0x6a0>)
    a00e:	4798      	blx	r3
		eepromPageData[49] = *(pTempEepromBuf + 0);
    a010:	4b3c      	ldr	r3, [pc, #240]	; (a104 <eepromWriteParams+0x698>)
    a012:	681b      	ldr	r3, [r3, #0]
    a014:	7819      	ldrb	r1, [r3, #0]
    a016:	4a3c      	ldr	r2, [pc, #240]	; (a108 <eepromWriteParams+0x69c>)
    a018:	2331      	movs	r3, #49	; 0x31
    a01a:	54d1      	strb	r1, [r2, r3]
		eepromPageData[50] = *(pTempEepromBuf + 1);
    a01c:	4b39      	ldr	r3, [pc, #228]	; (a104 <eepromWriteParams+0x698>)
    a01e:	681b      	ldr	r3, [r3, #0]
    a020:	7859      	ldrb	r1, [r3, #1]
    a022:	4a39      	ldr	r2, [pc, #228]	; (a108 <eepromWriteParams+0x69c>)
    a024:	2332      	movs	r3, #50	; 0x32
    a026:	54d1      	strb	r1, [r2, r3]
		eepromPageData[51] = *(pTempEepromBuf + 2);
    a028:	4b36      	ldr	r3, [pc, #216]	; (a104 <eepromWriteParams+0x698>)
    a02a:	681b      	ldr	r3, [r3, #0]
    a02c:	7899      	ldrb	r1, [r3, #2]
    a02e:	4a36      	ldr	r2, [pc, #216]	; (a108 <eepromWriteParams+0x69c>)
    a030:	2333      	movs	r3, #51	; 0x33
    a032:	54d1      	strb	r1, [r2, r3]
		eepromPageData[52] = *(pTempEepromBuf + 3);
    a034:	4b33      	ldr	r3, [pc, #204]	; (a104 <eepromWriteParams+0x698>)
    a036:	681b      	ldr	r3, [r3, #0]
    a038:	78d9      	ldrb	r1, [r3, #3]
    a03a:	4a33      	ldr	r2, [pc, #204]	; (a108 <eepromWriteParams+0x69c>)
    a03c:	2334      	movs	r3, #52	; 0x34
    a03e:	54d1      	strb	r1, [r2, r3]
		eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
    a040:	4b31      	ldr	r3, [pc, #196]	; (a108 <eepromWriteParams+0x69c>)
    a042:	2000      	movs	r0, #0
    a044:	1c19      	adds	r1, r3, #0
    a046:	4b32      	ldr	r3, [pc, #200]	; (a110 <eepromWriteParams+0x6a4>)
    a048:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    a04a:	4b32      	ldr	r3, [pc, #200]	; (a114 <eepromWriteParams+0x6a8>)
    a04c:	4798      	blx	r3
		eepromStatus |= EEPROM_DOOROPENLIFETIMECNT_WRITTEN;
    a04e:	4b32      	ldr	r3, [pc, #200]	; (a118 <eepromWriteParams+0x6ac>)
    a050:	681b      	ldr	r3, [r3, #0]
    a052:	2280      	movs	r2, #128	; 0x80
    a054:	0312      	lsls	r2, r2, #12
    a056:	431a      	orrs	r2, r3
    a058:	4b2f      	ldr	r3, [pc, #188]	; (a118 <eepromWriteParams+0x6ac>)
    a05a:	601a      	str	r2, [r3, #0]
    a05c:	e01d      	b.n	a09a <eepromWriteParams+0x62e>
		//dbg("\neeprom programmed");
	}	
	else if (eepromDataInfo.pAddr == &doorOpenCount1HrLimit)
    a05e:	4b25      	ldr	r3, [pc, #148]	; (a0f4 <eepromWriteParams+0x688>)
    a060:	681a      	ldr	r2, [r3, #0]
    a062:	4b34      	ldr	r3, [pc, #208]	; (a134 <eepromWriteParams+0x6c8>)
    a064:	429a      	cmp	r2, r3
    a066:	d118      	bne.n	a09a <eepromWriteParams+0x62e>
	{
		eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    a068:	4b27      	ldr	r3, [pc, #156]	; (a108 <eepromWriteParams+0x69c>)
    a06a:	2000      	movs	r0, #0
    a06c:	1c19      	adds	r1, r3, #0
    a06e:	4b27      	ldr	r3, [pc, #156]	; (a10c <eepromWriteParams+0x6a0>)
    a070:	4798      	blx	r3
		eepromPageData[53]  = doorOpenCount1HrLimit;
    a072:	4b30      	ldr	r3, [pc, #192]	; (a134 <eepromWriteParams+0x6c8>)
    a074:	881b      	ldrh	r3, [r3, #0]
    a076:	b2d9      	uxtb	r1, r3
    a078:	4a23      	ldr	r2, [pc, #140]	; (a108 <eepromWriteParams+0x69c>)
    a07a:	2335      	movs	r3, #53	; 0x35
    a07c:	54d1      	strb	r1, [r2, r3]
		eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
    a07e:	4b22      	ldr	r3, [pc, #136]	; (a108 <eepromWriteParams+0x69c>)
    a080:	2000      	movs	r0, #0
    a082:	1c19      	adds	r1, r3, #0
    a084:	4b22      	ldr	r3, [pc, #136]	; (a110 <eepromWriteParams+0x6a4>)
    a086:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    a088:	4b22      	ldr	r3, [pc, #136]	; (a114 <eepromWriteParams+0x6a8>)
    a08a:	4798      	blx	r3
		eepromStatus |= EEPROM_DOOROPENCOUNT1HRLIMIT_WRITTEN;
    a08c:	4b22      	ldr	r3, [pc, #136]	; (a118 <eepromWriteParams+0x6ac>)
    a08e:	681b      	ldr	r3, [r3, #0]
    a090:	2280      	movs	r2, #128	; 0x80
    a092:	0352      	lsls	r2, r2, #13
    a094:	431a      	orrs	r2, r3
    a096:	4b20      	ldr	r3, [pc, #128]	; (a118 <eepromWriteParams+0x6ac>)
    a098:	601a      	str	r2, [r3, #0]
		//dbg("\neeprom programmed");
	}

	writeToEepromFlag = false;
    a09a:	4b27      	ldr	r3, [pc, #156]	; (a138 <eepromWriteParams+0x6cc>)
    a09c:	2200      	movs	r2, #0
    a09e:	701a      	strb	r2, [r3, #0]
	
	eeprom_emulator_read_page(EEPROM_PAGE0, eepromPageData);
    a0a0:	4b19      	ldr	r3, [pc, #100]	; (a108 <eepromWriteParams+0x69c>)
    a0a2:	2000      	movs	r0, #0
    a0a4:	1c19      	adds	r1, r3, #0
    a0a6:	4b19      	ldr	r3, [pc, #100]	; (a10c <eepromWriteParams+0x6a0>)
    a0a8:	4798      	blx	r3
	eepromPageData[19]  = (~eepromStatus) & 0x0000ff;
    a0aa:	4b1b      	ldr	r3, [pc, #108]	; (a118 <eepromWriteParams+0x6ac>)
    a0ac:	681b      	ldr	r3, [r3, #0]
    a0ae:	b2db      	uxtb	r3, r3
    a0b0:	43db      	mvns	r3, r3
    a0b2:	b2da      	uxtb	r2, r3
    a0b4:	4b14      	ldr	r3, [pc, #80]	; (a108 <eepromWriteParams+0x69c>)
    a0b6:	74da      	strb	r2, [r3, #19]
	eepromPageData[20]  = ((~eepromStatus) & 0x00ff00) >> 8;
    a0b8:	4b17      	ldr	r3, [pc, #92]	; (a118 <eepromWriteParams+0x6ac>)
    a0ba:	681b      	ldr	r3, [r3, #0]
    a0bc:	43da      	mvns	r2, r3
    a0be:	23ff      	movs	r3, #255	; 0xff
    a0c0:	021b      	lsls	r3, r3, #8
    a0c2:	4013      	ands	r3, r2
    a0c4:	0a1b      	lsrs	r3, r3, #8
    a0c6:	b2da      	uxtb	r2, r3
    a0c8:	4b0f      	ldr	r3, [pc, #60]	; (a108 <eepromWriteParams+0x69c>)
    a0ca:	751a      	strb	r2, [r3, #20]
	eepromPageData[21]  = ((~eepromStatus) & 0xff0000) >> 16;
    a0cc:	4b12      	ldr	r3, [pc, #72]	; (a118 <eepromWriteParams+0x6ac>)
    a0ce:	681b      	ldr	r3, [r3, #0]
    a0d0:	43da      	mvns	r2, r3
    a0d2:	23ff      	movs	r3, #255	; 0xff
    a0d4:	041b      	lsls	r3, r3, #16
    a0d6:	4013      	ands	r3, r2
    a0d8:	0c1b      	lsrs	r3, r3, #16
    a0da:	b2da      	uxtb	r2, r3
    a0dc:	4b0a      	ldr	r3, [pc, #40]	; (a108 <eepromWriteParams+0x69c>)
    a0de:	755a      	strb	r2, [r3, #21]
	eeprom_emulator_write_page(EEPROM_PAGE0, eepromPageData);
    a0e0:	4b09      	ldr	r3, [pc, #36]	; (a108 <eepromWriteParams+0x69c>)
    a0e2:	2000      	movs	r0, #0
    a0e4:	1c19      	adds	r1, r3, #0
    a0e6:	4b0a      	ldr	r3, [pc, #40]	; (a110 <eepromWriteParams+0x6a4>)
    a0e8:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    a0ea:	4b0a      	ldr	r3, [pc, #40]	; (a114 <eepromWriteParams+0x6a8>)
    a0ec:	4798      	blx	r3
    a0ee:	46bd      	mov	sp, r7
    a0f0:	bd80      	pop	{r7, pc}
    a0f2:	46c0      	nop			; (mov r8, r8)
    a0f4:	200008dc 	.word	0x200008dc
    a0f8:	20000ab4 	.word	0x20000ab4
    a0fc:	20000a84 	.word	0x20000a84
    a100:	00009339 	.word	0x00009339
    a104:	20000060 	.word	0x20000060
    a108:	20000888 	.word	0x20000888
    a10c:	00019695 	.word	0x00019695
    a110:	00019575 	.word	0x00019575
    a114:	0001973d 	.word	0x0001973d
    a118:	200002f8 	.word	0x200002f8
    a11c:	20000d94 	.word	0x20000d94
    a120:	20000d64 	.word	0x20000d64
    a124:	20000180 	.word	0x20000180
    a128:	20000184 	.word	0x20000184
    a12c:	2000090c 	.word	0x2000090c
    a130:	000093d9 	.word	0x000093d9
    a134:	20000166 	.word	0x20000166
    a138:	200002f4 	.word	0x200002f4

0000a13c <pidSetup>:

/************************************************************************/
/* User Functions                                                       */
/************************************************************************/
bool pidSetup(struct pid_instance *pid_inst)
{
    a13c:	b590      	push	{r4, r7, lr}
    a13e:	b083      	sub	sp, #12
    a140:	af00      	add	r7, sp, #0
    a142:	6078      	str	r0, [r7, #4]
	// define pid functions
	fPid[0] = set_setKP_HIGHQ;
    a144:	4b2e      	ldr	r3, [pc, #184]	; (a200 <pidSetup+0xc4>)
    a146:	4a2f      	ldr	r2, [pc, #188]	; (a204 <pidSetup+0xc8>)
    a148:	601a      	str	r2, [r3, #0]
	fPid[1] = set_setKI_HIGHQ;
    a14a:	4b2d      	ldr	r3, [pc, #180]	; (a200 <pidSetup+0xc4>)
    a14c:	4a2e      	ldr	r2, [pc, #184]	; (a208 <pidSetup+0xcc>)
    a14e:	605a      	str	r2, [r3, #4]
	fPid[2] = set_setKD_HIGHQ;
    a150:	4b2b      	ldr	r3, [pc, #172]	; (a200 <pidSetup+0xc4>)
    a152:	4a2e      	ldr	r2, [pc, #184]	; (a20c <pidSetup+0xd0>)
    a154:	609a      	str	r2, [r3, #8]
	fPid[3] = set_setKP_VARQ;
    a156:	4b2a      	ldr	r3, [pc, #168]	; (a200 <pidSetup+0xc4>)
    a158:	4a2d      	ldr	r2, [pc, #180]	; (a210 <pidSetup+0xd4>)
    a15a:	60da      	str	r2, [r3, #12]
	fPid[4] = set_setKI_VARQ;
    a15c:	4b28      	ldr	r3, [pc, #160]	; (a200 <pidSetup+0xc4>)
    a15e:	4a2d      	ldr	r2, [pc, #180]	; (a214 <pidSetup+0xd8>)
    a160:	611a      	str	r2, [r3, #16]
	fPid[5] = set_setKD_VARQ;
    a162:	4b27      	ldr	r3, [pc, #156]	; (a200 <pidSetup+0xc4>)
    a164:	4a2c      	ldr	r2, [pc, #176]	; (a218 <pidSetup+0xdc>)
    a166:	615a      	str	r2, [r3, #20]
	fPid[6] = set_setKP_COPQ;
    a168:	4b25      	ldr	r3, [pc, #148]	; (a200 <pidSetup+0xc4>)
    a16a:	4a2c      	ldr	r2, [pc, #176]	; (a21c <pidSetup+0xe0>)
    a16c:	619a      	str	r2, [r3, #24]
	fPid[7] = set_setKI_COPQ;
    a16e:	4b24      	ldr	r3, [pc, #144]	; (a200 <pidSetup+0xc4>)
    a170:	4a2b      	ldr	r2, [pc, #172]	; (a220 <pidSetup+0xe4>)
    a172:	61da      	str	r2, [r3, #28]
	fPid[8] = set_setKD_COPQ;
    a174:	4b22      	ldr	r3, [pc, #136]	; (a200 <pidSetup+0xc4>)
    a176:	4a2b      	ldr	r2, [pc, #172]	; (a224 <pidSetup+0xe8>)
    a178:	621a      	str	r2, [r3, #32]

	pid_inst->inAuto = true;
    a17a:	687a      	ldr	r2, [r7, #4]
    a17c:	234c      	movs	r3, #76	; 0x4c
    a17e:	2101      	movs	r1, #1
    a180:	54d1      	strb	r1, [r2, r3]
	pid_inst->SampleTimeMsec = RTC_PERIOD_IN_MSEC;
    a182:	687b      	ldr	r3, [r7, #4]
    a184:	22fa      	movs	r2, #250	; 0xfa
    a186:	0092      	lsls	r2, r2, #2
    a188:	641a      	str	r2, [r3, #64]	; 0x40
	pidSetControllerDirection(pid_inst, REVERSE);
    a18a:	687b      	ldr	r3, [r7, #4]
    a18c:	1c18      	adds	r0, r3, #0
    a18e:	2101      	movs	r1, #1
    a190:	4b25      	ldr	r3, [pc, #148]	; (a228 <pidSetup+0xec>)
    a192:	4798      	blx	r3
	pidSetOutputLimits(pid_inst, 0, maxOutputVoltage);
    a194:	4b25      	ldr	r3, [pc, #148]	; (a22c <pidSetup+0xf0>)
    a196:	681b      	ldr	r3, [r3, #0]
    a198:	6879      	ldr	r1, [r7, #4]
    a19a:	2200      	movs	r2, #0
    a19c:	1c08      	adds	r0, r1, #0
    a19e:	1c11      	adds	r1, r2, #0
    a1a0:	1c1a      	adds	r2, r3, #0
    a1a2:	4b23      	ldr	r3, [pc, #140]	; (a230 <pidSetup+0xf4>)
    a1a4:	4798      	blx	r3
	
	pid_inst->kp_highq = KP_HIGHQ;
    a1a6:	687b      	ldr	r3, [r7, #4]
    a1a8:	4a22      	ldr	r2, [pc, #136]	; (a234 <pidSetup+0xf8>)
    a1aa:	651a      	str	r2, [r3, #80]	; 0x50
	pid_inst->ki_highq = KI_HIGHQ;
    a1ac:	687b      	ldr	r3, [r7, #4]
    a1ae:	4a22      	ldr	r2, [pc, #136]	; (a238 <pidSetup+0xfc>)
    a1b0:	655a      	str	r2, [r3, #84]	; 0x54
	pid_inst->kd_highq = KD_HIGHQ;
    a1b2:	687b      	ldr	r3, [r7, #4]
    a1b4:	2200      	movs	r2, #0
    a1b6:	659a      	str	r2, [r3, #88]	; 0x58
	pid_inst->kp_varq = KP_VARQ;
    a1b8:	687b      	ldr	r3, [r7, #4]
    a1ba:	4a1e      	ldr	r2, [pc, #120]	; (a234 <pidSetup+0xf8>)
    a1bc:	65da      	str	r2, [r3, #92]	; 0x5c
	pid_inst->ki_varq = KI_VARQ;
    a1be:	687b      	ldr	r3, [r7, #4]
    a1c0:	4a1d      	ldr	r2, [pc, #116]	; (a238 <pidSetup+0xfc>)
    a1c2:	661a      	str	r2, [r3, #96]	; 0x60
	pid_inst->kd_varq = KD_VARQ;
    a1c4:	687b      	ldr	r3, [r7, #4]
    a1c6:	2200      	movs	r2, #0
    a1c8:	665a      	str	r2, [r3, #100]	; 0x64
	pid_inst->kp_copq = KP_COPQ;
    a1ca:	687b      	ldr	r3, [r7, #4]
    a1cc:	4a19      	ldr	r2, [pc, #100]	; (a234 <pidSetup+0xf8>)
    a1ce:	669a      	str	r2, [r3, #104]	; 0x68
	pid_inst->ki_copq = KI_COPQ;
    a1d0:	687b      	ldr	r3, [r7, #4]
    a1d2:	4a19      	ldr	r2, [pc, #100]	; (a238 <pidSetup+0xfc>)
    a1d4:	66da      	str	r2, [r3, #108]	; 0x6c
	pid_inst->kd_copq = KD_COPQ;
    a1d6:	687b      	ldr	r3, [r7, #4]
    a1d8:	2200      	movs	r2, #0
    a1da:	671a      	str	r2, [r3, #112]	; 0x70
	
	pidSetTunings(pid_inst, pid_inst->kp_highq, pid_inst->ki_highq, pid_inst->kd_highq);
    a1dc:	687b      	ldr	r3, [r7, #4]
    a1de:	6d19      	ldr	r1, [r3, #80]	; 0x50
    a1e0:	687b      	ldr	r3, [r7, #4]
    a1e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    a1e4:	687b      	ldr	r3, [r7, #4]
    a1e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a1e8:	6878      	ldr	r0, [r7, #4]
    a1ea:	4c14      	ldr	r4, [pc, #80]	; (a23c <pidSetup+0x100>)
    a1ec:	47a0      	blx	r4
	
	pwrCapTimeoutInMins = DEFAULT_PWR_CAP_TIMEOUT_MINS;
    a1ee:	4b14      	ldr	r3, [pc, #80]	; (a240 <pidSetup+0x104>)
    a1f0:	222d      	movs	r2, #45	; 0x2d
    a1f2:	801a      	strh	r2, [r3, #0]
	
	return true;
    a1f4:	2301      	movs	r3, #1
}
    a1f6:	1c18      	adds	r0, r3, #0
    a1f8:	46bd      	mov	sp, r7
    a1fa:	b003      	add	sp, #12
    a1fc:	bd90      	pop	{r4, r7, pc}
    a1fe:	46c0      	nop			; (mov r8, r8)
    a200:	20000634 	.word	0x20000634
    a204:	000009c5 	.word	0x000009c5
    a208:	00000a59 	.word	0x00000a59
    a20c:	00000aed 	.word	0x00000aed
    a210:	00000b81 	.word	0x00000b81
    a214:	00000c15 	.word	0x00000c15
    a218:	00000ca9 	.word	0x00000ca9
    a21c:	00000d3d 	.word	0x00000d3d
    a220:	00000dd1 	.word	0x00000dd1
    a224:	00000e65 	.word	0x00000e65
    a228:	0000a655 	.word	0x0000a655
    a22c:	20000084 	.word	0x20000084
    a230:	0000a485 	.word	0x0000a485
    a234:	40a00000 	.word	0x40a00000
    a238:	3727c5ac 	.word	0x3727c5ac
    a23c:	0000a559 	.word	0x0000a559
    a240:	20000092 	.word	0x20000092

0000a244 <pidFanSetup>:

bool pidFanSetup(struct pid_instance *pid_inst, float kp, float ki, float kd)
{
    a244:	b590      	push	{r4, r7, lr}
    a246:	b085      	sub	sp, #20
    a248:	af00      	add	r7, sp, #0
    a24a:	60f8      	str	r0, [r7, #12]
    a24c:	60b9      	str	r1, [r7, #8]
    a24e:	607a      	str	r2, [r7, #4]
    a250:	603b      	str	r3, [r7, #0]
	pid_inst->inAuto = true;
    a252:	68fa      	ldr	r2, [r7, #12]
    a254:	234c      	movs	r3, #76	; 0x4c
    a256:	2101      	movs	r1, #1
    a258:	54d1      	strb	r1, [r2, r3]
	pid_inst->SampleTimeMsec = RTC_PERIOD_IN_MSEC;
    a25a:	68fb      	ldr	r3, [r7, #12]
    a25c:	22fa      	movs	r2, #250	; 0xfa
    a25e:	0092      	lsls	r2, r2, #2
    a260:	641a      	str	r2, [r3, #64]	; 0x40
	pidSetControllerDirection(pid_inst, REVERSE);
    a262:	68fb      	ldr	r3, [r7, #12]
    a264:	1c18      	adds	r0, r3, #0
    a266:	2101      	movs	r1, #1
    a268:	4b10      	ldr	r3, [pc, #64]	; (a2ac <pidFanSetup+0x68>)
    a26a:	4798      	blx	r3
	pidSetOutputLimits(pid_inst, 0, DEFAULT_FAN_MAX_DUTY);
    a26c:	68f9      	ldr	r1, [r7, #12]
    a26e:	2200      	movs	r2, #0
    a270:	4b0f      	ldr	r3, [pc, #60]	; (a2b0 <pidFanSetup+0x6c>)
    a272:	1c08      	adds	r0, r1, #0
    a274:	1c11      	adds	r1, r2, #0
    a276:	1c1a      	adds	r2, r3, #0
    a278:	4b0e      	ldr	r3, [pc, #56]	; (a2b4 <pidFanSetup+0x70>)
    a27a:	4798      	blx	r3
	
	pid_inst->kp = kp;
    a27c:	68fb      	ldr	r3, [r7, #12]
    a27e:	68ba      	ldr	r2, [r7, #8]
    a280:	601a      	str	r2, [r3, #0]
	pid_inst->ki = ki;
    a282:	68fb      	ldr	r3, [r7, #12]
    a284:	687a      	ldr	r2, [r7, #4]
    a286:	605a      	str	r2, [r3, #4]
	pid_inst->kd = kd;
    a288:	68fb      	ldr	r3, [r7, #12]
    a28a:	683a      	ldr	r2, [r7, #0]
    a28c:	609a      	str	r2, [r3, #8]
	
	pidSetTunings(pid_inst, pid_inst->kp, pid_inst->ki, pid_inst->kd);
    a28e:	68fb      	ldr	r3, [r7, #12]
    a290:	6819      	ldr	r1, [r3, #0]
    a292:	68fb      	ldr	r3, [r7, #12]
    a294:	685a      	ldr	r2, [r3, #4]
    a296:	68fb      	ldr	r3, [r7, #12]
    a298:	689b      	ldr	r3, [r3, #8]
    a29a:	68f8      	ldr	r0, [r7, #12]
    a29c:	4c06      	ldr	r4, [pc, #24]	; (a2b8 <pidFanSetup+0x74>)
    a29e:	47a0      	blx	r4
	
	return true;
    a2a0:	2301      	movs	r3, #1
}
    a2a2:	1c18      	adds	r0, r3, #0
    a2a4:	46bd      	mov	sp, r7
    a2a6:	b005      	add	sp, #20
    a2a8:	bd90      	pop	{r4, r7, pc}
    a2aa:	46c0      	nop			; (mov r8, r8)
    a2ac:	0000a655 	.word	0x0000a655
    a2b0:	42c80000 	.word	0x42c80000
    a2b4:	0000a485 	.word	0x0000a485
    a2b8:	0000a559 	.word	0x0000a559

0000a2bc <pidCompute>:

bool pidCompute(struct pid_instance *pid_inst)
{
    a2bc:	b590      	push	{r4, r7, lr}
    a2be:	b083      	sub	sp, #12
    a2c0:	af00      	add	r7, sp, #0
    a2c2:	6078      	str	r0, [r7, #4]
	if(!pid_inst->inAuto) return false;
    a2c4:	687a      	ldr	r2, [r7, #4]
    a2c6:	234c      	movs	r3, #76	; 0x4c
    a2c8:	5cd3      	ldrb	r3, [r2, r3]
    a2ca:	2201      	movs	r2, #1
    a2cc:	4053      	eors	r3, r2
    a2ce:	b2db      	uxtb	r3, r3
    a2d0:	2b00      	cmp	r3, #0
    a2d2:	d001      	beq.n	a2d8 <pidCompute+0x1c>
    a2d4:	2300      	movs	r3, #0
    a2d6:	e0c5      	b.n	a464 <pidCompute+0x1a8>
	
	pid_inst->error = pid_inst->Setpoint - pid_inst->Input;
    a2d8:	687b      	ldr	r3, [r7, #4]
    a2da:	6a59      	ldr	r1, [r3, #36]	; 0x24
    a2dc:	687b      	ldr	r3, [r7, #4]
    a2de:	69da      	ldr	r2, [r3, #28]
    a2e0:	4b62      	ldr	r3, [pc, #392]	; (a46c <pidCompute+0x1b0>)
    a2e2:	1c08      	adds	r0, r1, #0
    a2e4:	1c11      	adds	r1, r2, #0
    a2e6:	4798      	blx	r3
    a2e8:	1c03      	adds	r3, r0, #0
    a2ea:	1c1a      	adds	r2, r3, #0
    a2ec:	687b      	ldr	r3, [r7, #4]
    a2ee:	629a      	str	r2, [r3, #40]	; 0x28

	pid_inst->PTerm = pid_inst->kp * pid_inst->error;
    a2f0:	687b      	ldr	r3, [r7, #4]
    a2f2:	6819      	ldr	r1, [r3, #0]
    a2f4:	687b      	ldr	r3, [r7, #4]
    a2f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a2f8:	4b5d      	ldr	r3, [pc, #372]	; (a470 <pidCompute+0x1b4>)
    a2fa:	1c08      	adds	r0, r1, #0
    a2fc:	1c11      	adds	r1, r2, #0
    a2fe:	4798      	blx	r3
    a300:	1c03      	adds	r3, r0, #0
    a302:	1c1a      	adds	r2, r3, #0
    a304:	687b      	ldr	r3, [r7, #4]
    a306:	631a      	str	r2, [r3, #48]	; 0x30
	
	if ( (pid_inst->PTerm < pid_inst->outMax) && (pid_inst->PTerm > pid_inst->outMin) )
    a308:	687b      	ldr	r3, [r7, #4]
    a30a:	6b19      	ldr	r1, [r3, #48]	; 0x30
    a30c:	687b      	ldr	r3, [r7, #4]
    a30e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    a310:	4b58      	ldr	r3, [pc, #352]	; (a474 <pidCompute+0x1b8>)
    a312:	1c08      	adds	r0, r1, #0
    a314:	1c11      	adds	r1, r2, #0
    a316:	4798      	blx	r3
    a318:	1c03      	adds	r3, r0, #0
    a31a:	2b00      	cmp	r3, #0
    a31c:	d01f      	beq.n	a35e <pidCompute+0xa2>
    a31e:	687b      	ldr	r3, [r7, #4]
    a320:	6b19      	ldr	r1, [r3, #48]	; 0x30
    a322:	687b      	ldr	r3, [r7, #4]
    a324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    a326:	4b54      	ldr	r3, [pc, #336]	; (a478 <pidCompute+0x1bc>)
    a328:	1c08      	adds	r0, r1, #0
    a32a:	1c11      	adds	r1, r2, #0
    a32c:	4798      	blx	r3
    a32e:	1c03      	adds	r3, r0, #0
    a330:	2b00      	cmp	r3, #0
    a332:	d014      	beq.n	a35e <pidCompute+0xa2>
	{
		pid_inst->ITerm += (pid_inst->ki * pid_inst->error);
    a334:	687b      	ldr	r3, [r7, #4]
    a336:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    a338:	687b      	ldr	r3, [r7, #4]
    a33a:	6859      	ldr	r1, [r3, #4]
    a33c:	687b      	ldr	r3, [r7, #4]
    a33e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a340:	4b4b      	ldr	r3, [pc, #300]	; (a470 <pidCompute+0x1b4>)
    a342:	1c08      	adds	r0, r1, #0
    a344:	1c11      	adds	r1, r2, #0
    a346:	4798      	blx	r3
    a348:	1c03      	adds	r3, r0, #0
    a34a:	1c1a      	adds	r2, r3, #0
    a34c:	4b4b      	ldr	r3, [pc, #300]	; (a47c <pidCompute+0x1c0>)
    a34e:	1c20      	adds	r0, r4, #0
    a350:	1c11      	adds	r1, r2, #0
    a352:	4798      	blx	r3
    a354:	1c03      	adds	r3, r0, #0
    a356:	1c1a      	adds	r2, r3, #0
    a358:	687b      	ldr	r3, [r7, #4]
    a35a:	635a      	str	r2, [r3, #52]	; 0x34
    a35c:	e011      	b.n	a382 <pidCompute+0xc6>
	} 
	else 
	{
		if (chamber1.setpoint > chamber1.previousSetpoint) 
    a35e:	4b48      	ldr	r3, [pc, #288]	; (a480 <pidCompute+0x1c4>)
    a360:	6999      	ldr	r1, [r3, #24]
    a362:	4b47      	ldr	r3, [pc, #284]	; (a480 <pidCompute+0x1c4>)
    a364:	69da      	ldr	r2, [r3, #28]
    a366:	4b44      	ldr	r3, [pc, #272]	; (a478 <pidCompute+0x1bc>)
    a368:	1c08      	adds	r0, r1, #0
    a36a:	1c11      	adds	r1, r2, #0
    a36c:	4798      	blx	r3
    a36e:	1c03      	adds	r3, r0, #0
    a370:	2b00      	cmp	r3, #0
    a372:	d006      	beq.n	a382 <pidCompute+0xc6>
		{
			pid_inst->ITerm = 0;
    a374:	687b      	ldr	r3, [r7, #4]
    a376:	2200      	movs	r2, #0
    a378:	635a      	str	r2, [r3, #52]	; 0x34
			chamber1.previousSetpoint = chamber1.setpoint;
    a37a:	4b41      	ldr	r3, [pc, #260]	; (a480 <pidCompute+0x1c4>)
    a37c:	699a      	ldr	r2, [r3, #24]
    a37e:	4b40      	ldr	r3, [pc, #256]	; (a480 <pidCompute+0x1c4>)
    a380:	61da      	str	r2, [r3, #28]
		//	ITerm = 0;
		//	chamber1.previousSetpoint = chamber1.setpoint;
		//}
	}
	
	if(pid_inst->ITerm > pid_inst->outMax) pid_inst->ITerm = pid_inst->outMax;
    a382:	687b      	ldr	r3, [r7, #4]
    a384:	6b59      	ldr	r1, [r3, #52]	; 0x34
    a386:	687b      	ldr	r3, [r7, #4]
    a388:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    a38a:	4b3b      	ldr	r3, [pc, #236]	; (a478 <pidCompute+0x1bc>)
    a38c:	1c08      	adds	r0, r1, #0
    a38e:	1c11      	adds	r1, r2, #0
    a390:	4798      	blx	r3
    a392:	1c03      	adds	r3, r0, #0
    a394:	2b00      	cmp	r3, #0
    a396:	d004      	beq.n	a3a2 <pidCompute+0xe6>
    a398:	687b      	ldr	r3, [r7, #4]
    a39a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    a39c:	687b      	ldr	r3, [r7, #4]
    a39e:	635a      	str	r2, [r3, #52]	; 0x34
    a3a0:	e00e      	b.n	a3c0 <pidCompute+0x104>
	else if(pid_inst->ITerm < pid_inst->outMin) pid_inst->ITerm = pid_inst->outMin;
    a3a2:	687b      	ldr	r3, [r7, #4]
    a3a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
    a3a6:	687b      	ldr	r3, [r7, #4]
    a3a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    a3aa:	4b32      	ldr	r3, [pc, #200]	; (a474 <pidCompute+0x1b8>)
    a3ac:	1c08      	adds	r0, r1, #0
    a3ae:	1c11      	adds	r1, r2, #0
    a3b0:	4798      	blx	r3
    a3b2:	1c03      	adds	r3, r0, #0
    a3b4:	2b00      	cmp	r3, #0
    a3b6:	d003      	beq.n	a3c0 <pidCompute+0x104>
    a3b8:	687b      	ldr	r3, [r7, #4]
    a3ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    a3bc:	687b      	ldr	r3, [r7, #4]
    a3be:	635a      	str	r2, [r3, #52]	; 0x34

	pid_inst->dInput = (pid_inst->Input - pid_inst->lastInput);
    a3c0:	687b      	ldr	r3, [r7, #4]
    a3c2:	69d9      	ldr	r1, [r3, #28]
    a3c4:	687b      	ldr	r3, [r7, #4]
    a3c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    a3c8:	4b28      	ldr	r3, [pc, #160]	; (a46c <pidCompute+0x1b0>)
    a3ca:	1c08      	adds	r0, r1, #0
    a3cc:	1c11      	adds	r1, r2, #0
    a3ce:	4798      	blx	r3
    a3d0:	1c03      	adds	r3, r0, #0
    a3d2:	1c1a      	adds	r2, r3, #0
    a3d4:	687b      	ldr	r3, [r7, #4]
    a3d6:	62da      	str	r2, [r3, #44]	; 0x2c
	pid_inst->DTerm = pid_inst->kd * pid_inst->dInput * (-1);
    a3d8:	687b      	ldr	r3, [r7, #4]
    a3da:	6899      	ldr	r1, [r3, #8]
    a3dc:	687b      	ldr	r3, [r7, #4]
    a3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a3e0:	4b23      	ldr	r3, [pc, #140]	; (a470 <pidCompute+0x1b4>)
    a3e2:	1c08      	adds	r0, r1, #0
    a3e4:	1c11      	adds	r1, r2, #0
    a3e6:	4798      	blx	r3
    a3e8:	1c03      	adds	r3, r0, #0
    a3ea:	2280      	movs	r2, #128	; 0x80
    a3ec:	0612      	lsls	r2, r2, #24
    a3ee:	405a      	eors	r2, r3
    a3f0:	687b      	ldr	r3, [r7, #4]
    a3f2:	639a      	str	r2, [r3, #56]	; 0x38
	
	pid_inst->Output = pid_inst->PTerm + pid_inst->ITerm + pid_inst->DTerm;
    a3f4:	687b      	ldr	r3, [r7, #4]
    a3f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
    a3f8:	687b      	ldr	r3, [r7, #4]
    a3fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    a3fc:	4b1f      	ldr	r3, [pc, #124]	; (a47c <pidCompute+0x1c0>)
    a3fe:	1c08      	adds	r0, r1, #0
    a400:	1c11      	adds	r1, r2, #0
    a402:	4798      	blx	r3
    a404:	1c03      	adds	r3, r0, #0
    a406:	1c19      	adds	r1, r3, #0
    a408:	687b      	ldr	r3, [r7, #4]
    a40a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    a40c:	4b1b      	ldr	r3, [pc, #108]	; (a47c <pidCompute+0x1c0>)
    a40e:	1c08      	adds	r0, r1, #0
    a410:	1c11      	adds	r1, r2, #0
    a412:	4798      	blx	r3
    a414:	1c03      	adds	r3, r0, #0
    a416:	1c1a      	adds	r2, r3, #0
    a418:	687b      	ldr	r3, [r7, #4]
    a41a:	621a      	str	r2, [r3, #32]
	
	if(pid_inst->Output > pid_inst->outMax) pid_inst->Output = pid_inst->outMax;
    a41c:	687b      	ldr	r3, [r7, #4]
    a41e:	6a19      	ldr	r1, [r3, #32]
    a420:	687b      	ldr	r3, [r7, #4]
    a422:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    a424:	4b14      	ldr	r3, [pc, #80]	; (a478 <pidCompute+0x1bc>)
    a426:	1c08      	adds	r0, r1, #0
    a428:	1c11      	adds	r1, r2, #0
    a42a:	4798      	blx	r3
    a42c:	1c03      	adds	r3, r0, #0
    a42e:	2b00      	cmp	r3, #0
    a430:	d004      	beq.n	a43c <pidCompute+0x180>
    a432:	687b      	ldr	r3, [r7, #4]
    a434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    a436:	687b      	ldr	r3, [r7, #4]
    a438:	621a      	str	r2, [r3, #32]
    a43a:	e00e      	b.n	a45a <pidCompute+0x19e>
	else if(pid_inst->Output < pid_inst->outMin) pid_inst->Output = pid_inst->outMin;
    a43c:	687b      	ldr	r3, [r7, #4]
    a43e:	6a19      	ldr	r1, [r3, #32]
    a440:	687b      	ldr	r3, [r7, #4]
    a442:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    a444:	4b0b      	ldr	r3, [pc, #44]	; (a474 <pidCompute+0x1b8>)
    a446:	1c08      	adds	r0, r1, #0
    a448:	1c11      	adds	r1, r2, #0
    a44a:	4798      	blx	r3
    a44c:	1c03      	adds	r3, r0, #0
    a44e:	2b00      	cmp	r3, #0
    a450:	d003      	beq.n	a45a <pidCompute+0x19e>
    a452:	687b      	ldr	r3, [r7, #4]
    a454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    a456:	687b      	ldr	r3, [r7, #4]
    a458:	621a      	str	r2, [r3, #32]
	
	pid_inst->lastInput = pid_inst->Input;
    a45a:	687b      	ldr	r3, [r7, #4]
    a45c:	69da      	ldr	r2, [r3, #28]
    a45e:	687b      	ldr	r3, [r7, #4]
    a460:	63da      	str	r2, [r3, #60]	; 0x3c
	
	return true;
    a462:	2301      	movs	r3, #1
}
    a464:	1c18      	adds	r0, r3, #0
    a466:	46bd      	mov	sp, r7
    a468:	b003      	add	sp, #12
    a46a:	bd90      	pop	{r4, r7, pc}
    a46c:	00020089 	.word	0x00020089
    a470:	0001fe31 	.word	0x0001fe31
    a474:	0001f62d 	.word	0x0001f62d
    a478:	0001f655 	.word	0x0001f655
    a47c:	0001f79d 	.word	0x0001f79d
    a480:	200009b8 	.word	0x200009b8

0000a484 <pidSetOutputLimits>:

void pidSetOutputLimits(struct pid_instance *pid_inst, float Min, float Max)
{
    a484:	b580      	push	{r7, lr}
    a486:	b084      	sub	sp, #16
    a488:	af00      	add	r7, sp, #0
    a48a:	60f8      	str	r0, [r7, #12]
    a48c:	60b9      	str	r1, [r7, #8]
    a48e:	607a      	str	r2, [r7, #4]
	// prevent interruption of changes
	rtc_calendar_disable_callback(RTC_CALENDAR_CALLBACK_ALARM_0);
    a490:	2000      	movs	r0, #0
    a492:	4b2c      	ldr	r3, [pc, #176]	; (a544 <pidSetOutputLimits+0xc0>)
    a494:	4798      	blx	r3
	
	if(Min >= Max) return;
    a496:	4b2c      	ldr	r3, [pc, #176]	; (a548 <pidSetOutputLimits+0xc4>)
    a498:	68b8      	ldr	r0, [r7, #8]
    a49a:	6879      	ldr	r1, [r7, #4]
    a49c:	4798      	blx	r3
    a49e:	1c03      	adds	r3, r0, #0
    a4a0:	2b00      	cmp	r3, #0
    a4a2:	d000      	beq.n	a4a6 <pidSetOutputLimits+0x22>
    a4a4:	e04b      	b.n	a53e <pidSetOutputLimits+0xba>
	pid_inst->outMin = Min;
    a4a6:	68fb      	ldr	r3, [r7, #12]
    a4a8:	68ba      	ldr	r2, [r7, #8]
    a4aa:	645a      	str	r2, [r3, #68]	; 0x44
	pid_inst->outMax = Max;
    a4ac:	68fb      	ldr	r3, [r7, #12]
    a4ae:	687a      	ldr	r2, [r7, #4]
    a4b0:	649a      	str	r2, [r3, #72]	; 0x48
	
	if(pid_inst->inAuto)
    a4b2:	68fa      	ldr	r2, [r7, #12]
    a4b4:	234c      	movs	r3, #76	; 0x4c
    a4b6:	5cd3      	ldrb	r3, [r2, r3]
    a4b8:	2b00      	cmp	r3, #0
    a4ba:	d03d      	beq.n	a538 <pidSetOutputLimits+0xb4>
	{
		if(pid_inst->Output > pid_inst->outMax) pid_inst->Output = pid_inst->outMax;
    a4bc:	68fb      	ldr	r3, [r7, #12]
    a4be:	6a19      	ldr	r1, [r3, #32]
    a4c0:	68fb      	ldr	r3, [r7, #12]
    a4c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    a4c4:	4b21      	ldr	r3, [pc, #132]	; (a54c <pidSetOutputLimits+0xc8>)
    a4c6:	1c08      	adds	r0, r1, #0
    a4c8:	1c11      	adds	r1, r2, #0
    a4ca:	4798      	blx	r3
    a4cc:	1c03      	adds	r3, r0, #0
    a4ce:	2b00      	cmp	r3, #0
    a4d0:	d004      	beq.n	a4dc <pidSetOutputLimits+0x58>
    a4d2:	68fb      	ldr	r3, [r7, #12]
    a4d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    a4d6:	68fb      	ldr	r3, [r7, #12]
    a4d8:	621a      	str	r2, [r3, #32]
    a4da:	e00e      	b.n	a4fa <pidSetOutputLimits+0x76>
		else if(pid_inst->Output < pid_inst->outMin) pid_inst->Output = pid_inst->outMin;
    a4dc:	68fb      	ldr	r3, [r7, #12]
    a4de:	6a19      	ldr	r1, [r3, #32]
    a4e0:	68fb      	ldr	r3, [r7, #12]
    a4e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    a4e4:	4b1a      	ldr	r3, [pc, #104]	; (a550 <pidSetOutputLimits+0xcc>)
    a4e6:	1c08      	adds	r0, r1, #0
    a4e8:	1c11      	adds	r1, r2, #0
    a4ea:	4798      	blx	r3
    a4ec:	1c03      	adds	r3, r0, #0
    a4ee:	2b00      	cmp	r3, #0
    a4f0:	d003      	beq.n	a4fa <pidSetOutputLimits+0x76>
    a4f2:	68fb      	ldr	r3, [r7, #12]
    a4f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    a4f6:	68fb      	ldr	r3, [r7, #12]
    a4f8:	621a      	str	r2, [r3, #32]
		
		if(pid_inst->ITerm > pid_inst->outMax) pid_inst->ITerm = pid_inst->outMax;
    a4fa:	68fb      	ldr	r3, [r7, #12]
    a4fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
    a4fe:	68fb      	ldr	r3, [r7, #12]
    a500:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    a502:	4b12      	ldr	r3, [pc, #72]	; (a54c <pidSetOutputLimits+0xc8>)
    a504:	1c08      	adds	r0, r1, #0
    a506:	1c11      	adds	r1, r2, #0
    a508:	4798      	blx	r3
    a50a:	1c03      	adds	r3, r0, #0
    a50c:	2b00      	cmp	r3, #0
    a50e:	d004      	beq.n	a51a <pidSetOutputLimits+0x96>
    a510:	68fb      	ldr	r3, [r7, #12]
    a512:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    a514:	68fb      	ldr	r3, [r7, #12]
    a516:	635a      	str	r2, [r3, #52]	; 0x34
    a518:	e00e      	b.n	a538 <pidSetOutputLimits+0xb4>
		else if(pid_inst->ITerm < pid_inst->outMin) pid_inst->ITerm = pid_inst->outMin;
    a51a:	68fb      	ldr	r3, [r7, #12]
    a51c:	6b59      	ldr	r1, [r3, #52]	; 0x34
    a51e:	68fb      	ldr	r3, [r7, #12]
    a520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    a522:	4b0b      	ldr	r3, [pc, #44]	; (a550 <pidSetOutputLimits+0xcc>)
    a524:	1c08      	adds	r0, r1, #0
    a526:	1c11      	adds	r1, r2, #0
    a528:	4798      	blx	r3
    a52a:	1c03      	adds	r3, r0, #0
    a52c:	2b00      	cmp	r3, #0
    a52e:	d003      	beq.n	a538 <pidSetOutputLimits+0xb4>
    a530:	68fb      	ldr	r3, [r7, #12]
    a532:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    a534:	68fb      	ldr	r3, [r7, #12]
    a536:	635a      	str	r2, [r3, #52]	; 0x34
	}
	
	rtc_calendar_enable_callback(RTC_CALENDAR_CALLBACK_ALARM_0);
    a538:	2000      	movs	r0, #0
    a53a:	4b06      	ldr	r3, [pc, #24]	; (a554 <pidSetOutputLimits+0xd0>)
    a53c:	4798      	blx	r3
}
    a53e:	46bd      	mov	sp, r7
    a540:	b004      	add	sp, #16
    a542:	bd80      	pop	{r7, pc}
    a544:	00012af5 	.word	0x00012af5
    a548:	0001f669 	.word	0x0001f669
    a54c:	0001f655 	.word	0x0001f655
    a550:	0001f62d 	.word	0x0001f62d
    a554:	00012a89 	.word	0x00012a89

0000a558 <pidSetTunings>:

void pidSetTunings(struct pid_instance *pid_inst, float Kp, float Ki, float Kd)
{
    a558:	b580      	push	{r7, lr}
    a55a:	b084      	sub	sp, #16
    a55c:	af00      	add	r7, sp, #0
    a55e:	60f8      	str	r0, [r7, #12]
    a560:	60b9      	str	r1, [r7, #8]
    a562:	607a      	str	r2, [r7, #4]
    a564:	603b      	str	r3, [r7, #0]
	// prevent interruption of changes
	rtc_calendar_disable_callback(RTC_CALENDAR_CALLBACK_ALARM_0);
    a566:	2000      	movs	r0, #0
    a568:	4b33      	ldr	r3, [pc, #204]	; (a638 <pidSetTunings+0xe0>)
    a56a:	4798      	blx	r3

	if (Kp<0 || Ki<0 || Kd<0) return;
    a56c:	4b33      	ldr	r3, [pc, #204]	; (a63c <pidSetTunings+0xe4>)
    a56e:	68b8      	ldr	r0, [r7, #8]
    a570:	2100      	movs	r1, #0
    a572:	4798      	blx	r3
    a574:	1c03      	adds	r3, r0, #0
    a576:	2b00      	cmp	r3, #0
    a578:	d10d      	bne.n	a596 <pidSetTunings+0x3e>
    a57a:	4b30      	ldr	r3, [pc, #192]	; (a63c <pidSetTunings+0xe4>)
    a57c:	6878      	ldr	r0, [r7, #4]
    a57e:	2100      	movs	r1, #0
    a580:	4798      	blx	r3
    a582:	1c03      	adds	r3, r0, #0
    a584:	2b00      	cmp	r3, #0
    a586:	d106      	bne.n	a596 <pidSetTunings+0x3e>
    a588:	4b2c      	ldr	r3, [pc, #176]	; (a63c <pidSetTunings+0xe4>)
    a58a:	6838      	ldr	r0, [r7, #0]
    a58c:	2100      	movs	r1, #0
    a58e:	4798      	blx	r3
    a590:	1c03      	adds	r3, r0, #0
    a592:	2b00      	cmp	r3, #0
    a594:	d000      	beq.n	a598 <pidSetTunings+0x40>
    a596:	e04c      	b.n	a632 <pidSetTunings+0xda>
	
	pid_inst->dispKp = Kp;
    a598:	68fb      	ldr	r3, [r7, #12]
    a59a:	68ba      	ldr	r2, [r7, #8]
    a59c:	60da      	str	r2, [r3, #12]
	pid_inst->dispKi = Ki;
    a59e:	68fb      	ldr	r3, [r7, #12]
    a5a0:	687a      	ldr	r2, [r7, #4]
    a5a2:	611a      	str	r2, [r3, #16]
	pid_inst->dispKd = Kd;
    a5a4:	68fb      	ldr	r3, [r7, #12]
    a5a6:	683a      	ldr	r2, [r7, #0]
    a5a8:	615a      	str	r2, [r3, #20]
	
	// calculate ideal parallel form constants
	pid_inst->kp = Kp;
    a5aa:	68fb      	ldr	r3, [r7, #12]
    a5ac:	68ba      	ldr	r2, [r7, #8]
    a5ae:	601a      	str	r2, [r3, #0]
	pid_inst->ki = Ki * pid_inst->SampleTimeMsec;	// Ki = Kp/Ti in standard form
    a5b0:	68fb      	ldr	r3, [r7, #12]
    a5b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    a5b4:	4b22      	ldr	r3, [pc, #136]	; (a640 <pidSetTunings+0xe8>)
    a5b6:	1c10      	adds	r0, r2, #0
    a5b8:	4798      	blx	r3
    a5ba:	1c02      	adds	r2, r0, #0
    a5bc:	4b21      	ldr	r3, [pc, #132]	; (a644 <pidSetTunings+0xec>)
    a5be:	1c10      	adds	r0, r2, #0
    a5c0:	6879      	ldr	r1, [r7, #4]
    a5c2:	4798      	blx	r3
    a5c4:	1c03      	adds	r3, r0, #0
    a5c6:	1c1a      	adds	r2, r3, #0
    a5c8:	68fb      	ldr	r3, [r7, #12]
    a5ca:	605a      	str	r2, [r3, #4]
	pid_inst->kd = Kd / pid_inst->SampleTimeMsec;	// Kd = Kp*Td in standard form
    a5cc:	68fb      	ldr	r3, [r7, #12]
    a5ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    a5d0:	4b1b      	ldr	r3, [pc, #108]	; (a640 <pidSetTunings+0xe8>)
    a5d2:	1c10      	adds	r0, r2, #0
    a5d4:	4798      	blx	r3
    a5d6:	1c02      	adds	r2, r0, #0
    a5d8:	4b1b      	ldr	r3, [pc, #108]	; (a648 <pidSetTunings+0xf0>)
    a5da:	6838      	ldr	r0, [r7, #0]
    a5dc:	1c11      	adds	r1, r2, #0
    a5de:	4798      	blx	r3
    a5e0:	1c03      	adds	r3, r0, #0
    a5e2:	1c1a      	adds	r2, r3, #0
    a5e4:	68fb      	ldr	r3, [r7, #12]
    a5e6:	609a      	str	r2, [r3, #8]
	
	if(pid_inst->controllerDirection == REVERSE) {
    a5e8:	68fb      	ldr	r3, [r7, #12]
    a5ea:	699b      	ldr	r3, [r3, #24]
    a5ec:	2b01      	cmp	r3, #1
    a5ee:	d11d      	bne.n	a62c <pidSetTunings+0xd4>
		pid_inst->kp = (0 - pid_inst->kp);
    a5f0:	68fb      	ldr	r3, [r7, #12]
    a5f2:	681a      	ldr	r2, [r3, #0]
    a5f4:	4b15      	ldr	r3, [pc, #84]	; (a64c <pidSetTunings+0xf4>)
    a5f6:	2000      	movs	r0, #0
    a5f8:	1c11      	adds	r1, r2, #0
    a5fa:	4798      	blx	r3
    a5fc:	1c03      	adds	r3, r0, #0
    a5fe:	1c1a      	adds	r2, r3, #0
    a600:	68fb      	ldr	r3, [r7, #12]
    a602:	601a      	str	r2, [r3, #0]
		pid_inst->ki = (0 - pid_inst->ki);
    a604:	68fb      	ldr	r3, [r7, #12]
    a606:	685a      	ldr	r2, [r3, #4]
    a608:	4b10      	ldr	r3, [pc, #64]	; (a64c <pidSetTunings+0xf4>)
    a60a:	2000      	movs	r0, #0
    a60c:	1c11      	adds	r1, r2, #0
    a60e:	4798      	blx	r3
    a610:	1c03      	adds	r3, r0, #0
    a612:	1c1a      	adds	r2, r3, #0
    a614:	68fb      	ldr	r3, [r7, #12]
    a616:	605a      	str	r2, [r3, #4]
		pid_inst->kd = (0 - pid_inst->kd);
    a618:	68fb      	ldr	r3, [r7, #12]
    a61a:	689a      	ldr	r2, [r3, #8]
    a61c:	4b0b      	ldr	r3, [pc, #44]	; (a64c <pidSetTunings+0xf4>)
    a61e:	2000      	movs	r0, #0
    a620:	1c11      	adds	r1, r2, #0
    a622:	4798      	blx	r3
    a624:	1c03      	adds	r3, r0, #0
    a626:	1c1a      	adds	r2, r3, #0
    a628:	68fb      	ldr	r3, [r7, #12]
    a62a:	609a      	str	r2, [r3, #8]
	}

	rtc_calendar_enable_callback(RTC_CALENDAR_CALLBACK_ALARM_0);
    a62c:	2000      	movs	r0, #0
    a62e:	4b08      	ldr	r3, [pc, #32]	; (a650 <pidSetTunings+0xf8>)
    a630:	4798      	blx	r3
}
    a632:	46bd      	mov	sp, r7
    a634:	b004      	add	sp, #16
    a636:	bd80      	pop	{r7, pc}
    a638:	00012af5 	.word	0x00012af5
    a63c:	0001f62d 	.word	0x0001f62d
    a640:	0002046d 	.word	0x0002046d
    a644:	0001fe31 	.word	0x0001fe31
    a648:	0001fa75 	.word	0x0001fa75
    a64c:	00020089 	.word	0x00020089
    a650:	00012a89 	.word	0x00012a89

0000a654 <pidSetControllerDirection>:

void pidSetControllerDirection(struct pid_instance *pid_inst, int Direction)
{
    a654:	b580      	push	{r7, lr}
    a656:	b082      	sub	sp, #8
    a658:	af00      	add	r7, sp, #0
    a65a:	6078      	str	r0, [r7, #4]
    a65c:	6039      	str	r1, [r7, #0]
	// prevent interruption of changes
	rtc_calendar_disable_callback(RTC_CALENDAR_CALLBACK_ALARM_0);
    a65e:	2000      	movs	r0, #0
    a660:	4b19      	ldr	r3, [pc, #100]	; (a6c8 <pidSetControllerDirection+0x74>)
    a662:	4798      	blx	r3
	
	if(pid_inst->inAuto && Direction != pid_inst->controllerDirection)
    a664:	687a      	ldr	r2, [r7, #4]
    a666:	234c      	movs	r3, #76	; 0x4c
    a668:	5cd3      	ldrb	r3, [r2, r3]
    a66a:	2b00      	cmp	r3, #0
    a66c:	d022      	beq.n	a6b4 <pidSetControllerDirection+0x60>
    a66e:	687b      	ldr	r3, [r7, #4]
    a670:	699a      	ldr	r2, [r3, #24]
    a672:	683b      	ldr	r3, [r7, #0]
    a674:	429a      	cmp	r2, r3
    a676:	d01d      	beq.n	a6b4 <pidSetControllerDirection+0x60>
	{
		pid_inst->kp = (0 - pid_inst->kp);
    a678:	687b      	ldr	r3, [r7, #4]
    a67a:	681a      	ldr	r2, [r3, #0]
    a67c:	4b13      	ldr	r3, [pc, #76]	; (a6cc <pidSetControllerDirection+0x78>)
    a67e:	2000      	movs	r0, #0
    a680:	1c11      	adds	r1, r2, #0
    a682:	4798      	blx	r3
    a684:	1c03      	adds	r3, r0, #0
    a686:	1c1a      	adds	r2, r3, #0
    a688:	687b      	ldr	r3, [r7, #4]
    a68a:	601a      	str	r2, [r3, #0]
		pid_inst->ki = (0 - pid_inst->ki);
    a68c:	687b      	ldr	r3, [r7, #4]
    a68e:	685a      	ldr	r2, [r3, #4]
    a690:	4b0e      	ldr	r3, [pc, #56]	; (a6cc <pidSetControllerDirection+0x78>)
    a692:	2000      	movs	r0, #0
    a694:	1c11      	adds	r1, r2, #0
    a696:	4798      	blx	r3
    a698:	1c03      	adds	r3, r0, #0
    a69a:	1c1a      	adds	r2, r3, #0
    a69c:	687b      	ldr	r3, [r7, #4]
    a69e:	605a      	str	r2, [r3, #4]
		pid_inst->kd = (0 - pid_inst->kd);
    a6a0:	687b      	ldr	r3, [r7, #4]
    a6a2:	689a      	ldr	r2, [r3, #8]
    a6a4:	4b09      	ldr	r3, [pc, #36]	; (a6cc <pidSetControllerDirection+0x78>)
    a6a6:	2000      	movs	r0, #0
    a6a8:	1c11      	adds	r1, r2, #0
    a6aa:	4798      	blx	r3
    a6ac:	1c03      	adds	r3, r0, #0
    a6ae:	1c1a      	adds	r2, r3, #0
    a6b0:	687b      	ldr	r3, [r7, #4]
    a6b2:	609a      	str	r2, [r3, #8]
	}
	pid_inst->controllerDirection = Direction;
    a6b4:	687b      	ldr	r3, [r7, #4]
    a6b6:	683a      	ldr	r2, [r7, #0]
    a6b8:	619a      	str	r2, [r3, #24]

	rtc_calendar_enable_callback(RTC_CALENDAR_CALLBACK_ALARM_0);
    a6ba:	2000      	movs	r0, #0
    a6bc:	4b04      	ldr	r3, [pc, #16]	; (a6d0 <pidSetControllerDirection+0x7c>)
    a6be:	4798      	blx	r3
    a6c0:	46bd      	mov	sp, r7
    a6c2:	b002      	add	sp, #8
    a6c4:	bd80      	pop	{r7, pc}
    a6c6:	46c0      	nop			; (mov r8, r8)
    a6c8:	00012af5 	.word	0x00012af5
    a6cc:	00020089 	.word	0x00020089
    a6d0:	00012a89 	.word	0x00012a89

0000a6d4 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
    a6d4:	b580      	push	{r7, lr}
    a6d6:	af00      	add	r7, sp, #0
	return test_case_ptr;
    a6d8:	4b02      	ldr	r3, [pc, #8]	; (a6e4 <test_get_case+0x10>)
    a6da:	681b      	ldr	r3, [r3, #0]
}
    a6dc:	1c18      	adds	r0, r3, #0
    a6de:	46bd      	mov	sp, r7
    a6e0:	bd80      	pop	{r7, pc}
    a6e2:	46c0      	nop			; (mov r8, r8)
    a6e4:	2000041c 	.word	0x2000041c

0000a6e8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    a6e8:	b590      	push	{r4, r7, lr}
    a6ea:	b087      	sub	sp, #28
    a6ec:	af02      	add	r7, sp, #8
    a6ee:	1c02      	adds	r2, r0, #0
    a6f0:	1dfb      	adds	r3, r7, #7
    a6f2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    a6f4:	1c3b      	adds	r3, r7, #0
    a6f6:	330f      	adds	r3, #15
    a6f8:	1dfa      	adds	r2, r7, #7
    a6fa:	7812      	ldrb	r2, [r2, #0]
    a6fc:	09d2      	lsrs	r2, r2, #7
    a6fe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    a700:	1c3b      	adds	r3, r7, #0
    a702:	330e      	adds	r3, #14
    a704:	1dfa      	adds	r2, r7, #7
    a706:	7812      	ldrb	r2, [r2, #0]
    a708:	0952      	lsrs	r2, r2, #5
    a70a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    a70c:	4b1b      	ldr	r3, [pc, #108]	; (a77c <system_pinmux_get_group_from_gpio_pin+0x94>)
    a70e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    a710:	1c3b      	adds	r3, r7, #0
    a712:	330f      	adds	r3, #15
    a714:	781b      	ldrb	r3, [r3, #0]
    a716:	2b00      	cmp	r3, #0
    a718:	d10e      	bne.n	a738 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    a71a:	1c3b      	adds	r3, r7, #0
    a71c:	330f      	adds	r3, #15
    a71e:	781b      	ldrb	r3, [r3, #0]
    a720:	009b      	lsls	r3, r3, #2
    a722:	2210      	movs	r2, #16
    a724:	19d2      	adds	r2, r2, r7
    a726:	18d3      	adds	r3, r2, r3
    a728:	3b08      	subs	r3, #8
    a72a:	681a      	ldr	r2, [r3, #0]
    a72c:	1c3b      	adds	r3, r7, #0
    a72e:	330e      	adds	r3, #14
    a730:	781b      	ldrb	r3, [r3, #0]
    a732:	01db      	lsls	r3, r3, #7
    a734:	18d3      	adds	r3, r2, r3
    a736:	e01c      	b.n	a772 <system_pinmux_get_group_from_gpio_pin+0x8a>
	} else {
		Assert(false);
    a738:	4b11      	ldr	r3, [pc, #68]	; (a780 <system_pinmux_get_group_from_gpio_pin+0x98>)
    a73a:	4798      	blx	r3
    a73c:	1c03      	adds	r3, r0, #0
    a73e:	2b00      	cmp	r3, #0
    a740:	d00f      	beq.n	a762 <system_pinmux_get_group_from_gpio_pin+0x7a>
    a742:	4b0f      	ldr	r3, [pc, #60]	; (a780 <system_pinmux_get_group_from_gpio_pin+0x98>)
    a744:	4798      	blx	r3
    a746:	1c01      	adds	r1, r0, #0
    a748:	4a0e      	ldr	r2, [pc, #56]	; (a784 <system_pinmux_get_group_from_gpio_pin+0x9c>)
    a74a:	2368      	movs	r3, #104	; 0x68
    a74c:	33ff      	adds	r3, #255	; 0xff
    a74e:	480e      	ldr	r0, [pc, #56]	; (a788 <system_pinmux_get_group_from_gpio_pin+0xa0>)
    a750:	9000      	str	r0, [sp, #0]
    a752:	480e      	ldr	r0, [pc, #56]	; (a78c <system_pinmux_get_group_from_gpio_pin+0xa4>)
    a754:	9001      	str	r0, [sp, #4]
    a756:	1c08      	adds	r0, r1, #0
    a758:	2101      	movs	r1, #1
    a75a:	4c0d      	ldr	r4, [pc, #52]	; (a790 <system_pinmux_get_group_from_gpio_pin+0xa8>)
    a75c:	47a0      	blx	r4
		return NULL;
    a75e:	2300      	movs	r3, #0
    a760:	e007      	b.n	a772 <system_pinmux_get_group_from_gpio_pin+0x8a>
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
    a762:	480c      	ldr	r0, [pc, #48]	; (a794 <system_pinmux_get_group_from_gpio_pin+0xac>)
    a764:	4909      	ldr	r1, [pc, #36]	; (a78c <system_pinmux_get_group_from_gpio_pin+0xa4>)
    a766:	4a07      	ldr	r2, [pc, #28]	; (a784 <system_pinmux_get_group_from_gpio_pin+0x9c>)
    a768:	2368      	movs	r3, #104	; 0x68
    a76a:	33ff      	adds	r3, #255	; 0xff
    a76c:	4c0a      	ldr	r4, [pc, #40]	; (a798 <system_pinmux_get_group_from_gpio_pin+0xb0>)
    a76e:	47a0      	blx	r4
    a770:	e7fe      	b.n	a770 <system_pinmux_get_group_from_gpio_pin+0x88>
		return NULL;
	}
}
    a772:	1c18      	adds	r0, r3, #0
    a774:	46bd      	mov	sp, r7
    a776:	b005      	add	sp, #20
    a778:	bd90      	pop	{r4, r7, pc}
    a77a:	46c0      	nop			; (mov r8, r8)
    a77c:	41004400 	.word	0x41004400
    a780:	0000a6d5 	.word	0x0000a6d5
    a784:	00024b14 	.word	0x00024b14
    a788:	00024b44 	.word	0x00024b44
    a78c:	00024b5c 	.word	0x00024b5c
    a790:	000106e9 	.word	0x000106e9
    a794:	00024b64 	.word	0x00024b64
    a798:	0001b62d 	.word	0x0001b62d

0000a79c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    a79c:	b580      	push	{r7, lr}
    a79e:	b082      	sub	sp, #8
    a7a0:	af00      	add	r7, sp, #0
    a7a2:	1c02      	adds	r2, r0, #0
    a7a4:	1dfb      	adds	r3, r7, #7
    a7a6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    a7a8:	1dfb      	adds	r3, r7, #7
    a7aa:	781b      	ldrb	r3, [r3, #0]
    a7ac:	1c18      	adds	r0, r3, #0
    a7ae:	4b03      	ldr	r3, [pc, #12]	; (a7bc <port_get_group_from_gpio_pin+0x20>)
    a7b0:	4798      	blx	r3
    a7b2:	1c03      	adds	r3, r0, #0
}
    a7b4:	1c18      	adds	r0, r3, #0
    a7b6:	46bd      	mov	sp, r7
    a7b8:	b002      	add	sp, #8
    a7ba:	bd80      	pop	{r7, pc}
    a7bc:	0000a6e9 	.word	0x0000a6e9

0000a7c0 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    a7c0:	b590      	push	{r4, r7, lr}
    a7c2:	b085      	sub	sp, #20
    a7c4:	af02      	add	r7, sp, #8
    a7c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
    a7c8:	4b15      	ldr	r3, [pc, #84]	; (a820 <port_get_config_defaults+0x60>)
    a7ca:	4798      	blx	r3
    a7cc:	1c03      	adds	r3, r0, #0
    a7ce:	2b00      	cmp	r3, #0
    a7d0:	d011      	beq.n	a7f6 <port_get_config_defaults+0x36>
    a7d2:	687b      	ldr	r3, [r7, #4]
    a7d4:	2b00      	cmp	r3, #0
    a7d6:	d119      	bne.n	a80c <port_get_config_defaults+0x4c>
    a7d8:	4b11      	ldr	r3, [pc, #68]	; (a820 <port_get_config_defaults+0x60>)
    a7da:	4798      	blx	r3
    a7dc:	1c01      	adds	r1, r0, #0
    a7de:	4a11      	ldr	r2, [pc, #68]	; (a824 <port_get_config_defaults+0x64>)
    a7e0:	23ad      	movs	r3, #173	; 0xad
    a7e2:	005b      	lsls	r3, r3, #1
    a7e4:	4810      	ldr	r0, [pc, #64]	; (a828 <port_get_config_defaults+0x68>)
    a7e6:	9000      	str	r0, [sp, #0]
    a7e8:	4810      	ldr	r0, [pc, #64]	; (a82c <port_get_config_defaults+0x6c>)
    a7ea:	9001      	str	r0, [sp, #4]
    a7ec:	1c08      	adds	r0, r1, #0
    a7ee:	2101      	movs	r1, #1
    a7f0:	4c0f      	ldr	r4, [pc, #60]	; (a830 <port_get_config_defaults+0x70>)
    a7f2:	47a0      	blx	r4
    a7f4:	e00a      	b.n	a80c <port_get_config_defaults+0x4c>
    a7f6:	687b      	ldr	r3, [r7, #4]
    a7f8:	2b00      	cmp	r3, #0
    a7fa:	d107      	bne.n	a80c <port_get_config_defaults+0x4c>
    a7fc:	480d      	ldr	r0, [pc, #52]	; (a834 <port_get_config_defaults+0x74>)
    a7fe:	490b      	ldr	r1, [pc, #44]	; (a82c <port_get_config_defaults+0x6c>)
    a800:	4a08      	ldr	r2, [pc, #32]	; (a824 <port_get_config_defaults+0x64>)
    a802:	23ad      	movs	r3, #173	; 0xad
    a804:	005b      	lsls	r3, r3, #1
    a806:	4c0c      	ldr	r4, [pc, #48]	; (a838 <port_get_config_defaults+0x78>)
    a808:	47a0      	blx	r4
    a80a:	e7fe      	b.n	a80a <port_get_config_defaults+0x4a>

	/* Default configuration values */
	config->direction = PORT_PIN_DIR_INPUT;
    a80c:	687b      	ldr	r3, [r7, #4]
    a80e:	2200      	movs	r2, #0
    a810:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    a812:	687b      	ldr	r3, [r7, #4]
    a814:	2201      	movs	r2, #1
    a816:	705a      	strb	r2, [r3, #1]
}
    a818:	46bd      	mov	sp, r7
    a81a:	b003      	add	sp, #12
    a81c:	bd90      	pop	{r4, r7, pc}
    a81e:	46c0      	nop			; (mov r8, r8)
    a820:	0000a6d5 	.word	0x0000a6d5
    a824:	00024b88 	.word	0x00024b88
    a828:	00024b44 	.word	0x00024b44
    a82c:	00024bac 	.word	0x00024bac
    a830:	000106e9 	.word	0x000106e9
    a834:	00024b64 	.word	0x00024b64
    a838:	0001b62d 	.word	0x0001b62d

0000a83c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    a83c:	b580      	push	{r7, lr}
    a83e:	b084      	sub	sp, #16
    a840:	af00      	add	r7, sp, #0
    a842:	1c0a      	adds	r2, r1, #0
    a844:	1dfb      	adds	r3, r7, #7
    a846:	1c01      	adds	r1, r0, #0
    a848:	7019      	strb	r1, [r3, #0]
    a84a:	1dbb      	adds	r3, r7, #6
    a84c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    a84e:	1dfb      	adds	r3, r7, #7
    a850:	781b      	ldrb	r3, [r3, #0]
    a852:	1c18      	adds	r0, r3, #0
    a854:	4b0d      	ldr	r3, [pc, #52]	; (a88c <port_pin_set_output_level+0x50>)
    a856:	4798      	blx	r3
    a858:	1c03      	adds	r3, r0, #0
    a85a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    a85c:	1dfb      	adds	r3, r7, #7
    a85e:	781a      	ldrb	r2, [r3, #0]
    a860:	231f      	movs	r3, #31
    a862:	4013      	ands	r3, r2
    a864:	2201      	movs	r2, #1
    a866:	1c11      	adds	r1, r2, #0
    a868:	4099      	lsls	r1, r3
    a86a:	1c0b      	adds	r3, r1, #0
    a86c:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    a86e:	1dbb      	adds	r3, r7, #6
    a870:	781b      	ldrb	r3, [r3, #0]
    a872:	2b00      	cmp	r3, #0
    a874:	d003      	beq.n	a87e <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    a876:	68fb      	ldr	r3, [r7, #12]
    a878:	68ba      	ldr	r2, [r7, #8]
    a87a:	619a      	str	r2, [r3, #24]
    a87c:	e002      	b.n	a884 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    a87e:	68fb      	ldr	r3, [r7, #12]
    a880:	68ba      	ldr	r2, [r7, #8]
    a882:	615a      	str	r2, [r3, #20]
	}
}
    a884:	46bd      	mov	sp, r7
    a886:	b004      	add	sp, #16
    a888:	bd80      	pop	{r7, pc}
    a88a:	46c0      	nop			; (mov r8, r8)
    a88c:	0000a79d 	.word	0x0000a79d

0000a890 <port_pin_set_output_level_EX>:
	float (*fControl[32])(float, bool, int);
	
	static inline bool port_pin_set_output_level_EX(
	const uint8_t gpio_pin,
	const int nLevel, const bool ManualOverride)
	{
    a890:	b580      	push	{r7, lr}
    a892:	b084      	sub	sp, #16
    a894:	af00      	add	r7, sp, #0
    a896:	6039      	str	r1, [r7, #0]
    a898:	1dfb      	adds	r3, r7, #7
    a89a:	1c01      	adds	r1, r0, #0
    a89c:	7019      	strb	r1, [r3, #0]
    a89e:	1dbb      	adds	r3, r7, #6
    a8a0:	701a      	strb	r2, [r3, #0]
			  break;
		  }
*/			
		}
	
		if (!ManualOverride)
    a8a2:	1dbb      	adds	r3, r7, #6
    a8a4:	781b      	ldrb	r3, [r3, #0]
    a8a6:	2201      	movs	r2, #1
    a8a8:	4053      	eors	r3, r2
    a8aa:	b2db      	uxtb	r3, r3
    a8ac:	2b00      	cmp	r3, #0
    a8ae:	d00e      	beq.n	a8ce <port_pin_set_output_level_EX+0x3e>
		{
		  bool bLevel = (nLevel != 0);
    a8b0:	1c3b      	adds	r3, r7, #0
    a8b2:	330f      	adds	r3, #15
    a8b4:	683a      	ldr	r2, [r7, #0]
    a8b6:	1e51      	subs	r1, r2, #1
    a8b8:	418a      	sbcs	r2, r1
    a8ba:	701a      	strb	r2, [r3, #0]
		  port_pin_set_output_level(gpio_pin, bLevel);
    a8bc:	1dfb      	adds	r3, r7, #7
    a8be:	781a      	ldrb	r2, [r3, #0]
    a8c0:	1c3b      	adds	r3, r7, #0
    a8c2:	330f      	adds	r3, #15
    a8c4:	781b      	ldrb	r3, [r3, #0]
    a8c6:	1c10      	adds	r0, r2, #0
    a8c8:	1c19      	adds	r1, r3, #0
    a8ca:	4b03      	ldr	r3, [pc, #12]	; (a8d8 <port_pin_set_output_level_EX+0x48>)
    a8cc:	4798      	blx	r3
		}
		
		return true;
    a8ce:	2301      	movs	r3, #1
	}
    a8d0:	1c18      	adds	r0, r3, #0
    a8d2:	46bd      	mov	sp, r7
    a8d4:	b004      	add	sp, #16
    a8d6:	bd80      	pop	{r7, pc}
    a8d8:	0000a83d 	.word	0x0000a83d

0000a8dc <configure_port_pins>:

/************************************************************************/
/* Configuration                                                        */
/************************************************************************/
void configure_port_pins(void)
{
    a8dc:	b580      	push	{r7, lr}
    a8de:	b082      	sub	sp, #8
    a8e0:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    a8e2:	1d3b      	adds	r3, r7, #4
    a8e4:	1c18      	adds	r0, r3, #0
    a8e6:	4b83      	ldr	r3, [pc, #524]	; (aaf4 <configure_port_pins+0x218>)
    a8e8:	4798      	blx	r3

	// inputs, internal pull-ups enabled
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
    a8ea:	1d3b      	adds	r3, r7, #4
    a8ec:	2200      	movs	r2, #0
    a8ee:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    a8f0:	1d3b      	adds	r3, r7, #4
    a8f2:	2201      	movs	r2, #1
    a8f4:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PIN_RST_TO_SLV_N, &config_port_pin);
    a8f6:	1d3b      	adds	r3, r7, #4
    a8f8:	202b      	movs	r0, #43	; 0x2b
    a8fa:	1c19      	adds	r1, r3, #0
    a8fc:	4b7e      	ldr	r3, [pc, #504]	; (aaf8 <configure_port_pins+0x21c>)
    a8fe:	4798      	blx	r3
	port_pin_set_config(PIN_SLP,		  &config_port_pin);
    a900:	1d3b      	adds	r3, r7, #4
    a902:	201b      	movs	r0, #27
    a904:	1c19      	adds	r1, r3, #0
    a906:	4b7c      	ldr	r3, [pc, #496]	; (aaf8 <configure_port_pins+0x21c>)
    a908:	4798      	blx	r3
	
	// unused pins, inputs, internal pull-ups enabled
	//port_pin_set_config(PIN_PA07_UNUSED, &config_port_pin);
	//port_pin_set_config(PIN_PA22_UNUSED, &config_port_pin);
	//port_pin_set_config(PIN_PA23_UNUSED, &config_port_pin);
	port_pin_set_config(PIN_PB30_UNUSED, &config_port_pin);
    a90a:	1d3b      	adds	r3, r7, #4
    a90c:	203e      	movs	r0, #62	; 0x3e
    a90e:	1c19      	adds	r1, r3, #0
    a910:	4b79      	ldr	r3, [pc, #484]	; (aaf8 <configure_port_pins+0x21c>)
    a912:	4798      	blx	r3

	// inputs, internal pull-ups disabled
	config_port_pin.input_pull = PORT_PIN_PULL_NONE;
    a914:	1d3b      	adds	r3, r7, #4
    a916:	2200      	movs	r2, #0
    a918:	705a      	strb	r2, [r3, #1]
	//port_pin_set_config(PIN_PB16,	   &config_port_pin);	// i2c sda to input as default
	//port_pin_set_config(PIN_PA23,	   &config_port_pin);	// i2c F_scl to input as default
	//port_pin_set_config(PIN_PA22,	   &config_port_pin);	// i2c F_sda to input as default
	
	// set default output values
	port_pin_set_output_level_EX(PIN_ENBL_BUCK1,   LOW, enableManualOverride);
    a91a:	4b78      	ldr	r3, [pc, #480]	; (aafc <configure_port_pins+0x220>)
    a91c:	781b      	ldrb	r3, [r3, #0]
    a91e:	202d      	movs	r0, #45	; 0x2d
    a920:	2100      	movs	r1, #0
    a922:	1c1a      	adds	r2, r3, #0
    a924:	4b76      	ldr	r3, [pc, #472]	; (ab00 <configure_port_pins+0x224>)
    a926:	4798      	blx	r3
	port_pin_set_output_level_EX(PIN_ENBL_OUTPUT1, LOW, enableManualOverride);
    a928:	4b74      	ldr	r3, [pc, #464]	; (aafc <configure_port_pins+0x220>)
    a92a:	781b      	ldrb	r3, [r3, #0]
    a92c:	202e      	movs	r0, #46	; 0x2e
    a92e:	2100      	movs	r1, #0
    a930:	1c1a      	adds	r2, r3, #0
    a932:	4b73      	ldr	r3, [pc, #460]	; (ab00 <configure_port_pins+0x224>)
    a934:	4798      	blx	r3
	port_pin_set_output_level_EX(PIN_ENBL_OUTPUT2, LOW, enableManualOverride);
    a936:	4b71      	ldr	r3, [pc, #452]	; (aafc <configure_port_pins+0x220>)
    a938:	781b      	ldrb	r3, [r3, #0]
    a93a:	200f      	movs	r0, #15
    a93c:	2100      	movs	r1, #0
    a93e:	1c1a      	adds	r2, r3, #0
    a940:	4b6f      	ldr	r3, [pc, #444]	; (ab00 <configure_port_pins+0x224>)
    a942:	4798      	blx	r3
	port_pin_set_output_level_EX(PIN_ENBL_OUTA_COLD, LOW, enableManualOverride);
    a944:	4b6d      	ldr	r3, [pc, #436]	; (aafc <configure_port_pins+0x220>)
    a946:	781b      	ldrb	r3, [r3, #0]
    a948:	203f      	movs	r0, #63	; 0x3f
    a94a:	2100      	movs	r1, #0
    a94c:	1c1a      	adds	r2, r3, #0
    a94e:	4b6c      	ldr	r3, [pc, #432]	; (ab00 <configure_port_pins+0x224>)
    a950:	4798      	blx	r3
	port_pin_set_output_level_EX(PIN_ENBL_OUTA_HOT , LOW, enableManualOverride);
    a952:	4b6a      	ldr	r3, [pc, #424]	; (aafc <configure_port_pins+0x220>)
    a954:	781b      	ldrb	r3, [r3, #0]
    a956:	2023      	movs	r0, #35	; 0x23
    a958:	2100      	movs	r1, #0
    a95a:	1c1a      	adds	r2, r3, #0
    a95c:	4b68      	ldr	r3, [pc, #416]	; (ab00 <configure_port_pins+0x224>)
    a95e:	4798      	blx	r3
	port_pin_set_output_level_EX(PIN_LED_0_PIN,    LOW, enableManualOverride);
    a960:	4b66      	ldr	r3, [pc, #408]	; (aafc <configure_port_pins+0x220>)
    a962:	781b      	ldrb	r3, [r3, #0]
    a964:	200e      	movs	r0, #14
    a966:	2100      	movs	r1, #0
    a968:	1c1a      	adds	r2, r3, #0
    a96a:	4b65      	ldr	r3, [pc, #404]	; (ab00 <configure_port_pins+0x224>)
    a96c:	4798      	blx	r3
	port_pin_set_output_level_EX(PIN_RDY_N,       HIGH, enableManualOverride);
    a96e:	4b63      	ldr	r3, [pc, #396]	; (aafc <configure_port_pins+0x220>)
    a970:	781b      	ldrb	r3, [r3, #0]
    a972:	201c      	movs	r0, #28
    a974:	2101      	movs	r1, #1
    a976:	1c1a      	adds	r2, r3, #0
    a978:	4b61      	ldr	r3, [pc, #388]	; (ab00 <configure_port_pins+0x224>)
    a97a:	4798      	blx	r3
	port_pin_set_output_level_EX(PIN_ENBL_LOAD2,   LOW, enableManualOverride);
    a97c:	4b5f      	ldr	r3, [pc, #380]	; (aafc <configure_port_pins+0x220>)
    a97e:	781b      	ldrb	r3, [r3, #0]
    a980:	2012      	movs	r0, #18
    a982:	2100      	movs	r1, #0
    a984:	1c1a      	adds	r2, r3, #0
    a986:	4b5e      	ldr	r3, [pc, #376]	; (ab00 <configure_port_pins+0x224>)
    a988:	4798      	blx	r3
	port_pin_set_output_level_EX(PIN_ENBL_FAN1,	   LOW, enableManualOverride);
    a98a:	4b5c      	ldr	r3, [pc, #368]	; (aafc <configure_port_pins+0x220>)
    a98c:	781b      	ldrb	r3, [r3, #0]
    a98e:	2015      	movs	r0, #21
    a990:	2100      	movs	r1, #0
    a992:	1c1a      	adds	r2, r3, #0
    a994:	4b5a      	ldr	r3, [pc, #360]	; (ab00 <configure_port_pins+0x224>)
    a996:	4798      	blx	r3
	port_pin_set_output_level_EX(PIN_ENBL_FAN2,    LOW, enableManualOverride);
    a998:	4b58      	ldr	r3, [pc, #352]	; (aafc <configure_port_pins+0x220>)
    a99a:	781b      	ldrb	r3, [r3, #0]
    a99c:	2014      	movs	r0, #20
    a99e:	2100      	movs	r1, #0
    a9a0:	1c1a      	adds	r2, r3, #0
    a9a2:	4b57      	ldr	r3, [pc, #348]	; (ab00 <configure_port_pins+0x224>)
    a9a4:	4798      	blx	r3
	port_pin_set_output_level_EX(PIN_ENBL_FAN3,	   LOW, enableManualOverride);
    a9a6:	4b55      	ldr	r3, [pc, #340]	; (aafc <configure_port_pins+0x220>)
    a9a8:	781b      	ldrb	r3, [r3, #0]
    a9aa:	2013      	movs	r0, #19
    a9ac:	2100      	movs	r1, #0
    a9ae:	1c1a      	adds	r2, r3, #0
    a9b0:	4b53      	ldr	r3, [pc, #332]	; (ab00 <configure_port_pins+0x224>)
    a9b2:	4798      	blx	r3
	port_pin_set_output_level_EX(PIN_ENBL_FAN4,    LOW, enableManualOverride);
    a9b4:	4b51      	ldr	r3, [pc, #324]	; (aafc <configure_port_pins+0x220>)
    a9b6:	781b      	ldrb	r3, [r3, #0]
    a9b8:	202c      	movs	r0, #44	; 0x2c
    a9ba:	2100      	movs	r1, #0
    a9bc:	1c1a      	adds	r2, r3, #0
    a9be:	4b50      	ldr	r3, [pc, #320]	; (ab00 <configure_port_pins+0x224>)
    a9c0:	4798      	blx	r3
	port_pin_set_output_level_EX(PIN_ENBL_FAN5,	   LOW, enableManualOverride);
    a9c2:	4b4e      	ldr	r3, [pc, #312]	; (aafc <configure_port_pins+0x220>)
    a9c4:	781b      	ldrb	r3, [r3, #0]
    a9c6:	2017      	movs	r0, #23
    a9c8:	2100      	movs	r1, #0
    a9ca:	1c1a      	adds	r2, r3, #0
    a9cc:	4b4c      	ldr	r3, [pc, #304]	; (ab00 <configure_port_pins+0x224>)
    a9ce:	4798      	blx	r3
	port_pin_set_output_level_EX(PIN_ENBL_FAN6,    LOW, enableManualOverride);
    a9d0:	4b4a      	ldr	r3, [pc, #296]	; (aafc <configure_port_pins+0x220>)
    a9d2:	781b      	ldrb	r3, [r3, #0]
    a9d4:	2016      	movs	r0, #22
    a9d6:	2100      	movs	r1, #0
    a9d8:	1c1a      	adds	r2, r3, #0
    a9da:	4b49      	ldr	r3, [pc, #292]	; (ab00 <configure_port_pins+0x224>)
    a9dc:	4798      	blx	r3
	port_pin_set_output_level_EX(PIN_ENBL_FAN7,	   LOW, enableManualOverride);
    a9de:	4b47      	ldr	r3, [pc, #284]	; (aafc <configure_port_pins+0x220>)
    a9e0:	781b      	ldrb	r3, [r3, #0]
    a9e2:	2007      	movs	r0, #7
    a9e4:	2100      	movs	r1, #0
    a9e6:	1c1a      	adds	r2, r3, #0
    a9e8:	4b45      	ldr	r3, [pc, #276]	; (ab00 <configure_port_pins+0x224>)
    a9ea:	4798      	blx	r3
	port_pin_set_output_level_EX(PIN_ENBL_FAN8,    LOW, enableManualOverride);	
    a9ec:	4b43      	ldr	r3, [pc, #268]	; (aafc <configure_port_pins+0x220>)
    a9ee:	781b      	ldrb	r3, [r3, #0]
    a9f0:	2006      	movs	r0, #6
    a9f2:	2100      	movs	r1, #0
    a9f4:	1c1a      	adds	r2, r3, #0
    a9f6:	4b42      	ldr	r3, [pc, #264]	; (ab00 <configure_port_pins+0x224>)
    a9f8:	4798      	blx	r3
	port_pin_set_output_level_EX(PIN_ENBL_LAMP,    LOW, enableManualOverride);
    a9fa:	4b40      	ldr	r3, [pc, #256]	; (aafc <configure_port_pins+0x220>)
    a9fc:	781b      	ldrb	r3, [r3, #0]
    a9fe:	202a      	movs	r0, #42	; 0x2a
    aa00:	2100      	movs	r1, #0
    aa02:	1c1a      	adds	r2, r3, #0
    aa04:	4b3e      	ldr	r3, [pc, #248]	; (ab00 <configure_port_pins+0x224>)
    aa06:	4798      	blx	r3
	//port_pin_set_output_level_EX(PIN_ENBL_VBATMON, LOW, enableManualOverride);
	port_pin_set_output_level_EX(PIN_ENBL_OUTB_COLD,  LOW, enableManualOverride);
    aa08:	4b3c      	ldr	r3, [pc, #240]	; (aafc <configure_port_pins+0x220>)
    aa0a:	781b      	ldrb	r3, [r3, #0]
    aa0c:	2008      	movs	r0, #8
    aa0e:	2100      	movs	r1, #0
    aa10:	1c1a      	adds	r2, r3, #0
    aa12:	4b3b      	ldr	r3, [pc, #236]	; (ab00 <configure_port_pins+0x224>)
    aa14:	4798      	blx	r3
	port_pin_set_output_level_EX(PIN_ENBL_OUTB_HOT ,  LOW, enableManualOverride);	
    aa16:	4b39      	ldr	r3, [pc, #228]	; (aafc <configure_port_pins+0x220>)
    aa18:	781b      	ldrb	r3, [r3, #0]
    aa1a:	2004      	movs	r0, #4
    aa1c:	2100      	movs	r1, #0
    aa1e:	1c1a      	adds	r2, r3, #0
    aa20:	4b37      	ldr	r3, [pc, #220]	; (ab00 <configure_port_pins+0x224>)
    aa22:	4798      	blx	r3
	
	// outputs, internal pull-ups disabled
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    aa24:	1d3b      	adds	r3, r7, #4
    aa26:	2201      	movs	r2, #1
    aa28:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_NONE;
    aa2a:	1d3b      	adds	r3, r7, #4
    aa2c:	2200      	movs	r2, #0
    aa2e:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PIN_ENBL_BUCK1,   &config_port_pin);
    aa30:	1d3b      	adds	r3, r7, #4
    aa32:	202d      	movs	r0, #45	; 0x2d
    aa34:	1c19      	adds	r1, r3, #0
    aa36:	4b30      	ldr	r3, [pc, #192]	; (aaf8 <configure_port_pins+0x21c>)
    aa38:	4798      	blx	r3
	port_pin_set_config(PIN_ENBL_OUTPUT1, &config_port_pin);
    aa3a:	1d3b      	adds	r3, r7, #4
    aa3c:	202e      	movs	r0, #46	; 0x2e
    aa3e:	1c19      	adds	r1, r3, #0
    aa40:	4b2d      	ldr	r3, [pc, #180]	; (aaf8 <configure_port_pins+0x21c>)
    aa42:	4798      	blx	r3
	port_pin_set_config(PIN_ENBL_OUTPUT2, &config_port_pin);
    aa44:	1d3b      	adds	r3, r7, #4
    aa46:	200f      	movs	r0, #15
    aa48:	1c19      	adds	r1, r3, #0
    aa4a:	4b2b      	ldr	r3, [pc, #172]	; (aaf8 <configure_port_pins+0x21c>)
    aa4c:	4798      	blx	r3
	port_pin_set_config(PIN_ENBL_OUTA_COLD, &config_port_pin);
    aa4e:	1d3b      	adds	r3, r7, #4
    aa50:	203f      	movs	r0, #63	; 0x3f
    aa52:	1c19      	adds	r1, r3, #0
    aa54:	4b28      	ldr	r3, [pc, #160]	; (aaf8 <configure_port_pins+0x21c>)
    aa56:	4798      	blx	r3
	port_pin_set_config(PIN_ENBL_OUTA_HOT , &config_port_pin);	
    aa58:	1d3b      	adds	r3, r7, #4
    aa5a:	2023      	movs	r0, #35	; 0x23
    aa5c:	1c19      	adds	r1, r3, #0
    aa5e:	4b26      	ldr	r3, [pc, #152]	; (aaf8 <configure_port_pins+0x21c>)
    aa60:	4798      	blx	r3
	port_pin_set_config(PIN_LED_0_PIN,    &config_port_pin);
    aa62:	1d3b      	adds	r3, r7, #4
    aa64:	200e      	movs	r0, #14
    aa66:	1c19      	adds	r1, r3, #0
    aa68:	4b23      	ldr	r3, [pc, #140]	; (aaf8 <configure_port_pins+0x21c>)
    aa6a:	4798      	blx	r3
	port_pin_set_config(PIN_RDY_N,		  &config_port_pin);
    aa6c:	1d3b      	adds	r3, r7, #4
    aa6e:	201c      	movs	r0, #28
    aa70:	1c19      	adds	r1, r3, #0
    aa72:	4b21      	ldr	r3, [pc, #132]	; (aaf8 <configure_port_pins+0x21c>)
    aa74:	4798      	blx	r3
	port_pin_set_config(PIN_ENBL_LOAD2,   &config_port_pin);
    aa76:	1d3b      	adds	r3, r7, #4
    aa78:	2012      	movs	r0, #18
    aa7a:	1c19      	adds	r1, r3, #0
    aa7c:	4b1e      	ldr	r3, [pc, #120]	; (aaf8 <configure_port_pins+0x21c>)
    aa7e:	4798      	blx	r3
	port_pin_set_config(PIN_ENBL_FAN1,    &config_port_pin);
    aa80:	1d3b      	adds	r3, r7, #4
    aa82:	2015      	movs	r0, #21
    aa84:	1c19      	adds	r1, r3, #0
    aa86:	4b1c      	ldr	r3, [pc, #112]	; (aaf8 <configure_port_pins+0x21c>)
    aa88:	4798      	blx	r3
	port_pin_set_config(PIN_ENBL_FAN2,    &config_port_pin);
    aa8a:	1d3b      	adds	r3, r7, #4
    aa8c:	2014      	movs	r0, #20
    aa8e:	1c19      	adds	r1, r3, #0
    aa90:	4b19      	ldr	r3, [pc, #100]	; (aaf8 <configure_port_pins+0x21c>)
    aa92:	4798      	blx	r3
	port_pin_set_config(PIN_ENBL_FAN3,    &config_port_pin);
    aa94:	1d3b      	adds	r3, r7, #4
    aa96:	2013      	movs	r0, #19
    aa98:	1c19      	adds	r1, r3, #0
    aa9a:	4b17      	ldr	r3, [pc, #92]	; (aaf8 <configure_port_pins+0x21c>)
    aa9c:	4798      	blx	r3
	port_pin_set_config(PIN_ENBL_FAN4,    &config_port_pin);
    aa9e:	1d3b      	adds	r3, r7, #4
    aaa0:	202c      	movs	r0, #44	; 0x2c
    aaa2:	1c19      	adds	r1, r3, #0
    aaa4:	4b14      	ldr	r3, [pc, #80]	; (aaf8 <configure_port_pins+0x21c>)
    aaa6:	4798      	blx	r3
	port_pin_set_config(PIN_ENBL_FAN5,    &config_port_pin);
    aaa8:	1d3b      	adds	r3, r7, #4
    aaaa:	2017      	movs	r0, #23
    aaac:	1c19      	adds	r1, r3, #0
    aaae:	4b12      	ldr	r3, [pc, #72]	; (aaf8 <configure_port_pins+0x21c>)
    aab0:	4798      	blx	r3
	port_pin_set_config(PIN_ENBL_FAN6,    &config_port_pin);
    aab2:	1d3b      	adds	r3, r7, #4
    aab4:	2016      	movs	r0, #22
    aab6:	1c19      	adds	r1, r3, #0
    aab8:	4b0f      	ldr	r3, [pc, #60]	; (aaf8 <configure_port_pins+0x21c>)
    aaba:	4798      	blx	r3
	port_pin_set_config(PIN_ENBL_FAN7,    &config_port_pin);
    aabc:	1d3b      	adds	r3, r7, #4
    aabe:	2007      	movs	r0, #7
    aac0:	1c19      	adds	r1, r3, #0
    aac2:	4b0d      	ldr	r3, [pc, #52]	; (aaf8 <configure_port_pins+0x21c>)
    aac4:	4798      	blx	r3
	port_pin_set_config(PIN_ENBL_FAN8,    &config_port_pin);
    aac6:	1d3b      	adds	r3, r7, #4
    aac8:	2006      	movs	r0, #6
    aaca:	1c19      	adds	r1, r3, #0
    aacc:	4b0a      	ldr	r3, [pc, #40]	; (aaf8 <configure_port_pins+0x21c>)
    aace:	4798      	blx	r3
	port_pin_set_config(PIN_ENBL_LAMP,    &config_port_pin);	
    aad0:	1d3b      	adds	r3, r7, #4
    aad2:	202a      	movs	r0, #42	; 0x2a
    aad4:	1c19      	adds	r1, r3, #0
    aad6:	4b08      	ldr	r3, [pc, #32]	; (aaf8 <configure_port_pins+0x21c>)
    aad8:	4798      	blx	r3
	//port_pin_set_config(PIN_ENBL_VBATMON, &config_port_pin);
	port_pin_set_config(PIN_ENBL_OUTB_COLD,  &config_port_pin);
    aada:	1d3b      	adds	r3, r7, #4
    aadc:	2008      	movs	r0, #8
    aade:	1c19      	adds	r1, r3, #0
    aae0:	4b05      	ldr	r3, [pc, #20]	; (aaf8 <configure_port_pins+0x21c>)
    aae2:	4798      	blx	r3
	port_pin_set_config(PIN_ENBL_OUTB_HOT ,  &config_port_pin);	
    aae4:	1d3b      	adds	r3, r7, #4
    aae6:	2004      	movs	r0, #4
    aae8:	1c19      	adds	r1, r3, #0
    aaea:	4b03      	ldr	r3, [pc, #12]	; (aaf8 <configure_port_pins+0x21c>)
    aaec:	4798      	blx	r3
}
    aaee:	46bd      	mov	sp, r7
    aaf0:	b002      	add	sp, #8
    aaf2:	bd80      	pop	{r7, pc}
    aaf4:	0000a7c1 	.word	0x0000a7c1
    aaf8:	00012345 	.word	0x00012345
    aafc:	20000372 	.word	0x20000372
    ab00:	0000a891 	.word	0x0000a891

0000ab04 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    ab04:	b580      	push	{r7, lr}
    ab06:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    ab08:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    ab0c:	4b02      	ldr	r3, [pc, #8]	; (ab18 <NVIC_SystemReset+0x14>)
    ab0e:	4a03      	ldr	r2, [pc, #12]	; (ab1c <NVIC_SystemReset+0x18>)
    ab10:	60da      	str	r2, [r3, #12]
    ab12:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    ab16:	e7fe      	b.n	ab16 <NVIC_SystemReset+0x12>
    ab18:	e000ed00 	.word	0xe000ed00
    ab1c:	05fa0004 	.word	0x05fa0004

0000ab20 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
    ab20:	b580      	push	{r7, lr}
    ab22:	af00      	add	r7, sp, #0
	return test_case_ptr;
    ab24:	4b02      	ldr	r3, [pc, #8]	; (ab30 <test_get_case+0x10>)
    ab26:	681b      	ldr	r3, [r3, #0]
}
    ab28:	1c18      	adds	r0, r3, #0
    ab2a:	46bd      	mov	sp, r7
    ab2c:	bd80      	pop	{r7, pc}
    ab2e:	46c0      	nop			; (mov r8, r8)
    ab30:	2000041c 	.word	0x2000041c

0000ab34 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    ab34:	b590      	push	{r4, r7, lr}
    ab36:	b087      	sub	sp, #28
    ab38:	af02      	add	r7, sp, #8
    ab3a:	1c02      	adds	r2, r0, #0
    ab3c:	1dfb      	adds	r3, r7, #7
    ab3e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    ab40:	1c3b      	adds	r3, r7, #0
    ab42:	330f      	adds	r3, #15
    ab44:	1dfa      	adds	r2, r7, #7
    ab46:	7812      	ldrb	r2, [r2, #0]
    ab48:	09d2      	lsrs	r2, r2, #7
    ab4a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    ab4c:	1c3b      	adds	r3, r7, #0
    ab4e:	330e      	adds	r3, #14
    ab50:	1dfa      	adds	r2, r7, #7
    ab52:	7812      	ldrb	r2, [r2, #0]
    ab54:	0952      	lsrs	r2, r2, #5
    ab56:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    ab58:	4b1b      	ldr	r3, [pc, #108]	; (abc8 <system_pinmux_get_group_from_gpio_pin+0x94>)
    ab5a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    ab5c:	1c3b      	adds	r3, r7, #0
    ab5e:	330f      	adds	r3, #15
    ab60:	781b      	ldrb	r3, [r3, #0]
    ab62:	2b00      	cmp	r3, #0
    ab64:	d10e      	bne.n	ab84 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    ab66:	1c3b      	adds	r3, r7, #0
    ab68:	330f      	adds	r3, #15
    ab6a:	781b      	ldrb	r3, [r3, #0]
    ab6c:	009b      	lsls	r3, r3, #2
    ab6e:	2210      	movs	r2, #16
    ab70:	19d2      	adds	r2, r2, r7
    ab72:	18d3      	adds	r3, r2, r3
    ab74:	3b08      	subs	r3, #8
    ab76:	681a      	ldr	r2, [r3, #0]
    ab78:	1c3b      	adds	r3, r7, #0
    ab7a:	330e      	adds	r3, #14
    ab7c:	781b      	ldrb	r3, [r3, #0]
    ab7e:	01db      	lsls	r3, r3, #7
    ab80:	18d3      	adds	r3, r2, r3
    ab82:	e01c      	b.n	abbe <system_pinmux_get_group_from_gpio_pin+0x8a>
	} else {
		Assert(false);
    ab84:	4b11      	ldr	r3, [pc, #68]	; (abcc <system_pinmux_get_group_from_gpio_pin+0x98>)
    ab86:	4798      	blx	r3
    ab88:	1c03      	adds	r3, r0, #0
    ab8a:	2b00      	cmp	r3, #0
    ab8c:	d00f      	beq.n	abae <system_pinmux_get_group_from_gpio_pin+0x7a>
    ab8e:	4b0f      	ldr	r3, [pc, #60]	; (abcc <system_pinmux_get_group_from_gpio_pin+0x98>)
    ab90:	4798      	blx	r3
    ab92:	1c01      	adds	r1, r0, #0
    ab94:	4a0e      	ldr	r2, [pc, #56]	; (abd0 <system_pinmux_get_group_from_gpio_pin+0x9c>)
    ab96:	2368      	movs	r3, #104	; 0x68
    ab98:	33ff      	adds	r3, #255	; 0xff
    ab9a:	480e      	ldr	r0, [pc, #56]	; (abd4 <system_pinmux_get_group_from_gpio_pin+0xa0>)
    ab9c:	9000      	str	r0, [sp, #0]
    ab9e:	480e      	ldr	r0, [pc, #56]	; (abd8 <system_pinmux_get_group_from_gpio_pin+0xa4>)
    aba0:	9001      	str	r0, [sp, #4]
    aba2:	1c08      	adds	r0, r1, #0
    aba4:	2101      	movs	r1, #1
    aba6:	4c0d      	ldr	r4, [pc, #52]	; (abdc <system_pinmux_get_group_from_gpio_pin+0xa8>)
    aba8:	47a0      	blx	r4
		return NULL;
    abaa:	2300      	movs	r3, #0
    abac:	e007      	b.n	abbe <system_pinmux_get_group_from_gpio_pin+0x8a>
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
    abae:	480c      	ldr	r0, [pc, #48]	; (abe0 <system_pinmux_get_group_from_gpio_pin+0xac>)
    abb0:	4909      	ldr	r1, [pc, #36]	; (abd8 <system_pinmux_get_group_from_gpio_pin+0xa4>)
    abb2:	4a07      	ldr	r2, [pc, #28]	; (abd0 <system_pinmux_get_group_from_gpio_pin+0x9c>)
    abb4:	2368      	movs	r3, #104	; 0x68
    abb6:	33ff      	adds	r3, #255	; 0xff
    abb8:	4c0a      	ldr	r4, [pc, #40]	; (abe4 <system_pinmux_get_group_from_gpio_pin+0xb0>)
    abba:	47a0      	blx	r4
    abbc:	e7fe      	b.n	abbc <system_pinmux_get_group_from_gpio_pin+0x88>
		return NULL;
	}
}
    abbe:	1c18      	adds	r0, r3, #0
    abc0:	46bd      	mov	sp, r7
    abc2:	b005      	add	sp, #20
    abc4:	bd90      	pop	{r4, r7, pc}
    abc6:	46c0      	nop			; (mov r8, r8)
    abc8:	41004400 	.word	0x41004400
    abcc:	0000ab21 	.word	0x0000ab21
    abd0:	00024c28 	.word	0x00024c28
    abd4:	00024c58 	.word	0x00024c58
    abd8:	00024c70 	.word	0x00024c70
    abdc:	000106e9 	.word	0x000106e9
    abe0:	00024c78 	.word	0x00024c78
    abe4:	0001b62d 	.word	0x0001b62d

0000abe8 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32kHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    abe8:	b580      	push	{r7, lr}
    abea:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    abec:	4b01      	ldr	r3, [pc, #4]	; (abf4 <system_reset+0xc>)
    abee:	4798      	blx	r3
}
    abf0:	46bd      	mov	sp, r7
    abf2:	bd80      	pop	{r7, pc}
    abf4:	0000ab05 	.word	0x0000ab05

0000abf8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    abf8:	b580      	push	{r7, lr}
    abfa:	b082      	sub	sp, #8
    abfc:	af00      	add	r7, sp, #0
    abfe:	1c02      	adds	r2, r0, #0
    ac00:	1dfb      	adds	r3, r7, #7
    ac02:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    ac04:	1dfb      	adds	r3, r7, #7
    ac06:	781b      	ldrb	r3, [r3, #0]
    ac08:	1c18      	adds	r0, r3, #0
    ac0a:	4b03      	ldr	r3, [pc, #12]	; (ac18 <port_get_group_from_gpio_pin+0x20>)
    ac0c:	4798      	blx	r3
    ac0e:	1c03      	adds	r3, r0, #0
}
    ac10:	1c18      	adds	r0, r3, #0
    ac12:	46bd      	mov	sp, r7
    ac14:	b002      	add	sp, #8
    ac16:	bd80      	pop	{r7, pc}
    ac18:	0000ab35 	.word	0x0000ab35

0000ac1c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    ac1c:	b580      	push	{r7, lr}
    ac1e:	b084      	sub	sp, #16
    ac20:	af00      	add	r7, sp, #0
    ac22:	1c0a      	adds	r2, r1, #0
    ac24:	1dfb      	adds	r3, r7, #7
    ac26:	1c01      	adds	r1, r0, #0
    ac28:	7019      	strb	r1, [r3, #0]
    ac2a:	1dbb      	adds	r3, r7, #6
    ac2c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    ac2e:	1dfb      	adds	r3, r7, #7
    ac30:	781b      	ldrb	r3, [r3, #0]
    ac32:	1c18      	adds	r0, r3, #0
    ac34:	4b0d      	ldr	r3, [pc, #52]	; (ac6c <port_pin_set_output_level+0x50>)
    ac36:	4798      	blx	r3
    ac38:	1c03      	adds	r3, r0, #0
    ac3a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    ac3c:	1dfb      	adds	r3, r7, #7
    ac3e:	781a      	ldrb	r2, [r3, #0]
    ac40:	231f      	movs	r3, #31
    ac42:	4013      	ands	r3, r2
    ac44:	2201      	movs	r2, #1
    ac46:	1c11      	adds	r1, r2, #0
    ac48:	4099      	lsls	r1, r3
    ac4a:	1c0b      	adds	r3, r1, #0
    ac4c:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    ac4e:	1dbb      	adds	r3, r7, #6
    ac50:	781b      	ldrb	r3, [r3, #0]
    ac52:	2b00      	cmp	r3, #0
    ac54:	d003      	beq.n	ac5e <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    ac56:	68fb      	ldr	r3, [r7, #12]
    ac58:	68ba      	ldr	r2, [r7, #8]
    ac5a:	619a      	str	r2, [r3, #24]
    ac5c:	e002      	b.n	ac64 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    ac5e:	68fb      	ldr	r3, [r7, #12]
    ac60:	68ba      	ldr	r2, [r7, #8]
    ac62:	615a      	str	r2, [r3, #20]
	}
}
    ac64:	46bd      	mov	sp, r7
    ac66:	b004      	add	sp, #16
    ac68:	bd80      	pop	{r7, pc}
    ac6a:	46c0      	nop			; (mov r8, r8)
    ac6c:	0000abf9 	.word	0x0000abf9

0000ac70 <port_pin_set_output_level_EX>:
	float (*fControl[32])(float, bool, int);
	
	static inline bool port_pin_set_output_level_EX(
	const uint8_t gpio_pin,
	const int nLevel, const bool ManualOverride)
	{
    ac70:	b580      	push	{r7, lr}
    ac72:	b084      	sub	sp, #16
    ac74:	af00      	add	r7, sp, #0
    ac76:	6039      	str	r1, [r7, #0]
    ac78:	1dfb      	adds	r3, r7, #7
    ac7a:	1c01      	adds	r1, r0, #0
    ac7c:	7019      	strb	r1, [r3, #0]
    ac7e:	1dbb      	adds	r3, r7, #6
    ac80:	701a      	strb	r2, [r3, #0]
			  break;
		  }
*/			
		}
	
		if (!ManualOverride)
    ac82:	1dbb      	adds	r3, r7, #6
    ac84:	781b      	ldrb	r3, [r3, #0]
    ac86:	2201      	movs	r2, #1
    ac88:	4053      	eors	r3, r2
    ac8a:	b2db      	uxtb	r3, r3
    ac8c:	2b00      	cmp	r3, #0
    ac8e:	d00e      	beq.n	acae <port_pin_set_output_level_EX+0x3e>
		{
		  bool bLevel = (nLevel != 0);
    ac90:	1c3b      	adds	r3, r7, #0
    ac92:	330f      	adds	r3, #15
    ac94:	683a      	ldr	r2, [r7, #0]
    ac96:	1e51      	subs	r1, r2, #1
    ac98:	418a      	sbcs	r2, r1
    ac9a:	701a      	strb	r2, [r3, #0]
		  port_pin_set_output_level(gpio_pin, bLevel);
    ac9c:	1dfb      	adds	r3, r7, #7
    ac9e:	781a      	ldrb	r2, [r3, #0]
    aca0:	1c3b      	adds	r3, r7, #0
    aca2:	330f      	adds	r3, #15
    aca4:	781b      	ldrb	r3, [r3, #0]
    aca6:	1c10      	adds	r0, r2, #0
    aca8:	1c19      	adds	r1, r3, #0
    acaa:	4b03      	ldr	r3, [pc, #12]	; (acb8 <port_pin_set_output_level_EX+0x48>)
    acac:	4798      	blx	r3
		}
		
		return true;
    acae:	2301      	movs	r3, #1
	}
    acb0:	1c18      	adds	r0, r3, #0
    acb2:	46bd      	mov	sp, r7
    acb4:	b004      	add	sp, #16
    acb6:	bd80      	pop	{r7, pc}
    acb8:	0000ac1d 	.word	0x0000ac1d

0000acbc <paramLookup>:

/************************************************************************/
/* Functions                                                            */
/************************************************************************/
struct _varInfo paramLookup(uint8_t idx)
{
    acbc:	b580      	push	{r7, lr}
    acbe:	b084      	sub	sp, #16
    acc0:	af00      	add	r7, sp, #0
    acc2:	6078      	str	r0, [r7, #4]
    acc4:	1c0a      	adds	r2, r1, #0
    acc6:	1cfb      	adds	r3, r7, #3
    acc8:	701a      	strb	r2, [r3, #0]
	struct _varInfo varInfo;
	
	varInfo.nonvolatileFlag = false;
    acca:	1c3b      	adds	r3, r7, #0
    accc:	3308      	adds	r3, #8
    acce:	2200      	movs	r2, #0
    acd0:	715a      	strb	r2, [r3, #5]
	
	doorOpenLifetimeCnt_hi = (doorOpenLifetimeCnt & 0xffff0000)>>16;
    acd2:	4bfb      	ldr	r3, [pc, #1004]	; (b0c0 <paramLookup+0x404>)
    acd4:	681b      	ldr	r3, [r3, #0]
    acd6:	0c1b      	lsrs	r3, r3, #16
    acd8:	b29a      	uxth	r2, r3
    acda:	4bfa      	ldr	r3, [pc, #1000]	; (b0c4 <paramLookup+0x408>)
    acdc:	801a      	strh	r2, [r3, #0]
	doorOpenLifetimeCnt_lo = (doorOpenLifetimeCnt & 0x0000ffff);
    acde:	4bf8      	ldr	r3, [pc, #992]	; (b0c0 <paramLookup+0x404>)
    ace0:	681b      	ldr	r3, [r3, #0]
    ace2:	b29a      	uxth	r2, r3
    ace4:	4bf8      	ldr	r3, [pc, #992]	; (b0c8 <paramLookup+0x40c>)
    ace6:	801a      	strh	r2, [r3, #0]
	
	switch (idx)
    ace8:	1cfb      	adds	r3, r7, #3
    acea:	781b      	ldrb	r3, [r3, #0]
    acec:	2bb6      	cmp	r3, #182	; 0xb6
    acee:	d901      	bls.n	acf4 <paramLookup+0x38>
    acf0:	f000 fdea 	bl	b8c8 <paramLookup+0xc0c>
    acf4:	009a      	lsls	r2, r3, #2
    acf6:	4bf5      	ldr	r3, [pc, #980]	; (b0cc <paramLookup+0x410>)
    acf8:	18d3      	adds	r3, r2, r3
    acfa:	681b      	ldr	r3, [r3, #0]
    acfc:	469f      	mov	pc, r3
	{		
		case 1:		varInfo.pAddr = &chamber1.setpoint;				varInfo.size = sizeof(chamber1.setpoint);				break;
    acfe:	1c3b      	adds	r3, r7, #0
    ad00:	3308      	adds	r3, #8
    ad02:	4af3      	ldr	r2, [pc, #972]	; (b0d0 <paramLookup+0x414>)
    ad04:	601a      	str	r2, [r3, #0]
    ad06:	1c3b      	adds	r3, r7, #0
    ad08:	3308      	adds	r3, #8
    ad0a:	2204      	movs	r2, #4
    ad0c:	711a      	strb	r2, [r3, #4]
    ad0e:	f000 fde4 	bl	b8da <paramLookup+0xc1e>
		case 2:		varInfo.pAddr = &chamber2.chamberOffset;		varInfo.size = sizeof(chamber2.chamberOffset);			varInfo.nonvolatileFlag = true;		break;
    ad12:	1c3b      	adds	r3, r7, #0
    ad14:	3308      	adds	r3, #8
    ad16:	4aef      	ldr	r2, [pc, #956]	; (b0d4 <paramLookup+0x418>)
    ad18:	601a      	str	r2, [r3, #0]
    ad1a:	1c3b      	adds	r3, r7, #0
    ad1c:	3308      	adds	r3, #8
    ad1e:	2204      	movs	r2, #4
    ad20:	711a      	strb	r2, [r3, #4]
    ad22:	1c3b      	adds	r3, r7, #0
    ad24:	3308      	adds	r3, #8
    ad26:	2201      	movs	r2, #1
    ad28:	715a      	strb	r2, [r3, #5]
    ad2a:	f000 fdd6 	bl	b8da <paramLookup+0xc1e>
		case 3:		varInfo.pAddr = &chamber1.glycolOffset;			varInfo.size = sizeof(chamber1.glycolOffset);			varInfo.nonvolatileFlag = true;		break;	
    ad2e:	1c3b      	adds	r3, r7, #0
    ad30:	3308      	adds	r3, #8
    ad32:	4ae9      	ldr	r2, [pc, #932]	; (b0d8 <paramLookup+0x41c>)
    ad34:	601a      	str	r2, [r3, #0]
    ad36:	1c3b      	adds	r3, r7, #0
    ad38:	3308      	adds	r3, #8
    ad3a:	2204      	movs	r2, #4
    ad3c:	711a      	strb	r2, [r3, #4]
    ad3e:	1c3b      	adds	r3, r7, #0
    ad40:	3308      	adds	r3, #8
    ad42:	2201      	movs	r2, #1
    ad44:	715a      	strb	r2, [r3, #5]
    ad46:	f000 fdc8 	bl	b8da <paramLookup+0xc1e>
		case 4:		varInfo.pAddr = &chamber1.mode_state;			varInfo.size = sizeof(chamber1.mode_state);				break;
    ad4a:	1c3b      	adds	r3, r7, #0
    ad4c:	3308      	adds	r3, #8
    ad4e:	4ae3      	ldr	r2, [pc, #908]	; (b0dc <paramLookup+0x420>)
    ad50:	601a      	str	r2, [r3, #0]
    ad52:	1c3b      	adds	r3, r7, #0
    ad54:	3308      	adds	r3, #8
    ad56:	2201      	movs	r2, #1
    ad58:	711a      	strb	r2, [r3, #4]
    ad5a:	f000 fdbe 	bl	b8da <paramLookup+0xc1e>
		case 5:		varInfo.pAddr = &controlTemperature;			varInfo.size = sizeof(controlTemperature);				break;			
    ad5e:	1c3b      	adds	r3, r7, #0
    ad60:	3308      	adds	r3, #8
    ad62:	4adf      	ldr	r2, [pc, #892]	; (b0e0 <paramLookup+0x424>)
    ad64:	601a      	str	r2, [r3, #0]
    ad66:	1c3b      	adds	r3, r7, #0
    ad68:	3308      	adds	r3, #8
    ad6a:	2204      	movs	r2, #4
    ad6c:	711a      	strb	r2, [r3, #4]
    ad6e:	f000 fdb4 	bl	b8da <paramLookup+0xc1e>
		case 6:		varInfo.pAddr = &chamber1.rejectTemp;			varInfo.size = sizeof(chamber1.rejectTemp);				break;			
    ad72:	1c3b      	adds	r3, r7, #0
    ad74:	3308      	adds	r3, #8
    ad76:	4adb      	ldr	r2, [pc, #876]	; (b0e4 <paramLookup+0x428>)
    ad78:	601a      	str	r2, [r3, #0]
    ad7a:	1c3b      	adds	r3, r7, #0
    ad7c:	3308      	adds	r3, #8
    ad7e:	2204      	movs	r2, #4
    ad80:	711a      	strb	r2, [r3, #4]
    ad82:	f000 fdaa 	bl	b8da <paramLookup+0xc1e>
		case 7:		varInfo.pAddr = &chamber1.VmaxCOP;				varInfo.size = sizeof(chamber1.VmaxCOP);				break;			
    ad86:	1c3b      	adds	r3, r7, #0
    ad88:	3308      	adds	r3, #8
    ad8a:	4ad7      	ldr	r2, [pc, #860]	; (b0e8 <paramLookup+0x42c>)
    ad8c:	601a      	str	r2, [r3, #0]
    ad8e:	1c3b      	adds	r3, r7, #0
    ad90:	3308      	adds	r3, #8
    ad92:	2204      	movs	r2, #4
    ad94:	711a      	strb	r2, [r3, #4]
    ad96:	f000 fda0 	bl	b8da <paramLookup+0xc1e>
		case 8:		varInfo.pAddr = &chamber1.Vvarq;				varInfo.size = sizeof(chamber1.Vvarq);					break;			
    ad9a:	1c3b      	adds	r3, r7, #0
    ad9c:	3308      	adds	r3, #8
    ad9e:	4ad3      	ldr	r2, [pc, #844]	; (b0ec <paramLookup+0x430>)
    ada0:	601a      	str	r2, [r3, #0]
    ada2:	1c3b      	adds	r3, r7, #0
    ada4:	3308      	adds	r3, #8
    ada6:	2204      	movs	r2, #4
    ada8:	711a      	strb	r2, [r3, #4]
    adaa:	f000 fd96 	bl	b8da <paramLookup+0xc1e>
		case 9:		varInfo.pAddr = &chamber1.rejectLimit;			varInfo.size = sizeof(chamber1.rejectLimit);			break;			
    adae:	1c3b      	adds	r3, r7, #0
    adb0:	3308      	adds	r3, #8
    adb2:	4acf      	ldr	r2, [pc, #828]	; (b0f0 <paramLookup+0x434>)
    adb4:	601a      	str	r2, [r3, #0]
    adb6:	1c3b      	adds	r3, r7, #0
    adb8:	3308      	adds	r3, #8
    adba:	2204      	movs	r2, #4
    adbc:	711a      	strb	r2, [r3, #4]
    adbe:	f000 fd8c 	bl	b8da <paramLookup+0xc1e>
		case 10:	varInfo.pAddr = &chamber1.rejectLimitCritical;	varInfo.size = sizeof(chamber1.rejectLimitCritical);	break;			
    adc2:	1c3b      	adds	r3, r7, #0
    adc4:	3308      	adds	r3, #8
    adc6:	4acb      	ldr	r2, [pc, #812]	; (b0f4 <paramLookup+0x438>)
    adc8:	601a      	str	r2, [r3, #0]
    adca:	1c3b      	adds	r3, r7, #0
    adcc:	3308      	adds	r3, #8
    adce:	2204      	movs	r2, #4
    add0:	711a      	strb	r2, [r3, #4]
    add2:	f000 fd82 	bl	b8da <paramLookup+0xc1e>
		case 11:	varInfo.pAddr = &chamber1.rejectLowLimit;		varInfo.size = sizeof(chamber1.rejectLowLimit);			break;			
    add6:	1c3b      	adds	r3, r7, #0
    add8:	3308      	adds	r3, #8
    adda:	4ac7      	ldr	r2, [pc, #796]	; (b0f8 <paramLookup+0x43c>)
    addc:	601a      	str	r2, [r3, #0]
    adde:	1c3b      	adds	r3, r7, #0
    ade0:	3308      	adds	r3, #8
    ade2:	2204      	movs	r2, #4
    ade4:	711a      	strb	r2, [r3, #4]
    ade6:	f000 fd78 	bl	b8da <paramLookup+0xc1e>
		case 12:	varInfo.pAddr = &chamber1.deadband;				varInfo.size = sizeof(chamber1.deadband);				break;			
    adea:	1c3b      	adds	r3, r7, #0
    adec:	3308      	adds	r3, #8
    adee:	4ac3      	ldr	r2, [pc, #780]	; (b0fc <paramLookup+0x440>)
    adf0:	601a      	str	r2, [r3, #0]
    adf2:	1c3b      	adds	r3, r7, #0
    adf4:	3308      	adds	r3, #8
    adf6:	2204      	movs	r2, #4
    adf8:	711a      	strb	r2, [r3, #4]
    adfa:	f000 fd6e 	bl	b8da <paramLookup+0xc1e>
		case 13:	varInfo.pAddr = &chamber1.deadbandLow;			varInfo.size = sizeof(chamber1.deadbandLow);			break;			
    adfe:	1c3b      	adds	r3, r7, #0
    ae00:	3308      	adds	r3, #8
    ae02:	4abf      	ldr	r2, [pc, #764]	; (b100 <paramLookup+0x444>)
    ae04:	601a      	str	r2, [r3, #0]
    ae06:	1c3b      	adds	r3, r7, #0
    ae08:	3308      	adds	r3, #8
    ae0a:	2204      	movs	r2, #4
    ae0c:	711a      	strb	r2, [r3, #4]
    ae0e:	f000 fd64 	bl	b8da <paramLookup+0xc1e>
		case 14:	varInfo.pAddr = &chamber1.deactivateAutoControl;varInfo.size = sizeof(chamber1.deactivateAutoControl);	break;			
    ae12:	1c3b      	adds	r3, r7, #0
    ae14:	3308      	adds	r3, #8
    ae16:	4abb      	ldr	r2, [pc, #748]	; (b104 <paramLookup+0x448>)
    ae18:	601a      	str	r2, [r3, #0]
    ae1a:	1c3b      	adds	r3, r7, #0
    ae1c:	3308      	adds	r3, #8
    ae1e:	2201      	movs	r2, #1
    ae20:	711a      	strb	r2, [r3, #4]
    ae22:	f000 fd5a 	bl	b8da <paramLookup+0xc1e>
		case 15:	varInfo.pAddr = &chamber1.glycolTemp;			varInfo.size = sizeof(chamber1.glycolTemp);				break;						
    ae26:	1c3b      	adds	r3, r7, #0
    ae28:	3308      	adds	r3, #8
    ae2a:	4ab7      	ldr	r2, [pc, #732]	; (b108 <paramLookup+0x44c>)
    ae2c:	601a      	str	r2, [r3, #0]
    ae2e:	1c3b      	adds	r3, r7, #0
    ae30:	3308      	adds	r3, #8
    ae32:	2204      	movs	r2, #4
    ae34:	711a      	strb	r2, [r3, #4]
    ae36:	f000 fd50 	bl	b8da <paramLookup+0xc1e>
		case 16:	varInfo.pAddr = &pidLoop1.kp_highq;				varInfo.size = sizeof(pidLoop1.kp_highq);				break;
    ae3a:	1c3b      	adds	r3, r7, #0
    ae3c:	3308      	adds	r3, #8
    ae3e:	4ab3      	ldr	r2, [pc, #716]	; (b10c <paramLookup+0x450>)
    ae40:	601a      	str	r2, [r3, #0]
    ae42:	1c3b      	adds	r3, r7, #0
    ae44:	3308      	adds	r3, #8
    ae46:	2204      	movs	r2, #4
    ae48:	711a      	strb	r2, [r3, #4]
    ae4a:	f000 fd46 	bl	b8da <paramLookup+0xc1e>
		case 17:	varInfo.pAddr = &pidLoop1.ki_highq;				varInfo.size = sizeof(pidLoop1.ki_highq);				break;
    ae4e:	1c3b      	adds	r3, r7, #0
    ae50:	3308      	adds	r3, #8
    ae52:	4aaf      	ldr	r2, [pc, #700]	; (b110 <paramLookup+0x454>)
    ae54:	601a      	str	r2, [r3, #0]
    ae56:	1c3b      	adds	r3, r7, #0
    ae58:	3308      	adds	r3, #8
    ae5a:	2204      	movs	r2, #4
    ae5c:	711a      	strb	r2, [r3, #4]
    ae5e:	f000 fd3c 	bl	b8da <paramLookup+0xc1e>
		case 18:	varInfo.pAddr = &pidLoop1.kd_highq;				varInfo.size = sizeof(pidLoop1.kd_highq);				break;		
    ae62:	1c3b      	adds	r3, r7, #0
    ae64:	3308      	adds	r3, #8
    ae66:	4aab      	ldr	r2, [pc, #684]	; (b114 <paramLookup+0x458>)
    ae68:	601a      	str	r2, [r3, #0]
    ae6a:	1c3b      	adds	r3, r7, #0
    ae6c:	3308      	adds	r3, #8
    ae6e:	2204      	movs	r2, #4
    ae70:	711a      	strb	r2, [r3, #4]
    ae72:	f000 fd32 	bl	b8da <paramLookup+0xc1e>
		case 19:	varInfo.pAddr = &pidLoop1.kp_varq;				varInfo.size = sizeof(pidLoop1.kp_varq);				break;
    ae76:	1c3b      	adds	r3, r7, #0
    ae78:	3308      	adds	r3, #8
    ae7a:	4aa7      	ldr	r2, [pc, #668]	; (b118 <paramLookup+0x45c>)
    ae7c:	601a      	str	r2, [r3, #0]
    ae7e:	1c3b      	adds	r3, r7, #0
    ae80:	3308      	adds	r3, #8
    ae82:	2204      	movs	r2, #4
    ae84:	711a      	strb	r2, [r3, #4]
    ae86:	f000 fd28 	bl	b8da <paramLookup+0xc1e>
		case 20:	varInfo.pAddr = &pidLoop1.ki_varq;				varInfo.size = sizeof(pidLoop1.ki_varq);				break;
    ae8a:	1c3b      	adds	r3, r7, #0
    ae8c:	3308      	adds	r3, #8
    ae8e:	4aa3      	ldr	r2, [pc, #652]	; (b11c <paramLookup+0x460>)
    ae90:	601a      	str	r2, [r3, #0]
    ae92:	1c3b      	adds	r3, r7, #0
    ae94:	3308      	adds	r3, #8
    ae96:	2204      	movs	r2, #4
    ae98:	711a      	strb	r2, [r3, #4]
    ae9a:	f000 fd1e 	bl	b8da <paramLookup+0xc1e>
		case 21:	varInfo.pAddr = &pidLoop1.kd_varq;				varInfo.size = sizeof(pidLoop1.kd_varq);				break;		
    ae9e:	1c3b      	adds	r3, r7, #0
    aea0:	3308      	adds	r3, #8
    aea2:	4a9f      	ldr	r2, [pc, #636]	; (b120 <paramLookup+0x464>)
    aea4:	601a      	str	r2, [r3, #0]
    aea6:	1c3b      	adds	r3, r7, #0
    aea8:	3308      	adds	r3, #8
    aeaa:	2204      	movs	r2, #4
    aeac:	711a      	strb	r2, [r3, #4]
    aeae:	f000 fd14 	bl	b8da <paramLookup+0xc1e>
		case 22:	varInfo.pAddr = &pidLoop1.kp_copq;				varInfo.size = sizeof(pidLoop1.kp_copq);				break;		
    aeb2:	1c3b      	adds	r3, r7, #0
    aeb4:	3308      	adds	r3, #8
    aeb6:	4a9b      	ldr	r2, [pc, #620]	; (b124 <paramLookup+0x468>)
    aeb8:	601a      	str	r2, [r3, #0]
    aeba:	1c3b      	adds	r3, r7, #0
    aebc:	3308      	adds	r3, #8
    aebe:	2204      	movs	r2, #4
    aec0:	711a      	strb	r2, [r3, #4]
    aec2:	f000 fd0a 	bl	b8da <paramLookup+0xc1e>
		case 23:	varInfo.pAddr = &pidLoop1.ki_copq;				varInfo.size = sizeof(pidLoop1.ki_copq);				break;		
    aec6:	1c3b      	adds	r3, r7, #0
    aec8:	3308      	adds	r3, #8
    aeca:	4a97      	ldr	r2, [pc, #604]	; (b128 <paramLookup+0x46c>)
    aecc:	601a      	str	r2, [r3, #0]
    aece:	1c3b      	adds	r3, r7, #0
    aed0:	3308      	adds	r3, #8
    aed2:	2204      	movs	r2, #4
    aed4:	711a      	strb	r2, [r3, #4]
    aed6:	f000 fd00 	bl	b8da <paramLookup+0xc1e>
		case 24:	varInfo.pAddr = &pidLoop1.kd_copq;				varInfo.size = sizeof(pidLoop1.kd_copq);				break;		
    aeda:	1c3b      	adds	r3, r7, #0
    aedc:	3308      	adds	r3, #8
    aede:	4a93      	ldr	r2, [pc, #588]	; (b12c <paramLookup+0x470>)
    aee0:	601a      	str	r2, [r3, #0]
    aee2:	1c3b      	adds	r3, r7, #0
    aee4:	3308      	adds	r3, #8
    aee6:	2204      	movs	r2, #4
    aee8:	711a      	strb	r2, [r3, #4]
    aeea:	f000 fcf6 	bl	b8da <paramLookup+0xc1e>
		case 25:	varInfo.pAddr = &ps1.desiredVoltage;			varInfo.size = sizeof(ps1.desiredVoltage);				break;		
    aeee:	1c3b      	adds	r3, r7, #0
    aef0:	3308      	adds	r3, #8
    aef2:	4a8f      	ldr	r2, [pc, #572]	; (b130 <paramLookup+0x474>)
    aef4:	601a      	str	r2, [r3, #0]
    aef6:	1c3b      	adds	r3, r7, #0
    aef8:	3308      	adds	r3, #8
    aefa:	2204      	movs	r2, #4
    aefc:	711a      	strb	r2, [r3, #4]
    aefe:	f000 fcec 	bl	b8da <paramLookup+0xc1e>
		case 26:	varInfo.pAddr = &ps1.phpVoltage;				varInfo.size = sizeof(ps1.phpVoltage);					break;		
    af02:	1c3b      	adds	r3, r7, #0
    af04:	3308      	adds	r3, #8
    af06:	4a8b      	ldr	r2, [pc, #556]	; (b134 <paramLookup+0x478>)
    af08:	601a      	str	r2, [r3, #0]
    af0a:	1c3b      	adds	r3, r7, #0
    af0c:	3308      	adds	r3, #8
    af0e:	2204      	movs	r2, #4
    af10:	711a      	strb	r2, [r3, #4]
    af12:	f000 fce2 	bl	b8da <paramLookup+0xc1e>
		case 27:	varInfo.pAddr = &ps1.outputCurrent;				varInfo.size = sizeof(ps1.outputCurrent);				break;		
    af16:	1c3b      	adds	r3, r7, #0
    af18:	3308      	adds	r3, #8
    af1a:	4a87      	ldr	r2, [pc, #540]	; (b138 <paramLookup+0x47c>)
    af1c:	601a      	str	r2, [r3, #0]
    af1e:	1c3b      	adds	r3, r7, #0
    af20:	3308      	adds	r3, #8
    af22:	2204      	movs	r2, #4
    af24:	711a      	strb	r2, [r3, #4]
    af26:	f000 fcd8 	bl	b8da <paramLookup+0xc1e>
		case 28:	varInfo.pAddr = &ps1.bulkVoltage;				varInfo.size = sizeof(ps1.bulkVoltage);					break;		
    af2a:	1c3b      	adds	r3, r7, #0
    af2c:	3308      	adds	r3, #8
    af2e:	4a83      	ldr	r2, [pc, #524]	; (b13c <paramLookup+0x480>)
    af30:	601a      	str	r2, [r3, #0]
    af32:	1c3b      	adds	r3, r7, #0
    af34:	3308      	adds	r3, #8
    af36:	2204      	movs	r2, #4
    af38:	711a      	strb	r2, [r3, #4]
    af3a:	f000 fcce 	bl	b8da <paramLookup+0xc1e>
		//case 29:	varInfo.pAddr = &fan1.Vtop;						varInfo.size = sizeof(fan1.Vtop);						break;		
		//case 30:	varInfo.pAddr = &fan1.Vbottom;					varInfo.size = sizeof(fan1.Vbottom);					break;		
		case 31:	varInfo.pAddr = &fan1.minDuty;					varInfo.size = sizeof(fan1.minDuty);					break;		
    af3e:	1c3b      	adds	r3, r7, #0
    af40:	3308      	adds	r3, #8
    af42:	4a7f      	ldr	r2, [pc, #508]	; (b140 <paramLookup+0x484>)
    af44:	601a      	str	r2, [r3, #0]
    af46:	1c3b      	adds	r3, r7, #0
    af48:	3308      	adds	r3, #8
    af4a:	2204      	movs	r2, #4
    af4c:	711a      	strb	r2, [r3, #4]
    af4e:	f000 fcc4 	bl	b8da <paramLookup+0xc1e>
		case 32:	varInfo.pAddr = &fan1.maxDuty;					varInfo.size = sizeof(fan1.maxDuty);					break;		
    af52:	1c3b      	adds	r3, r7, #0
    af54:	3308      	adds	r3, #8
    af56:	4a7b      	ldr	r2, [pc, #492]	; (b144 <paramLookup+0x488>)
    af58:	601a      	str	r2, [r3, #0]
    af5a:	1c3b      	adds	r3, r7, #0
    af5c:	3308      	adds	r3, #8
    af5e:	2204      	movs	r2, #4
    af60:	711a      	strb	r2, [r3, #4]
    af62:	f000 fcba 	bl	b8da <paramLookup+0xc1e>
		case 33:	varInfo.pAddr = &fan1.rpm;						varInfo.size = sizeof(fan1.rpm);						break;		
    af66:	1c3b      	adds	r3, r7, #0
    af68:	3308      	adds	r3, #8
    af6a:	4a77      	ldr	r2, [pc, #476]	; (b148 <paramLookup+0x48c>)
    af6c:	601a      	str	r2, [r3, #0]
    af6e:	1c3b      	adds	r3, r7, #0
    af70:	3308      	adds	r3, #8
    af72:	2204      	movs	r2, #4
    af74:	711a      	strb	r2, [r3, #4]
    af76:	f000 fcb0 	bl	b8da <paramLookup+0xc1e>
		case 34:	varInfo.pAddr = &fan1.state;					varInfo.size = sizeof(fan1.state);						break;	
    af7a:	1c3b      	adds	r3, r7, #0
    af7c:	3308      	adds	r3, #8
    af7e:	4a73      	ldr	r2, [pc, #460]	; (b14c <paramLookup+0x490>)
    af80:	601a      	str	r2, [r3, #0]
    af82:	1c3b      	adds	r3, r7, #0
    af84:	3308      	adds	r3, #8
    af86:	2201      	movs	r2, #1
    af88:	711a      	strb	r2, [r3, #4]
    af8a:	f000 fca6 	bl	b8da <paramLookup+0xc1e>
		//case 35:	varInfo.pAddr = &fan2.Vtop;						varInfo.size = sizeof(fan2.Vtop);						break;
		//case 36:	varInfo.pAddr = &fan2.Vbottom;					varInfo.size = sizeof(fan2.Vbottom);					break;
		case 37:	varInfo.pAddr = &fan2.minDuty;					varInfo.size = sizeof(fan2.minDuty);					break;
    af8e:	1c3b      	adds	r3, r7, #0
    af90:	3308      	adds	r3, #8
    af92:	4a6f      	ldr	r2, [pc, #444]	; (b150 <paramLookup+0x494>)
    af94:	601a      	str	r2, [r3, #0]
    af96:	1c3b      	adds	r3, r7, #0
    af98:	3308      	adds	r3, #8
    af9a:	2204      	movs	r2, #4
    af9c:	711a      	strb	r2, [r3, #4]
    af9e:	f000 fc9c 	bl	b8da <paramLookup+0xc1e>
		case 38:	varInfo.pAddr = &fan2.maxDuty;					varInfo.size = sizeof(fan2.maxDuty);					break;
    afa2:	1c3b      	adds	r3, r7, #0
    afa4:	3308      	adds	r3, #8
    afa6:	4a6b      	ldr	r2, [pc, #428]	; (b154 <paramLookup+0x498>)
    afa8:	601a      	str	r2, [r3, #0]
    afaa:	1c3b      	adds	r3, r7, #0
    afac:	3308      	adds	r3, #8
    afae:	2204      	movs	r2, #4
    afb0:	711a      	strb	r2, [r3, #4]
    afb2:	f000 fc92 	bl	b8da <paramLookup+0xc1e>
		case 39:	varInfo.pAddr = &fan2.rpm;						varInfo.size = sizeof(fan2.rpm);						break;
    afb6:	1c3b      	adds	r3, r7, #0
    afb8:	3308      	adds	r3, #8
    afba:	4a67      	ldr	r2, [pc, #412]	; (b158 <paramLookup+0x49c>)
    afbc:	601a      	str	r2, [r3, #0]
    afbe:	1c3b      	adds	r3, r7, #0
    afc0:	3308      	adds	r3, #8
    afc2:	2204      	movs	r2, #4
    afc4:	711a      	strb	r2, [r3, #4]
    afc6:	f000 fc88 	bl	b8da <paramLookup+0xc1e>
		case 40:	varInfo.pAddr = &fan2.state;					varInfo.size = sizeof(fan2.state);						break;				
    afca:	1c3b      	adds	r3, r7, #0
    afcc:	3308      	adds	r3, #8
    afce:	4a63      	ldr	r2, [pc, #396]	; (b15c <paramLookup+0x4a0>)
    afd0:	601a      	str	r2, [r3, #0]
    afd2:	1c3b      	adds	r3, r7, #0
    afd4:	3308      	adds	r3, #8
    afd6:	2201      	movs	r2, #1
    afd8:	711a      	strb	r2, [r3, #4]
    afda:	f000 fc7e 	bl	b8da <paramLookup+0xc1e>
		case 41:	varInfo.pAddr = &firmwareVersion;				varInfo.size = sizeof(firmwareVersion);					break;		
    afde:	1c3b      	adds	r3, r7, #0
    afe0:	3308      	adds	r3, #8
    afe2:	4a5f      	ldr	r2, [pc, #380]	; (b160 <paramLookup+0x4a4>)
    afe4:	601a      	str	r2, [r3, #0]
    afe6:	1c3b      	adds	r3, r7, #0
    afe8:	3308      	adds	r3, #8
    afea:	2201      	movs	r2, #1
    afec:	711a      	strb	r2, [r3, #4]
    afee:	f000 fc74 	bl	b8da <paramLookup+0xc1e>
		case 42:	varInfo.pAddr = &defrostFreqHrs;				varInfo.size = sizeof(defrostFreqHrs);					varInfo.nonvolatileFlag = true;		break;		
    aff2:	1c3b      	adds	r3, r7, #0
    aff4:	3308      	adds	r3, #8
    aff6:	4a5b      	ldr	r2, [pc, #364]	; (b164 <paramLookup+0x4a8>)
    aff8:	601a      	str	r2, [r3, #0]
    affa:	1c3b      	adds	r3, r7, #0
    affc:	3308      	adds	r3, #8
    affe:	2201      	movs	r2, #1
    b000:	711a      	strb	r2, [r3, #4]
    b002:	1c3b      	adds	r3, r7, #0
    b004:	3308      	adds	r3, #8
    b006:	2201      	movs	r2, #1
    b008:	715a      	strb	r2, [r3, #5]
    b00a:	f000 fc66 	bl	b8da <paramLookup+0xc1e>
		case 43:	varInfo.pAddr = &defrostDurationMins;			varInfo.size = sizeof(defrostDurationMins);				varInfo.nonvolatileFlag = true;		break;		
    b00e:	1c3b      	adds	r3, r7, #0
    b010:	3308      	adds	r3, #8
    b012:	4a55      	ldr	r2, [pc, #340]	; (b168 <paramLookup+0x4ac>)
    b014:	601a      	str	r2, [r3, #0]
    b016:	1c3b      	adds	r3, r7, #0
    b018:	3308      	adds	r3, #8
    b01a:	2201      	movs	r2, #1
    b01c:	711a      	strb	r2, [r3, #4]
    b01e:	1c3b      	adds	r3, r7, #0
    b020:	3308      	adds	r3, #8
    b022:	2201      	movs	r2, #1
    b024:	715a      	strb	r2, [r3, #5]
    b026:	f000 fc58 	bl	b8da <paramLookup+0xc1e>
		case 44:	varInfo.pAddr = &defrostCycleCount;				varInfo.size = sizeof(defrostCycleCount);				break;		
    b02a:	1c3b      	adds	r3, r7, #0
    b02c:	3308      	adds	r3, #8
    b02e:	4a4f      	ldr	r2, [pc, #316]	; (b16c <paramLookup+0x4b0>)
    b030:	601a      	str	r2, [r3, #0]
    b032:	1c3b      	adds	r3, r7, #0
    b034:	3308      	adds	r3, #8
    b036:	2202      	movs	r2, #2
    b038:	711a      	strb	r2, [r3, #4]
    b03a:	f000 fc4e 	bl	b8da <paramLookup+0xc1e>
		case 45:	varInfo.pAddr = &defrostActive;					varInfo.size = sizeof(defrostActive);					break;		
    b03e:	1c3b      	adds	r3, r7, #0
    b040:	3308      	adds	r3, #8
    b042:	4a4b      	ldr	r2, [pc, #300]	; (b170 <paramLookup+0x4b4>)
    b044:	601a      	str	r2, [r3, #0]
    b046:	1c3b      	adds	r3, r7, #0
    b048:	3308      	adds	r3, #8
    b04a:	2201      	movs	r2, #1
    b04c:	711a      	strb	r2, [r3, #4]
    b04e:	f000 fc44 	bl	b8da <paramLookup+0xc1e>
		case 46:	varInfo.pAddr = &enableAutoDefrost;				varInfo.size = sizeof(enableAutoDefrost);				break;		
    b052:	1c3b      	adds	r3, r7, #0
    b054:	3308      	adds	r3, #8
    b056:	4a47      	ldr	r2, [pc, #284]	; (b174 <paramLookup+0x4b8>)
    b058:	601a      	str	r2, [r3, #0]
    b05a:	1c3b      	adds	r3, r7, #0
    b05c:	3308      	adds	r3, #8
    b05e:	2201      	movs	r2, #1
    b060:	711a      	strb	r2, [r3, #4]
    b062:	f000 fc3a 	bl	b8da <paramLookup+0xc1e>
		case 47:	varInfo.pAddr = &defrostFreqMaxHrs;				varInfo.size = sizeof(defrostFreqMaxHrs);				varInfo.nonvolatileFlag = true;		break;		
    b066:	1c3b      	adds	r3, r7, #0
    b068:	3308      	adds	r3, #8
    b06a:	4a43      	ldr	r2, [pc, #268]	; (b178 <paramLookup+0x4bc>)
    b06c:	601a      	str	r2, [r3, #0]
    b06e:	1c3b      	adds	r3, r7, #0
    b070:	3308      	adds	r3, #8
    b072:	2202      	movs	r2, #2
    b074:	711a      	strb	r2, [r3, #4]
    b076:	1c3b      	adds	r3, r7, #0
    b078:	3308      	adds	r3, #8
    b07a:	2201      	movs	r2, #1
    b07c:	715a      	strb	r2, [r3, #5]
    b07e:	f000 fc2c 	bl	b8da <paramLookup+0xc1e>
		case 48:	varInfo.pAddr = &i2cFunctionReg;				varInfo.size = sizeof(i2cFunctionReg);					break;	
    b082:	1c3b      	adds	r3, r7, #0
    b084:	3308      	adds	r3, #8
    b086:	4a3d      	ldr	r2, [pc, #244]	; (b17c <paramLookup+0x4c0>)
    b088:	601a      	str	r2, [r3, #0]
    b08a:	1c3b      	adds	r3, r7, #0
    b08c:	3308      	adds	r3, #8
    b08e:	2201      	movs	r2, #1
    b090:	711a      	strb	r2, [r3, #4]
    b092:	f000 fc22 	bl	b8da <paramLookup+0xc1e>
		case 49:	varInfo.pAddr = &ps1.standbyVoltage;			varInfo.size = sizeof(ps1.standbyVoltage);				break;	
    b096:	1c3b      	adds	r3, r7, #0
    b098:	3308      	adds	r3, #8
    b09a:	4a39      	ldr	r2, [pc, #228]	; (b180 <paramLookup+0x4c4>)
    b09c:	601a      	str	r2, [r3, #0]
    b09e:	1c3b      	adds	r3, r7, #0
    b0a0:	3308      	adds	r3, #8
    b0a2:	2204      	movs	r2, #4
    b0a4:	711a      	strb	r2, [r3, #4]
    b0a6:	f000 fc18 	bl	b8da <paramLookup+0xc1e>
			
		// Model Number
		// reserved for model number bytes
		// 71 to 83

		case 84:	varInfo.pAddr = &errorRegister;					varInfo.size = sizeof(errorRegister);					break;
    b0aa:	1c3b      	adds	r3, r7, #0
    b0ac:	3308      	adds	r3, #8
    b0ae:	4a35      	ldr	r2, [pc, #212]	; (b184 <paramLookup+0x4c8>)
    b0b0:	601a      	str	r2, [r3, #0]
    b0b2:	1c3b      	adds	r3, r7, #0
    b0b4:	3308      	adds	r3, #8
    b0b6:	2202      	movs	r2, #2
    b0b8:	711a      	strb	r2, [r3, #4]
    b0ba:	f000 fc0e 	bl	b8da <paramLookup+0xc1e>
    b0be:	46c0      	nop			; (mov r8, r8)
    b0c0:	2000090c 	.word	0x2000090c
    b0c4:	20000336 	.word	0x20000336
    b0c8:	20000338 	.word	0x20000338
    b0cc:	00024d48 	.word	0x00024d48
    b0d0:	200009d0 	.word	0x200009d0
    b0d4:	200009a0 	.word	0x200009a0
    b0d8:	20000a0c 	.word	0x20000a0c
    b0dc:	200009b8 	.word	0x200009b8
    b0e0:	20000188 	.word	0x20000188
    b0e4:	200009c4 	.word	0x200009c4
    b0e8:	200009d8 	.word	0x200009d8
    b0ec:	200009dc 	.word	0x200009dc
    b0f0:	200009e0 	.word	0x200009e0
    b0f4:	200009e4 	.word	0x200009e4
    b0f8:	200009e8 	.word	0x200009e8
    b0fc:	200009ec 	.word	0x200009ec
    b100:	200009f0 	.word	0x200009f0
    b104:	200009f5 	.word	0x200009f5
    b108:	20000a08 	.word	0x20000a08
    b10c:	20000e60 	.word	0x20000e60
    b110:	20000e64 	.word	0x20000e64
    b114:	20000e68 	.word	0x20000e68
    b118:	20000e6c 	.word	0x20000e6c
    b11c:	20000e70 	.word	0x20000e70
    b120:	20000e74 	.word	0x20000e74
    b124:	20000e78 	.word	0x20000e78
    b128:	20000e7c 	.word	0x20000e7c
    b12c:	20000e80 	.word	0x20000e80
    b130:	20000a98 	.word	0x20000a98
    b134:	20000aa0 	.word	0x20000aa0
    b138:	20000aa8 	.word	0x20000aa8
    b13c:	20000ac0 	.word	0x20000ac0
    b140:	20000e8c 	.word	0x20000e8c
    b144:	20000e90 	.word	0x20000e90
    b148:	20000e94 	.word	0x20000e94
    b14c:	20000e99 	.word	0x20000e99
    b150:	20000c60 	.word	0x20000c60
    b154:	20000c64 	.word	0x20000c64
    b158:	20000c68 	.word	0x20000c68
    b15c:	20000c6d 	.word	0x20000c6d
    b160:	20000ed0 	.word	0x20000ed0
    b164:	20000910 	.word	0x20000910
    b168:	200008d8 	.word	0x200008d8
    b16c:	200002a2 	.word	0x200002a2
    b170:	200002a4 	.word	0x200002a4
    b174:	20000038 	.word	0x20000038
    b178:	20000dbc 	.word	0x20000dbc
    b17c:	20000330 	.word	0x20000330
    b180:	20000ac8 	.word	0x20000ac8
    b184:	20000332 	.word	0x20000332
		case 85:	varInfo.pAddr = &ps1.logicVoltage;				varInfo.size = sizeof(ps1.logicVoltage);				break;	
    b188:	1c3b      	adds	r3, r7, #0
    b18a:	3308      	adds	r3, #8
    b18c:	4ae5      	ldr	r2, [pc, #916]	; (b524 <paramLookup+0x868>)
    b18e:	601a      	str	r2, [r3, #0]
    b190:	1c3b      	adds	r3, r7, #0
    b192:	3308      	adds	r3, #8
    b194:	2204      	movs	r2, #4
    b196:	711a      	strb	r2, [r3, #4]
    b198:	e39f      	b.n	b8da <paramLookup+0xc1e>
		case 86:	varInfo.pAddr = &maxOutputVoltage;				varInfo.size = sizeof(maxOutputVoltage);				break;
    b19a:	1c3b      	adds	r3, r7, #0
    b19c:	3308      	adds	r3, #8
    b19e:	4ae2      	ldr	r2, [pc, #904]	; (b528 <paramLookup+0x86c>)
    b1a0:	601a      	str	r2, [r3, #0]
    b1a2:	1c3b      	adds	r3, r7, #0
    b1a4:	3308      	adds	r3, #8
    b1a6:	2204      	movs	r2, #4
    b1a8:	711a      	strb	r2, [r3, #4]
    b1aa:	e396      	b.n	b8da <paramLookup+0xc1e>
		case 87:	varInfo.pAddr = &ps1.batteryVoltage;			varInfo.size = sizeof(ps1.batteryVoltage);				break;	
    b1ac:	1c3b      	adds	r3, r7, #0
    b1ae:	3308      	adds	r3, #8
    b1b0:	4ade      	ldr	r2, [pc, #888]	; (b52c <paramLookup+0x870>)
    b1b2:	601a      	str	r2, [r3, #0]
    b1b4:	1c3b      	adds	r3, r7, #0
    b1b6:	3308      	adds	r3, #8
    b1b8:	2204      	movs	r2, #4
    b1ba:	711a      	strb	r2, [r3, #4]
    b1bc:	e38d      	b.n	b8da <paramLookup+0xc1e>
		case 88:	varInfo.pAddr = &mfgTestModeFlag1;				varInfo.size = sizeof(mfgTestModeFlag1);				varInfo.nonvolatileFlag = true;		break;	
    b1be:	1c3b      	adds	r3, r7, #0
    b1c0:	3308      	adds	r3, #8
    b1c2:	4adb      	ldr	r2, [pc, #876]	; (b530 <paramLookup+0x874>)
    b1c4:	601a      	str	r2, [r3, #0]
    b1c6:	1c3b      	adds	r3, r7, #0
    b1c8:	3308      	adds	r3, #8
    b1ca:	2201      	movs	r2, #1
    b1cc:	711a      	strb	r2, [r3, #4]
    b1ce:	1c3b      	adds	r3, r7, #0
    b1d0:	3308      	adds	r3, #8
    b1d2:	2201      	movs	r2, #1
    b1d4:	715a      	strb	r2, [r3, #5]
    b1d6:	e380      	b.n	b8da <paramLookup+0xc1e>
		case 89:	varInfo.pAddr = &mfgTestModeFlag2;				varInfo.size = sizeof(mfgTestModeFlag2);				varInfo.nonvolatileFlag = true;		break;	
    b1d8:	1c3b      	adds	r3, r7, #0
    b1da:	3308      	adds	r3, #8
    b1dc:	4ad5      	ldr	r2, [pc, #852]	; (b534 <paramLookup+0x878>)
    b1de:	601a      	str	r2, [r3, #0]
    b1e0:	1c3b      	adds	r3, r7, #0
    b1e2:	3308      	adds	r3, #8
    b1e4:	2201      	movs	r2, #1
    b1e6:	711a      	strb	r2, [r3, #4]
    b1e8:	1c3b      	adds	r3, r7, #0
    b1ea:	3308      	adds	r3, #8
    b1ec:	2201      	movs	r2, #1
    b1ee:	715a      	strb	r2, [r3, #5]
    b1f0:	e373      	b.n	b8da <paramLookup+0xc1e>
		// case 90:			
		case 91:	varInfo.pAddr = &chamber1.chamberTemp;			varInfo.size = sizeof(chamber1.chamberTemp);			break;
    b1f2:	1c3b      	adds	r3, r7, #0
    b1f4:	3308      	adds	r3, #8
    b1f6:	4ad0      	ldr	r2, [pc, #832]	; (b538 <paramLookup+0x87c>)
    b1f8:	601a      	str	r2, [r3, #0]
    b1fa:	1c3b      	adds	r3, r7, #0
    b1fc:	3308      	adds	r3, #8
    b1fe:	2204      	movs	r2, #4
    b200:	711a      	strb	r2, [r3, #4]
    b202:	e36a      	b.n	b8da <paramLookup+0xc1e>
		case 92:	varInfo.pAddr = &chamber2.chamberTemp;			varInfo.size = sizeof(chamber2.chamberTemp);			break;
    b204:	1c3b      	adds	r3, r7, #0
    b206:	3308      	adds	r3, #8
    b208:	4acc      	ldr	r2, [pc, #816]	; (b53c <paramLookup+0x880>)
    b20a:	601a      	str	r2, [r3, #0]
    b20c:	1c3b      	adds	r3, r7, #0
    b20e:	3308      	adds	r3, #8
    b210:	2204      	movs	r2, #4
    b212:	711a      	strb	r2, [r3, #4]
    b214:	e361      	b.n	b8da <paramLookup+0xc1e>
		case 93:	varInfo.pAddr = &chamber2.rejectTemp;			varInfo.size = sizeof(chamber2.rejectTemp);				break;
    b216:	1c3b      	adds	r3, r7, #0
    b218:	3308      	adds	r3, #8
    b21a:	4ac9      	ldr	r2, [pc, #804]	; (b540 <paramLookup+0x884>)
    b21c:	601a      	str	r2, [r3, #0]
    b21e:	1c3b      	adds	r3, r7, #0
    b220:	3308      	adds	r3, #8
    b222:	2204      	movs	r2, #4
    b224:	711a      	strb	r2, [r3, #4]
    b226:	e358      	b.n	b8da <paramLookup+0xc1e>
		case 94:	varInfo.pAddr = &ps1.outputPower;				varInfo.size = sizeof(ps1.outputPower);					break;
    b228:	1c3b      	adds	r3, r7, #0
    b22a:	3308      	adds	r3, #8
    b22c:	4ac5      	ldr	r2, [pc, #788]	; (b544 <paramLookup+0x888>)
    b22e:	601a      	str	r2, [r3, #0]
    b230:	1c3b      	adds	r3, r7, #0
    b232:	3308      	adds	r3, #8
    b234:	2204      	movs	r2, #4
    b236:	711a      	strb	r2, [r3, #4]
    b238:	e34f      	b.n	b8da <paramLookup+0xc1e>
		case 95:	varInfo.pAddr = &ps2.phpVoltage;				varInfo.size = sizeof(ps2.phpVoltage);					break;
    b23a:	1c3b      	adds	r3, r7, #0
    b23c:	3308      	adds	r3, #8
    b23e:	4ac2      	ldr	r2, [pc, #776]	; (b548 <paramLookup+0x88c>)
    b240:	601a      	str	r2, [r3, #0]
    b242:	1c3b      	adds	r3, r7, #0
    b244:	3308      	adds	r3, #8
    b246:	2204      	movs	r2, #4
    b248:	711a      	strb	r2, [r3, #4]
    b24a:	e346      	b.n	b8da <paramLookup+0xc1e>
		case 96:	varInfo.pAddr = &ps2.outputCurrent;				varInfo.size = sizeof(ps2.outputCurrent);				break;
    b24c:	1c3b      	adds	r3, r7, #0
    b24e:	3308      	adds	r3, #8
    b250:	4abe      	ldr	r2, [pc, #760]	; (b54c <paramLookup+0x890>)
    b252:	601a      	str	r2, [r3, #0]
    b254:	1c3b      	adds	r3, r7, #0
    b256:	3308      	adds	r3, #8
    b258:	2204      	movs	r2, #4
    b25a:	711a      	strb	r2, [r3, #4]
    b25c:	e33d      	b.n	b8da <paramLookup+0xc1e>
		case 97:	varInfo.pAddr = &ps2.outputPower;				varInfo.size = sizeof(ps2.outputPower);					break;
    b25e:	1c3b      	adds	r3, r7, #0
    b260:	3308      	adds	r3, #8
    b262:	4abb      	ldr	r2, [pc, #748]	; (b550 <paramLookup+0x894>)
    b264:	601a      	str	r2, [r3, #0]
    b266:	1c3b      	adds	r3, r7, #0
    b268:	3308      	adds	r3, #8
    b26a:	2204      	movs	r2, #4
    b26c:	711a      	strb	r2, [r3, #4]
    b26e:	e334      	b.n	b8da <paramLookup+0xc1e>
		case 98:	varInfo.pAddr = &fan1.targetDutyPercent;		varInfo.size = sizeof(fan1.targetDutyPercent);			break;
    b270:	1c3b      	adds	r3, r7, #0
    b272:	3308      	adds	r3, #8
    b274:	4ab7      	ldr	r2, [pc, #732]	; (b554 <paramLookup+0x898>)
    b276:	601a      	str	r2, [r3, #0]
    b278:	1c3b      	adds	r3, r7, #0
    b27a:	3308      	adds	r3, #8
    b27c:	2204      	movs	r2, #4
    b27e:	711a      	strb	r2, [r3, #4]
    b280:	e32b      	b.n	b8da <paramLookup+0xc1e>
		case 99:	varInfo.pAddr = &fan2.state;					varInfo.size = sizeof(fan2.state);						break;
    b282:	1c3b      	adds	r3, r7, #0
    b284:	3308      	adds	r3, #8
    b286:	4ab4      	ldr	r2, [pc, #720]	; (b558 <paramLookup+0x89c>)
    b288:	601a      	str	r2, [r3, #0]
    b28a:	1c3b      	adds	r3, r7, #0
    b28c:	3308      	adds	r3, #8
    b28e:	2201      	movs	r2, #1
    b290:	711a      	strb	r2, [r3, #4]
    b292:	e322      	b.n	b8da <paramLookup+0xc1e>
		case 100:	varInfo.pAddr = &fan2.targetDutyPercent;		varInfo.size = sizeof(fan2.targetDutyPercent);			break;
    b294:	1c3b      	adds	r3, r7, #0
    b296:	3308      	adds	r3, #8
    b298:	4ab0      	ldr	r2, [pc, #704]	; (b55c <paramLookup+0x8a0>)
    b29a:	601a      	str	r2, [r3, #0]
    b29c:	1c3b      	adds	r3, r7, #0
    b29e:	3308      	adds	r3, #8
    b2a0:	2204      	movs	r2, #4
    b2a2:	711a      	strb	r2, [r3, #4]
    b2a4:	e319      	b.n	b8da <paramLookup+0xc1e>
		case 101:	varInfo.pAddr = &fan2.rpm;						varInfo.size = sizeof(fan2.rpm);						break;
    b2a6:	1c3b      	adds	r3, r7, #0
    b2a8:	3308      	adds	r3, #8
    b2aa:	4aad      	ldr	r2, [pc, #692]	; (b560 <paramLookup+0x8a4>)
    b2ac:	601a      	str	r2, [r3, #0]
    b2ae:	1c3b      	adds	r3, r7, #0
    b2b0:	3308      	adds	r3, #8
    b2b2:	2204      	movs	r2, #4
    b2b4:	711a      	strb	r2, [r3, #4]
    b2b6:	e310      	b.n	b8da <paramLookup+0xc1e>
		case 102:	varInfo.pAddr = &fan3.state;					varInfo.size = sizeof(fan3.state);						break;
    b2b8:	1c3b      	adds	r3, r7, #0
    b2ba:	3308      	adds	r3, #8
    b2bc:	4aa9      	ldr	r2, [pc, #676]	; (b564 <paramLookup+0x8a8>)
    b2be:	601a      	str	r2, [r3, #0]
    b2c0:	1c3b      	adds	r3, r7, #0
    b2c2:	3308      	adds	r3, #8
    b2c4:	2201      	movs	r2, #1
    b2c6:	711a      	strb	r2, [r3, #4]
    b2c8:	e307      	b.n	b8da <paramLookup+0xc1e>
		case 103:	varInfo.pAddr = &fan3.targetDutyPercent;		varInfo.size = sizeof(fan3.targetDutyPercent);			break;
    b2ca:	1c3b      	adds	r3, r7, #0
    b2cc:	3308      	adds	r3, #8
    b2ce:	4aa6      	ldr	r2, [pc, #664]	; (b568 <paramLookup+0x8ac>)
    b2d0:	601a      	str	r2, [r3, #0]
    b2d2:	1c3b      	adds	r3, r7, #0
    b2d4:	3308      	adds	r3, #8
    b2d6:	2204      	movs	r2, #4
    b2d8:	711a      	strb	r2, [r3, #4]
    b2da:	e2fe      	b.n	b8da <paramLookup+0xc1e>
		case 104:	varInfo.pAddr = &fan3.rpm;						varInfo.size = sizeof(fan3.rpm);						break;
    b2dc:	1c3b      	adds	r3, r7, #0
    b2de:	3308      	adds	r3, #8
    b2e0:	4aa2      	ldr	r2, [pc, #648]	; (b56c <paramLookup+0x8b0>)
    b2e2:	601a      	str	r2, [r3, #0]
    b2e4:	1c3b      	adds	r3, r7, #0
    b2e6:	3308      	adds	r3, #8
    b2e8:	2204      	movs	r2, #4
    b2ea:	711a      	strb	r2, [r3, #4]
    b2ec:	e2f5      	b.n	b8da <paramLookup+0xc1e>
		case 105:	varInfo.pAddr = &fan4.state;					varInfo.size = sizeof(fan4.state);						break;
    b2ee:	1c3b      	adds	r3, r7, #0
    b2f0:	3308      	adds	r3, #8
    b2f2:	4a9f      	ldr	r2, [pc, #636]	; (b570 <paramLookup+0x8b4>)
    b2f4:	601a      	str	r2, [r3, #0]
    b2f6:	1c3b      	adds	r3, r7, #0
    b2f8:	3308      	adds	r3, #8
    b2fa:	2201      	movs	r2, #1
    b2fc:	711a      	strb	r2, [r3, #4]
    b2fe:	e2ec      	b.n	b8da <paramLookup+0xc1e>
		case 106:	varInfo.pAddr = &fan4.targetDutyPercent;		varInfo.size = sizeof(fan4.targetDutyPercent);			break;
    b300:	1c3b      	adds	r3, r7, #0
    b302:	3308      	adds	r3, #8
    b304:	4a9b      	ldr	r2, [pc, #620]	; (b574 <paramLookup+0x8b8>)
    b306:	601a      	str	r2, [r3, #0]
    b308:	1c3b      	adds	r3, r7, #0
    b30a:	3308      	adds	r3, #8
    b30c:	2204      	movs	r2, #4
    b30e:	711a      	strb	r2, [r3, #4]
    b310:	e2e3      	b.n	b8da <paramLookup+0xc1e>
		case 107:	varInfo.pAddr = &fan4.rpm;						varInfo.size = sizeof(fan4.rpm);						break;
    b312:	1c3b      	adds	r3, r7, #0
    b314:	3308      	adds	r3, #8
    b316:	4a98      	ldr	r2, [pc, #608]	; (b578 <paramLookup+0x8bc>)
    b318:	601a      	str	r2, [r3, #0]
    b31a:	1c3b      	adds	r3, r7, #0
    b31c:	3308      	adds	r3, #8
    b31e:	2204      	movs	r2, #4
    b320:	711a      	strb	r2, [r3, #4]
    b322:	e2da      	b.n	b8da <paramLookup+0xc1e>
		case 108:	varInfo.pAddr = &ps1.outputStatus;				varInfo.size = sizeof(ps1.outputStatus);				break;
    b324:	1c3b      	adds	r3, r7, #0
    b326:	3308      	adds	r3, #8
    b328:	4a94      	ldr	r2, [pc, #592]	; (b57c <paramLookup+0x8c0>)
    b32a:	601a      	str	r2, [r3, #0]
    b32c:	1c3b      	adds	r3, r7, #0
    b32e:	3308      	adds	r3, #8
    b330:	2201      	movs	r2, #1
    b332:	711a      	strb	r2, [r3, #4]
    b334:	e2d1      	b.n	b8da <paramLookup+0xc1e>
		case 109:	varInfo.pAddr = &ps1.outputDuty;				varInfo.size = sizeof(ps1.outputDuty);					break;
    b336:	1c3b      	adds	r3, r7, #0
    b338:	3308      	adds	r3, #8
    b33a:	4a91      	ldr	r2, [pc, #580]	; (b580 <paramLookup+0x8c4>)
    b33c:	601a      	str	r2, [r3, #0]
    b33e:	1c3b      	adds	r3, r7, #0
    b340:	3308      	adds	r3, #8
    b342:	2201      	movs	r2, #1
    b344:	711a      	strb	r2, [r3, #4]
    b346:	e2c8      	b.n	b8da <paramLookup+0xc1e>
		case 110:	varInfo.pAddr = &ps2.outputStatus;				varInfo.size = sizeof(ps2.outputStatus);				break;
    b348:	1c3b      	adds	r3, r7, #0
    b34a:	3308      	adds	r3, #8
    b34c:	4a8d      	ldr	r2, [pc, #564]	; (b584 <paramLookup+0x8c8>)
    b34e:	601a      	str	r2, [r3, #0]
    b350:	1c3b      	adds	r3, r7, #0
    b352:	3308      	adds	r3, #8
    b354:	2201      	movs	r2, #1
    b356:	711a      	strb	r2, [r3, #4]
    b358:	e2bf      	b.n	b8da <paramLookup+0xc1e>
		case 111:	varInfo.pAddr = &ps2.outputDuty;				varInfo.size = sizeof(ps2.outputDuty);					break;
    b35a:	1c3b      	adds	r3, r7, #0
    b35c:	3308      	adds	r3, #8
    b35e:	4a8a      	ldr	r2, [pc, #552]	; (b588 <paramLookup+0x8cc>)
    b360:	601a      	str	r2, [r3, #0]
    b362:	1c3b      	adds	r3, r7, #0
    b364:	3308      	adds	r3, #8
    b366:	2201      	movs	r2, #1
    b368:	711a      	strb	r2, [r3, #4]
    b36a:	e2b6      	b.n	b8da <paramLookup+0xc1e>
		//case 112:	varInfo.pAddr = &humidityPercentage;			varInfo.size = sizeof(humidityPercentage);				break;
		case 113:	varInfo.pAddr = &condensateTemp;				varInfo.size = sizeof(condensateTemp);					break;
    b36c:	1c3b      	adds	r3, r7, #0
    b36e:	3308      	adds	r3, #8
    b370:	4a86      	ldr	r2, [pc, #536]	; (b58c <paramLookup+0x8d0>)
    b372:	601a      	str	r2, [r3, #0]
    b374:	1c3b      	adds	r3, r7, #0
    b376:	3308      	adds	r3, #8
    b378:	2204      	movs	r2, #4
    b37a:	711a      	strb	r2, [r3, #4]
    b37c:	e2ad      	b.n	b8da <paramLookup+0xc1e>
		case 114:	varInfo.pAddr = &UIfwVersion;					varInfo.size = sizeof(UIfwVersion);						break;
    b37e:	1c3b      	adds	r3, r7, #0
    b380:	3308      	adds	r3, #8
    b382:	4a83      	ldr	r2, [pc, #524]	; (b590 <paramLookup+0x8d4>)
    b384:	601a      	str	r2, [r3, #0]
    b386:	1c3b      	adds	r3, r7, #0
    b388:	3308      	adds	r3, #8
    b38a:	2201      	movs	r2, #1
    b38c:	711a      	strb	r2, [r3, #4]
    b38e:	e2a4      	b.n	b8da <paramLookup+0xc1e>
		case 115:	varInfo.pAddr = &doorOpenStatus;				varInfo.size = sizeof(doorOpenStatus);					break;
    b390:	1c3b      	adds	r3, r7, #0
    b392:	3308      	adds	r3, #8
    b394:	4a7f      	ldr	r2, [pc, #508]	; (b594 <paramLookup+0x8d8>)
    b396:	601a      	str	r2, [r3, #0]
    b398:	1c3b      	adds	r3, r7, #0
    b39a:	3308      	adds	r3, #8
    b39c:	2201      	movs	r2, #1
    b39e:	711a      	strb	r2, [r3, #4]
    b3a0:	e29b      	b.n	b8da <paramLookup+0xc1e>
		case 116:	varInfo.pAddr = &ambientTemp;					varInfo.size = sizeof(ambientTemp);						break;
    b3a2:	1c3b      	adds	r3, r7, #0
    b3a4:	3308      	adds	r3, #8
    b3a6:	4a7c      	ldr	r2, [pc, #496]	; (b598 <paramLookup+0x8dc>)
    b3a8:	601a      	str	r2, [r3, #0]
    b3aa:	1c3b      	adds	r3, r7, #0
    b3ac:	3308      	adds	r3, #8
    b3ae:	2204      	movs	r2, #4
    b3b0:	711a      	strb	r2, [r3, #4]
    b3b2:	e292      	b.n	b8da <paramLookup+0xc1e>
		case 117:	varInfo.pAddr = &maxAllowedChamberTemp;			varInfo.size = sizeof(maxAllowedChamberTemp);			varInfo.nonvolatileFlag = true;		break;
    b3b4:	1c3b      	adds	r3, r7, #0
    b3b6:	3308      	adds	r3, #8
    b3b8:	4a78      	ldr	r2, [pc, #480]	; (b59c <paramLookup+0x8e0>)
    b3ba:	601a      	str	r2, [r3, #0]
    b3bc:	1c3b      	adds	r3, r7, #0
    b3be:	3308      	adds	r3, #8
    b3c0:	2204      	movs	r2, #4
    b3c2:	711a      	strb	r2, [r3, #4]
    b3c4:	1c3b      	adds	r3, r7, #0
    b3c6:	3308      	adds	r3, #8
    b3c8:	2201      	movs	r2, #1
    b3ca:	715a      	strb	r2, [r3, #5]
    b3cc:	e285      	b.n	b8da <paramLookup+0xc1e>
		case 118:	varInfo.pAddr = &minAllowedChamberTemp;			varInfo.size = sizeof(minAllowedChamberTemp);			varInfo.nonvolatileFlag = true;		break;
    b3ce:	1c3b      	adds	r3, r7, #0
    b3d0:	3308      	adds	r3, #8
    b3d2:	4a73      	ldr	r2, [pc, #460]	; (b5a0 <paramLookup+0x8e4>)
    b3d4:	601a      	str	r2, [r3, #0]
    b3d6:	1c3b      	adds	r3, r7, #0
    b3d8:	3308      	adds	r3, #8
    b3da:	2204      	movs	r2, #4
    b3dc:	711a      	strb	r2, [r3, #4]
    b3de:	1c3b      	adds	r3, r7, #0
    b3e0:	3308      	adds	r3, #8
    b3e2:	2201      	movs	r2, #1
    b3e4:	715a      	strb	r2, [r3, #5]
    b3e6:	e278      	b.n	b8da <paramLookup+0xc1e>
		case 119:   varInfo.pAddr = &self_test_status_hi;			varInfo.size = sizeof(self_test_status_hi);				break;
    b3e8:	1c3b      	adds	r3, r7, #0
    b3ea:	3308      	adds	r3, #8
    b3ec:	4a6d      	ldr	r2, [pc, #436]	; (b5a4 <paramLookup+0x8e8>)
    b3ee:	601a      	str	r2, [r3, #0]
    b3f0:	1c3b      	adds	r3, r7, #0
    b3f2:	3308      	adds	r3, #8
    b3f4:	2202      	movs	r2, #2
    b3f6:	711a      	strb	r2, [r3, #4]
    b3f8:	e26f      	b.n	b8da <paramLookup+0xc1e>
		case 120:   varInfo.pAddr = &self_test_status_lo;			varInfo.size = sizeof(self_test_status_lo);				break;	
    b3fa:	1c3b      	adds	r3, r7, #0
    b3fc:	3308      	adds	r3, #8
    b3fe:	4a6a      	ldr	r2, [pc, #424]	; (b5a8 <paramLookup+0x8ec>)
    b400:	601a      	str	r2, [r3, #0]
    b402:	1c3b      	adds	r3, r7, #0
    b404:	3308      	adds	r3, #8
    b406:	2202      	movs	r2, #2
    b408:	711a      	strb	r2, [r3, #4]
    b40a:	e266      	b.n	b8da <paramLookup+0xc1e>
		case 121:	varInfo.pAddr = &selfTestIsRunning;				varInfo.size = sizeof(selfTestIsRunning);				break;	
    b40c:	1c3b      	adds	r3, r7, #0
    b40e:	3308      	adds	r3, #8
    b410:	4a66      	ldr	r2, [pc, #408]	; (b5ac <paramLookup+0x8f0>)
    b412:	601a      	str	r2, [r3, #0]
    b414:	1c3b      	adds	r3, r7, #0
    b416:	3308      	adds	r3, #8
    b418:	2201      	movs	r2, #1
    b41a:	711a      	strb	r2, [r3, #4]
    b41c:	e25d      	b.n	b8da <paramLookup+0xc1e>
		
		// UI Firmware Version String
		// reserved for ui firmware string bytes
		// 122 to 128	
		
		case 129:	varInfo.pAddr = &last_defrost_timestamp.time.month;	varInfo.size = sizeof(last_defrost_timestamp.time.month);	break;
    b41e:	1c3b      	adds	r3, r7, #0
    b420:	3308      	adds	r3, #8
    b422:	4a63      	ldr	r2, [pc, #396]	; (b5b0 <paramLookup+0x8f4>)
    b424:	601a      	str	r2, [r3, #0]
    b426:	1c3b      	adds	r3, r7, #0
    b428:	3308      	adds	r3, #8
    b42a:	2201      	movs	r2, #1
    b42c:	711a      	strb	r2, [r3, #4]
    b42e:	e254      	b.n	b8da <paramLookup+0xc1e>
		case 130:	varInfo.pAddr = &last_defrost_timestamp.time.day;	varInfo.size = sizeof(last_defrost_timestamp.time.day);		break;		
    b430:	1c3b      	adds	r3, r7, #0
    b432:	3308      	adds	r3, #8
    b434:	4a5f      	ldr	r2, [pc, #380]	; (b5b4 <paramLookup+0x8f8>)
    b436:	601a      	str	r2, [r3, #0]
    b438:	1c3b      	adds	r3, r7, #0
    b43a:	3308      	adds	r3, #8
    b43c:	2201      	movs	r2, #1
    b43e:	711a      	strb	r2, [r3, #4]
    b440:	e24b      	b.n	b8da <paramLookup+0xc1e>
		case 131:	varInfo.pAddr = &last_defrost_timestamp.time.hour;	varInfo.size = sizeof(last_defrost_timestamp.time.hour);	break;		
    b442:	1c3b      	adds	r3, r7, #0
    b444:	3308      	adds	r3, #8
    b446:	4a5c      	ldr	r2, [pc, #368]	; (b5b8 <paramLookup+0x8fc>)
    b448:	601a      	str	r2, [r3, #0]
    b44a:	1c3b      	adds	r3, r7, #0
    b44c:	3308      	adds	r3, #8
    b44e:	2201      	movs	r2, #1
    b450:	711a      	strb	r2, [r3, #4]
    b452:	e242      	b.n	b8da <paramLookup+0xc1e>
		case 132:	varInfo.pAddr = &last_defrost_timestamp.time.minute;varInfo.size = sizeof(last_defrost_timestamp.time.minute);	break;
    b454:	1c3b      	adds	r3, r7, #0
    b456:	3308      	adds	r3, #8
    b458:	4a58      	ldr	r2, [pc, #352]	; (b5bc <paramLookup+0x900>)
    b45a:	601a      	str	r2, [r3, #0]
    b45c:	1c3b      	adds	r3, r7, #0
    b45e:	3308      	adds	r3, #8
    b460:	2201      	movs	r2, #1
    b462:	711a      	strb	r2, [r3, #4]
    b464:	e239      	b.n	b8da <paramLookup+0xc1e>
		case 133:	varInfo.pAddr = &last_defrost_timestamp.time.pm;	varInfo.size = sizeof(last_defrost_timestamp.time.pm);		break;					
    b466:	1c3b      	adds	r3, r7, #0
    b468:	3308      	adds	r3, #8
    b46a:	4a55      	ldr	r2, [pc, #340]	; (b5c0 <paramLookup+0x904>)
    b46c:	601a      	str	r2, [r3, #0]
    b46e:	1c3b      	adds	r3, r7, #0
    b470:	3308      	adds	r3, #8
    b472:	2201      	movs	r2, #1
    b474:	711a      	strb	r2, [r3, #4]
    b476:	e230      	b.n	b8da <paramLookup+0xc1e>

		case 134:	varInfo.pAddr = &fan1.stall;					varInfo.size = sizeof(fan1.stall);						break;
    b478:	1c3b      	adds	r3, r7, #0
    b47a:	3308      	adds	r3, #8
    b47c:	4a51      	ldr	r2, [pc, #324]	; (b5c4 <paramLookup+0x908>)
    b47e:	601a      	str	r2, [r3, #0]
    b480:	1c3b      	adds	r3, r7, #0
    b482:	3308      	adds	r3, #8
    b484:	2201      	movs	r2, #1
    b486:	711a      	strb	r2, [r3, #4]
    b488:	e227      	b.n	b8da <paramLookup+0xc1e>
		case 135:	varInfo.pAddr = &fan2.stall;					varInfo.size = sizeof(fan2.stall);						break;
    b48a:	1c3b      	adds	r3, r7, #0
    b48c:	3308      	adds	r3, #8
    b48e:	4a4e      	ldr	r2, [pc, #312]	; (b5c8 <paramLookup+0x90c>)
    b490:	601a      	str	r2, [r3, #0]
    b492:	1c3b      	adds	r3, r7, #0
    b494:	3308      	adds	r3, #8
    b496:	2201      	movs	r2, #1
    b498:	711a      	strb	r2, [r3, #4]
    b49a:	e21e      	b.n	b8da <paramLookup+0xc1e>
		case 136:	varInfo.pAddr = &fan3.stall;					varInfo.size = sizeof(fan3.stall);						break;
    b49c:	1c3b      	adds	r3, r7, #0
    b49e:	3308      	adds	r3, #8
    b4a0:	4a4a      	ldr	r2, [pc, #296]	; (b5cc <paramLookup+0x910>)
    b4a2:	601a      	str	r2, [r3, #0]
    b4a4:	1c3b      	adds	r3, r7, #0
    b4a6:	3308      	adds	r3, #8
    b4a8:	2201      	movs	r2, #1
    b4aa:	711a      	strb	r2, [r3, #4]
    b4ac:	e215      	b.n	b8da <paramLookup+0xc1e>
		case 137:	varInfo.pAddr = &fan4.stall;					varInfo.size = sizeof(fan4.stall);						break;
    b4ae:	1c3b      	adds	r3, r7, #0
    b4b0:	3308      	adds	r3, #8
    b4b2:	4a47      	ldr	r2, [pc, #284]	; (b5d0 <paramLookup+0x914>)
    b4b4:	601a      	str	r2, [r3, #0]
    b4b6:	1c3b      	adds	r3, r7, #0
    b4b8:	3308      	adds	r3, #8
    b4ba:	2201      	movs	r2, #1
    b4bc:	711a      	strb	r2, [r3, #4]
    b4be:	e20c      	b.n	b8da <paramLookup+0xc1e>
		case 138:	varInfo.pAddr = &runSelfTestOnPOR;				varInfo.size = sizeof(runSelfTestOnPOR);				varInfo.nonvolatileFlag = true;		break;
    b4c0:	1c3b      	adds	r3, r7, #0
    b4c2:	3308      	adds	r3, #8
    b4c4:	4a43      	ldr	r2, [pc, #268]	; (b5d4 <paramLookup+0x918>)
    b4c6:	601a      	str	r2, [r3, #0]
    b4c8:	1c3b      	adds	r3, r7, #0
    b4ca:	3308      	adds	r3, #8
    b4cc:	2201      	movs	r2, #1
    b4ce:	711a      	strb	r2, [r3, #4]
    b4d0:	1c3b      	adds	r3, r7, #0
    b4d2:	3308      	adds	r3, #8
    b4d4:	2201      	movs	r2, #1
    b4d6:	715a      	strb	r2, [r3, #5]
    b4d8:	e1ff      	b.n	b8da <paramLookup+0xc1e>
		
		case 139:	varInfo.pAddr = &last_defrost_timestamp.time.second;	varInfo.size = sizeof(last_defrost_timestamp.time.second);	break;		
    b4da:	1c3b      	adds	r3, r7, #0
    b4dc:	3308      	adds	r3, #8
    b4de:	4a3e      	ldr	r2, [pc, #248]	; (b5d8 <paramLookup+0x91c>)
    b4e0:	601a      	str	r2, [r3, #0]
    b4e2:	1c3b      	adds	r3, r7, #0
    b4e4:	3308      	adds	r3, #8
    b4e6:	2201      	movs	r2, #1
    b4e8:	711a      	strb	r2, [r3, #4]
    b4ea:	e1f6      	b.n	b8da <paramLookup+0xc1e>

		case 140:	varInfo.pAddr = &fan1.fanType;					varInfo.size = sizeof(fan1.fanType);					break;
    b4ec:	1c3b      	adds	r3, r7, #0
    b4ee:	3308      	adds	r3, #8
    b4f0:	4a3a      	ldr	r2, [pc, #232]	; (b5dc <paramLookup+0x920>)
    b4f2:	601a      	str	r2, [r3, #0]
    b4f4:	1c3b      	adds	r3, r7, #0
    b4f6:	3308      	adds	r3, #8
    b4f8:	2201      	movs	r2, #1
    b4fa:	711a      	strb	r2, [r3, #4]
    b4fc:	e1ed      	b.n	b8da <paramLookup+0xc1e>
		case 141:	varInfo.pAddr = &fan2.fanType;					varInfo.size = sizeof(fan2.fanType);					break;
    b4fe:	1c3b      	adds	r3, r7, #0
    b500:	3308      	adds	r3, #8
    b502:	4a37      	ldr	r2, [pc, #220]	; (b5e0 <paramLookup+0x924>)
    b504:	601a      	str	r2, [r3, #0]
    b506:	1c3b      	adds	r3, r7, #0
    b508:	3308      	adds	r3, #8
    b50a:	2201      	movs	r2, #1
    b50c:	711a      	strb	r2, [r3, #4]
    b50e:	e1e4      	b.n	b8da <paramLookup+0xc1e>
		case 142:	varInfo.pAddr = &fan3.fanType;					varInfo.size = sizeof(fan3.fanType);					break;
    b510:	1c3b      	adds	r3, r7, #0
    b512:	3308      	adds	r3, #8
    b514:	4a33      	ldr	r2, [pc, #204]	; (b5e4 <paramLookup+0x928>)
    b516:	601a      	str	r2, [r3, #0]
    b518:	1c3b      	adds	r3, r7, #0
    b51a:	3308      	adds	r3, #8
    b51c:	2201      	movs	r2, #1
    b51e:	711a      	strb	r2, [r3, #4]
    b520:	e1db      	b.n	b8da <paramLookup+0xc1e>
    b522:	46c0      	nop			; (mov r8, r8)
    b524:	20000ac4 	.word	0x20000ac4
    b528:	20000084 	.word	0x20000084
    b52c:	20000acc 	.word	0x20000acc
    b530:	20000088 	.word	0x20000088
    b534:	20000089 	.word	0x20000089
    b538:	200009bc 	.word	0x200009bc
    b53c:	20000964 	.word	0x20000964
    b540:	2000096c 	.word	0x2000096c
    b544:	20000aa4 	.word	0x20000aa4
    b548:	20000d80 	.word	0x20000d80
    b54c:	20000d88 	.word	0x20000d88
    b550:	20000d84 	.word	0x20000d84
    b554:	20000e9c 	.word	0x20000e9c
    b558:	20000c6d 	.word	0x20000c6d
    b55c:	20000c70 	.word	0x20000c70
    b560:	20000c68 	.word	0x20000c68
    b564:	20000d2d 	.word	0x20000d2d
    b568:	20000d30 	.word	0x20000d30
    b56c:	20000d28 	.word	0x20000d28
    b570:	20000af1 	.word	0x20000af1
    b574:	20000af4 	.word	0x20000af4
    b578:	20000aec 	.word	0x20000aec
    b57c:	20000a86 	.word	0x20000a86
    b580:	20000ab0 	.word	0x20000ab0
    b584:	20000d66 	.word	0x20000d66
    b588:	20000d90 	.word	0x20000d90
    b58c:	200003b4 	.word	0x200003b4
    b590:	20000334 	.word	0x20000334
    b594:	20000335 	.word	0x20000335
    b598:	2000008c 	.word	0x2000008c
    b59c:	20000180 	.word	0x20000180
    b5a0:	20000184 	.word	0x20000184
    b5a4:	20000340 	.word	0x20000340
    b5a8:	20000342 	.word	0x20000342
    b5ac:	20000344 	.word	0x20000344
    b5b0:	200007f1 	.word	0x200007f1
    b5b4:	200007f0 	.word	0x200007f0
    b5b8:	200007ee 	.word	0x200007ee
    b5bc:	200007ed 	.word	0x200007ed
    b5c0:	200007ef 	.word	0x200007ef
    b5c4:	20000ea2 	.word	0x20000ea2
    b5c8:	20000c76 	.word	0x20000c76
    b5cc:	20000d36 	.word	0x20000d36
    b5d0:	20000afa 	.word	0x20000afa
    b5d4:	2000004c 	.word	0x2000004c
    b5d8:	200007ec 	.word	0x200007ec
    b5dc:	20000ecc 	.word	0x20000ecc
    b5e0:	20000ca0 	.word	0x20000ca0
    b5e4:	20000d60 	.word	0x20000d60
		case 143:	varInfo.pAddr = &fan4.fanType;					varInfo.size = sizeof(fan4.fanType);					break;
    b5e8:	1c3b      	adds	r3, r7, #0
    b5ea:	3308      	adds	r3, #8
    b5ec:	4abf      	ldr	r2, [pc, #764]	; (b8ec <paramLookup+0xc30>)
    b5ee:	601a      	str	r2, [r3, #0]
    b5f0:	1c3b      	adds	r3, r7, #0
    b5f2:	3308      	adds	r3, #8
    b5f4:	2201      	movs	r2, #1
    b5f6:	711a      	strb	r2, [r3, #4]
    b5f8:	e16f      	b.n	b8da <paramLookup+0xc1e>
		case 144:	varInfo.pAddr = &maxSnsErrorCount;				varInfo.size = sizeof(maxSnsErrorCount);				break;
    b5fa:	1c3b      	adds	r3, r7, #0
    b5fc:	3308      	adds	r3, #8
    b5fe:	4abc      	ldr	r2, [pc, #752]	; (b8f0 <paramLookup+0xc34>)
    b600:	601a      	str	r2, [r3, #0]
    b602:	1c3b      	adds	r3, r7, #0
    b604:	3308      	adds	r3, #8
    b606:	2202      	movs	r2, #2
    b608:	711a      	strb	r2, [r3, #4]
    b60a:	e166      	b.n	b8da <paramLookup+0xc1e>
		case 145:	varInfo.pAddr = &chamberThermistorBeta;			varInfo.size = sizeof(chamberThermistorBeta);			varInfo.nonvolatileFlag = true;		break;
    b60c:	1c3b      	adds	r3, r7, #0
    b60e:	3308      	adds	r3, #8
    b610:	4ab8      	ldr	r2, [pc, #736]	; (b8f4 <paramLookup+0xc38>)
    b612:	601a      	str	r2, [r3, #0]
    b614:	1c3b      	adds	r3, r7, #0
    b616:	3308      	adds	r3, #8
    b618:	2202      	movs	r2, #2
    b61a:	711a      	strb	r2, [r3, #4]
    b61c:	1c3b      	adds	r3, r7, #0
    b61e:	3308      	adds	r3, #8
    b620:	2201      	movs	r2, #1
    b622:	715a      	strb	r2, [r3, #5]
    b624:	e159      	b.n	b8da <paramLookup+0xc1e>
		case 146:	varInfo.pAddr = &rejectThermistorBeta;			varInfo.size = sizeof(rejectThermistorBeta);			varInfo.nonvolatileFlag = true;		break;
    b626:	1c3b      	adds	r3, r7, #0
    b628:	3308      	adds	r3, #8
    b62a:	4ab3      	ldr	r2, [pc, #716]	; (b8f8 <paramLookup+0xc3c>)
    b62c:	601a      	str	r2, [r3, #0]
    b62e:	1c3b      	adds	r3, r7, #0
    b630:	3308      	adds	r3, #8
    b632:	2202      	movs	r2, #2
    b634:	711a      	strb	r2, [r3, #4]
    b636:	1c3b      	adds	r3, r7, #0
    b638:	3308      	adds	r3, #8
    b63a:	2201      	movs	r2, #1
    b63c:	715a      	strb	r2, [r3, #5]
    b63e:	e14c      	b.n	b8da <paramLookup+0xc1e>
		case 147:	varInfo.pAddr = &cha1SnsErrCnt;					varInfo.size = sizeof(cha1SnsErrCnt);					break;
    b640:	1c3b      	adds	r3, r7, #0
    b642:	3308      	adds	r3, #8
    b644:	4aad      	ldr	r2, [pc, #692]	; (b8fc <paramLookup+0xc40>)
    b646:	601a      	str	r2, [r3, #0]
    b648:	1c3b      	adds	r3, r7, #0
    b64a:	3308      	adds	r3, #8
    b64c:	2202      	movs	r2, #2
    b64e:	711a      	strb	r2, [r3, #4]
    b650:	e143      	b.n	b8da <paramLookup+0xc1e>
		case 148:	varInfo.pAddr = &cha2SnsErrCnt;					varInfo.size = sizeof(cha2SnsErrCnt);					break;
    b652:	1c3b      	adds	r3, r7, #0
    b654:	3308      	adds	r3, #8
    b656:	4aaa      	ldr	r2, [pc, #680]	; (b900 <paramLookup+0xc44>)
    b658:	601a      	str	r2, [r3, #0]
    b65a:	1c3b      	adds	r3, r7, #0
    b65c:	3308      	adds	r3, #8
    b65e:	2202      	movs	r2, #2
    b660:	711a      	strb	r2, [r3, #4]
    b662:	e13a      	b.n	b8da <paramLookup+0xc1e>
		case 149:	varInfo.pAddr = &rejSnsErrCnt;					varInfo.size = sizeof(rejSnsErrCnt);					break;
    b664:	1c3b      	adds	r3, r7, #0
    b666:	3308      	adds	r3, #8
    b668:	4aa6      	ldr	r2, [pc, #664]	; (b904 <paramLookup+0xc48>)
    b66a:	601a      	str	r2, [r3, #0]
    b66c:	1c3b      	adds	r3, r7, #0
    b66e:	3308      	adds	r3, #8
    b670:	2202      	movs	r2, #2
    b672:	711a      	strb	r2, [r3, #4]
    b674:	e131      	b.n	b8da <paramLookup+0xc1e>
		case 150:	varInfo.pAddr = &rejCritErrCnt;					varInfo.size = sizeof(rejCritErrCnt);					break;
    b676:	1c3b      	adds	r3, r7, #0
    b678:	3308      	adds	r3, #8
    b67a:	4aa3      	ldr	r2, [pc, #652]	; (b908 <paramLookup+0xc4c>)
    b67c:	601a      	str	r2, [r3, #0]
    b67e:	1c3b      	adds	r3, r7, #0
    b680:	3308      	adds	r3, #8
    b682:	2202      	movs	r2, #2
    b684:	711a      	strb	r2, [r3, #4]
    b686:	e128      	b.n	b8da <paramLookup+0xc1e>
		case 151:	varInfo.pAddr = &maxFanErrorCount;				varInfo.size = sizeof(maxFanErrorCount);				break;
    b688:	1c3b      	adds	r3, r7, #0
    b68a:	3308      	adds	r3, #8
    b68c:	4a9f      	ldr	r2, [pc, #636]	; (b90c <paramLookup+0xc50>)
    b68e:	601a      	str	r2, [r3, #0]
    b690:	1c3b      	adds	r3, r7, #0
    b692:	3308      	adds	r3, #8
    b694:	2202      	movs	r2, #2
    b696:	711a      	strb	r2, [r3, #4]
    b698:	e11f      	b.n	b8da <paramLookup+0xc1e>
		case 152:	varInfo.pAddr = &fanSpdTolerance;				varInfo.size = sizeof(fanSpdTolerance);					break;
    b69a:	1c3b      	adds	r3, r7, #0
    b69c:	3308      	adds	r3, #8
    b69e:	4a9c      	ldr	r2, [pc, #624]	; (b910 <paramLookup+0xc54>)
    b6a0:	601a      	str	r2, [r3, #0]
    b6a2:	1c3b      	adds	r3, r7, #0
    b6a4:	3308      	adds	r3, #8
    b6a6:	2204      	movs	r2, #4
    b6a8:	711a      	strb	r2, [r3, #4]
    b6aa:	e116      	b.n	b8da <paramLookup+0xc1e>
		case 153:	varInfo.pAddr = &fan1ErrorCount;				varInfo.size = sizeof(fan1ErrorCount);					break;
    b6ac:	1c3b      	adds	r3, r7, #0
    b6ae:	3308      	adds	r3, #8
    b6b0:	4a98      	ldr	r2, [pc, #608]	; (b914 <paramLookup+0xc58>)
    b6b2:	601a      	str	r2, [r3, #0]
    b6b4:	1c3b      	adds	r3, r7, #0
    b6b6:	3308      	adds	r3, #8
    b6b8:	2202      	movs	r2, #2
    b6ba:	711a      	strb	r2, [r3, #4]
    b6bc:	e10d      	b.n	b8da <paramLookup+0xc1e>
		case 154:	varInfo.pAddr = &fan2ErrorCount;				varInfo.size = sizeof(fan2ErrorCount);					break;
    b6be:	1c3b      	adds	r3, r7, #0
    b6c0:	3308      	adds	r3, #8
    b6c2:	4a95      	ldr	r2, [pc, #596]	; (b918 <paramLookup+0xc5c>)
    b6c4:	601a      	str	r2, [r3, #0]
    b6c6:	1c3b      	adds	r3, r7, #0
    b6c8:	3308      	adds	r3, #8
    b6ca:	2202      	movs	r2, #2
    b6cc:	711a      	strb	r2, [r3, #4]
    b6ce:	e104      	b.n	b8da <paramLookup+0xc1e>
		case 155:	varInfo.pAddr = &fan4ErrorCount;				varInfo.size = sizeof(fan4ErrorCount);					break;		
    b6d0:	1c3b      	adds	r3, r7, #0
    b6d2:	3308      	adds	r3, #8
    b6d4:	4a91      	ldr	r2, [pc, #580]	; (b91c <paramLookup+0xc60>)
    b6d6:	601a      	str	r2, [r3, #0]
    b6d8:	1c3b      	adds	r3, r7, #0
    b6da:	3308      	adds	r3, #8
    b6dc:	2202      	movs	r2, #2
    b6de:	711a      	strb	r2, [r3, #4]
    b6e0:	e0fb      	b.n	b8da <paramLookup+0xc1e>
		case 156:	varInfo.pAddr = &fan1LowSpdErrCnt;				varInfo.size = sizeof(fan1LowSpdErrCnt);				break;
    b6e2:	1c3b      	adds	r3, r7, #0
    b6e4:	3308      	adds	r3, #8
    b6e6:	4a8e      	ldr	r2, [pc, #568]	; (b920 <paramLookup+0xc64>)
    b6e8:	601a      	str	r2, [r3, #0]
    b6ea:	1c3b      	adds	r3, r7, #0
    b6ec:	3308      	adds	r3, #8
    b6ee:	2202      	movs	r2, #2
    b6f0:	711a      	strb	r2, [r3, #4]
    b6f2:	e0f2      	b.n	b8da <paramLookup+0xc1e>
		case 157:	varInfo.pAddr = &fan2LowSpdErrCnt;				varInfo.size = sizeof(fan2LowSpdErrCnt);				break;
    b6f4:	1c3b      	adds	r3, r7, #0
    b6f6:	3308      	adds	r3, #8
    b6f8:	4a8a      	ldr	r2, [pc, #552]	; (b924 <paramLookup+0xc68>)
    b6fa:	601a      	str	r2, [r3, #0]
    b6fc:	1c3b      	adds	r3, r7, #0
    b6fe:	3308      	adds	r3, #8
    b700:	2202      	movs	r2, #2
    b702:	711a      	strb	r2, [r3, #4]
    b704:	e0e9      	b.n	b8da <paramLookup+0xc1e>
		case 158:	varInfo.pAddr = &fan4LowSpdErrCnt;				varInfo.size = sizeof(fan4LowSpdErrCnt);				break;
    b706:	1c3b      	adds	r3, r7, #0
    b708:	3308      	adds	r3, #8
    b70a:	4a87      	ldr	r2, [pc, #540]	; (b928 <paramLookup+0xc6c>)
    b70c:	601a      	str	r2, [r3, #0]
    b70e:	1c3b      	adds	r3, r7, #0
    b710:	3308      	adds	r3, #8
    b712:	2202      	movs	r2, #2
    b714:	711a      	strb	r2, [r3, #4]
    b716:	e0e0      	b.n	b8da <paramLookup+0xc1e>
		case 159:	varInfo.pAddr = &maxPhpErrorCount;				varInfo.size = sizeof(maxPhpErrorCount);				break;
    b718:	1c3b      	adds	r3, r7, #0
    b71a:	3308      	adds	r3, #8
    b71c:	4a83      	ldr	r2, [pc, #524]	; (b92c <paramLookup+0xc70>)
    b71e:	601a      	str	r2, [r3, #0]
    b720:	1c3b      	adds	r3, r7, #0
    b722:	3308      	adds	r3, #8
    b724:	2202      	movs	r2, #2
    b726:	711a      	strb	r2, [r3, #4]
    b728:	e0d7      	b.n	b8da <paramLookup+0xc1e>
		case 160:	varInfo.pAddr = &phpNominalResistance;			varInfo.size = sizeof(phpNominalResistance);			break;
    b72a:	1c3b      	adds	r3, r7, #0
    b72c:	3308      	adds	r3, #8
    b72e:	4a80      	ldr	r2, [pc, #512]	; (b930 <paramLookup+0xc74>)
    b730:	601a      	str	r2, [r3, #0]
    b732:	1c3b      	adds	r3, r7, #0
    b734:	3308      	adds	r3, #8
    b736:	2204      	movs	r2, #4
    b738:	711a      	strb	r2, [r3, #4]
    b73a:	e0ce      	b.n	b8da <paramLookup+0xc1e>
		case 161:	varInfo.pAddr = &phpResTolPercentage;			varInfo.size = sizeof(phpResTolPercentage);				break;
    b73c:	1c3b      	adds	r3, r7, #0
    b73e:	3308      	adds	r3, #8
    b740:	4a7c      	ldr	r2, [pc, #496]	; (b934 <paramLookup+0xc78>)
    b742:	601a      	str	r2, [r3, #0]
    b744:	1c3b      	adds	r3, r7, #0
    b746:	3308      	adds	r3, #8
    b748:	2204      	movs	r2, #4
    b74a:	711a      	strb	r2, [r3, #4]
    b74c:	e0c5      	b.n	b8da <paramLookup+0xc1e>
		case 162:	varInfo.pAddr = &php1TotalErrorCount;			varInfo.size = sizeof(php1TotalErrorCount);				break;
    b74e:	1c3b      	adds	r3, r7, #0
    b750:	3308      	adds	r3, #8
    b752:	4a79      	ldr	r2, [pc, #484]	; (b938 <paramLookup+0xc7c>)
    b754:	601a      	str	r2, [r3, #0]
    b756:	1c3b      	adds	r3, r7, #0
    b758:	3308      	adds	r3, #8
    b75a:	2202      	movs	r2, #2
    b75c:	711a      	strb	r2, [r3, #4]
    b75e:	e0bc      	b.n	b8da <paramLookup+0xc1e>
		case 163:	varInfo.pAddr = &php2TotalErrorCount;			varInfo.size = sizeof(php2TotalErrorCount);				break;
    b760:	1c3b      	adds	r3, r7, #0
    b762:	3308      	adds	r3, #8
    b764:	4a75      	ldr	r2, [pc, #468]	; (b93c <paramLookup+0xc80>)
    b766:	601a      	str	r2, [r3, #0]
    b768:	1c3b      	adds	r3, r7, #0
    b76a:	3308      	adds	r3, #8
    b76c:	2202      	movs	r2, #2
    b76e:	711a      	strb	r2, [r3, #4]
    b770:	e0b3      	b.n	b8da <paramLookup+0xc1e>
		case 164:	varInfo.pAddr = &php1CurrentLwrLimSetting;		varInfo.size = sizeof(php1CurrentLwrLimSetting);		break;
    b772:	1c3b      	adds	r3, r7, #0
    b774:	3308      	adds	r3, #8
    b776:	4a72      	ldr	r2, [pc, #456]	; (b940 <paramLookup+0xc84>)
    b778:	601a      	str	r2, [r3, #0]
    b77a:	1c3b      	adds	r3, r7, #0
    b77c:	3308      	adds	r3, #8
    b77e:	2204      	movs	r2, #4
    b780:	711a      	strb	r2, [r3, #4]
    b782:	e0aa      	b.n	b8da <paramLookup+0xc1e>
		case 165:	varInfo.pAddr = &php2CurrentLwrLimSetting;		varInfo.size = sizeof(php2CurrentLwrLimSetting);		break;
    b784:	1c3b      	adds	r3, r7, #0
    b786:	3308      	adds	r3, #8
    b788:	4a6e      	ldr	r2, [pc, #440]	; (b944 <paramLookup+0xc88>)
    b78a:	601a      	str	r2, [r3, #0]
    b78c:	1c3b      	adds	r3, r7, #0
    b78e:	3308      	adds	r3, #8
    b790:	2204      	movs	r2, #4
    b792:	711a      	strb	r2, [r3, #4]
    b794:	e0a1      	b.n	b8da <paramLookup+0xc1e>
		case 166:   varInfo.pAddr = &enablePhpCurrentToleranceCheck;varInfo.size = sizeof(enablePhpCurrentToleranceCheck);	break;		
    b796:	1c3b      	adds	r3, r7, #0
    b798:	3308      	adds	r3, #8
    b79a:	4a6b      	ldr	r2, [pc, #428]	; (b948 <paramLookup+0xc8c>)
    b79c:	601a      	str	r2, [r3, #0]
    b79e:	1c3b      	adds	r3, r7, #0
    b7a0:	3308      	adds	r3, #8
    b7a2:	2201      	movs	r2, #1
    b7a4:	711a      	strb	r2, [r3, #4]
    b7a6:	e098      	b.n	b8da <paramLookup+0xc1e>
 		case 167:   varInfo.pAddr = &phpChk_lastI1lim;				varInfo.size = sizeof(phpChk_lastI1lim);				break;
    b7a8:	1c3b      	adds	r3, r7, #0
    b7aa:	3308      	adds	r3, #8
    b7ac:	4a67      	ldr	r2, [pc, #412]	; (b94c <paramLookup+0xc90>)
    b7ae:	601a      	str	r2, [r3, #0]
    b7b0:	1c3b      	adds	r3, r7, #0
    b7b2:	3308      	adds	r3, #8
    b7b4:	2204      	movs	r2, #4
    b7b6:	711a      	strb	r2, [r3, #4]
    b7b8:	e08f      	b.n	b8da <paramLookup+0xc1e>
 		case 168:   varInfo.pAddr = &phpChk_lastI1;					varInfo.size = sizeof(phpChk_lastI1);					break;
    b7ba:	1c3b      	adds	r3, r7, #0
    b7bc:	3308      	adds	r3, #8
    b7be:	4a64      	ldr	r2, [pc, #400]	; (b950 <paramLookup+0xc94>)
    b7c0:	601a      	str	r2, [r3, #0]
    b7c2:	1c3b      	adds	r3, r7, #0
    b7c4:	3308      	adds	r3, #8
    b7c6:	2204      	movs	r2, #4
    b7c8:	711a      	strb	r2, [r3, #4]
    b7ca:	e086      	b.n	b8da <paramLookup+0xc1e>
 		case 169:   varInfo.pAddr = &phpChk_lastV1;					varInfo.size = sizeof(phpChk_lastV1);					break;
    b7cc:	1c3b      	adds	r3, r7, #0
    b7ce:	3308      	adds	r3, #8
    b7d0:	4a60      	ldr	r2, [pc, #384]	; (b954 <paramLookup+0xc98>)
    b7d2:	601a      	str	r2, [r3, #0]
    b7d4:	1c3b      	adds	r3, r7, #0
    b7d6:	3308      	adds	r3, #8
    b7d8:	2204      	movs	r2, #4
    b7da:	711a      	strb	r2, [r3, #4]
    b7dc:	e07d      	b.n	b8da <paramLookup+0xc1e>
 		case 170:   varInfo.pAddr = &phpChk_lastI2lim;				varInfo.size = sizeof(phpChk_lastI2lim);				break;
    b7de:	1c3b      	adds	r3, r7, #0
    b7e0:	3308      	adds	r3, #8
    b7e2:	4a5d      	ldr	r2, [pc, #372]	; (b958 <paramLookup+0xc9c>)
    b7e4:	601a      	str	r2, [r3, #0]
    b7e6:	1c3b      	adds	r3, r7, #0
    b7e8:	3308      	adds	r3, #8
    b7ea:	2204      	movs	r2, #4
    b7ec:	711a      	strb	r2, [r3, #4]
    b7ee:	e074      	b.n	b8da <paramLookup+0xc1e>
 		case 171:   varInfo.pAddr = &phpChk_lastI2;					varInfo.size = sizeof(phpChk_lastI2);					break;
    b7f0:	1c3b      	adds	r3, r7, #0
    b7f2:	3308      	adds	r3, #8
    b7f4:	4a59      	ldr	r2, [pc, #356]	; (b95c <paramLookup+0xca0>)
    b7f6:	601a      	str	r2, [r3, #0]
    b7f8:	1c3b      	adds	r3, r7, #0
    b7fa:	3308      	adds	r3, #8
    b7fc:	2204      	movs	r2, #4
    b7fe:	711a      	strb	r2, [r3, #4]
    b800:	e06b      	b.n	b8da <paramLookup+0xc1e>
 		case 172:   varInfo.pAddr = &phpChk_lastV2;					varInfo.size = sizeof(phpChk_lastV2);					break;
    b802:	1c3b      	adds	r3, r7, #0
    b804:	3308      	adds	r3, #8
    b806:	4a56      	ldr	r2, [pc, #344]	; (b960 <paramLookup+0xca4>)
    b808:	601a      	str	r2, [r3, #0]
    b80a:	1c3b      	adds	r3, r7, #0
    b80c:	3308      	adds	r3, #8
    b80e:	2204      	movs	r2, #4
    b810:	711a      	strb	r2, [r3, #4]
    b812:	e062      	b.n	b8da <paramLookup+0xc1e>
		case 173:	varInfo.pAddr = &phpChkTimeIntervalInSecs;		varInfo.size = sizeof(phpChkTimeIntervalInSecs);		break;
    b814:	1c3b      	adds	r3, r7, #0
    b816:	3308      	adds	r3, #8
    b818:	4a52      	ldr	r2, [pc, #328]	; (b964 <paramLookup+0xca8>)
    b81a:	601a      	str	r2, [r3, #0]
    b81c:	1c3b      	adds	r3, r7, #0
    b81e:	3308      	adds	r3, #8
    b820:	2202      	movs	r2, #2
    b822:	711a      	strb	r2, [r3, #4]
    b824:	e059      	b.n	b8da <paramLookup+0xc1e>
		case 174:	varInfo.pAddr = &firmwareRevision;				varInfo.size = sizeof(firmwareRevision);				break;
    b826:	1c3b      	adds	r3, r7, #0
    b828:	3308      	adds	r3, #8
    b82a:	4a4f      	ldr	r2, [pc, #316]	; (b968 <paramLookup+0xcac>)
    b82c:	601a      	str	r2, [r3, #0]
    b82e:	1c3b      	adds	r3, r7, #0
    b830:	3308      	adds	r3, #8
    b832:	2201      	movs	r2, #1
    b834:	711a      	strb	r2, [r3, #4]
    b836:	e050      	b.n	b8da <paramLookup+0xc1e>
		case 175:	varInfo.pAddr = &defrostCancelTemp;				varInfo.size = sizeof(defrostCancelTemp);				break;
    b838:	1c3b      	adds	r3, r7, #0
    b83a:	3308      	adds	r3, #8
    b83c:	4a4b      	ldr	r2, [pc, #300]	; (b96c <paramLookup+0xcb0>)
    b83e:	601a      	str	r2, [r3, #0]
    b840:	1c3b      	adds	r3, r7, #0
    b842:	3308      	adds	r3, #8
    b844:	2204      	movs	r2, #4
    b846:	711a      	strb	r2, [r3, #4]
    b848:	e047      	b.n	b8da <paramLookup+0xc1e>
		case 176:	varInfo.pAddr = &pwrCapTimeoutInMins;			varInfo.size = sizeof(pwrCapTimeoutInMins);				break;
    b84a:	1c3b      	adds	r3, r7, #0
    b84c:	3308      	adds	r3, #8
    b84e:	4a48      	ldr	r2, [pc, #288]	; (b970 <paramLookup+0xcb4>)
    b850:	601a      	str	r2, [r3, #0]
    b852:	1c3b      	adds	r3, r7, #0
    b854:	3308      	adds	r3, #8
    b856:	2202      	movs	r2, #2
    b858:	711a      	strb	r2, [r3, #4]
    b85a:	e03e      	b.n	b8da <paramLookup+0xc1e>
		case 177:	varInfo.pAddr = &php1CurrentDiffLim;			varInfo.size = sizeof(php1CurrentDiffLim);				break;
    b85c:	1c3b      	adds	r3, r7, #0
    b85e:	3308      	adds	r3, #8
    b860:	4a44      	ldr	r2, [pc, #272]	; (b974 <paramLookup+0xcb8>)
    b862:	601a      	str	r2, [r3, #0]
    b864:	1c3b      	adds	r3, r7, #0
    b866:	3308      	adds	r3, #8
    b868:	2204      	movs	r2, #4
    b86a:	711a      	strb	r2, [r3, #4]
    b86c:	e035      	b.n	b8da <paramLookup+0xc1e>
		case 178:	varInfo.pAddr = &php2CurrentDiffLim;			varInfo.size = sizeof(php2CurrentDiffLim);				break;	
    b86e:	1c3b      	adds	r3, r7, #0
    b870:	3308      	adds	r3, #8
    b872:	4a41      	ldr	r2, [pc, #260]	; (b978 <paramLookup+0xcbc>)
    b874:	601a      	str	r2, [r3, #0]
    b876:	1c3b      	adds	r3, r7, #0
    b878:	3308      	adds	r3, #8
    b87a:	2204      	movs	r2, #4
    b87c:	711a      	strb	r2, [r3, #4]
    b87e:	e02c      	b.n	b8da <paramLookup+0xc1e>
		case 179:   varInfo.pAddr = &doorOpenLifetimeCnt_hi;		varInfo.size = sizeof(doorOpenLifetimeCnt_hi);			break;			
    b880:	1c3b      	adds	r3, r7, #0
    b882:	3308      	adds	r3, #8
    b884:	4a3d      	ldr	r2, [pc, #244]	; (b97c <paramLookup+0xcc0>)
    b886:	601a      	str	r2, [r3, #0]
    b888:	1c3b      	adds	r3, r7, #0
    b88a:	3308      	adds	r3, #8
    b88c:	2202      	movs	r2, #2
    b88e:	711a      	strb	r2, [r3, #4]
    b890:	e023      	b.n	b8da <paramLookup+0xc1e>
		case 180:   varInfo.pAddr = &doorOpenLifetimeCnt_lo;		varInfo.size = sizeof(doorOpenLifetimeCnt_lo);			break;
    b892:	1c3b      	adds	r3, r7, #0
    b894:	3308      	adds	r3, #8
    b896:	4a3a      	ldr	r2, [pc, #232]	; (b980 <paramLookup+0xcc4>)
    b898:	601a      	str	r2, [r3, #0]
    b89a:	1c3b      	adds	r3, r7, #0
    b89c:	3308      	adds	r3, #8
    b89e:	2202      	movs	r2, #2
    b8a0:	711a      	strb	r2, [r3, #4]
    b8a2:	e01a      	b.n	b8da <paramLookup+0xc1e>
		case 181:   varInfo.pAddr = &highUsageModeFlag;				varInfo.size = sizeof(highUsageModeFlag);				break;
    b8a4:	1c3b      	adds	r3, r7, #0
    b8a6:	3308      	adds	r3, #8
    b8a8:	4a36      	ldr	r2, [pc, #216]	; (b984 <paramLookup+0xcc8>)
    b8aa:	601a      	str	r2, [r3, #0]
    b8ac:	1c3b      	adds	r3, r7, #0
    b8ae:	3308      	adds	r3, #8
    b8b0:	2201      	movs	r2, #1
    b8b2:	711a      	strb	r2, [r3, #4]
    b8b4:	e011      	b.n	b8da <paramLookup+0xc1e>
		case 182:   varInfo.pAddr = &doorOpenCount1HrLimit;			varInfo.size = sizeof(doorOpenCount1HrLimit);			break;
    b8b6:	1c3b      	adds	r3, r7, #0
    b8b8:	3308      	adds	r3, #8
    b8ba:	4a33      	ldr	r2, [pc, #204]	; (b988 <paramLookup+0xccc>)
    b8bc:	601a      	str	r2, [r3, #0]
    b8be:	1c3b      	adds	r3, r7, #0
    b8c0:	3308      	adds	r3, #8
    b8c2:	2202      	movs	r2, #2
    b8c4:	711a      	strb	r2, [r3, #4]
    b8c6:	e008      	b.n	b8da <paramLookup+0xc1e>
				
		default:	varInfo.pAddr = &chamber1.setpoint;				varInfo.size = sizeof(chamber1.setpoint);				break;
    b8c8:	1c3b      	adds	r3, r7, #0
    b8ca:	3308      	adds	r3, #8
    b8cc:	4a2f      	ldr	r2, [pc, #188]	; (b98c <paramLookup+0xcd0>)
    b8ce:	601a      	str	r2, [r3, #0]
    b8d0:	1c3b      	adds	r3, r7, #0
    b8d2:	3308      	adds	r3, #8
    b8d4:	2204      	movs	r2, #4
    b8d6:	711a      	strb	r2, [r3, #4]
    b8d8:	46c0      	nop			; (mov r8, r8)
	}
	
	return varInfo;
    b8da:	687b      	ldr	r3, [r7, #4]
    b8dc:	1c3a      	adds	r2, r7, #0
    b8de:	3208      	adds	r2, #8
    b8e0:	ca03      	ldmia	r2!, {r0, r1}
    b8e2:	c303      	stmia	r3!, {r0, r1}
	
}
    b8e4:	6878      	ldr	r0, [r7, #4]
    b8e6:	46bd      	mov	sp, r7
    b8e8:	b004      	add	sp, #16
    b8ea:	bd80      	pop	{r7, pc}
    b8ec:	20000b24 	.word	0x20000b24
    b8f0:	20000164 	.word	0x20000164
    b8f4:	2000018c 	.word	0x2000018c
    b8f8:	2000018e 	.word	0x2000018e
    b8fc:	20000354 	.word	0x20000354
    b900:	20000356 	.word	0x20000356
    b904:	20000358 	.word	0x20000358
    b908:	2000035a 	.word	0x2000035a
    b90c:	2000003a 	.word	0x2000003a
    b910:	2000003c 	.word	0x2000003c
    b914:	200002ba 	.word	0x200002ba
    b918:	200002bc 	.word	0x200002bc
    b91c:	200002be 	.word	0x200002be
    b920:	200002c0 	.word	0x200002c0
    b924:	200002c2 	.word	0x200002c2
    b928:	200002c4 	.word	0x200002c4
    b92c:	20000064 	.word	0x20000064
    b930:	20000068 	.word	0x20000068
    b934:	2000006c 	.word	0x2000006c
    b938:	200002fc 	.word	0x200002fc
    b93c:	200002fe 	.word	0x200002fe
    b940:	20000070 	.word	0x20000070
    b944:	20000074 	.word	0x20000074
    b948:	20000314 	.word	0x20000314
    b94c:	20000318 	.word	0x20000318
    b950:	2000031c 	.word	0x2000031c
    b954:	20000320 	.word	0x20000320
    b958:	20000324 	.word	0x20000324
    b95c:	20000328 	.word	0x20000328
    b960:	2000032c 	.word	0x2000032c
    b964:	20000080 	.word	0x20000080
    b968:	20000e0c 	.word	0x20000e0c
    b96c:	2000080c 	.word	0x2000080c
    b970:	20000092 	.word	0x20000092
    b974:	20000078 	.word	0x20000078
    b978:	2000007c 	.word	0x2000007c
    b97c:	20000336 	.word	0x20000336
    b980:	20000338 	.word	0x20000338
    b984:	20000377 	.word	0x20000377
    b988:	20000166 	.word	0x20000166
    b98c:	200009d0 	.word	0x200009d0

0000b990 <i2cCommandHandler>:

void i2cCommandHandler()
{
    b990:	b580      	push	{r7, lr}
    b992:	af00      	add	r7, sp, #0
	dbg_info("\n[i2cFunction %x]", i2cFunctionReg);
    b994:	4b20      	ldr	r3, [pc, #128]	; (ba18 <i2cCommandHandler+0x88>)
    b996:	781b      	ldrb	r3, [r3, #0]
    b998:	4a20      	ldr	r2, [pc, #128]	; (ba1c <i2cCommandHandler+0x8c>)
    b99a:	1c10      	adds	r0, r2, #0
    b99c:	1c19      	adds	r1, r3, #0
    b99e:	4b20      	ldr	r3, [pc, #128]	; (ba20 <i2cCommandHandler+0x90>)
    b9a0:	4798      	blx	r3
			
	switch (i2cFunctionReg)
    b9a2:	4b1d      	ldr	r3, [pc, #116]	; (ba18 <i2cCommandHandler+0x88>)
    b9a4:	781b      	ldrb	r3, [r3, #0]
    b9a6:	3ba5      	subs	r3, #165	; 0xa5
    b9a8:	2b30      	cmp	r3, #48	; 0x30
    b9aa:	d831      	bhi.n	ba10 <i2cCommandHandler+0x80>
    b9ac:	009a      	lsls	r2, r3, #2
    b9ae:	4b1d      	ldr	r3, [pc, #116]	; (ba24 <i2cCommandHandler+0x94>)
    b9b0:	18d3      	adds	r3, r2, r3
    b9b2:	681b      	ldr	r3, [r3, #0]
    b9b4:	469f      	mov	pc, r3
	{
		// read sensors (for battery backup)
		case 0xa5:
			port_pin_set_output_level_EX(PIN_RDY_N, HIGH, enableManualOverride);
    b9b6:	4b1c      	ldr	r3, [pc, #112]	; (ba28 <i2cCommandHandler+0x98>)
    b9b8:	781b      	ldrb	r3, [r3, #0]
    b9ba:	201c      	movs	r0, #28
    b9bc:	2101      	movs	r1, #1
    b9be:	1c1a      	adds	r2, r3, #0
    b9c0:	4b1a      	ldr	r3, [pc, #104]	; (ba2c <i2cCommandHandler+0x9c>)
    b9c2:	4798      	blx	r3
			readSensors();
    b9c4:	4b1a      	ldr	r3, [pc, #104]	; (ba30 <i2cCommandHandler+0xa0>)
    b9c6:	4798      	blx	r3
			port_pin_set_output_level_EX(PIN_RDY_N,  LOW, enableManualOverride);
    b9c8:	4b17      	ldr	r3, [pc, #92]	; (ba28 <i2cCommandHandler+0x98>)
    b9ca:	781b      	ldrb	r3, [r3, #0]
    b9cc:	201c      	movs	r0, #28
    b9ce:	2100      	movs	r1, #0
    b9d0:	1c1a      	adds	r2, r3, #0
    b9d2:	4b16      	ldr	r3, [pc, #88]	; (ba2c <i2cCommandHandler+0x9c>)
    b9d4:	4798      	blx	r3
			delay_ms(100);
    b9d6:	2064      	movs	r0, #100	; 0x64
    b9d8:	4b16      	ldr	r3, [pc, #88]	; (ba34 <i2cCommandHandler+0xa4>)
    b9da:	4798      	blx	r3
			break;
    b9dc:	e019      	b.n	ba12 <i2cCommandHandler+0x82>
			lowPowerModeEnter();
			break;
#endif
		// initiate defrost
		case 0xc5:
			setDefrostState(DEFROST_START);
    b9de:	2000      	movs	r0, #0
    b9e0:	4b15      	ldr	r3, [pc, #84]	; (ba38 <i2cCommandHandler+0xa8>)
    b9e2:	4798      	blx	r3
			break;
    b9e4:	e015      	b.n	ba12 <i2cCommandHandler+0x82>

		// cancel defrost
		case 0xc6:
			setDefrostState(DEFROST_CANCEL);
    b9e6:	2002      	movs	r0, #2
    b9e8:	4b13      	ldr	r3, [pc, #76]	; (ba38 <i2cCommandHandler+0xa8>)
    b9ea:	4798      	blx	r3
			break;
    b9ec:	e011      	b.n	ba12 <i2cCommandHandler+0x82>
		
		// reset defrost timer	
		case 0xc7:
			initDefrost();
    b9ee:	4b13      	ldr	r3, [pc, #76]	; (ba3c <i2cCommandHandler+0xac>)
    b9f0:	4798      	blx	r3
			dbg("\n[defrost init]\n");
    b9f2:	4b13      	ldr	r3, [pc, #76]	; (ba40 <i2cCommandHandler+0xb0>)
    b9f4:	1c18      	adds	r0, r3, #0
    b9f6:	4b13      	ldr	r3, [pc, #76]	; (ba44 <i2cCommandHandler+0xb4>)
    b9f8:	4798      	blx	r3
			break;
    b9fa:	e00a      	b.n	ba12 <i2cCommandHandler+0x82>
			
		// run selfTest
		case 0xca:
			selfTest();
    b9fc:	4b12      	ldr	r3, [pc, #72]	; (ba48 <i2cCommandHandler+0xb8>)
    b9fe:	4798      	blx	r3
			break;
    ba00:	e007      	b.n	ba12 <i2cCommandHandler+0x82>
			//phpCheckCurrentOutOfBounds();
			break;	
				
		// reset
		case 0xd5:
			dbg("\n[soft reset now!]\n");
    ba02:	4b12      	ldr	r3, [pc, #72]	; (ba4c <i2cCommandHandler+0xbc>)
    ba04:	1c18      	adds	r0, r3, #0
    ba06:	4b0f      	ldr	r3, [pc, #60]	; (ba44 <i2cCommandHandler+0xb4>)
    ba08:	4798      	blx	r3
			system_reset();
    ba0a:	4b11      	ldr	r3, [pc, #68]	; (ba50 <i2cCommandHandler+0xc0>)
    ba0c:	4798      	blx	r3
			break;
    ba0e:	e000      	b.n	ba12 <i2cCommandHandler+0x82>
				
		default:
			break;
    ba10:	46c0      	nop			; (mov r8, r8)
	}
}
    ba12:	46bd      	mov	sp, r7
    ba14:	bd80      	pop	{r7, pc}
    ba16:	46c0      	nop			; (mov r8, r8)
    ba18:	20000330 	.word	0x20000330
    ba1c:	00024d10 	.word	0x00024d10
    ba20:	0001b62d 	.word	0x0001b62d
    ba24:	00025024 	.word	0x00025024
    ba28:	20000372 	.word	0x20000372
    ba2c:	0000ac71 	.word	0x0000ac71
    ba30:	0000dde1 	.word	0x0000dde1
    ba34:	000105b1 	.word	0x000105b1
    ba38:	00004dc5 	.word	0x00004dc5
    ba3c:	00004cf1 	.word	0x00004cf1
    ba40:	00024d24 	.word	0x00024d24
    ba44:	0001b899 	.word	0x0001b899
    ba48:	0000c021 	.word	0x0000c021
    ba4c:	00024d34 	.word	0x00024d34
    ba50:	0000abe9 	.word	0x0000abe9

0000ba54 <checkCRC>:
	return retValue;
}
*/

bool checkCRC (unsigned char* pInputBuf, uint32_t nNumBytes)
{
    ba54:	b580      	push	{r7, lr}
    ba56:	b086      	sub	sp, #24
    ba58:	af00      	add	r7, sp, #0
    ba5a:	6078      	str	r0, [r7, #4]
    ba5c:	6039      	str	r1, [r7, #0]
	uint8_t crcCheck = 0;
    ba5e:	1c3b      	adds	r3, r7, #0
    ba60:	3317      	adds	r3, #23
    ba62:	2200      	movs	r2, #0
    ba64:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	bool bCRCPass = false;
    ba66:	1c3b      	adds	r3, r7, #0
    ba68:	330f      	adds	r3, #15
    ba6a:	2200      	movs	r2, #0
    ba6c:	701a      	strb	r2, [r3, #0]
	
	if(nNumBytes == PROTOCOL_BUFR_SIZE)
    ba6e:	683b      	ldr	r3, [r7, #0]
    ba70:	2b05      	cmp	r3, #5
    ba72:	d123      	bne.n	babc <checkCRC+0x68>
	{
		//this needs to be quick
		for (i = 0; i < nNumBytes-1; i++)
    ba74:	2300      	movs	r3, #0
    ba76:	613b      	str	r3, [r7, #16]
    ba78:	e00d      	b.n	ba96 <checkCRC+0x42>
		{
			crcCheck ^= pInputBuf[i];
    ba7a:	687a      	ldr	r2, [r7, #4]
    ba7c:	693b      	ldr	r3, [r7, #16]
    ba7e:	18d3      	adds	r3, r2, r3
    ba80:	7819      	ldrb	r1, [r3, #0]
    ba82:	1c3b      	adds	r3, r7, #0
    ba84:	3317      	adds	r3, #23
    ba86:	1c3a      	adds	r2, r7, #0
    ba88:	3217      	adds	r2, #23
    ba8a:	7812      	ldrb	r2, [r2, #0]
    ba8c:	404a      	eors	r2, r1
    ba8e:	701a      	strb	r2, [r3, #0]
	bool bCRCPass = false;
	
	if(nNumBytes == PROTOCOL_BUFR_SIZE)
	{
		//this needs to be quick
		for (i = 0; i < nNumBytes-1; i++)
    ba90:	693b      	ldr	r3, [r7, #16]
    ba92:	3301      	adds	r3, #1
    ba94:	613b      	str	r3, [r7, #16]
    ba96:	683b      	ldr	r3, [r7, #0]
    ba98:	1e5a      	subs	r2, r3, #1
    ba9a:	693b      	ldr	r3, [r7, #16]
    ba9c:	429a      	cmp	r2, r3
    ba9e:	d8ec      	bhi.n	ba7a <checkCRC+0x26>
		{
			crcCheck ^= pInputBuf[i];
		}
	
		if (crcCheck == pInputBuf[nNumBytes-1])
    baa0:	683b      	ldr	r3, [r7, #0]
    baa2:	3b01      	subs	r3, #1
    baa4:	687a      	ldr	r2, [r7, #4]
    baa6:	18d3      	adds	r3, r2, r3
    baa8:	781b      	ldrb	r3, [r3, #0]
    baaa:	1c3a      	adds	r2, r7, #0
    baac:	3217      	adds	r2, #23
    baae:	7812      	ldrb	r2, [r2, #0]
    bab0:	429a      	cmp	r2, r3
    bab2:	d103      	bne.n	babc <checkCRC+0x68>
		{
			bCRCPass = true;
    bab4:	1c3b      	adds	r3, r7, #0
    bab6:	330f      	adds	r3, #15
    bab8:	2201      	movs	r2, #1
    baba:	701a      	strb	r2, [r3, #0]
		}
	}
	
	return bCRCPass;
    babc:	1c3b      	adds	r3, r7, #0
    babe:	330f      	adds	r3, #15
    bac0:	781b      	ldrb	r3, [r3, #0]
}
    bac2:	1c18      	adds	r0, r3, #0
    bac4:	46bd      	mov	sp, r7
    bac6:	b006      	add	sp, #24
    bac8:	bd80      	pop	{r7, pc}
    baca:	46c0      	nop			; (mov r8, r8)

0000bacc <calcCRC>:

uint8_t calcCRC (unsigned char* pInputBuf, uint32_t nNumBytes)
{
    bacc:	b580      	push	{r7, lr}
    bace:	b084      	sub	sp, #16
    bad0:	af00      	add	r7, sp, #0
    bad2:	6078      	str	r0, [r7, #4]
    bad4:	6039      	str	r1, [r7, #0]
	uint8_t crcCheck = 0;
    bad6:	1c3b      	adds	r3, r7, #0
    bad8:	330f      	adds	r3, #15
    bada:	2200      	movs	r2, #0
    badc:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	//this needs to be quick
	for (i = 0; i < nNumBytes; i++)
    bade:	2300      	movs	r3, #0
    bae0:	60bb      	str	r3, [r7, #8]
    bae2:	e00d      	b.n	bb00 <calcCRC+0x34>
	{
		crcCheck ^= pInputBuf[i];
    bae4:	687a      	ldr	r2, [r7, #4]
    bae6:	68bb      	ldr	r3, [r7, #8]
    bae8:	18d3      	adds	r3, r2, r3
    baea:	7819      	ldrb	r1, [r3, #0]
    baec:	1c3b      	adds	r3, r7, #0
    baee:	330f      	adds	r3, #15
    baf0:	1c3a      	adds	r2, r7, #0
    baf2:	320f      	adds	r2, #15
    baf4:	7812      	ldrb	r2, [r2, #0]
    baf6:	404a      	eors	r2, r1
    baf8:	701a      	strb	r2, [r3, #0]
uint8_t calcCRC (unsigned char* pInputBuf, uint32_t nNumBytes)
{
	uint8_t crcCheck = 0;
	uint32_t i;
	//this needs to be quick
	for (i = 0; i < nNumBytes; i++)
    bafa:	68bb      	ldr	r3, [r7, #8]
    bafc:	3301      	adds	r3, #1
    bafe:	60bb      	str	r3, [r7, #8]
    bb00:	68ba      	ldr	r2, [r7, #8]
    bb02:	683b      	ldr	r3, [r7, #0]
    bb04:	429a      	cmp	r2, r3
    bb06:	d3ed      	bcc.n	bae4 <calcCRC+0x18>
	{
		crcCheck ^= pInputBuf[i];
	}
	
	return crcCheck;
    bb08:	1c3b      	adds	r3, r7, #0
    bb0a:	330f      	adds	r3, #15
    bb0c:	781b      	ldrb	r3, [r3, #0]
}
    bb0e:	1c18      	adds	r0, r3, #0
    bb10:	46bd      	mov	sp, r7
    bb12:	b004      	add	sp, #16
    bb14:	bd80      	pop	{r7, pc}
    bb16:	46c0      	nop			; (mov r8, r8)

0000bb18 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
    bb18:	b580      	push	{r7, lr}
    bb1a:	af00      	add	r7, sp, #0
	return test_case_ptr;
    bb1c:	4b02      	ldr	r3, [pc, #8]	; (bb28 <test_get_case+0x10>)
    bb1e:	681b      	ldr	r3, [r3, #0]
}
    bb20:	1c18      	adds	r0, r3, #0
    bb22:	46bd      	mov	sp, r7
    bb24:	bd80      	pop	{r7, pc}
    bb26:	46c0      	nop			; (mov r8, r8)
    bb28:	2000041c 	.word	0x2000041c

0000bb2c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    bb2c:	b580      	push	{r7, lr}
    bb2e:	b082      	sub	sp, #8
    bb30:	af00      	add	r7, sp, #0
    bb32:	1c02      	adds	r2, r0, #0
    bb34:	1dfb      	adds	r3, r7, #7
    bb36:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    bb38:	4b06      	ldr	r3, [pc, #24]	; (bb54 <system_interrupt_enable+0x28>)
    bb3a:	1dfa      	adds	r2, r7, #7
    bb3c:	7812      	ldrb	r2, [r2, #0]
    bb3e:	1c11      	adds	r1, r2, #0
    bb40:	221f      	movs	r2, #31
    bb42:	400a      	ands	r2, r1
    bb44:	2101      	movs	r1, #1
    bb46:	1c08      	adds	r0, r1, #0
    bb48:	4090      	lsls	r0, r2
    bb4a:	1c02      	adds	r2, r0, #0
    bb4c:	601a      	str	r2, [r3, #0]
}
    bb4e:	46bd      	mov	sp, r7
    bb50:	b002      	add	sp, #8
    bb52:	bd80      	pop	{r7, pc}
    bb54:	e000e100 	.word	0xe000e100

0000bb58 <rtc_calendar_is_syncing>:
 *
 * \retval true  if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(void)
{
    bb58:	b580      	push	{r7, lr}
    bb5a:	b082      	sub	sp, #8
    bb5c:	af00      	add	r7, sp, #0
        Rtc *const rtc_module = RTC;
    bb5e:	4b09      	ldr	r3, [pc, #36]	; (bb84 <rtc_calendar_is_syncing+0x2c>)
    bb60:	607b      	str	r3, [r7, #4]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    bb62:	687b      	ldr	r3, [r7, #4]
    bb64:	689b      	ldr	r3, [r3, #8]
    bb66:	021b      	lsls	r3, r3, #8
    bb68:	0e1b      	lsrs	r3, r3, #24
    bb6a:	b2db      	uxtb	r3, r3
    bb6c:	b2db      	uxtb	r3, r3
    bb6e:	b25b      	sxtb	r3, r3
    bb70:	2b00      	cmp	r3, #0
    bb72:	da01      	bge.n	bb78 <rtc_calendar_is_syncing+0x20>
                return true;
    bb74:	2301      	movs	r3, #1
    bb76:	e000      	b.n	bb7a <rtc_calendar_is_syncing+0x22>
        }

        return false;
    bb78:	2300      	movs	r3, #0
}
    bb7a:	1c18      	adds	r0, r3, #0
    bb7c:	46bd      	mov	sp, r7
    bb7e:	b002      	add	sp, #8
    bb80:	bd80      	pop	{r7, pc}
    bb82:	46c0      	nop			; (mov r8, r8)
    bb84:	40001400 	.word	0x40001400

0000bb88 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize.
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
    bb88:	b580      	push	{r7, lr}
    bb8a:	b082      	sub	sp, #8
    bb8c:	af00      	add	r7, sp, #0
    bb8e:	6078      	str	r0, [r7, #4]
	time->second = 0;
    bb90:	687b      	ldr	r3, [r7, #4]
    bb92:	2200      	movs	r2, #0
    bb94:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
    bb96:	687b      	ldr	r3, [r7, #4]
    bb98:	2200      	movs	r2, #0
    bb9a:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
    bb9c:	687b      	ldr	r3, [r7, #4]
    bb9e:	2200      	movs	r2, #0
    bba0:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
    bba2:	687b      	ldr	r3, [r7, #4]
    bba4:	2200      	movs	r2, #0
    bba6:	70da      	strb	r2, [r3, #3]
	time->day 	 = 1;
    bba8:	687b      	ldr	r3, [r7, #4]
    bbaa:	2201      	movs	r2, #1
    bbac:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
    bbae:	687b      	ldr	r3, [r7, #4]
    bbb0:	2201      	movs	r2, #1
    bbb2:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
    bbb4:	687b      	ldr	r3, [r7, #4]
    bbb6:	22fa      	movs	r2, #250	; 0xfa
    bbb8:	00d2      	lsls	r2, r2, #3
    bbba:	80da      	strh	r2, [r3, #6]
}
    bbbc:	46bd      	mov	sp, r7
    bbbe:	b002      	add	sp, #8
    bbc0:	bd80      	pop	{r7, pc}
    bbc2:	46c0      	nop			; (mov r8, r8)

0000bbc4 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values.
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
    bbc4:	b590      	push	{r4, r7, lr}
    bbc6:	b089      	sub	sp, #36	; 0x24
    bbc8:	af02      	add	r7, sp, #8
    bbca:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);
    bbcc:	4b36      	ldr	r3, [pc, #216]	; (bca8 <rtc_calendar_get_config_defaults+0xe4>)
    bbce:	4798      	blx	r3
    bbd0:	1c03      	adds	r3, r0, #0
    bbd2:	2b00      	cmp	r3, #0
    bbd4:	d011      	beq.n	bbfa <rtc_calendar_get_config_defaults+0x36>
    bbd6:	687b      	ldr	r3, [r7, #4]
    bbd8:	2b00      	cmp	r3, #0
    bbda:	d119      	bne.n	bc10 <rtc_calendar_get_config_defaults+0x4c>
    bbdc:	4b32      	ldr	r3, [pc, #200]	; (bca8 <rtc_calendar_get_config_defaults+0xe4>)
    bbde:	4798      	blx	r3
    bbe0:	1c01      	adds	r1, r0, #0
    bbe2:	4a32      	ldr	r2, [pc, #200]	; (bcac <rtc_calendar_get_config_defaults+0xe8>)
    bbe4:	238f      	movs	r3, #143	; 0x8f
    bbe6:	009b      	lsls	r3, r3, #2
    bbe8:	4831      	ldr	r0, [pc, #196]	; (bcb0 <rtc_calendar_get_config_defaults+0xec>)
    bbea:	9000      	str	r0, [sp, #0]
    bbec:	4831      	ldr	r0, [pc, #196]	; (bcb4 <rtc_calendar_get_config_defaults+0xf0>)
    bbee:	9001      	str	r0, [sp, #4]
    bbf0:	1c08      	adds	r0, r1, #0
    bbf2:	2101      	movs	r1, #1
    bbf4:	4c30      	ldr	r4, [pc, #192]	; (bcb8 <rtc_calendar_get_config_defaults+0xf4>)
    bbf6:	47a0      	blx	r4
    bbf8:	e00a      	b.n	bc10 <rtc_calendar_get_config_defaults+0x4c>
    bbfa:	687b      	ldr	r3, [r7, #4]
    bbfc:	2b00      	cmp	r3, #0
    bbfe:	d107      	bne.n	bc10 <rtc_calendar_get_config_defaults+0x4c>
    bc00:	482e      	ldr	r0, [pc, #184]	; (bcbc <rtc_calendar_get_config_defaults+0xf8>)
    bc02:	492c      	ldr	r1, [pc, #176]	; (bcb4 <rtc_calendar_get_config_defaults+0xf0>)
    bc04:	4a29      	ldr	r2, [pc, #164]	; (bcac <rtc_calendar_get_config_defaults+0xe8>)
    bc06:	238f      	movs	r3, #143	; 0x8f
    bc08:	009b      	lsls	r3, r3, #2
    bc0a:	4c2d      	ldr	r4, [pc, #180]	; (bcc0 <rtc_calendar_get_config_defaults+0xfc>)
    bc0c:	47a0      	blx	r4
    bc0e:	e7fe      	b.n	bc0e <rtc_calendar_get_config_defaults+0x4a>

	/* Initialize and set time structure to default. */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
    bc10:	1c3b      	adds	r3, r7, #0
    bc12:	330c      	adds	r3, #12
    bc14:	1c18      	adds	r0, r3, #0
    bc16:	4b2b      	ldr	r3, [pc, #172]	; (bcc4 <rtc_calendar_get_config_defaults+0x100>)
    bc18:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    bc1a:	687b      	ldr	r3, [r7, #4]
    bc1c:	22a0      	movs	r2, #160	; 0xa0
    bc1e:	0112      	lsls	r2, r2, #4
    bc20:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
    bc22:	687b      	ldr	r3, [r7, #4]
    bc24:	2200      	movs	r2, #0
    bc26:	709a      	strb	r2, [r3, #2]
	config->continuously_update = false;
    bc28:	687b      	ldr	r3, [r7, #4]
    bc2a:	2200      	movs	r2, #0
    bc2c:	70da      	strb	r2, [r3, #3]
	config->clock_24h           = false;
    bc2e:	687b      	ldr	r3, [r7, #4]
    bc30:	2200      	movs	r2, #0
    bc32:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
    bc34:	687b      	ldr	r3, [r7, #4]
    bc36:	22fa      	movs	r2, #250	; 0xfa
    bc38:	00d2      	lsls	r2, r2, #3
    bc3a:	80da      	strh	r2, [r3, #6]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    bc3c:	1c3b      	adds	r3, r7, #0
    bc3e:	3317      	adds	r3, #23
    bc40:	2200      	movs	r2, #0
    bc42:	701a      	strb	r2, [r3, #0]
    bc44:	e028      	b.n	bc98 <rtc_calendar_get_config_defaults+0xd4>
		config->alarm[i].time = time;
    bc46:	1c3b      	adds	r3, r7, #0
    bc48:	3317      	adds	r3, #23
    bc4a:	781a      	ldrb	r2, [r3, #0]
    bc4c:	6878      	ldr	r0, [r7, #4]
    bc4e:	2108      	movs	r1, #8
    bc50:	1c13      	adds	r3, r2, #0
    bc52:	009b      	lsls	r3, r3, #2
    bc54:	189b      	adds	r3, r3, r2
    bc56:	005b      	lsls	r3, r3, #1
    bc58:	18c3      	adds	r3, r0, r3
    bc5a:	185a      	adds	r2, r3, r1
    bc5c:	1c3b      	adds	r3, r7, #0
    bc5e:	330c      	adds	r3, #12
    bc60:	1c11      	adds	r1, r2, #0
    bc62:	1c1a      	adds	r2, r3, #0
    bc64:	2308      	movs	r3, #8
    bc66:	1c08      	adds	r0, r1, #0
    bc68:	1c11      	adds	r1, r2, #0
    bc6a:	1c1a      	adds	r2, r3, #0
    bc6c:	4b16      	ldr	r3, [pc, #88]	; (bcc8 <rtc_calendar_get_config_defaults+0x104>)
    bc6e:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    bc70:	1c3b      	adds	r3, r7, #0
    bc72:	3317      	adds	r3, #23
    bc74:	781a      	ldrb	r2, [r3, #0]
    bc76:	6878      	ldr	r0, [r7, #4]
    bc78:	2110      	movs	r1, #16
    bc7a:	1c13      	adds	r3, r2, #0
    bc7c:	009b      	lsls	r3, r3, #2
    bc7e:	189b      	adds	r3, r3, r2
    bc80:	005b      	lsls	r3, r3, #1
    bc82:	18c3      	adds	r3, r0, r3
    bc84:	185b      	adds	r3, r3, r1
    bc86:	2206      	movs	r2, #6
    bc88:	701a      	strb	r2, [r3, #0]
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
	config->clear_on_match      = false;
	config->continuously_update = false;
	config->clock_24h           = false;
	config->year_init_value     = 2000;
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    bc8a:	1c3b      	adds	r3, r7, #0
    bc8c:	3317      	adds	r3, #23
    bc8e:	781a      	ldrb	r2, [r3, #0]
    bc90:	1c3b      	adds	r3, r7, #0
    bc92:	3317      	adds	r3, #23
    bc94:	3201      	adds	r2, #1
    bc96:	701a      	strb	r2, [r3, #0]
    bc98:	1c3b      	adds	r3, r7, #0
    bc9a:	3317      	adds	r3, #23
    bc9c:	781b      	ldrb	r3, [r3, #0]
    bc9e:	2b00      	cmp	r3, #0
    bca0:	d0d1      	beq.n	bc46 <rtc_calendar_get_config_defaults+0x82>
		config->alarm[i].time = time;
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
	}
}
    bca2:	46bd      	mov	sp, r7
    bca4:	b007      	add	sp, #28
    bca6:	bd90      	pop	{r4, r7, pc}
    bca8:	0000bb19 	.word	0x0000bb19
    bcac:	000250e8 	.word	0x000250e8
    bcb0:	00025114 	.word	0x00025114
    bcb4:	0002512c 	.word	0x0002512c
    bcb8:	000106e9 	.word	0x000106e9
    bcbc:	00025134 	.word	0x00025134
    bcc0:	0001b62d 	.word	0x0001b62d
    bcc4:	0000bb89 	.word	0x0000bb89
    bcc8:	0001b375 	.word	0x0001b375

0000bccc <rtc_calendar_enable>:
 *
 * Enables the RTC module once it has been configured, ready for use. Most
 * module configuration parameters cannot be altered while the module is enabled.
 */
static inline void rtc_calendar_enable(void)
{
    bccc:	b580      	push	{r7, lr}
    bcce:	b082      	sub	sp, #8
    bcd0:	af00      	add	r7, sp, #0
	/* Initialize module pointer. */
	Rtc *const rtc_module = RTC;
    bcd2:	4b0b      	ldr	r3, [pc, #44]	; (bd00 <rtc_calendar_enable+0x34>)
    bcd4:	607b      	str	r3, [r7, #4]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
    bcd6:	2003      	movs	r0, #3
    bcd8:	4b0a      	ldr	r3, [pc, #40]	; (bd04 <rtc_calendar_enable+0x38>)
    bcda:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing()) {
    bcdc:	46c0      	nop			; (mov r8, r8)
    bcde:	4b0a      	ldr	r3, [pc, #40]	; (bd08 <rtc_calendar_enable+0x3c>)
    bce0:	4798      	blx	r3
    bce2:	1c03      	adds	r3, r0, #0
    bce4:	2b00      	cmp	r3, #0
    bce6:	d1fa      	bne.n	bcde <rtc_calendar_enable+0x12>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    bce8:	687b      	ldr	r3, [r7, #4]
    bcea:	681b      	ldr	r3, [r3, #0]
    bcec:	b29b      	uxth	r3, r3
    bcee:	2202      	movs	r2, #2
    bcf0:	4313      	orrs	r3, r2
    bcf2:	b29a      	uxth	r2, r3
    bcf4:	687b      	ldr	r3, [r7, #4]
    bcf6:	801a      	strh	r2, [r3, #0]
}
    bcf8:	46bd      	mov	sp, r7
    bcfa:	b002      	add	sp, #8
    bcfc:	bd80      	pop	{r7, pc}
    bcfe:	46c0      	nop			; (mov r8, r8)
    bd00:	40001400 	.word	0x40001400
    bd04:	0000bb2d 	.word	0x0000bb2d
    bd08:	0000bb59 	.word	0x0000bb59

0000bd0c <rtc_alarm_match_callback>:

/************************************************************************/
/* Callback Functions                                                   */
/************************************************************************/
void rtc_alarm_match_callback(void)
{
    bd0c:	b580      	push	{r7, lr}
    bd0e:	b084      	sub	sp, #16
    bd10:	af00      	add	r7, sp, #0
	// compute pid variables on periodic interval
	pidCompute(&pidLoop1);
    bd12:	4b1f      	ldr	r3, [pc, #124]	; (bd90 <rtc_alarm_match_callback+0x84>)
    bd14:	1c18      	adds	r0, r3, #0
    bd16:	4b1f      	ldr	r3, [pc, #124]	; (bd94 <rtc_alarm_match_callback+0x88>)
    bd18:	4798      	blx	r3
		pidFan1.ITerm = 0;		pidFan2.ITerm = 0;
		pidFan1.error = 0;		pidFan2.error = 0;
		pidFan1.Output = 0;		pidFan2.Output = 0;
	}
	*/	
	if (chamberTempDifference > chamberTempUniformityTarget)
    bd1a:	4b1f      	ldr	r3, [pc, #124]	; (bd98 <rtc_alarm_match_callback+0x8c>)
    bd1c:	6819      	ldr	r1, [r3, #0]
    bd1e:	4b1f      	ldr	r3, [pc, #124]	; (bd9c <rtc_alarm_match_callback+0x90>)
    bd20:	681a      	ldr	r2, [r3, #0]
    bd22:	4b1f      	ldr	r3, [pc, #124]	; (bda0 <rtc_alarm_match_callback+0x94>)
    bd24:	1c08      	adds	r0, r1, #0
    bd26:	1c11      	adds	r1, r2, #0
    bd28:	4798      	blx	r3
    bd2a:	1c03      	adds	r3, r0, #0
    bd2c:	2b00      	cmp	r3, #0
    bd2e:	d004      	beq.n	bd3a <rtc_alarm_match_callback+0x2e>
	{
		pidCompute(&pidFan4);
    bd30:	4b1c      	ldr	r3, [pc, #112]	; (bda4 <rtc_alarm_match_callback+0x98>)
    bd32:	1c18      	adds	r0, r3, #0
    bd34:	4b17      	ldr	r3, [pc, #92]	; (bd94 <rtc_alarm_match_callback+0x88>)
    bd36:	4798      	blx	r3
    bd38:	e00b      	b.n	bd52 <rtc_alarm_match_callback+0x46>
	}
	else
	{
		pidFan4.PTerm = 0;
    bd3a:	4b1a      	ldr	r3, [pc, #104]	; (bda4 <rtc_alarm_match_callback+0x98>)
    bd3c:	2200      	movs	r2, #0
    bd3e:	631a      	str	r2, [r3, #48]	; 0x30
		pidFan4.ITerm = 0;
    bd40:	4b18      	ldr	r3, [pc, #96]	; (bda4 <rtc_alarm_match_callback+0x98>)
    bd42:	2200      	movs	r2, #0
    bd44:	635a      	str	r2, [r3, #52]	; 0x34
		pidFan4.error = 0;
    bd46:	4b17      	ldr	r3, [pc, #92]	; (bda4 <rtc_alarm_match_callback+0x98>)
    bd48:	2200      	movs	r2, #0
    bd4a:	629a      	str	r2, [r3, #40]	; 0x28
		pidFan4.Output = 0;
    bd4c:	4b15      	ldr	r3, [pc, #84]	; (bda4 <rtc_alarm_match_callback+0x98>)
    bd4e:	2200      	movs	r2, #0
    bd50:	621a      	str	r2, [r3, #32]
	}
	
	/* Set new alarm */
	struct rtc_calendar_alarm_time alarm;
	rtc_calendar_get_time(&alarm.time);	
    bd52:	1d3b      	adds	r3, r7, #4
    bd54:	1c18      	adds	r0, r3, #0
    bd56:	4b14      	ldr	r3, [pc, #80]	; (bda8 <rtc_alarm_match_callback+0x9c>)
    bd58:	4798      	blx	r3
	alarm.mask = RTC_CALENDAR_ALARM_MASK_SEC;
    bd5a:	1d3b      	adds	r3, r7, #4
    bd5c:	2201      	movs	r2, #1
    bd5e:	721a      	strb	r2, [r3, #8]
	alarm.time.second += RTC_PERIOD_IN_MSEC / 1000;
    bd60:	1d3b      	adds	r3, r7, #4
    bd62:	781b      	ldrb	r3, [r3, #0]
    bd64:	3301      	adds	r3, #1
    bd66:	b2da      	uxtb	r2, r3
    bd68:	1d3b      	adds	r3, r7, #4
    bd6a:	701a      	strb	r2, [r3, #0]
	alarm.time.second = alarm.time.second % 60;
    bd6c:	1d3b      	adds	r3, r7, #4
    bd6e:	781a      	ldrb	r2, [r3, #0]
    bd70:	4b0e      	ldr	r3, [pc, #56]	; (bdac <rtc_alarm_match_callback+0xa0>)
    bd72:	1c10      	adds	r0, r2, #0
    bd74:	213c      	movs	r1, #60	; 0x3c
    bd76:	4798      	blx	r3
    bd78:	1c0b      	adds	r3, r1, #0
    bd7a:	b2da      	uxtb	r2, r3
    bd7c:	1d3b      	adds	r3, r7, #4
    bd7e:	701a      	strb	r2, [r3, #0]
	rtc_calendar_set_alarm(&alarm, RTC_CALENDAR_ALARM_0);
    bd80:	1d3b      	adds	r3, r7, #4
    bd82:	1c18      	adds	r0, r3, #0
    bd84:	2100      	movs	r1, #0
    bd86:	4b0a      	ldr	r3, [pc, #40]	; (bdb0 <rtc_alarm_match_callback+0xa4>)
    bd88:	4798      	blx	r3
}
    bd8a:	46bd      	mov	sp, r7
    bd8c:	b004      	add	sp, #16
    bd8e:	bd80      	pop	{r7, pc}
    bd90:	20000e10 	.word	0x20000e10
    bd94:	0000a2bd 	.word	0x0000a2bd
    bd98:	20000350 	.word	0x20000350
    bd9c:	20000190 	.word	0x20000190
    bda0:	0001f655 	.word	0x0001f655
    bda4:	20000bd8 	.word	0x20000bd8
    bda8:	00012939 	.word	0x00012939
    bdac:	0001f4b5 	.word	0x0001f4b5
    bdb0:	00012999 	.word	0x00012999

0000bdb4 <configure_rtc_calendar>:

/************************************************************************/
/* Configuration                                                        */
/************************************************************************/
void configure_rtc_calendar(void)
{
    bdb4:	b580      	push	{r7, lr}
    bdb6:	b088      	sub	sp, #32
    bdb8:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;
	rtc_calendar_get_config_defaults(&config_rtc_calendar);
    bdba:	1c3b      	adds	r3, r7, #0
    bdbc:	330c      	adds	r3, #12
    bdbe:	1c18      	adds	r0, r3, #0
    bdc0:	4b18      	ldr	r3, [pc, #96]	; (be24 <configure_rtc_calendar+0x70>)
    bdc2:	4798      	blx	r3
	config_rtc_calendar.clock_24h = true;
    bdc4:	1c3b      	adds	r3, r7, #0
    bdc6:	330c      	adds	r3, #12
    bdc8:	2201      	movs	r2, #1
    bdca:	711a      	strb	r2, [r3, #4]
	
	// build alarm0 settings
	struct rtc_calendar_time alarm;
	rtc_calendar_get_time_defaults(&alarm);
    bdcc:	1d3b      	adds	r3, r7, #4
    bdce:	1c18      	adds	r0, r3, #0
    bdd0:	4b15      	ldr	r3, [pc, #84]	; (be28 <configure_rtc_calendar+0x74>)
    bdd2:	4798      	blx	r3
	alarm.year = 2016;
    bdd4:	1d3b      	adds	r3, r7, #4
    bdd6:	22fc      	movs	r2, #252	; 0xfc
    bdd8:	00d2      	lsls	r2, r2, #3
    bdda:	80da      	strh	r2, [r3, #6]
	alarm.month = 1;
    bddc:	1d3b      	adds	r3, r7, #4
    bdde:	2201      	movs	r2, #1
    bde0:	715a      	strb	r2, [r3, #5]
	alarm.day = 1;
    bde2:	1d3b      	adds	r3, r7, #4
    bde4:	2201      	movs	r2, #1
    bde6:	711a      	strb	r2, [r3, #4]
	alarm.hour = 0;
    bde8:	1d3b      	adds	r3, r7, #4
    bdea:	2200      	movs	r2, #0
    bdec:	709a      	strb	r2, [r3, #2]
	alarm.minute = 0;
    bdee:	1d3b      	adds	r3, r7, #4
    bdf0:	2200      	movs	r2, #0
    bdf2:	705a      	strb	r2, [r3, #1]
	alarm.second = 4;
    bdf4:	1d3b      	adds	r3, r7, #4
    bdf6:	2204      	movs	r2, #4
    bdf8:	701a      	strb	r2, [r3, #0]
	
	// setup alarm
	config_rtc_calendar.alarm[0].time = alarm;
    bdfa:	1c3b      	adds	r3, r7, #0
    bdfc:	330c      	adds	r3, #12
    bdfe:	1d3a      	adds	r2, r7, #4
    be00:	3308      	adds	r3, #8
    be02:	ca03      	ldmia	r2!, {r0, r1}
    be04:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    be06:	1c3b      	adds	r3, r7, #0
    be08:	330c      	adds	r3, #12
    be0a:	2206      	movs	r2, #6
    be0c:	741a      	strb	r2, [r3, #16]
	
	rtc_calendar_init(&config_rtc_calendar);
    be0e:	1c3b      	adds	r3, r7, #0
    be10:	330c      	adds	r3, #12
    be12:	1c18      	adds	r0, r3, #0
    be14:	4b05      	ldr	r3, [pc, #20]	; (be2c <configure_rtc_calendar+0x78>)
    be16:	4798      	blx	r3
	rtc_calendar_enable();
    be18:	4b05      	ldr	r3, [pc, #20]	; (be30 <configure_rtc_calendar+0x7c>)
    be1a:	4798      	blx	r3
}
    be1c:	46bd      	mov	sp, r7
    be1e:	b008      	add	sp, #32
    be20:	bd80      	pop	{r7, pc}
    be22:	46c0      	nop			; (mov r8, r8)
    be24:	0000bbc5 	.word	0x0000bbc5
    be28:	0000bb89 	.word	0x0000bb89
    be2c:	0001281d 	.word	0x0001281d
    be30:	0000bccd 	.word	0x0000bccd

0000be34 <configure_rtc_callbacks>:

void configure_rtc_callbacks(void)
{
    be34:	b580      	push	{r7, lr}
    be36:	af00      	add	r7, sp, #0
	rtc_calendar_register_callback(rtc_alarm_match_callback, RTC_CALENDAR_CALLBACK_ALARM_0);
    be38:	4b04      	ldr	r3, [pc, #16]	; (be4c <configure_rtc_callbacks+0x18>)
    be3a:	1c18      	adds	r0, r3, #0
    be3c:	2100      	movs	r1, #0
    be3e:	4b04      	ldr	r3, [pc, #16]	; (be50 <configure_rtc_callbacks+0x1c>)
    be40:	4798      	blx	r3
	rtc_calendar_enable_callback(RTC_CALENDAR_CALLBACK_ALARM_0);
    be42:	2000      	movs	r0, #0
    be44:	4b03      	ldr	r3, [pc, #12]	; (be54 <configure_rtc_callbacks+0x20>)
    be46:	4798      	blx	r3
}
    be48:	46bd      	mov	sp, r7
    be4a:	bd80      	pop	{r7, pc}
    be4c:	0000bd0d 	.word	0x0000bd0d
    be50:	00012a05 	.word	0x00012a05
    be54:	00012a89 	.word	0x00012a89

0000be58 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
    be58:	b580      	push	{r7, lr}
    be5a:	af00      	add	r7, sp, #0
	return test_case_ptr;
    be5c:	4b02      	ldr	r3, [pc, #8]	; (be68 <test_get_case+0x10>)
    be5e:	681b      	ldr	r3, [r3, #0]
}
    be60:	1c18      	adds	r0, r3, #0
    be62:	46bd      	mov	sp, r7
    be64:	bd80      	pop	{r7, pc}
    be66:	46c0      	nop			; (mov r8, r8)
    be68:	2000041c 	.word	0x2000041c

0000be6c <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    be6c:	b580      	push	{r7, lr}
    be6e:	b082      	sub	sp, #8
    be70:	af00      	add	r7, sp, #0
    be72:	1c02      	adds	r2, r0, #0
    be74:	1dfb      	adds	r3, r7, #7
    be76:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    be78:	4a07      	ldr	r2, [pc, #28]	; (be98 <system_interrupt_disable+0x2c>)
    be7a:	1dfb      	adds	r3, r7, #7
    be7c:	781b      	ldrb	r3, [r3, #0]
    be7e:	1c19      	adds	r1, r3, #0
    be80:	231f      	movs	r3, #31
    be82:	400b      	ands	r3, r1
    be84:	2101      	movs	r1, #1
    be86:	1c08      	adds	r0, r1, #0
    be88:	4098      	lsls	r0, r3
    be8a:	1c03      	adds	r3, r0, #0
    be8c:	1c19      	adds	r1, r3, #0
    be8e:	2380      	movs	r3, #128	; 0x80
    be90:	50d1      	str	r1, [r2, r3]
}
    be92:	46bd      	mov	sp, r7
    be94:	b002      	add	sp, #8
    be96:	bd80      	pop	{r7, pc}
    be98:	e000e100 	.word	0xe000e100

0000be9c <adc_is_syncing>:
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    be9c:	b590      	push	{r4, r7, lr}
    be9e:	b087      	sub	sp, #28
    bea0:	af02      	add	r7, sp, #8
    bea2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
    bea4:	4b19      	ldr	r3, [pc, #100]	; (bf0c <adc_is_syncing+0x70>)
    bea6:	4798      	blx	r3
    bea8:	1c03      	adds	r3, r0, #0
    beaa:	2b00      	cmp	r3, #0
    beac:	d010      	beq.n	bed0 <adc_is_syncing+0x34>
    beae:	687b      	ldr	r3, [r7, #4]
    beb0:	2b00      	cmp	r3, #0
    beb2:	d117      	bne.n	bee4 <adc_is_syncing+0x48>
    beb4:	4b15      	ldr	r3, [pc, #84]	; (bf0c <adc_is_syncing+0x70>)
    beb6:	4798      	blx	r3
    beb8:	1c01      	adds	r1, r0, #0
    beba:	4a15      	ldr	r2, [pc, #84]	; (bf10 <adc_is_syncing+0x74>)
    bebc:	4b15      	ldr	r3, [pc, #84]	; (bf14 <adc_is_syncing+0x78>)
    bebe:	4816      	ldr	r0, [pc, #88]	; (bf18 <adc_is_syncing+0x7c>)
    bec0:	9000      	str	r0, [sp, #0]
    bec2:	4816      	ldr	r0, [pc, #88]	; (bf1c <adc_is_syncing+0x80>)
    bec4:	9001      	str	r0, [sp, #4]
    bec6:	1c08      	adds	r0, r1, #0
    bec8:	2101      	movs	r1, #1
    beca:	4c15      	ldr	r4, [pc, #84]	; (bf20 <adc_is_syncing+0x84>)
    becc:	47a0      	blx	r4
    bece:	e009      	b.n	bee4 <adc_is_syncing+0x48>
    bed0:	687b      	ldr	r3, [r7, #4]
    bed2:	2b00      	cmp	r3, #0
    bed4:	d106      	bne.n	bee4 <adc_is_syncing+0x48>
    bed6:	4813      	ldr	r0, [pc, #76]	; (bf24 <adc_is_syncing+0x88>)
    bed8:	4910      	ldr	r1, [pc, #64]	; (bf1c <adc_is_syncing+0x80>)
    beda:	4a0d      	ldr	r2, [pc, #52]	; (bf10 <adc_is_syncing+0x74>)
    bedc:	4b0d      	ldr	r3, [pc, #52]	; (bf14 <adc_is_syncing+0x78>)
    bede:	4c12      	ldr	r4, [pc, #72]	; (bf28 <adc_is_syncing+0x8c>)
    bee0:	47a0      	blx	r4
    bee2:	e7fe      	b.n	bee2 <adc_is_syncing+0x46>

	Adc *const adc_module = module_inst->hw;
    bee4:	687b      	ldr	r3, [r7, #4]
    bee6:	681b      	ldr	r3, [r3, #0]
    bee8:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    beea:	68fb      	ldr	r3, [r7, #12]
    beec:	699b      	ldr	r3, [r3, #24]
    beee:	041b      	lsls	r3, r3, #16
    bef0:	0e1b      	lsrs	r3, r3, #24
    bef2:	b2db      	uxtb	r3, r3
    bef4:	b2db      	uxtb	r3, r3
    bef6:	b25b      	sxtb	r3, r3
    bef8:	2b00      	cmp	r3, #0
    befa:	da01      	bge.n	bf00 <adc_is_syncing+0x64>
		return true;
    befc:	2301      	movs	r3, #1
    befe:	e000      	b.n	bf02 <adc_is_syncing+0x66>
	}

	return false;
    bf00:	2300      	movs	r3, #0
}
    bf02:	1c18      	adds	r0, r3, #0
    bf04:	46bd      	mov	sp, r7
    bf06:	b005      	add	sp, #20
    bf08:	bd90      	pop	{r4, r7, pc}
    bf0a:	46c0      	nop			; (mov r8, r8)
    bf0c:	0000be59 	.word	0x0000be59
    bf10:	000251cc 	.word	0x000251cc
    bf14:	0000048d 	.word	0x0000048d
    bf18:	000251f0 	.word	0x000251f0
    bf1c:	00025208 	.word	0x00025208
    bf20:	000106e9 	.word	0x000106e9
    bf24:	00025214 	.word	0x00025214
    bf28:	0001b62d 	.word	0x0001b62d

0000bf2c <adc_disable>:
 *
 * \param[in] module_inst Pointer to the ADC software instance struct
 */
static inline enum status_code adc_disable(
		struct adc_module *const module_inst)
{
    bf2c:	b590      	push	{r4, r7, lr}
    bf2e:	b087      	sub	sp, #28
    bf30:	af02      	add	r7, sp, #8
    bf32:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
    bf34:	4b2e      	ldr	r3, [pc, #184]	; (bff0 <adc_disable+0xc4>)
    bf36:	4798      	blx	r3
    bf38:	1c03      	adds	r3, r0, #0
    bf3a:	2b00      	cmp	r3, #0
    bf3c:	d010      	beq.n	bf60 <adc_disable+0x34>
    bf3e:	687b      	ldr	r3, [r7, #4]
    bf40:	2b00      	cmp	r3, #0
    bf42:	d117      	bne.n	bf74 <adc_disable+0x48>
    bf44:	4b2a      	ldr	r3, [pc, #168]	; (bff0 <adc_disable+0xc4>)
    bf46:	4798      	blx	r3
    bf48:	1c01      	adds	r1, r0, #0
    bf4a:	4a2a      	ldr	r2, [pc, #168]	; (bff4 <adc_disable+0xc8>)
    bf4c:	4b2a      	ldr	r3, [pc, #168]	; (bff8 <adc_disable+0xcc>)
    bf4e:	482b      	ldr	r0, [pc, #172]	; (bffc <adc_disable+0xd0>)
    bf50:	9000      	str	r0, [sp, #0]
    bf52:	482b      	ldr	r0, [pc, #172]	; (c000 <adc_disable+0xd4>)
    bf54:	9001      	str	r0, [sp, #4]
    bf56:	1c08      	adds	r0, r1, #0
    bf58:	2101      	movs	r1, #1
    bf5a:	4c2a      	ldr	r4, [pc, #168]	; (c004 <adc_disable+0xd8>)
    bf5c:	47a0      	blx	r4
    bf5e:	e009      	b.n	bf74 <adc_disable+0x48>
    bf60:	687b      	ldr	r3, [r7, #4]
    bf62:	2b00      	cmp	r3, #0
    bf64:	d106      	bne.n	bf74 <adc_disable+0x48>
    bf66:	4828      	ldr	r0, [pc, #160]	; (c008 <adc_disable+0xdc>)
    bf68:	4925      	ldr	r1, [pc, #148]	; (c000 <adc_disable+0xd4>)
    bf6a:	4a22      	ldr	r2, [pc, #136]	; (bff4 <adc_disable+0xc8>)
    bf6c:	4b22      	ldr	r3, [pc, #136]	; (bff8 <adc_disable+0xcc>)
    bf6e:	4c27      	ldr	r4, [pc, #156]	; (c00c <adc_disable+0xe0>)
    bf70:	47a0      	blx	r4
    bf72:	e7fe      	b.n	bf72 <adc_disable+0x46>
	Assert(module_inst->hw);
    bf74:	4b1e      	ldr	r3, [pc, #120]	; (bff0 <adc_disable+0xc4>)
    bf76:	4798      	blx	r3
    bf78:	1c03      	adds	r3, r0, #0
    bf7a:	2b00      	cmp	r3, #0
    bf7c:	d011      	beq.n	bfa2 <adc_disable+0x76>
    bf7e:	687b      	ldr	r3, [r7, #4]
    bf80:	681b      	ldr	r3, [r3, #0]
    bf82:	2b00      	cmp	r3, #0
    bf84:	d118      	bne.n	bfb8 <adc_disable+0x8c>
    bf86:	4b1a      	ldr	r3, [pc, #104]	; (bff0 <adc_disable+0xc4>)
    bf88:	4798      	blx	r3
    bf8a:	1c01      	adds	r1, r0, #0
    bf8c:	4a19      	ldr	r2, [pc, #100]	; (bff4 <adc_disable+0xc8>)
    bf8e:	4b20      	ldr	r3, [pc, #128]	; (c010 <adc_disable+0xe4>)
    bf90:	481a      	ldr	r0, [pc, #104]	; (bffc <adc_disable+0xd0>)
    bf92:	9000      	str	r0, [sp, #0]
    bf94:	481f      	ldr	r0, [pc, #124]	; (c014 <adc_disable+0xe8>)
    bf96:	9001      	str	r0, [sp, #4]
    bf98:	1c08      	adds	r0, r1, #0
    bf9a:	2101      	movs	r1, #1
    bf9c:	4c19      	ldr	r4, [pc, #100]	; (c004 <adc_disable+0xd8>)
    bf9e:	47a0      	blx	r4
    bfa0:	e00a      	b.n	bfb8 <adc_disable+0x8c>
    bfa2:	687b      	ldr	r3, [r7, #4]
    bfa4:	681b      	ldr	r3, [r3, #0]
    bfa6:	2b00      	cmp	r3, #0
    bfa8:	d106      	bne.n	bfb8 <adc_disable+0x8c>
    bfaa:	4817      	ldr	r0, [pc, #92]	; (c008 <adc_disable+0xdc>)
    bfac:	4919      	ldr	r1, [pc, #100]	; (c014 <adc_disable+0xe8>)
    bfae:	4a11      	ldr	r2, [pc, #68]	; (bff4 <adc_disable+0xc8>)
    bfb0:	4b17      	ldr	r3, [pc, #92]	; (c010 <adc_disable+0xe4>)
    bfb2:	4c16      	ldr	r4, [pc, #88]	; (c00c <adc_disable+0xe0>)
    bfb4:	47a0      	blx	r4
    bfb6:	e7fe      	b.n	bfb6 <adc_disable+0x8a>

	Adc *const adc_module = module_inst->hw;
    bfb8:	687b      	ldr	r3, [r7, #4]
    bfba:	681b      	ldr	r3, [r3, #0]
    bfbc:	60fb      	str	r3, [r7, #12]

#if ADC_CALLBACK_MODE == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_ADC);
    bfbe:	2015      	movs	r0, #21
    bfc0:	4b15      	ldr	r3, [pc, #84]	; (c018 <adc_disable+0xec>)
    bfc2:	4798      	blx	r3
#endif

	while (adc_is_syncing(module_inst)) {
    bfc4:	46c0      	nop			; (mov r8, r8)
    bfc6:	687b      	ldr	r3, [r7, #4]
    bfc8:	1c18      	adds	r0, r3, #0
    bfca:	4b14      	ldr	r3, [pc, #80]	; (c01c <adc_disable+0xf0>)
    bfcc:	4798      	blx	r3
    bfce:	1c03      	adds	r3, r0, #0
    bfd0:	2b00      	cmp	r3, #0
    bfd2:	d1f8      	bne.n	bfc6 <adc_disable+0x9a>
		/* Wait for synchronization */
	}

	adc_module->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    bfd4:	68fb      	ldr	r3, [r7, #12]
    bfd6:	681b      	ldr	r3, [r3, #0]
    bfd8:	b2db      	uxtb	r3, r3
    bfda:	2202      	movs	r2, #2
    bfdc:	4393      	bics	r3, r2
    bfde:	b2da      	uxtb	r2, r3
    bfe0:	68fb      	ldr	r3, [r7, #12]
    bfe2:	701a      	strb	r2, [r3, #0]
	return STATUS_OK;
    bfe4:	2300      	movs	r3, #0
}
    bfe6:	1c18      	adds	r0, r3, #0
    bfe8:	46bd      	mov	sp, r7
    bfea:	b005      	add	sp, #20
    bfec:	bd90      	pop	{r4, r7, pc}
    bfee:	46c0      	nop			; (mov r8, r8)
    bff0:	0000be59 	.word	0x0000be59
    bff4:	000251cc 	.word	0x000251cc
    bff8:	000004bd 	.word	0x000004bd
    bffc:	000251f0 	.word	0x000251f0
    c000:	00025208 	.word	0x00025208
    c004:	000106e9 	.word	0x000106e9
    c008:	00025214 	.word	0x00025214
    c00c:	0001b62d 	.word	0x0001b62d
    c010:	000004be 	.word	0x000004be
    c014:	00025238 	.word	0x00025238
    c018:	0000be6d 	.word	0x0000be6d
    c01c:	0000be9d 	.word	0x0000be9d

0000c020 <selfTest>:

/************************************************************************/
/* User Functions                                                       */
/************************************************************************/
bool selfTest()
{
    c020:	b5f0      	push	{r4, r5, r6, r7, lr}
    c022:	b085      	sub	sp, #20
    c024:	af00      	add	r7, sp, #0
    float tempVal = 0;
    c026:	2300      	movs	r3, #0
    c028:	60bb      	str	r3, [r7, #8]
	uint8_t test_num = 0;
    c02a:	1dfb      	adds	r3, r7, #7
    c02c:	2200      	movs	r2, #0
    c02e:	701a      	strb	r2, [r3, #0]
	
	dbg("\n[running self test]");
    c030:	4b05      	ldr	r3, [pc, #20]	; (c048 <selfTest+0x28>)
    c032:	1c18      	adds	r0, r3, #0
    c034:	4b05      	ldr	r3, [pc, #20]	; (c04c <selfTest+0x2c>)
    c036:	4798      	blx	r3
	
	selfTestIsRunning = 1;
    c038:	4b05      	ldr	r3, [pc, #20]	; (c050 <selfTest+0x30>)
    c03a:	2201      	movs	r2, #1
    c03c:	701a      	strb	r2, [r3, #0]
		
	// reset status;	
	for (uint8_t n=0; n<SELF_TEST_RESULTS_ARRAY_SIZE; n++)
    c03e:	1c3b      	adds	r3, r7, #0
    c040:	330f      	adds	r3, #15
    c042:	2200      	movs	r2, #0
    c044:	701a      	strb	r2, [r3, #0]
    c046:	e012      	b.n	c06e <selfTest+0x4e>
    c048:	000252bc 	.word	0x000252bc
    c04c:	0001b62d 	.word	0x0001b62d
    c050:	20000344 	.word	0x20000344
	{
		test_results_array[n] = 1;
    c054:	1c3b      	adds	r3, r7, #0
    c056:	330f      	adds	r3, #15
    c058:	781b      	ldrb	r3, [r3, #0]
    c05a:	4af1      	ldr	r2, [pc, #964]	; (c420 <selfTest+0x400>)
    c05c:	2101      	movs	r1, #1
    c05e:	54d1      	strb	r1, [r2, r3]
	dbg("\n[running self test]");
	
	selfTestIsRunning = 1;
		
	// reset status;	
	for (uint8_t n=0; n<SELF_TEST_RESULTS_ARRAY_SIZE; n++)
    c060:	1c3b      	adds	r3, r7, #0
    c062:	330f      	adds	r3, #15
    c064:	781a      	ldrb	r2, [r3, #0]
    c066:	1c3b      	adds	r3, r7, #0
    c068:	330f      	adds	r3, #15
    c06a:	3201      	adds	r2, #1
    c06c:	701a      	strb	r2, [r3, #0]
    c06e:	1c3b      	adds	r3, r7, #0
    c070:	330f      	adds	r3, #15
    c072:	781b      	ldrb	r3, [r3, #0]
    c074:	2b1f      	cmp	r3, #31
    c076:	d9ed      	bls.n	c054 <selfTest+0x34>
	{
		test_results_array[n] = 1;
	}
	self_test_status = 0x0000;	
    c078:	4bea      	ldr	r3, [pc, #936]	; (c424 <selfTest+0x404>)
    c07a:	2200      	movs	r2, #0
    c07c:	601a      	str	r2, [r3, #0]

	setOutputSwitch(PIN_ENBL_OUTPUT1, GPIO_MODE, OFF);	  // disable output to php1
    c07e:	202e      	movs	r0, #46	; 0x2e
    c080:	2101      	movs	r1, #1
    c082:	2200      	movs	r2, #0
    c084:	4be8      	ldr	r3, [pc, #928]	; (c428 <selfTest+0x408>)
    c086:	4798      	blx	r3
	setOutputSwitch(PIN_ENBL_OUTA_COLD, GPIO_MODE, OFF);	  // disable output to php2
    c088:	203f      	movs	r0, #63	; 0x3f
    c08a:	2101      	movs	r1, #1
    c08c:	2200      	movs	r2, #0
    c08e:	4be6      	ldr	r3, [pc, #920]	; (c428 <selfTest+0x408>)
    c090:	4798      	blx	r3
				
	fanStop_emc2305(&fan1);
    c092:	4be6      	ldr	r3, [pc, #920]	; (c42c <selfTest+0x40c>)
    c094:	1c18      	adds	r0, r3, #0
    c096:	4be6      	ldr	r3, [pc, #920]	; (c430 <selfTest+0x410>)
    c098:	4798      	blx	r3
	fanStop_emc2305(&fan2);
    c09a:	4be6      	ldr	r3, [pc, #920]	; (c434 <selfTest+0x414>)
    c09c:	1c18      	adds	r0, r3, #0
    c09e:	4be4      	ldr	r3, [pc, #912]	; (c430 <selfTest+0x410>)
    c0a0:	4798      	blx	r3
	fanStop_emc2305(&fan3);
    c0a2:	4be5      	ldr	r3, [pc, #916]	; (c438 <selfTest+0x418>)
    c0a4:	1c18      	adds	r0, r3, #0
    c0a6:	4be2      	ldr	r3, [pc, #904]	; (c430 <selfTest+0x410>)
    c0a8:	4798      	blx	r3
	fanStop_emc2305(&fan4);
    c0aa:	4be4      	ldr	r3, [pc, #912]	; (c43c <selfTest+0x41c>)
    c0ac:	1c18      	adds	r0, r3, #0
    c0ae:	4be0      	ldr	r3, [pc, #896]	; (c430 <selfTest+0x410>)
    c0b0:	4798      	blx	r3
	delay_s(5);		
    c0b2:	4be3      	ldr	r3, [pc, #908]	; (c440 <selfTest+0x420>)
    c0b4:	1c18      	adds	r0, r3, #0
    c0b6:	4be3      	ldr	r3, [pc, #908]	; (c444 <selfTest+0x424>)
    c0b8:	4798      	blx	r3
	readSensors();
    c0ba:	4be3      	ldr	r3, [pc, #908]	; (c448 <selfTest+0x428>)
    c0bc:	4798      	blx	r3

	/////////////////////////////////////
	// onboard sensors
	/////////////////////////////////////
	testParamLimits(1, ps1.standbyVoltage, test_num, "Vstby");
    c0be:	4be3      	ldr	r3, [pc, #908]	; (c44c <selfTest+0x42c>)
    c0c0:	6c59      	ldr	r1, [r3, #68]	; 0x44
    c0c2:	1dfb      	adds	r3, r7, #7
    c0c4:	781a      	ldrb	r2, [r3, #0]
    c0c6:	4be2      	ldr	r3, [pc, #904]	; (c450 <selfTest+0x430>)
    c0c8:	2001      	movs	r0, #1
    c0ca:	4ce2      	ldr	r4, [pc, #904]	; (c454 <selfTest+0x434>)
    c0cc:	47a0      	blx	r4
	testParamLimits(0, 0, ++test_num, "Vlogic"); //testParamLimits(1, ps1.logicVoltage, ++test_num, "Vlogic");		
    c0ce:	1dfb      	adds	r3, r7, #7
    c0d0:	1dfa      	adds	r2, r7, #7
    c0d2:	7812      	ldrb	r2, [r2, #0]
    c0d4:	3201      	adds	r2, #1
    c0d6:	701a      	strb	r2, [r3, #0]
    c0d8:	2100      	movs	r1, #0
    c0da:	1dfb      	adds	r3, r7, #7
    c0dc:	781a      	ldrb	r2, [r3, #0]
    c0de:	4bde      	ldr	r3, [pc, #888]	; (c458 <selfTest+0x438>)
    c0e0:	2000      	movs	r0, #0
    c0e2:	4cdc      	ldr	r4, [pc, #880]	; (c454 <selfTest+0x434>)
    c0e4:	47a0      	blx	r4
	testParamLimits(1, ps1.bulkVoltage, ++test_num, "Vbulk");
    c0e6:	4bd9      	ldr	r3, [pc, #868]	; (c44c <selfTest+0x42c>)
    c0e8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    c0ea:	1dfb      	adds	r3, r7, #7
    c0ec:	1dfa      	adds	r2, r7, #7
    c0ee:	7812      	ldrb	r2, [r2, #0]
    c0f0:	3201      	adds	r2, #1
    c0f2:	701a      	strb	r2, [r3, #0]
    c0f4:	1dfb      	adds	r3, r7, #7
    c0f6:	781a      	ldrb	r2, [r3, #0]
    c0f8:	4bd8      	ldr	r3, [pc, #864]	; (c45c <selfTest+0x43c>)
    c0fa:	2001      	movs	r0, #1
    c0fc:	4cd5      	ldr	r4, [pc, #852]	; (c454 <selfTest+0x434>)
    c0fe:	47a0      	blx	r4
	testParamLimits(1, ps1.batteryVoltage, ++test_num, "Vbatt");				
    c100:	4bd2      	ldr	r3, [pc, #840]	; (c44c <selfTest+0x42c>)
    c102:	6c99      	ldr	r1, [r3, #72]	; 0x48
    c104:	1dfb      	adds	r3, r7, #7
    c106:	1dfa      	adds	r2, r7, #7
    c108:	7812      	ldrb	r2, [r2, #0]
    c10a:	3201      	adds	r2, #1
    c10c:	701a      	strb	r2, [r3, #0]
    c10e:	1dfb      	adds	r3, r7, #7
    c110:	781a      	ldrb	r2, [r3, #0]
    c112:	4bd3      	ldr	r3, [pc, #844]	; (c460 <selfTest+0x440>)
    c114:	2001      	movs	r0, #1
    c116:	4ccf      	ldr	r4, [pc, #828]	; (c454 <selfTest+0x434>)
    c118:	47a0      	blx	r4
		// rdy_n	

	/////////////////////////////////////
	// reject harness
	/////////////////////////////////////	
	testParamLimits(1, chamber1.rejectTemp, ++test_num, "Trej1");
    c11a:	4bd2      	ldr	r3, [pc, #840]	; (c464 <selfTest+0x444>)
    c11c:	68d9      	ldr	r1, [r3, #12]
    c11e:	1dfb      	adds	r3, r7, #7
    c120:	1dfa      	adds	r2, r7, #7
    c122:	7812      	ldrb	r2, [r2, #0]
    c124:	3201      	adds	r2, #1
    c126:	701a      	strb	r2, [r3, #0]
    c128:	1dfb      	adds	r3, r7, #7
    c12a:	781a      	ldrb	r2, [r3, #0]
    c12c:	4bce      	ldr	r3, [pc, #824]	; (c468 <selfTest+0x448>)
    c12e:	2001      	movs	r0, #1
    c130:	4cc8      	ldr	r4, [pc, #800]	; (c454 <selfTest+0x434>)
    c132:	47a0      	blx	r4
#ifdef HIGH_PERFORMANCE	
	testParamLimits(1, chamber2.rejectTemp, ++test_num, "Trej2");
    c134:	4bcd      	ldr	r3, [pc, #820]	; (c46c <selfTest+0x44c>)
    c136:	68d9      	ldr	r1, [r3, #12]
    c138:	1dfb      	adds	r3, r7, #7
    c13a:	1dfa      	adds	r2, r7, #7
    c13c:	7812      	ldrb	r2, [r2, #0]
    c13e:	3201      	adds	r2, #1
    c140:	701a      	strb	r2, [r3, #0]
    c142:	1dfb      	adds	r3, r7, #7
    c144:	781a      	ldrb	r2, [r3, #0]
    c146:	4bca      	ldr	r3, [pc, #808]	; (c470 <selfTest+0x450>)
    c148:	2001      	movs	r0, #1
    c14a:	4cc2      	ldr	r4, [pc, #776]	; (c454 <selfTest+0x434>)
    c14c:	47a0      	blx	r4
#endif

	/////////////////////////////////////
	// cond sensor
	/////////////////////////////////////
	testParamLimits(1, condensateTemp, ++test_num, "Tcond");
    c14e:	4bc9      	ldr	r3, [pc, #804]	; (c474 <selfTest+0x454>)
    c150:	6819      	ldr	r1, [r3, #0]
    c152:	1dfb      	adds	r3, r7, #7
    c154:	1dfa      	adds	r2, r7, #7
    c156:	7812      	ldrb	r2, [r2, #0]
    c158:	3201      	adds	r2, #1
    c15a:	701a      	strb	r2, [r3, #0]
    c15c:	1dfb      	adds	r3, r7, #7
    c15e:	781a      	ldrb	r2, [r3, #0]
    c160:	4bc5      	ldr	r3, [pc, #788]	; (c478 <selfTest+0x458>)
    c162:	2001      	movs	r0, #1
    c164:	4cbb      	ldr	r4, [pc, #748]	; (c454 <selfTest+0x434>)
    c166:	47a0      	blx	r4

	/////////////////////////////////////
	// foamed-in harness
	/////////////////////////////////////		
	tempVal = read_adc_pin(PIN_TCHA1);
    c168:	2008      	movs	r0, #8
    c16a:	4bc4      	ldr	r3, [pc, #784]	; (c47c <selfTest+0x45c>)
    c16c:	4798      	blx	r3
    c16e:	1c03      	adds	r3, r0, #0
    c170:	1c1a      	adds	r2, r3, #0
    c172:	4bc3      	ldr	r3, [pc, #780]	; (c480 <selfTest+0x460>)
    c174:	1c10      	adds	r0, r2, #0
    c176:	4798      	blx	r3
    c178:	1c03      	adds	r3, r0, #0
    c17a:	60bb      	str	r3, [r7, #8]
	tempVal = ADCtoTemperature(tempVal, chamberThermistorBeta);
    c17c:	4bc1      	ldr	r3, [pc, #772]	; (c484 <selfTest+0x464>)
    c17e:	881b      	ldrh	r3, [r3, #0]
    c180:	68ba      	ldr	r2, [r7, #8]
    c182:	1c10      	adds	r0, r2, #0
    c184:	1c19      	adds	r1, r3, #0
    c186:	4bc0      	ldr	r3, [pc, #768]	; (c488 <selfTest+0x468>)
    c188:	4798      	blx	r3
    c18a:	1c03      	adds	r3, r0, #0
    c18c:	60bb      	str	r3, [r7, #8]
	chamber1.chamberTempRaw = tempVal;
    c18e:	4bb5      	ldr	r3, [pc, #724]	; (c464 <selfTest+0x444>)
    c190:	68ba      	ldr	r2, [r7, #8]
    c192:	609a      	str	r2, [r3, #8]
#ifdef HIGH_PERFORMANCE	
	testParamLimits(1, chamber1.chamberTempRaw, ++test_num, "Tcha1");
    c194:	4bb3      	ldr	r3, [pc, #716]	; (c464 <selfTest+0x444>)
    c196:	6899      	ldr	r1, [r3, #8]
    c198:	1dfb      	adds	r3, r7, #7
    c19a:	1dfa      	adds	r2, r7, #7
    c19c:	7812      	ldrb	r2, [r2, #0]
    c19e:	3201      	adds	r2, #1
    c1a0:	701a      	strb	r2, [r3, #0]
    c1a2:	1dfb      	adds	r3, r7, #7
    c1a4:	781a      	ldrb	r2, [r3, #0]
    c1a6:	4bb9      	ldr	r3, [pc, #740]	; (c48c <selfTest+0x46c>)
    c1a8:	2001      	movs	r0, #1
    c1aa:	4caa      	ldr	r4, [pc, #680]	; (c454 <selfTest+0x434>)
    c1ac:	47a0      	blx	r4
#else
	testParamLimits(1, chamber1.chamberTempRaw, ++test_num, "Tacc");
#endif
	
	tempVal = read_adc_pin(PIN_TCHA2);
    c1ae:	2012      	movs	r0, #18
    c1b0:	4bb2      	ldr	r3, [pc, #712]	; (c47c <selfTest+0x45c>)
    c1b2:	4798      	blx	r3
    c1b4:	1c03      	adds	r3, r0, #0
    c1b6:	1c1a      	adds	r2, r3, #0
    c1b8:	4bb1      	ldr	r3, [pc, #708]	; (c480 <selfTest+0x460>)
    c1ba:	1c10      	adds	r0, r2, #0
    c1bc:	4798      	blx	r3
    c1be:	1c03      	adds	r3, r0, #0
    c1c0:	60bb      	str	r3, [r7, #8]
	tempVal = ADCtoTemperature(tempVal, chamberThermistorBeta);
    c1c2:	4bb0      	ldr	r3, [pc, #704]	; (c484 <selfTest+0x464>)
    c1c4:	881b      	ldrh	r3, [r3, #0]
    c1c6:	68ba      	ldr	r2, [r7, #8]
    c1c8:	1c10      	adds	r0, r2, #0
    c1ca:	1c19      	adds	r1, r3, #0
    c1cc:	4bae      	ldr	r3, [pc, #696]	; (c488 <selfTest+0x468>)
    c1ce:	4798      	blx	r3
    c1d0:	1c03      	adds	r3, r0, #0
    c1d2:	60bb      	str	r3, [r7, #8]
	chamber2.chamberTempRaw = tempVal;
    c1d4:	4ba5      	ldr	r3, [pc, #660]	; (c46c <selfTest+0x44c>)
    c1d6:	68ba      	ldr	r2, [r7, #8]
    c1d8:	609a      	str	r2, [r3, #8]
	testParamLimits(1, chamber2.chamberTempRaw, ++test_num, "Tcha2");
    c1da:	4ba4      	ldr	r3, [pc, #656]	; (c46c <selfTest+0x44c>)
    c1dc:	6899      	ldr	r1, [r3, #8]
    c1de:	1dfb      	adds	r3, r7, #7
    c1e0:	1dfa      	adds	r2, r7, #7
    c1e2:	7812      	ldrb	r2, [r2, #0]
    c1e4:	3201      	adds	r2, #1
    c1e6:	701a      	strb	r2, [r3, #0]
    c1e8:	1dfb      	adds	r3, r7, #7
    c1ea:	781a      	ldrb	r2, [r3, #0]
    c1ec:	4ba8      	ldr	r3, [pc, #672]	; (c490 <selfTest+0x470>)
    c1ee:	2001      	movs	r0, #1
    c1f0:	4c98      	ldr	r4, [pc, #608]	; (c454 <selfTest+0x434>)
    c1f2:	47a0      	blx	r4
	
	tempVal = read_adc_pin(PIN_TGLYC1);
    c1f4:	200c      	movs	r0, #12
    c1f6:	4ba1      	ldr	r3, [pc, #644]	; (c47c <selfTest+0x45c>)
    c1f8:	4798      	blx	r3
    c1fa:	1c03      	adds	r3, r0, #0
    c1fc:	1c1a      	adds	r2, r3, #0
    c1fe:	4ba0      	ldr	r3, [pc, #640]	; (c480 <selfTest+0x460>)
    c200:	1c10      	adds	r0, r2, #0
    c202:	4798      	blx	r3
    c204:	1c03      	adds	r3, r0, #0
    c206:	60bb      	str	r3, [r7, #8]
	tempVal = ADCtoTemperature(tempVal, BCOEFFICIENT_TGLYCOL);
    c208:	68ba      	ldr	r2, [r7, #8]
    c20a:	23f4      	movs	r3, #244	; 0xf4
    c20c:	011b      	lsls	r3, r3, #4
    c20e:	1c10      	adds	r0, r2, #0
    c210:	1c19      	adds	r1, r3, #0
    c212:	4b9d      	ldr	r3, [pc, #628]	; (c488 <selfTest+0x468>)
    c214:	4798      	blx	r3
    c216:	1c03      	adds	r3, r0, #0
    c218:	60bb      	str	r3, [r7, #8]
	chamber1.glycolTemp = tempVal;
    c21a:	4b92      	ldr	r3, [pc, #584]	; (c464 <selfTest+0x444>)
    c21c:	68ba      	ldr	r2, [r7, #8]
    c21e:	651a      	str	r2, [r3, #80]	; 0x50
	testParamLimits(1, chamber1.glycolTemp, ++test_num, "Tglyc");
    c220:	4b90      	ldr	r3, [pc, #576]	; (c464 <selfTest+0x444>)
    c222:	6d19      	ldr	r1, [r3, #80]	; 0x50
    c224:	1dfb      	adds	r3, r7, #7
    c226:	1dfa      	adds	r2, r7, #7
    c228:	7812      	ldrb	r2, [r2, #0]
    c22a:	3201      	adds	r2, #1
    c22c:	701a      	strb	r2, [r3, #0]
    c22e:	1dfb      	adds	r3, r7, #7
    c230:	781a      	ldrb	r2, [r3, #0]
    c232:	4b98      	ldr	r3, [pc, #608]	; (c494 <selfTest+0x474>)
    c234:	2001      	movs	r0, #1
    c236:	4c87      	ldr	r4, [pc, #540]	; (c454 <selfTest+0x434>)
    c238:	47a0      	blx	r4
		
	// turn on fans
	fanStart_emc2305(&fan4); 
    c23a:	4b80      	ldr	r3, [pc, #512]	; (c43c <selfTest+0x41c>)
    c23c:	1c18      	adds	r0, r3, #0
    c23e:	4b96      	ldr	r3, [pc, #600]	; (c498 <selfTest+0x478>)
    c240:	4798      	blx	r3
	fanSetSpeed_emc2305(&fan4, SELF_TEST_FAN_SPD);
    c242:	4b7e      	ldr	r3, [pc, #504]	; (c43c <selfTest+0x41c>)
    c244:	1c18      	adds	r0, r3, #0
    c246:	2132      	movs	r1, #50	; 0x32
    c248:	4b94      	ldr	r3, [pc, #592]	; (c49c <selfTest+0x47c>)
    c24a:	4798      	blx	r3
	fanReadRpm_emc2305(&fan4); 
    c24c:	4b7b      	ldr	r3, [pc, #492]	; (c43c <selfTest+0x41c>)
    c24e:	1c18      	adds	r0, r3, #0
    c250:	4b93      	ldr	r3, [pc, #588]	; (c4a0 <selfTest+0x480>)
    c252:	4798      	blx	r3
	fanStart_emc2305(&fan3); 
    c254:	4b78      	ldr	r3, [pc, #480]	; (c438 <selfTest+0x418>)
    c256:	1c18      	adds	r0, r3, #0
    c258:	4b8f      	ldr	r3, [pc, #572]	; (c498 <selfTest+0x478>)
    c25a:	4798      	blx	r3
	fanSetSpeed_emc2305(&fan3, SELF_TEST_FAN_SPD);			
    c25c:	4b76      	ldr	r3, [pc, #472]	; (c438 <selfTest+0x418>)
    c25e:	1c18      	adds	r0, r3, #0
    c260:	2132      	movs	r1, #50	; 0x32
    c262:	4b8e      	ldr	r3, [pc, #568]	; (c49c <selfTest+0x47c>)
    c264:	4798      	blx	r3
	fanStart_emc2305(&fan2); 
    c266:	4b73      	ldr	r3, [pc, #460]	; (c434 <selfTest+0x414>)
    c268:	1c18      	adds	r0, r3, #0
    c26a:	4b8b      	ldr	r3, [pc, #556]	; (c498 <selfTest+0x478>)
    c26c:	4798      	blx	r3
	fanSetSpeed_emc2305(&fan2, SELF_TEST_FAN_SPD);
    c26e:	4b71      	ldr	r3, [pc, #452]	; (c434 <selfTest+0x414>)
    c270:	1c18      	adds	r0, r3, #0
    c272:	2132      	movs	r1, #50	; 0x32
    c274:	4b89      	ldr	r3, [pc, #548]	; (c49c <selfTest+0x47c>)
    c276:	4798      	blx	r3
	fanReadRpm_emc2305(&fan2); 
    c278:	4b6e      	ldr	r3, [pc, #440]	; (c434 <selfTest+0x414>)
    c27a:	1c18      	adds	r0, r3, #0
    c27c:	4b88      	ldr	r3, [pc, #544]	; (c4a0 <selfTest+0x480>)
    c27e:	4798      	blx	r3
	fanStart_emc2305(&fan1); 
    c280:	4b6a      	ldr	r3, [pc, #424]	; (c42c <selfTest+0x40c>)
    c282:	1c18      	adds	r0, r3, #0
    c284:	4b84      	ldr	r3, [pc, #528]	; (c498 <selfTest+0x478>)
    c286:	4798      	blx	r3
	fanSetSpeed_emc2305(&fan1, SELF_TEST_FAN_SPD);
    c288:	4b68      	ldr	r3, [pc, #416]	; (c42c <selfTest+0x40c>)
    c28a:	1c18      	adds	r0, r3, #0
    c28c:	2132      	movs	r1, #50	; 0x32
    c28e:	4b83      	ldr	r3, [pc, #524]	; (c49c <selfTest+0x47c>)
    c290:	4798      	blx	r3
	delay_s(5); // wait
    c292:	4b6b      	ldr	r3, [pc, #428]	; (c440 <selfTest+0x420>)
    c294:	1c18      	adds	r0, r3, #0
    c296:	4b6b      	ldr	r3, [pc, #428]	; (c444 <selfTest+0x424>)
    c298:	4798      	blx	r3
						
	/////////////////////////////////////
	// rej fans (fan1, fan2)
	/////////////////////////////////////		
	fanReadRpm_emc2305(&fan1); 
    c29a:	4b64      	ldr	r3, [pc, #400]	; (c42c <selfTest+0x40c>)
    c29c:	1c18      	adds	r0, r3, #0
    c29e:	4b80      	ldr	r3, [pc, #512]	; (c4a0 <selfTest+0x480>)
    c2a0:	4798      	blx	r3
	testParamLimits(1, fan1.rpm, ++test_num, "Fan1");		
    c2a2:	4b62      	ldr	r3, [pc, #392]	; (c42c <selfTest+0x40c>)
    c2a4:	691a      	ldr	r2, [r3, #16]
    c2a6:	4b76      	ldr	r3, [pc, #472]	; (c480 <selfTest+0x460>)
    c2a8:	1c10      	adds	r0, r2, #0
    c2aa:	4798      	blx	r3
    c2ac:	1c01      	adds	r1, r0, #0
    c2ae:	1dfb      	adds	r3, r7, #7
    c2b0:	1dfa      	adds	r2, r7, #7
    c2b2:	7812      	ldrb	r2, [r2, #0]
    c2b4:	3201      	adds	r2, #1
    c2b6:	701a      	strb	r2, [r3, #0]
    c2b8:	1dfb      	adds	r3, r7, #7
    c2ba:	781a      	ldrb	r2, [r3, #0]
    c2bc:	4b79      	ldr	r3, [pc, #484]	; (c4a4 <selfTest+0x484>)
    c2be:	2001      	movs	r0, #1
    c2c0:	4c64      	ldr	r4, [pc, #400]	; (c454 <selfTest+0x434>)
    c2c2:	47a0      	blx	r4
	fanReadRpm_emc2305(&fan2); 
    c2c4:	4b5b      	ldr	r3, [pc, #364]	; (c434 <selfTest+0x414>)
    c2c6:	1c18      	adds	r0, r3, #0
    c2c8:	4b75      	ldr	r3, [pc, #468]	; (c4a0 <selfTest+0x480>)
    c2ca:	4798      	blx	r3
	testParamLimits(1, fan2.rpm, ++test_num, "Fan2");
    c2cc:	4b59      	ldr	r3, [pc, #356]	; (c434 <selfTest+0x414>)
    c2ce:	691a      	ldr	r2, [r3, #16]
    c2d0:	4b6b      	ldr	r3, [pc, #428]	; (c480 <selfTest+0x460>)
    c2d2:	1c10      	adds	r0, r2, #0
    c2d4:	4798      	blx	r3
    c2d6:	1c01      	adds	r1, r0, #0
    c2d8:	1dfb      	adds	r3, r7, #7
    c2da:	1dfa      	adds	r2, r7, #7
    c2dc:	7812      	ldrb	r2, [r2, #0]
    c2de:	3201      	adds	r2, #1
    c2e0:	701a      	strb	r2, [r3, #0]
    c2e2:	1dfb      	adds	r3, r7, #7
    c2e4:	781a      	ldrb	r2, [r3, #0]
    c2e6:	4b70      	ldr	r3, [pc, #448]	; (c4a8 <selfTest+0x488>)
    c2e8:	2001      	movs	r0, #1
    c2ea:	4c5a      	ldr	r4, [pc, #360]	; (c454 <selfTest+0x434>)
    c2ec:	47a0      	blx	r4
	/////////////////////////////////////
	/*
	fanReadRpm_emc2305(&fan3); 
	testParamLimits(fan3.rpm, ++test_num, "Fan3");
	*/
	testParamLimits(0, 0, ++test_num, "Fan3");
    c2ee:	1dfb      	adds	r3, r7, #7
    c2f0:	1dfa      	adds	r2, r7, #7
    c2f2:	7812      	ldrb	r2, [r2, #0]
    c2f4:	3201      	adds	r2, #1
    c2f6:	701a      	strb	r2, [r3, #0]
    c2f8:	2100      	movs	r1, #0
    c2fa:	1dfb      	adds	r3, r7, #7
    c2fc:	781a      	ldrb	r2, [r3, #0]
    c2fe:	4b6b      	ldr	r3, [pc, #428]	; (c4ac <selfTest+0x48c>)
    c300:	2000      	movs	r0, #0
    c302:	4c54      	ldr	r4, [pc, #336]	; (c454 <selfTest+0x434>)
    c304:	47a0      	blx	r4
		
	/////////////////////////////////////
	// chamber fan
	/////////////////////////////////////
	fanReadRpm_emc2305(&fan4); 
    c306:	4b4d      	ldr	r3, [pc, #308]	; (c43c <selfTest+0x41c>)
    c308:	1c18      	adds	r0, r3, #0
    c30a:	4b65      	ldr	r3, [pc, #404]	; (c4a0 <selfTest+0x480>)
    c30c:	4798      	blx	r3
	testParamLimits(1, fan4.rpm, ++test_num, "Fan4");
    c30e:	4b4b      	ldr	r3, [pc, #300]	; (c43c <selfTest+0x41c>)
    c310:	691a      	ldr	r2, [r3, #16]
    c312:	4b5b      	ldr	r3, [pc, #364]	; (c480 <selfTest+0x460>)
    c314:	1c10      	adds	r0, r2, #0
    c316:	4798      	blx	r3
    c318:	1c01      	adds	r1, r0, #0
    c31a:	1dfb      	adds	r3, r7, #7
    c31c:	1dfa      	adds	r2, r7, #7
    c31e:	7812      	ldrb	r2, [r2, #0]
    c320:	3201      	adds	r2, #1
    c322:	701a      	strb	r2, [r3, #0]
    c324:	1dfb      	adds	r3, r7, #7
    c326:	781a      	ldrb	r2, [r3, #0]
    c328:	4b61      	ldr	r3, [pc, #388]	; (c4b0 <selfTest+0x490>)
    c32a:	2001      	movs	r0, #1
    c32c:	4c49      	ldr	r4, [pc, #292]	; (c454 <selfTest+0x434>)
    c32e:	47a0      	blx	r4

	/////////////////////////////////////
	// php/output voltage
	/////////////////////////////////////
	ps1.desiredVoltage = 0;
    c330:	4b46      	ldr	r3, [pc, #280]	; (c44c <selfTest+0x42c>)
    c332:	2200      	movs	r2, #0
    c334:	615a      	str	r2, [r3, #20]
	
	psHwController();
    c336:	4b5f      	ldr	r3, [pc, #380]	; (c4b4 <selfTest+0x494>)
    c338:	4798      	blx	r3
		
	setOutputSwitch(PIN_ENBL_OUTPUT1, GPIO_MODE, ON);	  // enable output to php1
    c33a:	202e      	movs	r0, #46	; 0x2e
    c33c:	2101      	movs	r1, #1
    c33e:	2201      	movs	r2, #1
    c340:	4b39      	ldr	r3, [pc, #228]	; (c428 <selfTest+0x408>)
    c342:	4798      	blx	r3
	delay_s(5);
    c344:	4b3e      	ldr	r3, [pc, #248]	; (c440 <selfTest+0x420>)
    c346:	1c18      	adds	r0, r3, #0
    c348:	4b3e      	ldr	r3, [pc, #248]	; (c444 <selfTest+0x424>)
    c34a:	4798      	blx	r3
	tempVal = read_adc_pin(PIN_VPHP1);
    c34c:	200a      	movs	r0, #10
    c34e:	4b4b      	ldr	r3, [pc, #300]	; (c47c <selfTest+0x45c>)
    c350:	4798      	blx	r3
    c352:	1c03      	adds	r3, r0, #0
    c354:	1c1a      	adds	r2, r3, #0
    c356:	4b4a      	ldr	r3, [pc, #296]	; (c480 <selfTest+0x460>)
    c358:	1c10      	adds	r0, r2, #0
    c35a:	4798      	blx	r3
    c35c:	1c03      	adds	r3, r0, #0
    c35e:	60bb      	str	r3, [r7, #8]
	tempVal += 30;
    c360:	4b55      	ldr	r3, [pc, #340]	; (c4b8 <selfTest+0x498>)
    c362:	68b8      	ldr	r0, [r7, #8]
    c364:	4955      	ldr	r1, [pc, #340]	; (c4bc <selfTest+0x49c>)
    c366:	4798      	blx	r3
    c368:	1c03      	adds	r3, r0, #0
    c36a:	60bb      	str	r3, [r7, #8]
	tempVal = tempVal * VTEC_SCALING_FACTOR * ps1.standbyVoltage;
    c36c:	4b54      	ldr	r3, [pc, #336]	; (c4c0 <selfTest+0x4a0>)
    c36e:	68b8      	ldr	r0, [r7, #8]
    c370:	4798      	blx	r3
    c372:	1c03      	adds	r3, r0, #0
    c374:	1c0c      	adds	r4, r1, #0
    c376:	4d53      	ldr	r5, [pc, #332]	; (c4c4 <selfTest+0x4a4>)
    c378:	1c18      	adds	r0, r3, #0
    c37a:	1c21      	adds	r1, r4, #0
    c37c:	4b25      	ldr	r3, [pc, #148]	; (c414 <selfTest+0x3f4>)
    c37e:	4a24      	ldr	r2, [pc, #144]	; (c410 <selfTest+0x3f0>)
    c380:	47a8      	blx	r5
    c382:	1c03      	adds	r3, r0, #0
    c384:	1c0c      	adds	r4, r1, #0
    c386:	1c1d      	adds	r5, r3, #0
    c388:	1c26      	adds	r6, r4, #0
    c38a:	4b30      	ldr	r3, [pc, #192]	; (c44c <selfTest+0x42c>)
    c38c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    c38e:	4b4c      	ldr	r3, [pc, #304]	; (c4c0 <selfTest+0x4a0>)
    c390:	1c10      	adds	r0, r2, #0
    c392:	4798      	blx	r3
    c394:	1c03      	adds	r3, r0, #0
    c396:	1c0c      	adds	r4, r1, #0
    c398:	494a      	ldr	r1, [pc, #296]	; (c4c4 <selfTest+0x4a4>)
    c39a:	468c      	mov	ip, r1
    c39c:	1c28      	adds	r0, r5, #0
    c39e:	1c31      	adds	r1, r6, #0
    c3a0:	1c1a      	adds	r2, r3, #0
    c3a2:	1c23      	adds	r3, r4, #0
    c3a4:	47e0      	blx	ip
    c3a6:	1c03      	adds	r3, r0, #0
    c3a8:	1c0c      	adds	r4, r1, #0
    c3aa:	4a47      	ldr	r2, [pc, #284]	; (c4c8 <selfTest+0x4a8>)
    c3ac:	1c18      	adds	r0, r3, #0
    c3ae:	1c21      	adds	r1, r4, #0
    c3b0:	4790      	blx	r2
    c3b2:	1c03      	adds	r3, r0, #0
    c3b4:	60bb      	str	r3, [r7, #8]
	if (tempVal > 0.0)
    c3b6:	4b45      	ldr	r3, [pc, #276]	; (c4cc <selfTest+0x4ac>)
    c3b8:	68b8      	ldr	r0, [r7, #8]
    c3ba:	2100      	movs	r1, #0
    c3bc:	4798      	blx	r3
    c3be:	1c03      	adds	r3, r0, #0
    c3c0:	2b00      	cmp	r3, #0
    c3c2:	d100      	bne.n	c3c6 <selfTest+0x3a6>
    c3c4:	e088      	b.n	c4d8 <selfTest+0x4b8>
	{
		tempVal = ( round(tempVal * 10.0) / 10.0 ); // reduce granularity of measured voltage
    c3c6:	4b3e      	ldr	r3, [pc, #248]	; (c4c0 <selfTest+0x4a0>)
    c3c8:	68b8      	ldr	r0, [r7, #8]
    c3ca:	4798      	blx	r3
    c3cc:	1c03      	adds	r3, r0, #0
    c3ce:	1c0c      	adds	r4, r1, #0
    c3d0:	4d3c      	ldr	r5, [pc, #240]	; (c4c4 <selfTest+0x4a4>)
    c3d2:	1c18      	adds	r0, r3, #0
    c3d4:	1c21      	adds	r1, r4, #0
    c3d6:	4a10      	ldr	r2, [pc, #64]	; (c418 <selfTest+0x3f8>)
    c3d8:	4b10      	ldr	r3, [pc, #64]	; (c41c <selfTest+0x3fc>)
    c3da:	47a8      	blx	r5
    c3dc:	1c03      	adds	r3, r0, #0
    c3de:	1c0c      	adds	r4, r1, #0
    c3e0:	1c18      	adds	r0, r3, #0
    c3e2:	1c21      	adds	r1, r4, #0
    c3e4:	4b3a      	ldr	r3, [pc, #232]	; (c4d0 <selfTest+0x4b0>)
    c3e6:	4798      	blx	r3
    c3e8:	1c03      	adds	r3, r0, #0
    c3ea:	1c0c      	adds	r4, r1, #0
    c3ec:	4d39      	ldr	r5, [pc, #228]	; (c4d4 <selfTest+0x4b4>)
    c3ee:	1c18      	adds	r0, r3, #0
    c3f0:	1c21      	adds	r1, r4, #0
    c3f2:	4a09      	ldr	r2, [pc, #36]	; (c418 <selfTest+0x3f8>)
    c3f4:	4b09      	ldr	r3, [pc, #36]	; (c41c <selfTest+0x3fc>)
    c3f6:	47a8      	blx	r5
    c3f8:	1c03      	adds	r3, r0, #0
    c3fa:	1c0c      	adds	r4, r1, #0
    c3fc:	4a32      	ldr	r2, [pc, #200]	; (c4c8 <selfTest+0x4a8>)
    c3fe:	1c18      	adds	r0, r3, #0
    c400:	1c21      	adds	r1, r4, #0
    c402:	4790      	blx	r2
    c404:	1c03      	adds	r3, r0, #0
    c406:	60bb      	str	r3, [r7, #8]
		ps1.phpVoltage = tempVal;
    c408:	4b10      	ldr	r3, [pc, #64]	; (c44c <selfTest+0x42c>)
    c40a:	68ba      	ldr	r2, [r7, #8]
    c40c:	61da      	str	r2, [r3, #28]
    c40e:	e066      	b.n	c4de <selfTest+0x4be>
    c410:	a9973d9f 	.word	0xa9973d9f
    c414:	3f96f049 	.word	0x3f96f049
    c418:	00000000 	.word	0x00000000
    c41c:	40240000 	.word	0x40240000
    c420:	20000094 	.word	0x20000094
    c424:	2000033c 	.word	0x2000033c
    c428:	0000ecc9 	.word	0x0000ecc9
    c42c:	20000e84 	.word	0x20000e84
    c430:	00005ad9 	.word	0x00005ad9
    c434:	20000c58 	.word	0x20000c58
    c438:	20000d18 	.word	0x20000d18
    c43c:	20000adc 	.word	0x20000adc
    c440:	00001388 	.word	0x00001388
    c444:	000105b1 	.word	0x000105b1
    c448:	0000dde1 	.word	0x0000dde1
    c44c:	20000a84 	.word	0x20000a84
    c450:	000252d4 	.word	0x000252d4
    c454:	0000c729 	.word	0x0000c729
    c458:	000252dc 	.word	0x000252dc
    c45c:	000252e4 	.word	0x000252e4
    c460:	000252ec 	.word	0x000252ec
    c464:	200009b8 	.word	0x200009b8
    c468:	000252f4 	.word	0x000252f4
    c46c:	20000960 	.word	0x20000960
    c470:	000252fc 	.word	0x000252fc
    c474:	200003b4 	.word	0x200003b4
    c478:	00025304 	.word	0x00025304
    c47c:	0000dd49 	.word	0x0000dd49
    c480:	0002046d 	.word	0x0002046d
    c484:	2000018c 	.word	0x2000018c
    c488:	0000e329 	.word	0x0000e329
    c48c:	0002530c 	.word	0x0002530c
    c490:	00025314 	.word	0x00025314
    c494:	0002531c 	.word	0x0002531c
    c498:	000059c9 	.word	0x000059c9
    c49c:	00005889 	.word	0x00005889
    c4a0:	00005be1 	.word	0x00005be1
    c4a4:	00025324 	.word	0x00025324
    c4a8:	0002532c 	.word	0x0002532c
    c4ac:	00025334 	.word	0x00025334
    c4b0:	0002533c 	.word	0x0002533c
    c4b4:	0000e441 	.word	0x0000e441
    c4b8:	0001f79d 	.word	0x0001f79d
    c4bc:	41f00000 	.word	0x41f00000
    c4c0:	00022111 	.word	0x00022111
    c4c4:	00021435 	.word	0x00021435
    c4c8:	000221b5 	.word	0x000221b5
    c4cc:	0001f655 	.word	0x0001f655
    c4d0:	00019ac9 	.word	0x00019ac9
    c4d4:	00020b55 	.word	0x00020b55
	}
	else
	{
		ps1.phpVoltage = 0;
    c4d8:	4b75      	ldr	r3, [pc, #468]	; (c6b0 <selfTest+0x690>)
    c4da:	2200      	movs	r2, #0
    c4dc:	61da      	str	r2, [r3, #28]
	}
	testParamLimits(1, ps1.phpVoltage, ++test_num, "Vphp1");
    c4de:	4b74      	ldr	r3, [pc, #464]	; (c6b0 <selfTest+0x690>)
    c4e0:	69d9      	ldr	r1, [r3, #28]
    c4e2:	1dfb      	adds	r3, r7, #7
    c4e4:	1dfa      	adds	r2, r7, #7
    c4e6:	7812      	ldrb	r2, [r2, #0]
    c4e8:	3201      	adds	r2, #1
    c4ea:	701a      	strb	r2, [r3, #0]
    c4ec:	1dfb      	adds	r3, r7, #7
    c4ee:	781a      	ldrb	r2, [r3, #0]
    c4f0:	4b70      	ldr	r3, [pc, #448]	; (c6b4 <selfTest+0x694>)
    c4f2:	2001      	movs	r0, #1
    c4f4:	4c70      	ldr	r4, [pc, #448]	; (c6b8 <selfTest+0x698>)
    c4f6:	47a0      	blx	r4

#ifdef HIGH_PERFORMANCE		
	setOutputSwitch(PIN_ENBL_OUTA_COLD, GPIO_MODE, ON);	  // enable output to php2
    c4f8:	203f      	movs	r0, #63	; 0x3f
    c4fa:	2101      	movs	r1, #1
    c4fc:	2201      	movs	r2, #1
    c4fe:	4b6f      	ldr	r3, [pc, #444]	; (c6bc <selfTest+0x69c>)
    c500:	4798      	blx	r3
	delay_s(5);
    c502:	4b6f      	ldr	r3, [pc, #444]	; (c6c0 <selfTest+0x6a0>)
    c504:	1c18      	adds	r0, r3, #0
    c506:	4b6f      	ldr	r3, [pc, #444]	; (c6c4 <selfTest+0x6a4>)
    c508:	4798      	blx	r3
	tempVal = read_adc_pin(PIN_VPHP2);
    c50a:	2000      	movs	r0, #0
    c50c:	4b6e      	ldr	r3, [pc, #440]	; (c6c8 <selfTest+0x6a8>)
    c50e:	4798      	blx	r3
    c510:	1c03      	adds	r3, r0, #0
    c512:	1c1a      	adds	r2, r3, #0
    c514:	4b6d      	ldr	r3, [pc, #436]	; (c6cc <selfTest+0x6ac>)
    c516:	1c10      	adds	r0, r2, #0
    c518:	4798      	blx	r3
    c51a:	1c03      	adds	r3, r0, #0
    c51c:	60bb      	str	r3, [r7, #8]
	tempVal += 30;
    c51e:	4b6c      	ldr	r3, [pc, #432]	; (c6d0 <selfTest+0x6b0>)
    c520:	68b8      	ldr	r0, [r7, #8]
    c522:	496c      	ldr	r1, [pc, #432]	; (c6d4 <selfTest+0x6b4>)
    c524:	4798      	blx	r3
    c526:	1c03      	adds	r3, r0, #0
    c528:	60bb      	str	r3, [r7, #8]
	tempVal = tempVal * VTEC_SCALING_FACTOR * ps1.standbyVoltage;
    c52a:	4b6b      	ldr	r3, [pc, #428]	; (c6d8 <selfTest+0x6b8>)
    c52c:	68b8      	ldr	r0, [r7, #8]
    c52e:	4798      	blx	r3
    c530:	1c03      	adds	r3, r0, #0
    c532:	1c0c      	adds	r4, r1, #0
    c534:	4d69      	ldr	r5, [pc, #420]	; (c6dc <selfTest+0x6bc>)
    c536:	1c18      	adds	r0, r3, #0
    c538:	1c21      	adds	r1, r4, #0
    c53a:	4b5a      	ldr	r3, [pc, #360]	; (c6a4 <selfTest+0x684>)
    c53c:	4a58      	ldr	r2, [pc, #352]	; (c6a0 <selfTest+0x680>)
    c53e:	47a8      	blx	r5
    c540:	1c03      	adds	r3, r0, #0
    c542:	1c0c      	adds	r4, r1, #0
    c544:	1c1d      	adds	r5, r3, #0
    c546:	1c26      	adds	r6, r4, #0
    c548:	4b59      	ldr	r3, [pc, #356]	; (c6b0 <selfTest+0x690>)
    c54a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    c54c:	4b62      	ldr	r3, [pc, #392]	; (c6d8 <selfTest+0x6b8>)
    c54e:	1c10      	adds	r0, r2, #0
    c550:	4798      	blx	r3
    c552:	1c03      	adds	r3, r0, #0
    c554:	1c0c      	adds	r4, r1, #0
    c556:	4a61      	ldr	r2, [pc, #388]	; (c6dc <selfTest+0x6bc>)
    c558:	4694      	mov	ip, r2
    c55a:	1c28      	adds	r0, r5, #0
    c55c:	1c31      	adds	r1, r6, #0
    c55e:	1c1a      	adds	r2, r3, #0
    c560:	1c23      	adds	r3, r4, #0
    c562:	47e0      	blx	ip
    c564:	1c03      	adds	r3, r0, #0
    c566:	1c0c      	adds	r4, r1, #0
    c568:	4a5d      	ldr	r2, [pc, #372]	; (c6e0 <selfTest+0x6c0>)
    c56a:	1c18      	adds	r0, r3, #0
    c56c:	1c21      	adds	r1, r4, #0
    c56e:	4790      	blx	r2
    c570:	1c03      	adds	r3, r0, #0
    c572:	60bb      	str	r3, [r7, #8]
	if (tempVal > 0.0)
    c574:	4b5b      	ldr	r3, [pc, #364]	; (c6e4 <selfTest+0x6c4>)
    c576:	68b8      	ldr	r0, [r7, #8]
    c578:	2100      	movs	r1, #0
    c57a:	4798      	blx	r3
    c57c:	1c03      	adds	r3, r0, #0
    c57e:	2b00      	cmp	r3, #0
    c580:	d024      	beq.n	c5cc <selfTest+0x5ac>
	{
		tempVal = ( round(tempVal * 10.0) / 10.0 ); // reduce granularity of measured voltage
    c582:	4b55      	ldr	r3, [pc, #340]	; (c6d8 <selfTest+0x6b8>)
    c584:	68b8      	ldr	r0, [r7, #8]
    c586:	4798      	blx	r3
    c588:	1c03      	adds	r3, r0, #0
    c58a:	1c0c      	adds	r4, r1, #0
    c58c:	4d53      	ldr	r5, [pc, #332]	; (c6dc <selfTest+0x6bc>)
    c58e:	1c18      	adds	r0, r3, #0
    c590:	1c21      	adds	r1, r4, #0
    c592:	4a45      	ldr	r2, [pc, #276]	; (c6a8 <selfTest+0x688>)
    c594:	4b45      	ldr	r3, [pc, #276]	; (c6ac <selfTest+0x68c>)
    c596:	47a8      	blx	r5
    c598:	1c03      	adds	r3, r0, #0
    c59a:	1c0c      	adds	r4, r1, #0
    c59c:	1c18      	adds	r0, r3, #0
    c59e:	1c21      	adds	r1, r4, #0
    c5a0:	4b51      	ldr	r3, [pc, #324]	; (c6e8 <selfTest+0x6c8>)
    c5a2:	4798      	blx	r3
    c5a4:	1c03      	adds	r3, r0, #0
    c5a6:	1c0c      	adds	r4, r1, #0
    c5a8:	4d50      	ldr	r5, [pc, #320]	; (c6ec <selfTest+0x6cc>)
    c5aa:	1c18      	adds	r0, r3, #0
    c5ac:	1c21      	adds	r1, r4, #0
    c5ae:	4a3e      	ldr	r2, [pc, #248]	; (c6a8 <selfTest+0x688>)
    c5b0:	4b3e      	ldr	r3, [pc, #248]	; (c6ac <selfTest+0x68c>)
    c5b2:	47a8      	blx	r5
    c5b4:	1c03      	adds	r3, r0, #0
    c5b6:	1c0c      	adds	r4, r1, #0
    c5b8:	4a49      	ldr	r2, [pc, #292]	; (c6e0 <selfTest+0x6c0>)
    c5ba:	1c18      	adds	r0, r3, #0
    c5bc:	1c21      	adds	r1, r4, #0
    c5be:	4790      	blx	r2
    c5c0:	1c03      	adds	r3, r0, #0
    c5c2:	60bb      	str	r3, [r7, #8]
		ps2.phpVoltage = tempVal;
    c5c4:	4b4a      	ldr	r3, [pc, #296]	; (c6f0 <selfTest+0x6d0>)
    c5c6:	68ba      	ldr	r2, [r7, #8]
    c5c8:	61da      	str	r2, [r3, #28]
    c5ca:	e002      	b.n	c5d2 <selfTest+0x5b2>
	}
	else
	{
		ps2.phpVoltage = 0;
    c5cc:	4b48      	ldr	r3, [pc, #288]	; (c6f0 <selfTest+0x6d0>)
    c5ce:	2200      	movs	r2, #0
    c5d0:	61da      	str	r2, [r3, #28]
	}
	testParamLimits(1, ps2.phpVoltage, ++test_num, "Vphp2");
    c5d2:	4b47      	ldr	r3, [pc, #284]	; (c6f0 <selfTest+0x6d0>)
    c5d4:	69d9      	ldr	r1, [r3, #28]
    c5d6:	1dfb      	adds	r3, r7, #7
    c5d8:	1dfa      	adds	r2, r7, #7
    c5da:	7812      	ldrb	r2, [r2, #0]
    c5dc:	3201      	adds	r2, #1
    c5de:	701a      	strb	r2, [r3, #0]
    c5e0:	1dfb      	adds	r3, r7, #7
    c5e2:	781a      	ldrb	r2, [r3, #0]
    c5e4:	4b43      	ldr	r3, [pc, #268]	; (c6f4 <selfTest+0x6d4>)
    c5e6:	2001      	movs	r0, #1
    c5e8:	4c33      	ldr	r4, [pc, #204]	; (c6b8 <selfTest+0x698>)
    c5ea:	47a0      	blx	r4
#endif
	
	/////////////////////////////////////
	// php/output current
	/////////////////////////////////////	
	adc_disable(&adc_inst);
    c5ec:	4b42      	ldr	r3, [pc, #264]	; (c6f8 <selfTest+0x6d8>)
    c5ee:	1c18      	adds	r0, r3, #0
    c5f0:	4b42      	ldr	r3, [pc, #264]	; (c6fc <selfTest+0x6dc>)
    c5f2:	4798      	blx	r3
	configure_adc(ADC_REFERENCE_INT1V);
    c5f4:	2000      	movs	r0, #0
    c5f6:	4b42      	ldr	r3, [pc, #264]	; (c700 <selfTest+0x6e0>)
    c5f8:	4798      	blx	r3
	/*	
	tempVal = read_adc_pin(PIN_IPHP2);
	tempVal = tempVal * IPHP2_SCALING_FACTOR;// * ps1.standbyVoltage;
	ps2.outputCurrent = tempVal;
	*/
	adc_disable(&adc_inst);
    c5fa:	4b3f      	ldr	r3, [pc, #252]	; (c6f8 <selfTest+0x6d8>)
    c5fc:	1c18      	adds	r0, r3, #0
    c5fe:	4b3f      	ldr	r3, [pc, #252]	; (c6fc <selfTest+0x6dc>)
    c600:	4798      	blx	r3
	configure_adc(ADC_REF_VOLTAGE);
    c602:	2003      	movs	r0, #3
    c604:	4b3e      	ldr	r3, [pc, #248]	; (c700 <selfTest+0x6e0>)
    c606:	4798      	blx	r3
	//testParamLimits(1, ps2.outputCurrent, ++test_num, "Iphp2");
#else
	testParamLimits(0, 0, ++test_num, "Iphp2");
#endif
	setOutputSwitch(PIN_ENBL_OUTPUT1, GPIO_MODE, OFF);	  // disable output to php1
    c608:	202e      	movs	r0, #46	; 0x2e
    c60a:	2101      	movs	r1, #1
    c60c:	2200      	movs	r2, #0
    c60e:	4b2b      	ldr	r3, [pc, #172]	; (c6bc <selfTest+0x69c>)
    c610:	4798      	blx	r3
	setOutputSwitch(PIN_ENBL_OUTA_COLD, GPIO_MODE, OFF);	  // disable output to php2		
    c612:	203f      	movs	r0, #63	; 0x3f
    c614:	2101      	movs	r1, #1
    c616:	2200      	movs	r2, #0
    c618:	4b28      	ldr	r3, [pc, #160]	; (c6bc <selfTest+0x69c>)
    c61a:	4798      	blx	r3
	fanStop_emc2305(&fan3);
	fanStop_emc2305(&fan4);		
	*/		
		
	// update status
	for (uint8_t n=0; n<SELF_TEST_RESULTS_ARRAY_SIZE; n++)
    c61c:	1c3b      	adds	r3, r7, #0
    c61e:	330e      	adds	r3, #14
    c620:	2200      	movs	r2, #0
    c622:	701a      	strb	r2, [r3, #0]
    c624:	e018      	b.n	c658 <selfTest+0x638>
	{
		self_test_status = self_test_status | (test_results_array[n]<<n);
    c626:	1c3b      	adds	r3, r7, #0
    c628:	330e      	adds	r3, #14
    c62a:	781b      	ldrb	r3, [r3, #0]
    c62c:	4a35      	ldr	r2, [pc, #212]	; (c704 <selfTest+0x6e4>)
    c62e:	5cd3      	ldrb	r3, [r2, r3]
    c630:	1c1a      	adds	r2, r3, #0
    c632:	1c3b      	adds	r3, r7, #0
    c634:	330e      	adds	r3, #14
    c636:	781b      	ldrb	r3, [r3, #0]
    c638:	1c11      	adds	r1, r2, #0
    c63a:	4099      	lsls	r1, r3
    c63c:	1c0b      	adds	r3, r1, #0
    c63e:	1c1a      	adds	r2, r3, #0
    c640:	4b31      	ldr	r3, [pc, #196]	; (c708 <selfTest+0x6e8>)
    c642:	681b      	ldr	r3, [r3, #0]
    c644:	431a      	orrs	r2, r3
    c646:	4b30      	ldr	r3, [pc, #192]	; (c708 <selfTest+0x6e8>)
    c648:	601a      	str	r2, [r3, #0]
	fanStop_emc2305(&fan3);
	fanStop_emc2305(&fan4);		
	*/		
		
	// update status
	for (uint8_t n=0; n<SELF_TEST_RESULTS_ARRAY_SIZE; n++)
    c64a:	1c3b      	adds	r3, r7, #0
    c64c:	330e      	adds	r3, #14
    c64e:	781a      	ldrb	r2, [r3, #0]
    c650:	1c3b      	adds	r3, r7, #0
    c652:	330e      	adds	r3, #14
    c654:	3201      	adds	r2, #1
    c656:	701a      	strb	r2, [r3, #0]
    c658:	1c3b      	adds	r3, r7, #0
    c65a:	330e      	adds	r3, #14
    c65c:	781b      	ldrb	r3, [r3, #0]
    c65e:	2b1f      	cmp	r3, #31
    c660:	d9e1      	bls.n	c626 <selfTest+0x606>
	{
		self_test_status = self_test_status | (test_results_array[n]<<n);
	}
	self_test_status_hi = (self_test_status & 0xffff0000)>>16;
    c662:	4b29      	ldr	r3, [pc, #164]	; (c708 <selfTest+0x6e8>)
    c664:	681b      	ldr	r3, [r3, #0]
    c666:	0c1b      	lsrs	r3, r3, #16
    c668:	b29a      	uxth	r2, r3
    c66a:	4b28      	ldr	r3, [pc, #160]	; (c70c <selfTest+0x6ec>)
    c66c:	801a      	strh	r2, [r3, #0]
	self_test_status_lo = (self_test_status & 0x0000ffff);
    c66e:	4b26      	ldr	r3, [pc, #152]	; (c708 <selfTest+0x6e8>)
    c670:	681b      	ldr	r3, [r3, #0]
    c672:	b29a      	uxth	r2, r3
    c674:	4b26      	ldr	r3, [pc, #152]	; (c710 <selfTest+0x6f0>)
    c676:	801a      	strh	r2, [r3, #0]
	dbg_info("\n  test status is %#8lx", self_test_status);
    c678:	4b23      	ldr	r3, [pc, #140]	; (c708 <selfTest+0x6e8>)
    c67a:	681b      	ldr	r3, [r3, #0]
    c67c:	4a25      	ldr	r2, [pc, #148]	; (c714 <selfTest+0x6f4>)
    c67e:	1c10      	adds	r0, r2, #0
    c680:	1c19      	adds	r1, r3, #0
    c682:	4b25      	ldr	r3, [pc, #148]	; (c718 <selfTest+0x6f8>)
    c684:	4798      	blx	r3
	dbg("\n[self test complete]");
    c686:	4b25      	ldr	r3, [pc, #148]	; (c71c <selfTest+0x6fc>)
    c688:	1c18      	adds	r0, r3, #0
    c68a:	4b23      	ldr	r3, [pc, #140]	; (c718 <selfTest+0x6f8>)
    c68c:	4798      	blx	r3
	
	selfTestIsRunning = 0;
    c68e:	4b24      	ldr	r3, [pc, #144]	; (c720 <selfTest+0x700>)
    c690:	2200      	movs	r2, #0
    c692:	701a      	strb	r2, [r3, #0]
		
	return 1;			
    c694:	2301      	movs	r3, #1
}
    c696:	1c18      	adds	r0, r3, #0
    c698:	46bd      	mov	sp, r7
    c69a:	b005      	add	sp, #20
    c69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c69e:	46c0      	nop			; (mov r8, r8)
    c6a0:	a9973d9f 	.word	0xa9973d9f
    c6a4:	3f96f049 	.word	0x3f96f049
    c6a8:	00000000 	.word	0x00000000
    c6ac:	40240000 	.word	0x40240000
    c6b0:	20000a84 	.word	0x20000a84
    c6b4:	00025344 	.word	0x00025344
    c6b8:	0000c729 	.word	0x0000c729
    c6bc:	0000ecc9 	.word	0x0000ecc9
    c6c0:	00001388 	.word	0x00001388
    c6c4:	000105b1 	.word	0x000105b1
    c6c8:	0000dd49 	.word	0x0000dd49
    c6cc:	0002046d 	.word	0x0002046d
    c6d0:	0001f79d 	.word	0x0001f79d
    c6d4:	41f00000 	.word	0x41f00000
    c6d8:	00022111 	.word	0x00022111
    c6dc:	00021435 	.word	0x00021435
    c6e0:	000221b5 	.word	0x000221b5
    c6e4:	0001f655 	.word	0x0001f655
    c6e8:	00019ac9 	.word	0x00019ac9
    c6ec:	00020b55 	.word	0x00020b55
    c6f0:	20000d64 	.word	0x20000d64
    c6f4:	0002534c 	.word	0x0002534c
    c6f8:	200011a8 	.word	0x200011a8
    c6fc:	0000bf2d 	.word	0x0000bf2d
    c700:	0000fce9 	.word	0x0000fce9
    c704:	20000094 	.word	0x20000094
    c708:	2000033c 	.word	0x2000033c
    c70c:	20000340 	.word	0x20000340
    c710:	20000342 	.word	0x20000342
    c714:	00025354 	.word	0x00025354
    c718:	0001b62d 	.word	0x0001b62d
    c71c:	0002536c 	.word	0x0002536c
    c720:	20000344 	.word	0x20000344
    c724:	46c0      	nop			; (mov r8, r8)
    c726:	46c0      	nop			; (mov r8, r8)

0000c728 <testParamLimits>:

bool testParamLimits(bool run, float input, uint8_t test_num, const char * test_name)
{	
    c728:	b5f0      	push	{r4, r5, r6, r7, lr}
    c72a:	464f      	mov	r7, r9
    c72c:	4646      	mov	r6, r8
    c72e:	b4c0      	push	{r6, r7}
    c730:	b091      	sub	sp, #68	; 0x44
    c732:	af06      	add	r7, sp, #24
    c734:	61b9      	str	r1, [r7, #24]
    c736:	617b      	str	r3, [r7, #20]
    c738:	1c3b      	adds	r3, r7, #0
    c73a:	331f      	adds	r3, #31
    c73c:	1c01      	adds	r1, r0, #0
    c73e:	7019      	strb	r1, [r3, #0]
    c740:	1c3b      	adds	r3, r7, #0
    c742:	331e      	adds	r3, #30
    c744:	701a      	strb	r2, [r3, #0]
	float upr_lim_val = 0;
    c746:	2300      	movs	r3, #0
    c748:	627b      	str	r3, [r7, #36]	; 0x24
	float lwr_lim_val = 0;
    c74a:	2300      	movs	r3, #0
    c74c:	623b      	str	r3, [r7, #32]
	
	upr_lim_val = testUprLimit[test_num];
    c74e:	1c3b      	adds	r3, r7, #0
    c750:	331e      	adds	r3, #30
    c752:	781a      	ldrb	r2, [r3, #0]
    c754:	4b39      	ldr	r3, [pc, #228]	; (c83c <testParamLimits+0x114>)
    c756:	0092      	lsls	r2, r2, #2
    c758:	58d3      	ldr	r3, [r2, r3]
    c75a:	627b      	str	r3, [r7, #36]	; 0x24
	lwr_lim_val = testLwrLimit[test_num];
    c75c:	1c3b      	adds	r3, r7, #0
    c75e:	331e      	adds	r3, #30
    c760:	781a      	ldrb	r2, [r3, #0]
    c762:	4b37      	ldr	r3, [pc, #220]	; (c840 <testParamLimits+0x118>)
    c764:	0092      	lsls	r2, r2, #2
    c766:	58d3      	ldr	r3, [r2, r3]
    c768:	623b      	str	r3, [r7, #32]
	
	if (run)
    c76a:	1c3b      	adds	r3, r7, #0
    c76c:	331f      	adds	r3, #31
    c76e:	781b      	ldrb	r3, [r3, #0]
    c770:	2b00      	cmp	r3, #0
    c772:	d04b      	beq.n	c80c <testParamLimits+0xe4>
	{
		if (input<=(upr_lim_val) && input>=lwr_lim_val)
    c774:	4b33      	ldr	r3, [pc, #204]	; (c844 <testParamLimits+0x11c>)
    c776:	69b8      	ldr	r0, [r7, #24]
    c778:	6a79      	ldr	r1, [r7, #36]	; 0x24
    c77a:	4798      	blx	r3
    c77c:	1c03      	adds	r3, r0, #0
    c77e:	2b00      	cmp	r3, #0
    c780:	d00d      	beq.n	c79e <testParamLimits+0x76>
    c782:	4b31      	ldr	r3, [pc, #196]	; (c848 <testParamLimits+0x120>)
    c784:	69b8      	ldr	r0, [r7, #24]
    c786:	6a39      	ldr	r1, [r7, #32]
    c788:	4798      	blx	r3
    c78a:	1c03      	adds	r3, r0, #0
    c78c:	2b00      	cmp	r3, #0
    c78e:	d006      	beq.n	c79e <testParamLimits+0x76>
			test_results_array[test_num] = 1;
    c790:	1c3b      	adds	r3, r7, #0
    c792:	331e      	adds	r3, #30
    c794:	781b      	ldrb	r3, [r3, #0]
    c796:	4a2d      	ldr	r2, [pc, #180]	; (c84c <testParamLimits+0x124>)
    c798:	2101      	movs	r1, #1
    c79a:	54d1      	strb	r1, [r2, r3]
    c79c:	e005      	b.n	c7aa <testParamLimits+0x82>
		else
			test_results_array[test_num] = 0;
    c79e:	1c3b      	adds	r3, r7, #0
    c7a0:	331e      	adds	r3, #30
    c7a2:	781b      	ldrb	r3, [r3, #0]
    c7a4:	4a29      	ldr	r2, [pc, #164]	; (c84c <testParamLimits+0x124>)
    c7a6:	2100      	movs	r1, #0
    c7a8:	54d1      	strb	r1, [r2, r3]
		
		dbg_info("\n  %-2d %s\t%s\t%4.2f\t(%4.2f, %4.2f)",
    c7aa:	1c3b      	adds	r3, r7, #0
    c7ac:	331e      	adds	r3, #30
    c7ae:	781b      	ldrb	r3, [r3, #0]
    c7b0:	4699      	mov	r9, r3
    c7b2:	1c3b      	adds	r3, r7, #0
    c7b4:	331e      	adds	r3, #30
    c7b6:	781b      	ldrb	r3, [r3, #0]
    c7b8:	4a24      	ldr	r2, [pc, #144]	; (c84c <testParamLimits+0x124>)
    c7ba:	5cd3      	ldrb	r3, [r2, r3]
    c7bc:	2b00      	cmp	r3, #0
    c7be:	d002      	beq.n	c7c6 <testParamLimits+0x9e>
    c7c0:	4b23      	ldr	r3, [pc, #140]	; (c850 <testParamLimits+0x128>)
    c7c2:	4698      	mov	r8, r3
    c7c4:	e001      	b.n	c7ca <testParamLimits+0xa2>
    c7c6:	4c23      	ldr	r4, [pc, #140]	; (c854 <testParamLimits+0x12c>)
    c7c8:	46a0      	mov	r8, r4
    c7ca:	4b23      	ldr	r3, [pc, #140]	; (c858 <testParamLimits+0x130>)
    c7cc:	69b8      	ldr	r0, [r7, #24]
    c7ce:	4798      	blx	r3
    c7d0:	60b8      	str	r0, [r7, #8]
    c7d2:	60f9      	str	r1, [r7, #12]
    c7d4:	4b20      	ldr	r3, [pc, #128]	; (c858 <testParamLimits+0x130>)
    c7d6:	6a38      	ldr	r0, [r7, #32]
    c7d8:	4798      	blx	r3
    c7da:	1c05      	adds	r5, r0, #0
    c7dc:	1c0e      	adds	r6, r1, #0
    c7de:	4b1e      	ldr	r3, [pc, #120]	; (c858 <testParamLimits+0x130>)
    c7e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    c7e2:	4798      	blx	r3
    c7e4:	6038      	str	r0, [r7, #0]
    c7e6:	6079      	str	r1, [r7, #4]
    c7e8:	491c      	ldr	r1, [pc, #112]	; (c85c <testParamLimits+0x134>)
    c7ea:	697a      	ldr	r2, [r7, #20]
    c7ec:	68bb      	ldr	r3, [r7, #8]
    c7ee:	68fc      	ldr	r4, [r7, #12]
    c7f0:	9300      	str	r3, [sp, #0]
    c7f2:	9401      	str	r4, [sp, #4]
    c7f4:	9502      	str	r5, [sp, #8]
    c7f6:	9603      	str	r6, [sp, #12]
    c7f8:	683b      	ldr	r3, [r7, #0]
    c7fa:	687c      	ldr	r4, [r7, #4]
    c7fc:	9304      	str	r3, [sp, #16]
    c7fe:	9405      	str	r4, [sp, #20]
    c800:	1c08      	adds	r0, r1, #0
    c802:	4649      	mov	r1, r9
    c804:	4643      	mov	r3, r8
    c806:	4c16      	ldr	r4, [pc, #88]	; (c860 <testParamLimits+0x138>)
    c808:	47a0      	blx	r4
    c80a:	e00f      	b.n	c82c <testParamLimits+0x104>
		 test_num, test_name, test_results_array[test_num]==true?"pass":"FAIL", input, lwr_lim_val, upr_lim_val);
	}
	else
	{
		test_results_array[test_num] = 1;
    c80c:	1c3b      	adds	r3, r7, #0
    c80e:	331e      	adds	r3, #30
    c810:	781b      	ldrb	r3, [r3, #0]
    c812:	4a0e      	ldr	r2, [pc, #56]	; (c84c <testParamLimits+0x124>)
    c814:	2101      	movs	r1, #1
    c816:	54d1      	strb	r1, [r2, r3]
		dbg_info("\n  %-2d %s\tskip", test_num, test_name);
    c818:	1c3b      	adds	r3, r7, #0
    c81a:	331e      	adds	r3, #30
    c81c:	781a      	ldrb	r2, [r3, #0]
    c81e:	4911      	ldr	r1, [pc, #68]	; (c864 <testParamLimits+0x13c>)
    c820:	697b      	ldr	r3, [r7, #20]
    c822:	1c08      	adds	r0, r1, #0
    c824:	1c11      	adds	r1, r2, #0
    c826:	1c1a      	adds	r2, r3, #0
    c828:	4b0d      	ldr	r3, [pc, #52]	; (c860 <testParamLimits+0x138>)
    c82a:	4798      	blx	r3
	}
	
	return 1;
    c82c:	2301      	movs	r3, #1
}
    c82e:	1c18      	adds	r0, r3, #0
    c830:	46bd      	mov	sp, r7
    c832:	b00b      	add	sp, #44	; 0x2c
    c834:	bc0c      	pop	{r2, r3}
    c836:	4690      	mov	r8, r2
    c838:	4699      	mov	r9, r3
    c83a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c83c:	200000b4 	.word	0x200000b4
    c840:	200000fc 	.word	0x200000fc
    c844:	0001f641 	.word	0x0001f641
    c848:	0001f669 	.word	0x0001f669
    c84c:	20000094 	.word	0x20000094
    c850:	00025384 	.word	0x00025384
    c854:	0002538c 	.word	0x0002538c
    c858:	00022111 	.word	0x00022111
    c85c:	00025394 	.word	0x00025394
    c860:	0001b62d 	.word	0x0001b62d
    c864:	000253b8 	.word	0x000253b8

0000c868 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
    c868:	b580      	push	{r7, lr}
    c86a:	af00      	add	r7, sp, #0
	return test_case_ptr;
    c86c:	4b02      	ldr	r3, [pc, #8]	; (c878 <test_get_case+0x10>)
    c86e:	681b      	ldr	r3, [r3, #0]
}
    c870:	1c18      	adds	r0, r3, #0
    c872:	46bd      	mov	sp, r7
    c874:	bd80      	pop	{r7, pc}
    c876:	46c0      	nop			; (mov r8, r8)
    c878:	2000041c 	.word	0x2000041c

0000c87c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    c87c:	b580      	push	{r7, lr}
    c87e:	b082      	sub	sp, #8
    c880:	af00      	add	r7, sp, #0
    c882:	1c02      	adds	r2, r0, #0
    c884:	1dfb      	adds	r3, r7, #7
    c886:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c888:	4b06      	ldr	r3, [pc, #24]	; (c8a4 <system_interrupt_enable+0x28>)
    c88a:	1dfa      	adds	r2, r7, #7
    c88c:	7812      	ldrb	r2, [r2, #0]
    c88e:	1c11      	adds	r1, r2, #0
    c890:	221f      	movs	r2, #31
    c892:	400a      	ands	r2, r1
    c894:	2101      	movs	r1, #1
    c896:	1c08      	adds	r0, r1, #0
    c898:	4090      	lsls	r0, r2
    c89a:	1c02      	adds	r2, r0, #0
    c89c:	601a      	str	r2, [r3, #0]
}
    c89e:	46bd      	mov	sp, r7
    c8a0:	b002      	add	sp, #8
    c8a2:	bd80      	pop	{r7, pc}
    c8a4:	e000e100 	.word	0xe000e100

0000c8a8 <tc_is_syncing>:
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    c8a8:	b590      	push	{r4, r7, lr}
    c8aa:	b087      	sub	sp, #28
    c8ac:	af02      	add	r7, sp, #8
    c8ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
    c8b0:	4b29      	ldr	r3, [pc, #164]	; (c958 <tc_is_syncing+0xb0>)
    c8b2:	4798      	blx	r3
    c8b4:	1c03      	adds	r3, r0, #0
    c8b6:	2b00      	cmp	r3, #0
    c8b8:	d010      	beq.n	c8dc <tc_is_syncing+0x34>
    c8ba:	687b      	ldr	r3, [r7, #4]
    c8bc:	2b00      	cmp	r3, #0
    c8be:	d117      	bne.n	c8f0 <tc_is_syncing+0x48>
    c8c0:	4b25      	ldr	r3, [pc, #148]	; (c958 <tc_is_syncing+0xb0>)
    c8c2:	4798      	blx	r3
    c8c4:	1c01      	adds	r1, r0, #0
    c8c6:	4a25      	ldr	r2, [pc, #148]	; (c95c <tc_is_syncing+0xb4>)
    c8c8:	4b25      	ldr	r3, [pc, #148]	; (c960 <tc_is_syncing+0xb8>)
    c8ca:	4826      	ldr	r0, [pc, #152]	; (c964 <tc_is_syncing+0xbc>)
    c8cc:	9000      	str	r0, [sp, #0]
    c8ce:	4826      	ldr	r0, [pc, #152]	; (c968 <tc_is_syncing+0xc0>)
    c8d0:	9001      	str	r0, [sp, #4]
    c8d2:	1c08      	adds	r0, r1, #0
    c8d4:	2101      	movs	r1, #1
    c8d6:	4c25      	ldr	r4, [pc, #148]	; (c96c <tc_is_syncing+0xc4>)
    c8d8:	47a0      	blx	r4
    c8da:	e009      	b.n	c8f0 <tc_is_syncing+0x48>
    c8dc:	687b      	ldr	r3, [r7, #4]
    c8de:	2b00      	cmp	r3, #0
    c8e0:	d106      	bne.n	c8f0 <tc_is_syncing+0x48>
    c8e2:	4823      	ldr	r0, [pc, #140]	; (c970 <tc_is_syncing+0xc8>)
    c8e4:	4920      	ldr	r1, [pc, #128]	; (c968 <tc_is_syncing+0xc0>)
    c8e6:	4a1d      	ldr	r2, [pc, #116]	; (c95c <tc_is_syncing+0xb4>)
    c8e8:	4b1d      	ldr	r3, [pc, #116]	; (c960 <tc_is_syncing+0xb8>)
    c8ea:	4c22      	ldr	r4, [pc, #136]	; (c974 <tc_is_syncing+0xcc>)
    c8ec:	47a0      	blx	r4
    c8ee:	e7fe      	b.n	c8ee <tc_is_syncing+0x46>
	Assert(module_inst->hw);
    c8f0:	4b19      	ldr	r3, [pc, #100]	; (c958 <tc_is_syncing+0xb0>)
    c8f2:	4798      	blx	r3
    c8f4:	1c03      	adds	r3, r0, #0
    c8f6:	2b00      	cmp	r3, #0
    c8f8:	d011      	beq.n	c91e <tc_is_syncing+0x76>
    c8fa:	687b      	ldr	r3, [r7, #4]
    c8fc:	681b      	ldr	r3, [r3, #0]
    c8fe:	2b00      	cmp	r3, #0
    c900:	d118      	bne.n	c934 <tc_is_syncing+0x8c>
    c902:	4b15      	ldr	r3, [pc, #84]	; (c958 <tc_is_syncing+0xb0>)
    c904:	4798      	blx	r3
    c906:	1c01      	adds	r1, r0, #0
    c908:	4a14      	ldr	r2, [pc, #80]	; (c95c <tc_is_syncing+0xb4>)
    c90a:	4b1b      	ldr	r3, [pc, #108]	; (c978 <tc_is_syncing+0xd0>)
    c90c:	4815      	ldr	r0, [pc, #84]	; (c964 <tc_is_syncing+0xbc>)
    c90e:	9000      	str	r0, [sp, #0]
    c910:	481a      	ldr	r0, [pc, #104]	; (c97c <tc_is_syncing+0xd4>)
    c912:	9001      	str	r0, [sp, #4]
    c914:	1c08      	adds	r0, r1, #0
    c916:	2101      	movs	r1, #1
    c918:	4c14      	ldr	r4, [pc, #80]	; (c96c <tc_is_syncing+0xc4>)
    c91a:	47a0      	blx	r4
    c91c:	e00a      	b.n	c934 <tc_is_syncing+0x8c>
    c91e:	687b      	ldr	r3, [r7, #4]
    c920:	681b      	ldr	r3, [r3, #0]
    c922:	2b00      	cmp	r3, #0
    c924:	d106      	bne.n	c934 <tc_is_syncing+0x8c>
    c926:	4812      	ldr	r0, [pc, #72]	; (c970 <tc_is_syncing+0xc8>)
    c928:	4914      	ldr	r1, [pc, #80]	; (c97c <tc_is_syncing+0xd4>)
    c92a:	4a0c      	ldr	r2, [pc, #48]	; (c95c <tc_is_syncing+0xb4>)
    c92c:	4b12      	ldr	r3, [pc, #72]	; (c978 <tc_is_syncing+0xd0>)
    c92e:	4c11      	ldr	r4, [pc, #68]	; (c974 <tc_is_syncing+0xcc>)
    c930:	47a0      	blx	r4
    c932:	e7fe      	b.n	c932 <tc_is_syncing+0x8a>

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    c934:	687b      	ldr	r3, [r7, #4]
    c936:	681b      	ldr	r3, [r3, #0]
    c938:	60fb      	str	r3, [r7, #12]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    c93a:	68fb      	ldr	r3, [r7, #12]
    c93c:	89db      	ldrh	r3, [r3, #14]
    c93e:	041b      	lsls	r3, r3, #16
    c940:	0e1b      	lsrs	r3, r3, #24
    c942:	b2db      	uxtb	r3, r3
    c944:	1c1a      	adds	r2, r3, #0
    c946:	2380      	movs	r3, #128	; 0x80
    c948:	4013      	ands	r3, r2
    c94a:	1e5a      	subs	r2, r3, #1
    c94c:	4193      	sbcs	r3, r2
    c94e:	b2db      	uxtb	r3, r3
}
    c950:	1c18      	adds	r0, r3, #0
    c952:	46bd      	mov	sp, r7
    c954:	b005      	add	sp, #20
    c956:	bd90      	pop	{r4, r7, pc}
    c958:	0000c869 	.word	0x0000c869
    c95c:	00025478 	.word	0x00025478
    c960:	0000033e 	.word	0x0000033e
    c964:	000253f8 	.word	0x000253f8
    c968:	00025498 	.word	0x00025498
    c96c:	000106e9 	.word	0x000106e9
    c970:	00025418 	.word	0x00025418
    c974:	0001b62d 	.word	0x0001b62d
    c978:	0000033f 	.word	0x0000033f
    c97c:	000254a4 	.word	0x000254a4

0000c980 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    c980:	b590      	push	{r4, r7, lr}
    c982:	b085      	sub	sp, #20
    c984:	af02      	add	r7, sp, #8
    c986:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
    c988:	4b32      	ldr	r3, [pc, #200]	; (ca54 <tc_get_config_defaults+0xd4>)
    c98a:	4798      	blx	r3
    c98c:	1c03      	adds	r3, r0, #0
    c98e:	2b00      	cmp	r3, #0
    c990:	d010      	beq.n	c9b4 <tc_get_config_defaults+0x34>
    c992:	687b      	ldr	r3, [r7, #4]
    c994:	2b00      	cmp	r3, #0
    c996:	d117      	bne.n	c9c8 <tc_get_config_defaults+0x48>
    c998:	4b2e      	ldr	r3, [pc, #184]	; (ca54 <tc_get_config_defaults+0xd4>)
    c99a:	4798      	blx	r3
    c99c:	1c01      	adds	r1, r0, #0
    c99e:	4a2e      	ldr	r2, [pc, #184]	; (ca58 <tc_get_config_defaults+0xd8>)
    c9a0:	4b2e      	ldr	r3, [pc, #184]	; (ca5c <tc_get_config_defaults+0xdc>)
    c9a2:	482f      	ldr	r0, [pc, #188]	; (ca60 <tc_get_config_defaults+0xe0>)
    c9a4:	9000      	str	r0, [sp, #0]
    c9a6:	482f      	ldr	r0, [pc, #188]	; (ca64 <tc_get_config_defaults+0xe4>)
    c9a8:	9001      	str	r0, [sp, #4]
    c9aa:	1c08      	adds	r0, r1, #0
    c9ac:	2101      	movs	r1, #1
    c9ae:	4c2e      	ldr	r4, [pc, #184]	; (ca68 <tc_get_config_defaults+0xe8>)
    c9b0:	47a0      	blx	r4
    c9b2:	e009      	b.n	c9c8 <tc_get_config_defaults+0x48>
    c9b4:	687b      	ldr	r3, [r7, #4]
    c9b6:	2b00      	cmp	r3, #0
    c9b8:	d106      	bne.n	c9c8 <tc_get_config_defaults+0x48>
    c9ba:	482c      	ldr	r0, [pc, #176]	; (ca6c <tc_get_config_defaults+0xec>)
    c9bc:	4929      	ldr	r1, [pc, #164]	; (ca64 <tc_get_config_defaults+0xe4>)
    c9be:	4a26      	ldr	r2, [pc, #152]	; (ca58 <tc_get_config_defaults+0xd8>)
    c9c0:	4b26      	ldr	r3, [pc, #152]	; (ca5c <tc_get_config_defaults+0xdc>)
    c9c2:	4c2b      	ldr	r4, [pc, #172]	; (ca70 <tc_get_config_defaults+0xf0>)
    c9c4:	47a0      	blx	r4
    c9c6:	e7fe      	b.n	c9c6 <tc_get_config_defaults+0x46>

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    c9c8:	687b      	ldr	r3, [r7, #4]
    c9ca:	2200      	movs	r2, #0
    c9cc:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    c9ce:	687b      	ldr	r3, [r7, #4]
    c9d0:	2200      	movs	r2, #0
    c9d2:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    c9d4:	687b      	ldr	r3, [r7, #4]
    c9d6:	2200      	movs	r2, #0
    c9d8:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    c9da:	687b      	ldr	r3, [r7, #4]
    c9dc:	2200      	movs	r2, #0
    c9de:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    c9e0:	687b      	ldr	r3, [r7, #4]
    c9e2:	2200      	movs	r2, #0
    c9e4:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    c9e6:	687b      	ldr	r3, [r7, #4]
    c9e8:	2200      	movs	r2, #0
    c9ea:	705a      	strb	r2, [r3, #1]

	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    c9ec:	687b      	ldr	r3, [r7, #4]
    c9ee:	2200      	movs	r2, #0
    c9f0:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    c9f2:	687b      	ldr	r3, [r7, #4]
    c9f4:	2200      	movs	r2, #0
    c9f6:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    c9f8:	687b      	ldr	r3, [r7, #4]
    c9fa:	2200      	movs	r2, #0
    c9fc:	731a      	strb	r2, [r3, #12]

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    c9fe:	687b      	ldr	r3, [r7, #4]
    ca00:	2200      	movs	r2, #0
    ca02:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    ca04:	687b      	ldr	r3, [r7, #4]
    ca06:	2200      	movs	r2, #0
    ca08:	735a      	strb	r2, [r3, #13]

	config->invert_event_input         = false;
    ca0a:	687b      	ldr	r3, [r7, #4]
    ca0c:	2200      	movs	r2, #0
    ca0e:	73da      	strb	r2, [r3, #15]
	config->event_action               = TC_EVENT_ACTION_OFF;
    ca10:	687b      	ldr	r3, [r7, #4]
    ca12:	2200      	movs	r2, #0
    ca14:	741a      	strb	r2, [r3, #16]

	config->channel_pwm_out_enabled[0]                        = false;
    ca16:	687b      	ldr	r3, [r7, #4]
    ca18:	2200      	movs	r2, #0
    ca1a:	745a      	strb	r2, [r3, #17]
	config->channel_pwm_out_pin[TC_COMPARE_CAPTURE_CHANNEL_0] = 0;
    ca1c:	687b      	ldr	r3, [r7, #4]
    ca1e:	2200      	movs	r2, #0
    ca20:	615a      	str	r2, [r3, #20]
	config->channel_pwm_out_mux[TC_COMPARE_CAPTURE_CHANNEL_0] = 0;
    ca22:	687b      	ldr	r3, [r7, #4]
    ca24:	2200      	movs	r2, #0
    ca26:	61da      	str	r2, [r3, #28]

	config->channel_pwm_out_enabled[1]                        = false;
    ca28:	687b      	ldr	r3, [r7, #4]
    ca2a:	2200      	movs	r2, #0
    ca2c:	749a      	strb	r2, [r3, #18]
	config->channel_pwm_out_pin[TC_COMPARE_CAPTURE_CHANNEL_1] = 0;
    ca2e:	687b      	ldr	r3, [r7, #4]
    ca30:	2200      	movs	r2, #0
    ca32:	619a      	str	r2, [r3, #24]
	config->channel_pwm_out_mux[TC_COMPARE_CAPTURE_CHANNEL_1] = 0;
    ca34:	687b      	ldr	r3, [r7, #4]
    ca36:	2200      	movs	r2, #0
    ca38:	621a      	str	r2, [r3, #32]

	config->size_specific.size_16_bit.count                   = 0x0000;
    ca3a:	687b      	ldr	r3, [r7, #4]
    ca3c:	2200      	movs	r2, #0
    ca3e:	849a      	strh	r2, [r3, #36]	; 0x24
	config->size_specific.size_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    ca40:	687b      	ldr	r3, [r7, #4]
    ca42:	2200      	movs	r2, #0
    ca44:	84da      	strh	r2, [r3, #38]	; 0x26
	config->size_specific.size_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    ca46:	687b      	ldr	r3, [r7, #4]
    ca48:	2200      	movs	r2, #0
    ca4a:	851a      	strh	r2, [r3, #40]	; 0x28
}
    ca4c:	46bd      	mov	sp, r7
    ca4e:	b003      	add	sp, #12
    ca50:	bd90      	pop	{r4, r7, pc}
    ca52:	46c0      	nop			; (mov r8, r8)
    ca54:	0000c869 	.word	0x0000c869
    ca58:	00025478 	.word	0x00025478
    ca5c:	0000036a 	.word	0x0000036a
    ca60:	000253f8 	.word	0x000253f8
    ca64:	000254b4 	.word	0x000254b4
    ca68:	000106e9 	.word	0x000106e9
    ca6c:	00025418 	.word	0x00025418
    ca70:	0001b62d 	.word	0x0001b62d

0000ca74 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    ca74:	b590      	push	{r4, r7, lr}
    ca76:	b087      	sub	sp, #28
    ca78:	af02      	add	r7, sp, #8
    ca7a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
    ca7c:	4b2b      	ldr	r3, [pc, #172]	; (cb2c <tc_enable+0xb8>)
    ca7e:	4798      	blx	r3
    ca80:	1c03      	adds	r3, r0, #0
    ca82:	2b00      	cmp	r3, #0
    ca84:	d010      	beq.n	caa8 <tc_enable+0x34>
    ca86:	687b      	ldr	r3, [r7, #4]
    ca88:	2b00      	cmp	r3, #0
    ca8a:	d117      	bne.n	cabc <tc_enable+0x48>
    ca8c:	4b27      	ldr	r3, [pc, #156]	; (cb2c <tc_enable+0xb8>)
    ca8e:	4798      	blx	r3
    ca90:	1c01      	adds	r1, r0, #0
    ca92:	4a27      	ldr	r2, [pc, #156]	; (cb30 <tc_enable+0xbc>)
    ca94:	4b27      	ldr	r3, [pc, #156]	; (cb34 <tc_enable+0xc0>)
    ca96:	4828      	ldr	r0, [pc, #160]	; (cb38 <tc_enable+0xc4>)
    ca98:	9000      	str	r0, [sp, #0]
    ca9a:	4828      	ldr	r0, [pc, #160]	; (cb3c <tc_enable+0xc8>)
    ca9c:	9001      	str	r0, [sp, #4]
    ca9e:	1c08      	adds	r0, r1, #0
    caa0:	2101      	movs	r1, #1
    caa2:	4c27      	ldr	r4, [pc, #156]	; (cb40 <tc_enable+0xcc>)
    caa4:	47a0      	blx	r4
    caa6:	e009      	b.n	cabc <tc_enable+0x48>
    caa8:	687b      	ldr	r3, [r7, #4]
    caaa:	2b00      	cmp	r3, #0
    caac:	d106      	bne.n	cabc <tc_enable+0x48>
    caae:	4825      	ldr	r0, [pc, #148]	; (cb44 <tc_enable+0xd0>)
    cab0:	4922      	ldr	r1, [pc, #136]	; (cb3c <tc_enable+0xc8>)
    cab2:	4a1f      	ldr	r2, [pc, #124]	; (cb30 <tc_enable+0xbc>)
    cab4:	4b1f      	ldr	r3, [pc, #124]	; (cb34 <tc_enable+0xc0>)
    cab6:	4c24      	ldr	r4, [pc, #144]	; (cb48 <tc_enable+0xd4>)
    cab8:	47a0      	blx	r4
    caba:	e7fe      	b.n	caba <tc_enable+0x46>
	Assert(module_inst->hw);
    cabc:	4b1b      	ldr	r3, [pc, #108]	; (cb2c <tc_enable+0xb8>)
    cabe:	4798      	blx	r3
    cac0:	1c03      	adds	r3, r0, #0
    cac2:	2b00      	cmp	r3, #0
    cac4:	d011      	beq.n	caea <tc_enable+0x76>
    cac6:	687b      	ldr	r3, [r7, #4]
    cac8:	681b      	ldr	r3, [r3, #0]
    caca:	2b00      	cmp	r3, #0
    cacc:	d118      	bne.n	cb00 <tc_enable+0x8c>
    cace:	4b17      	ldr	r3, [pc, #92]	; (cb2c <tc_enable+0xb8>)
    cad0:	4798      	blx	r3
    cad2:	1c01      	adds	r1, r0, #0
    cad4:	4a16      	ldr	r2, [pc, #88]	; (cb30 <tc_enable+0xbc>)
    cad6:	4b1d      	ldr	r3, [pc, #116]	; (cb4c <tc_enable+0xd8>)
    cad8:	4817      	ldr	r0, [pc, #92]	; (cb38 <tc_enable+0xc4>)
    cada:	9000      	str	r0, [sp, #0]
    cadc:	481c      	ldr	r0, [pc, #112]	; (cb50 <tc_enable+0xdc>)
    cade:	9001      	str	r0, [sp, #4]
    cae0:	1c08      	adds	r0, r1, #0
    cae2:	2101      	movs	r1, #1
    cae4:	4c16      	ldr	r4, [pc, #88]	; (cb40 <tc_enable+0xcc>)
    cae6:	47a0      	blx	r4
    cae8:	e00a      	b.n	cb00 <tc_enable+0x8c>
    caea:	687b      	ldr	r3, [r7, #4]
    caec:	681b      	ldr	r3, [r3, #0]
    caee:	2b00      	cmp	r3, #0
    caf0:	d106      	bne.n	cb00 <tc_enable+0x8c>
    caf2:	4814      	ldr	r0, [pc, #80]	; (cb44 <tc_enable+0xd0>)
    caf4:	4916      	ldr	r1, [pc, #88]	; (cb50 <tc_enable+0xdc>)
    caf6:	4a0e      	ldr	r2, [pc, #56]	; (cb30 <tc_enable+0xbc>)
    caf8:	4b14      	ldr	r3, [pc, #80]	; (cb4c <tc_enable+0xd8>)
    cafa:	4c13      	ldr	r4, [pc, #76]	; (cb48 <tc_enable+0xd4>)
    cafc:	47a0      	blx	r4
    cafe:	e7fe      	b.n	cafe <tc_enable+0x8a>

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    cb00:	687b      	ldr	r3, [r7, #4]
    cb02:	681b      	ldr	r3, [r3, #0]
    cb04:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    cb06:	46c0      	nop			; (mov r8, r8)
    cb08:	687b      	ldr	r3, [r7, #4]
    cb0a:	1c18      	adds	r0, r3, #0
    cb0c:	4b11      	ldr	r3, [pc, #68]	; (cb54 <tc_enable+0xe0>)
    cb0e:	4798      	blx	r3
    cb10:	1c03      	adds	r3, r0, #0
    cb12:	2b00      	cmp	r3, #0
    cb14:	d1f8      	bne.n	cb08 <tc_enable+0x94>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    cb16:	68fb      	ldr	r3, [r7, #12]
    cb18:	881b      	ldrh	r3, [r3, #0]
    cb1a:	b29b      	uxth	r3, r3
    cb1c:	2202      	movs	r2, #2
    cb1e:	4313      	orrs	r3, r2
    cb20:	b29a      	uxth	r2, r3
    cb22:	68fb      	ldr	r3, [r7, #12]
    cb24:	801a      	strh	r2, [r3, #0]
}
    cb26:	46bd      	mov	sp, r7
    cb28:	b005      	add	sp, #20
    cb2a:	bd90      	pop	{r4, r7, pc}
    cb2c:	0000c869 	.word	0x0000c869
    cb30:	00025478 	.word	0x00025478
    cb34:	0000040e 	.word	0x0000040e
    cb38:	000253f8 	.word	0x000253f8
    cb3c:	00025498 	.word	0x00025498
    cb40:	000106e9 	.word	0x000106e9
    cb44:	00025418 	.word	0x00025418
    cb48:	0001b62d 	.word	0x0001b62d
    cb4c:	0000040f 	.word	0x0000040f
    cb50:	000254a4 	.word	0x000254a4
    cb54:	0000c8a9 	.word	0x0000c8a9

0000cb58 <_tc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    cb58:	b580      	push	{r7, lr}
    cb5a:	b082      	sub	sp, #8
    cb5c:	af00      	add	r7, sp, #0
    cb5e:	6078      	str	r0, [r7, #4]
	static uint8_t tc_interrupt_vectors[TC_INST_NUM] =
		{
			MREPEAT(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, ~)
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    cb60:	4a04      	ldr	r2, [pc, #16]	; (cb74 <_tc_interrupt_get_interrupt_vector+0x1c>)
    cb62:	687b      	ldr	r3, [r7, #4]
    cb64:	18d3      	adds	r3, r2, r3
    cb66:	781b      	ldrb	r3, [r3, #0]
    cb68:	b2db      	uxtb	r3, r3
    cb6a:	b25b      	sxtb	r3, r3
}
    cb6c:	1c18      	adds	r0, r3, #0
    cb6e:	46bd      	mov	sp, r7
    cb70:	b002      	add	sp, #8
    cb72:	bd80      	pop	{r7, pc}
    cb74:	2000015c 	.word	0x2000015c

0000cb78 <tc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type)
{
    cb78:	b590      	push	{r4, r7, lr}
    cb7a:	b085      	sub	sp, #20
    cb7c:	af02      	add	r7, sp, #8
    cb7e:	6078      	str	r0, [r7, #4]
    cb80:	1c0a      	adds	r2, r1, #0
    cb82:	1cfb      	adds	r3, r7, #3
    cb84:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
    cb86:	4b36      	ldr	r3, [pc, #216]	; (cc60 <tc_enable_callback+0xe8>)
    cb88:	4798      	blx	r3
    cb8a:	1c03      	adds	r3, r0, #0
    cb8c:	2b00      	cmp	r3, #0
    cb8e:	d011      	beq.n	cbb4 <tc_enable_callback+0x3c>
    cb90:	687b      	ldr	r3, [r7, #4]
    cb92:	2b00      	cmp	r3, #0
    cb94:	d11b      	bne.n	cbce <tc_enable_callback+0x56>
    cb96:	4b32      	ldr	r3, [pc, #200]	; (cc60 <tc_enable_callback+0xe8>)
    cb98:	4798      	blx	r3
    cb9a:	1c02      	adds	r2, r0, #0
    cb9c:	4b31      	ldr	r3, [pc, #196]	; (cc64 <tc_enable_callback+0xec>)
    cb9e:	4932      	ldr	r1, [pc, #200]	; (cc68 <tc_enable_callback+0xf0>)
    cba0:	9100      	str	r1, [sp, #0]
    cba2:	4932      	ldr	r1, [pc, #200]	; (cc6c <tc_enable_callback+0xf4>)
    cba4:	9101      	str	r1, [sp, #4]
    cba6:	1c10      	adds	r0, r2, #0
    cba8:	2101      	movs	r1, #1
    cbaa:	1c1a      	adds	r2, r3, #0
    cbac:	2368      	movs	r3, #104	; 0x68
    cbae:	4c30      	ldr	r4, [pc, #192]	; (cc70 <tc_enable_callback+0xf8>)
    cbb0:	47a0      	blx	r4
    cbb2:	e00c      	b.n	cbce <tc_enable_callback+0x56>
    cbb4:	687b      	ldr	r3, [r7, #4]
    cbb6:	2b00      	cmp	r3, #0
    cbb8:	d109      	bne.n	cbce <tc_enable_callback+0x56>
    cbba:	492e      	ldr	r1, [pc, #184]	; (cc74 <tc_enable_callback+0xfc>)
    cbbc:	4a2b      	ldr	r2, [pc, #172]	; (cc6c <tc_enable_callback+0xf4>)
    cbbe:	4b29      	ldr	r3, [pc, #164]	; (cc64 <tc_enable_callback+0xec>)
    cbc0:	1c08      	adds	r0, r1, #0
    cbc2:	1c11      	adds	r1, r2, #0
    cbc4:	1c1a      	adds	r2, r3, #0
    cbc6:	2368      	movs	r3, #104	; 0x68
    cbc8:	4c2b      	ldr	r4, [pc, #172]	; (cc78 <tc_enable_callback+0x100>)
    cbca:	47a0      	blx	r4
    cbcc:	e7fe      	b.n	cbcc <tc_enable_callback+0x54>


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    cbce:	687b      	ldr	r3, [r7, #4]
    cbd0:	681b      	ldr	r3, [r3, #0]
    cbd2:	1c18      	adds	r0, r3, #0
    cbd4:	4b29      	ldr	r3, [pc, #164]	; (cc7c <tc_enable_callback+0x104>)
    cbd6:	4798      	blx	r3
    cbd8:	1c03      	adds	r3, r0, #0
    cbda:	1c18      	adds	r0, r3, #0
    cbdc:	4b28      	ldr	r3, [pc, #160]	; (cc80 <tc_enable_callback+0x108>)
    cbde:	4798      	blx	r3
    cbe0:	1c03      	adds	r3, r0, #0
    cbe2:	1c18      	adds	r0, r3, #0
    cbe4:	4b27      	ldr	r3, [pc, #156]	; (cc84 <tc_enable_callback+0x10c>)
    cbe6:	4798      	blx	r3

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    cbe8:	1cfb      	adds	r3, r7, #3
    cbea:	781b      	ldrb	r3, [r3, #0]
    cbec:	2b02      	cmp	r3, #2
    cbee:	d10b      	bne.n	cc08 <tc_enable_callback+0x90>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    cbf0:	687b      	ldr	r3, [r7, #4]
    cbf2:	7e5b      	ldrb	r3, [r3, #25]
    cbf4:	2210      	movs	r2, #16
    cbf6:	4313      	orrs	r3, r2
    cbf8:	b2da      	uxtb	r2, r3
    cbfa:	687b      	ldr	r3, [r7, #4]
    cbfc:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    cbfe:	687b      	ldr	r3, [r7, #4]
    cc00:	681b      	ldr	r3, [r3, #0]
    cc02:	2210      	movs	r2, #16
    cc04:	735a      	strb	r2, [r3, #13]
    cc06:	e028      	b.n	cc5a <tc_enable_callback+0xe2>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    cc08:	1cfb      	adds	r3, r7, #3
    cc0a:	781b      	ldrb	r3, [r3, #0]
    cc0c:	2b03      	cmp	r3, #3
    cc0e:	d10b      	bne.n	cc28 <tc_enable_callback+0xb0>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
    cc10:	687b      	ldr	r3, [r7, #4]
    cc12:	7e5b      	ldrb	r3, [r3, #25]
    cc14:	2220      	movs	r2, #32
    cc16:	4313      	orrs	r3, r2
    cc18:	b2da      	uxtb	r2, r3
    cc1a:	687b      	ldr	r3, [r7, #4]
    cc1c:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
    cc1e:	687b      	ldr	r3, [r7, #4]
    cc20:	681b      	ldr	r3, [r3, #0]
    cc22:	2220      	movs	r2, #32
    cc24:	735a      	strb	r2, [r3, #13]
    cc26:	e018      	b.n	cc5a <tc_enable_callback+0xe2>
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    cc28:	687b      	ldr	r3, [r7, #4]
    cc2a:	7e5b      	ldrb	r3, [r3, #25]
    cc2c:	b2da      	uxtb	r2, r3
    cc2e:	1cfb      	adds	r3, r7, #3
    cc30:	781b      	ldrb	r3, [r3, #0]
    cc32:	2101      	movs	r1, #1
    cc34:	1c08      	adds	r0, r1, #0
    cc36:	4098      	lsls	r0, r3
    cc38:	1c03      	adds	r3, r0, #0
    cc3a:	b2db      	uxtb	r3, r3
    cc3c:	4313      	orrs	r3, r2
    cc3e:	b2db      	uxtb	r3, r3
    cc40:	b2da      	uxtb	r2, r3
    cc42:	687b      	ldr	r3, [r7, #4]
    cc44:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    cc46:	687b      	ldr	r3, [r7, #4]
    cc48:	681b      	ldr	r3, [r3, #0]
    cc4a:	1cfa      	adds	r2, r7, #3
    cc4c:	7812      	ldrb	r2, [r2, #0]
    cc4e:	2101      	movs	r1, #1
    cc50:	1c08      	adds	r0, r1, #0
    cc52:	4090      	lsls	r0, r2
    cc54:	1c02      	adds	r2, r0, #0
    cc56:	b2d2      	uxtb	r2, r2
    cc58:	735a      	strb	r2, [r3, #13]
	}
}
    cc5a:	46bd      	mov	sp, r7
    cc5c:	b003      	add	sp, #12
    cc5e:	bd90      	pop	{r4, r7, pc}
    cc60:	0000c869 	.word	0x0000c869
    cc64:	000254bc 	.word	0x000254bc
    cc68:	000253f8 	.word	0x000253f8
    cc6c:	00025410 	.word	0x00025410
    cc70:	000106e9 	.word	0x000106e9
    cc74:	00025418 	.word	0x00025418
    cc78:	0001b62d 	.word	0x0001b62d
    cc7c:	000180dd 	.word	0x000180dd
    cc80:	0000cb59 	.word	0x0000cb59
    cc84:	0000c87d 	.word	0x0000c87d

0000cc88 <tc2_callback_to_change_duty_cycle>:

/************************************************************************/
/* Callback Functions                                                   */
/************************************************************************/
static void tc2_callback_to_change_duty_cycle(struct tc_module *const module_inst)
{
    cc88:	b580      	push	{r7, lr}
    cc8a:	b082      	sub	sp, #8
    cc8c:	af00      	add	r7, sp, #0
    cc8e:	6078      	str	r0, [r7, #4]
	tc_set_compare_value(&tc2_instance, TC_COMPARE_CAPTURE_CHANNEL_0, pwm2_0_cmp_val);  
    cc90:	4b05      	ldr	r3, [pc, #20]	; (cca8 <tc2_callback_to_change_duty_cycle+0x20>)
    cc92:	681b      	ldr	r3, [r3, #0]
    cc94:	4a05      	ldr	r2, [pc, #20]	; (ccac <tc2_callback_to_change_duty_cycle+0x24>)
    cc96:	1c10      	adds	r0, r2, #0
    cc98:	2100      	movs	r1, #0
    cc9a:	1c1a      	adds	r2, r3, #0
    cc9c:	4b04      	ldr	r3, [pc, #16]	; (ccb0 <tc2_callback_to_change_duty_cycle+0x28>)
    cc9e:	4798      	blx	r3
}
    cca0:	46bd      	mov	sp, r7
    cca2:	b002      	add	sp, #8
    cca4:	bd80      	pop	{r7, pc}
    cca6:	46c0      	nop			; (mov r8, r8)
    cca8:	20000144 	.word	0x20000144
    ccac:	20000fa8 	.word	0x20000fa8
    ccb0:	000187cd 	.word	0x000187cd

0000ccb4 <tc2_1_callback_to_change_duty_cycle>:

static void tc2_1_callback_to_change_duty_cycle(struct tc_module *const module_inst)
{
    ccb4:	b580      	push	{r7, lr}
    ccb6:	b082      	sub	sp, #8
    ccb8:	af00      	add	r7, sp, #0
    ccba:	6078      	str	r0, [r7, #4]
	tc_set_compare_value(&tc2_instance, TC_COMPARE_CAPTURE_CHANNEL_1, pwm2_1_cmp_val); 
    ccbc:	4b05      	ldr	r3, [pc, #20]	; (ccd4 <tc2_1_callback_to_change_duty_cycle+0x20>)
    ccbe:	681b      	ldr	r3, [r3, #0]
    ccc0:	4a05      	ldr	r2, [pc, #20]	; (ccd8 <tc2_1_callback_to_change_duty_cycle+0x24>)
    ccc2:	1c10      	adds	r0, r2, #0
    ccc4:	2101      	movs	r1, #1
    ccc6:	1c1a      	adds	r2, r3, #0
    ccc8:	4b04      	ldr	r3, [pc, #16]	; (ccdc <tc2_1_callback_to_change_duty_cycle+0x28>)
    ccca:	4798      	blx	r3
}
    cccc:	46bd      	mov	sp, r7
    ccce:	b002      	add	sp, #8
    ccd0:	bd80      	pop	{r7, pc}
    ccd2:	46c0      	nop			; (mov r8, r8)
    ccd4:	20000148 	.word	0x20000148
    ccd8:	20000fa8 	.word	0x20000fa8
    ccdc:	000187cd 	.word	0x000187cd

0000cce0 <tc0_callback_to_change_duty_cycle>:

static void tc0_callback_to_change_duty_cycle(struct tc_module *const module_inst)
{
    cce0:	b580      	push	{r7, lr}
    cce2:	b082      	sub	sp, #8
    cce4:	af00      	add	r7, sp, #0
    cce6:	6078      	str	r0, [r7, #4]
	tc_set_compare_value(&tc0_module, TC_COMPARE_CAPTURE_CHANNEL_1, pwm0_cmp_val);
    cce8:	4b05      	ldr	r3, [pc, #20]	; (cd00 <tc0_callback_to_change_duty_cycle+0x20>)
    ccea:	681b      	ldr	r3, [r3, #0]
    ccec:	4a05      	ldr	r2, [pc, #20]	; (cd04 <tc0_callback_to_change_duty_cycle+0x24>)
    ccee:	1c10      	adds	r0, r2, #0
    ccf0:	2101      	movs	r1, #1
    ccf2:	1c1a      	adds	r2, r3, #0
    ccf4:	4b04      	ldr	r3, [pc, #16]	; (cd08 <tc0_callback_to_change_duty_cycle+0x28>)
    ccf6:	4798      	blx	r3
}
    ccf8:	46bd      	mov	sp, r7
    ccfa:	b002      	add	sp, #8
    ccfc:	bd80      	pop	{r7, pc}
    ccfe:	46c0      	nop			; (mov r8, r8)
    cd00:	2000014c 	.word	0x2000014c
    cd04:	20000f70 	.word	0x20000f70
    cd08:	000187cd 	.word	0x000187cd

0000cd0c <tc5_callback_to_change_duty_cycle>:

static void tc5_callback_to_change_duty_cycle(struct tc_module *const module_inst)
{
    cd0c:	b580      	push	{r7, lr}
    cd0e:	b082      	sub	sp, #8
    cd10:	af00      	add	r7, sp, #0
    cd12:	6078      	str	r0, [r7, #4]
	tc_set_compare_value(&tc5_module, TC_COMPARE_CAPTURE_CHANNEL_0, pwm5_cmp_val);
    cd14:	4b05      	ldr	r3, [pc, #20]	; (cd2c <tc5_callback_to_change_duty_cycle+0x20>)
    cd16:	681b      	ldr	r3, [r3, #0]
    cd18:	4a05      	ldr	r2, [pc, #20]	; (cd30 <tc5_callback_to_change_duty_cycle+0x24>)
    cd1a:	1c10      	adds	r0, r2, #0
    cd1c:	2100      	movs	r1, #0
    cd1e:	1c1a      	adds	r2, r3, #0
    cd20:	4b04      	ldr	r3, [pc, #16]	; (cd34 <tc5_callback_to_change_duty_cycle+0x28>)
    cd22:	4798      	blx	r3
}
    cd24:	46bd      	mov	sp, r7
    cd26:	b002      	add	sp, #8
    cd28:	bd80      	pop	{r7, pc}
    cd2a:	46c0      	nop			; (mov r8, r8)
    cd2c:	20000150 	.word	0x20000150
    cd30:	20000f8c 	.word	0x20000f8c
    cd34:	000187cd 	.word	0x000187cd

0000cd38 <tc7_callback_to_change_duty_cycle>:
	fan2.rpm = 30000000 / tach1_capture;  // assumes two ticks per revolution
}
*/

static void tc7_callback_to_change_duty_cycle(struct tc_module *const module_inst)
{
    cd38:	b580      	push	{r7, lr}
    cd3a:	b082      	sub	sp, #8
    cd3c:	af00      	add	r7, sp, #0
    cd3e:	6078      	str	r0, [r7, #4]
	tc_set_compare_value(&tc7_instance, TC_COMPARE_CAPTURE_CHANNEL_0, pwm7_1_cmp_val);
    cd40:	4b09      	ldr	r3, [pc, #36]	; (cd68 <tc7_callback_to_change_duty_cycle+0x30>)
    cd42:	681b      	ldr	r3, [r3, #0]
    cd44:	4a09      	ldr	r2, [pc, #36]	; (cd6c <tc7_callback_to_change_duty_cycle+0x34>)
    cd46:	1c10      	adds	r0, r2, #0
    cd48:	2100      	movs	r1, #0
    cd4a:	1c1a      	adds	r2, r3, #0
    cd4c:	4b08      	ldr	r3, [pc, #32]	; (cd70 <tc7_callback_to_change_duty_cycle+0x38>)
    cd4e:	4798      	blx	r3
	tc_set_compare_value(&tc7_instance, TC_COMPARE_CAPTURE_CHANNEL_1, pwm7_2_cmp_val);
    cd50:	4b08      	ldr	r3, [pc, #32]	; (cd74 <tc7_callback_to_change_duty_cycle+0x3c>)
    cd52:	681b      	ldr	r3, [r3, #0]
    cd54:	4a05      	ldr	r2, [pc, #20]	; (cd6c <tc7_callback_to_change_duty_cycle+0x34>)
    cd56:	1c10      	adds	r0, r2, #0
    cd58:	2101      	movs	r1, #1
    cd5a:	1c1a      	adds	r2, r3, #0
    cd5c:	4b04      	ldr	r3, [pc, #16]	; (cd70 <tc7_callback_to_change_duty_cycle+0x38>)
    cd5e:	4798      	blx	r3
}
    cd60:	46bd      	mov	sp, r7
    cd62:	b002      	add	sp, #8
    cd64:	bd80      	pop	{r7, pc}
    cd66:	46c0      	nop			; (mov r8, r8)
    cd68:	20000154 	.word	0x20000154
    cd6c:	20000fc4 	.word	0x20000fc4
    cd70:	000187cd 	.word	0x000187cd
    cd74:	20000158 	.word	0x20000158

0000cd78 <configure_tc0>:
/************************************************************************/
/* Configuration                                                        */
/************************************************************************/
// TC0 cmp1 is switch fabric output3
void configure_tc0(void)
{
    cd78:	b580      	push	{r7, lr}
    cd7a:	b08c      	sub	sp, #48	; 0x30
    cd7c:	af00      	add	r7, sp, #0
	struct tc_config config_tc0;
	tc_get_config_defaults(&config_tc0);
    cd7e:	1c3b      	adds	r3, r7, #0
    cd80:	1c18      	adds	r0, r3, #0
    cd82:	4b14      	ldr	r3, [pc, #80]	; (cdd4 <configure_tc0+0x5c>)
    cd84:	4798      	blx	r3
	config_tc0.clock_source	   = GCLK_GENERATOR_5;
    cd86:	1c3b      	adds	r3, r7, #0
    cd88:	2205      	movs	r2, #5
    cd8a:	701a      	strb	r2, [r3, #0]
	config_tc0.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024;
    cd8c:	1c3b      	adds	r3, r7, #0
    cd8e:	22e0      	movs	r2, #224	; 0xe0
    cd90:	00d2      	lsls	r2, r2, #3
    cd92:	809a      	strh	r2, [r3, #4]
	config_tc0.counter_size    = TC_COUNTER_SIZE_16BIT;
    cd94:	1c3b      	adds	r3, r7, #0
    cd96:	2200      	movs	r2, #0
    cd98:	709a      	strb	r2, [r3, #2]
	config_tc0.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
    cd9a:	1c3b      	adds	r3, r7, #0
    cd9c:	2240      	movs	r2, #64	; 0x40
    cd9e:	719a      	strb	r2, [r3, #6]
	config_tc0.channel_pwm_out_enabled[1] = true;
    cda0:	1c3b      	adds	r3, r7, #0
    cda2:	2201      	movs	r2, #1
    cda4:	749a      	strb	r2, [r3, #18]
	config_tc0.channel_pwm_out_pin[1]     = PIN_PB31F_TC0_WO1;
    cda6:	1c3b      	adds	r3, r7, #0
    cda8:	223f      	movs	r2, #63	; 0x3f
    cdaa:	619a      	str	r2, [r3, #24]
	config_tc0.channel_pwm_out_mux[1]     = MUX_PB31F_TC0_WO1;
    cdac:	1c3b      	adds	r3, r7, #0
    cdae:	2205      	movs	r2, #5
    cdb0:	621a      	str	r2, [r3, #32]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(PIN_ENBL_OUTPUT1,   &config_port_pin);
	*/
				
	// set duty
	config_tc0.size_specific.size_16_bit.compare_capture_channel[1] = pwm0_cmp_val;
    cdb2:	4b09      	ldr	r3, [pc, #36]	; (cdd8 <configure_tc0+0x60>)
    cdb4:	681b      	ldr	r3, [r3, #0]
    cdb6:	b29a      	uxth	r2, r3
    cdb8:	1c3b      	adds	r3, r7, #0
    cdba:	851a      	strh	r2, [r3, #40]	; 0x28
					
	tc_init(&tc0_module, TC0, &config_tc0);
    cdbc:	4907      	ldr	r1, [pc, #28]	; (cddc <configure_tc0+0x64>)
    cdbe:	4a08      	ldr	r2, [pc, #32]	; (cde0 <configure_tc0+0x68>)
    cdc0:	1c3b      	adds	r3, r7, #0
    cdc2:	1c08      	adds	r0, r1, #0
    cdc4:	1c11      	adds	r1, r2, #0
    cdc6:	1c1a      	adds	r2, r3, #0
    cdc8:	4b06      	ldr	r3, [pc, #24]	; (cde4 <configure_tc0+0x6c>)
    cdca:	4798      	blx	r3
	//tc_disable(&tc0_module);
}
    cdcc:	46bd      	mov	sp, r7
    cdce:	b00c      	add	sp, #48	; 0x30
    cdd0:	bd80      	pop	{r7, pc}
    cdd2:	46c0      	nop			; (mov r8, r8)
    cdd4:	0000c981 	.word	0x0000c981
    cdd8:	2000014c 	.word	0x2000014c
    cddc:	20000f70 	.word	0x20000f70
    cde0:	42002000 	.word	0x42002000
    cde4:	00018185 	.word	0x00018185

0000cde8 <configure_tc0_callbacks>:

void configure_tc0_callbacks(void)
{
    cde8:	b580      	push	{r7, lr}
    cdea:	af00      	add	r7, sp, #0
	tc_register_callback(
    cdec:	4a04      	ldr	r2, [pc, #16]	; (ce00 <configure_tc0_callbacks+0x18>)
    cdee:	4b05      	ldr	r3, [pc, #20]	; (ce04 <configure_tc0_callbacks+0x1c>)
    cdf0:	1c10      	adds	r0, r2, #0
    cdf2:	1c19      	adds	r1, r3, #0
    cdf4:	2203      	movs	r2, #3
    cdf6:	4b04      	ldr	r3, [pc, #16]	; (ce08 <configure_tc0_callbacks+0x20>)
    cdf8:	4798      	blx	r3
	&tc0_module,
	tc0_callback_to_change_duty_cycle,
	TC_CALLBACK_CC_CHANNEL1);
}
    cdfa:	46bd      	mov	sp, r7
    cdfc:	bd80      	pop	{r7, pc}
    cdfe:	46c0      	nop			; (mov r8, r8)
    ce00:	20000f70 	.word	0x20000f70
    ce04:	0000cce1 	.word	0x0000cce1
    ce08:	0001897d 	.word	0x0001897d

0000ce0c <configure_tc5>:

// TC5 cmp0 is switch fabric output1
void configure_tc5(void)
{
    ce0c:	b580      	push	{r7, lr}
    ce0e:	b08c      	sub	sp, #48	; 0x30
    ce10:	af00      	add	r7, sp, #0
	struct tc_config config_tc5;
	tc_get_config_defaults(&config_tc5);
    ce12:	1c3b      	adds	r3, r7, #0
    ce14:	1c18      	adds	r0, r3, #0
    ce16:	4b14      	ldr	r3, [pc, #80]	; (ce68 <configure_tc5+0x5c>)
    ce18:	4798      	blx	r3
	config_tc5.clock_source	   = GCLK_GENERATOR_5;
    ce1a:	1c3b      	adds	r3, r7, #0
    ce1c:	2205      	movs	r2, #5
    ce1e:	701a      	strb	r2, [r3, #0]
	config_tc5.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024;
    ce20:	1c3b      	adds	r3, r7, #0
    ce22:	22e0      	movs	r2, #224	; 0xe0
    ce24:	00d2      	lsls	r2, r2, #3
    ce26:	809a      	strh	r2, [r3, #4]
	config_tc5.counter_size    = TC_COUNTER_SIZE_16BIT;
    ce28:	1c3b      	adds	r3, r7, #0
    ce2a:	2200      	movs	r2, #0
    ce2c:	709a      	strb	r2, [r3, #2]
	config_tc5.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
    ce2e:	1c3b      	adds	r3, r7, #0
    ce30:	2240      	movs	r2, #64	; 0x40
    ce32:	719a      	strb	r2, [r3, #6]
	config_tc5.channel_pwm_out_enabled[0] = true;
    ce34:	1c3b      	adds	r3, r7, #0
    ce36:	2201      	movs	r2, #1
    ce38:	745a      	strb	r2, [r3, #17]
	config_tc5.channel_pwm_out_pin[0]     = PIN_PB14E_TC5_WO0;
    ce3a:	1c3b      	adds	r3, r7, #0
    ce3c:	222e      	movs	r2, #46	; 0x2e
    ce3e:	615a      	str	r2, [r3, #20]
	config_tc5.channel_pwm_out_mux[0]     = MUX_PB14E_TC5_WO0;
    ce40:	1c3b      	adds	r3, r7, #0
    ce42:	2204      	movs	r2, #4
    ce44:	61da      	str	r2, [r3, #28]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(PIN_ENBL_OUTPUT1,   &config_port_pin);
	*/
				
	// set duty
	config_tc5.size_specific.size_16_bit.compare_capture_channel[0] = pwm5_cmp_val;
    ce46:	4b09      	ldr	r3, [pc, #36]	; (ce6c <configure_tc5+0x60>)
    ce48:	681b      	ldr	r3, [r3, #0]
    ce4a:	b29a      	uxth	r2, r3
    ce4c:	1c3b      	adds	r3, r7, #0
    ce4e:	84da      	strh	r2, [r3, #38]	; 0x26
					
	tc_init(&tc5_module, TC5, &config_tc5);
    ce50:	4907      	ldr	r1, [pc, #28]	; (ce70 <configure_tc5+0x64>)
    ce52:	4a08      	ldr	r2, [pc, #32]	; (ce74 <configure_tc5+0x68>)
    ce54:	1c3b      	adds	r3, r7, #0
    ce56:	1c08      	adds	r0, r1, #0
    ce58:	1c11      	adds	r1, r2, #0
    ce5a:	1c1a      	adds	r2, r3, #0
    ce5c:	4b06      	ldr	r3, [pc, #24]	; (ce78 <configure_tc5+0x6c>)
    ce5e:	4798      	blx	r3
	//tc_disable(&tc5_module);
}
    ce60:	46bd      	mov	sp, r7
    ce62:	b00c      	add	sp, #48	; 0x30
    ce64:	bd80      	pop	{r7, pc}
    ce66:	46c0      	nop			; (mov r8, r8)
    ce68:	0000c981 	.word	0x0000c981
    ce6c:	20000150 	.word	0x20000150
    ce70:	20000f8c 	.word	0x20000f8c
    ce74:	42003400 	.word	0x42003400
    ce78:	00018185 	.word	0x00018185

0000ce7c <configure_tc5_callbacks>:

void configure_tc5_callbacks(void)
{
    ce7c:	b580      	push	{r7, lr}
    ce7e:	af00      	add	r7, sp, #0
	tc_register_callback(
    ce80:	4a04      	ldr	r2, [pc, #16]	; (ce94 <configure_tc5_callbacks+0x18>)
    ce82:	4b05      	ldr	r3, [pc, #20]	; (ce98 <configure_tc5_callbacks+0x1c>)
    ce84:	1c10      	adds	r0, r2, #0
    ce86:	1c19      	adds	r1, r3, #0
    ce88:	2202      	movs	r2, #2
    ce8a:	4b04      	ldr	r3, [pc, #16]	; (ce9c <configure_tc5_callbacks+0x20>)
    ce8c:	4798      	blx	r3
	&tc5_module,
	tc5_callback_to_change_duty_cycle,
	TC_CALLBACK_CC_CHANNEL0);	
}
    ce8e:	46bd      	mov	sp, r7
    ce90:	bd80      	pop	{r7, pc}
    ce92:	46c0      	nop			; (mov r8, r8)
    ce94:	20000f8c 	.word	0x20000f8c
    ce98:	0000cd0d 	.word	0x0000cd0d
    ce9c:	0001897d 	.word	0x0001897d

0000cea0 <configure_tc2>:

// TC2 is boost and bulk reference pwm's
void configure_tc2(void)
{	
    cea0:	b580      	push	{r7, lr}
    cea2:	b08c      	sub	sp, #48	; 0x30
    cea4:	af00      	add	r7, sp, #0
	struct tc_config config_tc2;
	tc_get_config_defaults(&config_tc2);
    cea6:	1c3b      	adds	r3, r7, #0
    cea8:	1c18      	adds	r0, r3, #0
    ceaa:	4b1b      	ldr	r3, [pc, #108]	; (cf18 <configure_tc2+0x78>)
    ceac:	4798      	blx	r3
	config_tc2.clock_source	   = GCLK_GENERATOR_1;
    ceae:	1c3b      	adds	r3, r7, #0
    ceb0:	2201      	movs	r2, #1
    ceb2:	701a      	strb	r2, [r3, #0]
	config_tc2.clock_prescaler = TC_CLOCK_PRESCALER_DIV1;
    ceb4:	1c3b      	adds	r3, r7, #0
    ceb6:	2200      	movs	r2, #0
    ceb8:	809a      	strh	r2, [r3, #4]
	config_tc2.counter_size    = TC_COUNTER_SIZE_16BIT;
    ceba:	1c3b      	adds	r3, r7, #0
    cebc:	2200      	movs	r2, #0
    cebe:	709a      	strb	r2, [r3, #2]
	config_tc2.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
    cec0:	1c3b      	adds	r3, r7, #0
    cec2:	2240      	movs	r2, #64	; 0x40
    cec4:	719a      	strb	r2, [r3, #6]

	config_tc2.size_specific.size_16_bit.compare_capture_channel[0] = 0xFFFF;//RER
    cec6:	1c3b      	adds	r3, r7, #0
    cec8:	2201      	movs	r2, #1
    ceca:	4252      	negs	r2, r2
    cecc:	84da      	strh	r2, [r3, #38]	; 0x26
	config_tc2.channel_pwm_out_enabled[0] = true;
    cece:	1c3b      	adds	r3, r7, #0
    ced0:	2201      	movs	r2, #1
    ced2:	745a      	strb	r2, [r3, #17]
	config_tc2.channel_pwm_out_pin[0]     = PIN_PA12E_TC2_WO0;
    ced4:	1c3b      	adds	r3, r7, #0
    ced6:	220c      	movs	r2, #12
    ced8:	615a      	str	r2, [r3, #20]
	config_tc2.channel_pwm_out_mux[0]     = MUX_PA12E_TC2_WO0;
    ceda:	1c3b      	adds	r3, r7, #0
    cedc:	2204      	movs	r2, #4
    cede:	61da      	str	r2, [r3, #28]

	config_tc2.size_specific.size_16_bit.compare_capture_channel[1] = 0xFFFF;//RER
    cee0:	1c3b      	adds	r3, r7, #0
    cee2:	2201      	movs	r2, #1
    cee4:	4252      	negs	r2, r2
    cee6:	851a      	strh	r2, [r3, #40]	; 0x28
	config_tc2.channel_pwm_out_enabled[1] = true;
    cee8:	1c3b      	adds	r3, r7, #0
    ceea:	2201      	movs	r2, #1
    ceec:	749a      	strb	r2, [r3, #18]
	config_tc2.channel_pwm_out_pin[1]     = PIN_PA13E_TC2_WO1;
    ceee:	1c3b      	adds	r3, r7, #0
    cef0:	220d      	movs	r2, #13
    cef2:	619a      	str	r2, [r3, #24]
	config_tc2.channel_pwm_out_mux[1]     = MUX_PA13E_TC2_WO1;
    cef4:	1c3b      	adds	r3, r7, #0
    cef6:	2204      	movs	r2, #4
    cef8:	621a      	str	r2, [r3, #32]

	tc_init(&tc2_instance, TC2, &config_tc2);
    cefa:	4908      	ldr	r1, [pc, #32]	; (cf1c <configure_tc2+0x7c>)
    cefc:	4a08      	ldr	r2, [pc, #32]	; (cf20 <configure_tc2+0x80>)
    cefe:	1c3b      	adds	r3, r7, #0
    cf00:	1c08      	adds	r0, r1, #0
    cf02:	1c11      	adds	r1, r2, #0
    cf04:	1c1a      	adds	r2, r3, #0
    cf06:	4b07      	ldr	r3, [pc, #28]	; (cf24 <configure_tc2+0x84>)
    cf08:	4798      	blx	r3
	tc_enable(&tc2_instance);
    cf0a:	4b04      	ldr	r3, [pc, #16]	; (cf1c <configure_tc2+0x7c>)
    cf0c:	1c18      	adds	r0, r3, #0
    cf0e:	4b06      	ldr	r3, [pc, #24]	; (cf28 <configure_tc2+0x88>)
    cf10:	4798      	blx	r3
}
    cf12:	46bd      	mov	sp, r7
    cf14:	b00c      	add	sp, #48	; 0x30
    cf16:	bd80      	pop	{r7, pc}
    cf18:	0000c981 	.word	0x0000c981
    cf1c:	20000fa8 	.word	0x20000fa8
    cf20:	42002800 	.word	0x42002800
    cf24:	00018185 	.word	0x00018185
    cf28:	0000ca75 	.word	0x0000ca75

0000cf2c <configure_tc2_callbacks>:

void configure_tc2_callbacks(void)
{
    cf2c:	b580      	push	{r7, lr}
    cf2e:	af00      	add	r7, sp, #0
	tc_register_callback(&tc2_instance, tc2_callback_to_change_duty_cycle, TC_CALLBACK_CC_CHANNEL0);
    cf30:	4a0c      	ldr	r2, [pc, #48]	; (cf64 <configure_tc2_callbacks+0x38>)
    cf32:	4b0d      	ldr	r3, [pc, #52]	; (cf68 <configure_tc2_callbacks+0x3c>)
    cf34:	1c10      	adds	r0, r2, #0
    cf36:	1c19      	adds	r1, r3, #0
    cf38:	2202      	movs	r2, #2
    cf3a:	4b0c      	ldr	r3, [pc, #48]	; (cf6c <configure_tc2_callbacks+0x40>)
    cf3c:	4798      	blx	r3
	tc_enable_callback(&tc2_instance, TC_CALLBACK_CC_CHANNEL0);
    cf3e:	4b09      	ldr	r3, [pc, #36]	; (cf64 <configure_tc2_callbacks+0x38>)
    cf40:	1c18      	adds	r0, r3, #0
    cf42:	2102      	movs	r1, #2
    cf44:	4b0a      	ldr	r3, [pc, #40]	; (cf70 <configure_tc2_callbacks+0x44>)
    cf46:	4798      	blx	r3
	tc_register_callback(&tc2_instance,	tc2_1_callback_to_change_duty_cycle, TC_CALLBACK_CC_CHANNEL1);
    cf48:	4a06      	ldr	r2, [pc, #24]	; (cf64 <configure_tc2_callbacks+0x38>)
    cf4a:	4b0a      	ldr	r3, [pc, #40]	; (cf74 <configure_tc2_callbacks+0x48>)
    cf4c:	1c10      	adds	r0, r2, #0
    cf4e:	1c19      	adds	r1, r3, #0
    cf50:	2203      	movs	r2, #3
    cf52:	4b06      	ldr	r3, [pc, #24]	; (cf6c <configure_tc2_callbacks+0x40>)
    cf54:	4798      	blx	r3
	tc_enable_callback(&tc2_instance, TC_CALLBACK_CC_CHANNEL1);
    cf56:	4b03      	ldr	r3, [pc, #12]	; (cf64 <configure_tc2_callbacks+0x38>)
    cf58:	1c18      	adds	r0, r3, #0
    cf5a:	2103      	movs	r1, #3
    cf5c:	4b04      	ldr	r3, [pc, #16]	; (cf70 <configure_tc2_callbacks+0x44>)
    cf5e:	4798      	blx	r3
}
    cf60:	46bd      	mov	sp, r7
    cf62:	bd80      	pop	{r7, pc}
    cf64:	20000fa8 	.word	0x20000fa8
    cf68:	0000cc89 	.word	0x0000cc89
    cf6c:	0001897d 	.word	0x0001897d
    cf70:	0000cb79 	.word	0x0000cb79
    cf74:	0000ccb5 	.word	0x0000ccb5

0000cf78 <configure_tc7>:
	tc_enable_callback(&tc5_module, TC_CALLBACK_CC_CHANNEL0);
}
*/
// TC7 is heater1 and 2 PWM outputs
void configure_tc7(void)
{
    cf78:	b580      	push	{r7, lr}
    cf7a:	b08c      	sub	sp, #48	; 0x30
    cf7c:	af00      	add	r7, sp, #0
	struct tc_config config_tc7;
	tc_get_config_defaults(&config_tc7);
    cf7e:	1c3b      	adds	r3, r7, #0
    cf80:	1c18      	adds	r0, r3, #0
    cf82:	4b19      	ldr	r3, [pc, #100]	; (cfe8 <configure_tc7+0x70>)
    cf84:	4798      	blx	r3

	config_tc7.clock_source	   = GCLK_GENERATOR_3; 
    cf86:	1c3b      	adds	r3, r7, #0
    cf88:	2203      	movs	r2, #3
    cf8a:	701a      	strb	r2, [r3, #0]
	config_tc7.clock_prescaler = TC_CLOCK_PRESCALER_DIV16;
    cf8c:	1c3b      	adds	r3, r7, #0
    cf8e:	2280      	movs	r2, #128	; 0x80
    cf90:	00d2      	lsls	r2, r2, #3
    cf92:	809a      	strh	r2, [r3, #4]
	config_tc7.counter_size    = TC_COUNTER_SIZE_16BIT;
    cf94:	1c3b      	adds	r3, r7, #0
    cf96:	2200      	movs	r2, #0
    cf98:	709a      	strb	r2, [r3, #2]
	config_tc7.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
    cf9a:	1c3b      	adds	r3, r7, #0
    cf9c:	2240      	movs	r2, #64	; 0x40
    cf9e:	719a      	strb	r2, [r3, #6]
	config_tc7.size_specific.size_16_bit.compare_capture_channel[0] = 0x8000;
    cfa0:	1c3b      	adds	r3, r7, #0
    cfa2:	4a12      	ldr	r2, [pc, #72]	; (cfec <configure_tc7+0x74>)
    cfa4:	84da      	strh	r2, [r3, #38]	; 0x26
	config_tc7.channel_pwm_out_enabled[0] = true; 
    cfa6:	1c3b      	adds	r3, r7, #0
    cfa8:	2201      	movs	r2, #1
    cfaa:	745a      	strb	r2, [r3, #17]
	config_tc7.channel_pwm_out_pin[0]     = PIN_PB22F_TC7_WO0;
    cfac:	1c3b      	adds	r3, r7, #0
    cfae:	2236      	movs	r2, #54	; 0x36
    cfb0:	615a      	str	r2, [r3, #20]
	config_tc7.channel_pwm_out_mux[0]     = MUX_PB22F_TC7_WO0;	
    cfb2:	1c3b      	adds	r3, r7, #0
    cfb4:	2205      	movs	r2, #5
    cfb6:	61da      	str	r2, [r3, #28]
	//config_tc7.waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_CHANNEL_0;
	
	config_tc7.size_specific.size_16_bit.compare_capture_channel[1] = 0x8000;
    cfb8:	1c3b      	adds	r3, r7, #0
    cfba:	4a0c      	ldr	r2, [pc, #48]	; (cfec <configure_tc7+0x74>)
    cfbc:	851a      	strh	r2, [r3, #40]	; 0x28
	config_tc7.channel_pwm_out_enabled[1] = true;
    cfbe:	1c3b      	adds	r3, r7, #0
    cfc0:	2201      	movs	r2, #1
    cfc2:	749a      	strb	r2, [r3, #18]
	config_tc7.channel_pwm_out_pin[1]     = PIN_PB23F_TC7_WO1;
    cfc4:	1c3b      	adds	r3, r7, #0
    cfc6:	2237      	movs	r2, #55	; 0x37
    cfc8:	619a      	str	r2, [r3, #24]
	config_tc7.channel_pwm_out_mux[1]     = MUX_PB23F_TC7_WO1;
    cfca:	1c3b      	adds	r3, r7, #0
    cfcc:	2205      	movs	r2, #5
    cfce:	621a      	str	r2, [r3, #32]
	//config_tc7.waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_CHANNEL_1;

	tc_init(&tc7_instance, TC7, &config_tc7);
    cfd0:	4907      	ldr	r1, [pc, #28]	; (cff0 <configure_tc7+0x78>)
    cfd2:	4a08      	ldr	r2, [pc, #32]	; (cff4 <configure_tc7+0x7c>)
    cfd4:	1c3b      	adds	r3, r7, #0
    cfd6:	1c08      	adds	r0, r1, #0
    cfd8:	1c11      	adds	r1, r2, #0
    cfda:	1c1a      	adds	r2, r3, #0
    cfdc:	4b06      	ldr	r3, [pc, #24]	; (cff8 <configure_tc7+0x80>)
    cfde:	4798      	blx	r3
}
    cfe0:	46bd      	mov	sp, r7
    cfe2:	b00c      	add	sp, #48	; 0x30
    cfe4:	bd80      	pop	{r7, pc}
    cfe6:	46c0      	nop			; (mov r8, r8)
    cfe8:	0000c981 	.word	0x0000c981
    cfec:	ffff8000 	.word	0xffff8000
    cff0:	20000fc4 	.word	0x20000fc4
    cff4:	42003c00 	.word	0x42003c00
    cff8:	00018185 	.word	0x00018185

0000cffc <configure_tc7_callbacks>:

void configure_tc7_callbacks(void)
{
    cffc:	b580      	push	{r7, lr}
    cffe:	af00      	add	r7, sp, #0
	tc_register_callback(&tc7_instance,	tc7_callback_to_change_duty_cycle,	TC_CALLBACK_CC_CHANNEL0);
    d000:	4a06      	ldr	r2, [pc, #24]	; (d01c <configure_tc7_callbacks+0x20>)
    d002:	4b07      	ldr	r3, [pc, #28]	; (d020 <configure_tc7_callbacks+0x24>)
    d004:	1c10      	adds	r0, r2, #0
    d006:	1c19      	adds	r1, r3, #0
    d008:	2202      	movs	r2, #2
    d00a:	4b06      	ldr	r3, [pc, #24]	; (d024 <configure_tc7_callbacks+0x28>)
    d00c:	4798      	blx	r3
	tc_enable_callback(&tc7_instance, TC_CALLBACK_CC_CHANNEL0);
    d00e:	4b03      	ldr	r3, [pc, #12]	; (d01c <configure_tc7_callbacks+0x20>)
    d010:	1c18      	adds	r0, r3, #0
    d012:	2102      	movs	r1, #2
    d014:	4b04      	ldr	r3, [pc, #16]	; (d028 <configure_tc7_callbacks+0x2c>)
    d016:	4798      	blx	r3
}
    d018:	46bd      	mov	sp, r7
    d01a:	bd80      	pop	{r7, pc}
    d01c:	20000fc4 	.word	0x20000fc4
    d020:	0000cd39 	.word	0x0000cd39
    d024:	0001897d 	.word	0x0001897d
    d028:	0000cb79 	.word	0x0000cb79

0000d02c <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
    d02c:	b580      	push	{r7, lr}
    d02e:	af00      	add	r7, sp, #0
	return test_case_ptr;
    d030:	4b02      	ldr	r3, [pc, #8]	; (d03c <test_get_case+0x10>)
    d032:	681b      	ldr	r3, [r3, #0]
}
    d034:	1c18      	adds	r0, r3, #0
    d036:	46bd      	mov	sp, r7
    d038:	bd80      	pop	{r7, pc}
    d03a:	46c0      	nop			; (mov r8, r8)
    d03c:	2000041c 	.word	0x2000041c

0000d040 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    d040:	b590      	push	{r4, r7, lr}
    d042:	b085      	sub	sp, #20
    d044:	af02      	add	r7, sp, #8
    d046:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
    d048:	4b16      	ldr	r3, [pc, #88]	; (d0a4 <system_pinmux_get_config_defaults+0x64>)
    d04a:	4798      	blx	r3
    d04c:	1c03      	adds	r3, r0, #0
    d04e:	2b00      	cmp	r3, #0
    d050:	d011      	beq.n	d076 <system_pinmux_get_config_defaults+0x36>
    d052:	687b      	ldr	r3, [r7, #4]
    d054:	2b00      	cmp	r3, #0
    d056:	d119      	bne.n	d08c <system_pinmux_get_config_defaults+0x4c>
    d058:	4b12      	ldr	r3, [pc, #72]	; (d0a4 <system_pinmux_get_config_defaults+0x64>)
    d05a:	4798      	blx	r3
    d05c:	1c01      	adds	r1, r0, #0
    d05e:	4a12      	ldr	r2, [pc, #72]	; (d0a8 <system_pinmux_get_config_defaults+0x68>)
    d060:	239d      	movs	r3, #157	; 0x9d
    d062:	005b      	lsls	r3, r3, #1
    d064:	4811      	ldr	r0, [pc, #68]	; (d0ac <system_pinmux_get_config_defaults+0x6c>)
    d066:	9000      	str	r0, [sp, #0]
    d068:	4811      	ldr	r0, [pc, #68]	; (d0b0 <system_pinmux_get_config_defaults+0x70>)
    d06a:	9001      	str	r0, [sp, #4]
    d06c:	1c08      	adds	r0, r1, #0
    d06e:	2101      	movs	r1, #1
    d070:	4c10      	ldr	r4, [pc, #64]	; (d0b4 <system_pinmux_get_config_defaults+0x74>)
    d072:	47a0      	blx	r4
    d074:	e00a      	b.n	d08c <system_pinmux_get_config_defaults+0x4c>
    d076:	687b      	ldr	r3, [r7, #4]
    d078:	2b00      	cmp	r3, #0
    d07a:	d107      	bne.n	d08c <system_pinmux_get_config_defaults+0x4c>
    d07c:	480e      	ldr	r0, [pc, #56]	; (d0b8 <system_pinmux_get_config_defaults+0x78>)
    d07e:	490c      	ldr	r1, [pc, #48]	; (d0b0 <system_pinmux_get_config_defaults+0x70>)
    d080:	4a09      	ldr	r2, [pc, #36]	; (d0a8 <system_pinmux_get_config_defaults+0x68>)
    d082:	239d      	movs	r3, #157	; 0x9d
    d084:	005b      	lsls	r3, r3, #1
    d086:	4c0d      	ldr	r4, [pc, #52]	; (d0bc <system_pinmux_get_config_defaults+0x7c>)
    d088:	47a0      	blx	r4
    d08a:	e7fe      	b.n	d08a <system_pinmux_get_config_defaults+0x4a>

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    d08c:	687b      	ldr	r3, [r7, #4]
    d08e:	2280      	movs	r2, #128	; 0x80
    d090:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    d092:	687b      	ldr	r3, [r7, #4]
    d094:	2200      	movs	r2, #0
    d096:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    d098:	687b      	ldr	r3, [r7, #4]
    d09a:	2201      	movs	r2, #1
    d09c:	709a      	strb	r2, [r3, #2]
}
    d09e:	46bd      	mov	sp, r7
    d0a0:	b003      	add	sp, #12
    d0a2:	bd90      	pop	{r4, r7, pc}
    d0a4:	0000d02d 	.word	0x0000d02d
    d0a8:	000254e8 	.word	0x000254e8
    d0ac:	00025518 	.word	0x00025518
    d0b0:	00025530 	.word	0x00025530
    d0b4:	000106e9 	.word	0x000106e9
    d0b8:	00025538 	.word	0x00025538
    d0bc:	0001b62d 	.word	0x0001b62d

0000d0c0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    d0c0:	b590      	push	{r4, r7, lr}
    d0c2:	b087      	sub	sp, #28
    d0c4:	af02      	add	r7, sp, #8
    d0c6:	1c02      	adds	r2, r0, #0
    d0c8:	1dfb      	adds	r3, r7, #7
    d0ca:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    d0cc:	1c3b      	adds	r3, r7, #0
    d0ce:	330f      	adds	r3, #15
    d0d0:	1dfa      	adds	r2, r7, #7
    d0d2:	7812      	ldrb	r2, [r2, #0]
    d0d4:	09d2      	lsrs	r2, r2, #7
    d0d6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    d0d8:	1c3b      	adds	r3, r7, #0
    d0da:	330e      	adds	r3, #14
    d0dc:	1dfa      	adds	r2, r7, #7
    d0de:	7812      	ldrb	r2, [r2, #0]
    d0e0:	0952      	lsrs	r2, r2, #5
    d0e2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    d0e4:	4b1b      	ldr	r3, [pc, #108]	; (d154 <system_pinmux_get_group_from_gpio_pin+0x94>)
    d0e6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    d0e8:	1c3b      	adds	r3, r7, #0
    d0ea:	330f      	adds	r3, #15
    d0ec:	781b      	ldrb	r3, [r3, #0]
    d0ee:	2b00      	cmp	r3, #0
    d0f0:	d10e      	bne.n	d110 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    d0f2:	1c3b      	adds	r3, r7, #0
    d0f4:	330f      	adds	r3, #15
    d0f6:	781b      	ldrb	r3, [r3, #0]
    d0f8:	009b      	lsls	r3, r3, #2
    d0fa:	2210      	movs	r2, #16
    d0fc:	19d2      	adds	r2, r2, r7
    d0fe:	18d3      	adds	r3, r2, r3
    d100:	3b08      	subs	r3, #8
    d102:	681a      	ldr	r2, [r3, #0]
    d104:	1c3b      	adds	r3, r7, #0
    d106:	330e      	adds	r3, #14
    d108:	781b      	ldrb	r3, [r3, #0]
    d10a:	01db      	lsls	r3, r3, #7
    d10c:	18d3      	adds	r3, r2, r3
    d10e:	e01c      	b.n	d14a <system_pinmux_get_group_from_gpio_pin+0x8a>
	} else {
		Assert(false);
    d110:	4b11      	ldr	r3, [pc, #68]	; (d158 <system_pinmux_get_group_from_gpio_pin+0x98>)
    d112:	4798      	blx	r3
    d114:	1c03      	adds	r3, r0, #0
    d116:	2b00      	cmp	r3, #0
    d118:	d00f      	beq.n	d13a <system_pinmux_get_group_from_gpio_pin+0x7a>
    d11a:	4b0f      	ldr	r3, [pc, #60]	; (d158 <system_pinmux_get_group_from_gpio_pin+0x98>)
    d11c:	4798      	blx	r3
    d11e:	1c01      	adds	r1, r0, #0
    d120:	4a0e      	ldr	r2, [pc, #56]	; (d15c <system_pinmux_get_group_from_gpio_pin+0x9c>)
    d122:	2368      	movs	r3, #104	; 0x68
    d124:	33ff      	adds	r3, #255	; 0xff
    d126:	480e      	ldr	r0, [pc, #56]	; (d160 <system_pinmux_get_group_from_gpio_pin+0xa0>)
    d128:	9000      	str	r0, [sp, #0]
    d12a:	480e      	ldr	r0, [pc, #56]	; (d164 <system_pinmux_get_group_from_gpio_pin+0xa4>)
    d12c:	9001      	str	r0, [sp, #4]
    d12e:	1c08      	adds	r0, r1, #0
    d130:	2101      	movs	r1, #1
    d132:	4c0d      	ldr	r4, [pc, #52]	; (d168 <system_pinmux_get_group_from_gpio_pin+0xa8>)
    d134:	47a0      	blx	r4
		return NULL;
    d136:	2300      	movs	r3, #0
    d138:	e007      	b.n	d14a <system_pinmux_get_group_from_gpio_pin+0x8a>
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
    d13a:	480c      	ldr	r0, [pc, #48]	; (d16c <system_pinmux_get_group_from_gpio_pin+0xac>)
    d13c:	4909      	ldr	r1, [pc, #36]	; (d164 <system_pinmux_get_group_from_gpio_pin+0xa4>)
    d13e:	4a07      	ldr	r2, [pc, #28]	; (d15c <system_pinmux_get_group_from_gpio_pin+0x9c>)
    d140:	2368      	movs	r3, #104	; 0x68
    d142:	33ff      	adds	r3, #255	; 0xff
    d144:	4c0a      	ldr	r4, [pc, #40]	; (d170 <system_pinmux_get_group_from_gpio_pin+0xb0>)
    d146:	47a0      	blx	r4
    d148:	e7fe      	b.n	d148 <system_pinmux_get_group_from_gpio_pin+0x88>
		return NULL;
	}
}
    d14a:	1c18      	adds	r0, r3, #0
    d14c:	46bd      	mov	sp, r7
    d14e:	b005      	add	sp, #20
    d150:	bd90      	pop	{r4, r7, pc}
    d152:	46c0      	nop			; (mov r8, r8)
    d154:	41004400 	.word	0x41004400
    d158:	0000d02d 	.word	0x0000d02d
    d15c:	000254e8 	.word	0x000254e8
    d160:	00025518 	.word	0x00025518
    d164:	0002555c 	.word	0x0002555c
    d168:	000106e9 	.word	0x000106e9
    d16c:	00025538 	.word	0x00025538
    d170:	0001b62d 	.word	0x0001b62d

0000d174 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
    d174:	b580      	push	{r7, lr}
    d176:	b086      	sub	sp, #24
    d178:	af00      	add	r7, sp, #0
    d17a:	1c02      	adds	r2, r0, #0
    d17c:	1dfb      	adds	r3, r7, #7
    d17e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    d180:	1dfb      	adds	r3, r7, #7
    d182:	781b      	ldrb	r3, [r3, #0]
    d184:	1c18      	adds	r0, r3, #0
    d186:	4b19      	ldr	r3, [pc, #100]	; (d1ec <system_pinmux_pin_get_mux_position+0x78>)
    d188:	4798      	blx	r3
    d18a:	1c03      	adds	r3, r0, #0
    d18c:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
    d18e:	1dfb      	adds	r3, r7, #7
    d190:	781a      	ldrb	r2, [r3, #0]
    d192:	231f      	movs	r3, #31
    d194:	4013      	ands	r3, r2
    d196:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    d198:	6979      	ldr	r1, [r7, #20]
    d19a:	2340      	movs	r3, #64	; 0x40
    d19c:	693a      	ldr	r2, [r7, #16]
    d19e:	188a      	adds	r2, r1, r2
    d1a0:	18d3      	adds	r3, r2, r3
    d1a2:	781b      	ldrb	r3, [r3, #0]
    d1a4:	b2db      	uxtb	r3, r3
    d1a6:	1c1a      	adds	r2, r3, #0
    d1a8:	2301      	movs	r3, #1
    d1aa:	4013      	ands	r3, r2
    d1ac:	d101      	bne.n	d1b2 <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
    d1ae:	2380      	movs	r3, #128	; 0x80
    d1b0:	e017      	b.n	d1e2 <system_pinmux_pin_get_mux_position+0x6e>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    d1b2:	693b      	ldr	r3, [r7, #16]
    d1b4:	085a      	lsrs	r2, r3, #1
    d1b6:	6979      	ldr	r1, [r7, #20]
    d1b8:	2330      	movs	r3, #48	; 0x30
    d1ba:	188a      	adds	r2, r1, r2
    d1bc:	18d3      	adds	r3, r2, r3
    d1be:	781b      	ldrb	r3, [r3, #0]
    d1c0:	b2db      	uxtb	r3, r3
    d1c2:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
    d1c4:	693a      	ldr	r2, [r7, #16]
    d1c6:	2301      	movs	r3, #1
    d1c8:	4013      	ands	r3, r2
    d1ca:	d005      	beq.n	d1d8 <system_pinmux_pin_get_mux_position+0x64>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    d1cc:	68fa      	ldr	r2, [r7, #12]
    d1ce:	23f0      	movs	r3, #240	; 0xf0
    d1d0:	4013      	ands	r3, r2
    d1d2:	091b      	lsrs	r3, r3, #4
    d1d4:	b2db      	uxtb	r3, r3
    d1d6:	e004      	b.n	d1e2 <system_pinmux_pin_get_mux_position+0x6e>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    d1d8:	68fb      	ldr	r3, [r7, #12]
    d1da:	b2da      	uxtb	r2, r3
    d1dc:	230f      	movs	r3, #15
    d1de:	4013      	ands	r3, r2
    d1e0:	b2db      	uxtb	r3, r3
	}
}
    d1e2:	1c18      	adds	r0, r3, #0
    d1e4:	46bd      	mov	sp, r7
    d1e6:	b006      	add	sp, #24
    d1e8:	bd80      	pop	{r7, pc}
    d1ea:	46c0      	nop			; (mov r8, r8)
    d1ec:	0000d0c1 	.word	0x0000d0c1

0000d1f0 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    d1f0:	b580      	push	{r7, lr}
    d1f2:	b082      	sub	sp, #8
    d1f4:	af00      	add	r7, sp, #0
    d1f6:	1c02      	adds	r2, r0, #0
    d1f8:	1dfb      	adds	r3, r7, #7
    d1fa:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d1fc:	4a07      	ldr	r2, [pc, #28]	; (d21c <system_interrupt_disable+0x2c>)
    d1fe:	1dfb      	adds	r3, r7, #7
    d200:	781b      	ldrb	r3, [r3, #0]
    d202:	1c19      	adds	r1, r3, #0
    d204:	231f      	movs	r3, #31
    d206:	400b      	ands	r3, r1
    d208:	2101      	movs	r1, #1
    d20a:	1c08      	adds	r0, r1, #0
    d20c:	4098      	lsls	r0, r3
    d20e:	1c03      	adds	r3, r0, #0
    d210:	1c19      	adds	r1, r3, #0
    d212:	2380      	movs	r3, #128	; 0x80
    d214:	50d1      	str	r1, [r2, r3]
}
    d216:	46bd      	mov	sp, r7
    d218:	b002      	add	sp, #8
    d21a:	bd80      	pop	{r7, pc}
    d21c:	e000e100 	.word	0xe000e100

0000d220 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    d220:	b590      	push	{r4, r7, lr}
    d222:	b089      	sub	sp, #36	; 0x24
    d224:	af02      	add	r7, sp, #8
    d226:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
    d228:	4b33      	ldr	r3, [pc, #204]	; (d2f8 <adc_get_status+0xd8>)
    d22a:	4798      	blx	r3
    d22c:	1c03      	adds	r3, r0, #0
    d22e:	2b00      	cmp	r3, #0
    d230:	d010      	beq.n	d254 <adc_get_status+0x34>
    d232:	687b      	ldr	r3, [r7, #4]
    d234:	2b00      	cmp	r3, #0
    d236:	d117      	bne.n	d268 <adc_get_status+0x48>
    d238:	4b2f      	ldr	r3, [pc, #188]	; (d2f8 <adc_get_status+0xd8>)
    d23a:	4798      	blx	r3
    d23c:	1c01      	adds	r1, r0, #0
    d23e:	4a2f      	ldr	r2, [pc, #188]	; (d2fc <adc_get_status+0xdc>)
    d240:	4b2f      	ldr	r3, [pc, #188]	; (d300 <adc_get_status+0xe0>)
    d242:	4830      	ldr	r0, [pc, #192]	; (d304 <adc_get_status+0xe4>)
    d244:	9000      	str	r0, [sp, #0]
    d246:	4830      	ldr	r0, [pc, #192]	; (d308 <adc_get_status+0xe8>)
    d248:	9001      	str	r0, [sp, #4]
    d24a:	1c08      	adds	r0, r1, #0
    d24c:	2101      	movs	r1, #1
    d24e:	4c2f      	ldr	r4, [pc, #188]	; (d30c <adc_get_status+0xec>)
    d250:	47a0      	blx	r4
    d252:	e009      	b.n	d268 <adc_get_status+0x48>
    d254:	687b      	ldr	r3, [r7, #4]
    d256:	2b00      	cmp	r3, #0
    d258:	d106      	bne.n	d268 <adc_get_status+0x48>
    d25a:	482d      	ldr	r0, [pc, #180]	; (d310 <adc_get_status+0xf0>)
    d25c:	492a      	ldr	r1, [pc, #168]	; (d308 <adc_get_status+0xe8>)
    d25e:	4a27      	ldr	r2, [pc, #156]	; (d2fc <adc_get_status+0xdc>)
    d260:	4b27      	ldr	r3, [pc, #156]	; (d300 <adc_get_status+0xe0>)
    d262:	4c2c      	ldr	r4, [pc, #176]	; (d314 <adc_get_status+0xf4>)
    d264:	47a0      	blx	r4
    d266:	e7fe      	b.n	d266 <adc_get_status+0x46>
	Assert(module_inst->hw);
    d268:	4b23      	ldr	r3, [pc, #140]	; (d2f8 <adc_get_status+0xd8>)
    d26a:	4798      	blx	r3
    d26c:	1c03      	adds	r3, r0, #0
    d26e:	2b00      	cmp	r3, #0
    d270:	d011      	beq.n	d296 <adc_get_status+0x76>
    d272:	687b      	ldr	r3, [r7, #4]
    d274:	681b      	ldr	r3, [r3, #0]
    d276:	2b00      	cmp	r3, #0
    d278:	d118      	bne.n	d2ac <adc_get_status+0x8c>
    d27a:	4b1f      	ldr	r3, [pc, #124]	; (d2f8 <adc_get_status+0xd8>)
    d27c:	4798      	blx	r3
    d27e:	1c01      	adds	r1, r0, #0
    d280:	4a1e      	ldr	r2, [pc, #120]	; (d2fc <adc_get_status+0xdc>)
    d282:	4b25      	ldr	r3, [pc, #148]	; (d318 <adc_get_status+0xf8>)
    d284:	481f      	ldr	r0, [pc, #124]	; (d304 <adc_get_status+0xe4>)
    d286:	9000      	str	r0, [sp, #0]
    d288:	4824      	ldr	r0, [pc, #144]	; (d31c <adc_get_status+0xfc>)
    d28a:	9001      	str	r0, [sp, #4]
    d28c:	1c08      	adds	r0, r1, #0
    d28e:	2101      	movs	r1, #1
    d290:	4c1e      	ldr	r4, [pc, #120]	; (d30c <adc_get_status+0xec>)
    d292:	47a0      	blx	r4
    d294:	e00a      	b.n	d2ac <adc_get_status+0x8c>
    d296:	687b      	ldr	r3, [r7, #4]
    d298:	681b      	ldr	r3, [r3, #0]
    d29a:	2b00      	cmp	r3, #0
    d29c:	d106      	bne.n	d2ac <adc_get_status+0x8c>
    d29e:	481c      	ldr	r0, [pc, #112]	; (d310 <adc_get_status+0xf0>)
    d2a0:	491e      	ldr	r1, [pc, #120]	; (d31c <adc_get_status+0xfc>)
    d2a2:	4a16      	ldr	r2, [pc, #88]	; (d2fc <adc_get_status+0xdc>)
    d2a4:	4b1c      	ldr	r3, [pc, #112]	; (d318 <adc_get_status+0xf8>)
    d2a6:	4c1b      	ldr	r4, [pc, #108]	; (d314 <adc_get_status+0xf4>)
    d2a8:	47a0      	blx	r4
    d2aa:	e7fe      	b.n	d2aa <adc_get_status+0x8a>

	Adc *const adc_module = module_inst->hw;
    d2ac:	687b      	ldr	r3, [r7, #4]
    d2ae:	681b      	ldr	r3, [r3, #0]
    d2b0:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    d2b2:	693b      	ldr	r3, [r7, #16]
    d2b4:	699b      	ldr	r3, [r3, #24]
    d2b6:	b2db      	uxtb	r3, r3
    d2b8:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    d2ba:	2300      	movs	r3, #0
    d2bc:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    d2be:	68fa      	ldr	r2, [r7, #12]
    d2c0:	2301      	movs	r3, #1
    d2c2:	4013      	ands	r3, r2
    d2c4:	d003      	beq.n	d2ce <adc_get_status+0xae>
		status_flags |= ADC_STATUS_RESULT_READY;
    d2c6:	697b      	ldr	r3, [r7, #20]
    d2c8:	2201      	movs	r2, #1
    d2ca:	4313      	orrs	r3, r2
    d2cc:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    d2ce:	68fa      	ldr	r2, [r7, #12]
    d2d0:	2304      	movs	r3, #4
    d2d2:	4013      	ands	r3, r2
    d2d4:	d003      	beq.n	d2de <adc_get_status+0xbe>
		status_flags |= ADC_STATUS_WINDOW;
    d2d6:	697b      	ldr	r3, [r7, #20]
    d2d8:	2202      	movs	r2, #2
    d2da:	4313      	orrs	r3, r2
    d2dc:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    d2de:	68fa      	ldr	r2, [r7, #12]
    d2e0:	2302      	movs	r3, #2
    d2e2:	4013      	ands	r3, r2
    d2e4:	d003      	beq.n	d2ee <adc_get_status+0xce>
		status_flags |= ADC_STATUS_OVERRUN;
    d2e6:	697b      	ldr	r3, [r7, #20]
    d2e8:	2204      	movs	r2, #4
    d2ea:	4313      	orrs	r3, r2
    d2ec:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    d2ee:	697b      	ldr	r3, [r7, #20]
}
    d2f0:	1c18      	adds	r0, r3, #0
    d2f2:	46bd      	mov	sp, r7
    d2f4:	b007      	add	sp, #28
    d2f6:	bd90      	pop	{r4, r7, pc}
    d2f8:	0000d02d 	.word	0x0000d02d
    d2fc:	00025564 	.word	0x00025564
    d300:	00000431 	.word	0x00000431
    d304:	00025518 	.word	0x00025518
    d308:	00025588 	.word	0x00025588
    d30c:	000106e9 	.word	0x000106e9
    d310:	00025538 	.word	0x00025538
    d314:	0001b62d 	.word	0x0001b62d
    d318:	00000432 	.word	0x00000432
    d31c:	00025594 	.word	0x00025594

0000d320 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    d320:	b590      	push	{r4, r7, lr}
    d322:	b087      	sub	sp, #28
    d324:	af02      	add	r7, sp, #8
    d326:	6078      	str	r0, [r7, #4]
    d328:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
    d32a:	4b33      	ldr	r3, [pc, #204]	; (d3f8 <adc_clear_status+0xd8>)
    d32c:	4798      	blx	r3
    d32e:	1c03      	adds	r3, r0, #0
    d330:	2b00      	cmp	r3, #0
    d332:	d010      	beq.n	d356 <adc_clear_status+0x36>
    d334:	687b      	ldr	r3, [r7, #4]
    d336:	2b00      	cmp	r3, #0
    d338:	d117      	bne.n	d36a <adc_clear_status+0x4a>
    d33a:	4b2f      	ldr	r3, [pc, #188]	; (d3f8 <adc_clear_status+0xd8>)
    d33c:	4798      	blx	r3
    d33e:	1c01      	adds	r1, r0, #0
    d340:	4a2e      	ldr	r2, [pc, #184]	; (d3fc <adc_clear_status+0xdc>)
    d342:	4b2f      	ldr	r3, [pc, #188]	; (d400 <adc_clear_status+0xe0>)
    d344:	482f      	ldr	r0, [pc, #188]	; (d404 <adc_clear_status+0xe4>)
    d346:	9000      	str	r0, [sp, #0]
    d348:	482f      	ldr	r0, [pc, #188]	; (d408 <adc_clear_status+0xe8>)
    d34a:	9001      	str	r0, [sp, #4]
    d34c:	1c08      	adds	r0, r1, #0
    d34e:	2101      	movs	r1, #1
    d350:	4c2e      	ldr	r4, [pc, #184]	; (d40c <adc_clear_status+0xec>)
    d352:	47a0      	blx	r4
    d354:	e009      	b.n	d36a <adc_clear_status+0x4a>
    d356:	687b      	ldr	r3, [r7, #4]
    d358:	2b00      	cmp	r3, #0
    d35a:	d106      	bne.n	d36a <adc_clear_status+0x4a>
    d35c:	482c      	ldr	r0, [pc, #176]	; (d410 <adc_clear_status+0xf0>)
    d35e:	492a      	ldr	r1, [pc, #168]	; (d408 <adc_clear_status+0xe8>)
    d360:	4a26      	ldr	r2, [pc, #152]	; (d3fc <adc_clear_status+0xdc>)
    d362:	4b27      	ldr	r3, [pc, #156]	; (d400 <adc_clear_status+0xe0>)
    d364:	4c2b      	ldr	r4, [pc, #172]	; (d414 <adc_clear_status+0xf4>)
    d366:	47a0      	blx	r4
    d368:	e7fe      	b.n	d368 <adc_clear_status+0x48>
	Assert(module_inst->hw);
    d36a:	4b23      	ldr	r3, [pc, #140]	; (d3f8 <adc_clear_status+0xd8>)
    d36c:	4798      	blx	r3
    d36e:	1c03      	adds	r3, r0, #0
    d370:	2b00      	cmp	r3, #0
    d372:	d011      	beq.n	d398 <adc_clear_status+0x78>
    d374:	687b      	ldr	r3, [r7, #4]
    d376:	681b      	ldr	r3, [r3, #0]
    d378:	2b00      	cmp	r3, #0
    d37a:	d118      	bne.n	d3ae <adc_clear_status+0x8e>
    d37c:	4b1e      	ldr	r3, [pc, #120]	; (d3f8 <adc_clear_status+0xd8>)
    d37e:	4798      	blx	r3
    d380:	1c01      	adds	r1, r0, #0
    d382:	4a1e      	ldr	r2, [pc, #120]	; (d3fc <adc_clear_status+0xdc>)
    d384:	4b24      	ldr	r3, [pc, #144]	; (d418 <adc_clear_status+0xf8>)
    d386:	481f      	ldr	r0, [pc, #124]	; (d404 <adc_clear_status+0xe4>)
    d388:	9000      	str	r0, [sp, #0]
    d38a:	4824      	ldr	r0, [pc, #144]	; (d41c <adc_clear_status+0xfc>)
    d38c:	9001      	str	r0, [sp, #4]
    d38e:	1c08      	adds	r0, r1, #0
    d390:	2101      	movs	r1, #1
    d392:	4c1e      	ldr	r4, [pc, #120]	; (d40c <adc_clear_status+0xec>)
    d394:	47a0      	blx	r4
    d396:	e00a      	b.n	d3ae <adc_clear_status+0x8e>
    d398:	687b      	ldr	r3, [r7, #4]
    d39a:	681b      	ldr	r3, [r3, #0]
    d39c:	2b00      	cmp	r3, #0
    d39e:	d106      	bne.n	d3ae <adc_clear_status+0x8e>
    d3a0:	481b      	ldr	r0, [pc, #108]	; (d410 <adc_clear_status+0xf0>)
    d3a2:	491e      	ldr	r1, [pc, #120]	; (d41c <adc_clear_status+0xfc>)
    d3a4:	4a15      	ldr	r2, [pc, #84]	; (d3fc <adc_clear_status+0xdc>)
    d3a6:	4b1c      	ldr	r3, [pc, #112]	; (d418 <adc_clear_status+0xf8>)
    d3a8:	4c1a      	ldr	r4, [pc, #104]	; (d414 <adc_clear_status+0xf4>)
    d3aa:	47a0      	blx	r4
    d3ac:	e7fe      	b.n	d3ac <adc_clear_status+0x8c>

	Adc *const adc_module = module_inst->hw;
    d3ae:	687b      	ldr	r3, [r7, #4]
    d3b0:	681b      	ldr	r3, [r3, #0]
    d3b2:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    d3b4:	2300      	movs	r3, #0
    d3b6:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    d3b8:	683a      	ldr	r2, [r7, #0]
    d3ba:	2301      	movs	r3, #1
    d3bc:	4013      	ands	r3, r2
    d3be:	d003      	beq.n	d3c8 <adc_clear_status+0xa8>
		int_flags |= ADC_INTFLAG_RESRDY;
    d3c0:	68fb      	ldr	r3, [r7, #12]
    d3c2:	2201      	movs	r2, #1
    d3c4:	4313      	orrs	r3, r2
    d3c6:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    d3c8:	683a      	ldr	r2, [r7, #0]
    d3ca:	2302      	movs	r3, #2
    d3cc:	4013      	ands	r3, r2
    d3ce:	d003      	beq.n	d3d8 <adc_clear_status+0xb8>
		int_flags |= ADC_INTFLAG_WINMON;
    d3d0:	68fb      	ldr	r3, [r7, #12]
    d3d2:	2204      	movs	r2, #4
    d3d4:	4313      	orrs	r3, r2
    d3d6:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    d3d8:	683a      	ldr	r2, [r7, #0]
    d3da:	2304      	movs	r3, #4
    d3dc:	4013      	ands	r3, r2
    d3de:	d003      	beq.n	d3e8 <adc_clear_status+0xc8>
		int_flags |= ADC_INTFLAG_OVERRUN;
    d3e0:	68fb      	ldr	r3, [r7, #12]
    d3e2:	2202      	movs	r2, #2
    d3e4:	4313      	orrs	r3, r2
    d3e6:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    d3e8:	68fb      	ldr	r3, [r7, #12]
    d3ea:	b2da      	uxtb	r2, r3
    d3ec:	68bb      	ldr	r3, [r7, #8]
    d3ee:	761a      	strb	r2, [r3, #24]
}
    d3f0:	46bd      	mov	sp, r7
    d3f2:	b005      	add	sp, #20
    d3f4:	bd90      	pop	{r4, r7, pc}
    d3f6:	46c0      	nop			; (mov r8, r8)
    d3f8:	0000d02d 	.word	0x0000d02d
    d3fc:	00025564 	.word	0x00025564
    d400:	00000459 	.word	0x00000459
    d404:	00025518 	.word	0x00025518
    d408:	00025588 	.word	0x00025588
    d40c:	000106e9 	.word	0x000106e9
    d410:	00025538 	.word	0x00025538
    d414:	0001b62d 	.word	0x0001b62d
    d418:	0000045a 	.word	0x0000045a
    d41c:	00025594 	.word	0x00025594

0000d420 <adc_is_syncing>:
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    d420:	b590      	push	{r4, r7, lr}
    d422:	b087      	sub	sp, #28
    d424:	af02      	add	r7, sp, #8
    d426:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
    d428:	4b19      	ldr	r3, [pc, #100]	; (d490 <adc_is_syncing+0x70>)
    d42a:	4798      	blx	r3
    d42c:	1c03      	adds	r3, r0, #0
    d42e:	2b00      	cmp	r3, #0
    d430:	d010      	beq.n	d454 <adc_is_syncing+0x34>
    d432:	687b      	ldr	r3, [r7, #4]
    d434:	2b00      	cmp	r3, #0
    d436:	d117      	bne.n	d468 <adc_is_syncing+0x48>
    d438:	4b15      	ldr	r3, [pc, #84]	; (d490 <adc_is_syncing+0x70>)
    d43a:	4798      	blx	r3
    d43c:	1c01      	adds	r1, r0, #0
    d43e:	4a15      	ldr	r2, [pc, #84]	; (d494 <adc_is_syncing+0x74>)
    d440:	4b15      	ldr	r3, [pc, #84]	; (d498 <adc_is_syncing+0x78>)
    d442:	4816      	ldr	r0, [pc, #88]	; (d49c <adc_is_syncing+0x7c>)
    d444:	9000      	str	r0, [sp, #0]
    d446:	4816      	ldr	r0, [pc, #88]	; (d4a0 <adc_is_syncing+0x80>)
    d448:	9001      	str	r0, [sp, #4]
    d44a:	1c08      	adds	r0, r1, #0
    d44c:	2101      	movs	r1, #1
    d44e:	4c15      	ldr	r4, [pc, #84]	; (d4a4 <adc_is_syncing+0x84>)
    d450:	47a0      	blx	r4
    d452:	e009      	b.n	d468 <adc_is_syncing+0x48>
    d454:	687b      	ldr	r3, [r7, #4]
    d456:	2b00      	cmp	r3, #0
    d458:	d106      	bne.n	d468 <adc_is_syncing+0x48>
    d45a:	4813      	ldr	r0, [pc, #76]	; (d4a8 <adc_is_syncing+0x88>)
    d45c:	4910      	ldr	r1, [pc, #64]	; (d4a0 <adc_is_syncing+0x80>)
    d45e:	4a0d      	ldr	r2, [pc, #52]	; (d494 <adc_is_syncing+0x74>)
    d460:	4b0d      	ldr	r3, [pc, #52]	; (d498 <adc_is_syncing+0x78>)
    d462:	4c12      	ldr	r4, [pc, #72]	; (d4ac <adc_is_syncing+0x8c>)
    d464:	47a0      	blx	r4
    d466:	e7fe      	b.n	d466 <adc_is_syncing+0x46>

	Adc *const adc_module = module_inst->hw;
    d468:	687b      	ldr	r3, [r7, #4]
    d46a:	681b      	ldr	r3, [r3, #0]
    d46c:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    d46e:	68fb      	ldr	r3, [r7, #12]
    d470:	699b      	ldr	r3, [r3, #24]
    d472:	041b      	lsls	r3, r3, #16
    d474:	0e1b      	lsrs	r3, r3, #24
    d476:	b2db      	uxtb	r3, r3
    d478:	b2db      	uxtb	r3, r3
    d47a:	b25b      	sxtb	r3, r3
    d47c:	2b00      	cmp	r3, #0
    d47e:	da01      	bge.n	d484 <adc_is_syncing+0x64>
		return true;
    d480:	2301      	movs	r3, #1
    d482:	e000      	b.n	d486 <adc_is_syncing+0x66>
	}

	return false;
    d484:	2300      	movs	r3, #0
}
    d486:	1c18      	adds	r0, r3, #0
    d488:	46bd      	mov	sp, r7
    d48a:	b005      	add	sp, #20
    d48c:	bd90      	pop	{r4, r7, pc}
    d48e:	46c0      	nop			; (mov r8, r8)
    d490:	0000d02d 	.word	0x0000d02d
    d494:	00025564 	.word	0x00025564
    d498:	0000048d 	.word	0x0000048d
    d49c:	00025518 	.word	0x00025518
    d4a0:	00025588 	.word	0x00025588
    d4a4:	000106e9 	.word	0x000106e9
    d4a8:	00025538 	.word	0x00025538
    d4ac:	0001b62d 	.word	0x0001b62d

0000d4b0 <adc_disable>:
 *
 * \param[in] module_inst Pointer to the ADC software instance struct
 */
static inline enum status_code adc_disable(
		struct adc_module *const module_inst)
{
    d4b0:	b590      	push	{r4, r7, lr}
    d4b2:	b087      	sub	sp, #28
    d4b4:	af02      	add	r7, sp, #8
    d4b6:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
    d4b8:	4b2e      	ldr	r3, [pc, #184]	; (d574 <adc_disable+0xc4>)
    d4ba:	4798      	blx	r3
    d4bc:	1c03      	adds	r3, r0, #0
    d4be:	2b00      	cmp	r3, #0
    d4c0:	d010      	beq.n	d4e4 <adc_disable+0x34>
    d4c2:	687b      	ldr	r3, [r7, #4]
    d4c4:	2b00      	cmp	r3, #0
    d4c6:	d117      	bne.n	d4f8 <adc_disable+0x48>
    d4c8:	4b2a      	ldr	r3, [pc, #168]	; (d574 <adc_disable+0xc4>)
    d4ca:	4798      	blx	r3
    d4cc:	1c01      	adds	r1, r0, #0
    d4ce:	4a2a      	ldr	r2, [pc, #168]	; (d578 <adc_disable+0xc8>)
    d4d0:	4b2a      	ldr	r3, [pc, #168]	; (d57c <adc_disable+0xcc>)
    d4d2:	482b      	ldr	r0, [pc, #172]	; (d580 <adc_disable+0xd0>)
    d4d4:	9000      	str	r0, [sp, #0]
    d4d6:	482b      	ldr	r0, [pc, #172]	; (d584 <adc_disable+0xd4>)
    d4d8:	9001      	str	r0, [sp, #4]
    d4da:	1c08      	adds	r0, r1, #0
    d4dc:	2101      	movs	r1, #1
    d4de:	4c2a      	ldr	r4, [pc, #168]	; (d588 <adc_disable+0xd8>)
    d4e0:	47a0      	blx	r4
    d4e2:	e009      	b.n	d4f8 <adc_disable+0x48>
    d4e4:	687b      	ldr	r3, [r7, #4]
    d4e6:	2b00      	cmp	r3, #0
    d4e8:	d106      	bne.n	d4f8 <adc_disable+0x48>
    d4ea:	4828      	ldr	r0, [pc, #160]	; (d58c <adc_disable+0xdc>)
    d4ec:	4925      	ldr	r1, [pc, #148]	; (d584 <adc_disable+0xd4>)
    d4ee:	4a22      	ldr	r2, [pc, #136]	; (d578 <adc_disable+0xc8>)
    d4f0:	4b22      	ldr	r3, [pc, #136]	; (d57c <adc_disable+0xcc>)
    d4f2:	4c27      	ldr	r4, [pc, #156]	; (d590 <adc_disable+0xe0>)
    d4f4:	47a0      	blx	r4
    d4f6:	e7fe      	b.n	d4f6 <adc_disable+0x46>
	Assert(module_inst->hw);
    d4f8:	4b1e      	ldr	r3, [pc, #120]	; (d574 <adc_disable+0xc4>)
    d4fa:	4798      	blx	r3
    d4fc:	1c03      	adds	r3, r0, #0
    d4fe:	2b00      	cmp	r3, #0
    d500:	d011      	beq.n	d526 <adc_disable+0x76>
    d502:	687b      	ldr	r3, [r7, #4]
    d504:	681b      	ldr	r3, [r3, #0]
    d506:	2b00      	cmp	r3, #0
    d508:	d118      	bne.n	d53c <adc_disable+0x8c>
    d50a:	4b1a      	ldr	r3, [pc, #104]	; (d574 <adc_disable+0xc4>)
    d50c:	4798      	blx	r3
    d50e:	1c01      	adds	r1, r0, #0
    d510:	4a19      	ldr	r2, [pc, #100]	; (d578 <adc_disable+0xc8>)
    d512:	4b20      	ldr	r3, [pc, #128]	; (d594 <adc_disable+0xe4>)
    d514:	481a      	ldr	r0, [pc, #104]	; (d580 <adc_disable+0xd0>)
    d516:	9000      	str	r0, [sp, #0]
    d518:	481f      	ldr	r0, [pc, #124]	; (d598 <adc_disable+0xe8>)
    d51a:	9001      	str	r0, [sp, #4]
    d51c:	1c08      	adds	r0, r1, #0
    d51e:	2101      	movs	r1, #1
    d520:	4c19      	ldr	r4, [pc, #100]	; (d588 <adc_disable+0xd8>)
    d522:	47a0      	blx	r4
    d524:	e00a      	b.n	d53c <adc_disable+0x8c>
    d526:	687b      	ldr	r3, [r7, #4]
    d528:	681b      	ldr	r3, [r3, #0]
    d52a:	2b00      	cmp	r3, #0
    d52c:	d106      	bne.n	d53c <adc_disable+0x8c>
    d52e:	4817      	ldr	r0, [pc, #92]	; (d58c <adc_disable+0xdc>)
    d530:	4919      	ldr	r1, [pc, #100]	; (d598 <adc_disable+0xe8>)
    d532:	4a11      	ldr	r2, [pc, #68]	; (d578 <adc_disable+0xc8>)
    d534:	4b17      	ldr	r3, [pc, #92]	; (d594 <adc_disable+0xe4>)
    d536:	4c16      	ldr	r4, [pc, #88]	; (d590 <adc_disable+0xe0>)
    d538:	47a0      	blx	r4
    d53a:	e7fe      	b.n	d53a <adc_disable+0x8a>

	Adc *const adc_module = module_inst->hw;
    d53c:	687b      	ldr	r3, [r7, #4]
    d53e:	681b      	ldr	r3, [r3, #0]
    d540:	60fb      	str	r3, [r7, #12]

#if ADC_CALLBACK_MODE == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_ADC);
    d542:	2015      	movs	r0, #21
    d544:	4b15      	ldr	r3, [pc, #84]	; (d59c <adc_disable+0xec>)
    d546:	4798      	blx	r3
#endif

	while (adc_is_syncing(module_inst)) {
    d548:	46c0      	nop			; (mov r8, r8)
    d54a:	687b      	ldr	r3, [r7, #4]
    d54c:	1c18      	adds	r0, r3, #0
    d54e:	4b14      	ldr	r3, [pc, #80]	; (d5a0 <adc_disable+0xf0>)
    d550:	4798      	blx	r3
    d552:	1c03      	adds	r3, r0, #0
    d554:	2b00      	cmp	r3, #0
    d556:	d1f8      	bne.n	d54a <adc_disable+0x9a>
		/* Wait for synchronization */
	}

	adc_module->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    d558:	68fb      	ldr	r3, [r7, #12]
    d55a:	681b      	ldr	r3, [r3, #0]
    d55c:	b2db      	uxtb	r3, r3
    d55e:	2202      	movs	r2, #2
    d560:	4393      	bics	r3, r2
    d562:	b2da      	uxtb	r2, r3
    d564:	68fb      	ldr	r3, [r7, #12]
    d566:	701a      	strb	r2, [r3, #0]
	return STATUS_OK;
    d568:	2300      	movs	r3, #0
}
    d56a:	1c18      	adds	r0, r3, #0
    d56c:	46bd      	mov	sp, r7
    d56e:	b005      	add	sp, #20
    d570:	bd90      	pop	{r4, r7, pc}
    d572:	46c0      	nop			; (mov r8, r8)
    d574:	0000d02d 	.word	0x0000d02d
    d578:	00025564 	.word	0x00025564
    d57c:	000004bd 	.word	0x000004bd
    d580:	00025518 	.word	0x00025518
    d584:	00025588 	.word	0x00025588
    d588:	000106e9 	.word	0x000106e9
    d58c:	00025538 	.word	0x00025538
    d590:	0001b62d 	.word	0x0001b62d
    d594:	000004be 	.word	0x000004be
    d598:	00025594 	.word	0x00025594
    d59c:	0000d1f1 	.word	0x0000d1f1
    d5a0:	0000d421 	.word	0x0000d421

0000d5a4 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    d5a4:	b590      	push	{r4, r7, lr}
    d5a6:	b087      	sub	sp, #28
    d5a8:	af02      	add	r7, sp, #8
    d5aa:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
    d5ac:	4b2c      	ldr	r3, [pc, #176]	; (d660 <adc_start_conversion+0xbc>)
    d5ae:	4798      	blx	r3
    d5b0:	1c03      	adds	r3, r0, #0
    d5b2:	2b00      	cmp	r3, #0
    d5b4:	d011      	beq.n	d5da <adc_start_conversion+0x36>
    d5b6:	687b      	ldr	r3, [r7, #4]
    d5b8:	2b00      	cmp	r3, #0
    d5ba:	d119      	bne.n	d5f0 <adc_start_conversion+0x4c>
    d5bc:	4b28      	ldr	r3, [pc, #160]	; (d660 <adc_start_conversion+0xbc>)
    d5be:	4798      	blx	r3
    d5c0:	1c01      	adds	r1, r0, #0
    d5c2:	4a28      	ldr	r2, [pc, #160]	; (d664 <adc_start_conversion+0xc0>)
    d5c4:	23a8      	movs	r3, #168	; 0xa8
    d5c6:	00db      	lsls	r3, r3, #3
    d5c8:	4827      	ldr	r0, [pc, #156]	; (d668 <adc_start_conversion+0xc4>)
    d5ca:	9000      	str	r0, [sp, #0]
    d5cc:	4827      	ldr	r0, [pc, #156]	; (d66c <adc_start_conversion+0xc8>)
    d5ce:	9001      	str	r0, [sp, #4]
    d5d0:	1c08      	adds	r0, r1, #0
    d5d2:	2101      	movs	r1, #1
    d5d4:	4c26      	ldr	r4, [pc, #152]	; (d670 <adc_start_conversion+0xcc>)
    d5d6:	47a0      	blx	r4
    d5d8:	e00a      	b.n	d5f0 <adc_start_conversion+0x4c>
    d5da:	687b      	ldr	r3, [r7, #4]
    d5dc:	2b00      	cmp	r3, #0
    d5de:	d107      	bne.n	d5f0 <adc_start_conversion+0x4c>
    d5e0:	4824      	ldr	r0, [pc, #144]	; (d674 <adc_start_conversion+0xd0>)
    d5e2:	4922      	ldr	r1, [pc, #136]	; (d66c <adc_start_conversion+0xc8>)
    d5e4:	4a1f      	ldr	r2, [pc, #124]	; (d664 <adc_start_conversion+0xc0>)
    d5e6:	23a8      	movs	r3, #168	; 0xa8
    d5e8:	00db      	lsls	r3, r3, #3
    d5ea:	4c23      	ldr	r4, [pc, #140]	; (d678 <adc_start_conversion+0xd4>)
    d5ec:	47a0      	blx	r4
    d5ee:	e7fe      	b.n	d5ee <adc_start_conversion+0x4a>
	Assert(module_inst->hw);
    d5f0:	4b1b      	ldr	r3, [pc, #108]	; (d660 <adc_start_conversion+0xbc>)
    d5f2:	4798      	blx	r3
    d5f4:	1c03      	adds	r3, r0, #0
    d5f6:	2b00      	cmp	r3, #0
    d5f8:	d011      	beq.n	d61e <adc_start_conversion+0x7a>
    d5fa:	687b      	ldr	r3, [r7, #4]
    d5fc:	681b      	ldr	r3, [r3, #0]
    d5fe:	2b00      	cmp	r3, #0
    d600:	d118      	bne.n	d634 <adc_start_conversion+0x90>
    d602:	4b17      	ldr	r3, [pc, #92]	; (d660 <adc_start_conversion+0xbc>)
    d604:	4798      	blx	r3
    d606:	1c01      	adds	r1, r0, #0
    d608:	4a16      	ldr	r2, [pc, #88]	; (d664 <adc_start_conversion+0xc0>)
    d60a:	4b1c      	ldr	r3, [pc, #112]	; (d67c <adc_start_conversion+0xd8>)
    d60c:	4816      	ldr	r0, [pc, #88]	; (d668 <adc_start_conversion+0xc4>)
    d60e:	9000      	str	r0, [sp, #0]
    d610:	481b      	ldr	r0, [pc, #108]	; (d680 <adc_start_conversion+0xdc>)
    d612:	9001      	str	r0, [sp, #4]
    d614:	1c08      	adds	r0, r1, #0
    d616:	2101      	movs	r1, #1
    d618:	4c15      	ldr	r4, [pc, #84]	; (d670 <adc_start_conversion+0xcc>)
    d61a:	47a0      	blx	r4
    d61c:	e00a      	b.n	d634 <adc_start_conversion+0x90>
    d61e:	687b      	ldr	r3, [r7, #4]
    d620:	681b      	ldr	r3, [r3, #0]
    d622:	2b00      	cmp	r3, #0
    d624:	d106      	bne.n	d634 <adc_start_conversion+0x90>
    d626:	4813      	ldr	r0, [pc, #76]	; (d674 <adc_start_conversion+0xd0>)
    d628:	4915      	ldr	r1, [pc, #84]	; (d680 <adc_start_conversion+0xdc>)
    d62a:	4a0e      	ldr	r2, [pc, #56]	; (d664 <adc_start_conversion+0xc0>)
    d62c:	4b13      	ldr	r3, [pc, #76]	; (d67c <adc_start_conversion+0xd8>)
    d62e:	4c12      	ldr	r4, [pc, #72]	; (d678 <adc_start_conversion+0xd4>)
    d630:	47a0      	blx	r4
    d632:	e7fe      	b.n	d632 <adc_start_conversion+0x8e>

	Adc *const adc_module = module_inst->hw;
    d634:	687b      	ldr	r3, [r7, #4]
    d636:	681b      	ldr	r3, [r3, #0]
    d638:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    d63a:	46c0      	nop			; (mov r8, r8)
    d63c:	687b      	ldr	r3, [r7, #4]
    d63e:	1c18      	adds	r0, r3, #0
    d640:	4b10      	ldr	r3, [pc, #64]	; (d684 <adc_start_conversion+0xe0>)
    d642:	4798      	blx	r3
    d644:	1c03      	adds	r3, r0, #0
    d646:	2b00      	cmp	r3, #0
    d648:	d1f8      	bne.n	d63c <adc_start_conversion+0x98>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    d64a:	68fb      	ldr	r3, [r7, #12]
    d64c:	68db      	ldr	r3, [r3, #12]
    d64e:	b2db      	uxtb	r3, r3
    d650:	2202      	movs	r2, #2
    d652:	4313      	orrs	r3, r2
    d654:	b2da      	uxtb	r2, r3
    d656:	68fb      	ldr	r3, [r7, #12]
    d658:	731a      	strb	r2, [r3, #12]
}
    d65a:	46bd      	mov	sp, r7
    d65c:	b005      	add	sp, #20
    d65e:	bd90      	pop	{r4, r7, pc}
    d660:	0000d02d 	.word	0x0000d02d
    d664:	00025564 	.word	0x00025564
    d668:	00025518 	.word	0x00025518
    d66c:	00025588 	.word	0x00025588
    d670:	000106e9 	.word	0x000106e9
    d674:	00025538 	.word	0x00025538
    d678:	0001b62d 	.word	0x0001b62d
    d67c:	00000541 	.word	0x00000541
    d680:	00025594 	.word	0x00025594
    d684:	0000d421 	.word	0x0000d421

0000d688 <adc_read>:
 * \retval STATUS_BUSY  A conversion result was not ready
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    d688:	b590      	push	{r4, r7, lr}
    d68a:	b087      	sub	sp, #28
    d68c:	af02      	add	r7, sp, #8
    d68e:	6078      	str	r0, [r7, #4]
    d690:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
    d692:	4b43      	ldr	r3, [pc, #268]	; (d7a0 <adc_read+0x118>)
    d694:	4798      	blx	r3
    d696:	1c03      	adds	r3, r0, #0
    d698:	2b00      	cmp	r3, #0
    d69a:	d010      	beq.n	d6be <adc_read+0x36>
    d69c:	687b      	ldr	r3, [r7, #4]
    d69e:	2b00      	cmp	r3, #0
    d6a0:	d117      	bne.n	d6d2 <adc_read+0x4a>
    d6a2:	4b3f      	ldr	r3, [pc, #252]	; (d7a0 <adc_read+0x118>)
    d6a4:	4798      	blx	r3
    d6a6:	1c01      	adds	r1, r0, #0
    d6a8:	4a3e      	ldr	r2, [pc, #248]	; (d7a4 <adc_read+0x11c>)
    d6aa:	4b3f      	ldr	r3, [pc, #252]	; (d7a8 <adc_read+0x120>)
    d6ac:	483f      	ldr	r0, [pc, #252]	; (d7ac <adc_read+0x124>)
    d6ae:	9000      	str	r0, [sp, #0]
    d6b0:	483f      	ldr	r0, [pc, #252]	; (d7b0 <adc_read+0x128>)
    d6b2:	9001      	str	r0, [sp, #4]
    d6b4:	1c08      	adds	r0, r1, #0
    d6b6:	2101      	movs	r1, #1
    d6b8:	4c3e      	ldr	r4, [pc, #248]	; (d7b4 <adc_read+0x12c>)
    d6ba:	47a0      	blx	r4
    d6bc:	e009      	b.n	d6d2 <adc_read+0x4a>
    d6be:	687b      	ldr	r3, [r7, #4]
    d6c0:	2b00      	cmp	r3, #0
    d6c2:	d106      	bne.n	d6d2 <adc_read+0x4a>
    d6c4:	483c      	ldr	r0, [pc, #240]	; (d7b8 <adc_read+0x130>)
    d6c6:	493a      	ldr	r1, [pc, #232]	; (d7b0 <adc_read+0x128>)
    d6c8:	4a36      	ldr	r2, [pc, #216]	; (d7a4 <adc_read+0x11c>)
    d6ca:	4b37      	ldr	r3, [pc, #220]	; (d7a8 <adc_read+0x120>)
    d6cc:	4c3b      	ldr	r4, [pc, #236]	; (d7bc <adc_read+0x134>)
    d6ce:	47a0      	blx	r4
    d6d0:	e7fe      	b.n	d6d0 <adc_read+0x48>
	Assert(module_inst->hw);
    d6d2:	4b33      	ldr	r3, [pc, #204]	; (d7a0 <adc_read+0x118>)
    d6d4:	4798      	blx	r3
    d6d6:	1c03      	adds	r3, r0, #0
    d6d8:	2b00      	cmp	r3, #0
    d6da:	d011      	beq.n	d700 <adc_read+0x78>
    d6dc:	687b      	ldr	r3, [r7, #4]
    d6de:	681b      	ldr	r3, [r3, #0]
    d6e0:	2b00      	cmp	r3, #0
    d6e2:	d118      	bne.n	d716 <adc_read+0x8e>
    d6e4:	4b2e      	ldr	r3, [pc, #184]	; (d7a0 <adc_read+0x118>)
    d6e6:	4798      	blx	r3
    d6e8:	1c01      	adds	r1, r0, #0
    d6ea:	4a2e      	ldr	r2, [pc, #184]	; (d7a4 <adc_read+0x11c>)
    d6ec:	4b34      	ldr	r3, [pc, #208]	; (d7c0 <adc_read+0x138>)
    d6ee:	482f      	ldr	r0, [pc, #188]	; (d7ac <adc_read+0x124>)
    d6f0:	9000      	str	r0, [sp, #0]
    d6f2:	4834      	ldr	r0, [pc, #208]	; (d7c4 <adc_read+0x13c>)
    d6f4:	9001      	str	r0, [sp, #4]
    d6f6:	1c08      	adds	r0, r1, #0
    d6f8:	2101      	movs	r1, #1
    d6fa:	4c2e      	ldr	r4, [pc, #184]	; (d7b4 <adc_read+0x12c>)
    d6fc:	47a0      	blx	r4
    d6fe:	e00a      	b.n	d716 <adc_read+0x8e>
    d700:	687b      	ldr	r3, [r7, #4]
    d702:	681b      	ldr	r3, [r3, #0]
    d704:	2b00      	cmp	r3, #0
    d706:	d106      	bne.n	d716 <adc_read+0x8e>
    d708:	482b      	ldr	r0, [pc, #172]	; (d7b8 <adc_read+0x130>)
    d70a:	492e      	ldr	r1, [pc, #184]	; (d7c4 <adc_read+0x13c>)
    d70c:	4a25      	ldr	r2, [pc, #148]	; (d7a4 <adc_read+0x11c>)
    d70e:	4b2c      	ldr	r3, [pc, #176]	; (d7c0 <adc_read+0x138>)
    d710:	4c2a      	ldr	r4, [pc, #168]	; (d7bc <adc_read+0x134>)
    d712:	47a0      	blx	r4
    d714:	e7fe      	b.n	d714 <adc_read+0x8c>
	Assert(result);
    d716:	4b22      	ldr	r3, [pc, #136]	; (d7a0 <adc_read+0x118>)
    d718:	4798      	blx	r3
    d71a:	1c03      	adds	r3, r0, #0
    d71c:	2b00      	cmp	r3, #0
    d71e:	d010      	beq.n	d742 <adc_read+0xba>
    d720:	683b      	ldr	r3, [r7, #0]
    d722:	2b00      	cmp	r3, #0
    d724:	d117      	bne.n	d756 <adc_read+0xce>
    d726:	4b1e      	ldr	r3, [pc, #120]	; (d7a0 <adc_read+0x118>)
    d728:	4798      	blx	r3
    d72a:	1c01      	adds	r1, r0, #0
    d72c:	4a1d      	ldr	r2, [pc, #116]	; (d7a4 <adc_read+0x11c>)
    d72e:	4b26      	ldr	r3, [pc, #152]	; (d7c8 <adc_read+0x140>)
    d730:	481e      	ldr	r0, [pc, #120]	; (d7ac <adc_read+0x124>)
    d732:	9000      	str	r0, [sp, #0]
    d734:	4825      	ldr	r0, [pc, #148]	; (d7cc <adc_read+0x144>)
    d736:	9001      	str	r0, [sp, #4]
    d738:	1c08      	adds	r0, r1, #0
    d73a:	2101      	movs	r1, #1
    d73c:	4c1d      	ldr	r4, [pc, #116]	; (d7b4 <adc_read+0x12c>)
    d73e:	47a0      	blx	r4
    d740:	e009      	b.n	d756 <adc_read+0xce>
    d742:	683b      	ldr	r3, [r7, #0]
    d744:	2b00      	cmp	r3, #0
    d746:	d106      	bne.n	d756 <adc_read+0xce>
    d748:	481b      	ldr	r0, [pc, #108]	; (d7b8 <adc_read+0x130>)
    d74a:	4920      	ldr	r1, [pc, #128]	; (d7cc <adc_read+0x144>)
    d74c:	4a15      	ldr	r2, [pc, #84]	; (d7a4 <adc_read+0x11c>)
    d74e:	4b1e      	ldr	r3, [pc, #120]	; (d7c8 <adc_read+0x140>)
    d750:	4c1a      	ldr	r4, [pc, #104]	; (d7bc <adc_read+0x134>)
    d752:	47a0      	blx	r4
    d754:	e7fe      	b.n	d754 <adc_read+0xcc>

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    d756:	687b      	ldr	r3, [r7, #4]
    d758:	1c18      	adds	r0, r3, #0
    d75a:	4b1d      	ldr	r3, [pc, #116]	; (d7d0 <adc_read+0x148>)
    d75c:	4798      	blx	r3
    d75e:	1c02      	adds	r2, r0, #0
    d760:	2301      	movs	r3, #1
    d762:	4013      	ands	r3, r2
    d764:	d101      	bne.n	d76a <adc_read+0xe2>
		/* Result not ready */
		return STATUS_BUSY;
    d766:	2305      	movs	r3, #5
    d768:	e016      	b.n	d798 <adc_read+0x110>
	}

	Adc *const adc_module = module_inst->hw;
    d76a:	687b      	ldr	r3, [r7, #4]
    d76c:	681b      	ldr	r3, [r3, #0]
    d76e:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    d770:	46c0      	nop			; (mov r8, r8)
    d772:	687b      	ldr	r3, [r7, #4]
    d774:	1c18      	adds	r0, r3, #0
    d776:	4b17      	ldr	r3, [pc, #92]	; (d7d4 <adc_read+0x14c>)
    d778:	4798      	blx	r3
    d77a:	1c03      	adds	r3, r0, #0
    d77c:	2b00      	cmp	r3, #0
    d77e:	d1f8      	bne.n	d772 <adc_read+0xea>
		/* Wait for synchronization */
	}

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    d780:	68fb      	ldr	r3, [r7, #12]
    d782:	699b      	ldr	r3, [r3, #24]
    d784:	0c1b      	lsrs	r3, r3, #16
    d786:	b29a      	uxth	r2, r3
    d788:	683b      	ldr	r3, [r7, #0]
    d78a:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    d78c:	687b      	ldr	r3, [r7, #4]
    d78e:	1c18      	adds	r0, r3, #0
    d790:	2101      	movs	r1, #1
    d792:	4b11      	ldr	r3, [pc, #68]	; (d7d8 <adc_read+0x150>)
    d794:	4798      	blx	r3

	return STATUS_OK;
    d796:	2300      	movs	r3, #0
}
    d798:	1c18      	adds	r0, r3, #0
    d79a:	46bd      	mov	sp, r7
    d79c:	b005      	add	sp, #20
    d79e:	bd90      	pop	{r4, r7, pc}
    d7a0:	0000d02d 	.word	0x0000d02d
    d7a4:	00025564 	.word	0x00025564
    d7a8:	0000055c 	.word	0x0000055c
    d7ac:	00025518 	.word	0x00025518
    d7b0:	00025588 	.word	0x00025588
    d7b4:	000106e9 	.word	0x000106e9
    d7b8:	00025538 	.word	0x00025538
    d7bc:	0001b62d 	.word	0x0001b62d
    d7c0:	0000055d 	.word	0x0000055d
    d7c4:	00025594 	.word	0x00025594
    d7c8:	0000055e 	.word	0x0000055e
    d7cc:	000255a4 	.word	0x000255a4
    d7d0:	0000d221 	.word	0x0000d221
    d7d4:	0000d421 	.word	0x0000d421
    d7d8:	0000d321 	.word	0x0000d321

0000d7dc <adc_set_positive_input>:
 * \param[in] positive_input  Positive input pin
 */
static inline void adc_set_positive_input(
		struct adc_module *const module_inst,
		const enum adc_positive_input positive_input)
{
    d7dc:	b590      	push	{r4, r7, lr}
    d7de:	b087      	sub	sp, #28
    d7e0:	af02      	add	r7, sp, #8
    d7e2:	6078      	str	r0, [r7, #4]
    d7e4:	1c0a      	adds	r2, r1, #0
    d7e6:	1cfb      	adds	r3, r7, #3
    d7e8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
    d7ea:	4b2d      	ldr	r3, [pc, #180]	; (d8a0 <adc_set_positive_input+0xc4>)
    d7ec:	4798      	blx	r3
    d7ee:	1c03      	adds	r3, r0, #0
    d7f0:	2b00      	cmp	r3, #0
    d7f2:	d010      	beq.n	d816 <adc_set_positive_input+0x3a>
    d7f4:	687b      	ldr	r3, [r7, #4]
    d7f6:	2b00      	cmp	r3, #0
    d7f8:	d117      	bne.n	d82a <adc_set_positive_input+0x4e>
    d7fa:	4b29      	ldr	r3, [pc, #164]	; (d8a0 <adc_set_positive_input+0xc4>)
    d7fc:	4798      	blx	r3
    d7fe:	1c01      	adds	r1, r0, #0
    d800:	4a28      	ldr	r2, [pc, #160]	; (d8a4 <adc_set_positive_input+0xc8>)
    d802:	4b29      	ldr	r3, [pc, #164]	; (d8a8 <adc_set_positive_input+0xcc>)
    d804:	4829      	ldr	r0, [pc, #164]	; (d8ac <adc_set_positive_input+0xd0>)
    d806:	9000      	str	r0, [sp, #0]
    d808:	4829      	ldr	r0, [pc, #164]	; (d8b0 <adc_set_positive_input+0xd4>)
    d80a:	9001      	str	r0, [sp, #4]
    d80c:	1c08      	adds	r0, r1, #0
    d80e:	2101      	movs	r1, #1
    d810:	4c28      	ldr	r4, [pc, #160]	; (d8b4 <adc_set_positive_input+0xd8>)
    d812:	47a0      	blx	r4
    d814:	e009      	b.n	d82a <adc_set_positive_input+0x4e>
    d816:	687b      	ldr	r3, [r7, #4]
    d818:	2b00      	cmp	r3, #0
    d81a:	d106      	bne.n	d82a <adc_set_positive_input+0x4e>
    d81c:	4826      	ldr	r0, [pc, #152]	; (d8b8 <adc_set_positive_input+0xdc>)
    d81e:	4924      	ldr	r1, [pc, #144]	; (d8b0 <adc_set_positive_input+0xd4>)
    d820:	4a20      	ldr	r2, [pc, #128]	; (d8a4 <adc_set_positive_input+0xc8>)
    d822:	4b21      	ldr	r3, [pc, #132]	; (d8a8 <adc_set_positive_input+0xcc>)
    d824:	4c25      	ldr	r4, [pc, #148]	; (d8bc <adc_set_positive_input+0xe0>)
    d826:	47a0      	blx	r4
    d828:	e7fe      	b.n	d828 <adc_set_positive_input+0x4c>
	Assert(module_inst->hw);
    d82a:	4b1d      	ldr	r3, [pc, #116]	; (d8a0 <adc_set_positive_input+0xc4>)
    d82c:	4798      	blx	r3
    d82e:	1c03      	adds	r3, r0, #0
    d830:	2b00      	cmp	r3, #0
    d832:	d011      	beq.n	d858 <adc_set_positive_input+0x7c>
    d834:	687b      	ldr	r3, [r7, #4]
    d836:	681b      	ldr	r3, [r3, #0]
    d838:	2b00      	cmp	r3, #0
    d83a:	d118      	bne.n	d86e <adc_set_positive_input+0x92>
    d83c:	4b18      	ldr	r3, [pc, #96]	; (d8a0 <adc_set_positive_input+0xc4>)
    d83e:	4798      	blx	r3
    d840:	1c01      	adds	r1, r0, #0
    d842:	4a18      	ldr	r2, [pc, #96]	; (d8a4 <adc_set_positive_input+0xc8>)
    d844:	4b1e      	ldr	r3, [pc, #120]	; (d8c0 <adc_set_positive_input+0xe4>)
    d846:	4819      	ldr	r0, [pc, #100]	; (d8ac <adc_set_positive_input+0xd0>)
    d848:	9000      	str	r0, [sp, #0]
    d84a:	481e      	ldr	r0, [pc, #120]	; (d8c4 <adc_set_positive_input+0xe8>)
    d84c:	9001      	str	r0, [sp, #4]
    d84e:	1c08      	adds	r0, r1, #0
    d850:	2101      	movs	r1, #1
    d852:	4c18      	ldr	r4, [pc, #96]	; (d8b4 <adc_set_positive_input+0xd8>)
    d854:	47a0      	blx	r4
    d856:	e00a      	b.n	d86e <adc_set_positive_input+0x92>
    d858:	687b      	ldr	r3, [r7, #4]
    d85a:	681b      	ldr	r3, [r3, #0]
    d85c:	2b00      	cmp	r3, #0
    d85e:	d106      	bne.n	d86e <adc_set_positive_input+0x92>
    d860:	4815      	ldr	r0, [pc, #84]	; (d8b8 <adc_set_positive_input+0xdc>)
    d862:	4918      	ldr	r1, [pc, #96]	; (d8c4 <adc_set_positive_input+0xe8>)
    d864:	4a0f      	ldr	r2, [pc, #60]	; (d8a4 <adc_set_positive_input+0xc8>)
    d866:	4b16      	ldr	r3, [pc, #88]	; (d8c0 <adc_set_positive_input+0xe4>)
    d868:	4c14      	ldr	r4, [pc, #80]	; (d8bc <adc_set_positive_input+0xe0>)
    d86a:	47a0      	blx	r4
    d86c:	e7fe      	b.n	d86c <adc_set_positive_input+0x90>

	Adc *const adc_module = module_inst->hw;
    d86e:	687b      	ldr	r3, [r7, #4]
    d870:	681b      	ldr	r3, [r3, #0]
    d872:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    d874:	46c0      	nop			; (mov r8, r8)
    d876:	687b      	ldr	r3, [r7, #4]
    d878:	1c18      	adds	r0, r3, #0
    d87a:	4b13      	ldr	r3, [pc, #76]	; (d8c8 <adc_set_positive_input+0xec>)
    d87c:	4798      	blx	r3
    d87e:	1c03      	adds	r3, r0, #0
    d880:	2b00      	cmp	r3, #0
    d882:	d1f8      	bne.n	d876 <adc_set_positive_input+0x9a>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    d884:	68fb      	ldr	r3, [r7, #12]
    d886:	691b      	ldr	r3, [r3, #16]
    d888:	221f      	movs	r2, #31
    d88a:	1c19      	adds	r1, r3, #0
    d88c:	4391      	bics	r1, r2
    d88e:	1c0a      	adds	r2, r1, #0
    d890:	1cfb      	adds	r3, r7, #3
    d892:	781b      	ldrb	r3, [r3, #0]
    d894:	431a      	orrs	r2, r3
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
    d896:	68fb      	ldr	r3, [r7, #12]
    d898:	611a      	str	r2, [r3, #16]
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
			(positive_input << ADC_INPUTCTRL_MUXPOS_Pos);
}
    d89a:	46bd      	mov	sp, r7
    d89c:	b005      	add	sp, #20
    d89e:	bd90      	pop	{r4, r7, pc}
    d8a0:	0000d02d 	.word	0x0000d02d
    d8a4:	00025564 	.word	0x00025564
    d8a8:	00000635 	.word	0x00000635
    d8ac:	00025518 	.word	0x00025518
    d8b0:	00025588 	.word	0x00025588
    d8b4:	000106e9 	.word	0x000106e9
    d8b8:	00025538 	.word	0x00025538
    d8bc:	0001b62d 	.word	0x0001b62d
    d8c0:	00000636 	.word	0x00000636
    d8c4:	00025594 	.word	0x00025594
    d8c8:	0000d421 	.word	0x0000d421

0000d8cc <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    d8cc:	b580      	push	{r7, lr}
    d8ce:	b082      	sub	sp, #8
    d8d0:	af00      	add	r7, sp, #0
    d8d2:	1c02      	adds	r2, r0, #0
    d8d4:	1dfb      	adds	r3, r7, #7
    d8d6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    d8d8:	1dfb      	adds	r3, r7, #7
    d8da:	781b      	ldrb	r3, [r3, #0]
    d8dc:	1c18      	adds	r0, r3, #0
    d8de:	4b03      	ldr	r3, [pc, #12]	; (d8ec <port_get_group_from_gpio_pin+0x20>)
    d8e0:	4798      	blx	r3
    d8e2:	1c03      	adds	r3, r0, #0
}
    d8e4:	1c18      	adds	r0, r3, #0
    d8e6:	46bd      	mov	sp, r7
    d8e8:	b002      	add	sp, #8
    d8ea:	bd80      	pop	{r7, pc}
    d8ec:	0000d0c1 	.word	0x0000d0c1

0000d8f0 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    d8f0:	b590      	push	{r4, r7, lr}
    d8f2:	b085      	sub	sp, #20
    d8f4:	af02      	add	r7, sp, #8
    d8f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
    d8f8:	4b15      	ldr	r3, [pc, #84]	; (d950 <port_get_config_defaults+0x60>)
    d8fa:	4798      	blx	r3
    d8fc:	1c03      	adds	r3, r0, #0
    d8fe:	2b00      	cmp	r3, #0
    d900:	d011      	beq.n	d926 <port_get_config_defaults+0x36>
    d902:	687b      	ldr	r3, [r7, #4]
    d904:	2b00      	cmp	r3, #0
    d906:	d119      	bne.n	d93c <port_get_config_defaults+0x4c>
    d908:	4b11      	ldr	r3, [pc, #68]	; (d950 <port_get_config_defaults+0x60>)
    d90a:	4798      	blx	r3
    d90c:	1c01      	adds	r1, r0, #0
    d90e:	4a11      	ldr	r2, [pc, #68]	; (d954 <port_get_config_defaults+0x64>)
    d910:	23ad      	movs	r3, #173	; 0xad
    d912:	005b      	lsls	r3, r3, #1
    d914:	4810      	ldr	r0, [pc, #64]	; (d958 <port_get_config_defaults+0x68>)
    d916:	9000      	str	r0, [sp, #0]
    d918:	4810      	ldr	r0, [pc, #64]	; (d95c <port_get_config_defaults+0x6c>)
    d91a:	9001      	str	r0, [sp, #4]
    d91c:	1c08      	adds	r0, r1, #0
    d91e:	2101      	movs	r1, #1
    d920:	4c0f      	ldr	r4, [pc, #60]	; (d960 <port_get_config_defaults+0x70>)
    d922:	47a0      	blx	r4
    d924:	e00a      	b.n	d93c <port_get_config_defaults+0x4c>
    d926:	687b      	ldr	r3, [r7, #4]
    d928:	2b00      	cmp	r3, #0
    d92a:	d107      	bne.n	d93c <port_get_config_defaults+0x4c>
    d92c:	480d      	ldr	r0, [pc, #52]	; (d964 <port_get_config_defaults+0x74>)
    d92e:	490b      	ldr	r1, [pc, #44]	; (d95c <port_get_config_defaults+0x6c>)
    d930:	4a08      	ldr	r2, [pc, #32]	; (d954 <port_get_config_defaults+0x64>)
    d932:	23ad      	movs	r3, #173	; 0xad
    d934:	005b      	lsls	r3, r3, #1
    d936:	4c0c      	ldr	r4, [pc, #48]	; (d968 <port_get_config_defaults+0x78>)
    d938:	47a0      	blx	r4
    d93a:	e7fe      	b.n	d93a <port_get_config_defaults+0x4a>

	/* Default configuration values */
	config->direction = PORT_PIN_DIR_INPUT;
    d93c:	687b      	ldr	r3, [r7, #4]
    d93e:	2200      	movs	r2, #0
    d940:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    d942:	687b      	ldr	r3, [r7, #4]
    d944:	2201      	movs	r2, #1
    d946:	705a      	strb	r2, [r3, #1]
}
    d948:	46bd      	mov	sp, r7
    d94a:	b003      	add	sp, #12
    d94c:	bd90      	pop	{r4, r7, pc}
    d94e:	46c0      	nop			; (mov r8, r8)
    d950:	0000d02d 	.word	0x0000d02d
    d954:	000255ac 	.word	0x000255ac
    d958:	00025518 	.word	0x00025518
    d95c:	00025530 	.word	0x00025530
    d960:	000106e9 	.word	0x000106e9
    d964:	00025538 	.word	0x00025538
    d968:	0001b62d 	.word	0x0001b62d

0000d96c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    d96c:	b580      	push	{r7, lr}
    d96e:	b084      	sub	sp, #16
    d970:	af00      	add	r7, sp, #0
    d972:	1c0a      	adds	r2, r1, #0
    d974:	1dfb      	adds	r3, r7, #7
    d976:	1c01      	adds	r1, r0, #0
    d978:	7019      	strb	r1, [r3, #0]
    d97a:	1dbb      	adds	r3, r7, #6
    d97c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    d97e:	1dfb      	adds	r3, r7, #7
    d980:	781b      	ldrb	r3, [r3, #0]
    d982:	1c18      	adds	r0, r3, #0
    d984:	4b0d      	ldr	r3, [pc, #52]	; (d9bc <port_pin_set_output_level+0x50>)
    d986:	4798      	blx	r3
    d988:	1c03      	adds	r3, r0, #0
    d98a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d98c:	1dfb      	adds	r3, r7, #7
    d98e:	781a      	ldrb	r2, [r3, #0]
    d990:	231f      	movs	r3, #31
    d992:	4013      	ands	r3, r2
    d994:	2201      	movs	r2, #1
    d996:	1c11      	adds	r1, r2, #0
    d998:	4099      	lsls	r1, r3
    d99a:	1c0b      	adds	r3, r1, #0
    d99c:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    d99e:	1dbb      	adds	r3, r7, #6
    d9a0:	781b      	ldrb	r3, [r3, #0]
    d9a2:	2b00      	cmp	r3, #0
    d9a4:	d003      	beq.n	d9ae <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    d9a6:	68fb      	ldr	r3, [r7, #12]
    d9a8:	68ba      	ldr	r2, [r7, #8]
    d9aa:	619a      	str	r2, [r3, #24]
    d9ac:	e002      	b.n	d9b4 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    d9ae:	68fb      	ldr	r3, [r7, #12]
    d9b0:	68ba      	ldr	r2, [r7, #8]
    d9b2:	615a      	str	r2, [r3, #20]
	}
}
    d9b4:	46bd      	mov	sp, r7
    d9b6:	b004      	add	sp, #16
    d9b8:	bd80      	pop	{r7, pc}
    d9ba:	46c0      	nop			; (mov r8, r8)
    d9bc:	0000d8cd 	.word	0x0000d8cd

0000d9c0 <tc_is_syncing>:
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    d9c0:	b590      	push	{r4, r7, lr}
    d9c2:	b087      	sub	sp, #28
    d9c4:	af02      	add	r7, sp, #8
    d9c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
    d9c8:	4b29      	ldr	r3, [pc, #164]	; (da70 <tc_is_syncing+0xb0>)
    d9ca:	4798      	blx	r3
    d9cc:	1c03      	adds	r3, r0, #0
    d9ce:	2b00      	cmp	r3, #0
    d9d0:	d010      	beq.n	d9f4 <tc_is_syncing+0x34>
    d9d2:	687b      	ldr	r3, [r7, #4]
    d9d4:	2b00      	cmp	r3, #0
    d9d6:	d117      	bne.n	da08 <tc_is_syncing+0x48>
    d9d8:	4b25      	ldr	r3, [pc, #148]	; (da70 <tc_is_syncing+0xb0>)
    d9da:	4798      	blx	r3
    d9dc:	1c01      	adds	r1, r0, #0
    d9de:	4a25      	ldr	r2, [pc, #148]	; (da74 <tc_is_syncing+0xb4>)
    d9e0:	4b25      	ldr	r3, [pc, #148]	; (da78 <tc_is_syncing+0xb8>)
    d9e2:	4826      	ldr	r0, [pc, #152]	; (da7c <tc_is_syncing+0xbc>)
    d9e4:	9000      	str	r0, [sp, #0]
    d9e6:	4826      	ldr	r0, [pc, #152]	; (da80 <tc_is_syncing+0xc0>)
    d9e8:	9001      	str	r0, [sp, #4]
    d9ea:	1c08      	adds	r0, r1, #0
    d9ec:	2101      	movs	r1, #1
    d9ee:	4c25      	ldr	r4, [pc, #148]	; (da84 <tc_is_syncing+0xc4>)
    d9f0:	47a0      	blx	r4
    d9f2:	e009      	b.n	da08 <tc_is_syncing+0x48>
    d9f4:	687b      	ldr	r3, [r7, #4]
    d9f6:	2b00      	cmp	r3, #0
    d9f8:	d106      	bne.n	da08 <tc_is_syncing+0x48>
    d9fa:	4823      	ldr	r0, [pc, #140]	; (da88 <tc_is_syncing+0xc8>)
    d9fc:	4920      	ldr	r1, [pc, #128]	; (da80 <tc_is_syncing+0xc0>)
    d9fe:	4a1d      	ldr	r2, [pc, #116]	; (da74 <tc_is_syncing+0xb4>)
    da00:	4b1d      	ldr	r3, [pc, #116]	; (da78 <tc_is_syncing+0xb8>)
    da02:	4c22      	ldr	r4, [pc, #136]	; (da8c <tc_is_syncing+0xcc>)
    da04:	47a0      	blx	r4
    da06:	e7fe      	b.n	da06 <tc_is_syncing+0x46>
	Assert(module_inst->hw);
    da08:	4b19      	ldr	r3, [pc, #100]	; (da70 <tc_is_syncing+0xb0>)
    da0a:	4798      	blx	r3
    da0c:	1c03      	adds	r3, r0, #0
    da0e:	2b00      	cmp	r3, #0
    da10:	d011      	beq.n	da36 <tc_is_syncing+0x76>
    da12:	687b      	ldr	r3, [r7, #4]
    da14:	681b      	ldr	r3, [r3, #0]
    da16:	2b00      	cmp	r3, #0
    da18:	d118      	bne.n	da4c <tc_is_syncing+0x8c>
    da1a:	4b15      	ldr	r3, [pc, #84]	; (da70 <tc_is_syncing+0xb0>)
    da1c:	4798      	blx	r3
    da1e:	1c01      	adds	r1, r0, #0
    da20:	4a14      	ldr	r2, [pc, #80]	; (da74 <tc_is_syncing+0xb4>)
    da22:	4b1b      	ldr	r3, [pc, #108]	; (da90 <tc_is_syncing+0xd0>)
    da24:	4815      	ldr	r0, [pc, #84]	; (da7c <tc_is_syncing+0xbc>)
    da26:	9000      	str	r0, [sp, #0]
    da28:	481a      	ldr	r0, [pc, #104]	; (da94 <tc_is_syncing+0xd4>)
    da2a:	9001      	str	r0, [sp, #4]
    da2c:	1c08      	adds	r0, r1, #0
    da2e:	2101      	movs	r1, #1
    da30:	4c14      	ldr	r4, [pc, #80]	; (da84 <tc_is_syncing+0xc4>)
    da32:	47a0      	blx	r4
    da34:	e00a      	b.n	da4c <tc_is_syncing+0x8c>
    da36:	687b      	ldr	r3, [r7, #4]
    da38:	681b      	ldr	r3, [r3, #0]
    da3a:	2b00      	cmp	r3, #0
    da3c:	d106      	bne.n	da4c <tc_is_syncing+0x8c>
    da3e:	4812      	ldr	r0, [pc, #72]	; (da88 <tc_is_syncing+0xc8>)
    da40:	4914      	ldr	r1, [pc, #80]	; (da94 <tc_is_syncing+0xd4>)
    da42:	4a0c      	ldr	r2, [pc, #48]	; (da74 <tc_is_syncing+0xb4>)
    da44:	4b12      	ldr	r3, [pc, #72]	; (da90 <tc_is_syncing+0xd0>)
    da46:	4c11      	ldr	r4, [pc, #68]	; (da8c <tc_is_syncing+0xcc>)
    da48:	47a0      	blx	r4
    da4a:	e7fe      	b.n	da4a <tc_is_syncing+0x8a>

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    da4c:	687b      	ldr	r3, [r7, #4]
    da4e:	681b      	ldr	r3, [r3, #0]
    da50:	60fb      	str	r3, [r7, #12]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    da52:	68fb      	ldr	r3, [r7, #12]
    da54:	89db      	ldrh	r3, [r3, #14]
    da56:	041b      	lsls	r3, r3, #16
    da58:	0e1b      	lsrs	r3, r3, #24
    da5a:	b2db      	uxtb	r3, r3
    da5c:	1c1a      	adds	r2, r3, #0
    da5e:	2380      	movs	r3, #128	; 0x80
    da60:	4013      	ands	r3, r2
    da62:	1e5a      	subs	r2, r3, #1
    da64:	4193      	sbcs	r3, r2
    da66:	b2db      	uxtb	r3, r3
}
    da68:	1c18      	adds	r0, r3, #0
    da6a:	46bd      	mov	sp, r7
    da6c:	b005      	add	sp, #20
    da6e:	bd90      	pop	{r4, r7, pc}
    da70:	0000d02d 	.word	0x0000d02d
    da74:	00025644 	.word	0x00025644
    da78:	0000033e 	.word	0x0000033e
    da7c:	00025518 	.word	0x00025518
    da80:	00025588 	.word	0x00025588
    da84:	000106e9 	.word	0x000106e9
    da88:	00025538 	.word	0x00025538
    da8c:	0001b62d 	.word	0x0001b62d
    da90:	0000033f 	.word	0x0000033f
    da94:	00025594 	.word	0x00025594

0000da98 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    da98:	b590      	push	{r4, r7, lr}
    da9a:	b087      	sub	sp, #28
    da9c:	af02      	add	r7, sp, #8
    da9e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
    daa0:	4b2b      	ldr	r3, [pc, #172]	; (db50 <tc_enable+0xb8>)
    daa2:	4798      	blx	r3
    daa4:	1c03      	adds	r3, r0, #0
    daa6:	2b00      	cmp	r3, #0
    daa8:	d010      	beq.n	dacc <tc_enable+0x34>
    daaa:	687b      	ldr	r3, [r7, #4]
    daac:	2b00      	cmp	r3, #0
    daae:	d117      	bne.n	dae0 <tc_enable+0x48>
    dab0:	4b27      	ldr	r3, [pc, #156]	; (db50 <tc_enable+0xb8>)
    dab2:	4798      	blx	r3
    dab4:	1c01      	adds	r1, r0, #0
    dab6:	4a27      	ldr	r2, [pc, #156]	; (db54 <tc_enable+0xbc>)
    dab8:	4b27      	ldr	r3, [pc, #156]	; (db58 <tc_enable+0xc0>)
    daba:	4828      	ldr	r0, [pc, #160]	; (db5c <tc_enable+0xc4>)
    dabc:	9000      	str	r0, [sp, #0]
    dabe:	4828      	ldr	r0, [pc, #160]	; (db60 <tc_enable+0xc8>)
    dac0:	9001      	str	r0, [sp, #4]
    dac2:	1c08      	adds	r0, r1, #0
    dac4:	2101      	movs	r1, #1
    dac6:	4c27      	ldr	r4, [pc, #156]	; (db64 <tc_enable+0xcc>)
    dac8:	47a0      	blx	r4
    daca:	e009      	b.n	dae0 <tc_enable+0x48>
    dacc:	687b      	ldr	r3, [r7, #4]
    dace:	2b00      	cmp	r3, #0
    dad0:	d106      	bne.n	dae0 <tc_enable+0x48>
    dad2:	4825      	ldr	r0, [pc, #148]	; (db68 <tc_enable+0xd0>)
    dad4:	4922      	ldr	r1, [pc, #136]	; (db60 <tc_enable+0xc8>)
    dad6:	4a1f      	ldr	r2, [pc, #124]	; (db54 <tc_enable+0xbc>)
    dad8:	4b1f      	ldr	r3, [pc, #124]	; (db58 <tc_enable+0xc0>)
    dada:	4c24      	ldr	r4, [pc, #144]	; (db6c <tc_enable+0xd4>)
    dadc:	47a0      	blx	r4
    dade:	e7fe      	b.n	dade <tc_enable+0x46>
	Assert(module_inst->hw);
    dae0:	4b1b      	ldr	r3, [pc, #108]	; (db50 <tc_enable+0xb8>)
    dae2:	4798      	blx	r3
    dae4:	1c03      	adds	r3, r0, #0
    dae6:	2b00      	cmp	r3, #0
    dae8:	d011      	beq.n	db0e <tc_enable+0x76>
    daea:	687b      	ldr	r3, [r7, #4]
    daec:	681b      	ldr	r3, [r3, #0]
    daee:	2b00      	cmp	r3, #0
    daf0:	d118      	bne.n	db24 <tc_enable+0x8c>
    daf2:	4b17      	ldr	r3, [pc, #92]	; (db50 <tc_enable+0xb8>)
    daf4:	4798      	blx	r3
    daf6:	1c01      	adds	r1, r0, #0
    daf8:	4a16      	ldr	r2, [pc, #88]	; (db54 <tc_enable+0xbc>)
    dafa:	4b1d      	ldr	r3, [pc, #116]	; (db70 <tc_enable+0xd8>)
    dafc:	4817      	ldr	r0, [pc, #92]	; (db5c <tc_enable+0xc4>)
    dafe:	9000      	str	r0, [sp, #0]
    db00:	481c      	ldr	r0, [pc, #112]	; (db74 <tc_enable+0xdc>)
    db02:	9001      	str	r0, [sp, #4]
    db04:	1c08      	adds	r0, r1, #0
    db06:	2101      	movs	r1, #1
    db08:	4c16      	ldr	r4, [pc, #88]	; (db64 <tc_enable+0xcc>)
    db0a:	47a0      	blx	r4
    db0c:	e00a      	b.n	db24 <tc_enable+0x8c>
    db0e:	687b      	ldr	r3, [r7, #4]
    db10:	681b      	ldr	r3, [r3, #0]
    db12:	2b00      	cmp	r3, #0
    db14:	d106      	bne.n	db24 <tc_enable+0x8c>
    db16:	4814      	ldr	r0, [pc, #80]	; (db68 <tc_enable+0xd0>)
    db18:	4916      	ldr	r1, [pc, #88]	; (db74 <tc_enable+0xdc>)
    db1a:	4a0e      	ldr	r2, [pc, #56]	; (db54 <tc_enable+0xbc>)
    db1c:	4b14      	ldr	r3, [pc, #80]	; (db70 <tc_enable+0xd8>)
    db1e:	4c13      	ldr	r4, [pc, #76]	; (db6c <tc_enable+0xd4>)
    db20:	47a0      	blx	r4
    db22:	e7fe      	b.n	db22 <tc_enable+0x8a>

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    db24:	687b      	ldr	r3, [r7, #4]
    db26:	681b      	ldr	r3, [r3, #0]
    db28:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    db2a:	46c0      	nop			; (mov r8, r8)
    db2c:	687b      	ldr	r3, [r7, #4]
    db2e:	1c18      	adds	r0, r3, #0
    db30:	4b11      	ldr	r3, [pc, #68]	; (db78 <tc_enable+0xe0>)
    db32:	4798      	blx	r3
    db34:	1c03      	adds	r3, r0, #0
    db36:	2b00      	cmp	r3, #0
    db38:	d1f8      	bne.n	db2c <tc_enable+0x94>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    db3a:	68fb      	ldr	r3, [r7, #12]
    db3c:	881b      	ldrh	r3, [r3, #0]
    db3e:	b29b      	uxth	r3, r3
    db40:	2202      	movs	r2, #2
    db42:	4313      	orrs	r3, r2
    db44:	b29a      	uxth	r2, r3
    db46:	68fb      	ldr	r3, [r7, #12]
    db48:	801a      	strh	r2, [r3, #0]
}
    db4a:	46bd      	mov	sp, r7
    db4c:	b005      	add	sp, #20
    db4e:	bd90      	pop	{r4, r7, pc}
    db50:	0000d02d 	.word	0x0000d02d
    db54:	00025644 	.word	0x00025644
    db58:	0000040e 	.word	0x0000040e
    db5c:	00025518 	.word	0x00025518
    db60:	00025588 	.word	0x00025588
    db64:	000106e9 	.word	0x000106e9
    db68:	00025538 	.word	0x00025538
    db6c:	0001b62d 	.word	0x0001b62d
    db70:	0000040f 	.word	0x0000040f
    db74:	00025594 	.word	0x00025594
    db78:	0000d9c1 	.word	0x0000d9c1

0000db7c <tc_disable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_disable(
		const struct tc_module *const module_inst)
{
    db7c:	b590      	push	{r4, r7, lr}
    db7e:	b087      	sub	sp, #28
    db80:	af02      	add	r7, sp, #8
    db82:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
    db84:	4b2c      	ldr	r3, [pc, #176]	; (dc38 <tc_disable+0xbc>)
    db86:	4798      	blx	r3
    db88:	1c03      	adds	r3, r0, #0
    db8a:	2b00      	cmp	r3, #0
    db8c:	d010      	beq.n	dbb0 <tc_disable+0x34>
    db8e:	687b      	ldr	r3, [r7, #4]
    db90:	2b00      	cmp	r3, #0
    db92:	d117      	bne.n	dbc4 <tc_disable+0x48>
    db94:	4b28      	ldr	r3, [pc, #160]	; (dc38 <tc_disable+0xbc>)
    db96:	4798      	blx	r3
    db98:	1c01      	adds	r1, r0, #0
    db9a:	4a28      	ldr	r2, [pc, #160]	; (dc3c <tc_disable+0xc0>)
    db9c:	4b28      	ldr	r3, [pc, #160]	; (dc40 <tc_disable+0xc4>)
    db9e:	4829      	ldr	r0, [pc, #164]	; (dc44 <tc_disable+0xc8>)
    dba0:	9000      	str	r0, [sp, #0]
    dba2:	4829      	ldr	r0, [pc, #164]	; (dc48 <tc_disable+0xcc>)
    dba4:	9001      	str	r0, [sp, #4]
    dba6:	1c08      	adds	r0, r1, #0
    dba8:	2101      	movs	r1, #1
    dbaa:	4c28      	ldr	r4, [pc, #160]	; (dc4c <tc_disable+0xd0>)
    dbac:	47a0      	blx	r4
    dbae:	e009      	b.n	dbc4 <tc_disable+0x48>
    dbb0:	687b      	ldr	r3, [r7, #4]
    dbb2:	2b00      	cmp	r3, #0
    dbb4:	d106      	bne.n	dbc4 <tc_disable+0x48>
    dbb6:	4826      	ldr	r0, [pc, #152]	; (dc50 <tc_disable+0xd4>)
    dbb8:	4923      	ldr	r1, [pc, #140]	; (dc48 <tc_disable+0xcc>)
    dbba:	4a20      	ldr	r2, [pc, #128]	; (dc3c <tc_disable+0xc0>)
    dbbc:	4b20      	ldr	r3, [pc, #128]	; (dc40 <tc_disable+0xc4>)
    dbbe:	4c25      	ldr	r4, [pc, #148]	; (dc54 <tc_disable+0xd8>)
    dbc0:	47a0      	blx	r4
    dbc2:	e7fe      	b.n	dbc2 <tc_disable+0x46>
	Assert(module_inst->hw);
    dbc4:	4b1c      	ldr	r3, [pc, #112]	; (dc38 <tc_disable+0xbc>)
    dbc6:	4798      	blx	r3
    dbc8:	1c03      	adds	r3, r0, #0
    dbca:	2b00      	cmp	r3, #0
    dbcc:	d012      	beq.n	dbf4 <tc_disable+0x78>
    dbce:	687b      	ldr	r3, [r7, #4]
    dbd0:	681b      	ldr	r3, [r3, #0]
    dbd2:	2b00      	cmp	r3, #0
    dbd4:	d11a      	bne.n	dc0c <tc_disable+0x90>
    dbd6:	4b18      	ldr	r3, [pc, #96]	; (dc38 <tc_disable+0xbc>)
    dbd8:	4798      	blx	r3
    dbda:	1c01      	adds	r1, r0, #0
    dbdc:	4a17      	ldr	r2, [pc, #92]	; (dc3c <tc_disable+0xc0>)
    dbde:	2385      	movs	r3, #133	; 0x85
    dbe0:	00db      	lsls	r3, r3, #3
    dbe2:	4818      	ldr	r0, [pc, #96]	; (dc44 <tc_disable+0xc8>)
    dbe4:	9000      	str	r0, [sp, #0]
    dbe6:	481c      	ldr	r0, [pc, #112]	; (dc58 <tc_disable+0xdc>)
    dbe8:	9001      	str	r0, [sp, #4]
    dbea:	1c08      	adds	r0, r1, #0
    dbec:	2101      	movs	r1, #1
    dbee:	4c17      	ldr	r4, [pc, #92]	; (dc4c <tc_disable+0xd0>)
    dbf0:	47a0      	blx	r4
    dbf2:	e00b      	b.n	dc0c <tc_disable+0x90>
    dbf4:	687b      	ldr	r3, [r7, #4]
    dbf6:	681b      	ldr	r3, [r3, #0]
    dbf8:	2b00      	cmp	r3, #0
    dbfa:	d107      	bne.n	dc0c <tc_disable+0x90>
    dbfc:	4814      	ldr	r0, [pc, #80]	; (dc50 <tc_disable+0xd4>)
    dbfe:	4916      	ldr	r1, [pc, #88]	; (dc58 <tc_disable+0xdc>)
    dc00:	4a0e      	ldr	r2, [pc, #56]	; (dc3c <tc_disable+0xc0>)
    dc02:	2385      	movs	r3, #133	; 0x85
    dc04:	00db      	lsls	r3, r3, #3
    dc06:	4c13      	ldr	r4, [pc, #76]	; (dc54 <tc_disable+0xd8>)
    dc08:	47a0      	blx	r4
    dc0a:	e7fe      	b.n	dc0a <tc_disable+0x8e>

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    dc0c:	687b      	ldr	r3, [r7, #4]
    dc0e:	681b      	ldr	r3, [r3, #0]
    dc10:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    dc12:	46c0      	nop			; (mov r8, r8)
    dc14:	687b      	ldr	r3, [r7, #4]
    dc16:	1c18      	adds	r0, r3, #0
    dc18:	4b10      	ldr	r3, [pc, #64]	; (dc5c <tc_disable+0xe0>)
    dc1a:	4798      	blx	r3
    dc1c:	1c03      	adds	r3, r0, #0
    dc1e:	2b00      	cmp	r3, #0
    dc20:	d1f8      	bne.n	dc14 <tc_disable+0x98>
		/* Wait for sync */
	}

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    dc22:	68fb      	ldr	r3, [r7, #12]
    dc24:	881b      	ldrh	r3, [r3, #0]
    dc26:	b29b      	uxth	r3, r3
    dc28:	2202      	movs	r2, #2
    dc2a:	4393      	bics	r3, r2
    dc2c:	b29a      	uxth	r2, r3
    dc2e:	68fb      	ldr	r3, [r7, #12]
    dc30:	801a      	strh	r2, [r3, #0]
}
    dc32:	46bd      	mov	sp, r7
    dc34:	b005      	add	sp, #20
    dc36:	bd90      	pop	{r4, r7, pc}
    dc38:	0000d02d 	.word	0x0000d02d
    dc3c:	00025644 	.word	0x00025644
    dc40:	00000427 	.word	0x00000427
    dc44:	00025518 	.word	0x00025518
    dc48:	00025588 	.word	0x00025588
    dc4c:	000106e9 	.word	0x000106e9
    dc50:	00025538 	.word	0x00025538
    dc54:	0001b62d 	.word	0x0001b62d
    dc58:	00025594 	.word	0x00025594
    dc5c:	0000d9c1 	.word	0x0000d9c1

0000dc60 <port_pin_set_output_level_EX>:
	float (*fControl[32])(float, bool, int);
	
	static inline bool port_pin_set_output_level_EX(
	const uint8_t gpio_pin,
	const int nLevel, const bool ManualOverride)
	{
    dc60:	b580      	push	{r7, lr}
    dc62:	b084      	sub	sp, #16
    dc64:	af00      	add	r7, sp, #0
    dc66:	6039      	str	r1, [r7, #0]
    dc68:	1dfb      	adds	r3, r7, #7
    dc6a:	1c01      	adds	r1, r0, #0
    dc6c:	7019      	strb	r1, [r3, #0]
    dc6e:	1dbb      	adds	r3, r7, #6
    dc70:	701a      	strb	r2, [r3, #0]
			  break;
		  }
*/			
		}
	
		if (!ManualOverride)
    dc72:	1dbb      	adds	r3, r7, #6
    dc74:	781b      	ldrb	r3, [r3, #0]
    dc76:	2201      	movs	r2, #1
    dc78:	4053      	eors	r3, r2
    dc7a:	b2db      	uxtb	r3, r3
    dc7c:	2b00      	cmp	r3, #0
    dc7e:	d00e      	beq.n	dc9e <port_pin_set_output_level_EX+0x3e>
		{
		  bool bLevel = (nLevel != 0);
    dc80:	1c3b      	adds	r3, r7, #0
    dc82:	330f      	adds	r3, #15
    dc84:	683a      	ldr	r2, [r7, #0]
    dc86:	1e51      	subs	r1, r2, #1
    dc88:	418a      	sbcs	r2, r1
    dc8a:	701a      	strb	r2, [r3, #0]
		  port_pin_set_output_level(gpio_pin, bLevel);
    dc8c:	1dfb      	adds	r3, r7, #7
    dc8e:	781a      	ldrb	r2, [r3, #0]
    dc90:	1c3b      	adds	r3, r7, #0
    dc92:	330f      	adds	r3, #15
    dc94:	781b      	ldrb	r3, [r3, #0]
    dc96:	1c10      	adds	r0, r2, #0
    dc98:	1c19      	adds	r1, r3, #0
    dc9a:	4b03      	ldr	r3, [pc, #12]	; (dca8 <port_pin_set_output_level_EX+0x48>)
    dc9c:	4798      	blx	r3
		}
		
		return true;
    dc9e:	2301      	movs	r3, #1
	}
    dca0:	1c18      	adds	r0, r3, #0
    dca2:	46bd      	mov	sp, r7
    dca4:	b004      	add	sp, #16
    dca6:	bd80      	pop	{r7, pc}
    dca8:	0000d96d 	.word	0x0000d96d

0000dcac <presentTimeInSec>:

/************************************************************************/
/* User Functions                                                       */
/************************************************************************/
uint32_t presentTimeInSec()
{
    dcac:	b580      	push	{r7, lr}
    dcae:	b082      	sub	sp, #8
    dcb0:	af00      	add	r7, sp, #0
	uint32_t seconds = 0;
    dcb2:	2300      	movs	r3, #0
    dcb4:	607b      	str	r3, [r7, #4]
	rtc_calendar_get_time(&currentTime);
    dcb6:	4b12      	ldr	r3, [pc, #72]	; (dd00 <presentTimeInSec+0x54>)
    dcb8:	1c18      	adds	r0, r3, #0
    dcba:	4b12      	ldr	r3, [pc, #72]	; (dd04 <presentTimeInSec+0x58>)
    dcbc:	4798      	blx	r3
	seconds = currentTime.day * 24 * 60 * 60;
    dcbe:	4b10      	ldr	r3, [pc, #64]	; (dd00 <presentTimeInSec+0x54>)
    dcc0:	791b      	ldrb	r3, [r3, #4]
    dcc2:	4a11      	ldr	r2, [pc, #68]	; (dd08 <presentTimeInSec+0x5c>)
    dcc4:	4353      	muls	r3, r2
    dcc6:	607b      	str	r3, [r7, #4]
	seconds += currentTime.hour * 60 * 60;
    dcc8:	4b0d      	ldr	r3, [pc, #52]	; (dd00 <presentTimeInSec+0x54>)
    dcca:	789b      	ldrb	r3, [r3, #2]
    dccc:	22e1      	movs	r2, #225	; 0xe1
    dcce:	0112      	lsls	r2, r2, #4
    dcd0:	4353      	muls	r3, r2
    dcd2:	687a      	ldr	r2, [r7, #4]
    dcd4:	18d3      	adds	r3, r2, r3
    dcd6:	607b      	str	r3, [r7, #4]
	seconds += currentTime.minute * 60;
    dcd8:	4b09      	ldr	r3, [pc, #36]	; (dd00 <presentTimeInSec+0x54>)
    dcda:	785b      	ldrb	r3, [r3, #1]
    dcdc:	1c1a      	adds	r2, r3, #0
    dcde:	1c13      	adds	r3, r2, #0
    dce0:	011b      	lsls	r3, r3, #4
    dce2:	1a9b      	subs	r3, r3, r2
    dce4:	009b      	lsls	r3, r3, #2
    dce6:	687a      	ldr	r2, [r7, #4]
    dce8:	18d3      	adds	r3, r2, r3
    dcea:	607b      	str	r3, [r7, #4]
	seconds += currentTime.second;
    dcec:	4b04      	ldr	r3, [pc, #16]	; (dd00 <presentTimeInSec+0x54>)
    dcee:	781b      	ldrb	r3, [r3, #0]
    dcf0:	687a      	ldr	r2, [r7, #4]
    dcf2:	18d3      	adds	r3, r2, r3
    dcf4:	607b      	str	r3, [r7, #4]
	return seconds;
    dcf6:	687b      	ldr	r3, [r7, #4]
}
    dcf8:	1c18      	adds	r0, r3, #0
    dcfa:	46bd      	mov	sp, r7
    dcfc:	b002      	add	sp, #8
    dcfe:	bd80      	pop	{r7, pc}
    dd00:	20000f68 	.word	0x20000f68
    dd04:	00012939 	.word	0x00012939
    dd08:	00015180 	.word	0x00015180

0000dd0c <updateTimeInSec>:

uint32_t updateTimeInSec(uint32_t last_time)
{
    dd0c:	b580      	push	{r7, lr}
    dd0e:	b084      	sub	sp, #16
    dd10:	af00      	add	r7, sp, #0
    dd12:	6078      	str	r0, [r7, #4]
	uint32_t present_time = 0;
    dd14:	2300      	movs	r3, #0
    dd16:	60bb      	str	r3, [r7, #8]
	uint32_t ntime = 0;
    dd18:	2300      	movs	r3, #0
    dd1a:	60fb      	str	r3, [r7, #12]
	
	present_time = presentTimeInSec();
    dd1c:	4b09      	ldr	r3, [pc, #36]	; (dd44 <updateTimeInSec+0x38>)
    dd1e:	4798      	blx	r3
    dd20:	1c03      	adds	r3, r0, #0
    dd22:	60bb      	str	r3, [r7, #8]
	if (present_time >= last_time)
    dd24:	68ba      	ldr	r2, [r7, #8]
    dd26:	687b      	ldr	r3, [r7, #4]
    dd28:	429a      	cmp	r2, r3
    dd2a:	d304      	bcc.n	dd36 <updateTimeInSec+0x2a>
	{
		ntime = present_time - last_time;
    dd2c:	68ba      	ldr	r2, [r7, #8]
    dd2e:	687b      	ldr	r3, [r7, #4]
    dd30:	1ad3      	subs	r3, r2, r3
    dd32:	60fb      	str	r3, [r7, #12]
    dd34:	e001      	b.n	dd3a <updateTimeInSec+0x2e>
	}
	else
	{
		ntime = present_time;
    dd36:	68bb      	ldr	r3, [r7, #8]
    dd38:	60fb      	str	r3, [r7, #12]
	}	
	
	return ntime;
    dd3a:	68fb      	ldr	r3, [r7, #12]
}
    dd3c:	1c18      	adds	r0, r3, #0
    dd3e:	46bd      	mov	sp, r7
    dd40:	b004      	add	sp, #16
    dd42:	bd80      	pop	{r7, pc}
    dd44:	0000dcad 	.word	0x0000dcad

0000dd48 <read_adc_pin>:

// brief read a single-ended ADC pin
// reads ADC pin using average mode
// param ADC pin to be read.
uint16_t read_adc_pin(uint8_t pin)
{	
    dd48:	b580      	push	{r7, lr}
    dd4a:	b086      	sub	sp, #24
    dd4c:	af00      	add	r7, sp, #0
    dd4e:	1c02      	adds	r2, r0, #0
    dd50:	1dfb      	adds	r3, r7, #7
    dd52:	701a      	strb	r2, [r3, #0]
	uint16_t adc_result = 0;
    dd54:	1c3b      	adds	r3, r7, #0
    dd56:	330e      	adds	r3, #14
    dd58:	2200      	movs	r2, #0
    dd5a:	801a      	strh	r2, [r3, #0]
	uint32_t adc_avg = 0;
    dd5c:	2300      	movs	r3, #0
    dd5e:	617b      	str	r3, [r7, #20]
	
	adc_set_positive_input(&adc_inst, pin);
    dd60:	4a19      	ldr	r2, [pc, #100]	; (ddc8 <read_adc_pin+0x80>)
    dd62:	1dfb      	adds	r3, r7, #7
    dd64:	781b      	ldrb	r3, [r3, #0]
    dd66:	1c10      	adds	r0, r2, #0
    dd68:	1c19      	adds	r1, r3, #0
    dd6a:	4b18      	ldr	r3, [pc, #96]	; (ddcc <read_adc_pin+0x84>)
    dd6c:	4798      	blx	r3
	delay_ms(1);
    dd6e:	2001      	movs	r0, #1
    dd70:	4b17      	ldr	r3, [pc, #92]	; (ddd0 <read_adc_pin+0x88>)
    dd72:	4798      	blx	r3

	for (int n=0; n<16; n++)
    dd74:	2300      	movs	r3, #0
    dd76:	613b      	str	r3, [r7, #16]
    dd78:	e01a      	b.n	ddb0 <read_adc_pin+0x68>
	{
		/* Start an ADC conversion */
		adc_start_conversion(&adc_inst);
    dd7a:	4b13      	ldr	r3, [pc, #76]	; (ddc8 <read_adc_pin+0x80>)
    dd7c:	1c18      	adds	r0, r3, #0
    dd7e:	4b15      	ldr	r3, [pc, #84]	; (ddd4 <read_adc_pin+0x8c>)
    dd80:	4798      	blx	r3
		while (adc_read(&adc_inst, &adc_result) != STATUS_OK) {
    dd82:	46c0      	nop			; (mov r8, r8)
    dd84:	4a10      	ldr	r2, [pc, #64]	; (ddc8 <read_adc_pin+0x80>)
    dd86:	1c3b      	adds	r3, r7, #0
    dd88:	330e      	adds	r3, #14
    dd8a:	1c10      	adds	r0, r2, #0
    dd8c:	1c19      	adds	r1, r3, #0
    dd8e:	4b12      	ldr	r3, [pc, #72]	; (ddd8 <read_adc_pin+0x90>)
    dd90:	4798      	blx	r3
    dd92:	1c03      	adds	r3, r0, #0
    dd94:	2b00      	cmp	r3, #0
    dd96:	d1f5      	bne.n	dd84 <read_adc_pin+0x3c>
		}
		//adc_result = adc_result >> 4;
		delay_ms(1);
    dd98:	2001      	movs	r0, #1
    dd9a:	4b0d      	ldr	r3, [pc, #52]	; (ddd0 <read_adc_pin+0x88>)
    dd9c:	4798      	blx	r3
		adc_avg += adc_result;
    dd9e:	1c3b      	adds	r3, r7, #0
    dda0:	330e      	adds	r3, #14
    dda2:	881b      	ldrh	r3, [r3, #0]
    dda4:	697a      	ldr	r2, [r7, #20]
    dda6:	18d3      	adds	r3, r2, r3
    dda8:	617b      	str	r3, [r7, #20]
	uint32_t adc_avg = 0;
	
	adc_set_positive_input(&adc_inst, pin);
	delay_ms(1);

	for (int n=0; n<16; n++)
    ddaa:	693b      	ldr	r3, [r7, #16]
    ddac:	3301      	adds	r3, #1
    ddae:	613b      	str	r3, [r7, #16]
    ddb0:	693b      	ldr	r3, [r7, #16]
    ddb2:	2b0f      	cmp	r3, #15
    ddb4:	dde1      	ble.n	dd7a <read_adc_pin+0x32>
		}
		//adc_result = adc_result >> 4;
		delay_ms(1);
		adc_avg += adc_result;
	}
	adc_avg /= 16;
    ddb6:	697b      	ldr	r3, [r7, #20]
    ddb8:	091b      	lsrs	r3, r3, #4
    ddba:	617b      	str	r3, [r7, #20]
	
	return (uint16_t)adc_avg;
    ddbc:	697b      	ldr	r3, [r7, #20]
    ddbe:	b29b      	uxth	r3, r3
}
    ddc0:	1c18      	adds	r0, r3, #0
    ddc2:	46bd      	mov	sp, r7
    ddc4:	b006      	add	sp, #24
    ddc6:	bd80      	pop	{r7, pc}
    ddc8:	200011a8 	.word	0x200011a8
    ddcc:	0000d7dd 	.word	0x0000d7dd
    ddd0:	000105b1 	.word	0x000105b1
    ddd4:	0000d5a5 	.word	0x0000d5a5
    ddd8:	0000d689 	.word	0x0000d689
    dddc:	00000000 	.word	0x00000000

0000dde0 <readSensors>:

void readSensors(void)
{
    dde0:	b5f0      	push	{r4, r5, r6, r7, lr}
    dde2:	b083      	sub	sp, #12
    dde4:	af00      	add	r7, sp, #0
    float tempVal = 0;
    dde6:	2300      	movs	r3, #0
    dde8:	607b      	str	r3, [r7, #4]
	/////////////////////////////////////
	// standby voltage (VCC)
	/////////////////////////////////////
	// Avref may decrease when operating on battery power
	// correction factor must be used to get accurate adc readings
	adc_disable(&adc_inst);
    ddea:	4bed      	ldr	r3, [pc, #948]	; (e1a0 <readSensors+0x3c0>)
    ddec:	1c18      	adds	r0, r3, #0
    ddee:	4bed      	ldr	r3, [pc, #948]	; (e1a4 <readSensors+0x3c4>)
    ddf0:	4798      	blx	r3
	configure_adc(ADC_REFERENCE_INT1V);
    ddf2:	2000      	movs	r0, #0
    ddf4:	4bec      	ldr	r3, [pc, #944]	; (e1a8 <readSensors+0x3c8>)
    ddf6:	4798      	blx	r3
	tempVal = read_adc_pin(ADC_POSITIVE_INPUT_SCALEDIOVCC);	// 0.25*ADC supply voltage
    ddf8:	201b      	movs	r0, #27
    ddfa:	4bec      	ldr	r3, [pc, #944]	; (e1ac <readSensors+0x3cc>)
    ddfc:	4798      	blx	r3
    ddfe:	1c03      	adds	r3, r0, #0
    de00:	1c1a      	adds	r2, r3, #0
    de02:	4beb      	ldr	r3, [pc, #940]	; (e1b0 <readSensors+0x3d0>)
    de04:	1c10      	adds	r0, r2, #0
    de06:	4798      	blx	r3
    de08:	1c03      	adds	r3, r0, #0
    de0a:	607b      	str	r3, [r7, #4]
	tempVal *= VCCMON_SCALING_FACTOR;
    de0c:	4be9      	ldr	r3, [pc, #932]	; (e1b4 <readSensors+0x3d4>)
    de0e:	6878      	ldr	r0, [r7, #4]
    de10:	4798      	blx	r3
    de12:	1c03      	adds	r3, r0, #0
    de14:	1c0c      	adds	r4, r1, #0
    de16:	4de8      	ldr	r5, [pc, #928]	; (e1b8 <readSensors+0x3d8>)
    de18:	1c18      	adds	r0, r3, #0
    de1a:	1c21      	adds	r1, r4, #0
    de1c:	4bd9      	ldr	r3, [pc, #868]	; (e184 <readSensors+0x3a4>)
    de1e:	4ad8      	ldr	r2, [pc, #864]	; (e180 <readSensors+0x3a0>)
    de20:	47a8      	blx	r5
    de22:	1c03      	adds	r3, r0, #0
    de24:	1c0c      	adds	r4, r1, #0
    de26:	4ae5      	ldr	r2, [pc, #916]	; (e1bc <readSensors+0x3dc>)
    de28:	1c18      	adds	r0, r3, #0
    de2a:	1c21      	adds	r1, r4, #0
    de2c:	4790      	blx	r2
    de2e:	1c03      	adds	r3, r0, #0
    de30:	607b      	str	r3, [r7, #4]
	adc_disable(&adc_inst);
    de32:	4bdb      	ldr	r3, [pc, #876]	; (e1a0 <readSensors+0x3c0>)
    de34:	1c18      	adds	r0, r3, #0
    de36:	4bdb      	ldr	r3, [pc, #876]	; (e1a4 <readSensors+0x3c4>)
    de38:	4798      	blx	r3
	configure_adc(ADC_REF_VOLTAGE);
    de3a:	2003      	movs	r0, #3
    de3c:	4bda      	ldr	r3, [pc, #872]	; (e1a8 <readSensors+0x3c8>)
    de3e:	4798      	blx	r3
		VccErrorCount = 0;
	}
	*/
	
	// reduce granularity of standby voltage
	if (tempVal > 0.0)
    de40:	4bdf      	ldr	r3, [pc, #892]	; (e1c0 <readSensors+0x3e0>)
    de42:	6878      	ldr	r0, [r7, #4]
    de44:	2100      	movs	r1, #0
    de46:	4798      	blx	r3
    de48:	1c03      	adds	r3, r0, #0
    de4a:	2b00      	cmp	r3, #0
    de4c:	d024      	beq.n	de98 <readSensors+0xb8>
	{
		tempVal = ( round(tempVal * 100.0) / 100 );
    de4e:	4bd9      	ldr	r3, [pc, #868]	; (e1b4 <readSensors+0x3d4>)
    de50:	6878      	ldr	r0, [r7, #4]
    de52:	4798      	blx	r3
    de54:	1c03      	adds	r3, r0, #0
    de56:	1c0c      	adds	r4, r1, #0
    de58:	4dd7      	ldr	r5, [pc, #860]	; (e1b8 <readSensors+0x3d8>)
    de5a:	1c18      	adds	r0, r3, #0
    de5c:	1c21      	adds	r1, r4, #0
    de5e:	4aca      	ldr	r2, [pc, #808]	; (e188 <readSensors+0x3a8>)
    de60:	4bca      	ldr	r3, [pc, #808]	; (e18c <readSensors+0x3ac>)
    de62:	47a8      	blx	r5
    de64:	1c03      	adds	r3, r0, #0
    de66:	1c0c      	adds	r4, r1, #0
    de68:	1c18      	adds	r0, r3, #0
    de6a:	1c21      	adds	r1, r4, #0
    de6c:	4bd5      	ldr	r3, [pc, #852]	; (e1c4 <readSensors+0x3e4>)
    de6e:	4798      	blx	r3
    de70:	1c03      	adds	r3, r0, #0
    de72:	1c0c      	adds	r4, r1, #0
    de74:	4dd4      	ldr	r5, [pc, #848]	; (e1c8 <readSensors+0x3e8>)
    de76:	1c18      	adds	r0, r3, #0
    de78:	1c21      	adds	r1, r4, #0
    de7a:	4ac3      	ldr	r2, [pc, #780]	; (e188 <readSensors+0x3a8>)
    de7c:	4bc3      	ldr	r3, [pc, #780]	; (e18c <readSensors+0x3ac>)
    de7e:	47a8      	blx	r5
    de80:	1c03      	adds	r3, r0, #0
    de82:	1c0c      	adds	r4, r1, #0
    de84:	4acd      	ldr	r2, [pc, #820]	; (e1bc <readSensors+0x3dc>)
    de86:	1c18      	adds	r0, r3, #0
    de88:	1c21      	adds	r1, r4, #0
    de8a:	4790      	blx	r2
    de8c:	1c03      	adds	r3, r0, #0
    de8e:	607b      	str	r3, [r7, #4]
		ps1.standbyVoltage = tempVal;
    de90:	4bce      	ldr	r3, [pc, #824]	; (e1cc <readSensors+0x3ec>)
    de92:	687a      	ldr	r2, [r7, #4]
    de94:	645a      	str	r2, [r3, #68]	; 0x44
    de96:	e002      	b.n	de9e <readSensors+0xbe>
	}
	else
	{
		ps1.standbyVoltage = 0;
    de98:	4bcc      	ldr	r3, [pc, #816]	; (e1cc <readSensors+0x3ec>)
    de9a:	2200      	movs	r2, #0
    de9c:	645a      	str	r2, [r3, #68]	; 0x44
	// DEGUB !!!!!!!!!!!!!

	/////////////////////////////////////
	// temperatures
	/////////////////////////////////////		
	if (!enableTempOverride)
    de9e:	4bcc      	ldr	r3, [pc, #816]	; (e1d0 <readSensors+0x3f0>)
    dea0:	781b      	ldrb	r3, [r3, #0]
    dea2:	2201      	movs	r2, #1
    dea4:	4053      	eors	r3, r2
    dea6:	b2db      	uxtb	r3, r3
    dea8:	2b00      	cmp	r3, #0
    deaa:	d100      	bne.n	deae <readSensors+0xce>
    deac:	e0a1      	b.n	dff2 <readSensors+0x212>
    {
		tempVal = read_adc_pin(PIN_TCHA1);
    deae:	2008      	movs	r0, #8
    deb0:	4bbe      	ldr	r3, [pc, #760]	; (e1ac <readSensors+0x3cc>)
    deb2:	4798      	blx	r3
    deb4:	1c03      	adds	r3, r0, #0
    deb6:	1c1a      	adds	r2, r3, #0
    deb8:	4bbd      	ldr	r3, [pc, #756]	; (e1b0 <readSensors+0x3d0>)
    deba:	1c10      	adds	r0, r2, #0
    debc:	4798      	blx	r3
    debe:	1c03      	adds	r3, r0, #0
    dec0:	607b      	str	r3, [r7, #4]
		tempVal = ADCtoTemperature(tempVal, chamberThermistorBeta);
    dec2:	4bc4      	ldr	r3, [pc, #784]	; (e1d4 <readSensors+0x3f4>)
    dec4:	881b      	ldrh	r3, [r3, #0]
    dec6:	687a      	ldr	r2, [r7, #4]
    dec8:	1c10      	adds	r0, r2, #0
    deca:	1c19      	adds	r1, r3, #0
    decc:	4bc2      	ldr	r3, [pc, #776]	; (e1d8 <readSensors+0x3f8>)
    dece:	4798      	blx	r3
    ded0:	1c03      	adds	r3, r0, #0
    ded2:	607b      	str	r3, [r7, #4]
		chamber1.chamberTempRaw = tempVal;
    ded4:	4bc1      	ldr	r3, [pc, #772]	; (e1dc <readSensors+0x3fc>)
    ded6:	687a      	ldr	r2, [r7, #4]
    ded8:	609a      	str	r2, [r3, #8]
		tempVal = tempVal + chamber1.chamberOffset;
    deda:	4bc0      	ldr	r3, [pc, #768]	; (e1dc <readSensors+0x3fc>)
    dedc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    dede:	4bc0      	ldr	r3, [pc, #768]	; (e1e0 <readSensors+0x400>)
    dee0:	6878      	ldr	r0, [r7, #4]
    dee2:	1c11      	adds	r1, r2, #0
    dee4:	4798      	blx	r3
    dee6:	1c03      	adds	r3, r0, #0
    dee8:	607b      	str	r3, [r7, #4]
		chamber1.chamberTemp = tempVal;
    deea:	4bbc      	ldr	r3, [pc, #752]	; (e1dc <readSensors+0x3fc>)
    deec:	687a      	ldr	r2, [r7, #4]
    deee:	605a      	str	r2, [r3, #4]
		
		tempVal = read_adc_pin(PIN_TCHA2);
    def0:	2012      	movs	r0, #18
    def2:	4bae      	ldr	r3, [pc, #696]	; (e1ac <readSensors+0x3cc>)
    def4:	4798      	blx	r3
    def6:	1c03      	adds	r3, r0, #0
    def8:	1c1a      	adds	r2, r3, #0
    defa:	4bad      	ldr	r3, [pc, #692]	; (e1b0 <readSensors+0x3d0>)
    defc:	1c10      	adds	r0, r2, #0
    defe:	4798      	blx	r3
    df00:	1c03      	adds	r3, r0, #0
    df02:	607b      	str	r3, [r7, #4]
		tempVal = ADCtoTemperature(tempVal, chamberThermistorBeta);
    df04:	4bb3      	ldr	r3, [pc, #716]	; (e1d4 <readSensors+0x3f4>)
    df06:	881b      	ldrh	r3, [r3, #0]
    df08:	687a      	ldr	r2, [r7, #4]
    df0a:	1c10      	adds	r0, r2, #0
    df0c:	1c19      	adds	r1, r3, #0
    df0e:	4bb2      	ldr	r3, [pc, #712]	; (e1d8 <readSensors+0x3f8>)
    df10:	4798      	blx	r3
    df12:	1c03      	adds	r3, r0, #0
    df14:	607b      	str	r3, [r7, #4]
		chamber2.chamberTempRaw = tempVal;		
    df16:	4bb3      	ldr	r3, [pc, #716]	; (e1e4 <readSensors+0x404>)
    df18:	687a      	ldr	r2, [r7, #4]
    df1a:	609a      	str	r2, [r3, #8]
		tempVal = tempVal + chamber2.chamberOffset;
    df1c:	4bb1      	ldr	r3, [pc, #708]	; (e1e4 <readSensors+0x404>)
    df1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    df20:	4baf      	ldr	r3, [pc, #700]	; (e1e0 <readSensors+0x400>)
    df22:	6878      	ldr	r0, [r7, #4]
    df24:	1c11      	adds	r1, r2, #0
    df26:	4798      	blx	r3
    df28:	1c03      	adds	r3, r0, #0
    df2a:	607b      	str	r3, [r7, #4]
		chamber2.chamberTemp = tempVal;
    df2c:	4bad      	ldr	r3, [pc, #692]	; (e1e4 <readSensors+0x404>)
    df2e:	687a      	ldr	r2, [r7, #4]
    df30:	605a      	str	r2, [r3, #4]
				
		tempVal = read_adc_pin(PIN_TGLYC1);
    df32:	200c      	movs	r0, #12
    df34:	4b9d      	ldr	r3, [pc, #628]	; (e1ac <readSensors+0x3cc>)
    df36:	4798      	blx	r3
    df38:	1c03      	adds	r3, r0, #0
    df3a:	1c1a      	adds	r2, r3, #0
    df3c:	4b9c      	ldr	r3, [pc, #624]	; (e1b0 <readSensors+0x3d0>)
    df3e:	1c10      	adds	r0, r2, #0
    df40:	4798      	blx	r3
    df42:	1c03      	adds	r3, r0, #0
    df44:	607b      	str	r3, [r7, #4]
		tempVal = ADCtoTemperature(tempVal, BCOEFFICIENT_TGLYCOL);
    df46:	687a      	ldr	r2, [r7, #4]
    df48:	23f4      	movs	r3, #244	; 0xf4
    df4a:	011b      	lsls	r3, r3, #4
    df4c:	1c10      	adds	r0, r2, #0
    df4e:	1c19      	adds	r1, r3, #0
    df50:	4ba1      	ldr	r3, [pc, #644]	; (e1d8 <readSensors+0x3f8>)
    df52:	4798      	blx	r3
    df54:	1c03      	adds	r3, r0, #0
    df56:	607b      	str	r3, [r7, #4]
		tempVal = tempVal + chamber1.glycolOffset;
    df58:	4ba0      	ldr	r3, [pc, #640]	; (e1dc <readSensors+0x3fc>)
    df5a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    df5c:	4ba0      	ldr	r3, [pc, #640]	; (e1e0 <readSensors+0x400>)
    df5e:	6878      	ldr	r0, [r7, #4]
    df60:	1c11      	adds	r1, r2, #0
    df62:	4798      	blx	r3
    df64:	1c03      	adds	r3, r0, #0
    df66:	607b      	str	r3, [r7, #4]
		chamber1.glycolTemp = tempVal;
    df68:	4b9c      	ldr	r3, [pc, #624]	; (e1dc <readSensors+0x3fc>)
    df6a:	687a      	ldr	r2, [r7, #4]
    df6c:	651a      	str	r2, [r3, #80]	; 0x50
		
		tempVal = read_adc_pin(PIN_TREJ1);
    df6e:	2009      	movs	r0, #9
    df70:	4b8e      	ldr	r3, [pc, #568]	; (e1ac <readSensors+0x3cc>)
    df72:	4798      	blx	r3
    df74:	1c03      	adds	r3, r0, #0
    df76:	1c1a      	adds	r2, r3, #0
    df78:	4b8d      	ldr	r3, [pc, #564]	; (e1b0 <readSensors+0x3d0>)
    df7a:	1c10      	adds	r0, r2, #0
    df7c:	4798      	blx	r3
    df7e:	1c03      	adds	r3, r0, #0
    df80:	607b      	str	r3, [r7, #4]
		tempVal = ADCtoTemperature(tempVal, rejectThermistorBeta);
    df82:	4b99      	ldr	r3, [pc, #612]	; (e1e8 <readSensors+0x408>)
    df84:	881b      	ldrh	r3, [r3, #0]
    df86:	687a      	ldr	r2, [r7, #4]
    df88:	1c10      	adds	r0, r2, #0
    df8a:	1c19      	adds	r1, r3, #0
    df8c:	4b92      	ldr	r3, [pc, #584]	; (e1d8 <readSensors+0x3f8>)
    df8e:	4798      	blx	r3
    df90:	1c03      	adds	r3, r0, #0
    df92:	607b      	str	r3, [r7, #4]
		chamber1.rejectTemp = tempVal;
    df94:	4b91      	ldr	r3, [pc, #580]	; (e1dc <readSensors+0x3fc>)
    df96:	687a      	ldr	r2, [r7, #4]
    df98:	60da      	str	r2, [r3, #12]
		
		tempVal = read_adc_pin(PIN_TREJ2);
    df9a:	2013      	movs	r0, #19
    df9c:	4b83      	ldr	r3, [pc, #524]	; (e1ac <readSensors+0x3cc>)
    df9e:	4798      	blx	r3
    dfa0:	1c03      	adds	r3, r0, #0
    dfa2:	1c1a      	adds	r2, r3, #0
    dfa4:	4b82      	ldr	r3, [pc, #520]	; (e1b0 <readSensors+0x3d0>)
    dfa6:	1c10      	adds	r0, r2, #0
    dfa8:	4798      	blx	r3
    dfaa:	1c03      	adds	r3, r0, #0
    dfac:	607b      	str	r3, [r7, #4]
		tempVal = ADCtoTemperature(tempVal, rejectThermistorBeta);
    dfae:	4b8e      	ldr	r3, [pc, #568]	; (e1e8 <readSensors+0x408>)
    dfb0:	881b      	ldrh	r3, [r3, #0]
    dfb2:	687a      	ldr	r2, [r7, #4]
    dfb4:	1c10      	adds	r0, r2, #0
    dfb6:	1c19      	adds	r1, r3, #0
    dfb8:	4b87      	ldr	r3, [pc, #540]	; (e1d8 <readSensors+0x3f8>)
    dfba:	4798      	blx	r3
    dfbc:	1c03      	adds	r3, r0, #0
    dfbe:	607b      	str	r3, [r7, #4]
		chamber2.rejectTemp = tempVal;
    dfc0:	4b88      	ldr	r3, [pc, #544]	; (e1e4 <readSensors+0x404>)
    dfc2:	687a      	ldr	r2, [r7, #4]
    dfc4:	60da      	str	r2, [r3, #12]
		
		tempVal = read_adc_pin(PIN_COLD2_SNS);
    dfc6:	2002      	movs	r0, #2
    dfc8:	4b78      	ldr	r3, [pc, #480]	; (e1ac <readSensors+0x3cc>)
    dfca:	4798      	blx	r3
    dfcc:	1c03      	adds	r3, r0, #0
    dfce:	1c1a      	adds	r2, r3, #0
    dfd0:	4b77      	ldr	r3, [pc, #476]	; (e1b0 <readSensors+0x3d0>)
    dfd2:	1c10      	adds	r0, r2, #0
    dfd4:	4798      	blx	r3
    dfd6:	1c03      	adds	r3, r0, #0
    dfd8:	607b      	str	r3, [r7, #4]
		tempVal = ADCtoTemperature(tempVal, rejectThermistorBeta);
    dfda:	4b83      	ldr	r3, [pc, #524]	; (e1e8 <readSensors+0x408>)
    dfdc:	881b      	ldrh	r3, [r3, #0]
    dfde:	687a      	ldr	r2, [r7, #4]
    dfe0:	1c10      	adds	r0, r2, #0
    dfe2:	1c19      	adds	r1, r3, #0
    dfe4:	4b7c      	ldr	r3, [pc, #496]	; (e1d8 <readSensors+0x3f8>)
    dfe6:	4798      	blx	r3
    dfe8:	1c03      	adds	r3, r0, #0
    dfea:	607b      	str	r3, [r7, #4]
		condensateTemp = tempVal;			
    dfec:	4b7f      	ldr	r3, [pc, #508]	; (e1ec <readSensors+0x40c>)
    dfee:	687a      	ldr	r2, [r7, #4]
    dff0:	601a      	str	r2, [r3, #0]
    }	

	/////////////////////////////////////
	// php/output voltage
	/////////////////////////////////////
    tempVal = read_adc_pin(PIN_VPHP1);
    dff2:	200a      	movs	r0, #10
    dff4:	4b6d      	ldr	r3, [pc, #436]	; (e1ac <readSensors+0x3cc>)
    dff6:	4798      	blx	r3
    dff8:	1c03      	adds	r3, r0, #0
    dffa:	1c1a      	adds	r2, r3, #0
    dffc:	4b6c      	ldr	r3, [pc, #432]	; (e1b0 <readSensors+0x3d0>)
    dffe:	1c10      	adds	r0, r2, #0
    e000:	4798      	blx	r3
    e002:	1c03      	adds	r3, r0, #0
    e004:	607b      	str	r3, [r7, #4]
	tempVal += 30;
    e006:	4b76      	ldr	r3, [pc, #472]	; (e1e0 <readSensors+0x400>)
    e008:	6878      	ldr	r0, [r7, #4]
    e00a:	4979      	ldr	r1, [pc, #484]	; (e1f0 <readSensors+0x410>)
    e00c:	4798      	blx	r3
    e00e:	1c03      	adds	r3, r0, #0
    e010:	607b      	str	r3, [r7, #4]
	tempVal = tempVal * VTEC_SCALING_FACTOR * ps1.standbyVoltage;
    e012:	4b68      	ldr	r3, [pc, #416]	; (e1b4 <readSensors+0x3d4>)
    e014:	6878      	ldr	r0, [r7, #4]
    e016:	4798      	blx	r3
    e018:	1c03      	adds	r3, r0, #0
    e01a:	1c0c      	adds	r4, r1, #0
    e01c:	4d66      	ldr	r5, [pc, #408]	; (e1b8 <readSensors+0x3d8>)
    e01e:	1c18      	adds	r0, r3, #0
    e020:	1c21      	adds	r1, r4, #0
    e022:	4a5b      	ldr	r2, [pc, #364]	; (e190 <readSensors+0x3b0>)
    e024:	4b5b      	ldr	r3, [pc, #364]	; (e194 <readSensors+0x3b4>)
    e026:	47a8      	blx	r5
    e028:	1c03      	adds	r3, r0, #0
    e02a:	1c0c      	adds	r4, r1, #0
    e02c:	1c1d      	adds	r5, r3, #0
    e02e:	1c26      	adds	r6, r4, #0
    e030:	4b66      	ldr	r3, [pc, #408]	; (e1cc <readSensors+0x3ec>)
    e032:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e034:	4b5f      	ldr	r3, [pc, #380]	; (e1b4 <readSensors+0x3d4>)
    e036:	1c10      	adds	r0, r2, #0
    e038:	4798      	blx	r3
    e03a:	1c03      	adds	r3, r0, #0
    e03c:	1c0c      	adds	r4, r1, #0
    e03e:	4a5e      	ldr	r2, [pc, #376]	; (e1b8 <readSensors+0x3d8>)
    e040:	4694      	mov	ip, r2
    e042:	1c28      	adds	r0, r5, #0
    e044:	1c31      	adds	r1, r6, #0
    e046:	1c1a      	adds	r2, r3, #0
    e048:	1c23      	adds	r3, r4, #0
    e04a:	47e0      	blx	ip
    e04c:	1c03      	adds	r3, r0, #0
    e04e:	1c0c      	adds	r4, r1, #0
    e050:	4a5a      	ldr	r2, [pc, #360]	; (e1bc <readSensors+0x3dc>)
    e052:	1c18      	adds	r0, r3, #0
    e054:	1c21      	adds	r1, r4, #0
    e056:	4790      	blx	r2
    e058:	1c03      	adds	r3, r0, #0
    e05a:	607b      	str	r3, [r7, #4]
	if (tempVal > 0.0)
    e05c:	4b58      	ldr	r3, [pc, #352]	; (e1c0 <readSensors+0x3e0>)
    e05e:	6878      	ldr	r0, [r7, #4]
    e060:	2100      	movs	r1, #0
    e062:	4798      	blx	r3
    e064:	1c03      	adds	r3, r0, #0
    e066:	2b00      	cmp	r3, #0
    e068:	d024      	beq.n	e0b4 <readSensors+0x2d4>
	{
		tempVal = ( round(tempVal * 10.0) / 10.0 ); // reduce granularity of measured voltage
    e06a:	4b52      	ldr	r3, [pc, #328]	; (e1b4 <readSensors+0x3d4>)
    e06c:	6878      	ldr	r0, [r7, #4]
    e06e:	4798      	blx	r3
    e070:	1c03      	adds	r3, r0, #0
    e072:	1c0c      	adds	r4, r1, #0
    e074:	4d50      	ldr	r5, [pc, #320]	; (e1b8 <readSensors+0x3d8>)
    e076:	1c18      	adds	r0, r3, #0
    e078:	1c21      	adds	r1, r4, #0
    e07a:	4a47      	ldr	r2, [pc, #284]	; (e198 <readSensors+0x3b8>)
    e07c:	4b47      	ldr	r3, [pc, #284]	; (e19c <readSensors+0x3bc>)
    e07e:	47a8      	blx	r5
    e080:	1c03      	adds	r3, r0, #0
    e082:	1c0c      	adds	r4, r1, #0
    e084:	1c18      	adds	r0, r3, #0
    e086:	1c21      	adds	r1, r4, #0
    e088:	4b4e      	ldr	r3, [pc, #312]	; (e1c4 <readSensors+0x3e4>)
    e08a:	4798      	blx	r3
    e08c:	1c03      	adds	r3, r0, #0
    e08e:	1c0c      	adds	r4, r1, #0
    e090:	4d4d      	ldr	r5, [pc, #308]	; (e1c8 <readSensors+0x3e8>)
    e092:	1c18      	adds	r0, r3, #0
    e094:	1c21      	adds	r1, r4, #0
    e096:	4a40      	ldr	r2, [pc, #256]	; (e198 <readSensors+0x3b8>)
    e098:	4b40      	ldr	r3, [pc, #256]	; (e19c <readSensors+0x3bc>)
    e09a:	47a8      	blx	r5
    e09c:	1c03      	adds	r3, r0, #0
    e09e:	1c0c      	adds	r4, r1, #0
    e0a0:	4a46      	ldr	r2, [pc, #280]	; (e1bc <readSensors+0x3dc>)
    e0a2:	1c18      	adds	r0, r3, #0
    e0a4:	1c21      	adds	r1, r4, #0
    e0a6:	4790      	blx	r2
    e0a8:	1c03      	adds	r3, r0, #0
    e0aa:	607b      	str	r3, [r7, #4]
		ps1.phpVoltage = tempVal;
    e0ac:	4b47      	ldr	r3, [pc, #284]	; (e1cc <readSensors+0x3ec>)
    e0ae:	687a      	ldr	r2, [r7, #4]
    e0b0:	61da      	str	r2, [r3, #28]
    e0b2:	e002      	b.n	e0ba <readSensors+0x2da>
	}
	else
	{
		ps1.phpVoltage = 0;
    e0b4:	4b45      	ldr	r3, [pc, #276]	; (e1cc <readSensors+0x3ec>)
    e0b6:	2200      	movs	r2, #0
    e0b8:	61da      	str	r2, [r3, #28]
	}
	
	tempVal = read_adc_pin(PIN_VPHP2);
    e0ba:	2000      	movs	r0, #0
    e0bc:	4b3b      	ldr	r3, [pc, #236]	; (e1ac <readSensors+0x3cc>)
    e0be:	4798      	blx	r3
    e0c0:	1c03      	adds	r3, r0, #0
    e0c2:	1c1a      	adds	r2, r3, #0
    e0c4:	4b3a      	ldr	r3, [pc, #232]	; (e1b0 <readSensors+0x3d0>)
    e0c6:	1c10      	adds	r0, r2, #0
    e0c8:	4798      	blx	r3
    e0ca:	1c03      	adds	r3, r0, #0
    e0cc:	607b      	str	r3, [r7, #4]
	tempVal += 30;
    e0ce:	4b44      	ldr	r3, [pc, #272]	; (e1e0 <readSensors+0x400>)
    e0d0:	6878      	ldr	r0, [r7, #4]
    e0d2:	4947      	ldr	r1, [pc, #284]	; (e1f0 <readSensors+0x410>)
    e0d4:	4798      	blx	r3
    e0d6:	1c03      	adds	r3, r0, #0
    e0d8:	607b      	str	r3, [r7, #4]
	tempVal = tempVal * VTEC_SCALING_FACTOR * ps1.standbyVoltage;
    e0da:	4b36      	ldr	r3, [pc, #216]	; (e1b4 <readSensors+0x3d4>)
    e0dc:	6878      	ldr	r0, [r7, #4]
    e0de:	4798      	blx	r3
    e0e0:	1c03      	adds	r3, r0, #0
    e0e2:	1c0c      	adds	r4, r1, #0
    e0e4:	4d34      	ldr	r5, [pc, #208]	; (e1b8 <readSensors+0x3d8>)
    e0e6:	1c18      	adds	r0, r3, #0
    e0e8:	1c21      	adds	r1, r4, #0
    e0ea:	4a29      	ldr	r2, [pc, #164]	; (e190 <readSensors+0x3b0>)
    e0ec:	4b29      	ldr	r3, [pc, #164]	; (e194 <readSensors+0x3b4>)
    e0ee:	47a8      	blx	r5
    e0f0:	1c03      	adds	r3, r0, #0
    e0f2:	1c0c      	adds	r4, r1, #0
    e0f4:	1c1d      	adds	r5, r3, #0
    e0f6:	1c26      	adds	r6, r4, #0
    e0f8:	4b34      	ldr	r3, [pc, #208]	; (e1cc <readSensors+0x3ec>)
    e0fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e0fc:	4b2d      	ldr	r3, [pc, #180]	; (e1b4 <readSensors+0x3d4>)
    e0fe:	1c10      	adds	r0, r2, #0
    e100:	4798      	blx	r3
    e102:	1c03      	adds	r3, r0, #0
    e104:	1c0c      	adds	r4, r1, #0
    e106:	4a2c      	ldr	r2, [pc, #176]	; (e1b8 <readSensors+0x3d8>)
    e108:	4694      	mov	ip, r2
    e10a:	1c28      	adds	r0, r5, #0
    e10c:	1c31      	adds	r1, r6, #0
    e10e:	1c1a      	adds	r2, r3, #0
    e110:	1c23      	adds	r3, r4, #0
    e112:	47e0      	blx	ip
    e114:	1c03      	adds	r3, r0, #0
    e116:	1c0c      	adds	r4, r1, #0
    e118:	4a28      	ldr	r2, [pc, #160]	; (e1bc <readSensors+0x3dc>)
    e11a:	1c18      	adds	r0, r3, #0
    e11c:	1c21      	adds	r1, r4, #0
    e11e:	4790      	blx	r2
    e120:	1c03      	adds	r3, r0, #0
    e122:	607b      	str	r3, [r7, #4]
	if (tempVal > 0.0)
    e124:	4b26      	ldr	r3, [pc, #152]	; (e1c0 <readSensors+0x3e0>)
    e126:	6878      	ldr	r0, [r7, #4]
    e128:	2100      	movs	r1, #0
    e12a:	4798      	blx	r3
    e12c:	1c03      	adds	r3, r0, #0
    e12e:	2b00      	cmp	r3, #0
    e130:	d062      	beq.n	e1f8 <readSensors+0x418>
	{
		tempVal = ( round(tempVal * 10.0) / 10.0 ); // reduce granularity of measured voltage
    e132:	4b20      	ldr	r3, [pc, #128]	; (e1b4 <readSensors+0x3d4>)
    e134:	6878      	ldr	r0, [r7, #4]
    e136:	4798      	blx	r3
    e138:	1c03      	adds	r3, r0, #0
    e13a:	1c0c      	adds	r4, r1, #0
    e13c:	4d1e      	ldr	r5, [pc, #120]	; (e1b8 <readSensors+0x3d8>)
    e13e:	1c18      	adds	r0, r3, #0
    e140:	1c21      	adds	r1, r4, #0
    e142:	4a15      	ldr	r2, [pc, #84]	; (e198 <readSensors+0x3b8>)
    e144:	4b15      	ldr	r3, [pc, #84]	; (e19c <readSensors+0x3bc>)
    e146:	47a8      	blx	r5
    e148:	1c03      	adds	r3, r0, #0
    e14a:	1c0c      	adds	r4, r1, #0
    e14c:	1c18      	adds	r0, r3, #0
    e14e:	1c21      	adds	r1, r4, #0
    e150:	4b1c      	ldr	r3, [pc, #112]	; (e1c4 <readSensors+0x3e4>)
    e152:	4798      	blx	r3
    e154:	1c03      	adds	r3, r0, #0
    e156:	1c0c      	adds	r4, r1, #0
    e158:	4d1b      	ldr	r5, [pc, #108]	; (e1c8 <readSensors+0x3e8>)
    e15a:	1c18      	adds	r0, r3, #0
    e15c:	1c21      	adds	r1, r4, #0
    e15e:	4a0e      	ldr	r2, [pc, #56]	; (e198 <readSensors+0x3b8>)
    e160:	4b0e      	ldr	r3, [pc, #56]	; (e19c <readSensors+0x3bc>)
    e162:	47a8      	blx	r5
    e164:	1c03      	adds	r3, r0, #0
    e166:	1c0c      	adds	r4, r1, #0
    e168:	4a14      	ldr	r2, [pc, #80]	; (e1bc <readSensors+0x3dc>)
    e16a:	1c18      	adds	r0, r3, #0
    e16c:	1c21      	adds	r1, r4, #0
    e16e:	4790      	blx	r2
    e170:	1c03      	adds	r3, r0, #0
    e172:	607b      	str	r3, [r7, #4]
		ps2.phpVoltage = tempVal;
    e174:	4b1f      	ldr	r3, [pc, #124]	; (e1f4 <readSensors+0x414>)
    e176:	687a      	ldr	r2, [r7, #4]
    e178:	61da      	str	r2, [r3, #28]
    e17a:	e040      	b.n	e1fe <readSensors+0x41e>
    e17c:	46c0      	nop			; (mov r8, r8)
    e17e:	46c0      	nop			; (mov r8, r8)
    e180:	c31593e6 	.word	0xc31593e6
    e184:	3f5001d5 	.word	0x3f5001d5
    e188:	00000000 	.word	0x00000000
    e18c:	40590000 	.word	0x40590000
    e190:	a9973d9f 	.word	0xa9973d9f
    e194:	3f96f049 	.word	0x3f96f049
    e198:	00000000 	.word	0x00000000
    e19c:	40240000 	.word	0x40240000
    e1a0:	200011a8 	.word	0x200011a8
    e1a4:	0000d4b1 	.word	0x0000d4b1
    e1a8:	0000fce9 	.word	0x0000fce9
    e1ac:	0000dd49 	.word	0x0000dd49
    e1b0:	0002046d 	.word	0x0002046d
    e1b4:	00022111 	.word	0x00022111
    e1b8:	00021435 	.word	0x00021435
    e1bc:	000221b5 	.word	0x000221b5
    e1c0:	0001f655 	.word	0x0001f655
    e1c4:	00019ac9 	.word	0x00019ac9
    e1c8:	00020b55 	.word	0x00020b55
    e1cc:	20000a84 	.word	0x20000a84
    e1d0:	20000373 	.word	0x20000373
    e1d4:	2000018c 	.word	0x2000018c
    e1d8:	0000e329 	.word	0x0000e329
    e1dc:	200009b8 	.word	0x200009b8
    e1e0:	0001f79d 	.word	0x0001f79d
    e1e4:	20000960 	.word	0x20000960
    e1e8:	2000018e 	.word	0x2000018e
    e1ec:	200003b4 	.word	0x200003b4
    e1f0:	41f00000 	.word	0x41f00000
    e1f4:	20000d64 	.word	0x20000d64
	}
	else
	{
		ps2.phpVoltage = 0;
    e1f8:	4b3b      	ldr	r3, [pc, #236]	; (e2e8 <readSensors+0x508>)
    e1fa:	2200      	movs	r2, #0
    e1fc:	61da      	str	r2, [r3, #28]
	}
	
	/////////////////////////////////////
	// php/output current
	/////////////////////////////////////	
	adc_disable(&adc_inst);
    e1fe:	4b3b      	ldr	r3, [pc, #236]	; (e2ec <readSensors+0x50c>)
    e200:	1c18      	adds	r0, r3, #0
    e202:	4b3b      	ldr	r3, [pc, #236]	; (e2f0 <readSensors+0x510>)
    e204:	4798      	blx	r3
	configure_adc(ADC_REFERENCE_INT1V);
    e206:	2000      	movs	r0, #0
    e208:	4b3a      	ldr	r3, [pc, #232]	; (e2f4 <readSensors+0x514>)
    e20a:	4798      	blx	r3
	ps1.outputCurrent = tempVal;
	tempVal = read_adc_pin(PIN_IPHP2);
	tempVal = tempVal * IPHP2_SCALING_FACTOR;// * ps1.standbyVoltage;
	ps2.outputCurrent = tempVal;
	*/
	adc_disable(&adc_inst);
    e20c:	4b37      	ldr	r3, [pc, #220]	; (e2ec <readSensors+0x50c>)
    e20e:	1c18      	adds	r0, r3, #0
    e210:	4b37      	ldr	r3, [pc, #220]	; (e2f0 <readSensors+0x510>)
    e212:	4798      	blx	r3
	configure_adc(ADC_REF_VOLTAGE);
    e214:	2003      	movs	r0, #3
    e216:	4b37      	ldr	r3, [pc, #220]	; (e2f4 <readSensors+0x514>)
    e218:	4798      	blx	r3
		
	/////////////////////////////////////
	// bulk voltage
	/////////////////////////////////////	
	tempVal	= read_adc_pin(PIN_VBULK1);
    e21a:	2005      	movs	r0, #5
    e21c:	4b36      	ldr	r3, [pc, #216]	; (e2f8 <readSensors+0x518>)
    e21e:	4798      	blx	r3
    e220:	1c03      	adds	r3, r0, #0
    e222:	1c1a      	adds	r2, r3, #0
    e224:	4b35      	ldr	r3, [pc, #212]	; (e2fc <readSensors+0x51c>)
    e226:	1c10      	adds	r0, r2, #0
    e228:	4798      	blx	r3
    e22a:	1c03      	adds	r3, r0, #0
    e22c:	607b      	str	r3, [r7, #4]
	tempVal = tempVal * VBULK1_SCALING_FACTOR * ps1.standbyVoltage;
    e22e:	4b34      	ldr	r3, [pc, #208]	; (e300 <readSensors+0x520>)
    e230:	6878      	ldr	r0, [r7, #4]
    e232:	4798      	blx	r3
    e234:	1c03      	adds	r3, r0, #0
    e236:	1c0c      	adds	r4, r1, #0
    e238:	4d32      	ldr	r5, [pc, #200]	; (e304 <readSensors+0x524>)
    e23a:	1c18      	adds	r0, r3, #0
    e23c:	1c21      	adds	r1, r4, #0
    e23e:	4b29      	ldr	r3, [pc, #164]	; (e2e4 <readSensors+0x504>)
    e240:	4a27      	ldr	r2, [pc, #156]	; (e2e0 <readSensors+0x500>)
    e242:	47a8      	blx	r5
    e244:	1c03      	adds	r3, r0, #0
    e246:	1c0c      	adds	r4, r1, #0
    e248:	1c1d      	adds	r5, r3, #0
    e24a:	1c26      	adds	r6, r4, #0
    e24c:	4b2e      	ldr	r3, [pc, #184]	; (e308 <readSensors+0x528>)
    e24e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e250:	4b2b      	ldr	r3, [pc, #172]	; (e300 <readSensors+0x520>)
    e252:	1c10      	adds	r0, r2, #0
    e254:	4798      	blx	r3
    e256:	1c03      	adds	r3, r0, #0
    e258:	1c0c      	adds	r4, r1, #0
    e25a:	4a2a      	ldr	r2, [pc, #168]	; (e304 <readSensors+0x524>)
    e25c:	4694      	mov	ip, r2
    e25e:	1c28      	adds	r0, r5, #0
    e260:	1c31      	adds	r1, r6, #0
    e262:	1c1a      	adds	r2, r3, #0
    e264:	1c23      	adds	r3, r4, #0
    e266:	47e0      	blx	ip
    e268:	1c03      	adds	r3, r0, #0
    e26a:	1c0c      	adds	r4, r1, #0
    e26c:	4a27      	ldr	r2, [pc, #156]	; (e30c <readSensors+0x52c>)
    e26e:	1c18      	adds	r0, r3, #0
    e270:	1c21      	adds	r1, r4, #0
    e272:	4790      	blx	r2
    e274:	1c03      	adds	r3, r0, #0
    e276:	607b      	str	r3, [r7, #4]
	ps1.bulkVoltage = tempVal;
    e278:	4b23      	ldr	r3, [pc, #140]	; (e308 <readSensors+0x528>)
    e27a:	687a      	ldr	r2, [r7, #4]
    e27c:	63da      	str	r2, [r3, #60]	; 0x3c
	//	tempVal = ( round(tempVal * 100.0) / 100 );
	//	ps1.batteryVoltage = tempVal;
	//}
	//else
	//{
		ps1.batteryVoltage = 0;
    e27e:	4b22      	ldr	r3, [pc, #136]	; (e308 <readSensors+0x528>)
    e280:	2200      	movs	r2, #0
    e282:	649a      	str	r2, [r3, #72]	; 0x48
	*/	

	/////////////////////////////////////
	// output power calculation
	/////////////////////////////////////
	ps1.outputPower = ps1.phpVoltage * ps1.outputCurrent;
    e284:	4b20      	ldr	r3, [pc, #128]	; (e308 <readSensors+0x528>)
    e286:	69d9      	ldr	r1, [r3, #28]
    e288:	4b1f      	ldr	r3, [pc, #124]	; (e308 <readSensors+0x528>)
    e28a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e28c:	4b20      	ldr	r3, [pc, #128]	; (e310 <readSensors+0x530>)
    e28e:	1c08      	adds	r0, r1, #0
    e290:	1c11      	adds	r1, r2, #0
    e292:	4798      	blx	r3
    e294:	1c03      	adds	r3, r0, #0
    e296:	1c1a      	adds	r2, r3, #0
    e298:	4b1b      	ldr	r3, [pc, #108]	; (e308 <readSensors+0x528>)
    e29a:	621a      	str	r2, [r3, #32]
	ps2.outputPower = ps2.phpVoltage * ps2.outputCurrent;
    e29c:	4b12      	ldr	r3, [pc, #72]	; (e2e8 <readSensors+0x508>)
    e29e:	69d9      	ldr	r1, [r3, #28]
    e2a0:	4b11      	ldr	r3, [pc, #68]	; (e2e8 <readSensors+0x508>)
    e2a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e2a4:	4b1a      	ldr	r3, [pc, #104]	; (e310 <readSensors+0x530>)
    e2a6:	1c08      	adds	r0, r1, #0
    e2a8:	1c11      	adds	r1, r2, #0
    e2aa:	4798      	blx	r3
    e2ac:	1c03      	adds	r3, r0, #0
    e2ae:	1c1a      	adds	r2, r3, #0
    e2b0:	4b0d      	ldr	r3, [pc, #52]	; (e2e8 <readSensors+0x508>)
    e2b2:	621a      	str	r2, [r3, #32]
	
	/////////////////////////////////////
	// uniformity
	/////////////////////////////////////
	chamberTempDifference = fabs(chamber2.chamberTempRaw - chamber1.chamberTempRaw);
    e2b4:	4b17      	ldr	r3, [pc, #92]	; (e314 <readSensors+0x534>)
    e2b6:	6899      	ldr	r1, [r3, #8]
    e2b8:	4b17      	ldr	r3, [pc, #92]	; (e318 <readSensors+0x538>)
    e2ba:	689a      	ldr	r2, [r3, #8]
    e2bc:	4b17      	ldr	r3, [pc, #92]	; (e31c <readSensors+0x53c>)
    e2be:	1c08      	adds	r0, r1, #0
    e2c0:	1c11      	adds	r1, r2, #0
    e2c2:	4798      	blx	r3
    e2c4:	1c03      	adds	r3, r0, #0
    e2c6:	005b      	lsls	r3, r3, #1
    e2c8:	085a      	lsrs	r2, r3, #1
    e2ca:	4b15      	ldr	r3, [pc, #84]	; (e320 <readSensors+0x540>)
    e2cc:	601a      	str	r2, [r3, #0]
	acceptHtxTemperature = 0;//chamber1.chamberTemp;
    e2ce:	4b15      	ldr	r3, [pc, #84]	; (e324 <readSensors+0x544>)
    e2d0:	2200      	movs	r2, #0
    e2d2:	601a      	str	r2, [r3, #0]
			
	return;
    e2d4:	46c0      	nop			; (mov r8, r8)
}
    e2d6:	46bd      	mov	sp, r7
    e2d8:	b003      	add	sp, #12
    e2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e2dc:	46c0      	nop			; (mov r8, r8)
    e2de:	46c0      	nop			; (mov r8, r8)
    e2e0:	a77a2ced 	.word	0xa77a2ced
    e2e4:	3f89ee02 	.word	0x3f89ee02
    e2e8:	20000d64 	.word	0x20000d64
    e2ec:	200011a8 	.word	0x200011a8
    e2f0:	0000d4b1 	.word	0x0000d4b1
    e2f4:	0000fce9 	.word	0x0000fce9
    e2f8:	0000dd49 	.word	0x0000dd49
    e2fc:	0002046d 	.word	0x0002046d
    e300:	00022111 	.word	0x00022111
    e304:	00021435 	.word	0x00021435
    e308:	20000a84 	.word	0x20000a84
    e30c:	000221b5 	.word	0x000221b5
    e310:	0001fe31 	.word	0x0001fe31
    e314:	20000960 	.word	0x20000960
    e318:	200009b8 	.word	0x200009b8
    e31c:	00020089 	.word	0x00020089
    e320:	20000350 	.word	0x20000350
    e324:	20000368 	.word	0x20000368

0000e328 <ADCtoTemperature>:

// convert ADC sensor reading (bits) to temperature (degC)
float ADCtoTemperature(float average, uint16_t nWhichBeta)
{
    e328:	b5b0      	push	{r4, r5, r7, lr}
    e32a:	b084      	sub	sp, #16
    e32c:	af00      	add	r7, sp, #0
    e32e:	6078      	str	r0, [r7, #4]
    e330:	1c0a      	adds	r2, r1, #0
    e332:	1cbb      	adds	r3, r7, #2
    e334:	801a      	strh	r2, [r3, #0]
	// convert the value to resistance
	average = 4095 / average - 1;
    e336:	4b38      	ldr	r3, [pc, #224]	; (e418 <ADCtoTemperature+0xf0>)
    e338:	4838      	ldr	r0, [pc, #224]	; (e41c <ADCtoTemperature+0xf4>)
    e33a:	6879      	ldr	r1, [r7, #4]
    e33c:	4798      	blx	r3
    e33e:	1c03      	adds	r3, r0, #0
    e340:	1c1a      	adds	r2, r3, #0
    e342:	4b37      	ldr	r3, [pc, #220]	; (e420 <ADCtoTemperature+0xf8>)
    e344:	1c10      	adds	r0, r2, #0
    e346:	21fe      	movs	r1, #254	; 0xfe
    e348:	0589      	lsls	r1, r1, #22
    e34a:	4798      	blx	r3
    e34c:	1c03      	adds	r3, r0, #0
    e34e:	607b      	str	r3, [r7, #4]
	average = SERIESRESISTOR / average;
    e350:	4b31      	ldr	r3, [pc, #196]	; (e418 <ADCtoTemperature+0xf0>)
    e352:	4834      	ldr	r0, [pc, #208]	; (e424 <ADCtoTemperature+0xfc>)
    e354:	6879      	ldr	r1, [r7, #4]
    e356:	4798      	blx	r3
    e358:	1c03      	adds	r3, r0, #0
    e35a:	607b      	str	r3, [r7, #4]
	
	// convert resistance to temperature
	float steinhart;
	steinhart = average / THERMISTORNOMINAL;            // (R/Ro)
    e35c:	4b2e      	ldr	r3, [pc, #184]	; (e418 <ADCtoTemperature+0xf0>)
    e35e:	6878      	ldr	r0, [r7, #4]
    e360:	4930      	ldr	r1, [pc, #192]	; (e424 <ADCtoTemperature+0xfc>)
    e362:	4798      	blx	r3
    e364:	1c03      	adds	r3, r0, #0
    e366:	60fb      	str	r3, [r7, #12]
	steinhart = log(steinhart);                         // ln(R/Ro)
    e368:	4b2f      	ldr	r3, [pc, #188]	; (e428 <ADCtoTemperature+0x100>)
    e36a:	68f8      	ldr	r0, [r7, #12]
    e36c:	4798      	blx	r3
    e36e:	1c03      	adds	r3, r0, #0
    e370:	1c0c      	adds	r4, r1, #0
    e372:	1c18      	adds	r0, r3, #0
    e374:	1c21      	adds	r1, r4, #0
    e376:	4b2d      	ldr	r3, [pc, #180]	; (e42c <ADCtoTemperature+0x104>)
    e378:	4798      	blx	r3
    e37a:	1c03      	adds	r3, r0, #0
    e37c:	1c0c      	adds	r4, r1, #0
    e37e:	4a2c      	ldr	r2, [pc, #176]	; (e430 <ADCtoTemperature+0x108>)
    e380:	1c18      	adds	r0, r3, #0
    e382:	1c21      	adds	r1, r4, #0
    e384:	4790      	blx	r2
    e386:	1c03      	adds	r3, r0, #0
    e388:	60fb      	str	r3, [r7, #12]
	steinhart /= nWhichBeta;                            // 1/B * ln(R/Ro)
    e38a:	1cbb      	adds	r3, r7, #2
    e38c:	881a      	ldrh	r2, [r3, #0]
    e38e:	4b29      	ldr	r3, [pc, #164]	; (e434 <ADCtoTemperature+0x10c>)
    e390:	1c10      	adds	r0, r2, #0
    e392:	4798      	blx	r3
    e394:	1c02      	adds	r2, r0, #0
    e396:	4b20      	ldr	r3, [pc, #128]	; (e418 <ADCtoTemperature+0xf0>)
    e398:	68f8      	ldr	r0, [r7, #12]
    e39a:	1c11      	adds	r1, r2, #0
    e39c:	4798      	blx	r3
    e39e:	1c03      	adds	r3, r0, #0
    e3a0:	60fb      	str	r3, [r7, #12]
	steinhart += 1.0 / (TEMPERATURENOMINAL + 273.15);   // + (1/To)
    e3a2:	4b21      	ldr	r3, [pc, #132]	; (e428 <ADCtoTemperature+0x100>)
    e3a4:	68f8      	ldr	r0, [r7, #12]
    e3a6:	4798      	blx	r3
    e3a8:	1c03      	adds	r3, r0, #0
    e3aa:	1c0c      	adds	r4, r1, #0
    e3ac:	4d22      	ldr	r5, [pc, #136]	; (e438 <ADCtoTemperature+0x110>)
    e3ae:	1c18      	adds	r0, r3, #0
    e3b0:	1c21      	adds	r1, r4, #0
    e3b2:	4b16      	ldr	r3, [pc, #88]	; (e40c <ADCtoTemperature+0xe4>)
    e3b4:	4a14      	ldr	r2, [pc, #80]	; (e408 <ADCtoTemperature+0xe0>)
    e3b6:	47a8      	blx	r5
    e3b8:	1c03      	adds	r3, r0, #0
    e3ba:	1c0c      	adds	r4, r1, #0
    e3bc:	4a1c      	ldr	r2, [pc, #112]	; (e430 <ADCtoTemperature+0x108>)
    e3be:	1c18      	adds	r0, r3, #0
    e3c0:	1c21      	adds	r1, r4, #0
    e3c2:	4790      	blx	r2
    e3c4:	1c03      	adds	r3, r0, #0
    e3c6:	60fb      	str	r3, [r7, #12]
	steinhart = 1.0 / steinhart;                        // Invert
    e3c8:	4b13      	ldr	r3, [pc, #76]	; (e418 <ADCtoTemperature+0xf0>)
    e3ca:	20fe      	movs	r0, #254	; 0xfe
    e3cc:	0580      	lsls	r0, r0, #22
    e3ce:	68f9      	ldr	r1, [r7, #12]
    e3d0:	4798      	blx	r3
    e3d2:	1c03      	adds	r3, r0, #0
    e3d4:	60fb      	str	r3, [r7, #12]
	steinhart -= 273.15;                                // convert to C
    e3d6:	4b14      	ldr	r3, [pc, #80]	; (e428 <ADCtoTemperature+0x100>)
    e3d8:	68f8      	ldr	r0, [r7, #12]
    e3da:	4798      	blx	r3
    e3dc:	1c03      	adds	r3, r0, #0
    e3de:	1c0c      	adds	r4, r1, #0
    e3e0:	4d16      	ldr	r5, [pc, #88]	; (e43c <ADCtoTemperature+0x114>)
    e3e2:	1c18      	adds	r0, r3, #0
    e3e4:	1c21      	adds	r1, r4, #0
    e3e6:	4a0a      	ldr	r2, [pc, #40]	; (e410 <ADCtoTemperature+0xe8>)
    e3e8:	4b0a      	ldr	r3, [pc, #40]	; (e414 <ADCtoTemperature+0xec>)
    e3ea:	47a8      	blx	r5
    e3ec:	1c03      	adds	r3, r0, #0
    e3ee:	1c0c      	adds	r4, r1, #0
    e3f0:	4a0f      	ldr	r2, [pc, #60]	; (e430 <ADCtoTemperature+0x108>)
    e3f2:	1c18      	adds	r0, r3, #0
    e3f4:	1c21      	adds	r1, r4, #0
    e3f6:	4790      	blx	r2
    e3f8:	1c03      	adds	r3, r0, #0
    e3fa:	60fb      	str	r3, [r7, #12]

	return steinhart;
    e3fc:	68fb      	ldr	r3, [r7, #12]
}
    e3fe:	1c18      	adds	r0, r3, #0
    e400:	46bd      	mov	sp, r7
    e402:	b004      	add	sp, #16
    e404:	bdb0      	pop	{r4, r5, r7, pc}
    e406:	46c0      	nop			; (mov r8, r8)
    e408:	dcb5db83 	.word	0xdcb5db83
    e40c:	3f6b79e1 	.word	0x3f6b79e1
    e410:	66666666 	.word	0x66666666
    e414:	40711266 	.word	0x40711266
    e418:	0001fa75 	.word	0x0001fa75
    e41c:	457ff000 	.word	0x457ff000
    e420:	00020089 	.word	0x00020089
    e424:	461c4000 	.word	0x461c4000
    e428:	00022111 	.word	0x00022111
    e42c:	00019b71 	.word	0x00019b71
    e430:	000221b5 	.word	0x000221b5
    e434:	000203b5 	.word	0x000203b5
    e438:	0002050d 	.word	0x0002050d
    e43c:	00021959 	.word	0x00021959

0000e440 <psHwController>:

void psHwController()
{	
    e440:	b580      	push	{r7, lr}
    e442:	af00      	add	r7, sp, #0
	psHwControl_27V_freezer();
    e444:	4b01      	ldr	r3, [pc, #4]	; (e44c <psHwController+0xc>)
    e446:	4798      	blx	r3
}
    e448:	46bd      	mov	sp, r7
    e44a:	bd80      	pop	{r7, pc}
    e44c:	0000e989 	.word	0x0000e989

0000e450 <modeStateMachine>:

void modeStateMachine(struct pid_instance *pid_inst, struct ps_vars *ps_inst, struct chamber_vars *ch_inst)
{
    e450:	b5f0      	push	{r4, r5, r6, r7, lr}
    e452:	b087      	sub	sp, #28
    e454:	af00      	add	r7, sp, #0
    e456:	60f8      	str	r0, [r7, #12]
    e458:	60b9      	str	r1, [r7, #8]
    e45a:	607a      	str	r2, [r7, #4]
	float rejectSense = 0.0;
    e45c:	2300      	movs	r3, #0
    e45e:	617b      	str	r3, [r7, #20]

	// select which reject sensor is used as indicator for foldback/shutdown
	#ifdef HIGH_PERFORMANCE
	rejectSense = max(chamber1.rejectTemp, chamber2.rejectTemp);
    e460:	4bb9      	ldr	r3, [pc, #740]	; (e748 <modeStateMachine+0x2f8>)
    e462:	68d9      	ldr	r1, [r3, #12]
    e464:	4bb9      	ldr	r3, [pc, #740]	; (e74c <modeStateMachine+0x2fc>)
    e466:	68da      	ldr	r2, [r3, #12]
    e468:	4bb9      	ldr	r3, [pc, #740]	; (e750 <modeStateMachine+0x300>)
    e46a:	1c08      	adds	r0, r1, #0
    e46c:	1c11      	adds	r1, r2, #0
    e46e:	4798      	blx	r3
    e470:	1c03      	adds	r3, r0, #0
    e472:	2b00      	cmp	r3, #0
    e474:	d002      	beq.n	e47c <modeStateMachine+0x2c>
    e476:	4bb4      	ldr	r3, [pc, #720]	; (e748 <modeStateMachine+0x2f8>)
    e478:	68db      	ldr	r3, [r3, #12]
    e47a:	e001      	b.n	e480 <modeStateMachine+0x30>
    e47c:	4bb3      	ldr	r3, [pc, #716]	; (e74c <modeStateMachine+0x2fc>)
    e47e:	68db      	ldr	r3, [r3, #12]
    e480:	617b      	str	r3, [r7, #20]
	#endif
	
	// if both chamber sensors are insane or reject fan failed, then run cooling
	if ( ( ( (errorRegister & ERROR_INSANE_TCHA1 ) == ERROR_INSANE_TCHA1 )   &&
    e482:	4bb4      	ldr	r3, [pc, #720]	; (e754 <modeStateMachine+0x304>)
    e484:	881b      	ldrh	r3, [r3, #0]
    e486:	1c1a      	adds	r2, r3, #0
    e488:	2308      	movs	r3, #8
    e48a:	4013      	ands	r3, r2
    e48c:	d00f      	beq.n	e4ae <modeStateMachine+0x5e>
	       ( (errorRegister & ERROR_INSANE_TCHA2 ) == ERROR_INSANE_TCHA2 ) ) )
    e48e:	4bb1      	ldr	r3, [pc, #708]	; (e754 <modeStateMachine+0x304>)
    e490:	881b      	ldrh	r3, [r3, #0]
    e492:	1c1a      	adds	r2, r3, #0
    e494:	2310      	movs	r3, #16
    e496:	4013      	ands	r3, r2
	#ifdef HIGH_PERFORMANCE
	rejectSense = max(chamber1.rejectTemp, chamber2.rejectTemp);
	#endif
	
	// if both chamber sensors are insane or reject fan failed, then run cooling
	if ( ( ( (errorRegister & ERROR_INSANE_TCHA1 ) == ERROR_INSANE_TCHA1 )   &&
    e498:	d009      	beq.n	e4ae <modeStateMachine+0x5e>
	       ( (errorRegister & ERROR_INSANE_TCHA2 ) == ERROR_INSANE_TCHA2 ) ) )
	{
		ch_inst->mode_state = STATE_HIGH_COP;
    e49a:	687b      	ldr	r3, [r7, #4]
    e49c:	2204      	movs	r2, #4
    e49e:	701a      	strb	r2, [r3, #0]
		ch_inst->previousModeState = STATE_HIGH_COP;
    e4a0:	687b      	ldr	r3, [r7, #4]
    e4a2:	2204      	movs	r2, #4
    e4a4:	705a      	strb	r2, [r3, #1]
		#ifdef HIGH_PERFORMANCE
		ps_inst->desiredVoltage = VMAXCOP_DEFAULT;
    e4a6:	68bb      	ldr	r3, [r7, #8]
    e4a8:	4aab      	ldr	r2, [pc, #684]	; (e758 <modeStateMachine+0x308>)
    e4aa:	615a      	str	r2, [r3, #20]
		#endif
		return;
    e4ac:	e23a      	b.n	e924 <modeStateMachine+0x4d4>
	//if (ch_inst->deactivateAutoControl == false) {

	// state machine to determine operating mode
	//
	// reset //////////////////////////////////
	if (ch_inst->mode_state == STATE_RESET) {
    e4ae:	687b      	ldr	r3, [r7, #4]
    e4b0:	781b      	ldrb	r3, [r3, #0]
    e4b2:	2b00      	cmp	r3, #0
    e4b4:	d109      	bne.n	e4ca <modeStateMachine+0x7a>
		ch_inst->mode_state = STATE_IDLE;
    e4b6:	687b      	ldr	r3, [r7, #4]
    e4b8:	2201      	movs	r2, #1
    e4ba:	701a      	strb	r2, [r3, #0]
		ps_inst->desiredVoltage = 0;
    e4bc:	68bb      	ldr	r3, [r7, #8]
    e4be:	2200      	movs	r2, #0
    e4c0:	615a      	str	r2, [r3, #20]
		//ch_inst->fanState = OFF;
		ch_inst->previousModeState = STATE_RESET;
    e4c2:	687b      	ldr	r3, [r7, #4]
    e4c4:	2200      	movs	r2, #0
    e4c6:	705a      	strb	r2, [r3, #1]
    e4c8:	e1f7      	b.n	e8ba <modeStateMachine+0x46a>
		
	// idle ///////////////////////////////////
	} else if (ch_inst->mode_state == STATE_IDLE) {
    e4ca:	687b      	ldr	r3, [r7, #4]
    e4cc:	781b      	ldrb	r3, [r3, #0]
    e4ce:	2b01      	cmp	r3, #1
    e4d0:	d125      	bne.n	e51e <modeStateMachine+0xce>
		if ( ((controlTemperature > ch_inst->setpoint-ch_inst->deadbandLow)) && (rejectSense < ch_inst->rejectLowLimit) ) {
    e4d2:	687b      	ldr	r3, [r7, #4]
    e4d4:	6999      	ldr	r1, [r3, #24]
    e4d6:	687b      	ldr	r3, [r7, #4]
    e4d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e4da:	4ba0      	ldr	r3, [pc, #640]	; (e75c <modeStateMachine+0x30c>)
    e4dc:	1c08      	adds	r0, r1, #0
    e4de:	1c11      	adds	r1, r2, #0
    e4e0:	4798      	blx	r3
    e4e2:	1c03      	adds	r3, r0, #0
    e4e4:	1c19      	adds	r1, r3, #0
    e4e6:	4b9e      	ldr	r3, [pc, #632]	; (e760 <modeStateMachine+0x310>)
    e4e8:	681a      	ldr	r2, [r3, #0]
    e4ea:	4b9e      	ldr	r3, [pc, #632]	; (e764 <modeStateMachine+0x314>)
    e4ec:	1c08      	adds	r0, r1, #0
    e4ee:	1c11      	adds	r1, r2, #0
    e4f0:	4798      	blx	r3
    e4f2:	1c03      	adds	r3, r0, #0
    e4f4:	2b00      	cmp	r3, #0
    e4f6:	d00b      	beq.n	e510 <modeStateMachine+0xc0>
    e4f8:	687b      	ldr	r3, [r7, #4]
    e4fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    e4fc:	4b94      	ldr	r3, [pc, #592]	; (e750 <modeStateMachine+0x300>)
    e4fe:	1c10      	adds	r0, r2, #0
    e500:	6979      	ldr	r1, [r7, #20]
    e502:	4798      	blx	r3
    e504:	1c03      	adds	r3, r0, #0
    e506:	2b00      	cmp	r3, #0
    e508:	d002      	beq.n	e510 <modeStateMachine+0xc0>
			ch_inst->mode_state = STATE_HIGH_COP;
    e50a:	687b      	ldr	r3, [r7, #4]
    e50c:	2204      	movs	r2, #4
    e50e:	701a      	strb	r2, [r3, #0]
			maxOutputVoltage - ch_inst->VmaxCOP//BULK_VOLTAGE_MAX - ch_inst->VmaxCOP
			);
			*/
			//ch_inst->fanState = OFF;
		}
		ps_inst->desiredVoltage = 0;
    e510:	68bb      	ldr	r3, [r7, #8]
    e512:	2200      	movs	r2, #0
    e514:	615a      	str	r2, [r3, #20]
		ch_inst->previousModeState = STATE_IDLE;
    e516:	687b      	ldr	r3, [r7, #4]
    e518:	2201      	movs	r2, #1
    e51a:	705a      	strb	r2, [r3, #1]
    e51c:	e1cd      	b.n	e8ba <modeStateMachine+0x46a>
		
	// high q /////////////////////////////////
	} else if (ch_inst->mode_state == STATE_HIGH_Q) {
    e51e:	687b      	ldr	r3, [r7, #4]
    e520:	781b      	ldrb	r3, [r3, #0]
    e522:	2b02      	cmp	r3, #2
    e524:	d165      	bne.n	e5f2 <modeStateMachine+0x1a2>
		if ( (rejectSense >= ch_inst->rejectLimitCritical) ) {
    e526:	687b      	ldr	r3, [r7, #4]
    e528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e52a:	4b8f      	ldr	r3, [pc, #572]	; (e768 <modeStateMachine+0x318>)
    e52c:	1c10      	adds	r0, r2, #0
    e52e:	6979      	ldr	r1, [r7, #20]
    e530:	4798      	blx	r3
    e532:	1c03      	adds	r3, r0, #0
    e534:	2b00      	cmp	r3, #0
    e536:	d003      	beq.n	e540 <modeStateMachine+0xf0>
			ch_inst->mode_state = STATE_IDLE;
    e538:	687b      	ldr	r3, [r7, #4]
    e53a:	2201      	movs	r2, #1
    e53c:	701a      	strb	r2, [r3, #0]
    e53e:	e01a      	b.n	e576 <modeStateMachine+0x126>
		} else if ( (rejectSense >= ch_inst->rejectLimit) ) {
    e540:	687b      	ldr	r3, [r7, #4]
    e542:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e544:	4b88      	ldr	r3, [pc, #544]	; (e768 <modeStateMachine+0x318>)
    e546:	1c10      	adds	r0, r2, #0
    e548:	6979      	ldr	r1, [r7, #20]
    e54a:	4798      	blx	r3
    e54c:	1c03      	adds	r3, r0, #0
    e54e:	2b00      	cmp	r3, #0
    e550:	d003      	beq.n	e55a <modeStateMachine+0x10a>
			ch_inst->mode_state = STATE_VAR_Q;			
    e552:	687b      	ldr	r3, [r7, #4]
    e554:	2203      	movs	r2, #3
    e556:	701a      	strb	r2, [r3, #0]
    e558:	e00d      	b.n	e576 <modeStateMachine+0x126>
		} else if ( (controlTemperature <= ch_inst->setpoint) ) {
    e55a:	687b      	ldr	r3, [r7, #4]
    e55c:	6999      	ldr	r1, [r3, #24]
    e55e:	4b80      	ldr	r3, [pc, #512]	; (e760 <modeStateMachine+0x310>)
    e560:	681a      	ldr	r2, [r3, #0]
    e562:	4b82      	ldr	r3, [pc, #520]	; (e76c <modeStateMachine+0x31c>)
    e564:	1c08      	adds	r0, r1, #0
    e566:	1c11      	adds	r1, r2, #0
    e568:	4798      	blx	r3
    e56a:	1c03      	adds	r3, r0, #0
    e56c:	2b00      	cmp	r3, #0
    e56e:	d002      	beq.n	e576 <modeStateMachine+0x126>
			ch_inst->mode_state = STATE_HIGH_COP;
    e570:	687b      	ldr	r3, [r7, #4]
    e572:	2204      	movs	r2, #4
    e574:	701a      	strb	r2, [r3, #0]
		}
		if (ch_inst->previousModeState != STATE_HIGH_Q) {
    e576:	687b      	ldr	r3, [r7, #4]
    e578:	785b      	ldrb	r3, [r3, #1]
    e57a:	2b02      	cmp	r3, #2
    e57c:	d01f      	beq.n	e5be <modeStateMachine+0x16e>
			//pid_inst->inAuto = true;
			pidSetTunings(pid_inst, pid_inst->kp_highq, pid_inst->ki_highq, pid_inst->kd_highq);
    e57e:	68fb      	ldr	r3, [r7, #12]
    e580:	6d19      	ldr	r1, [r3, #80]	; 0x50
    e582:	68fb      	ldr	r3, [r7, #12]
    e584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    e586:	68fb      	ldr	r3, [r7, #12]
    e588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    e58a:	68f8      	ldr	r0, [r7, #12]
    e58c:	4c78      	ldr	r4, [pc, #480]	; (e770 <modeStateMachine+0x320>)
    e58e:	47a0      	blx	r4
			pidSetOutputLimits(pid_inst,
			MINIMUM_ALLOWED_VOLTAGE - ch_inst->VmaxCOP,
    e590:	687b      	ldr	r3, [r7, #4]
    e592:	6a1a      	ldr	r2, [r3, #32]
			ch_inst->mode_state = STATE_HIGH_COP;
		}
		if (ch_inst->previousModeState != STATE_HIGH_Q) {
			//pid_inst->inAuto = true;
			pidSetTunings(pid_inst, pid_inst->kp_highq, pid_inst->ki_highq, pid_inst->kd_highq);
			pidSetOutputLimits(pid_inst,
    e594:	4b71      	ldr	r3, [pc, #452]	; (e75c <modeStateMachine+0x30c>)
    e596:	2000      	movs	r0, #0
    e598:	1c11      	adds	r1, r2, #0
    e59a:	4798      	blx	r3
    e59c:	1c03      	adds	r3, r0, #0
    e59e:	1c1c      	adds	r4, r3, #0
    e5a0:	4b74      	ldr	r3, [pc, #464]	; (e774 <modeStateMachine+0x324>)
    e5a2:	6819      	ldr	r1, [r3, #0]
			MINIMUM_ALLOWED_VOLTAGE - ch_inst->VmaxCOP,
			maxOutputVoltage - ch_inst->VmaxCOP
    e5a4:	687b      	ldr	r3, [r7, #4]
    e5a6:	6a1a      	ldr	r2, [r3, #32]
			ch_inst->mode_state = STATE_HIGH_COP;
		}
		if (ch_inst->previousModeState != STATE_HIGH_Q) {
			//pid_inst->inAuto = true;
			pidSetTunings(pid_inst, pid_inst->kp_highq, pid_inst->ki_highq, pid_inst->kd_highq);
			pidSetOutputLimits(pid_inst,
    e5a8:	4b6c      	ldr	r3, [pc, #432]	; (e75c <modeStateMachine+0x30c>)
    e5aa:	1c08      	adds	r0, r1, #0
    e5ac:	1c11      	adds	r1, r2, #0
    e5ae:	4798      	blx	r3
    e5b0:	1c03      	adds	r3, r0, #0
    e5b2:	68fa      	ldr	r2, [r7, #12]
    e5b4:	1c10      	adds	r0, r2, #0
    e5b6:	1c21      	adds	r1, r4, #0
    e5b8:	1c1a      	adds	r2, r3, #0
    e5ba:	4b6f      	ldr	r3, [pc, #444]	; (e778 <modeStateMachine+0x328>)
    e5bc:	4798      	blx	r3
			MINIMUM_ALLOWED_VOLTAGE - ch_inst->VmaxCOP,
			maxOutputVoltage - ch_inst->VmaxCOP
			);
			//ch_inst->fanState = ON;
		}
		if (ch_inst->operatingMode==BANG_BANG_MODE) {
    e5be:	687a      	ldr	r2, [r7, #4]
    e5c0:	233c      	movs	r3, #60	; 0x3c
    e5c2:	5cd3      	ldrb	r3, [r2, r3]
    e5c4:	2b01      	cmp	r3, #1
    e5c6:	d104      	bne.n	e5d2 <modeStateMachine+0x182>
			ps_inst->desiredVoltage = maxOutputVoltage;
    e5c8:	4b6a      	ldr	r3, [pc, #424]	; (e774 <modeStateMachine+0x324>)
    e5ca:	681a      	ldr	r2, [r3, #0]
    e5cc:	68bb      	ldr	r3, [r7, #8]
    e5ce:	615a      	str	r2, [r3, #20]
    e5d0:	e00b      	b.n	e5ea <modeStateMachine+0x19a>
			} else {
			ps_inst->desiredVoltage = ch_inst->VmaxCOP + pid_inst->Output;
    e5d2:	687b      	ldr	r3, [r7, #4]
    e5d4:	6a19      	ldr	r1, [r3, #32]
    e5d6:	68fb      	ldr	r3, [r7, #12]
    e5d8:	6a1a      	ldr	r2, [r3, #32]
    e5da:	4b68      	ldr	r3, [pc, #416]	; (e77c <modeStateMachine+0x32c>)
    e5dc:	1c08      	adds	r0, r1, #0
    e5de:	1c11      	adds	r1, r2, #0
    e5e0:	4798      	blx	r3
    e5e2:	1c03      	adds	r3, r0, #0
    e5e4:	1c1a      	adds	r2, r3, #0
    e5e6:	68bb      	ldr	r3, [r7, #8]
    e5e8:	615a      	str	r2, [r3, #20]
		}
		ch_inst->previousModeState = STATE_HIGH_Q;
    e5ea:	687b      	ldr	r3, [r7, #4]
    e5ec:	2202      	movs	r2, #2
    e5ee:	705a      	strb	r2, [r3, #1]
    e5f0:	e163      	b.n	e8ba <modeStateMachine+0x46a>
		
	// variable q /////////////////////////////
	} else if (ch_inst->mode_state == STATE_VAR_Q) {
    e5f2:	687b      	ldr	r3, [r7, #4]
    e5f4:	781b      	ldrb	r3, [r3, #0]
    e5f6:	2b03      	cmp	r3, #3
    e5f8:	d165      	bne.n	e6c6 <modeStateMachine+0x276>
		if ( (rejectSense >= ch_inst->rejectLimitCritical) ) {
    e5fa:	687b      	ldr	r3, [r7, #4]
    e5fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e5fe:	4b5a      	ldr	r3, [pc, #360]	; (e768 <modeStateMachine+0x318>)
    e600:	1c10      	adds	r0, r2, #0
    e602:	6979      	ldr	r1, [r7, #20]
    e604:	4798      	blx	r3
    e606:	1c03      	adds	r3, r0, #0
    e608:	2b00      	cmp	r3, #0
    e60a:	d003      	beq.n	e614 <modeStateMachine+0x1c4>
			ch_inst->mode_state = STATE_IDLE;
    e60c:	687b      	ldr	r3, [r7, #4]
    e60e:	2201      	movs	r2, #1
    e610:	701a      	strb	r2, [r3, #0]
    e612:	e01a      	b.n	e64a <modeStateMachine+0x1fa>
		} else if ( (rejectSense < ch_inst->rejectLowLimit) ) {
    e614:	687b      	ldr	r3, [r7, #4]
    e616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    e618:	4b4d      	ldr	r3, [pc, #308]	; (e750 <modeStateMachine+0x300>)
    e61a:	1c10      	adds	r0, r2, #0
    e61c:	6979      	ldr	r1, [r7, #20]
    e61e:	4798      	blx	r3
    e620:	1c03      	adds	r3, r0, #0
    e622:	2b00      	cmp	r3, #0
    e624:	d003      	beq.n	e62e <modeStateMachine+0x1de>
			ch_inst->mode_state = STATE_HIGH_Q;			
    e626:	687b      	ldr	r3, [r7, #4]
    e628:	2202      	movs	r2, #2
    e62a:	701a      	strb	r2, [r3, #0]
    e62c:	e00d      	b.n	e64a <modeStateMachine+0x1fa>
		} else if ( (controlTemperature <= ch_inst->setpoint) ) {
    e62e:	687b      	ldr	r3, [r7, #4]
    e630:	6999      	ldr	r1, [r3, #24]
    e632:	4b4b      	ldr	r3, [pc, #300]	; (e760 <modeStateMachine+0x310>)
    e634:	681a      	ldr	r2, [r3, #0]
    e636:	4b4d      	ldr	r3, [pc, #308]	; (e76c <modeStateMachine+0x31c>)
    e638:	1c08      	adds	r0, r1, #0
    e63a:	1c11      	adds	r1, r2, #0
    e63c:	4798      	blx	r3
    e63e:	1c03      	adds	r3, r0, #0
    e640:	2b00      	cmp	r3, #0
    e642:	d002      	beq.n	e64a <modeStateMachine+0x1fa>
			ch_inst->mode_state = STATE_HIGH_COP;
    e644:	687b      	ldr	r3, [r7, #4]
    e646:	2204      	movs	r2, #4
    e648:	701a      	strb	r2, [r3, #0]
		}
		if (ch_inst->previousModeState != STATE_VAR_Q) {
    e64a:	687b      	ldr	r3, [r7, #4]
    e64c:	785b      	ldrb	r3, [r3, #1]
    e64e:	2b03      	cmp	r3, #3
    e650:	d01f      	beq.n	e692 <modeStateMachine+0x242>
			//pid_inst->inAuto = true;
			pidSetTunings(pid_inst, pid_inst->kp_varq, pid_inst->ki_varq, pid_inst->kd_varq);
    e652:	68fb      	ldr	r3, [r7, #12]
    e654:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
    e656:	68fb      	ldr	r3, [r7, #12]
    e658:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    e65a:	68fb      	ldr	r3, [r7, #12]
    e65c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    e65e:	68f8      	ldr	r0, [r7, #12]
    e660:	4c43      	ldr	r4, [pc, #268]	; (e770 <modeStateMachine+0x320>)
    e662:	47a0      	blx	r4
			pidSetOutputLimits(pid_inst,
			MINIMUM_ALLOWED_VOLTAGE - ch_inst->VmaxCOP,
    e664:	687b      	ldr	r3, [r7, #4]
    e666:	6a1a      	ldr	r2, [r3, #32]
			ch_inst->mode_state = STATE_HIGH_COP;
		}
		if (ch_inst->previousModeState != STATE_VAR_Q) {
			//pid_inst->inAuto = true;
			pidSetTunings(pid_inst, pid_inst->kp_varq, pid_inst->ki_varq, pid_inst->kd_varq);
			pidSetOutputLimits(pid_inst,
    e668:	4b3c      	ldr	r3, [pc, #240]	; (e75c <modeStateMachine+0x30c>)
    e66a:	2000      	movs	r0, #0
    e66c:	1c11      	adds	r1, r2, #0
    e66e:	4798      	blx	r3
    e670:	1c03      	adds	r3, r0, #0
    e672:	1c1c      	adds	r4, r3, #0
			MINIMUM_ALLOWED_VOLTAGE - ch_inst->VmaxCOP,
			ch_inst->Vvarq - ch_inst->VmaxCOP
    e674:	687b      	ldr	r3, [r7, #4]
    e676:	6a59      	ldr	r1, [r3, #36]	; 0x24
    e678:	687b      	ldr	r3, [r7, #4]
    e67a:	6a1a      	ldr	r2, [r3, #32]
			ch_inst->mode_state = STATE_HIGH_COP;
		}
		if (ch_inst->previousModeState != STATE_VAR_Q) {
			//pid_inst->inAuto = true;
			pidSetTunings(pid_inst, pid_inst->kp_varq, pid_inst->ki_varq, pid_inst->kd_varq);
			pidSetOutputLimits(pid_inst,
    e67c:	4b37      	ldr	r3, [pc, #220]	; (e75c <modeStateMachine+0x30c>)
    e67e:	1c08      	adds	r0, r1, #0
    e680:	1c11      	adds	r1, r2, #0
    e682:	4798      	blx	r3
    e684:	1c03      	adds	r3, r0, #0
    e686:	68fa      	ldr	r2, [r7, #12]
    e688:	1c10      	adds	r0, r2, #0
    e68a:	1c21      	adds	r1, r4, #0
    e68c:	1c1a      	adds	r2, r3, #0
    e68e:	4b3a      	ldr	r3, [pc, #232]	; (e778 <modeStateMachine+0x328>)
    e690:	4798      	blx	r3
			MINIMUM_ALLOWED_VOLTAGE - ch_inst->VmaxCOP,
			ch_inst->Vvarq - ch_inst->VmaxCOP
			);
		}
		if (ch_inst->operatingMode==BANG_BANG_MODE) {
    e692:	687a      	ldr	r2, [r7, #4]
    e694:	233c      	movs	r3, #60	; 0x3c
    e696:	5cd3      	ldrb	r3, [r2, r3]
    e698:	2b01      	cmp	r3, #1
    e69a:	d104      	bne.n	e6a6 <modeStateMachine+0x256>
			ps_inst->desiredVoltage = maxOutputVoltage;
    e69c:	4b35      	ldr	r3, [pc, #212]	; (e774 <modeStateMachine+0x324>)
    e69e:	681a      	ldr	r2, [r3, #0]
    e6a0:	68bb      	ldr	r3, [r7, #8]
    e6a2:	615a      	str	r2, [r3, #20]
    e6a4:	e00b      	b.n	e6be <modeStateMachine+0x26e>
			} else {
			ps_inst->desiredVoltage = ch_inst->VmaxCOP + pid_inst->Output;
    e6a6:	687b      	ldr	r3, [r7, #4]
    e6a8:	6a19      	ldr	r1, [r3, #32]
    e6aa:	68fb      	ldr	r3, [r7, #12]
    e6ac:	6a1a      	ldr	r2, [r3, #32]
    e6ae:	4b33      	ldr	r3, [pc, #204]	; (e77c <modeStateMachine+0x32c>)
    e6b0:	1c08      	adds	r0, r1, #0
    e6b2:	1c11      	adds	r1, r2, #0
    e6b4:	4798      	blx	r3
    e6b6:	1c03      	adds	r3, r0, #0
    e6b8:	1c1a      	adds	r2, r3, #0
    e6ba:	68bb      	ldr	r3, [r7, #8]
    e6bc:	615a      	str	r2, [r3, #20]
		}
		ch_inst->previousModeState = STATE_VAR_Q;
    e6be:	687b      	ldr	r3, [r7, #4]
    e6c0:	2203      	movs	r2, #3
    e6c2:	705a      	strb	r2, [r3, #1]
    e6c4:	e0f9      	b.n	e8ba <modeStateMachine+0x46a>
		
	// high cop ///////////////////////////////
	} else if (ch_inst->mode_state == STATE_HIGH_COP) {
    e6c6:	687b      	ldr	r3, [r7, #4]
    e6c8:	781b      	ldrb	r3, [r3, #0]
    e6ca:	2b04      	cmp	r3, #4
    e6cc:	d000      	beq.n	e6d0 <modeStateMachine+0x280>
    e6ce:	e0f0      	b.n	e8b2 <modeStateMachine+0x462>
		if ( (rejectSense >= ch_inst->rejectLimitCritical) || (controlTemperature < ch_inst->setpoint-ch_inst->deadbandLow-0.05) ) {
    e6d0:	687b      	ldr	r3, [r7, #4]
    e6d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e6d4:	4b24      	ldr	r3, [pc, #144]	; (e768 <modeStateMachine+0x318>)
    e6d6:	1c10      	adds	r0, r2, #0
    e6d8:	6979      	ldr	r1, [r7, #20]
    e6da:	4798      	blx	r3
    e6dc:	1c03      	adds	r3, r0, #0
    e6de:	2b00      	cmp	r3, #0
    e6e0:	d128      	bne.n	e734 <modeStateMachine+0x2e4>
    e6e2:	4b1f      	ldr	r3, [pc, #124]	; (e760 <modeStateMachine+0x310>)
    e6e4:	681a      	ldr	r2, [r3, #0]
    e6e6:	4b26      	ldr	r3, [pc, #152]	; (e780 <modeStateMachine+0x330>)
    e6e8:	1c10      	adds	r0, r2, #0
    e6ea:	4798      	blx	r3
    e6ec:	1c05      	adds	r5, r0, #0
    e6ee:	1c0e      	adds	r6, r1, #0
    e6f0:	687b      	ldr	r3, [r7, #4]
    e6f2:	6999      	ldr	r1, [r3, #24]
    e6f4:	687b      	ldr	r3, [r7, #4]
    e6f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e6f8:	4b18      	ldr	r3, [pc, #96]	; (e75c <modeStateMachine+0x30c>)
    e6fa:	1c08      	adds	r0, r1, #0
    e6fc:	1c11      	adds	r1, r2, #0
    e6fe:	4798      	blx	r3
    e700:	1c03      	adds	r3, r0, #0
    e702:	1c1a      	adds	r2, r3, #0
    e704:	4b1e      	ldr	r3, [pc, #120]	; (e780 <modeStateMachine+0x330>)
    e706:	1c10      	adds	r0, r2, #0
    e708:	4798      	blx	r3
    e70a:	1c03      	adds	r3, r0, #0
    e70c:	1c0c      	adds	r4, r1, #0
    e70e:	4a1d      	ldr	r2, [pc, #116]	; (e784 <modeStateMachine+0x334>)
    e710:	4694      	mov	ip, r2
    e712:	1c18      	adds	r0, r3, #0
    e714:	1c21      	adds	r1, r4, #0
    e716:	4b0b      	ldr	r3, [pc, #44]	; (e744 <modeStateMachine+0x2f4>)
    e718:	4a09      	ldr	r2, [pc, #36]	; (e740 <modeStateMachine+0x2f0>)
    e71a:	47e0      	blx	ip
    e71c:	1c03      	adds	r3, r0, #0
    e71e:	1c0c      	adds	r4, r1, #0
    e720:	4a19      	ldr	r2, [pc, #100]	; (e788 <modeStateMachine+0x338>)
    e722:	4694      	mov	ip, r2
    e724:	1c28      	adds	r0, r5, #0
    e726:	1c31      	adds	r1, r6, #0
    e728:	1c1a      	adds	r2, r3, #0
    e72a:	1c23      	adds	r3, r4, #0
    e72c:	47e0      	blx	ip
    e72e:	1c03      	adds	r3, r0, #0
    e730:	2b00      	cmp	r3, #0
    e732:	d02b      	beq.n	e78c <modeStateMachine+0x33c>
			ch_inst->mode_state = STATE_IDLE;
    e734:	687b      	ldr	r3, [r7, #4]
    e736:	2201      	movs	r2, #1
    e738:	701a      	strb	r2, [r3, #0]
    e73a:	e03d      	b.n	e7b8 <modeStateMachine+0x368>
    e73c:	46c0      	nop			; (mov r8, r8)
    e73e:	46c0      	nop			; (mov r8, r8)
    e740:	9999999a 	.word	0x9999999a
    e744:	3fa99999 	.word	0x3fa99999
    e748:	200009b8 	.word	0x200009b8
    e74c:	20000960 	.word	0x20000960
    e750:	0001f655 	.word	0x0001f655
    e754:	20000332 	.word	0x20000332
    e758:	41380000 	.word	0x41380000
    e75c:	00020089 	.word	0x00020089
    e760:	20000188 	.word	0x20000188
    e764:	0001f62d 	.word	0x0001f62d
    e768:	0001f641 	.word	0x0001f641
    e76c:	0001f669 	.word	0x0001f669
    e770:	0000a559 	.word	0x0000a559
    e774:	20000084 	.word	0x20000084
    e778:	0000a485 	.word	0x0000a485
    e77c:	0001f79d 	.word	0x0001f79d
    e780:	00022111 	.word	0x00022111
    e784:	00021959 	.word	0x00021959
    e788:	0001f5b9 	.word	0x0001f5b9
		} else if ( (controlTemperature >= ch_inst->setpoint+ch_inst->deadband) ) {
    e78c:	687b      	ldr	r3, [r7, #4]
    e78e:	6999      	ldr	r1, [r3, #24]
    e790:	687b      	ldr	r3, [r7, #4]
    e792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    e794:	4b6a      	ldr	r3, [pc, #424]	; (e940 <modeStateMachine+0x4f0>)
    e796:	1c08      	adds	r0, r1, #0
    e798:	1c11      	adds	r1, r2, #0
    e79a:	4798      	blx	r3
    e79c:	1c03      	adds	r3, r0, #0
    e79e:	1c19      	adds	r1, r3, #0
    e7a0:	4b68      	ldr	r3, [pc, #416]	; (e944 <modeStateMachine+0x4f4>)
    e7a2:	681a      	ldr	r2, [r3, #0]
    e7a4:	4b68      	ldr	r3, [pc, #416]	; (e948 <modeStateMachine+0x4f8>)
    e7a6:	1c08      	adds	r0, r1, #0
    e7a8:	1c11      	adds	r1, r2, #0
    e7aa:	4798      	blx	r3
    e7ac:	1c03      	adds	r3, r0, #0
    e7ae:	2b00      	cmp	r3, #0
    e7b0:	d002      	beq.n	e7b8 <modeStateMachine+0x368>
			ch_inst->mode_state = STATE_HIGH_Q;
    e7b2:	687b      	ldr	r3, [r7, #4]
    e7b4:	2202      	movs	r2, #2
    e7b6:	701a      	strb	r2, [r3, #0]
		}
		if (ch_inst->previousModeState != STATE_HIGH_COP) {
    e7b8:	687b      	ldr	r3, [r7, #4]
    e7ba:	785b      	ldrb	r3, [r3, #1]
    e7bc:	2b04      	cmp	r3, #4
    e7be:	d01f      	beq.n	e800 <modeStateMachine+0x3b0>
			//pid_inst->inAuto = true;
			pidSetTunings(pid_inst, pid_inst->kp_copq, pid_inst->ki_copq, pid_inst->kd_copq);
    e7c0:	68fb      	ldr	r3, [r7, #12]
    e7c2:	6e99      	ldr	r1, [r3, #104]	; 0x68
    e7c4:	68fb      	ldr	r3, [r7, #12]
    e7c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    e7c8:	68fb      	ldr	r3, [r7, #12]
    e7ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    e7cc:	68f8      	ldr	r0, [r7, #12]
    e7ce:	4c5f      	ldr	r4, [pc, #380]	; (e94c <modeStateMachine+0x4fc>)
    e7d0:	47a0      	blx	r4
			pidSetOutputLimits(pid_inst,
			MINIMUM_ALLOWED_VOLTAGE - ch_inst->VmaxCOP,
    e7d2:	687b      	ldr	r3, [r7, #4]
    e7d4:	6a1a      	ldr	r2, [r3, #32]
			ch_inst->mode_state = STATE_HIGH_Q;
		}
		if (ch_inst->previousModeState != STATE_HIGH_COP) {
			//pid_inst->inAuto = true;
			pidSetTunings(pid_inst, pid_inst->kp_copq, pid_inst->ki_copq, pid_inst->kd_copq);
			pidSetOutputLimits(pid_inst,
    e7d6:	4b5e      	ldr	r3, [pc, #376]	; (e950 <modeStateMachine+0x500>)
    e7d8:	2000      	movs	r0, #0
    e7da:	1c11      	adds	r1, r2, #0
    e7dc:	4798      	blx	r3
    e7de:	1c03      	adds	r3, r0, #0
    e7e0:	1c1c      	adds	r4, r3, #0
    e7e2:	4b5c      	ldr	r3, [pc, #368]	; (e954 <modeStateMachine+0x504>)
    e7e4:	6819      	ldr	r1, [r3, #0]
			MINIMUM_ALLOWED_VOLTAGE - ch_inst->VmaxCOP,
			maxOutputVoltage - ch_inst->VmaxCOP
    e7e6:	687b      	ldr	r3, [r7, #4]
    e7e8:	6a1a      	ldr	r2, [r3, #32]
			ch_inst->mode_state = STATE_HIGH_Q;
		}
		if (ch_inst->previousModeState != STATE_HIGH_COP) {
			//pid_inst->inAuto = true;
			pidSetTunings(pid_inst, pid_inst->kp_copq, pid_inst->ki_copq, pid_inst->kd_copq);
			pidSetOutputLimits(pid_inst,
    e7ea:	4b59      	ldr	r3, [pc, #356]	; (e950 <modeStateMachine+0x500>)
    e7ec:	1c08      	adds	r0, r1, #0
    e7ee:	1c11      	adds	r1, r2, #0
    e7f0:	4798      	blx	r3
    e7f2:	1c03      	adds	r3, r0, #0
    e7f4:	68fa      	ldr	r2, [r7, #12]
    e7f6:	1c10      	adds	r0, r2, #0
    e7f8:	1c21      	adds	r1, r4, #0
    e7fa:	1c1a      	adds	r2, r3, #0
    e7fc:	4b56      	ldr	r3, [pc, #344]	; (e958 <modeStateMachine+0x508>)
    e7fe:	4798      	blx	r3
			MINIMUM_ALLOWED_VOLTAGE - ch_inst->VmaxCOP,
			maxOutputVoltage - ch_inst->VmaxCOP
			);
			//ch_inst->fanState = OFF;
		}
		if (enablePwrCap == false)
    e800:	4b56      	ldr	r3, [pc, #344]	; (e95c <modeStateMachine+0x50c>)
    e802:	781b      	ldrb	r3, [r3, #0]
    e804:	2201      	movs	r2, #1
    e806:	4053      	eors	r3, r2
    e808:	b2db      	uxtb	r3, r3
    e80a:	2b00      	cmp	r3, #0
    e80c:	d017      	beq.n	e83e <modeStateMachine+0x3ee>
		{
			pidSetOutputLimits(pid_inst,
			MINIMUM_ALLOWED_VOLTAGE - ch_inst->VmaxCOP,
    e80e:	687b      	ldr	r3, [r7, #4]
    e810:	6a1a      	ldr	r2, [r3, #32]
			);
			//ch_inst->fanState = OFF;
		}
		if (enablePwrCap == false)
		{
			pidSetOutputLimits(pid_inst,
    e812:	4b4f      	ldr	r3, [pc, #316]	; (e950 <modeStateMachine+0x500>)
    e814:	2000      	movs	r0, #0
    e816:	1c11      	adds	r1, r2, #0
    e818:	4798      	blx	r3
    e81a:	1c03      	adds	r3, r0, #0
    e81c:	1c1c      	adds	r4, r3, #0
    e81e:	4b4d      	ldr	r3, [pc, #308]	; (e954 <modeStateMachine+0x504>)
    e820:	6819      	ldr	r1, [r3, #0]
			MINIMUM_ALLOWED_VOLTAGE - ch_inst->VmaxCOP,
			maxOutputVoltage - ch_inst->VmaxCOP
    e822:	687b      	ldr	r3, [r7, #4]
    e824:	6a1a      	ldr	r2, [r3, #32]
			);
			//ch_inst->fanState = OFF;
		}
		if (enablePwrCap == false)
		{
			pidSetOutputLimits(pid_inst,
    e826:	4b4a      	ldr	r3, [pc, #296]	; (e950 <modeStateMachine+0x500>)
    e828:	1c08      	adds	r0, r1, #0
    e82a:	1c11      	adds	r1, r2, #0
    e82c:	4798      	blx	r3
    e82e:	1c03      	adds	r3, r0, #0
    e830:	68fa      	ldr	r2, [r7, #12]
    e832:	1c10      	adds	r0, r2, #0
    e834:	1c21      	adds	r1, r4, #0
    e836:	1c1a      	adds	r2, r3, #0
    e838:	4b47      	ldr	r3, [pc, #284]	; (e958 <modeStateMachine+0x508>)
    e83a:	4798      	blx	r3
    e83c:	e01b      	b.n	e876 <modeStateMachine+0x426>
			);
		}
		else //if (enablePwrCap == true)
		{
			pidSetOutputLimits(pid_inst,
			MINIMUM_ALLOWED_VOLTAGE - ch_inst->VmaxCOP,
    e83e:	687b      	ldr	r3, [r7, #4]
    e840:	6a1a      	ldr	r2, [r3, #32]
			maxOutputVoltage - ch_inst->VmaxCOP
			);
		}
		else //if (enablePwrCap == true)
		{
			pidSetOutputLimits(pid_inst,
    e842:	4b43      	ldr	r3, [pc, #268]	; (e950 <modeStateMachine+0x500>)
    e844:	2000      	movs	r0, #0
    e846:	1c11      	adds	r1, r2, #0
    e848:	4798      	blx	r3
    e84a:	1c03      	adds	r3, r0, #0
    e84c:	1c1c      	adds	r4, r3, #0
    e84e:	4b44      	ldr	r3, [pc, #272]	; (e960 <modeStateMachine+0x510>)
    e850:	781b      	ldrb	r3, [r3, #0]
    e852:	1c1a      	adds	r2, r3, #0
    e854:	4b43      	ldr	r3, [pc, #268]	; (e964 <modeStateMachine+0x514>)
    e856:	1c10      	adds	r0, r2, #0
    e858:	4798      	blx	r3
    e85a:	1c01      	adds	r1, r0, #0
			MINIMUM_ALLOWED_VOLTAGE - ch_inst->VmaxCOP,
			bulk_voltage_max - ch_inst->VmaxCOP
    e85c:	687b      	ldr	r3, [r7, #4]
    e85e:	6a1a      	ldr	r2, [r3, #32]
			maxOutputVoltage - ch_inst->VmaxCOP
			);
		}
		else //if (enablePwrCap == true)
		{
			pidSetOutputLimits(pid_inst,
    e860:	4b3b      	ldr	r3, [pc, #236]	; (e950 <modeStateMachine+0x500>)
    e862:	1c08      	adds	r0, r1, #0
    e864:	1c11      	adds	r1, r2, #0
    e866:	4798      	blx	r3
    e868:	1c03      	adds	r3, r0, #0
    e86a:	68fa      	ldr	r2, [r7, #12]
    e86c:	1c10      	adds	r0, r2, #0
    e86e:	1c21      	adds	r1, r4, #0
    e870:	1c1a      	adds	r2, r3, #0
    e872:	4b39      	ldr	r3, [pc, #228]	; (e958 <modeStateMachine+0x508>)
    e874:	4798      	blx	r3
			MINIMUM_ALLOWED_VOLTAGE - ch_inst->VmaxCOP,
			bulk_voltage_max - ch_inst->VmaxCOP
			);
		}
		if (ch_inst->operatingMode==BANG_BANG_MODE) {
    e876:	687a      	ldr	r2, [r7, #4]
    e878:	233c      	movs	r3, #60	; 0x3c
    e87a:	5cd3      	ldrb	r3, [r2, r3]
    e87c:	2b01      	cmp	r3, #1
    e87e:	d108      	bne.n	e892 <modeStateMachine+0x442>
			ps_inst->desiredVoltage = bulk_voltage_nom;
    e880:	4b39      	ldr	r3, [pc, #228]	; (e968 <modeStateMachine+0x518>)
    e882:	781a      	ldrb	r2, [r3, #0]
    e884:	4b39      	ldr	r3, [pc, #228]	; (e96c <modeStateMachine+0x51c>)
    e886:	1c10      	adds	r0, r2, #0
    e888:	4798      	blx	r3
    e88a:	1c02      	adds	r2, r0, #0
    e88c:	68bb      	ldr	r3, [r7, #8]
    e88e:	615a      	str	r2, [r3, #20]
    e890:	e00b      	b.n	e8aa <modeStateMachine+0x45a>
			} else {
			ps_inst->desiredVoltage = ch_inst->VmaxCOP + pid_inst->Output;
    e892:	687b      	ldr	r3, [r7, #4]
    e894:	6a19      	ldr	r1, [r3, #32]
    e896:	68fb      	ldr	r3, [r7, #12]
    e898:	6a1a      	ldr	r2, [r3, #32]
    e89a:	4b29      	ldr	r3, [pc, #164]	; (e940 <modeStateMachine+0x4f0>)
    e89c:	1c08      	adds	r0, r1, #0
    e89e:	1c11      	adds	r1, r2, #0
    e8a0:	4798      	blx	r3
    e8a2:	1c03      	adds	r3, r0, #0
    e8a4:	1c1a      	adds	r2, r3, #0
    e8a6:	68bb      	ldr	r3, [r7, #8]
    e8a8:	615a      	str	r2, [r3, #20]
		}
		ch_inst->previousModeState = STATE_HIGH_COP;
    e8aa:	687b      	ldr	r3, [r7, #4]
    e8ac:	2204      	movs	r2, #4
    e8ae:	705a      	strb	r2, [r3, #1]
    e8b0:	e003      	b.n	e8ba <modeStateMachine+0x46a>

	// other /////////////////////////////////
	} else {
		//pid_inst->inAuto = true;
		ch_inst->mode_state = ch_inst->previousModeState;
    e8b2:	687b      	ldr	r3, [r7, #4]
    e8b4:	785a      	ldrb	r2, [r3, #1]
    e8b6:	687b      	ldr	r3, [r7, #4]
    e8b8:	701a      	strb	r2, [r3, #0]
	}
	//}
		
	// reduce granularity of setpoint voltage to whole number
	if (ps_inst->desiredVoltage > 0.0)
    e8ba:	68bb      	ldr	r3, [r7, #8]
    e8bc:	695a      	ldr	r2, [r3, #20]
    e8be:	4b2c      	ldr	r3, [pc, #176]	; (e970 <modeStateMachine+0x520>)
    e8c0:	1c10      	adds	r0, r2, #0
    e8c2:	2100      	movs	r1, #0
    e8c4:	4798      	blx	r3
    e8c6:	1c03      	adds	r3, r0, #0
    e8c8:	2b00      	cmp	r3, #0
    e8ca:	d100      	bne.n	e8ce <modeStateMachine+0x47e>
	{
		ps_inst->desiredVoltage = floor( (ps_inst->desiredVoltage*2) + 0.5 ) / 2; //( round(ps_inst->desiredVoltage*10.0) / 10 );
	}
	
	return;
    e8cc:	e02a      	b.n	e924 <modeStateMachine+0x4d4>
	//}
		
	// reduce granularity of setpoint voltage to whole number
	if (ps_inst->desiredVoltage > 0.0)
	{
		ps_inst->desiredVoltage = floor( (ps_inst->desiredVoltage*2) + 0.5 ) / 2; //( round(ps_inst->desiredVoltage*10.0) / 10 );
    e8ce:	68bb      	ldr	r3, [r7, #8]
    e8d0:	695b      	ldr	r3, [r3, #20]
    e8d2:	4a1b      	ldr	r2, [pc, #108]	; (e940 <modeStateMachine+0x4f0>)
    e8d4:	1c18      	adds	r0, r3, #0
    e8d6:	1c19      	adds	r1, r3, #0
    e8d8:	4790      	blx	r2
    e8da:	1c03      	adds	r3, r0, #0
    e8dc:	1c1a      	adds	r2, r3, #0
    e8de:	4b25      	ldr	r3, [pc, #148]	; (e974 <modeStateMachine+0x524>)
    e8e0:	1c10      	adds	r0, r2, #0
    e8e2:	4798      	blx	r3
    e8e4:	1c03      	adds	r3, r0, #0
    e8e6:	1c0c      	adds	r4, r1, #0
    e8e8:	4d23      	ldr	r5, [pc, #140]	; (e978 <modeStateMachine+0x528>)
    e8ea:	1c18      	adds	r0, r3, #0
    e8ec:	1c21      	adds	r1, r4, #0
    e8ee:	4b11      	ldr	r3, [pc, #68]	; (e934 <modeStateMachine+0x4e4>)
    e8f0:	4a0f      	ldr	r2, [pc, #60]	; (e930 <modeStateMachine+0x4e0>)
    e8f2:	47a8      	blx	r5
    e8f4:	1c03      	adds	r3, r0, #0
    e8f6:	1c0c      	adds	r4, r1, #0
    e8f8:	1c18      	adds	r0, r3, #0
    e8fa:	1c21      	adds	r1, r4, #0
    e8fc:	4b1f      	ldr	r3, [pc, #124]	; (e97c <modeStateMachine+0x52c>)
    e8fe:	4798      	blx	r3
    e900:	1c03      	adds	r3, r0, #0
    e902:	1c0c      	adds	r4, r1, #0
    e904:	4d1e      	ldr	r5, [pc, #120]	; (e980 <modeStateMachine+0x530>)
    e906:	1c18      	adds	r0, r3, #0
    e908:	1c21      	adds	r1, r4, #0
    e90a:	4a0b      	ldr	r2, [pc, #44]	; (e938 <modeStateMachine+0x4e8>)
    e90c:	4b0b      	ldr	r3, [pc, #44]	; (e93c <modeStateMachine+0x4ec>)
    e90e:	47a8      	blx	r5
    e910:	1c03      	adds	r3, r0, #0
    e912:	1c0c      	adds	r4, r1, #0
    e914:	4a1b      	ldr	r2, [pc, #108]	; (e984 <modeStateMachine+0x534>)
    e916:	1c18      	adds	r0, r3, #0
    e918:	1c21      	adds	r1, r4, #0
    e91a:	4790      	blx	r2
    e91c:	1c02      	adds	r2, r0, #0
    e91e:	68bb      	ldr	r3, [r7, #8]
    e920:	615a      	str	r2, [r3, #20]
	}
	
	return;
    e922:	46c0      	nop			; (mov r8, r8)
}
    e924:	46bd      	mov	sp, r7
    e926:	b007      	add	sp, #28
    e928:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e92a:	46c0      	nop			; (mov r8, r8)
    e92c:	46c0      	nop			; (mov r8, r8)
    e92e:	46c0      	nop			; (mov r8, r8)
    e930:	00000000 	.word	0x00000000
    e934:	3fe00000 	.word	0x3fe00000
    e938:	00000000 	.word	0x00000000
    e93c:	40000000 	.word	0x40000000
    e940:	0001f79d 	.word	0x0001f79d
    e944:	20000188 	.word	0x20000188
    e948:	0001f641 	.word	0x0001f641
    e94c:	0000a559 	.word	0x0000a559
    e950:	00020089 	.word	0x00020089
    e954:	20000084 	.word	0x20000084
    e958:	0000a485 	.word	0x0000a485
    e95c:	20000362 	.word	0x20000362
    e960:	20000168 	.word	0x20000168
    e964:	000203b5 	.word	0x000203b5
    e968:	20000169 	.word	0x20000169
    e96c:	0002046d 	.word	0x0002046d
    e970:	0001f655 	.word	0x0001f655
    e974:	00022111 	.word	0x00022111
    e978:	0002050d 	.word	0x0002050d
    e97c:	00019989 	.word	0x00019989
    e980:	00020b55 	.word	0x00020b55
    e984:	000221b5 	.word	0x000221b5

0000e988 <psHwControl_27V_freezer>:
	
	return;
}

void psHwControl_27V_freezer()
{
    e988:	b580      	push	{r7, lr}
    e98a:	af00      	add	r7, sp, #0
	// out-of-bounds voltage setpoint
	if (ps1.desiredVoltage > maxOutputVoltage) {
    e98c:	4b57      	ldr	r3, [pc, #348]	; (eaec <psHwControl_27V_freezer+0x164>)
    e98e:	6959      	ldr	r1, [r3, #20]
    e990:	4b57      	ldr	r3, [pc, #348]	; (eaf0 <psHwControl_27V_freezer+0x168>)
    e992:	681a      	ldr	r2, [r3, #0]
    e994:	4b57      	ldr	r3, [pc, #348]	; (eaf4 <psHwControl_27V_freezer+0x16c>)
    e996:	1c08      	adds	r0, r1, #0
    e998:	1c11      	adds	r1, r2, #0
    e99a:	4798      	blx	r3
    e99c:	1c03      	adds	r3, r0, #0
    e99e:	2b00      	cmp	r3, #0
    e9a0:	d003      	beq.n	e9aa <psHwControl_27V_freezer+0x22>
		ps1.desiredVoltage = maxOutputVoltage;
    e9a2:	4b53      	ldr	r3, [pc, #332]	; (eaf0 <psHwControl_27V_freezer+0x168>)
    e9a4:	681a      	ldr	r2, [r3, #0]
    e9a6:	4b51      	ldr	r3, [pc, #324]	; (eaec <psHwControl_27V_freezer+0x164>)
    e9a8:	615a      	str	r2, [r3, #20]
		
	/////////////////////////////////////////////////////////////////////
	// output disabled
	} if ( (ps1.desiredVoltage <= 0) || (ps1.desiredVoltage < PCP_COLD_STAGE_MIN_OUTPUT_VOLTAGE) ) {
    e9aa:	4b50      	ldr	r3, [pc, #320]	; (eaec <psHwControl_27V_freezer+0x164>)
    e9ac:	695a      	ldr	r2, [r3, #20]
    e9ae:	4b52      	ldr	r3, [pc, #328]	; (eaf8 <psHwControl_27V_freezer+0x170>)
    e9b0:	1c10      	adds	r0, r2, #0
    e9b2:	2100      	movs	r1, #0
    e9b4:	4798      	blx	r3
    e9b6:	1c03      	adds	r3, r0, #0
    e9b8:	2b00      	cmp	r3, #0
    e9ba:	d108      	bne.n	e9ce <psHwControl_27V_freezer+0x46>
    e9bc:	4b4b      	ldr	r3, [pc, #300]	; (eaec <psHwControl_27V_freezer+0x164>)
    e9be:	695a      	ldr	r2, [r3, #20]
    e9c0:	4b4e      	ldr	r3, [pc, #312]	; (eafc <psHwControl_27V_freezer+0x174>)
    e9c2:	1c10      	adds	r0, r2, #0
    e9c4:	494e      	ldr	r1, [pc, #312]	; (eb00 <psHwControl_27V_freezer+0x178>)
    e9c6:	4798      	blx	r3
    e9c8:	1c03      	adds	r3, r0, #0
    e9ca:	2b00      	cmp	r3, #0
    e9cc:	d029      	beq.n	ea22 <psHwControl_27V_freezer+0x9a>
		
		ps1.desiredVoltage = 0;
    e9ce:	4b47      	ldr	r3, [pc, #284]	; (eaec <psHwControl_27V_freezer+0x164>)
    e9d0:	2200      	movs	r2, #0
    e9d2:	615a      	str	r2, [r3, #20]
		
		setBoostVoltage(&ps1, BOOST_OFF_DUTY);
    e9d4:	4a45      	ldr	r2, [pc, #276]	; (eaec <psHwControl_27V_freezer+0x164>)
    e9d6:	4b4b      	ldr	r3, [pc, #300]	; (eb04 <psHwControl_27V_freezer+0x17c>)
    e9d8:	1c10      	adds	r0, r2, #0
    e9da:	1c19      	adds	r1, r3, #0
    e9dc:	4b4a      	ldr	r3, [pc, #296]	; (eb08 <psHwControl_27V_freezer+0x180>)
    e9de:	4798      	blx	r3
		ps1.boostPwmState = OFF;
    e9e0:	4b42      	ldr	r3, [pc, #264]	; (eaec <psHwControl_27V_freezer+0x164>)
    e9e2:	2200      	movs	r2, #0
    e9e4:	705a      	strb	r2, [r3, #1]
		
		setBoostVoltage(&ps2, BOOST_OFF_DUTY);
    e9e6:	4a49      	ldr	r2, [pc, #292]	; (eb0c <psHwControl_27V_freezer+0x184>)
    e9e8:	4b46      	ldr	r3, [pc, #280]	; (eb04 <psHwControl_27V_freezer+0x17c>)
    e9ea:	1c10      	adds	r0, r2, #0
    e9ec:	1c19      	adds	r1, r3, #0
    e9ee:	4b46      	ldr	r3, [pc, #280]	; (eb08 <psHwControl_27V_freezer+0x180>)
    e9f0:	4798      	blx	r3
		ps2.boostPwmState = OFF;
    e9f2:	4b46      	ldr	r3, [pc, #280]	; (eb0c <psHwControl_27V_freezer+0x184>)
    e9f4:	2200      	movs	r2, #0
    e9f6:	705a      	strb	r2, [r3, #1]
		
		setOutputSwitch(PIN_ENBL_OUTA_COLD, GPIO_MODE, OFF);	// cold, sideA
    e9f8:	203f      	movs	r0, #63	; 0x3f
    e9fa:	2101      	movs	r1, #1
    e9fc:	2200      	movs	r2, #0
    e9fe:	4b44      	ldr	r3, [pc, #272]	; (eb10 <psHwControl_27V_freezer+0x188>)
    ea00:	4798      	blx	r3
		setOutputSwitch(PIN_ENBL_OUTA_HOT , GPIO_MODE, OFF);	// hot,  sideA
    ea02:	2023      	movs	r0, #35	; 0x23
    ea04:	2101      	movs	r1, #1
    ea06:	2200      	movs	r2, #0
    ea08:	4b41      	ldr	r3, [pc, #260]	; (eb10 <psHwControl_27V_freezer+0x188>)
    ea0a:	4798      	blx	r3
		setOutputSwitch(PIN_ENBL_OUTB_COLD, GPIO_MODE, OFF);	// cold, sideB
    ea0c:	2008      	movs	r0, #8
    ea0e:	2101      	movs	r1, #1
    ea10:	2200      	movs	r2, #0
    ea12:	4b3f      	ldr	r3, [pc, #252]	; (eb10 <psHwControl_27V_freezer+0x188>)
    ea14:	4798      	blx	r3
		setOutputSwitch(PIN_ENBL_OUTB_HOT , GPIO_MODE, OFF);	// hot,  sideB
    ea16:	2004      	movs	r0, #4
    ea18:	2101      	movs	r1, #1
    ea1a:	2200      	movs	r2, #0
    ea1c:	4b3c      	ldr	r3, [pc, #240]	; (eb10 <psHwControl_27V_freezer+0x188>)
    ea1e:	4798      	blx	r3
    ea20:	e060      	b.n	eae4 <psHwControl_27V_freezer+0x15c>
				
	/////////////////////////////////////////////////////////////////////
	// variable output from boost regulator
	} else {
		
		lookupBoostPwmVal(&ps1, ps1.desiredVoltage);			// cold & hot
    ea22:	4b32      	ldr	r3, [pc, #200]	; (eaec <psHwControl_27V_freezer+0x164>)
    ea24:	695b      	ldr	r3, [r3, #20]
    ea26:	4a31      	ldr	r2, [pc, #196]	; (eaec <psHwControl_27V_freezer+0x164>)
    ea28:	1c10      	adds	r0, r2, #0
    ea2a:	1c19      	adds	r1, r3, #0
    ea2c:	4b39      	ldr	r3, [pc, #228]	; (eb14 <psHwControl_27V_freezer+0x18c>)
    ea2e:	4798      	blx	r3
		
		setBoostVoltage(&ps1, ps1.boostPwm);
    ea30:	4b2e      	ldr	r3, [pc, #184]	; (eaec <psHwControl_27V_freezer+0x164>)
    ea32:	68db      	ldr	r3, [r3, #12]
    ea34:	4a2d      	ldr	r2, [pc, #180]	; (eaec <psHwControl_27V_freezer+0x164>)
    ea36:	1c10      	adds	r0, r2, #0
    ea38:	1c19      	adds	r1, r3, #0
    ea3a:	4b33      	ldr	r3, [pc, #204]	; (eb08 <psHwControl_27V_freezer+0x180>)
    ea3c:	4798      	blx	r3
		delay_ms(10);
    ea3e:	200a      	movs	r0, #10
    ea40:	4b35      	ldr	r3, [pc, #212]	; (eb18 <psHwControl_27V_freezer+0x190>)
    ea42:	4798      	blx	r3
		ps1.boostPwmState = ON;
    ea44:	4b29      	ldr	r3, [pc, #164]	; (eaec <psHwControl_27V_freezer+0x164>)
    ea46:	2201      	movs	r2, #1
    ea48:	705a      	strb	r2, [r3, #1]

		setBoostVoltage(&ps2, ps2.boostPwm);
    ea4a:	4b30      	ldr	r3, [pc, #192]	; (eb0c <psHwControl_27V_freezer+0x184>)
    ea4c:	68db      	ldr	r3, [r3, #12]
    ea4e:	4a2f      	ldr	r2, [pc, #188]	; (eb0c <psHwControl_27V_freezer+0x184>)
    ea50:	1c10      	adds	r0, r2, #0
    ea52:	1c19      	adds	r1, r3, #0
    ea54:	4b2c      	ldr	r3, [pc, #176]	; (eb08 <psHwControl_27V_freezer+0x180>)
    ea56:	4798      	blx	r3
		delay_ms(10);
    ea58:	200a      	movs	r0, #10
    ea5a:	4b2f      	ldr	r3, [pc, #188]	; (eb18 <psHwControl_27V_freezer+0x190>)
    ea5c:	4798      	blx	r3
		ps2.boostPwmState = ON;
    ea5e:	4b2b      	ldr	r3, [pc, #172]	; (eb0c <psHwControl_27V_freezer+0x184>)
    ea60:	2201      	movs	r2, #1
    ea62:	705a      	strb	r2, [r3, #1]
		
		if (!inhibitOutput && enableSideAPcp)
    ea64:	4b2d      	ldr	r3, [pc, #180]	; (eb1c <psHwControl_27V_freezer+0x194>)
    ea66:	781b      	ldrb	r3, [r3, #0]
    ea68:	2201      	movs	r2, #1
    ea6a:	4053      	eors	r3, r2
    ea6c:	b2db      	uxtb	r3, r3
    ea6e:	2b00      	cmp	r3, #0
    ea70:	d00e      	beq.n	ea90 <psHwControl_27V_freezer+0x108>
    ea72:	4b2b      	ldr	r3, [pc, #172]	; (eb20 <psHwControl_27V_freezer+0x198>)
    ea74:	781b      	ldrb	r3, [r3, #0]
    ea76:	2b00      	cmp	r3, #0
    ea78:	d00a      	beq.n	ea90 <psHwControl_27V_freezer+0x108>
		{
			setOutputSwitch(PIN_ENBL_OUTA_COLD, GPIO_MODE, ON);		// cold, sidaA
    ea7a:	203f      	movs	r0, #63	; 0x3f
    ea7c:	2101      	movs	r1, #1
    ea7e:	2201      	movs	r2, #1
    ea80:	4b23      	ldr	r3, [pc, #140]	; (eb10 <psHwControl_27V_freezer+0x188>)
    ea82:	4798      	blx	r3
			setOutputSwitch(PIN_ENBL_OUTA_HOT , GPIO_MODE, ON);		// hot,  sideA		
    ea84:	2023      	movs	r0, #35	; 0x23
    ea86:	2101      	movs	r1, #1
    ea88:	2201      	movs	r2, #1
    ea8a:	4b21      	ldr	r3, [pc, #132]	; (eb10 <psHwControl_27V_freezer+0x188>)
    ea8c:	4798      	blx	r3
    ea8e:	e009      	b.n	eaa4 <psHwControl_27V_freezer+0x11c>
		}
		else
		{
			setOutputSwitch(PIN_ENBL_OUTA_COLD, GPIO_MODE, OFF);	// cold, sideA
    ea90:	203f      	movs	r0, #63	; 0x3f
    ea92:	2101      	movs	r1, #1
    ea94:	2200      	movs	r2, #0
    ea96:	4b1e      	ldr	r3, [pc, #120]	; (eb10 <psHwControl_27V_freezer+0x188>)
    ea98:	4798      	blx	r3
			setOutputSwitch(PIN_ENBL_OUTA_HOT , GPIO_MODE, OFF);	// hot,  sideA			
    ea9a:	2023      	movs	r0, #35	; 0x23
    ea9c:	2101      	movs	r1, #1
    ea9e:	2200      	movs	r2, #0
    eaa0:	4b1b      	ldr	r3, [pc, #108]	; (eb10 <psHwControl_27V_freezer+0x188>)
    eaa2:	4798      	blx	r3
		}
		
		if (!inhibitOutput && enableSideBPcp)
    eaa4:	4b1d      	ldr	r3, [pc, #116]	; (eb1c <psHwControl_27V_freezer+0x194>)
    eaa6:	781b      	ldrb	r3, [r3, #0]
    eaa8:	2201      	movs	r2, #1
    eaaa:	4053      	eors	r3, r2
    eaac:	b2db      	uxtb	r3, r3
    eaae:	2b00      	cmp	r3, #0
    eab0:	d00e      	beq.n	ead0 <psHwControl_27V_freezer+0x148>
    eab2:	4b1c      	ldr	r3, [pc, #112]	; (eb24 <psHwControl_27V_freezer+0x19c>)
    eab4:	781b      	ldrb	r3, [r3, #0]
    eab6:	2b00      	cmp	r3, #0
    eab8:	d00a      	beq.n	ead0 <psHwControl_27V_freezer+0x148>
		{
			setOutputSwitch(PIN_ENBL_OUTB_COLD, GPIO_MODE, ON);		// cold, sidaA
    eaba:	2008      	movs	r0, #8
    eabc:	2101      	movs	r1, #1
    eabe:	2201      	movs	r2, #1
    eac0:	4b13      	ldr	r3, [pc, #76]	; (eb10 <psHwControl_27V_freezer+0x188>)
    eac2:	4798      	blx	r3
			setOutputSwitch(PIN_ENBL_OUTB_HOT , GPIO_MODE, ON);		// hot,  sideA
    eac4:	2004      	movs	r0, #4
    eac6:	2101      	movs	r1, #1
    eac8:	2201      	movs	r2, #1
    eaca:	4b11      	ldr	r3, [pc, #68]	; (eb10 <psHwControl_27V_freezer+0x188>)
    eacc:	4798      	blx	r3
    eace:	e009      	b.n	eae4 <psHwControl_27V_freezer+0x15c>
		}
		else
		{
			setOutputSwitch(PIN_ENBL_OUTB_COLD, GPIO_MODE, OFF);	// cold, sideA
    ead0:	2008      	movs	r0, #8
    ead2:	2101      	movs	r1, #1
    ead4:	2200      	movs	r2, #0
    ead6:	4b0e      	ldr	r3, [pc, #56]	; (eb10 <psHwControl_27V_freezer+0x188>)
    ead8:	4798      	blx	r3
			setOutputSwitch(PIN_ENBL_OUTB_HOT , GPIO_MODE, OFF);	// hot,  sideA
    eada:	2004      	movs	r0, #4
    eadc:	2101      	movs	r1, #1
    eade:	2200      	movs	r2, #0
    eae0:	4b0b      	ldr	r3, [pc, #44]	; (eb10 <psHwControl_27V_freezer+0x188>)
    eae2:	4798      	blx	r3
		}
	}
	
	return;
    eae4:	46c0      	nop			; (mov r8, r8)
}
    eae6:	46bd      	mov	sp, r7
    eae8:	bd80      	pop	{r7, pc}
    eaea:	46c0      	nop			; (mov r8, r8)
    eaec:	20000a84 	.word	0x20000a84
    eaf0:	20000084 	.word	0x20000084
    eaf4:	0001f655 	.word	0x0001f655
    eaf8:	0001f641 	.word	0x0001f641
    eafc:	0001f62d 	.word	0x0001f62d
    eb00:	41380000 	.word	0x41380000
    eb04:	0000ffff 	.word	0x0000ffff
    eb08:	0000ee79 	.word	0x0000ee79
    eb0c:	20000d64 	.word	0x20000d64
    eb10:	0000ecc9 	.word	0x0000ecc9
    eb14:	0000eb29 	.word	0x0000eb29
    eb18:	000105b1 	.word	0x000105b1
    eb1c:	20000178 	.word	0x20000178
    eb20:	2000017b 	.word	0x2000017b
    eb24:	2000017c 	.word	0x2000017c

0000eb28 <lookupBoostPwmVal>:
		ps2.outputDuty = 0.0;
	}	
}

uint16_t lookupBoostPwmVal(struct ps_vars *ps_inst, float voltage)
{
    eb28:	b5b0      	push	{r4, r5, r7, lr}
    eb2a:	b086      	sub	sp, #24
    eb2c:	af00      	add	r7, sp, #0
    eb2e:	6078      	str	r0, [r7, #4]
    eb30:	6039      	str	r1, [r7, #0]
	uint16_t pwmVal = 0;
    eb32:	1c3b      	adds	r3, r7, #0
    eb34:	3316      	adds	r3, #22
    eb36:	2200      	movs	r2, #0
    eb38:	801a      	strh	r2, [r3, #0]
	float f_idx = 0.;
    eb3a:	2300      	movs	r3, #0
    eb3c:	613b      	str	r3, [r7, #16]
	uint8_t idx = 0;
    eb3e:	1c3b      	adds	r3, r7, #0
    eb40:	330f      	adds	r3, #15
    eb42:	2200      	movs	r2, #0
    eb44:	701a      	strb	r2, [r3, #0]
	
	if (voltage <= ps_inst->minVoltage)
    eb46:	687b      	ldr	r3, [r7, #4]
    eb48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    eb4a:	4b4f      	ldr	r3, [pc, #316]	; (ec88 <lookupBoostPwmVal+0x160>)
    eb4c:	1c10      	adds	r0, r2, #0
    eb4e:	6839      	ldr	r1, [r7, #0]
    eb50:	4798      	blx	r3
    eb52:	1c03      	adds	r3, r0, #0
    eb54:	2b00      	cmp	r3, #0
    eb56:	d002      	beq.n	eb5e <lookupBoostPwmVal+0x36>
	{
		voltage = ps_inst->minVoltage;
    eb58:	687b      	ldr	r3, [r7, #4]
    eb5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    eb5c:	603b      	str	r3, [r7, #0]
	}
	if (voltage >= ps_inst->maxVoltage)
    eb5e:	687b      	ldr	r3, [r7, #4]
    eb60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    eb62:	4b4a      	ldr	r3, [pc, #296]	; (ec8c <lookupBoostPwmVal+0x164>)
    eb64:	1c10      	adds	r0, r2, #0
    eb66:	6839      	ldr	r1, [r7, #0]
    eb68:	4798      	blx	r3
    eb6a:	1c03      	adds	r3, r0, #0
    eb6c:	2b00      	cmp	r3, #0
    eb6e:	d002      	beq.n	eb76 <lookupBoostPwmVal+0x4e>
	{
		voltage = ps_inst->maxVoltage;
    eb70:	687b      	ldr	r3, [r7, #4]
    eb72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    eb74:	603b      	str	r3, [r7, #0]
	}
	voltage = floor( (voltage*2) + 0.5 ) / 2;
    eb76:	683b      	ldr	r3, [r7, #0]
    eb78:	4a45      	ldr	r2, [pc, #276]	; (ec90 <lookupBoostPwmVal+0x168>)
    eb7a:	1c18      	adds	r0, r3, #0
    eb7c:	1c19      	adds	r1, r3, #0
    eb7e:	4790      	blx	r2
    eb80:	1c03      	adds	r3, r0, #0
    eb82:	1c1a      	adds	r2, r3, #0
    eb84:	4b43      	ldr	r3, [pc, #268]	; (ec94 <lookupBoostPwmVal+0x16c>)
    eb86:	1c10      	adds	r0, r2, #0
    eb88:	4798      	blx	r3
    eb8a:	1c03      	adds	r3, r0, #0
    eb8c:	1c0c      	adds	r4, r1, #0
    eb8e:	4d42      	ldr	r5, [pc, #264]	; (ec98 <lookupBoostPwmVal+0x170>)
    eb90:	1c18      	adds	r0, r3, #0
    eb92:	1c21      	adds	r1, r4, #0
    eb94:	4b39      	ldr	r3, [pc, #228]	; (ec7c <lookupBoostPwmVal+0x154>)
    eb96:	4a38      	ldr	r2, [pc, #224]	; (ec78 <lookupBoostPwmVal+0x150>)
    eb98:	47a8      	blx	r5
    eb9a:	1c03      	adds	r3, r0, #0
    eb9c:	1c0c      	adds	r4, r1, #0
    eb9e:	1c18      	adds	r0, r3, #0
    eba0:	1c21      	adds	r1, r4, #0
    eba2:	4b3e      	ldr	r3, [pc, #248]	; (ec9c <lookupBoostPwmVal+0x174>)
    eba4:	4798      	blx	r3
    eba6:	1c03      	adds	r3, r0, #0
    eba8:	1c0c      	adds	r4, r1, #0
    ebaa:	4d3d      	ldr	r5, [pc, #244]	; (eca0 <lookupBoostPwmVal+0x178>)
    ebac:	1c18      	adds	r0, r3, #0
    ebae:	1c21      	adds	r1, r4, #0
    ebb0:	4a33      	ldr	r2, [pc, #204]	; (ec80 <lookupBoostPwmVal+0x158>)
    ebb2:	4b34      	ldr	r3, [pc, #208]	; (ec84 <lookupBoostPwmVal+0x15c>)
    ebb4:	47a8      	blx	r5
    ebb6:	1c03      	adds	r3, r0, #0
    ebb8:	1c0c      	adds	r4, r1, #0
    ebba:	4a3a      	ldr	r2, [pc, #232]	; (eca4 <lookupBoostPwmVal+0x17c>)
    ebbc:	1c18      	adds	r0, r3, #0
    ebbe:	1c21      	adds	r1, r4, #0
    ebc0:	4790      	blx	r2
    ebc2:	1c03      	adds	r3, r0, #0
    ebc4:	603b      	str	r3, [r7, #0]
	f_idx  = voltage - ps_inst->minVoltage;
    ebc6:	687b      	ldr	r3, [r7, #4]
    ebc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    ebca:	4b37      	ldr	r3, [pc, #220]	; (eca8 <lookupBoostPwmVal+0x180>)
    ebcc:	6838      	ldr	r0, [r7, #0]
    ebce:	1c11      	adds	r1, r2, #0
    ebd0:	4798      	blx	r3
    ebd2:	1c03      	adds	r3, r0, #0
    ebd4:	613b      	str	r3, [r7, #16]
	if (f_idx < 0) { f_idx = 0; }
    ebd6:	4b35      	ldr	r3, [pc, #212]	; (ecac <lookupBoostPwmVal+0x184>)
    ebd8:	6938      	ldr	r0, [r7, #16]
    ebda:	2100      	movs	r1, #0
    ebdc:	4798      	blx	r3
    ebde:	1c03      	adds	r3, r0, #0
    ebe0:	2b00      	cmp	r3, #0
    ebe2:	d001      	beq.n	ebe8 <lookupBoostPwmVal+0xc0>
    ebe4:	2300      	movs	r3, #0
    ebe6:	613b      	str	r3, [r7, #16]
	f_idx = 2 * f_idx;
    ebe8:	693b      	ldr	r3, [r7, #16]
    ebea:	4a29      	ldr	r2, [pc, #164]	; (ec90 <lookupBoostPwmVal+0x168>)
    ebec:	1c18      	adds	r0, r3, #0
    ebee:	1c19      	adds	r1, r3, #0
    ebf0:	4790      	blx	r2
    ebf2:	1c03      	adds	r3, r0, #0
    ebf4:	613b      	str	r3, [r7, #16]
	idx = (uint8_t) f_idx;
    ebf6:	1c3c      	adds	r4, r7, #0
    ebf8:	340f      	adds	r4, #15
    ebfa:	4b2d      	ldr	r3, [pc, #180]	; (ecb0 <lookupBoostPwmVal+0x188>)
    ebfc:	6938      	ldr	r0, [r7, #16]
    ebfe:	4798      	blx	r3
    ec00:	1c03      	adds	r3, r0, #0
    ec02:	7023      	strb	r3, [r4, #0]
	
	if (idx < 0) { idx = 0; }
	
	if (idx >= PS_BOOST_PWM_LOOKUP_TABLE_SIZE)
    ec04:	1c3b      	adds	r3, r7, #0
    ec06:	330f      	adds	r3, #15
    ec08:	781b      	ldrb	r3, [r3, #0]
    ec0a:	2b0b      	cmp	r3, #11
    ec0c:	d903      	bls.n	ec16 <lookupBoostPwmVal+0xee>
	{
		idx = PS_BOOST_PWM_LOOKUP_TABLE_SIZE-1;
    ec0e:	1c3b      	adds	r3, r7, #0
    ec10:	330f      	adds	r3, #15
    ec12:	220b      	movs	r2, #11
    ec14:	701a      	strb	r2, [r3, #0]
	}
	
	ps1.boostPwm = ps_reg1_boost_pwm_lookup_table[idx];
    ec16:	1c3b      	adds	r3, r7, #0
    ec18:	330f      	adds	r3, #15
    ec1a:	781a      	ldrb	r2, [r3, #0]
    ec1c:	4b25      	ldr	r3, [pc, #148]	; (ecb4 <lookupBoostPwmVal+0x18c>)
    ec1e:	0052      	lsls	r2, r2, #1
    ec20:	5ad3      	ldrh	r3, [r2, r3]
    ec22:	1c1a      	adds	r2, r3, #0
    ec24:	4b24      	ldr	r3, [pc, #144]	; (ecb8 <lookupBoostPwmVal+0x190>)
    ec26:	60da      	str	r2, [r3, #12]
	ps2.boostPwm = ps_reg2_boost_pwm_lookup_table[idx];
    ec28:	1c3b      	adds	r3, r7, #0
    ec2a:	330f      	adds	r3, #15
    ec2c:	781a      	ldrb	r2, [r3, #0]
    ec2e:	4b23      	ldr	r3, [pc, #140]	; (ecbc <lookupBoostPwmVal+0x194>)
    ec30:	0052      	lsls	r2, r2, #1
    ec32:	5ad3      	ldrh	r3, [r2, r3]
    ec34:	1c1a      	adds	r2, r3, #0
    ec36:	4b22      	ldr	r3, [pc, #136]	; (ecc0 <lookupBoostPwmVal+0x198>)
    ec38:	60da      	str	r2, [r3, #12]
	
	if (pwmVal >= PWM_MAX_DUTY_VAL)
    ec3a:	1c3b      	adds	r3, r7, #0
    ec3c:	3316      	adds	r3, #22
    ec3e:	881a      	ldrh	r2, [r3, #0]
    ec40:	4b20      	ldr	r3, [pc, #128]	; (ecc4 <lookupBoostPwmVal+0x19c>)
    ec42:	429a      	cmp	r2, r3
    ec44:	d105      	bne.n	ec52 <lookupBoostPwmVal+0x12a>
	{
		pwmVal = PWM_MAX_DUTY_VAL;
    ec46:	1c3b      	adds	r3, r7, #0
    ec48:	3316      	adds	r3, #22
    ec4a:	2201      	movs	r2, #1
    ec4c:	4252      	negs	r2, r2
    ec4e:	801a      	strh	r2, [r3, #0]
    ec50:	e008      	b.n	ec64 <lookupBoostPwmVal+0x13c>
	}
	else if (pwmVal <= 0)
    ec52:	1c3b      	adds	r3, r7, #0
    ec54:	3316      	adds	r3, #22
    ec56:	881b      	ldrh	r3, [r3, #0]
    ec58:	2b00      	cmp	r3, #0
    ec5a:	d103      	bne.n	ec64 <lookupBoostPwmVal+0x13c>
	{
		pwmVal = 1;
    ec5c:	1c3b      	adds	r3, r7, #0
    ec5e:	3316      	adds	r3, #22
    ec60:	2201      	movs	r2, #1
    ec62:	801a      	strh	r2, [r3, #0]
	}
	return pwmVal;
    ec64:	1c3b      	adds	r3, r7, #0
    ec66:	3316      	adds	r3, #22
    ec68:	881b      	ldrh	r3, [r3, #0]
}
    ec6a:	1c18      	adds	r0, r3, #0
    ec6c:	46bd      	mov	sp, r7
    ec6e:	b006      	add	sp, #24
    ec70:	bdb0      	pop	{r4, r5, r7, pc}
    ec72:	46c0      	nop			; (mov r8, r8)
    ec74:	46c0      	nop			; (mov r8, r8)
    ec76:	46c0      	nop			; (mov r8, r8)
    ec78:	00000000 	.word	0x00000000
    ec7c:	3fe00000 	.word	0x3fe00000
    ec80:	00000000 	.word	0x00000000
    ec84:	40000000 	.word	0x40000000
    ec88:	0001f669 	.word	0x0001f669
    ec8c:	0001f641 	.word	0x0001f641
    ec90:	0001f79d 	.word	0x0001f79d
    ec94:	00022111 	.word	0x00022111
    ec98:	0002050d 	.word	0x0002050d
    ec9c:	00019989 	.word	0x00019989
    eca0:	00020b55 	.word	0x00020b55
    eca4:	000221b5 	.word	0x000221b5
    eca8:	00020089 	.word	0x00020089
    ecac:	0001f62d 	.word	0x0001f62d
    ecb0:	0001f6bd 	.word	0x0001f6bd
    ecb4:	00023390 	.word	0x00023390
    ecb8:	20000a84 	.word	0x20000a84
    ecbc:	000233a8 	.word	0x000233a8
    ecc0:	20000d64 	.word	0x20000d64
    ecc4:	0000ffff 	.word	0x0000ffff

0000ecc8 <setOutputSwitch>:
	}
	return pwmVal;
}

void setOutputSwitch(uint8_t pin, uint8_t pwmMode, uint8_t val)
{
    ecc8:	b580      	push	{r7, lr}
    ecca:	b086      	sub	sp, #24
    eccc:	af00      	add	r7, sp, #0
    ecce:	1dfb      	adds	r3, r7, #7
    ecd0:	7018      	strb	r0, [r3, #0]
    ecd2:	1dbb      	adds	r3, r7, #6
    ecd4:	7019      	strb	r1, [r3, #0]
    ecd6:	1d7b      	adds	r3, r7, #5
    ecd8:	701a      	strb	r2, [r3, #0]
	if (pin == PIN_ENBL_OUTB_COLD || pin == PIN_ENBL_OUTB_HOT || pin == PIN_ENBL_OUTA_COLD || pin == PIN_ENBL_OUTA_HOT )
    ecda:	1dfb      	adds	r3, r7, #7
    ecdc:	781b      	ldrb	r3, [r3, #0]
    ecde:	2b08      	cmp	r3, #8
    ece0:	d00c      	beq.n	ecfc <setOutputSwitch+0x34>
    ece2:	1dfb      	adds	r3, r7, #7
    ece4:	781b      	ldrb	r3, [r3, #0]
    ece6:	2b04      	cmp	r3, #4
    ece8:	d008      	beq.n	ecfc <setOutputSwitch+0x34>
    ecea:	1dfb      	adds	r3, r7, #7
    ecec:	781b      	ldrb	r3, [r3, #0]
    ecee:	2b3f      	cmp	r3, #63	; 0x3f
    ecf0:	d004      	beq.n	ecfc <setOutputSwitch+0x34>
    ecf2:	1dfb      	adds	r3, r7, #7
    ecf4:	781b      	ldrb	r3, [r3, #0]
    ecf6:	2b23      	cmp	r3, #35	; 0x23
    ecf8:	d000      	beq.n	ecfc <setOutputSwitch+0x34>
    ecfa:	e09e      	b.n	ee3a <setOutputSwitch+0x172>
	{
		if ( (pwmMode==GPIO_MODE) || (val>=100) || (val==0) )
    ecfc:	1dbb      	adds	r3, r7, #6
    ecfe:	781b      	ldrb	r3, [r3, #0]
    ed00:	2b01      	cmp	r3, #1
    ed02:	d007      	beq.n	ed14 <setOutputSwitch+0x4c>
    ed04:	1d7b      	adds	r3, r7, #5
    ed06:	781b      	ldrb	r3, [r3, #0]
    ed08:	2b63      	cmp	r3, #99	; 0x63
    ed0a:	d803      	bhi.n	ed14 <setOutputSwitch+0x4c>
    ed0c:	1d7b      	adds	r3, r7, #5
    ed0e:	781b      	ldrb	r3, [r3, #0]
    ed10:	2b00      	cmp	r3, #0
    ed12:	d165      	bne.n	ede0 <setOutputSwitch+0x118>
			// disable pwm output
			//if (pin == PIN_ENBL_OUTPUT1)
			//{
				//tc_disable(&tc5_module);
			//}
			if (pin == PIN_ENBL_OUTA_COLD)
    ed14:	1dfb      	adds	r3, r7, #7
    ed16:	781b      	ldrb	r3, [r3, #0]
    ed18:	2b3f      	cmp	r3, #63	; 0x3f
    ed1a:	d103      	bne.n	ed24 <setOutputSwitch+0x5c>
			{
				tc_disable(&tc0_module);
    ed1c:	4b48      	ldr	r3, [pc, #288]	; (ee40 <setOutputSwitch+0x178>)
    ed1e:	1c18      	adds	r0, r3, #0
    ed20:	4b48      	ldr	r3, [pc, #288]	; (ee44 <setOutputSwitch+0x17c>)
    ed22:	4798      	blx	r3
			}
			
			// if pin not configured as gpio, then configure pin as gpio output
			if (system_pinmux_pin_get_mux_position(pin) != SYSTEM_PINMUX_GPIO)
    ed24:	1dfb      	adds	r3, r7, #7
    ed26:	781b      	ldrb	r3, [r3, #0]
    ed28:	1c18      	adds	r0, r3, #0
    ed2a:	4b47      	ldr	r3, [pc, #284]	; (ee48 <setOutputSwitch+0x180>)
    ed2c:	4798      	blx	r3
    ed2e:	1c03      	adds	r3, r0, #0
    ed30:	2b80      	cmp	r3, #128	; 0x80
    ed32:	d025      	beq.n	ed80 <setOutputSwitch+0xb8>
			{
				struct system_pinmux_config config_pinmux;
				system_pinmux_get_config_defaults(&config_pinmux);
    ed34:	1c3b      	adds	r3, r7, #0
    ed36:	3314      	adds	r3, #20
    ed38:	1c18      	adds	r0, r3, #0
    ed3a:	4b44      	ldr	r3, [pc, #272]	; (ee4c <setOutputSwitch+0x184>)
    ed3c:	4798      	blx	r3
				config_pinmux.mux_position = SYSTEM_PINMUX_GPIO;
    ed3e:	1c3b      	adds	r3, r7, #0
    ed40:	3314      	adds	r3, #20
    ed42:	2280      	movs	r2, #128	; 0x80
    ed44:	701a      	strb	r2, [r3, #0]
				config_pinmux.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    ed46:	1c3b      	adds	r3, r7, #0
    ed48:	3314      	adds	r3, #20
    ed4a:	2201      	movs	r2, #1
    ed4c:	705a      	strb	r2, [r3, #1]
				system_pinmux_pin_set_config(pin, &config_pinmux);
    ed4e:	1dfb      	adds	r3, r7, #7
    ed50:	781a      	ldrb	r2, [r3, #0]
    ed52:	1c3b      	adds	r3, r7, #0
    ed54:	3314      	adds	r3, #20
    ed56:	1c10      	adds	r0, r2, #0
    ed58:	1c19      	adds	r1, r3, #0
    ed5a:	4b3d      	ldr	r3, [pc, #244]	; (ee50 <setOutputSwitch+0x188>)
    ed5c:	4798      	blx	r3
				struct port_config config_port_pin;
				port_get_config_defaults(&config_port_pin);
    ed5e:	1c3b      	adds	r3, r7, #0
    ed60:	3310      	adds	r3, #16
    ed62:	1c18      	adds	r0, r3, #0
    ed64:	4b3b      	ldr	r3, [pc, #236]	; (ee54 <setOutputSwitch+0x18c>)
    ed66:	4798      	blx	r3
				config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    ed68:	1c3b      	adds	r3, r7, #0
    ed6a:	3310      	adds	r3, #16
    ed6c:	2201      	movs	r2, #1
    ed6e:	701a      	strb	r2, [r3, #0]
				port_pin_set_config(pin, &config_port_pin);			
    ed70:	1dfb      	adds	r3, r7, #7
    ed72:	781a      	ldrb	r2, [r3, #0]
    ed74:	1c3b      	adds	r3, r7, #0
    ed76:	3310      	adds	r3, #16
    ed78:	1c10      	adds	r0, r2, #0
    ed7a:	1c19      	adds	r1, r3, #0
    ed7c:	4b36      	ldr	r3, [pc, #216]	; (ee58 <setOutputSwitch+0x190>)
    ed7e:	4798      	blx	r3
			}
			
			// bound to boolean
			if (val > 0)
    ed80:	1d7b      	adds	r3, r7, #5
    ed82:	781b      	ldrb	r3, [r3, #0]
    ed84:	2b00      	cmp	r3, #0
    ed86:	d002      	beq.n	ed8e <setOutputSwitch+0xc6>
			{
				val = 1;
    ed88:	1d7b      	adds	r3, r7, #5
    ed8a:	2201      	movs	r2, #1
    ed8c:	701a      	strb	r2, [r3, #0]
			}
		
			// set output pin to val1
			port_pin_set_output_level_EX(pin, val, enableManualOverride);
    ed8e:	1d7b      	adds	r3, r7, #5
    ed90:	781a      	ldrb	r2, [r3, #0]
    ed92:	4b32      	ldr	r3, [pc, #200]	; (ee5c <setOutputSwitch+0x194>)
    ed94:	781b      	ldrb	r3, [r3, #0]
    ed96:	1df9      	adds	r1, r7, #7
    ed98:	7809      	ldrb	r1, [r1, #0]
    ed9a:	1c08      	adds	r0, r1, #0
    ed9c:	1c11      	adds	r1, r2, #0
    ed9e:	1c1a      	adds	r2, r3, #0
    eda0:	4b2f      	ldr	r3, [pc, #188]	; (ee60 <setOutputSwitch+0x198>)
    eda2:	4798      	blx	r3
			
			// update status
			if (pin == PIN_ENBL_OUTB_HOT)
    eda4:	1dfb      	adds	r3, r7, #7
    eda6:	781b      	ldrb	r3, [r3, #0]
    eda8:	2b04      	cmp	r3, #4
    edaa:	d102      	bne.n	edb2 <setOutputSwitch+0xea>
			{
				ps2.outputStatus = GPIO_MODE;
    edac:	4b2d      	ldr	r3, [pc, #180]	; (ee64 <setOutputSwitch+0x19c>)
    edae:	2201      	movs	r2, #1
    edb0:	709a      	strb	r2, [r3, #2]
			}
			if (pin == PIN_ENBL_OUTB_COLD)
    edb2:	1dfb      	adds	r3, r7, #7
    edb4:	781b      	ldrb	r3, [r3, #0]
    edb6:	2b08      	cmp	r3, #8
    edb8:	d102      	bne.n	edc0 <setOutputSwitch+0xf8>
			{
				ps1.outputStatus = GPIO_MODE;
    edba:	4b2b      	ldr	r3, [pc, #172]	; (ee68 <setOutputSwitch+0x1a0>)
    edbc:	2201      	movs	r2, #1
    edbe:	709a      	strb	r2, [r3, #2]
			}			
			if (pin == PIN_ENBL_OUTA_COLD)
    edc0:	1dfb      	adds	r3, r7, #7
    edc2:	781b      	ldrb	r3, [r3, #0]
    edc4:	2b3f      	cmp	r3, #63	; 0x3f
    edc6:	d102      	bne.n	edce <setOutputSwitch+0x106>
			{
				ps1.outputStatus = GPIO_MODE;
    edc8:	4b27      	ldr	r3, [pc, #156]	; (ee68 <setOutputSwitch+0x1a0>)
    edca:	2201      	movs	r2, #1
    edcc:	709a      	strb	r2, [r3, #2]
			}
			if (pin == PIN_ENBL_OUTA_HOT )
    edce:	1dfb      	adds	r3, r7, #7
    edd0:	781b      	ldrb	r3, [r3, #0]
    edd2:	2b23      	cmp	r3, #35	; 0x23
    edd4:	d103      	bne.n	edde <setOutputSwitch+0x116>
			{
				ps2.outputStatus = GPIO_MODE;
    edd6:	4b23      	ldr	r3, [pc, #140]	; (ee64 <setOutputSwitch+0x19c>)
    edd8:	2201      	movs	r2, #1
    edda:	709a      	strb	r2, [r3, #2]
			}			
			if (pin == PIN_ENBL_OUTA_COLD)
			{
				ps1.outputStatus = GPIO_MODE;
			}
			if (pin == PIN_ENBL_OUTA_HOT )
    eddc:	e02d      	b.n	ee3a <setOutputSwitch+0x172>
    edde:	e02c      	b.n	ee3a <setOutputSwitch+0x172>
				//pwm5_cmp_val = (val * PWM_MAX_DUTY_VAL) / 100;	
				//
				//// set status
				//ps1.outputStatus = PWM_MODE;		
			//}
			if (pin == PIN_ENBL_OUTA_COLD)
    ede0:	1dfb      	adds	r3, r7, #7
    ede2:	781b      	ldrb	r3, [r3, #0]
    ede4:	2b3f      	cmp	r3, #63	; 0x3f
    ede6:	d128      	bne.n	ee3a <setOutputSwitch+0x172>
			{
				// configure as tc0 pwm output
				struct system_pinmux_config config_pinmux;
				system_pinmux_get_config_defaults(&config_pinmux);
    ede8:	1c3b      	adds	r3, r7, #0
    edea:	330c      	adds	r3, #12
    edec:	1c18      	adds	r0, r3, #0
    edee:	4b17      	ldr	r3, [pc, #92]	; (ee4c <setOutputSwitch+0x184>)
    edf0:	4798      	blx	r3
				config_pinmux.mux_position = PINMUX_PB31F_TC0_WO1;
    edf2:	1c3b      	adds	r3, r7, #0
    edf4:	330c      	adds	r3, #12
    edf6:	2205      	movs	r2, #5
    edf8:	701a      	strb	r2, [r3, #0]
				config_pinmux.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    edfa:	1c3b      	adds	r3, r7, #0
    edfc:	330c      	adds	r3, #12
    edfe:	2201      	movs	r2, #1
    ee00:	705a      	strb	r2, [r3, #1]
				system_pinmux_pin_set_config(pin, &config_pinmux);
    ee02:	1dfb      	adds	r3, r7, #7
    ee04:	781a      	ldrb	r2, [r3, #0]
    ee06:	1c3b      	adds	r3, r7, #0
    ee08:	330c      	adds	r3, #12
    ee0a:	1c10      	adds	r0, r2, #0
    ee0c:	1c19      	adds	r1, r3, #0
    ee0e:	4b10      	ldr	r3, [pc, #64]	; (ee50 <setOutputSwitch+0x188>)
    ee10:	4798      	blx	r3
				
				// enable
				tc_enable(&tc0_module);								
    ee12:	4b0b      	ldr	r3, [pc, #44]	; (ee40 <setOutputSwitch+0x178>)
    ee14:	1c18      	adds	r0, r3, #0
    ee16:	4b15      	ldr	r3, [pc, #84]	; (ee6c <setOutputSwitch+0x1a4>)
    ee18:	4798      	blx	r3
				
				// set duty
				pwm0_cmp_val = (val * PWM_MAX_DUTY_VAL) / 100;	
    ee1a:	1d7b      	adds	r3, r7, #5
    ee1c:	781a      	ldrb	r2, [r3, #0]
    ee1e:	1c13      	adds	r3, r2, #0
    ee20:	041b      	lsls	r3, r3, #16
    ee22:	1a9a      	subs	r2, r3, r2
    ee24:	4b12      	ldr	r3, [pc, #72]	; (ee70 <setOutputSwitch+0x1a8>)
    ee26:	1c10      	adds	r0, r2, #0
    ee28:	2164      	movs	r1, #100	; 0x64
    ee2a:	4798      	blx	r3
    ee2c:	1c03      	adds	r3, r0, #0
    ee2e:	1c1a      	adds	r2, r3, #0
    ee30:	4b10      	ldr	r3, [pc, #64]	; (ee74 <setOutputSwitch+0x1ac>)
    ee32:	601a      	str	r2, [r3, #0]
				
				// set status
				ps2.outputStatus = PWM_MODE;
    ee34:	4b0b      	ldr	r3, [pc, #44]	; (ee64 <setOutputSwitch+0x19c>)
    ee36:	2202      	movs	r2, #2
    ee38:	709a      	strb	r2, [r3, #2]
			}
		}
	}
}
    ee3a:	46bd      	mov	sp, r7
    ee3c:	b006      	add	sp, #24
    ee3e:	bd80      	pop	{r7, pc}
    ee40:	20000f70 	.word	0x20000f70
    ee44:	0000db7d 	.word	0x0000db7d
    ee48:	0000d175 	.word	0x0000d175
    ee4c:	0000d041 	.word	0x0000d041
    ee50:	00017d71 	.word	0x00017d71
    ee54:	0000d8f1 	.word	0x0000d8f1
    ee58:	00012345 	.word	0x00012345
    ee5c:	20000372 	.word	0x20000372
    ee60:	0000dc61 	.word	0x0000dc61
    ee64:	20000d64 	.word	0x20000d64
    ee68:	20000a84 	.word	0x20000a84
    ee6c:	0000da99 	.word	0x0000da99
    ee70:	0001f4c9 	.word	0x0001f4c9
    ee74:	2000014c 	.word	0x2000014c

0000ee78 <setBoostVoltage>:
	
	return;
}

void setBoostVoltage(struct ps_vars *ps_inst, uint32_t dutyVal)
{
    ee78:	b580      	push	{r7, lr}
    ee7a:	b082      	sub	sp, #8
    ee7c:	af00      	add	r7, sp, #0
    ee7e:	6078      	str	r0, [r7, #4]
    ee80:	6039      	str	r1, [r7, #0]
	if (dutyVal >= BOOST_OFF_DUTY) {
    ee82:	683a      	ldr	r2, [r7, #0]
    ee84:	4b10      	ldr	r3, [pc, #64]	; (eec8 <setBoostVoltage+0x50>)
    ee86:	429a      	cmp	r2, r3
    ee88:	d902      	bls.n	ee90 <setBoostVoltage+0x18>
		dutyVal = BOOST_OFF_DUTY;
    ee8a:	4b10      	ldr	r3, [pc, #64]	; (eecc <setBoostVoltage+0x54>)
    ee8c:	603b      	str	r3, [r7, #0]
    ee8e:	e004      	b.n	ee9a <setBoostVoltage+0x22>
		} else if (dutyVal <= 1 ) {
    ee90:	683b      	ldr	r3, [r7, #0]
    ee92:	2b01      	cmp	r3, #1
    ee94:	d801      	bhi.n	ee9a <setBoostVoltage+0x22>
		dutyVal = 1;
    ee96:	2301      	movs	r3, #1
    ee98:	603b      	str	r3, [r7, #0]
	}
	
	ps_inst->boostPwmTarget = dutyVal;
    ee9a:	687b      	ldr	r3, [r7, #4]
    ee9c:	683a      	ldr	r2, [r7, #0]
    ee9e:	611a      	str	r2, [r3, #16]
	ps_inst->boostPwm = dutyVal;
    eea0:	687b      	ldr	r3, [r7, #4]
    eea2:	683a      	ldr	r2, [r7, #0]
    eea4:	60da      	str	r2, [r3, #12]
	
	// develop ramping routing HERE !!!!!!
	
	if (ps_inst == &ps1) {
    eea6:	687a      	ldr	r2, [r7, #4]
    eea8:	4b09      	ldr	r3, [pc, #36]	; (eed0 <setBoostVoltage+0x58>)
    eeaa:	429a      	cmp	r2, r3
    eeac:	d104      	bne.n	eeb8 <setBoostVoltage+0x40>
		pwm2_0_cmp_val = ps_inst->boostPwm;
    eeae:	687b      	ldr	r3, [r7, #4]
    eeb0:	68da      	ldr	r2, [r3, #12]
    eeb2:	4b08      	ldr	r3, [pc, #32]	; (eed4 <setBoostVoltage+0x5c>)
    eeb4:	601a      	str	r2, [r3, #0]
    eeb6:	e003      	b.n	eec0 <setBoostVoltage+0x48>
	} else {
		pwm2_1_cmp_val = ps_inst->boostPwm;
    eeb8:	687b      	ldr	r3, [r7, #4]
    eeba:	68da      	ldr	r2, [r3, #12]
    eebc:	4b06      	ldr	r3, [pc, #24]	; (eed8 <setBoostVoltage+0x60>)
    eebe:	601a      	str	r2, [r3, #0]
	}

	return;
    eec0:	46c0      	nop			; (mov r8, r8)
}
    eec2:	46bd      	mov	sp, r7
    eec4:	b002      	add	sp, #8
    eec6:	bd80      	pop	{r7, pc}
    eec8:	0000fffe 	.word	0x0000fffe
    eecc:	0000ffff 	.word	0x0000ffff
    eed0:	20000a84 	.word	0x20000a84
    eed4:	20000144 	.word	0x20000144
    eed8:	20000148 	.word	0x20000148

0000eedc <checkForSensorFaults>:

	return;
}

void checkForSensorFaults()
{	
    eedc:	b580      	push	{r7, lr}
    eede:	af00      	add	r7, sp, #0
	// insane sensor, chamber1 //////////////////////////
	if (chamber1.chamberTemp<TSNS_INSANE_LOW_LIMIT) 
    eee0:	4b5b      	ldr	r3, [pc, #364]	; (f050 <checkForSensorFaults+0x174>)
    eee2:	685a      	ldr	r2, [r3, #4]
    eee4:	4b5b      	ldr	r3, [pc, #364]	; (f054 <checkForSensorFaults+0x178>)
    eee6:	1c10      	adds	r0, r2, #0
    eee8:	495b      	ldr	r1, [pc, #364]	; (f058 <checkForSensorFaults+0x17c>)
    eeea:	4798      	blx	r3
    eeec:	1c03      	adds	r3, r0, #0
    eeee:	2b00      	cmp	r3, #0
    eef0:	d006      	beq.n	ef00 <checkForSensorFaults+0x24>
	{
		cha1SnsErrCnt++;
    eef2:	4b5a      	ldr	r3, [pc, #360]	; (f05c <checkForSensorFaults+0x180>)
    eef4:	881b      	ldrh	r3, [r3, #0]
    eef6:	3301      	adds	r3, #1
    eef8:	b29a      	uxth	r2, r3
    eefa:	4b58      	ldr	r3, [pc, #352]	; (f05c <checkForSensorFaults+0x180>)
    eefc:	801a      	strh	r2, [r3, #0]
    eefe:	e002      	b.n	ef06 <checkForSensorFaults+0x2a>
	}
	else
	{
		cha1SnsErrCnt = 0;
    ef00:	4b56      	ldr	r3, [pc, #344]	; (f05c <checkForSensorFaults+0x180>)
    ef02:	2200      	movs	r2, #0
    ef04:	801a      	strh	r2, [r3, #0]
	}
	
	// insane sensor, chamber2 //////////////////////////
	if (chamber2.chamberTemp<TSNS_INSANE_LOW_LIMIT)
    ef06:	4b56      	ldr	r3, [pc, #344]	; (f060 <checkForSensorFaults+0x184>)
    ef08:	685a      	ldr	r2, [r3, #4]
    ef0a:	4b52      	ldr	r3, [pc, #328]	; (f054 <checkForSensorFaults+0x178>)
    ef0c:	1c10      	adds	r0, r2, #0
    ef0e:	4952      	ldr	r1, [pc, #328]	; (f058 <checkForSensorFaults+0x17c>)
    ef10:	4798      	blx	r3
    ef12:	1c03      	adds	r3, r0, #0
    ef14:	2b00      	cmp	r3, #0
    ef16:	d006      	beq.n	ef26 <checkForSensorFaults+0x4a>
	{
		cha2SnsErrCnt++;
    ef18:	4b52      	ldr	r3, [pc, #328]	; (f064 <checkForSensorFaults+0x188>)
    ef1a:	881b      	ldrh	r3, [r3, #0]
    ef1c:	3301      	adds	r3, #1
    ef1e:	b29a      	uxth	r2, r3
    ef20:	4b50      	ldr	r3, [pc, #320]	; (f064 <checkForSensorFaults+0x188>)
    ef22:	801a      	strh	r2, [r3, #0]
    ef24:	e002      	b.n	ef2c <checkForSensorFaults+0x50>
	}
	else
	{
		cha2SnsErrCnt = 0;
    ef26:	4b4f      	ldr	r3, [pc, #316]	; (f064 <checkForSensorFaults+0x188>)
    ef28:	2200      	movs	r2, #0
    ef2a:	801a      	strh	r2, [r3, #0]
	}	
	
	// insane sensor, reject 1 or 2 /////////////////////
	if (chamber1.rejectTemp<TSNS_INSANE_LOW_LIMIT || 
    ef2c:	4b48      	ldr	r3, [pc, #288]	; (f050 <checkForSensorFaults+0x174>)
    ef2e:	68da      	ldr	r2, [r3, #12]
    ef30:	4b48      	ldr	r3, [pc, #288]	; (f054 <checkForSensorFaults+0x178>)
    ef32:	1c10      	adds	r0, r2, #0
    ef34:	4948      	ldr	r1, [pc, #288]	; (f058 <checkForSensorFaults+0x17c>)
    ef36:	4798      	blx	r3
    ef38:	1c03      	adds	r3, r0, #0
    ef3a:	2b00      	cmp	r3, #0
    ef3c:	d108      	bne.n	ef50 <checkForSensorFaults+0x74>
		chamber2.rejectTemp<TSNS_INSANE_LOW_LIMIT)
    ef3e:	4b48      	ldr	r3, [pc, #288]	; (f060 <checkForSensorFaults+0x184>)
    ef40:	68da      	ldr	r2, [r3, #12]
	{
		cha2SnsErrCnt = 0;
	}	
	
	// insane sensor, reject 1 or 2 /////////////////////
	if (chamber1.rejectTemp<TSNS_INSANE_LOW_LIMIT || 
    ef42:	4b44      	ldr	r3, [pc, #272]	; (f054 <checkForSensorFaults+0x178>)
    ef44:	1c10      	adds	r0, r2, #0
    ef46:	4944      	ldr	r1, [pc, #272]	; (f058 <checkForSensorFaults+0x17c>)
    ef48:	4798      	blx	r3
    ef4a:	1c03      	adds	r3, r0, #0
    ef4c:	2b00      	cmp	r3, #0
    ef4e:	d006      	beq.n	ef5e <checkForSensorFaults+0x82>
		chamber2.rejectTemp<TSNS_INSANE_LOW_LIMIT)
	{
		rejSnsErrCnt++;
    ef50:	4b45      	ldr	r3, [pc, #276]	; (f068 <checkForSensorFaults+0x18c>)
    ef52:	881b      	ldrh	r3, [r3, #0]
    ef54:	3301      	adds	r3, #1
    ef56:	b29a      	uxth	r2, r3
    ef58:	4b43      	ldr	r3, [pc, #268]	; (f068 <checkForSensorFaults+0x18c>)
    ef5a:	801a      	strh	r2, [r3, #0]
    ef5c:	e002      	b.n	ef64 <checkForSensorFaults+0x88>
	}	
	else
	{
		rejSnsErrCnt = 0;
    ef5e:	4b42      	ldr	r3, [pc, #264]	; (f068 <checkForSensorFaults+0x18c>)
    ef60:	2200      	movs	r2, #0
    ef62:	801a      	strh	r2, [r3, #0]
	}

	// reject overtemp //////////////////////////////////	
	if (chamber1.rejectTemp>=REJECT_LIMIT_CRITICAL_DEFAULT || 
    ef64:	4b3a      	ldr	r3, [pc, #232]	; (f050 <checkForSensorFaults+0x174>)
    ef66:	68da      	ldr	r2, [r3, #12]
    ef68:	4b40      	ldr	r3, [pc, #256]	; (f06c <checkForSensorFaults+0x190>)
    ef6a:	1c10      	adds	r0, r2, #0
    ef6c:	4940      	ldr	r1, [pc, #256]	; (f070 <checkForSensorFaults+0x194>)
    ef6e:	4798      	blx	r3
    ef70:	1c03      	adds	r3, r0, #0
    ef72:	2b00      	cmp	r3, #0
    ef74:	d108      	bne.n	ef88 <checkForSensorFaults+0xac>
		chamber2.rejectTemp>=REJECT_LIMIT_CRITICAL_DEFAULT)
    ef76:	4b3a      	ldr	r3, [pc, #232]	; (f060 <checkForSensorFaults+0x184>)
    ef78:	68da      	ldr	r2, [r3, #12]
	{
		rejSnsErrCnt = 0;
	}

	// reject overtemp //////////////////////////////////	
	if (chamber1.rejectTemp>=REJECT_LIMIT_CRITICAL_DEFAULT || 
    ef7a:	4b3c      	ldr	r3, [pc, #240]	; (f06c <checkForSensorFaults+0x190>)
    ef7c:	1c10      	adds	r0, r2, #0
    ef7e:	493c      	ldr	r1, [pc, #240]	; (f070 <checkForSensorFaults+0x194>)
    ef80:	4798      	blx	r3
    ef82:	1c03      	adds	r3, r0, #0
    ef84:	2b00      	cmp	r3, #0
    ef86:	d006      	beq.n	ef96 <checkForSensorFaults+0xba>
		chamber2.rejectTemp>=REJECT_LIMIT_CRITICAL_DEFAULT)
	{
		rejCritErrCnt++;
    ef88:	4b3a      	ldr	r3, [pc, #232]	; (f074 <checkForSensorFaults+0x198>)
    ef8a:	881b      	ldrh	r3, [r3, #0]
    ef8c:	3301      	adds	r3, #1
    ef8e:	b29a      	uxth	r2, r3
    ef90:	4b38      	ldr	r3, [pc, #224]	; (f074 <checkForSensorFaults+0x198>)
    ef92:	801a      	strh	r2, [r3, #0]
    ef94:	e002      	b.n	ef9c <checkForSensorFaults+0xc0>
	}	
	else
	{
		rejCritErrCnt = 0;
    ef96:	4b37      	ldr	r3, [pc, #220]	; (f074 <checkForSensorFaults+0x198>)
    ef98:	2200      	movs	r2, #0
    ef9a:	801a      	strh	r2, [r3, #0]
	}	

	// update error register for fan errors /////////////
	if (maxSnsErrorCount > 0)
    ef9c:	4b36      	ldr	r3, [pc, #216]	; (f078 <checkForSensorFaults+0x19c>)
    ef9e:	881b      	ldrh	r3, [r3, #0]
    efa0:	2b00      	cmp	r3, #0
    efa2:	d053      	beq.n	f04c <checkForSensorFaults+0x170>
	{
		if (cha1SnsErrCnt >= maxSnsErrorCount)
    efa4:	4b2d      	ldr	r3, [pc, #180]	; (f05c <checkForSensorFaults+0x180>)
    efa6:	881a      	ldrh	r2, [r3, #0]
    efa8:	4b33      	ldr	r3, [pc, #204]	; (f078 <checkForSensorFaults+0x19c>)
    efaa:	881b      	ldrh	r3, [r3, #0]
    efac:	429a      	cmp	r2, r3
    efae:	d307      	bcc.n	efc0 <checkForSensorFaults+0xe4>
		{
			errorRegister |= ERROR_INSANE_TCHA1;
    efb0:	4b32      	ldr	r3, [pc, #200]	; (f07c <checkForSensorFaults+0x1a0>)
    efb2:	881b      	ldrh	r3, [r3, #0]
    efb4:	2208      	movs	r2, #8
    efb6:	4313      	orrs	r3, r2
    efb8:	b29a      	uxth	r2, r3
    efba:	4b30      	ldr	r3, [pc, #192]	; (f07c <checkForSensorFaults+0x1a0>)
    efbc:	801a      	strh	r2, [r3, #0]
    efbe:	e006      	b.n	efce <checkForSensorFaults+0xf2>
		}
		else
		{
			errorRegister &= ~ERROR_INSANE_TCHA1;
    efc0:	4b2e      	ldr	r3, [pc, #184]	; (f07c <checkForSensorFaults+0x1a0>)
    efc2:	881b      	ldrh	r3, [r3, #0]
    efc4:	2208      	movs	r2, #8
    efc6:	4393      	bics	r3, r2
    efc8:	b29a      	uxth	r2, r3
    efca:	4b2c      	ldr	r3, [pc, #176]	; (f07c <checkForSensorFaults+0x1a0>)
    efcc:	801a      	strh	r2, [r3, #0]
		}
		
		if (cha2SnsErrCnt >= maxSnsErrorCount)
    efce:	4b25      	ldr	r3, [pc, #148]	; (f064 <checkForSensorFaults+0x188>)
    efd0:	881a      	ldrh	r2, [r3, #0]
    efd2:	4b29      	ldr	r3, [pc, #164]	; (f078 <checkForSensorFaults+0x19c>)
    efd4:	881b      	ldrh	r3, [r3, #0]
    efd6:	429a      	cmp	r2, r3
    efd8:	d307      	bcc.n	efea <checkForSensorFaults+0x10e>
		{
			errorRegister |= ERROR_INSANE_TCHA2;
    efda:	4b28      	ldr	r3, [pc, #160]	; (f07c <checkForSensorFaults+0x1a0>)
    efdc:	881b      	ldrh	r3, [r3, #0]
    efde:	2210      	movs	r2, #16
    efe0:	4313      	orrs	r3, r2
    efe2:	b29a      	uxth	r2, r3
    efe4:	4b25      	ldr	r3, [pc, #148]	; (f07c <checkForSensorFaults+0x1a0>)
    efe6:	801a      	strh	r2, [r3, #0]
    efe8:	e006      	b.n	eff8 <checkForSensorFaults+0x11c>
		}
		else
		{
			errorRegister &= ~ERROR_INSANE_TCHA2;
    efea:	4b24      	ldr	r3, [pc, #144]	; (f07c <checkForSensorFaults+0x1a0>)
    efec:	881b      	ldrh	r3, [r3, #0]
    efee:	2210      	movs	r2, #16
    eff0:	4393      	bics	r3, r2
    eff2:	b29a      	uxth	r2, r3
    eff4:	4b21      	ldr	r3, [pc, #132]	; (f07c <checkForSensorFaults+0x1a0>)
    eff6:	801a      	strh	r2, [r3, #0]
		}
		
		if (rejSnsErrCnt >= maxSnsErrorCount)
    eff8:	4b1b      	ldr	r3, [pc, #108]	; (f068 <checkForSensorFaults+0x18c>)
    effa:	881a      	ldrh	r2, [r3, #0]
    effc:	4b1e      	ldr	r3, [pc, #120]	; (f078 <checkForSensorFaults+0x19c>)
    effe:	881b      	ldrh	r3, [r3, #0]
    f000:	429a      	cmp	r2, r3
    f002:	d307      	bcc.n	f014 <checkForSensorFaults+0x138>
		{
			errorRegister |= ERROR_INSANE_TREJ;
    f004:	4b1d      	ldr	r3, [pc, #116]	; (f07c <checkForSensorFaults+0x1a0>)
    f006:	881b      	ldrh	r3, [r3, #0]
    f008:	2240      	movs	r2, #64	; 0x40
    f00a:	4313      	orrs	r3, r2
    f00c:	b29a      	uxth	r2, r3
    f00e:	4b1b      	ldr	r3, [pc, #108]	; (f07c <checkForSensorFaults+0x1a0>)
    f010:	801a      	strh	r2, [r3, #0]
    f012:	e006      	b.n	f022 <checkForSensorFaults+0x146>
		}
		else
		{
			errorRegister &= ~ERROR_INSANE_TREJ;
    f014:	4b19      	ldr	r3, [pc, #100]	; (f07c <checkForSensorFaults+0x1a0>)
    f016:	881b      	ldrh	r3, [r3, #0]
    f018:	2240      	movs	r2, #64	; 0x40
    f01a:	4393      	bics	r3, r2
    f01c:	b29a      	uxth	r2, r3
    f01e:	4b17      	ldr	r3, [pc, #92]	; (f07c <checkForSensorFaults+0x1a0>)
    f020:	801a      	strh	r2, [r3, #0]
		}
		
		if (rejCritErrCnt >= maxSnsErrorCount)
    f022:	4b14      	ldr	r3, [pc, #80]	; (f074 <checkForSensorFaults+0x198>)
    f024:	881a      	ldrh	r2, [r3, #0]
    f026:	4b14      	ldr	r3, [pc, #80]	; (f078 <checkForSensorFaults+0x19c>)
    f028:	881b      	ldrh	r3, [r3, #0]
    f02a:	429a      	cmp	r2, r3
    f02c:	d307      	bcc.n	f03e <checkForSensorFaults+0x162>
		{
			errorRegister |= ERROR_REJECT_CRITICAL;
    f02e:	4b13      	ldr	r3, [pc, #76]	; (f07c <checkForSensorFaults+0x1a0>)
    f030:	881b      	ldrh	r3, [r3, #0]
    f032:	2280      	movs	r2, #128	; 0x80
    f034:	4313      	orrs	r3, r2
    f036:	b29a      	uxth	r2, r3
    f038:	4b10      	ldr	r3, [pc, #64]	; (f07c <checkForSensorFaults+0x1a0>)
    f03a:	801a      	strh	r2, [r3, #0]
    f03c:	e006      	b.n	f04c <checkForSensorFaults+0x170>
		}
		else
		{
			errorRegister &= ~ERROR_REJECT_CRITICAL;
    f03e:	4b0f      	ldr	r3, [pc, #60]	; (f07c <checkForSensorFaults+0x1a0>)
    f040:	881b      	ldrh	r3, [r3, #0]
    f042:	2280      	movs	r2, #128	; 0x80
    f044:	4393      	bics	r3, r2
    f046:	b29a      	uxth	r2, r3
    f048:	4b0c      	ldr	r3, [pc, #48]	; (f07c <checkForSensorFaults+0x1a0>)
    f04a:	801a      	strh	r2, [r3, #0]
		}		
	}	
}
    f04c:	46bd      	mov	sp, r7
    f04e:	bd80      	pop	{r7, pc}
    f050:	200009b8 	.word	0x200009b8
    f054:	0001f62d 	.word	0x0001f62d
    f058:	c2200000 	.word	0xc2200000
    f05c:	20000354 	.word	0x20000354
    f060:	20000960 	.word	0x20000960
    f064:	20000356 	.word	0x20000356
    f068:	20000358 	.word	0x20000358
    f06c:	0001f669 	.word	0x0001f669
    f070:	42700000 	.word	0x42700000
    f074:	2000035a 	.word	0x2000035a
    f078:	20000164 	.word	0x20000164
    f07c:	20000332 	.word	0x20000332

0000f080 <handleDoorEvents>:

void handleDoorEvents()
{
    f080:	b580      	push	{r7, lr}
    f082:	af00      	add	r7, sp, #0
	doorOpenPresentStatus = (bool) doorOpenStatus;
    f084:	4b52      	ldr	r3, [pc, #328]	; (f1d0 <handleDoorEvents+0x150>)
    f086:	781b      	ldrb	r3, [r3, #0]
    f088:	1e5a      	subs	r2, r3, #1
    f08a:	4193      	sbcs	r3, r2
    f08c:	b2da      	uxtb	r2, r3
    f08e:	4b51      	ldr	r3, [pc, #324]	; (f1d4 <handleDoorEvents+0x154>)
    f090:	701a      	strb	r2, [r3, #0]

	// door opening event
	if (doorOpenPresentStatus == OPEN && doorOpenPreviousStatus == CLOSED)
    f092:	4b50      	ldr	r3, [pc, #320]	; (f1d4 <handleDoorEvents+0x154>)
    f094:	781b      	ldrb	r3, [r3, #0]
    f096:	2b00      	cmp	r3, #0
    f098:	d029      	beq.n	f0ee <handleDoorEvents+0x6e>
    f09a:	4b4f      	ldr	r3, [pc, #316]	; (f1d8 <handleDoorEvents+0x158>)
    f09c:	781b      	ldrb	r3, [r3, #0]
    f09e:	2201      	movs	r2, #1
    f0a0:	4053      	eors	r3, r2
    f0a2:	b2db      	uxtb	r3, r3
    f0a4:	2b00      	cmp	r3, #0
    f0a6:	d022      	beq.n	f0ee <handleDoorEvents+0x6e>
	{
		doorOpenCount_Tec++;
    f0a8:	4b4c      	ldr	r3, [pc, #304]	; (f1dc <handleDoorEvents+0x15c>)
    f0aa:	681b      	ldr	r3, [r3, #0]
    f0ac:	1c5a      	adds	r2, r3, #1
    f0ae:	4b4b      	ldr	r3, [pc, #300]	; (f1dc <handleDoorEvents+0x15c>)
    f0b0:	601a      	str	r2, [r3, #0]
		doorOpenCount_1Hr++;
    f0b2:	4b4b      	ldr	r3, [pc, #300]	; (f1e0 <handleDoorEvents+0x160>)
    f0b4:	881b      	ldrh	r3, [r3, #0]
    f0b6:	3301      	adds	r3, #1
    f0b8:	b29a      	uxth	r2, r3
    f0ba:	4b49      	ldr	r3, [pc, #292]	; (f1e0 <handleDoorEvents+0x160>)
    f0bc:	801a      	strh	r2, [r3, #0]
		
		// set chamber fan inhibit
		inhibitChamberFan = ON;
    f0be:	4b49      	ldr	r3, [pc, #292]	; (f1e4 <handleDoorEvents+0x164>)
    f0c0:	2201      	movs	r2, #1
    f0c2:	701a      	strb	r2, [r3, #0]
		inhibitChamberFanTimestamp = 0;		
    f0c4:	4b48      	ldr	r3, [pc, #288]	; (f1e8 <handleDoorEvents+0x168>)
    f0c6:	2200      	movs	r2, #0
    f0c8:	601a      	str	r2, [r3, #0]
		fanStop_emc2305(&fan4);
    f0ca:	4b48      	ldr	r3, [pc, #288]	; (f1ec <handleDoorEvents+0x16c>)
    f0cc:	1c18      	adds	r0, r3, #0
    f0ce:	4b48      	ldr	r3, [pc, #288]	; (f1f0 <handleDoorEvents+0x170>)
    f0d0:	4798      	blx	r3
		
		// set power cap
		enablePwrCap = true;
    f0d2:	4b48      	ldr	r3, [pc, #288]	; (f1f4 <handleDoorEvents+0x174>)
    f0d4:	2201      	movs	r2, #1
    f0d6:	701a      	strb	r2, [r3, #0]
		
		// start timeout counters
		inhibitChamberFanTimeoutTimestamp = presentTimeInSec();
    f0d8:	4b47      	ldr	r3, [pc, #284]	; (f1f8 <handleDoorEvents+0x178>)
    f0da:	4798      	blx	r3
    f0dc:	1c02      	adds	r2, r0, #0
    f0de:	4b47      	ldr	r3, [pc, #284]	; (f1fc <handleDoorEvents+0x17c>)
    f0e0:	601a      	str	r2, [r3, #0]
		enablePwrCapTimeoutTimestamp = presentTimeInSec();
    f0e2:	4b45      	ldr	r3, [pc, #276]	; (f1f8 <handleDoorEvents+0x178>)
    f0e4:	4798      	blx	r3
    f0e6:	1c02      	adds	r2, r0, #0
    f0e8:	4b45      	ldr	r3, [pc, #276]	; (f200 <handleDoorEvents+0x180>)
    f0ea:	601a      	str	r2, [r3, #0]
    f0ec:	e04f      	b.n	f18e <handleDoorEvents+0x10e>
	}
	
	// door open
	else if (doorOpenPresentStatus == OPEN && doorOpenPreviousStatus == OPEN)
    f0ee:	4b39      	ldr	r3, [pc, #228]	; (f1d4 <handleDoorEvents+0x154>)
    f0f0:	781b      	ldrb	r3, [r3, #0]
    f0f2:	2b00      	cmp	r3, #0
    f0f4:	d017      	beq.n	f126 <handleDoorEvents+0xa6>
    f0f6:	4b38      	ldr	r3, [pc, #224]	; (f1d8 <handleDoorEvents+0x158>)
    f0f8:	781b      	ldrb	r3, [r3, #0]
    f0fa:	2b00      	cmp	r3, #0
    f0fc:	d013      	beq.n	f126 <handleDoorEvents+0xa6>
	{	
		// clear timeout when expired
		if (presentTimeInSec() > CHAMBER_FAN_OFF_TIMEOUT+inhibitChamberFanTimeoutTimestamp)
    f0fe:	4b3e      	ldr	r3, [pc, #248]	; (f1f8 <handleDoorEvents+0x178>)
    f100:	4798      	blx	r3
    f102:	1c02      	adds	r2, r0, #0
    f104:	4b3d      	ldr	r3, [pc, #244]	; (f1fc <handleDoorEvents+0x17c>)
    f106:	681b      	ldr	r3, [r3, #0]
    f108:	3378      	adds	r3, #120	; 0x78
    f10a:	429a      	cmp	r2, r3
    f10c:	d90a      	bls.n	f124 <handleDoorEvents+0xa4>
		{
			inhibitChamberFan = OFF;
    f10e:	4b35      	ldr	r3, [pc, #212]	; (f1e4 <handleDoorEvents+0x164>)
    f110:	2200      	movs	r2, #0
    f112:	701a      	strb	r2, [r3, #0]
			fanStart_emc2305(&fan4);
    f114:	4b35      	ldr	r3, [pc, #212]	; (f1ec <handleDoorEvents+0x16c>)
    f116:	1c18      	adds	r0, r3, #0
    f118:	4b3a      	ldr	r3, [pc, #232]	; (f204 <handleDoorEvents+0x184>)
    f11a:	4798      	blx	r3
			inhibitChamberFanTimeoutTimestamp = 0;
    f11c:	4b37      	ldr	r3, [pc, #220]	; (f1fc <handleDoorEvents+0x17c>)
    f11e:	2200      	movs	r2, #0
    f120:	601a      	str	r2, [r3, #0]
	
	// door open
	else if (doorOpenPresentStatus == OPEN && doorOpenPreviousStatus == OPEN)
	{	
		// clear timeout when expired
		if (presentTimeInSec() > CHAMBER_FAN_OFF_TIMEOUT+inhibitChamberFanTimeoutTimestamp)
    f122:	e034      	b.n	f18e <handleDoorEvents+0x10e>
    f124:	e033      	b.n	f18e <handleDoorEvents+0x10e>
			inhibitChamberFanTimeoutTimestamp = 0;
		}			
	}
	
	// door closing event
	else if (doorOpenPresentStatus == CLOSED && doorOpenPreviousStatus == OPEN)
    f126:	4b2b      	ldr	r3, [pc, #172]	; (f1d4 <handleDoorEvents+0x154>)
    f128:	781b      	ldrb	r3, [r3, #0]
    f12a:	2201      	movs	r2, #1
    f12c:	4053      	eors	r3, r2
    f12e:	b2db      	uxtb	r3, r3
    f130:	2b00      	cmp	r3, #0
    f132:	d00c      	beq.n	f14e <handleDoorEvents+0xce>
    f134:	4b28      	ldr	r3, [pc, #160]	; (f1d8 <handleDoorEvents+0x158>)
    f136:	781b      	ldrb	r3, [r3, #0]
    f138:	2b00      	cmp	r3, #0
    f13a:	d008      	beq.n	f14e <handleDoorEvents+0xce>
	{
		// start inhibit timer
		inhibitChamberFanTimestamp = presentTimeInSec();
    f13c:	4b2e      	ldr	r3, [pc, #184]	; (f1f8 <handleDoorEvents+0x178>)
    f13e:	4798      	blx	r3
    f140:	1c02      	adds	r2, r0, #0
    f142:	4b29      	ldr	r3, [pc, #164]	; (f1e8 <handleDoorEvents+0x168>)
    f144:	601a      	str	r2, [r3, #0]
		
		// clear timeout
		inhibitChamberFanTimeoutTimestamp = 0;
    f146:	4b2d      	ldr	r3, [pc, #180]	; (f1fc <handleDoorEvents+0x17c>)
    f148:	2200      	movs	r2, #0
    f14a:	601a      	str	r2, [r3, #0]
    f14c:	e01f      	b.n	f18e <handleDoorEvents+0x10e>
	}

	// door closed
	else if (doorOpenPresentStatus == CLOSED && doorOpenPreviousStatus == CLOSED)
    f14e:	4b21      	ldr	r3, [pc, #132]	; (f1d4 <handleDoorEvents+0x154>)
    f150:	781b      	ldrb	r3, [r3, #0]
    f152:	2201      	movs	r2, #1
    f154:	4053      	eors	r3, r2
    f156:	b2db      	uxtb	r3, r3
    f158:	2b00      	cmp	r3, #0
    f15a:	d018      	beq.n	f18e <handleDoorEvents+0x10e>
    f15c:	4b1e      	ldr	r3, [pc, #120]	; (f1d8 <handleDoorEvents+0x158>)
    f15e:	781b      	ldrb	r3, [r3, #0]
    f160:	2201      	movs	r2, #1
    f162:	4053      	eors	r3, r2
    f164:	b2db      	uxtb	r3, r3
    f166:	2b00      	cmp	r3, #0
    f168:	d011      	beq.n	f18e <handleDoorEvents+0x10e>
	{
		// clear inhibit timer when expired
		if (presentTimeInSec() > MIN_CHAMBER_FAN_OFFTIME+inhibitChamberFanTimestamp)
    f16a:	4b23      	ldr	r3, [pc, #140]	; (f1f8 <handleDoorEvents+0x178>)
    f16c:	4798      	blx	r3
    f16e:	1c02      	adds	r2, r0, #0
    f170:	4b1d      	ldr	r3, [pc, #116]	; (f1e8 <handleDoorEvents+0x168>)
    f172:	681b      	ldr	r3, [r3, #0]
    f174:	330a      	adds	r3, #10
    f176:	429a      	cmp	r2, r3
    f178:	d909      	bls.n	f18e <handleDoorEvents+0x10e>
		{
			inhibitChamberFan = OFF;
    f17a:	4b1a      	ldr	r3, [pc, #104]	; (f1e4 <handleDoorEvents+0x164>)
    f17c:	2200      	movs	r2, #0
    f17e:	701a      	strb	r2, [r3, #0]
			fanStart_emc2305(&fan4);
    f180:	4b1a      	ldr	r3, [pc, #104]	; (f1ec <handleDoorEvents+0x16c>)
    f182:	1c18      	adds	r0, r3, #0
    f184:	4b1f      	ldr	r3, [pc, #124]	; (f204 <handleDoorEvents+0x184>)
    f186:	4798      	blx	r3
			inhibitChamberFanTimestamp = 0;
    f188:	4b17      	ldr	r3, [pc, #92]	; (f1e8 <handleDoorEvents+0x168>)
    f18a:	2200      	movs	r2, #0
    f18c:	601a      	str	r2, [r3, #0]
		}
	}	
	
	if (presentTimeInSec() > ((uint32_t)pwrCapTimeoutInMins*60)+enablePwrCapTimeoutTimestamp)
    f18e:	4b1a      	ldr	r3, [pc, #104]	; (f1f8 <handleDoorEvents+0x178>)
    f190:	4798      	blx	r3
    f192:	1c01      	adds	r1, r0, #0
    f194:	4b1c      	ldr	r3, [pc, #112]	; (f208 <handleDoorEvents+0x188>)
    f196:	881b      	ldrh	r3, [r3, #0]
    f198:	1c1a      	adds	r2, r3, #0
    f19a:	1c13      	adds	r3, r2, #0
    f19c:	011b      	lsls	r3, r3, #4
    f19e:	1a9b      	subs	r3, r3, r2
    f1a0:	009b      	lsls	r3, r3, #2
    f1a2:	1c1a      	adds	r2, r3, #0
    f1a4:	4b16      	ldr	r3, [pc, #88]	; (f200 <handleDoorEvents+0x180>)
    f1a6:	681b      	ldr	r3, [r3, #0]
    f1a8:	18d3      	adds	r3, r2, r3
    f1aa:	4299      	cmp	r1, r3
    f1ac:	d905      	bls.n	f1ba <handleDoorEvents+0x13a>
	{
		enablePwrCap = false;
    f1ae:	4b11      	ldr	r3, [pc, #68]	; (f1f4 <handleDoorEvents+0x174>)
    f1b0:	2200      	movs	r2, #0
    f1b2:	701a      	strb	r2, [r3, #0]
		enablePwrCapTimeoutTimestamp = 0;
    f1b4:	4b12      	ldr	r3, [pc, #72]	; (f200 <handleDoorEvents+0x180>)
    f1b6:	2200      	movs	r2, #0
    f1b8:	601a      	str	r2, [r3, #0]
	}
	
	doorOpenPreviousStatus = doorOpenPresentStatus;	
    f1ba:	4b06      	ldr	r3, [pc, #24]	; (f1d4 <handleDoorEvents+0x154>)
    f1bc:	781a      	ldrb	r2, [r3, #0]
    f1be:	4b06      	ldr	r3, [pc, #24]	; (f1d8 <handleDoorEvents+0x158>)
    f1c0:	701a      	strb	r2, [r3, #0]
	previousEnablePwrCap = enablePwrCap;
    f1c2:	4b0c      	ldr	r3, [pc, #48]	; (f1f4 <handleDoorEvents+0x174>)
    f1c4:	781a      	ldrb	r2, [r3, #0]
    f1c6:	4b11      	ldr	r3, [pc, #68]	; (f20c <handleDoorEvents+0x18c>)
    f1c8:	701a      	strb	r2, [r3, #0]
}
    f1ca:	46bd      	mov	sp, r7
    f1cc:	bd80      	pop	{r7, pc}
    f1ce:	46c0      	nop			; (mov r8, r8)
    f1d0:	20000335 	.word	0x20000335
    f1d4:	20000345 	.word	0x20000345
    f1d8:	20000346 	.word	0x20000346
    f1dc:	2000035c 	.word	0x2000035c
    f1e0:	20000360 	.word	0x20000360
    f1e4:	20000347 	.word	0x20000347
    f1e8:	20000348 	.word	0x20000348
    f1ec:	20000adc 	.word	0x20000adc
    f1f0:	00005ad9 	.word	0x00005ad9
    f1f4:	20000362 	.word	0x20000362
    f1f8:	0000dcad 	.word	0x0000dcad
    f1fc:	2000034c 	.word	0x2000034c
    f200:	20000364 	.word	0x20000364
    f204:	000059c9 	.word	0x000059c9
    f208:	20000092 	.word	0x20000092
    f20c:	20000363 	.word	0x20000363

0000f210 <userTimerStart>:

/************************************************************************/
/* User Functions                                                       */
/************************************************************************/
void userTimerStart(struct user_timer *user_timer_inst, uint16_t mins)
{
    f210:	b580      	push	{r7, lr}
    f212:	b082      	sub	sp, #8
    f214:	af00      	add	r7, sp, #0
    f216:	6078      	str	r0, [r7, #4]
    f218:	1c0a      	adds	r2, r1, #0
    f21a:	1cbb      	adds	r3, r7, #2
    f21c:	801a      	strh	r2, [r3, #0]
	user_timer_inst->durationMins = mins;
    f21e:	687b      	ldr	r3, [r7, #4]
    f220:	1cba      	adds	r2, r7, #2
    f222:	8812      	ldrh	r2, [r2, #0]
    f224:	801a      	strh	r2, [r3, #0]
	user_timer_inst->timeoutTimestampInSecs = presentTimeInSec() + user_timer_inst->durationMins*60;
    f226:	4b0f      	ldr	r3, [pc, #60]	; (f264 <userTimerStart+0x54>)
    f228:	4798      	blx	r3
    f22a:	1c01      	adds	r1, r0, #0
    f22c:	687b      	ldr	r3, [r7, #4]
    f22e:	881b      	ldrh	r3, [r3, #0]
    f230:	1c1a      	adds	r2, r3, #0
    f232:	1c13      	adds	r3, r2, #0
    f234:	011b      	lsls	r3, r3, #4
    f236:	1a9b      	subs	r3, r3, r2
    f238:	009b      	lsls	r3, r3, #2
    f23a:	18ca      	adds	r2, r1, r3
    f23c:	687b      	ldr	r3, [r7, #4]
    f23e:	605a      	str	r2, [r3, #4]
	user_timer_inst->startTimestampInSecs = presentTimeInSec();
    f240:	4b08      	ldr	r3, [pc, #32]	; (f264 <userTimerStart+0x54>)
    f242:	4798      	blx	r3
    f244:	1c02      	adds	r2, r0, #0
    f246:	687b      	ldr	r3, [r7, #4]
    f248:	609a      	str	r2, [r3, #8]

	user_timer_inst->timerActive = true;
    f24a:	687b      	ldr	r3, [r7, #4]
    f24c:	2201      	movs	r2, #1
    f24e:	731a      	strb	r2, [r3, #12]
	user_timer_inst->timerExpired = false;
    f250:	687b      	ldr	r3, [r7, #4]
    f252:	2200      	movs	r2, #0
    f254:	735a      	strb	r2, [r3, #13]
	user_timer_inst->presentCountInSecs = 0;
    f256:	687b      	ldr	r3, [r7, #4]
    f258:	2200      	movs	r2, #0
    f25a:	611a      	str	r2, [r3, #16]
}
    f25c:	46bd      	mov	sp, r7
    f25e:	b002      	add	sp, #8
    f260:	bd80      	pop	{r7, pc}
    f262:	46c0      	nop			; (mov r8, r8)
    f264:	0000dcad 	.word	0x0000dcad

0000f268 <userTimerUpdateStatus>:

void userTimerUpdateStatus(struct user_timer *user_timer_inst)
{
    f268:	b580      	push	{r7, lr}
    f26a:	b082      	sub	sp, #8
    f26c:	af00      	add	r7, sp, #0
    f26e:	6078      	str	r0, [r7, #4]
	if (user_timer_inst->timerActive == true)
    f270:	687b      	ldr	r3, [r7, #4]
    f272:	7b1b      	ldrb	r3, [r3, #12]
    f274:	2b00      	cmp	r3, #0
    f276:	d018      	beq.n	f2aa <userTimerUpdateStatus+0x42>
	{
		if (user_timer_inst->timerExpired == false)
    f278:	687b      	ldr	r3, [r7, #4]
    f27a:	7b5b      	ldrb	r3, [r3, #13]
    f27c:	2201      	movs	r2, #1
    f27e:	4053      	eors	r3, r2
    f280:	b2db      	uxtb	r3, r3
    f282:	2b00      	cmp	r3, #0
    f284:	d007      	beq.n	f296 <userTimerUpdateStatus+0x2e>
		{
			user_timer_inst->presentCountInSecs = presentTimeInSec() - user_timer_inst->startTimestampInSecs;
    f286:	4b0a      	ldr	r3, [pc, #40]	; (f2b0 <userTimerUpdateStatus+0x48>)
    f288:	4798      	blx	r3
    f28a:	1c02      	adds	r2, r0, #0
    f28c:	687b      	ldr	r3, [r7, #4]
    f28e:	689b      	ldr	r3, [r3, #8]
    f290:	1ad2      	subs	r2, r2, r3
    f292:	687b      	ldr	r3, [r7, #4]
    f294:	611a      	str	r2, [r3, #16]
		}
		if (presentTimeInSec() >= user_timer_inst->timeoutTimestampInSecs)
    f296:	4b06      	ldr	r3, [pc, #24]	; (f2b0 <userTimerUpdateStatus+0x48>)
    f298:	4798      	blx	r3
    f29a:	1c02      	adds	r2, r0, #0
    f29c:	687b      	ldr	r3, [r7, #4]
    f29e:	685b      	ldr	r3, [r3, #4]
    f2a0:	429a      	cmp	r2, r3
    f2a2:	d302      	bcc.n	f2aa <userTimerUpdateStatus+0x42>
		{
			user_timer_inst->timerExpired = true;
    f2a4:	687b      	ldr	r3, [r7, #4]
    f2a6:	2201      	movs	r2, #1
    f2a8:	735a      	strb	r2, [r3, #13]
		}
	}
}
    f2aa:	46bd      	mov	sp, r7
    f2ac:	b002      	add	sp, #8
    f2ae:	bd80      	pop	{r7, pc}
    f2b0:	0000dcad 	.word	0x0000dcad

0000f2b4 <userTimerReset>:

void userTimerReset(struct user_timer *user_timer_inst)
{
    f2b4:	b580      	push	{r7, lr}
    f2b6:	b082      	sub	sp, #8
    f2b8:	af00      	add	r7, sp, #0
    f2ba:	6078      	str	r0, [r7, #4]
	user_timer_inst->timerActive = false;
    f2bc:	687b      	ldr	r3, [r7, #4]
    f2be:	2200      	movs	r2, #0
    f2c0:	731a      	strb	r2, [r3, #12]
	user_timer_inst->timerExpired = false;
    f2c2:	687b      	ldr	r3, [r7, #4]
    f2c4:	2200      	movs	r2, #0
    f2c6:	735a      	strb	r2, [r3, #13]
	user_timer_inst->presentCountInSecs = 0;
    f2c8:	687b      	ldr	r3, [r7, #4]
    f2ca:	2200      	movs	r2, #0
    f2cc:	611a      	str	r2, [r3, #16]
    f2ce:	46bd      	mov	sp, r7
    f2d0:	b002      	add	sp, #8
    f2d2:	bd80      	pop	{r7, pc}

0000f2d4 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
    f2d4:	b580      	push	{r7, lr}
    f2d6:	af00      	add	r7, sp, #0
	return test_case_ptr;
    f2d8:	4b02      	ldr	r3, [pc, #8]	; (f2e4 <test_get_case+0x10>)
    f2da:	681b      	ldr	r3, [r3, #0]
}
    f2dc:	1c18      	adds	r0, r3, #0
    f2de:	46bd      	mov	sp, r7
    f2e0:	bd80      	pop	{r7, pc}
    f2e2:	46c0      	nop			; (mov r8, r8)
    f2e4:	2000041c 	.word	0x2000041c

0000f2e8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    f2e8:	b580      	push	{r7, lr}
    f2ea:	b082      	sub	sp, #8
    f2ec:	af00      	add	r7, sp, #0
    f2ee:	1c02      	adds	r2, r0, #0
    f2f0:	1dfb      	adds	r3, r7, #7
    f2f2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    f2f4:	4b06      	ldr	r3, [pc, #24]	; (f310 <system_interrupt_enable+0x28>)
    f2f6:	1dfa      	adds	r2, r7, #7
    f2f8:	7812      	ldrb	r2, [r2, #0]
    f2fa:	1c11      	adds	r1, r2, #0
    f2fc:	221f      	movs	r2, #31
    f2fe:	400a      	ands	r2, r1
    f300:	2101      	movs	r1, #1
    f302:	1c08      	adds	r0, r1, #0
    f304:	4090      	lsls	r0, r2
    f306:	1c02      	adds	r2, r0, #0
    f308:	601a      	str	r2, [r3, #0]
}
    f30a:	46bd      	mov	sp, r7
    f30c:	b002      	add	sp, #8
    f30e:	bd80      	pop	{r7, pc}
    f310:	e000e100 	.word	0xe000e100

0000f314 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    f314:	b580      	push	{r7, lr}
    f316:	b084      	sub	sp, #16
    f318:	af00      	add	r7, sp, #0
    f31a:	6078      	str	r0, [r7, #4]
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    f31c:	687b      	ldr	r3, [r7, #4]
    f31e:	681b      	ldr	r3, [r3, #0]
    f320:	60fb      	str	r3, [r7, #12]

	while (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY) {
    f322:	46c0      	nop			; (mov r8, r8)
    f324:	68fb      	ldr	r3, [r7, #12]
    f326:	691b      	ldr	r3, [r3, #16]
    f328:	b29b      	uxth	r3, r3
    f32a:	b29b      	uxth	r3, r3
    f32c:	b21b      	sxth	r3, r3
    f32e:	2b00      	cmp	r3, #0
    f330:	dbf8      	blt.n	f324 <_usart_wait_for_sync+0x10>
		/* Wait until the synchronization is complete */
	}
}
    f332:	46bd      	mov	sp, r7
    f334:	b004      	add	sp, #16
    f336:	bd80      	pop	{r7, pc}

0000f338 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    f338:	b590      	push	{r4, r7, lr}
    f33a:	b085      	sub	sp, #20
    f33c:	af02      	add	r7, sp, #8
    f33e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
    f340:	4b2d      	ldr	r3, [pc, #180]	; (f3f8 <usart_get_config_defaults+0xc0>)
    f342:	4798      	blx	r3
    f344:	1c03      	adds	r3, r0, #0
    f346:	2b00      	cmp	r3, #0
    f348:	d010      	beq.n	f36c <usart_get_config_defaults+0x34>
    f34a:	687b      	ldr	r3, [r7, #4]
    f34c:	2b00      	cmp	r3, #0
    f34e:	d117      	bne.n	f380 <usart_get_config_defaults+0x48>
    f350:	4b29      	ldr	r3, [pc, #164]	; (f3f8 <usart_get_config_defaults+0xc0>)
    f352:	4798      	blx	r3
    f354:	1c01      	adds	r1, r0, #0
    f356:	4a29      	ldr	r2, [pc, #164]	; (f3fc <usart_get_config_defaults+0xc4>)
    f358:	4b29      	ldr	r3, [pc, #164]	; (f400 <usart_get_config_defaults+0xc8>)
    f35a:	482a      	ldr	r0, [pc, #168]	; (f404 <usart_get_config_defaults+0xcc>)
    f35c:	9000      	str	r0, [sp, #0]
    f35e:	482a      	ldr	r0, [pc, #168]	; (f408 <usart_get_config_defaults+0xd0>)
    f360:	9001      	str	r0, [sp, #4]
    f362:	1c08      	adds	r0, r1, #0
    f364:	2101      	movs	r1, #1
    f366:	4c29      	ldr	r4, [pc, #164]	; (f40c <usart_get_config_defaults+0xd4>)
    f368:	47a0      	blx	r4
    f36a:	e009      	b.n	f380 <usart_get_config_defaults+0x48>
    f36c:	687b      	ldr	r3, [r7, #4]
    f36e:	2b00      	cmp	r3, #0
    f370:	d106      	bne.n	f380 <usart_get_config_defaults+0x48>
    f372:	4827      	ldr	r0, [pc, #156]	; (f410 <usart_get_config_defaults+0xd8>)
    f374:	4924      	ldr	r1, [pc, #144]	; (f408 <usart_get_config_defaults+0xd0>)
    f376:	4a21      	ldr	r2, [pc, #132]	; (f3fc <usart_get_config_defaults+0xc4>)
    f378:	4b21      	ldr	r3, [pc, #132]	; (f400 <usart_get_config_defaults+0xc8>)
    f37a:	4c26      	ldr	r4, [pc, #152]	; (f414 <usart_get_config_defaults+0xdc>)
    f37c:	47a0      	blx	r4
    f37e:	e7fe      	b.n	f37e <usart_get_config_defaults+0x46>

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    f380:	687b      	ldr	r3, [r7, #4]
    f382:	2280      	movs	r2, #128	; 0x80
    f384:	05d2      	lsls	r2, r2, #23
    f386:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    f388:	687b      	ldr	r3, [r7, #4]
    f38a:	2200      	movs	r2, #0
    f38c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    f38e:	687b      	ldr	r3, [r7, #4]
    f390:	22ff      	movs	r2, #255	; 0xff
    f392:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    f394:	687b      	ldr	r3, [r7, #4]
    f396:	2200      	movs	r2, #0
    f398:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    f39a:	687b      	ldr	r3, [r7, #4]
    f39c:	2200      	movs	r2, #0
    f39e:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    f3a0:	687b      	ldr	r3, [r7, #4]
    f3a2:	2296      	movs	r2, #150	; 0x96
    f3a4:	0192      	lsls	r2, r2, #6
    f3a6:	611a      	str	r2, [r3, #16]
	config->receiver_enable  = true;
    f3a8:	687b      	ldr	r3, [r7, #4]
    f3aa:	2201      	movs	r2, #1
    f3ac:	751a      	strb	r2, [r3, #20]
	config->transmitter_enable = true;
    f3ae:	687b      	ldr	r3, [r7, #4]
    f3b0:	2201      	movs	r2, #1
    f3b2:	755a      	strb	r2, [r3, #21]
	config->clock_polarity_inverted = false;
    f3b4:	687b      	ldr	r3, [r7, #4]
    f3b6:	2200      	movs	r2, #0
    f3b8:	759a      	strb	r2, [r3, #22]
	config->use_external_clock = false;
    f3ba:	687b      	ldr	r3, [r7, #4]
    f3bc:	2200      	movs	r2, #0
    f3be:	75da      	strb	r2, [r3, #23]
	config->ext_clock_freq   = 0;
    f3c0:	687b      	ldr	r3, [r7, #4]
    f3c2:	2200      	movs	r2, #0
    f3c4:	619a      	str	r2, [r3, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    f3c6:	687b      	ldr	r3, [r7, #4]
    f3c8:	2288      	movs	r2, #136	; 0x88
    f3ca:	0352      	lsls	r2, r2, #13
    f3cc:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    f3ce:	687b      	ldr	r3, [r7, #4]
    f3d0:	2200      	movs	r2, #0
    f3d2:	771a      	strb	r2, [r3, #28]
	config->generator_source = GCLK_GENERATOR_0;
    f3d4:	687b      	ldr	r3, [r7, #4]
    f3d6:	2200      	movs	r2, #0
    f3d8:	775a      	strb	r2, [r3, #29]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    f3da:	687b      	ldr	r3, [r7, #4]
    f3dc:	2200      	movs	r2, #0
    f3de:	621a      	str	r2, [r3, #32]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    f3e0:	687b      	ldr	r3, [r7, #4]
    f3e2:	2200      	movs	r2, #0
    f3e4:	625a      	str	r2, [r3, #36]	; 0x24
	config->pinmux_pad2      = PINMUX_DEFAULT;
    f3e6:	687b      	ldr	r3, [r7, #4]
    f3e8:	2200      	movs	r2, #0
    f3ea:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad3      = PINMUX_DEFAULT;
    f3ec:	687b      	ldr	r3, [r7, #4]
    f3ee:	2200      	movs	r2, #0
    f3f0:	62da      	str	r2, [r3, #44]	; 0x2c
}
    f3f2:	46bd      	mov	sp, r7
    f3f4:	b003      	add	sp, #12
    f3f6:	bd90      	pop	{r4, r7, pc}
    f3f8:	0000f2d5 	.word	0x0000f2d5
    f3fc:	00025764 	.word	0x00025764
    f400:	0000021f 	.word	0x0000021f
    f404:	000256e4 	.word	0x000256e4
    f408:	00025794 	.word	0x00025794
    f40c:	000106e9 	.word	0x000106e9
    f410:	00025704 	.word	0x00025704
    f414:	0001b62d 	.word	0x0001b62d

0000f418 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    f418:	b590      	push	{r4, r7, lr}
    f41a:	b087      	sub	sp, #28
    f41c:	af02      	add	r7, sp, #8
    f41e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
    f420:	4b2d      	ldr	r3, [pc, #180]	; (f4d8 <usart_enable+0xc0>)
    f422:	4798      	blx	r3
    f424:	1c03      	adds	r3, r0, #0
    f426:	2b00      	cmp	r3, #0
    f428:	d010      	beq.n	f44c <usart_enable+0x34>
    f42a:	687b      	ldr	r3, [r7, #4]
    f42c:	2b00      	cmp	r3, #0
    f42e:	d117      	bne.n	f460 <usart_enable+0x48>
    f430:	4b29      	ldr	r3, [pc, #164]	; (f4d8 <usart_enable+0xc0>)
    f432:	4798      	blx	r3
    f434:	1c01      	adds	r1, r0, #0
    f436:	4a29      	ldr	r2, [pc, #164]	; (f4dc <usart_enable+0xc4>)
    f438:	4b29      	ldr	r3, [pc, #164]	; (f4e0 <usart_enable+0xc8>)
    f43a:	482a      	ldr	r0, [pc, #168]	; (f4e4 <usart_enable+0xcc>)
    f43c:	9000      	str	r0, [sp, #0]
    f43e:	482a      	ldr	r0, [pc, #168]	; (f4e8 <usart_enable+0xd0>)
    f440:	9001      	str	r0, [sp, #4]
    f442:	1c08      	adds	r0, r1, #0
    f444:	2101      	movs	r1, #1
    f446:	4c29      	ldr	r4, [pc, #164]	; (f4ec <usart_enable+0xd4>)
    f448:	47a0      	blx	r4
    f44a:	e009      	b.n	f460 <usart_enable+0x48>
    f44c:	687b      	ldr	r3, [r7, #4]
    f44e:	2b00      	cmp	r3, #0
    f450:	d106      	bne.n	f460 <usart_enable+0x48>
    f452:	4827      	ldr	r0, [pc, #156]	; (f4f0 <usart_enable+0xd8>)
    f454:	4924      	ldr	r1, [pc, #144]	; (f4e8 <usart_enable+0xd0>)
    f456:	4a21      	ldr	r2, [pc, #132]	; (f4dc <usart_enable+0xc4>)
    f458:	4b21      	ldr	r3, [pc, #132]	; (f4e0 <usart_enable+0xc8>)
    f45a:	4c26      	ldr	r4, [pc, #152]	; (f4f4 <usart_enable+0xdc>)
    f45c:	47a0      	blx	r4
    f45e:	e7fe      	b.n	f45e <usart_enable+0x46>
	Assert(module->hw);
    f460:	4b1d      	ldr	r3, [pc, #116]	; (f4d8 <usart_enable+0xc0>)
    f462:	4798      	blx	r3
    f464:	1c03      	adds	r3, r0, #0
    f466:	2b00      	cmp	r3, #0
    f468:	d011      	beq.n	f48e <usart_enable+0x76>
    f46a:	687b      	ldr	r3, [r7, #4]
    f46c:	681b      	ldr	r3, [r3, #0]
    f46e:	2b00      	cmp	r3, #0
    f470:	d118      	bne.n	f4a4 <usart_enable+0x8c>
    f472:	4b19      	ldr	r3, [pc, #100]	; (f4d8 <usart_enable+0xc0>)
    f474:	4798      	blx	r3
    f476:	1c01      	adds	r1, r0, #0
    f478:	4a18      	ldr	r2, [pc, #96]	; (f4dc <usart_enable+0xc4>)
    f47a:	4b1f      	ldr	r3, [pc, #124]	; (f4f8 <usart_enable+0xe0>)
    f47c:	4819      	ldr	r0, [pc, #100]	; (f4e4 <usart_enable+0xcc>)
    f47e:	9000      	str	r0, [sp, #0]
    f480:	481e      	ldr	r0, [pc, #120]	; (f4fc <usart_enable+0xe4>)
    f482:	9001      	str	r0, [sp, #4]
    f484:	1c08      	adds	r0, r1, #0
    f486:	2101      	movs	r1, #1
    f488:	4c18      	ldr	r4, [pc, #96]	; (f4ec <usart_enable+0xd4>)
    f48a:	47a0      	blx	r4
    f48c:	e00a      	b.n	f4a4 <usart_enable+0x8c>
    f48e:	687b      	ldr	r3, [r7, #4]
    f490:	681b      	ldr	r3, [r3, #0]
    f492:	2b00      	cmp	r3, #0
    f494:	d106      	bne.n	f4a4 <usart_enable+0x8c>
    f496:	4816      	ldr	r0, [pc, #88]	; (f4f0 <usart_enable+0xd8>)
    f498:	4918      	ldr	r1, [pc, #96]	; (f4fc <usart_enable+0xe4>)
    f49a:	4a10      	ldr	r2, [pc, #64]	; (f4dc <usart_enable+0xc4>)
    f49c:	4b16      	ldr	r3, [pc, #88]	; (f4f8 <usart_enable+0xe0>)
    f49e:	4c15      	ldr	r4, [pc, #84]	; (f4f4 <usart_enable+0xdc>)
    f4a0:	47a0      	blx	r4
    f4a2:	e7fe      	b.n	f4a2 <usart_enable+0x8a>

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    f4a4:	687b      	ldr	r3, [r7, #4]
    f4a6:	681b      	ldr	r3, [r3, #0]
    f4a8:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    f4aa:	687b      	ldr	r3, [r7, #4]
    f4ac:	681b      	ldr	r3, [r3, #0]
    f4ae:	1c18      	adds	r0, r3, #0
    f4b0:	4b13      	ldr	r3, [pc, #76]	; (f500 <usart_enable+0xe8>)
    f4b2:	4798      	blx	r3
    f4b4:	1c03      	adds	r3, r0, #0
    f4b6:	1c18      	adds	r0, r3, #0
    f4b8:	4b12      	ldr	r3, [pc, #72]	; (f504 <usart_enable+0xec>)
    f4ba:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    f4bc:	687b      	ldr	r3, [r7, #4]
    f4be:	1c18      	adds	r0, r3, #0
    f4c0:	4b11      	ldr	r3, [pc, #68]	; (f508 <usart_enable+0xf0>)
    f4c2:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    f4c4:	68fb      	ldr	r3, [r7, #12]
    f4c6:	681b      	ldr	r3, [r3, #0]
    f4c8:	2202      	movs	r2, #2
    f4ca:	431a      	orrs	r2, r3
    f4cc:	68fb      	ldr	r3, [r7, #12]
    f4ce:	601a      	str	r2, [r3, #0]
}
    f4d0:	46bd      	mov	sp, r7
    f4d2:	b005      	add	sp, #20
    f4d4:	bd90      	pop	{r4, r7, pc}
    f4d6:	46c0      	nop			; (mov r8, r8)
    f4d8:	0000f2d5 	.word	0x0000f2d5
    f4dc:	00025764 	.word	0x00025764
    f4e0:	00000246 	.word	0x00000246
    f4e4:	000256e4 	.word	0x000256e4
    f4e8:	000256fc 	.word	0x000256fc
    f4ec:	000106e9 	.word	0x000106e9
    f4f0:	00025704 	.word	0x00025704
    f4f4:	0001b62d 	.word	0x0001b62d
    f4f8:	00000247 	.word	0x00000247
    f4fc:	00025728 	.word	0x00025728
    f500:	00015281 	.word	0x00015281
    f504:	0000f2e9 	.word	0x0000f2e9
    f508:	0000f315 	.word	0x0000f315

0000f50c <usart_enable_transceiver>:
 * \param[in]  transceiver_type  Transceiver type.
 */
static inline void usart_enable_transceiver(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    f50c:	b590      	push	{r4, r7, lr}
    f50e:	b087      	sub	sp, #28
    f510:	af02      	add	r7, sp, #8
    f512:	6078      	str	r0, [r7, #4]
    f514:	1c0a      	adds	r2, r1, #0
    f516:	1cfb      	adds	r3, r7, #3
    f518:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
    f51a:	4b34      	ldr	r3, [pc, #208]	; (f5ec <usart_enable_transceiver+0xe0>)
    f51c:	4798      	blx	r3
    f51e:	1c03      	adds	r3, r0, #0
    f520:	2b00      	cmp	r3, #0
    f522:	d010      	beq.n	f546 <usart_enable_transceiver+0x3a>
    f524:	687b      	ldr	r3, [r7, #4]
    f526:	2b00      	cmp	r3, #0
    f528:	d117      	bne.n	f55a <usart_enable_transceiver+0x4e>
    f52a:	4b30      	ldr	r3, [pc, #192]	; (f5ec <usart_enable_transceiver+0xe0>)
    f52c:	4798      	blx	r3
    f52e:	1c01      	adds	r1, r0, #0
    f530:	4a2f      	ldr	r2, [pc, #188]	; (f5f0 <usart_enable_transceiver+0xe4>)
    f532:	4b30      	ldr	r3, [pc, #192]	; (f5f4 <usart_enable_transceiver+0xe8>)
    f534:	4830      	ldr	r0, [pc, #192]	; (f5f8 <usart_enable_transceiver+0xec>)
    f536:	9000      	str	r0, [sp, #0]
    f538:	4830      	ldr	r0, [pc, #192]	; (f5fc <usart_enable_transceiver+0xf0>)
    f53a:	9001      	str	r0, [sp, #4]
    f53c:	1c08      	adds	r0, r1, #0
    f53e:	2101      	movs	r1, #1
    f540:	4c2f      	ldr	r4, [pc, #188]	; (f600 <usart_enable_transceiver+0xf4>)
    f542:	47a0      	blx	r4
    f544:	e009      	b.n	f55a <usart_enable_transceiver+0x4e>
    f546:	687b      	ldr	r3, [r7, #4]
    f548:	2b00      	cmp	r3, #0
    f54a:	d106      	bne.n	f55a <usart_enable_transceiver+0x4e>
    f54c:	482d      	ldr	r0, [pc, #180]	; (f604 <usart_enable_transceiver+0xf8>)
    f54e:	492b      	ldr	r1, [pc, #172]	; (f5fc <usart_enable_transceiver+0xf0>)
    f550:	4a27      	ldr	r2, [pc, #156]	; (f5f0 <usart_enable_transceiver+0xe4>)
    f552:	4b28      	ldr	r3, [pc, #160]	; (f5f4 <usart_enable_transceiver+0xe8>)
    f554:	4c2c      	ldr	r4, [pc, #176]	; (f608 <usart_enable_transceiver+0xfc>)
    f556:	47a0      	blx	r4
    f558:	e7fe      	b.n	f558 <usart_enable_transceiver+0x4c>
	Assert(module->hw);
    f55a:	4b24      	ldr	r3, [pc, #144]	; (f5ec <usart_enable_transceiver+0xe0>)
    f55c:	4798      	blx	r3
    f55e:	1c03      	adds	r3, r0, #0
    f560:	2b00      	cmp	r3, #0
    f562:	d011      	beq.n	f588 <usart_enable_transceiver+0x7c>
    f564:	687b      	ldr	r3, [r7, #4]
    f566:	681b      	ldr	r3, [r3, #0]
    f568:	2b00      	cmp	r3, #0
    f56a:	d118      	bne.n	f59e <usart_enable_transceiver+0x92>
    f56c:	4b1f      	ldr	r3, [pc, #124]	; (f5ec <usart_enable_transceiver+0xe0>)
    f56e:	4798      	blx	r3
    f570:	1c01      	adds	r1, r0, #0
    f572:	4a1f      	ldr	r2, [pc, #124]	; (f5f0 <usart_enable_transceiver+0xe4>)
    f574:	4b25      	ldr	r3, [pc, #148]	; (f60c <usart_enable_transceiver+0x100>)
    f576:	4820      	ldr	r0, [pc, #128]	; (f5f8 <usart_enable_transceiver+0xec>)
    f578:	9000      	str	r0, [sp, #0]
    f57a:	4825      	ldr	r0, [pc, #148]	; (f610 <usart_enable_transceiver+0x104>)
    f57c:	9001      	str	r0, [sp, #4]
    f57e:	1c08      	adds	r0, r1, #0
    f580:	2101      	movs	r1, #1
    f582:	4c1f      	ldr	r4, [pc, #124]	; (f600 <usart_enable_transceiver+0xf4>)
    f584:	47a0      	blx	r4
    f586:	e00a      	b.n	f59e <usart_enable_transceiver+0x92>
    f588:	687b      	ldr	r3, [r7, #4]
    f58a:	681b      	ldr	r3, [r3, #0]
    f58c:	2b00      	cmp	r3, #0
    f58e:	d106      	bne.n	f59e <usart_enable_transceiver+0x92>
    f590:	481c      	ldr	r0, [pc, #112]	; (f604 <usart_enable_transceiver+0xf8>)
    f592:	491f      	ldr	r1, [pc, #124]	; (f610 <usart_enable_transceiver+0x104>)
    f594:	4a16      	ldr	r2, [pc, #88]	; (f5f0 <usart_enable_transceiver+0xe4>)
    f596:	4b1d      	ldr	r3, [pc, #116]	; (f60c <usart_enable_transceiver+0x100>)
    f598:	4c1b      	ldr	r4, [pc, #108]	; (f608 <usart_enable_transceiver+0xfc>)
    f59a:	47a0      	blx	r4
    f59c:	e7fe      	b.n	f59c <usart_enable_transceiver+0x90>

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    f59e:	687b      	ldr	r3, [r7, #4]
    f5a0:	681b      	ldr	r3, [r3, #0]
    f5a2:	60fb      	str	r3, [r7, #12]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    f5a4:	687b      	ldr	r3, [r7, #4]
    f5a6:	1c18      	adds	r0, r3, #0
    f5a8:	4b1a      	ldr	r3, [pc, #104]	; (f614 <usart_enable_transceiver+0x108>)
    f5aa:	4798      	blx	r3

	switch (transceiver_type) {
    f5ac:	1cfb      	adds	r3, r7, #3
    f5ae:	781b      	ldrb	r3, [r3, #0]
    f5b0:	2b00      	cmp	r3, #0
    f5b2:	d002      	beq.n	f5ba <usart_enable_transceiver+0xae>
    f5b4:	2b01      	cmp	r3, #1
    f5b6:	d00b      	beq.n	f5d0 <usart_enable_transceiver+0xc4>
    f5b8:	e015      	b.n	f5e6 <usart_enable_transceiver+0xda>
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    f5ba:	68fb      	ldr	r3, [r7, #12]
    f5bc:	685b      	ldr	r3, [r3, #4]
    f5be:	2280      	movs	r2, #128	; 0x80
    f5c0:	0292      	lsls	r2, r2, #10
    f5c2:	431a      	orrs	r2, r3
    f5c4:	68fb      	ldr	r3, [r7, #12]
    f5c6:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    f5c8:	687b      	ldr	r3, [r7, #4]
    f5ca:	2201      	movs	r2, #1
    f5cc:	715a      	strb	r2, [r3, #5]
			break;
    f5ce:	e00a      	b.n	f5e6 <usart_enable_transceiver+0xda>

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    f5d0:	68fb      	ldr	r3, [r7, #12]
    f5d2:	685b      	ldr	r3, [r3, #4]
    f5d4:	2280      	movs	r2, #128	; 0x80
    f5d6:	0252      	lsls	r2, r2, #9
    f5d8:	431a      	orrs	r2, r3
    f5da:	68fb      	ldr	r3, [r7, #12]
    f5dc:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    f5de:	687b      	ldr	r3, [r7, #4]
    f5e0:	2201      	movs	r2, #1
    f5e2:	719a      	strb	r2, [r3, #6]
			break;
    f5e4:	46c0      	nop			; (mov r8, r8)
	}
}
    f5e6:	46bd      	mov	sp, r7
    f5e8:	b005      	add	sp, #20
    f5ea:	bd90      	pop	{r4, r7, pc}
    f5ec:	0000f2d5 	.word	0x0000f2d5
    f5f0:	00025764 	.word	0x00025764
    f5f4:	000002b6 	.word	0x000002b6
    f5f8:	000256e4 	.word	0x000256e4
    f5fc:	000256fc 	.word	0x000256fc
    f600:	000106e9 	.word	0x000106e9
    f604:	00025704 	.word	0x00025704
    f608:	0001b62d 	.word	0x0001b62d
    f60c:	000002b7 	.word	0x000002b7
    f610:	00025728 	.word	0x00025728
    f614:	0000f315 	.word	0x0000f315

0000f618 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    f618:	b590      	push	{r4, r7, lr}
    f61a:	b085      	sub	sp, #20
    f61c:	af02      	add	r7, sp, #8
    f61e:	6078      	str	r0, [r7, #4]
    f620:	1c0a      	adds	r2, r1, #0
    f622:	1cfb      	adds	r3, r7, #3
    f624:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
    f626:	4b1c      	ldr	r3, [pc, #112]	; (f698 <usart_enable_callback+0x80>)
    f628:	4798      	blx	r3
    f62a:	1c03      	adds	r3, r0, #0
    f62c:	2b00      	cmp	r3, #0
    f62e:	d011      	beq.n	f654 <usart_enable_callback+0x3c>
    f630:	687b      	ldr	r3, [r7, #4]
    f632:	2b00      	cmp	r3, #0
    f634:	d11b      	bne.n	f66e <usart_enable_callback+0x56>
    f636:	4b18      	ldr	r3, [pc, #96]	; (f698 <usart_enable_callback+0x80>)
    f638:	4798      	blx	r3
    f63a:	1c02      	adds	r2, r0, #0
    f63c:	4b17      	ldr	r3, [pc, #92]	; (f69c <usart_enable_callback+0x84>)
    f63e:	4918      	ldr	r1, [pc, #96]	; (f6a0 <usart_enable_callback+0x88>)
    f640:	9100      	str	r1, [sp, #0]
    f642:	4918      	ldr	r1, [pc, #96]	; (f6a4 <usart_enable_callback+0x8c>)
    f644:	9101      	str	r1, [sp, #4]
    f646:	1c10      	adds	r0, r2, #0
    f648:	2101      	movs	r1, #1
    f64a:	1c1a      	adds	r2, r3, #0
    f64c:	2361      	movs	r3, #97	; 0x61
    f64e:	4c16      	ldr	r4, [pc, #88]	; (f6a8 <usart_enable_callback+0x90>)
    f650:	47a0      	blx	r4
    f652:	e00c      	b.n	f66e <usart_enable_callback+0x56>
    f654:	687b      	ldr	r3, [r7, #4]
    f656:	2b00      	cmp	r3, #0
    f658:	d109      	bne.n	f66e <usart_enable_callback+0x56>
    f65a:	4914      	ldr	r1, [pc, #80]	; (f6ac <usart_enable_callback+0x94>)
    f65c:	4a11      	ldr	r2, [pc, #68]	; (f6a4 <usart_enable_callback+0x8c>)
    f65e:	4b0f      	ldr	r3, [pc, #60]	; (f69c <usart_enable_callback+0x84>)
    f660:	1c08      	adds	r0, r1, #0
    f662:	1c11      	adds	r1, r2, #0
    f664:	1c1a      	adds	r2, r3, #0
    f666:	2361      	movs	r3, #97	; 0x61
    f668:	4c11      	ldr	r4, [pc, #68]	; (f6b0 <usart_enable_callback+0x98>)
    f66a:	47a0      	blx	r4
    f66c:	e7fe      	b.n	f66c <usart_enable_callback+0x54>

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    f66e:	687a      	ldr	r2, [r7, #4]
    f670:	2321      	movs	r3, #33	; 0x21
    f672:	5cd3      	ldrb	r3, [r2, r3]
    f674:	b2da      	uxtb	r2, r3
    f676:	1cfb      	adds	r3, r7, #3
    f678:	781b      	ldrb	r3, [r3, #0]
    f67a:	2101      	movs	r1, #1
    f67c:	1c08      	adds	r0, r1, #0
    f67e:	4098      	lsls	r0, r3
    f680:	1c03      	adds	r3, r0, #0
    f682:	b2db      	uxtb	r3, r3
    f684:	4313      	orrs	r3, r2
    f686:	b2db      	uxtb	r3, r3
    f688:	b2d9      	uxtb	r1, r3
    f68a:	687a      	ldr	r2, [r7, #4]
    f68c:	2321      	movs	r3, #33	; 0x21
    f68e:	54d1      	strb	r1, [r2, r3]

}
    f690:	46bd      	mov	sp, r7
    f692:	b003      	add	sp, #12
    f694:	bd90      	pop	{r4, r7, pc}
    f696:	46c0      	nop			; (mov r8, r8)
    f698:	0000f2d5 	.word	0x0000f2d5
    f69c:	0002579c 	.word	0x0002579c
    f6a0:	000256e4 	.word	0x000256e4
    f6a4:	000256fc 	.word	0x000256fc
    f6a8:	000106e9 	.word	0x000106e9
    f6ac:	00025704 	.word	0x00025704
    f6b0:	0001b62d 	.word	0x0001b62d

0000f6b4 <usart_serial_init>:
 * \retval true if the initialization was successful
 * \retval false if initialization failed (error in baud rate calculation)
 */
static inline bool usart_serial_init(struct usart_module *const module,
		usart_inst_t const hw, const struct usart_config *const config)
{
    f6b4:	b580      	push	{r7, lr}
    f6b6:	b084      	sub	sp, #16
    f6b8:	af00      	add	r7, sp, #0
    f6ba:	60f8      	str	r0, [r7, #12]
    f6bc:	60b9      	str	r1, [r7, #8]
    f6be:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    f6c0:	68f9      	ldr	r1, [r7, #12]
    f6c2:	68ba      	ldr	r2, [r7, #8]
    f6c4:	687b      	ldr	r3, [r7, #4]
    f6c6:	1c08      	adds	r0, r1, #0
    f6c8:	1c11      	adds	r1, r2, #0
    f6ca:	1c1a      	adds	r2, r3, #0
    f6cc:	4b05      	ldr	r3, [pc, #20]	; (f6e4 <usart_serial_init+0x30>)
    f6ce:	4798      	blx	r3
    f6d0:	1c03      	adds	r3, r0, #0
    f6d2:	2b00      	cmp	r3, #0
    f6d4:	d101      	bne.n	f6da <usart_serial_init+0x26>
		return true;
    f6d6:	2301      	movs	r3, #1
    f6d8:	e000      	b.n	f6dc <usart_serial_init+0x28>
	}
	else {
		return false;
    f6da:	2300      	movs	r3, #0
	}
}
    f6dc:	1c18      	adds	r0, r3, #0
    f6de:	46bd      	mov	sp, r7
    f6e0:	b004      	add	sp, #16
    f6e2:	bd80      	pop	{r7, pc}
    f6e4:	00015c05 	.word	0x00015c05

0000f6e8 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(struct usart_module *const module,
		uint8_t c)
{
    f6e8:	b580      	push	{r7, lr}
    f6ea:	b082      	sub	sp, #8
    f6ec:	af00      	add	r7, sp, #0
    f6ee:	6078      	str	r0, [r7, #4]
    f6f0:	1c0a      	adds	r2, r1, #0
    f6f2:	1cfb      	adds	r3, r7, #3
    f6f4:	701a      	strb	r2, [r3, #0]
	return usart_write_wait(module, c);
    f6f6:	1cfb      	adds	r3, r7, #3
    f6f8:	781b      	ldrb	r3, [r3, #0]
    f6fa:	b29b      	uxth	r3, r3
    f6fc:	687a      	ldr	r2, [r7, #4]
    f6fe:	1c10      	adds	r0, r2, #0
    f700:	1c19      	adds	r1, r3, #0
    f702:	4b03      	ldr	r3, [pc, #12]	; (f710 <usart_serial_putchar+0x28>)
    f704:	4798      	blx	r3
    f706:	1c03      	adds	r3, r0, #0
}
    f708:	1c18      	adds	r0, r3, #0
    f70a:	46bd      	mov	sp, r7
    f70c:	b002      	add	sp, #8
    f70e:	bd80      	pop	{r7, pc}
    f710:	00015fb1 	.word	0x00015fb1

0000f714 <usart_serial_getchar>:
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(struct usart_module *const module,
		uint8_t *c)
{
    f714:	b580      	push	{r7, lr}
    f716:	b084      	sub	sp, #16
    f718:	af00      	add	r7, sp, #0
    f71a:	6078      	str	r0, [r7, #4]
    f71c:	6039      	str	r1, [r7, #0]
	uint16_t temp;

	usart_read_wait(module, &temp);
    f71e:	687a      	ldr	r2, [r7, #4]
    f720:	1c3b      	adds	r3, r7, #0
    f722:	330e      	adds	r3, #14
    f724:	1c10      	adds	r0, r2, #0
    f726:	1c19      	adds	r1, r3, #0
    f728:	4b05      	ldr	r3, [pc, #20]	; (f740 <usart_serial_getchar+0x2c>)
    f72a:	4798      	blx	r3

	*c = temp;
    f72c:	1c3b      	adds	r3, r7, #0
    f72e:	330e      	adds	r3, #14
    f730:	881b      	ldrh	r3, [r3, #0]
    f732:	b2da      	uxtb	r2, r3
    f734:	683b      	ldr	r3, [r7, #0]
    f736:	701a      	strb	r2, [r3, #0]
}
    f738:	46bd      	mov	sp, r7
    f73a:	b004      	add	sp, #16
    f73c:	bd80      	pop	{r7, pc}
    f73e:	46c0      	nop			; (mov r8, r8)
    f740:	000160c5 	.word	0x000160c5

0000f744 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    f744:	b580      	push	{r7, lr}
    f746:	b084      	sub	sp, #16
    f748:	af00      	add	r7, sp, #0
    f74a:	60f8      	str	r0, [r7, #12]
    f74c:	60b9      	str	r1, [r7, #8]
    f74e:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    f750:	4b10      	ldr	r3, [pc, #64]	; (f794 <stdio_serial_init+0x50>)
    f752:	68fa      	ldr	r2, [r7, #12]
    f754:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    f756:	4b10      	ldr	r3, [pc, #64]	; (f798 <stdio_serial_init+0x54>)
    f758:	4a10      	ldr	r2, [pc, #64]	; (f79c <stdio_serial_init+0x58>)
    f75a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    f75c:	4b10      	ldr	r3, [pc, #64]	; (f7a0 <stdio_serial_init+0x5c>)
    f75e:	4a11      	ldr	r2, [pc, #68]	; (f7a4 <stdio_serial_init+0x60>)
    f760:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    f762:	68f9      	ldr	r1, [r7, #12]
    f764:	68ba      	ldr	r2, [r7, #8]
    f766:	687b      	ldr	r3, [r7, #4]
    f768:	1c08      	adds	r0, r1, #0
    f76a:	1c11      	adds	r1, r2, #0
    f76c:	1c1a      	adds	r2, r3, #0
    f76e:	4b0e      	ldr	r3, [pc, #56]	; (f7a8 <stdio_serial_init+0x64>)
    f770:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    f772:	4b0e      	ldr	r3, [pc, #56]	; (f7ac <stdio_serial_init+0x68>)
    f774:	681b      	ldr	r3, [r3, #0]
    f776:	689b      	ldr	r3, [r3, #8]
    f778:	1c18      	adds	r0, r3, #0
    f77a:	2100      	movs	r1, #0
    f77c:	4b0c      	ldr	r3, [pc, #48]	; (f7b0 <stdio_serial_init+0x6c>)
    f77e:	4798      	blx	r3
	setbuf(stdin, NULL);
    f780:	4b0a      	ldr	r3, [pc, #40]	; (f7ac <stdio_serial_init+0x68>)
    f782:	681b      	ldr	r3, [r3, #0]
    f784:	685b      	ldr	r3, [r3, #4]
    f786:	1c18      	adds	r0, r3, #0
    f788:	2100      	movs	r1, #0
    f78a:	4b09      	ldr	r3, [pc, #36]	; (f7b0 <stdio_serial_init+0x6c>)
    f78c:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    f78e:	46bd      	mov	sp, r7
    f790:	b004      	add	sp, #16
    f792:	bd80      	pop	{r7, pc}
    f794:	20001240 	.word	0x20001240
    f798:	2000123c 	.word	0x2000123c
    f79c:	0000f6e9 	.word	0x0000f6e9
    f7a0:	20001238 	.word	0x20001238
    f7a4:	0000f715 	.word	0x0000f715
    f7a8:	0000f6b5 	.word	0x0000f6b5
    f7ac:	200001a0 	.word	0x200001a0
    f7b0:	0001b8d1 	.word	0x0001b8d1

0000f7b4 <usart_read_callback>:

/************************************************************************/
/* Callback Functions                                                   */
/************************************************************************/
void usart_read_callback(const struct usart_module *const usart_module)
{
    f7b4:	b590      	push	{r4, r7, lr}
    f7b6:	b085      	sub	sp, #20
    f7b8:	af00      	add	r7, sp, #0
    f7ba:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
    f7bc:	1c3b      	adds	r3, r7, #0
    f7be:	330f      	adds	r3, #15
    f7c0:	2200      	movs	r2, #0
    f7c2:	701a      	strb	r2, [r3, #0]
	cmdFlag = false;
    f7c4:	4b4e      	ldr	r3, [pc, #312]	; (f900 <usart_read_callback+0x14c>)
    f7c6:	2200      	movs	r2, #0
    f7c8:	701a      	strb	r2, [r3, #0]
	uint8_t nLength = 0;
    f7ca:	1c3b      	adds	r3, r7, #0
    f7cc:	330d      	adds	r3, #13
    f7ce:	2200      	movs	r2, #0
    f7d0:	701a      	strb	r2, [r3, #0]
	uint8_t nStrEnd = 0;
    f7d2:	1c3b      	adds	r3, r7, #0
    f7d4:	330e      	adds	r3, #14
    f7d6:	2200      	movs	r2, #0
    f7d8:	701a      	strb	r2, [r3, #0]
	const char* strSearch = NULL;
    f7da:	2300      	movs	r3, #0
    f7dc:	60bb      	str	r3, [r7, #8]
	
	nLength = strlen((const char*)rx_buffer);
    f7de:	4b49      	ldr	r3, [pc, #292]	; (f904 <usart_read_callback+0x150>)
    f7e0:	1c18      	adds	r0, r3, #0
    f7e2:	4b49      	ldr	r3, [pc, #292]	; (f908 <usart_read_callback+0x154>)
    f7e4:	4798      	blx	r3
    f7e6:	1c02      	adds	r2, r0, #0
    f7e8:	1c3b      	adds	r3, r7, #0
    f7ea:	330d      	adds	r3, #13
    f7ec:	701a      	strb	r2, [r3, #0]
	strSearch = strchr((const char*)rx_buffer, '\n');
    f7ee:	4b45      	ldr	r3, [pc, #276]	; (f904 <usart_read_callback+0x150>)
    f7f0:	1c18      	adds	r0, r3, #0
    f7f2:	210a      	movs	r1, #10
    f7f4:	4b45      	ldr	r3, [pc, #276]	; (f90c <usart_read_callback+0x158>)
    f7f6:	4798      	blx	r3
    f7f8:	1c03      	adds	r3, r0, #0
    f7fa:	60bb      	str	r3, [r7, #8]
	if (strSearch != NULL)
    f7fc:	68bb      	ldr	r3, [r7, #8]
    f7fe:	2b00      	cmp	r3, #0
    f800:	d005      	beq.n	f80e <usart_read_callback+0x5a>
	{
		nStrEnd = strSearch - (const char*) rx_buffer;
    f802:	68ba      	ldr	r2, [r7, #8]
    f804:	4b3f      	ldr	r3, [pc, #252]	; (f904 <usart_read_callback+0x150>)
    f806:	1ad2      	subs	r2, r2, r3
    f808:	1c3b      	adds	r3, r7, #0
    f80a:	330e      	adds	r3, #14
    f80c:	701a      	strb	r2, [r3, #0]
	}
	command[0] = 0;
    f80e:	4b40      	ldr	r3, [pc, #256]	; (f910 <usart_read_callback+0x15c>)
    f810:	2200      	movs	r2, #0
    f812:	701a      	strb	r2, [r3, #0]
	// valid command
	if ((nLength-1) == nStrEnd ) {
    f814:	1c3b      	adds	r3, r7, #0
    f816:	330d      	adds	r3, #13
    f818:	781b      	ldrb	r3, [r3, #0]
    f81a:	1e5a      	subs	r2, r3, #1
    f81c:	1c3b      	adds	r3, r7, #0
    f81e:	330e      	adds	r3, #14
    f820:	781b      	ldrb	r3, [r3, #0]
    f822:	429a      	cmp	r2, r3
    f824:	d13f      	bne.n	f8a6 <usart_read_callback+0xf2>
		//dbg("\n[command received]");
		command[0] = nLength;
    f826:	4b3a      	ldr	r3, [pc, #232]	; (f910 <usart_read_callback+0x15c>)
    f828:	1c3a      	adds	r2, r7, #0
    f82a:	320d      	adds	r2, #13
    f82c:	7812      	ldrb	r2, [r2, #0]
    f82e:	701a      	strb	r2, [r3, #0]
		for(i=0; i<nLength; i++) {
    f830:	1c3b      	adds	r3, r7, #0
    f832:	330f      	adds	r3, #15
    f834:	2200      	movs	r2, #0
    f836:	701a      	strb	r2, [r3, #0]
    f838:	e012      	b.n	f860 <usart_read_callback+0xac>
			command[i+1] = rx_buffer[i];
    f83a:	1c3b      	adds	r3, r7, #0
    f83c:	330f      	adds	r3, #15
    f83e:	781b      	ldrb	r3, [r3, #0]
    f840:	3301      	adds	r3, #1
    f842:	1c3a      	adds	r2, r7, #0
    f844:	320f      	adds	r2, #15
    f846:	7812      	ldrb	r2, [r2, #0]
    f848:	492e      	ldr	r1, [pc, #184]	; (f904 <usart_read_callback+0x150>)
    f84a:	5c8a      	ldrb	r2, [r1, r2]
    f84c:	b2d1      	uxtb	r1, r2
    f84e:	4a30      	ldr	r2, [pc, #192]	; (f910 <usart_read_callback+0x15c>)
    f850:	54d1      	strb	r1, [r2, r3]
	command[0] = 0;
	// valid command
	if ((nLength-1) == nStrEnd ) {
		//dbg("\n[command received]");
		command[0] = nLength;
		for(i=0; i<nLength; i++) {
    f852:	1c3b      	adds	r3, r7, #0
    f854:	330f      	adds	r3, #15
    f856:	781a      	ldrb	r2, [r3, #0]
    f858:	1c3b      	adds	r3, r7, #0
    f85a:	330f      	adds	r3, #15
    f85c:	3201      	adds	r2, #1
    f85e:	701a      	strb	r2, [r3, #0]
    f860:	1c3a      	adds	r2, r7, #0
    f862:	320f      	adds	r2, #15
    f864:	1c3b      	adds	r3, r7, #0
    f866:	330d      	adds	r3, #13
    f868:	7812      	ldrb	r2, [r2, #0]
    f86a:	781b      	ldrb	r3, [r3, #0]
    f86c:	429a      	cmp	r2, r3
    f86e:	d3e4      	bcc.n	f83a <usart_read_callback+0x86>
			command[i+1] = rx_buffer[i];
		}
		cmdFlag = true;
    f870:	4b23      	ldr	r3, [pc, #140]	; (f900 <usart_read_callback+0x14c>)
    f872:	2201      	movs	r2, #1
    f874:	701a      	strb	r2, [r3, #0]
		//dbg_info("\n%s", command);
		for(i=0; i<MAX_RX_BUFFER_LENGTH; i++) {
    f876:	1c3b      	adds	r3, r7, #0
    f878:	330f      	adds	r3, #15
    f87a:	2200      	movs	r2, #0
    f87c:	701a      	strb	r2, [r3, #0]
    f87e:	e00c      	b.n	f89a <usart_read_callback+0xe6>
			rx_buffer[i] = 0;
    f880:	1c3b      	adds	r3, r7, #0
    f882:	330f      	adds	r3, #15
    f884:	781b      	ldrb	r3, [r3, #0]
    f886:	4a1f      	ldr	r2, [pc, #124]	; (f904 <usart_read_callback+0x150>)
    f888:	2100      	movs	r1, #0
    f88a:	54d1      	strb	r1, [r2, r3]
		for(i=0; i<nLength; i++) {
			command[i+1] = rx_buffer[i];
		}
		cmdFlag = true;
		//dbg_info("\n%s", command);
		for(i=0; i<MAX_RX_BUFFER_LENGTH; i++) {
    f88c:	1c3b      	adds	r3, r7, #0
    f88e:	330f      	adds	r3, #15
    f890:	781a      	ldrb	r2, [r3, #0]
    f892:	1c3b      	adds	r3, r7, #0
    f894:	330f      	adds	r3, #15
    f896:	3201      	adds	r2, #1
    f898:	701a      	strb	r2, [r3, #0]
    f89a:	1c3b      	adds	r3, r7, #0
    f89c:	330f      	adds	r3, #15
    f89e:	781b      	ldrb	r3, [r3, #0]
    f8a0:	2b13      	cmp	r3, #19
    f8a2:	d9ed      	bls.n	f880 <usart_read_callback+0xcc>
    f8a4:	e028      	b.n	f8f8 <usart_read_callback+0x144>
			rx_buffer[i] = 0;
		}
		
	// invalid command
	} else {
		dbg_info("\n[invalid command %d, %d, %d]", rx_buffer[0], rx_buffer[1], rx_buffer[2]);
    f8a6:	4b17      	ldr	r3, [pc, #92]	; (f904 <usart_read_callback+0x150>)
    f8a8:	681b      	ldr	r3, [r3, #0]
    f8aa:	b2db      	uxtb	r3, r3
    f8ac:	1c19      	adds	r1, r3, #0
    f8ae:	4b15      	ldr	r3, [pc, #84]	; (f904 <usart_read_callback+0x150>)
    f8b0:	681b      	ldr	r3, [r3, #0]
    f8b2:	041b      	lsls	r3, r3, #16
    f8b4:	0e1b      	lsrs	r3, r3, #24
    f8b6:	b2db      	uxtb	r3, r3
    f8b8:	1c1a      	adds	r2, r3, #0
    f8ba:	4b12      	ldr	r3, [pc, #72]	; (f904 <usart_read_callback+0x150>)
    f8bc:	681b      	ldr	r3, [r3, #0]
    f8be:	021b      	lsls	r3, r3, #8
    f8c0:	0e1b      	lsrs	r3, r3, #24
    f8c2:	b2db      	uxtb	r3, r3
    f8c4:	4813      	ldr	r0, [pc, #76]	; (f914 <usart_read_callback+0x160>)
    f8c6:	4c14      	ldr	r4, [pc, #80]	; (f918 <usart_read_callback+0x164>)
    f8c8:	47a0      	blx	r4
		for(i=0; i<MAX_RX_BUFFER_LENGTH; i++) {
    f8ca:	1c3b      	adds	r3, r7, #0
    f8cc:	330f      	adds	r3, #15
    f8ce:	2200      	movs	r2, #0
    f8d0:	701a      	strb	r2, [r3, #0]
    f8d2:	e00c      	b.n	f8ee <usart_read_callback+0x13a>
			rx_buffer[i] = 0;
    f8d4:	1c3b      	adds	r3, r7, #0
    f8d6:	330f      	adds	r3, #15
    f8d8:	781b      	ldrb	r3, [r3, #0]
    f8da:	4a0a      	ldr	r2, [pc, #40]	; (f904 <usart_read_callback+0x150>)
    f8dc:	2100      	movs	r1, #0
    f8de:	54d1      	strb	r1, [r2, r3]
		}
		
	// invalid command
	} else {
		dbg_info("\n[invalid command %d, %d, %d]", rx_buffer[0], rx_buffer[1], rx_buffer[2]);
		for(i=0; i<MAX_RX_BUFFER_LENGTH; i++) {
    f8e0:	1c3b      	adds	r3, r7, #0
    f8e2:	330f      	adds	r3, #15
    f8e4:	781a      	ldrb	r2, [r3, #0]
    f8e6:	1c3b      	adds	r3, r7, #0
    f8e8:	330f      	adds	r3, #15
    f8ea:	3201      	adds	r2, #1
    f8ec:	701a      	strb	r2, [r3, #0]
    f8ee:	1c3b      	adds	r3, r7, #0
    f8f0:	330f      	adds	r3, #15
    f8f2:	781b      	ldrb	r3, [r3, #0]
    f8f4:	2b13      	cmp	r3, #19
    f8f6:	d9ed      	bls.n	f8d4 <usart_read_callback+0x120>
			rx_buffer[i] = 0;
		}
	}
	
}
    f8f8:	46bd      	mov	sp, r7
    f8fa:	b005      	add	sp, #20
    f8fc:	bd90      	pop	{r4, r7, pc}
    f8fe:	46c0      	nop			; (mov r8, r8)
    f900:	2000036f 	.word	0x2000036f
    f904:	20001094 	.word	0x20001094
    f908:	0001bb1d 	.word	0x0001bb1d
    f90c:	0001ba45 	.word	0x0001ba45
    f910:	20001080 	.word	0x20001080
    f914:	000257d4 	.word	0x000257d4
    f918:	0001b62d 	.word	0x0001b62d

0000f91c <cdc_uart_init>:
 *
 * Initializes the SERCOM USART (SERCOM4) used for sending the
 * unit test status to the computer via the EDBG CDC gateway.
 */
void cdc_uart_init(void)
{
    f91c:	b580      	push	{r7, lr}
    f91e:	b08c      	sub	sp, #48	; 0x30
    f920:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	/* Configure USART for unit test output */
	usart_get_config_defaults(&usart_conf);
    f922:	1c3b      	adds	r3, r7, #0
    f924:	1c18      	adds	r0, r3, #0
    f926:	4b18      	ldr	r3, [pc, #96]	; (f988 <cdc_uart_init+0x6c>)
    f928:	4798      	blx	r3
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    f92a:	1c3b      	adds	r3, r7, #0
    f92c:	22c4      	movs	r2, #196	; 0xc4
    f92e:	0392      	lsls	r2, r2, #14
    f930:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    f932:	1c3b      	adds	r3, r7, #0
    f934:	2201      	movs	r2, #1
    f936:	4252      	negs	r2, r2
    f938:	621a      	str	r2, [r3, #32]
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    f93a:	1c3b      	adds	r3, r7, #0
    f93c:	2201      	movs	r2, #1
    f93e:	4252      	negs	r2, r2
    f940:	625a      	str	r2, [r3, #36]	; 0x24
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    f942:	1c3b      	adds	r3, r7, #0
    f944:	4a11      	ldr	r2, [pc, #68]	; (f98c <cdc_uart_init+0x70>)
    f946:	629a      	str	r2, [r3, #40]	; 0x28
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    f948:	1c3b      	adds	r3, r7, #0
    f94a:	4a11      	ldr	r2, [pc, #68]	; (f990 <cdc_uart_init+0x74>)
    f94c:	62da      	str	r2, [r3, #44]	; 0x2c
	usart_conf.baudrate    = 115200;
    f94e:	1c3b      	adds	r3, r7, #0
    f950:	22e1      	movs	r2, #225	; 0xe1
    f952:	0252      	lsls	r2, r2, #9
    f954:	611a      	str	r2, [r3, #16]

	stdio_serial_init(&cdc_uart_module, CONF_STDIO_USART, &usart_conf);
    f956:	490f      	ldr	r1, [pc, #60]	; (f994 <cdc_uart_init+0x78>)
    f958:	4a0f      	ldr	r2, [pc, #60]	; (f998 <cdc_uart_init+0x7c>)
    f95a:	1c3b      	adds	r3, r7, #0
    f95c:	1c08      	adds	r0, r1, #0
    f95e:	1c11      	adds	r1, r2, #0
    f960:	1c1a      	adds	r2, r3, #0
    f962:	4b0e      	ldr	r3, [pc, #56]	; (f99c <cdc_uart_init+0x80>)
    f964:	4798      	blx	r3
	usart_enable(&cdc_uart_module);
    f966:	4b0b      	ldr	r3, [pc, #44]	; (f994 <cdc_uart_init+0x78>)
    f968:	1c18      	adds	r0, r3, #0
    f96a:	4b0d      	ldr	r3, [pc, #52]	; (f9a0 <cdc_uart_init+0x84>)
    f96c:	4798      	blx	r3
	
	usart_enable_transceiver(&cdc_uart_module, USART_TRANSCEIVER_TX);
    f96e:	4b09      	ldr	r3, [pc, #36]	; (f994 <cdc_uart_init+0x78>)
    f970:	1c18      	adds	r0, r3, #0
    f972:	2101      	movs	r1, #1
    f974:	4b0b      	ldr	r3, [pc, #44]	; (f9a4 <cdc_uart_init+0x88>)
    f976:	4798      	blx	r3
	usart_enable_transceiver(&cdc_uart_module, USART_TRANSCEIVER_RX);
    f978:	4b06      	ldr	r3, [pc, #24]	; (f994 <cdc_uart_init+0x78>)
    f97a:	1c18      	adds	r0, r3, #0
    f97c:	2100      	movs	r1, #0
    f97e:	4b09      	ldr	r3, [pc, #36]	; (f9a4 <cdc_uart_init+0x88>)
    f980:	4798      	blx	r3
}
    f982:	46bd      	mov	sp, r7
    f984:	b00c      	add	sp, #48	; 0x30
    f986:	bd80      	pop	{r7, pc}
    f988:	0000f339 	.word	0x0000f339
    f98c:	00180002 	.word	0x00180002
    f990:	00190002 	.word	0x00190002
    f994:	2000105c 	.word	0x2000105c
    f998:	42001400 	.word	0x42001400
    f99c:	0000f745 	.word	0x0000f745
    f9a0:	0000f419 	.word	0x0000f419
    f9a4:	0000f50d 	.word	0x0000f50d

0000f9a8 <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    f9a8:	b580      	push	{r7, lr}
    f9aa:	af00      	add	r7, sp, #0
	//usart_register_callback(&cdc_uart_module,
	//		usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&cdc_uart_module,
    f9ac:	4a06      	ldr	r2, [pc, #24]	; (f9c8 <configure_usart_callbacks+0x20>)
    f9ae:	4b07      	ldr	r3, [pc, #28]	; (f9cc <configure_usart_callbacks+0x24>)
    f9b0:	1c10      	adds	r0, r2, #0
    f9b2:	1c19      	adds	r1, r3, #0
    f9b4:	2201      	movs	r2, #1
    f9b6:	4b06      	ldr	r3, [pc, #24]	; (f9d0 <configure_usart_callbacks+0x28>)
    f9b8:	4798      	blx	r3
			usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	//usart_enable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
    f9ba:	4b03      	ldr	r3, [pc, #12]	; (f9c8 <configure_usart_callbacks+0x20>)
    f9bc:	1c18      	adds	r0, r3, #0
    f9be:	2101      	movs	r1, #1
    f9c0:	4b04      	ldr	r3, [pc, #16]	; (f9d4 <configure_usart_callbacks+0x2c>)
    f9c2:	4798      	blx	r3
}
    f9c4:	46bd      	mov	sp, r7
    f9c6:	bd80      	pop	{r7, pc}
    f9c8:	2000105c 	.word	0x2000105c
    f9cc:	0000f7b5 	.word	0x0000f7b5
    f9d0:	00016345 	.word	0x00016345
    f9d4:	0000f619 	.word	0x0000f619

0000f9d8 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
    f9d8:	b580      	push	{r7, lr}
    f9da:	af00      	add	r7, sp, #0
	return test_case_ptr;
    f9dc:	4b02      	ldr	r3, [pc, #8]	; (f9e8 <test_get_case+0x10>)
    f9de:	681b      	ldr	r3, [r3, #0]
}
    f9e0:	1c18      	adds	r0, r3, #0
    f9e2:	46bd      	mov	sp, r7
    f9e4:	bd80      	pop	{r7, pc}
    f9e6:	46c0      	nop			; (mov r8, r8)
    f9e8:	2000041c 	.word	0x2000041c

0000f9ec <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    f9ec:	b580      	push	{r7, lr}
    f9ee:	b082      	sub	sp, #8
    f9f0:	af00      	add	r7, sp, #0
    f9f2:	1c02      	adds	r2, r0, #0
    f9f4:	1dfb      	adds	r3, r7, #7
    f9f6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    f9f8:	4b06      	ldr	r3, [pc, #24]	; (fa14 <system_interrupt_enable+0x28>)
    f9fa:	1dfa      	adds	r2, r7, #7
    f9fc:	7812      	ldrb	r2, [r2, #0]
    f9fe:	1c11      	adds	r1, r2, #0
    fa00:	221f      	movs	r2, #31
    fa02:	400a      	ands	r2, r1
    fa04:	2101      	movs	r1, #1
    fa06:	1c08      	adds	r0, r1, #0
    fa08:	4090      	lsls	r0, r2
    fa0a:	1c02      	adds	r2, r0, #0
    fa0c:	601a      	str	r2, [r3, #0]
}
    fa0e:	46bd      	mov	sp, r7
    fa10:	b002      	add	sp, #8
    fa12:	bd80      	pop	{r7, pc}
    fa14:	e000e100 	.word	0xe000e100

0000fa18 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
static inline void adc_get_config_defaults(struct adc_config *const config)
{
    fa18:	b590      	push	{r4, r7, lr}
    fa1a:	b085      	sub	sp, #20
    fa1c:	af02      	add	r7, sp, #8
    fa1e:	6078      	str	r0, [r7, #4]
	Assert(config);
    fa20:	4b45      	ldr	r3, [pc, #276]	; (fb38 <adc_get_config_defaults+0x120>)
    fa22:	4798      	blx	r3
    fa24:	1c03      	adds	r3, r0, #0
    fa26:	2b00      	cmp	r3, #0
    fa28:	d011      	beq.n	fa4e <adc_get_config_defaults+0x36>
    fa2a:	687b      	ldr	r3, [r7, #4]
    fa2c:	2b00      	cmp	r3, #0
    fa2e:	d119      	bne.n	fa64 <adc_get_config_defaults+0x4c>
    fa30:	4b41      	ldr	r3, [pc, #260]	; (fb38 <adc_get_config_defaults+0x120>)
    fa32:	4798      	blx	r3
    fa34:	1c01      	adds	r1, r0, #0
    fa36:	4a41      	ldr	r2, [pc, #260]	; (fb3c <adc_get_config_defaults+0x124>)
    fa38:	23fd      	movs	r3, #253	; 0xfd
    fa3a:	009b      	lsls	r3, r3, #2
    fa3c:	4840      	ldr	r0, [pc, #256]	; (fb40 <adc_get_config_defaults+0x128>)
    fa3e:	9000      	str	r0, [sp, #0]
    fa40:	4840      	ldr	r0, [pc, #256]	; (fb44 <adc_get_config_defaults+0x12c>)
    fa42:	9001      	str	r0, [sp, #4]
    fa44:	1c08      	adds	r0, r1, #0
    fa46:	2101      	movs	r1, #1
    fa48:	4c3f      	ldr	r4, [pc, #252]	; (fb48 <adc_get_config_defaults+0x130>)
    fa4a:	47a0      	blx	r4
    fa4c:	e00a      	b.n	fa64 <adc_get_config_defaults+0x4c>
    fa4e:	687b      	ldr	r3, [r7, #4]
    fa50:	2b00      	cmp	r3, #0
    fa52:	d107      	bne.n	fa64 <adc_get_config_defaults+0x4c>
    fa54:	483d      	ldr	r0, [pc, #244]	; (fb4c <adc_get_config_defaults+0x134>)
    fa56:	493b      	ldr	r1, [pc, #236]	; (fb44 <adc_get_config_defaults+0x12c>)
    fa58:	4a38      	ldr	r2, [pc, #224]	; (fb3c <adc_get_config_defaults+0x124>)
    fa5a:	23fd      	movs	r3, #253	; 0xfd
    fa5c:	009b      	lsls	r3, r3, #2
    fa5e:	4c3c      	ldr	r4, [pc, #240]	; (fb50 <adc_get_config_defaults+0x138>)
    fa60:	47a0      	blx	r4
    fa62:	e7fe      	b.n	fa62 <adc_get_config_defaults+0x4a>
	config->clock_source                  = GCLK_GENERATOR_0;
    fa64:	687b      	ldr	r3, [r7, #4]
    fa66:	2200      	movs	r2, #0
    fa68:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    fa6a:	687b      	ldr	r3, [r7, #4]
    fa6c:	2200      	movs	r2, #0
    fa6e:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    fa70:	687b      	ldr	r3, [r7, #4]
    fa72:	2200      	movs	r2, #0
    fa74:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    fa76:	687b      	ldr	r3, [r7, #4]
    fa78:	2200      	movs	r2, #0
    fa7a:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    fa7c:	687b      	ldr	r3, [r7, #4]
    fa7e:	2200      	movs	r2, #0
    fa80:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    fa82:	687b      	ldr	r3, [r7, #4]
    fa84:	2200      	movs	r2, #0
    fa86:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    fa88:	687b      	ldr	r3, [r7, #4]
    fa8a:	2200      	movs	r2, #0
    fa8c:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    fa8e:	687b      	ldr	r3, [r7, #4]
    fa90:	2200      	movs	r2, #0
    fa92:	609a      	str	r2, [r3, #8]
	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    fa94:	687b      	ldr	r3, [r7, #4]
    fa96:	2200      	movs	r2, #0
    fa98:	731a      	strb	r2, [r3, #12]
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    fa9a:	687b      	ldr	r3, [r7, #4]
    fa9c:	22c0      	movs	r2, #192	; 0xc0
    fa9e:	0152      	lsls	r2, r2, #5
    faa0:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    faa2:	687b      	ldr	r3, [r7, #4]
    faa4:	2200      	movs	r2, #0
    faa6:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    faa8:	687b      	ldr	r3, [r7, #4]
    faaa:	2200      	movs	r2, #0
    faac:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    faae:	687b      	ldr	r3, [r7, #4]
    fab0:	2200      	movs	r2, #0
    fab2:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    fab4:	687b      	ldr	r3, [r7, #4]
    fab6:	2200      	movs	r2, #0
    fab8:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    faba:	687b      	ldr	r3, [r7, #4]
    fabc:	2200      	movs	r2, #0
    fabe:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    fac0:	687a      	ldr	r2, [r7, #4]
    fac2:	232a      	movs	r3, #42	; 0x2a
    fac4:	2100      	movs	r1, #0
    fac6:	54d1      	strb	r1, [r2, r3]
	config->run_in_standby                = false;
    fac8:	687b      	ldr	r3, [r7, #4]
    faca:	2200      	movs	r2, #0
    facc:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    face:	687b      	ldr	r3, [r7, #4]
    fad0:	2200      	movs	r2, #0
    fad2:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = true;
    fad4:	687a      	ldr	r2, [r7, #4]
    fad6:	2324      	movs	r3, #36	; 0x24
    fad8:	2101      	movs	r1, #1
    fada:	54d1      	strb	r1, [r2, r3]
	config->correction.gain_correction    =
			(*(uint32_t *)ADC_FUSES_GAINCORR_ADDR &
    fadc:	4b1d      	ldr	r3, [pc, #116]	; (fb54 <adc_get_config_defaults+0x13c>)
    fade:	681a      	ldr	r2, [r3, #0]
    fae0:	4b1d      	ldr	r3, [pc, #116]	; (fb58 <adc_get_config_defaults+0x140>)
    fae2:	4013      	ands	r3, r2
			ADC_FUSES_GAINCORR_Msk) >> ADC_FUSES_GAINCORR_Pos;
    fae4:	08db      	lsrs	r3, r3, #3
	config->freerunning                   = false;
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
	config->run_in_standby                = false;
	config->reference_compensation_enable = false;
	config->correction.correction_enable  = true;
	config->correction.gain_correction    =
    fae6:	b29a      	uxth	r2, r3
    fae8:	687b      	ldr	r3, [r7, #4]
    faea:	84da      	strh	r2, [r3, #38]	; 0x26
			(*(uint32_t *)ADC_FUSES_GAINCORR_ADDR &
			ADC_FUSES_GAINCORR_Msk) >> ADC_FUSES_GAINCORR_Pos;
	config->correction.offset_correction  =
			(*(uint32_t *)ADC_FUSES_OFFSETCORR_ADDR &
    faec:	4b19      	ldr	r3, [pc, #100]	; (fb54 <adc_get_config_defaults+0x13c>)
    faee:	681a      	ldr	r2, [r3, #0]
    faf0:	4b1a      	ldr	r3, [pc, #104]	; (fb5c <adc_get_config_defaults+0x144>)
    faf2:	4013      	ands	r3, r2
			ADC_FUSES_OFFSETCORR_Msk) >> ADC_FUSES_OFFSETCORR_Pos;
    faf4:	0bdb      	lsrs	r3, r3, #15
	config->reference_compensation_enable = false;
	config->correction.correction_enable  = true;
	config->correction.gain_correction    =
			(*(uint32_t *)ADC_FUSES_GAINCORR_ADDR &
			ADC_FUSES_GAINCORR_Msk) >> ADC_FUSES_GAINCORR_Pos;
	config->correction.offset_correction  =
    faf6:	b29a      	uxth	r2, r3
    faf8:	687b      	ldr	r3, [r7, #4]
    fafa:	851a      	strh	r2, [r3, #40]	; 0x28
			(*(uint32_t *)ADC_FUSES_OFFSETCORR_ADDR &
			ADC_FUSES_OFFSETCORR_Msk) >> ADC_FUSES_OFFSETCORR_Pos;
	config->sample_length                 = 0;
    fafc:	687b      	ldr	r3, [r7, #4]
    fafe:	2200      	movs	r2, #0
    fb00:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    fb02:	687a      	ldr	r2, [r7, #4]
    fb04:	232b      	movs	r3, #43	; 0x2b
    fb06:	2100      	movs	r1, #0
    fb08:	54d1      	strb	r1, [r2, r3]
	config->pin_scan.inputs_to_scan       = 0;
    fb0a:	687a      	ldr	r2, [r7, #4]
    fb0c:	232c      	movs	r3, #44	; 0x2c
    fb0e:	2100      	movs	r1, #0
    fb10:	54d1      	strb	r1, [r2, r3]

	if (config->correction.gain_correction == 0xFFF ||
    fb12:	687b      	ldr	r3, [r7, #4]
    fb14:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    fb16:	4b12      	ldr	r3, [pc, #72]	; (fb60 <adc_get_config_defaults+0x148>)
    fb18:	429a      	cmp	r2, r3
    fb1a:	d005      	beq.n	fb28 <adc_get_config_defaults+0x110>
			config->correction.offset_correction == 0xFFF) {
    fb1c:	687b      	ldr	r3, [r7, #4]
    fb1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
			ADC_FUSES_OFFSETCORR_Msk) >> ADC_FUSES_OFFSETCORR_Pos;
	config->sample_length                 = 0;
	config->pin_scan.offset_start_scan    = 0;
	config->pin_scan.inputs_to_scan       = 0;

	if (config->correction.gain_correction == 0xFFF ||
    fb20:	b21a      	sxth	r2, r3
    fb22:	4b0f      	ldr	r3, [pc, #60]	; (fb60 <adc_get_config_defaults+0x148>)
    fb24:	429a      	cmp	r2, r3
    fb26:	d103      	bne.n	fb30 <adc_get_config_defaults+0x118>
			config->correction.offset_correction == 0xFFF) {
		config->correction.correction_enable = false;
    fb28:	687a      	ldr	r2, [r7, #4]
    fb2a:	2324      	movs	r3, #36	; 0x24
    fb2c:	2100      	movs	r1, #0
    fb2e:	54d1      	strb	r1, [r2, r3]
	}
}
    fb30:	46bd      	mov	sp, r7
    fb32:	b003      	add	sp, #12
    fb34:	bd90      	pop	{r4, r7, pc}
    fb36:	46c0      	nop			; (mov r8, r8)
    fb38:	0000f9d9 	.word	0x0000f9d9
    fb3c:	000257f4 	.word	0x000257f4
    fb40:	00025818 	.word	0x00025818
    fb44:	00025830 	.word	0x00025830
    fb48:	000106e9 	.word	0x000106e9
    fb4c:	00025838 	.word	0x00025838
    fb50:	0001b62d 	.word	0x0001b62d
    fb54:	00806020 	.word	0x00806020
    fb58:	00007ff8 	.word	0x00007ff8
    fb5c:	07ff8000 	.word	0x07ff8000
    fb60:	00000fff 	.word	0x00000fff

0000fb64 <adc_is_syncing>:
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    fb64:	b590      	push	{r4, r7, lr}
    fb66:	b087      	sub	sp, #28
    fb68:	af02      	add	r7, sp, #8
    fb6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
    fb6c:	4b19      	ldr	r3, [pc, #100]	; (fbd4 <adc_is_syncing+0x70>)
    fb6e:	4798      	blx	r3
    fb70:	1c03      	adds	r3, r0, #0
    fb72:	2b00      	cmp	r3, #0
    fb74:	d010      	beq.n	fb98 <adc_is_syncing+0x34>
    fb76:	687b      	ldr	r3, [r7, #4]
    fb78:	2b00      	cmp	r3, #0
    fb7a:	d117      	bne.n	fbac <adc_is_syncing+0x48>
    fb7c:	4b15      	ldr	r3, [pc, #84]	; (fbd4 <adc_is_syncing+0x70>)
    fb7e:	4798      	blx	r3
    fb80:	1c01      	adds	r1, r0, #0
    fb82:	4a15      	ldr	r2, [pc, #84]	; (fbd8 <adc_is_syncing+0x74>)
    fb84:	4b15      	ldr	r3, [pc, #84]	; (fbdc <adc_is_syncing+0x78>)
    fb86:	4816      	ldr	r0, [pc, #88]	; (fbe0 <adc_is_syncing+0x7c>)
    fb88:	9000      	str	r0, [sp, #0]
    fb8a:	4816      	ldr	r0, [pc, #88]	; (fbe4 <adc_is_syncing+0x80>)
    fb8c:	9001      	str	r0, [sp, #4]
    fb8e:	1c08      	adds	r0, r1, #0
    fb90:	2101      	movs	r1, #1
    fb92:	4c15      	ldr	r4, [pc, #84]	; (fbe8 <adc_is_syncing+0x84>)
    fb94:	47a0      	blx	r4
    fb96:	e009      	b.n	fbac <adc_is_syncing+0x48>
    fb98:	687b      	ldr	r3, [r7, #4]
    fb9a:	2b00      	cmp	r3, #0
    fb9c:	d106      	bne.n	fbac <adc_is_syncing+0x48>
    fb9e:	4813      	ldr	r0, [pc, #76]	; (fbec <adc_is_syncing+0x88>)
    fba0:	4910      	ldr	r1, [pc, #64]	; (fbe4 <adc_is_syncing+0x80>)
    fba2:	4a0d      	ldr	r2, [pc, #52]	; (fbd8 <adc_is_syncing+0x74>)
    fba4:	4b0d      	ldr	r3, [pc, #52]	; (fbdc <adc_is_syncing+0x78>)
    fba6:	4c12      	ldr	r4, [pc, #72]	; (fbf0 <adc_is_syncing+0x8c>)
    fba8:	47a0      	blx	r4
    fbaa:	e7fe      	b.n	fbaa <adc_is_syncing+0x46>

	Adc *const adc_module = module_inst->hw;
    fbac:	687b      	ldr	r3, [r7, #4]
    fbae:	681b      	ldr	r3, [r3, #0]
    fbb0:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    fbb2:	68fb      	ldr	r3, [r7, #12]
    fbb4:	699b      	ldr	r3, [r3, #24]
    fbb6:	041b      	lsls	r3, r3, #16
    fbb8:	0e1b      	lsrs	r3, r3, #24
    fbba:	b2db      	uxtb	r3, r3
    fbbc:	b2db      	uxtb	r3, r3
    fbbe:	b25b      	sxtb	r3, r3
    fbc0:	2b00      	cmp	r3, #0
    fbc2:	da01      	bge.n	fbc8 <adc_is_syncing+0x64>
		return true;
    fbc4:	2301      	movs	r3, #1
    fbc6:	e000      	b.n	fbca <adc_is_syncing+0x66>
	}

	return false;
    fbc8:	2300      	movs	r3, #0
}
    fbca:	1c18      	adds	r0, r3, #0
    fbcc:	46bd      	mov	sp, r7
    fbce:	b005      	add	sp, #20
    fbd0:	bd90      	pop	{r4, r7, pc}
    fbd2:	46c0      	nop			; (mov r8, r8)
    fbd4:	0000f9d9 	.word	0x0000f9d9
    fbd8:	000257f4 	.word	0x000257f4
    fbdc:	0000048d 	.word	0x0000048d
    fbe0:	00025818 	.word	0x00025818
    fbe4:	0002585c 	.word	0x0002585c
    fbe8:	000106e9 	.word	0x000106e9
    fbec:	00025838 	.word	0x00025838
    fbf0:	0001b62d 	.word	0x0001b62d

0000fbf4 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    fbf4:	b590      	push	{r4, r7, lr}
    fbf6:	b087      	sub	sp, #28
    fbf8:	af02      	add	r7, sp, #8
    fbfa:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
    fbfc:	4b2e      	ldr	r3, [pc, #184]	; (fcb8 <adc_enable+0xc4>)
    fbfe:	4798      	blx	r3
    fc00:	1c03      	adds	r3, r0, #0
    fc02:	2b00      	cmp	r3, #0
    fc04:	d010      	beq.n	fc28 <adc_enable+0x34>
    fc06:	687b      	ldr	r3, [r7, #4]
    fc08:	2b00      	cmp	r3, #0
    fc0a:	d117      	bne.n	fc3c <adc_enable+0x48>
    fc0c:	4b2a      	ldr	r3, [pc, #168]	; (fcb8 <adc_enable+0xc4>)
    fc0e:	4798      	blx	r3
    fc10:	1c01      	adds	r1, r0, #0
    fc12:	4a2a      	ldr	r2, [pc, #168]	; (fcbc <adc_enable+0xc8>)
    fc14:	4b2a      	ldr	r3, [pc, #168]	; (fcc0 <adc_enable+0xcc>)
    fc16:	482b      	ldr	r0, [pc, #172]	; (fcc4 <adc_enable+0xd0>)
    fc18:	9000      	str	r0, [sp, #0]
    fc1a:	482b      	ldr	r0, [pc, #172]	; (fcc8 <adc_enable+0xd4>)
    fc1c:	9001      	str	r0, [sp, #4]
    fc1e:	1c08      	adds	r0, r1, #0
    fc20:	2101      	movs	r1, #1
    fc22:	4c2a      	ldr	r4, [pc, #168]	; (fccc <adc_enable+0xd8>)
    fc24:	47a0      	blx	r4
    fc26:	e009      	b.n	fc3c <adc_enable+0x48>
    fc28:	687b      	ldr	r3, [r7, #4]
    fc2a:	2b00      	cmp	r3, #0
    fc2c:	d106      	bne.n	fc3c <adc_enable+0x48>
    fc2e:	4828      	ldr	r0, [pc, #160]	; (fcd0 <adc_enable+0xdc>)
    fc30:	4925      	ldr	r1, [pc, #148]	; (fcc8 <adc_enable+0xd4>)
    fc32:	4a22      	ldr	r2, [pc, #136]	; (fcbc <adc_enable+0xc8>)
    fc34:	4b22      	ldr	r3, [pc, #136]	; (fcc0 <adc_enable+0xcc>)
    fc36:	4c27      	ldr	r4, [pc, #156]	; (fcd4 <adc_enable+0xe0>)
    fc38:	47a0      	blx	r4
    fc3a:	e7fe      	b.n	fc3a <adc_enable+0x46>
	Assert(module_inst->hw);
    fc3c:	4b1e      	ldr	r3, [pc, #120]	; (fcb8 <adc_enable+0xc4>)
    fc3e:	4798      	blx	r3
    fc40:	1c03      	adds	r3, r0, #0
    fc42:	2b00      	cmp	r3, #0
    fc44:	d011      	beq.n	fc6a <adc_enable+0x76>
    fc46:	687b      	ldr	r3, [r7, #4]
    fc48:	681b      	ldr	r3, [r3, #0]
    fc4a:	2b00      	cmp	r3, #0
    fc4c:	d118      	bne.n	fc80 <adc_enable+0x8c>
    fc4e:	4b1a      	ldr	r3, [pc, #104]	; (fcb8 <adc_enable+0xc4>)
    fc50:	4798      	blx	r3
    fc52:	1c01      	adds	r1, r0, #0
    fc54:	4a19      	ldr	r2, [pc, #100]	; (fcbc <adc_enable+0xc8>)
    fc56:	4b20      	ldr	r3, [pc, #128]	; (fcd8 <adc_enable+0xe4>)
    fc58:	481a      	ldr	r0, [pc, #104]	; (fcc4 <adc_enable+0xd0>)
    fc5a:	9000      	str	r0, [sp, #0]
    fc5c:	481f      	ldr	r0, [pc, #124]	; (fcdc <adc_enable+0xe8>)
    fc5e:	9001      	str	r0, [sp, #4]
    fc60:	1c08      	adds	r0, r1, #0
    fc62:	2101      	movs	r1, #1
    fc64:	4c19      	ldr	r4, [pc, #100]	; (fccc <adc_enable+0xd8>)
    fc66:	47a0      	blx	r4
    fc68:	e00a      	b.n	fc80 <adc_enable+0x8c>
    fc6a:	687b      	ldr	r3, [r7, #4]
    fc6c:	681b      	ldr	r3, [r3, #0]
    fc6e:	2b00      	cmp	r3, #0
    fc70:	d106      	bne.n	fc80 <adc_enable+0x8c>
    fc72:	4817      	ldr	r0, [pc, #92]	; (fcd0 <adc_enable+0xdc>)
    fc74:	4919      	ldr	r1, [pc, #100]	; (fcdc <adc_enable+0xe8>)
    fc76:	4a11      	ldr	r2, [pc, #68]	; (fcbc <adc_enable+0xc8>)
    fc78:	4b17      	ldr	r3, [pc, #92]	; (fcd8 <adc_enable+0xe4>)
    fc7a:	4c16      	ldr	r4, [pc, #88]	; (fcd4 <adc_enable+0xe0>)
    fc7c:	47a0      	blx	r4
    fc7e:	e7fe      	b.n	fc7e <adc_enable+0x8a>

	Adc *const adc_module = module_inst->hw;
    fc80:	687b      	ldr	r3, [r7, #4]
    fc82:	681b      	ldr	r3, [r3, #0]
    fc84:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    fc86:	46c0      	nop			; (mov r8, r8)
    fc88:	687b      	ldr	r3, [r7, #4]
    fc8a:	1c18      	adds	r0, r3, #0
    fc8c:	4b14      	ldr	r3, [pc, #80]	; (fce0 <adc_enable+0xec>)
    fc8e:	4798      	blx	r3
    fc90:	1c03      	adds	r3, r0, #0
    fc92:	2b00      	cmp	r3, #0
    fc94:	d1f8      	bne.n	fc88 <adc_enable+0x94>
		/* Wait for synchronization */
	}

#if ADC_CALLBACK_MODE == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    fc96:	2015      	movs	r0, #21
    fc98:	4b12      	ldr	r3, [pc, #72]	; (fce4 <adc_enable+0xf0>)
    fc9a:	4798      	blx	r3
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    fc9c:	68fb      	ldr	r3, [r7, #12]
    fc9e:	681b      	ldr	r3, [r3, #0]
    fca0:	b2db      	uxtb	r3, r3
    fca2:	2202      	movs	r2, #2
    fca4:	4313      	orrs	r3, r2
    fca6:	b2da      	uxtb	r2, r3
    fca8:	68fb      	ldr	r3, [r7, #12]
    fcaa:	701a      	strb	r2, [r3, #0]
	return STATUS_OK;
    fcac:	2300      	movs	r3, #0
}
    fcae:	1c18      	adds	r0, r3, #0
    fcb0:	46bd      	mov	sp, r7
    fcb2:	b005      	add	sp, #20
    fcb4:	bd90      	pop	{r4, r7, pc}
    fcb6:	46c0      	nop			; (mov r8, r8)
    fcb8:	0000f9d9 	.word	0x0000f9d9
    fcbc:	000257f4 	.word	0x000257f4
    fcc0:	000004a2 	.word	0x000004a2
    fcc4:	00025818 	.word	0x00025818
    fcc8:	0002585c 	.word	0x0002585c
    fccc:	000106e9 	.word	0x000106e9
    fcd0:	00025838 	.word	0x00025838
    fcd4:	0001b62d 	.word	0x0001b62d
    fcd8:	000004a3 	.word	0x000004a3
    fcdc:	00025868 	.word	0x00025868
    fce0:	0000fb65 	.word	0x0000fb65
    fce4:	0000f9ed 	.word	0x0000f9ed

0000fce8 <configure_adc>:

/************************************************************************/
/* Configuration                                                        */
/************************************************************************/
void configure_adc(uint8_t adcRef)
{
    fce8:	b590      	push	{r4, r7, lr}
    fcea:	b091      	sub	sp, #68	; 0x44
    fcec:	af00      	add	r7, sp, #0
    fcee:	1c02      	adds	r2, r0, #0
    fcf0:	1dfb      	adds	r3, r7, #7
    fcf2:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_ERR_IO;
    fcf4:	1c3b      	adds	r3, r7, #0
    fcf6:	333f      	adds	r3, #63	; 0x3f
    fcf8:	2210      	movs	r2, #16
    fcfa:	701a      	strb	r2, [r3, #0]
	// Disable ADC before initialization
	//adc_disable(&adc_inst);
	
	/* Structure for ADC configuration */
	struct adc_config config;
	adc_get_config_defaults(&config);
    fcfc:	1c3b      	adds	r3, r7, #0
    fcfe:	330c      	adds	r3, #12
    fd00:	1c18      	adds	r0, r3, #0
    fd02:	4b22      	ldr	r3, [pc, #136]	; (fd8c <configure_adc+0xa4>)
    fd04:	4798      	blx	r3
	config.positive_input = ADC_POSITIVE_INPUT_PIN0;
    fd06:	1c3b      	adds	r3, r7, #0
    fd08:	330c      	adds	r3, #12
    fd0a:	2200      	movs	r2, #0
    fd0c:	731a      	strb	r2, [r3, #12]
	config.negative_input = ADC_NEGATIVE_INPUT_GND;
    fd0e:	1c3b      	adds	r3, r7, #0
    fd10:	330c      	adds	r3, #12
    fd12:	22c0      	movs	r2, #192	; 0xc0
    fd14:	0152      	lsls	r2, r2, #5
    fd16:	81da      	strh	r2, [r3, #14]
	config.reference      = adcRef;
    fd18:	1c3b      	adds	r3, r7, #0
    fd1a:	330c      	adds	r3, #12
    fd1c:	1dfa      	adds	r2, r7, #7
    fd1e:	7812      	ldrb	r2, [r2, #0]
    fd20:	705a      	strb	r2, [r3, #1]
	config.clock_source   = GCLK_GENERATOR_3;
    fd22:	1c3b      	adds	r3, r7, #0
    fd24:	330c      	adds	r3, #12
    fd26:	2203      	movs	r2, #3
    fd28:	701a      	strb	r2, [r3, #0]
	config.gain_factor    = ADC_GAIN_FACTOR_1X;
    fd2a:	1c3b      	adds	r3, r7, #0
    fd2c:	330c      	adds	r3, #12
    fd2e:	2200      	movs	r2, #0
    fd30:	609a      	str	r2, [r3, #8]
	config.resolution         = ADC_RESOLUTION_CUSTOM;
    fd32:	1c3b      	adds	r3, r7, #0
    fd34:	330c      	adds	r3, #12
    fd36:	2234      	movs	r2, #52	; 0x34
    fd38:	711a      	strb	r2, [r3, #4]
	config.accumulate_samples = ADC_ACCUMULATE_SAMPLES_16;	
    fd3a:	1c3b      	adds	r3, r7, #0
    fd3c:	330c      	adds	r3, #12
    fd3e:	2204      	movs	r2, #4
    fd40:	741a      	strb	r2, [r3, #16]
	config.divide_result	  = ADC_DIVIDE_RESULT_16;
    fd42:	1c3b      	adds	r3, r7, #0
    fd44:	330c      	adds	r3, #12
    fd46:	2204      	movs	r2, #4
    fd48:	745a      	strb	r2, [r3, #17]

	/* Initialize the ADC */
	status = adc_init(&adc_inst, ADC, &config);
    fd4a:	1c3c      	adds	r4, r7, #0
    fd4c:	343f      	adds	r4, #63	; 0x3f
    fd4e:	4910      	ldr	r1, [pc, #64]	; (fd90 <configure_adc+0xa8>)
    fd50:	4a10      	ldr	r2, [pc, #64]	; (fd94 <configure_adc+0xac>)
    fd52:	1c3b      	adds	r3, r7, #0
    fd54:	330c      	adds	r3, #12
    fd56:	1c08      	adds	r0, r1, #0
    fd58:	1c11      	adds	r1, r2, #0
    fd5a:	1c1a      	adds	r2, r3, #0
    fd5c:	4b0e      	ldr	r3, [pc, #56]	; (fd98 <configure_adc+0xb0>)
    fd5e:	4798      	blx	r3
    fd60:	1c03      	adds	r3, r0, #0
    fd62:	7023      	strb	r3, [r4, #0]
	/* Check for successful initialization */
	//test_assert_true(test, status == STATUS_OK,
	//"ADC initialization failed");

	/* Enable the ADC */
	status = adc_enable(&adc_inst);
    fd64:	1c3c      	adds	r4, r7, #0
    fd66:	343f      	adds	r4, #63	; 0x3f
    fd68:	4b09      	ldr	r3, [pc, #36]	; (fd90 <configure_adc+0xa8>)
    fd6a:	1c18      	adds	r0, r3, #0
    fd6c:	4b0b      	ldr	r3, [pc, #44]	; (fd9c <configure_adc+0xb4>)
    fd6e:	4798      	blx	r3
    fd70:	1c03      	adds	r3, r0, #0
    fd72:	7023      	strb	r3, [r4, #0]

	/* Check for successful enable */
	//test_assert_true(test, status == STATUS_OK,
	//"ADC enabling failed");

	if (status == STATUS_OK) {
    fd74:	1c3b      	adds	r3, r7, #0
    fd76:	333f      	adds	r3, #63	; 0x3f
    fd78:	781b      	ldrb	r3, [r3, #0]
    fd7a:	2b00      	cmp	r3, #0
    fd7c:	d102      	bne.n	fd84 <configure_adc+0x9c>
		adc_init_success = true;
    fd7e:	4b08      	ldr	r3, [pc, #32]	; (fda0 <configure_adc+0xb8>)
    fd80:	2201      	movs	r2, #1
    fd82:	701a      	strb	r2, [r3, #0]
	}
}
    fd84:	46bd      	mov	sp, r7
    fd86:	b011      	add	sp, #68	; 0x44
    fd88:	bd90      	pop	{r4, r7, pc}
    fd8a:	46c0      	nop			; (mov r8, r8)
    fd8c:	0000fa19 	.word	0x0000fa19
    fd90:	200011a8 	.word	0x200011a8
    fd94:	42004000 	.word	0x42004000
    fd98:	000110cd 	.word	0x000110cd
    fd9c:	0000fbf5 	.word	0x0000fbf5
    fda0:	20000370 	.word	0x20000370

0000fda4 <main>:
/************************************************************************/
/* Main                                                                 */
/************************************************************************/

int main(void)
{
    fda4:	b590      	push	{r4, r7, lr}
    fda6:	b083      	sub	sp, #12
    fda8:	af00      	add	r7, sp, #0
	initMain();
    fdaa:	4bcc      	ldr	r3, [pc, #816]	; (100dc <main+0x338>)
    fdac:	4798      	blx	r3
			}
		}
#endif
					
		// eeprom write handler
		if (writeToEepromFlag == true)
    fdae:	4bcc      	ldr	r3, [pc, #816]	; (100e0 <main+0x33c>)
    fdb0:	781b      	ldrb	r3, [r3, #0]
    fdb2:	2b00      	cmp	r3, #0
    fdb4:	d001      	beq.n	fdba <main+0x16>
		{
			eepromWriteParams();		
    fdb6:	4bcb      	ldr	r3, [pc, #812]	; (100e4 <main+0x340>)
    fdb8:	4798      	blx	r3
		}
				
		// i2c Function handler
		if (i2cFunctionReg != 0x00)
    fdba:	4bcb      	ldr	r3, [pc, #812]	; (100e8 <main+0x344>)
    fdbc:	781b      	ldrb	r3, [r3, #0]
    fdbe:	2b00      	cmp	r3, #0
    fdc0:	d004      	beq.n	fdcc <main+0x28>
		{	
			i2cCommandHandler();
    fdc2:	4bca      	ldr	r3, [pc, #808]	; (100ec <main+0x348>)
    fdc4:	4798      	blx	r3
			i2cFunctionReg = 0x00;
    fdc6:	4bc8      	ldr	r3, [pc, #800]	; (100e8 <main+0x344>)
    fdc8:	2200      	movs	r2, #0
    fdca:	701a      	strb	r2, [r3, #0]
		}			
		
		// check usart rx buffer
		usart_read_buffer_job(&cdc_uart_module,	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
    fdcc:	4ac8      	ldr	r2, [pc, #800]	; (100f0 <main+0x34c>)
    fdce:	4bc9      	ldr	r3, [pc, #804]	; (100f4 <main+0x350>)
    fdd0:	1c10      	adds	r0, r2, #0
    fdd2:	1c19      	adds	r1, r3, #0
    fdd4:	2214      	movs	r2, #20
    fdd6:	4bc8      	ldr	r3, [pc, #800]	; (100f8 <main+0x354>)
    fdd8:	4798      	blx	r3
			
		// handle any commands
		if (cmdFlag==true && enableDebugCmds==true) {
    fdda:	4bc8      	ldr	r3, [pc, #800]	; (100fc <main+0x358>)
    fddc:	781b      	ldrb	r3, [r3, #0]
    fdde:	2b00      	cmp	r3, #0
    fde0:	d008      	beq.n	fdf4 <main+0x50>
    fde2:	4bc7      	ldr	r3, [pc, #796]	; (10100 <main+0x35c>)
    fde4:	781b      	ldrb	r3, [r3, #0]
    fde6:	2b00      	cmp	r3, #0
    fde8:	d004      	beq.n	fdf4 <main+0x50>
			usartCommandHandler();
    fdea:	4bc6      	ldr	r3, [pc, #792]	; (10104 <main+0x360>)
    fdec:	4798      	blx	r3
			cmdFlag = false;
    fdee:	4bc3      	ldr	r3, [pc, #780]	; (100fc <main+0x358>)
    fdf0:	2200      	movs	r2, #0
    fdf2:	701a      	strb	r2, [r3, #0]
		}							
		
		// door open/close events
		if (!enableFanOverride)
    fdf4:	4bc4      	ldr	r3, [pc, #784]	; (10108 <main+0x364>)
    fdf6:	781b      	ldrb	r3, [r3, #0]
    fdf8:	2201      	movs	r2, #1
    fdfa:	4053      	eors	r3, r2
    fdfc:	b2db      	uxtb	r3, r3
    fdfe:	2b00      	cmp	r3, #0
    fe00:	d001      	beq.n	fe06 <main+0x62>
		{
			handleDoorEvents();
    fe02:	4bc2      	ldr	r3, [pc, #776]	; (1010c <main+0x368>)
    fe04:	4798      	blx	r3
		}	
		
		// EVENT SLOT1 ////////////////////////////////////////////////
		if (task1Time>TASK1_SEC) {
    fe06:	4bc2      	ldr	r3, [pc, #776]	; (10110 <main+0x36c>)
    fe08:	681b      	ldr	r3, [r3, #0]
    fe0a:	2b01      	cmp	r3, #1
    fe0c:	d800      	bhi.n	fe10 <main+0x6c>
    fe0e:	e078      	b.n	ff02 <main+0x15e>
			task1LastTime = presentTimeInSec();
    fe10:	4bc0      	ldr	r3, [pc, #768]	; (10114 <main+0x370>)
    fe12:	4798      	blx	r3
    fe14:	1c02      	adds	r2, r0, #0
    fe16:	4bc0      	ldr	r3, [pc, #768]	; (10118 <main+0x374>)
    fe18:	601a      	str	r2, [r3, #0]
	
			// refresh sensor data
			readSensors();
    fe1a:	4bc0      	ldr	r3, [pc, #768]	; (1011c <main+0x378>)
    fe1c:	4798      	blx	r3
					
			//calculateChamberOperatingPoint(&ps1, &chamber1);

			// bound the setpoint
			if (chamber1.setpoint > maxAllowedChamberTemp)
    fe1e:	4bc0      	ldr	r3, [pc, #768]	; (10120 <main+0x37c>)
    fe20:	6999      	ldr	r1, [r3, #24]
    fe22:	4bc0      	ldr	r3, [pc, #768]	; (10124 <main+0x380>)
    fe24:	681a      	ldr	r2, [r3, #0]
    fe26:	4bc0      	ldr	r3, [pc, #768]	; (10128 <main+0x384>)
    fe28:	1c08      	adds	r0, r1, #0
    fe2a:	1c11      	adds	r1, r2, #0
    fe2c:	4798      	blx	r3
    fe2e:	1c03      	adds	r3, r0, #0
    fe30:	2b00      	cmp	r3, #0
    fe32:	d011      	beq.n	fe58 <main+0xb4>
			{
				chamber1.setpoint = maxAllowedChamberTemp;
    fe34:	4bbb      	ldr	r3, [pc, #748]	; (10124 <main+0x380>)
    fe36:	681a      	ldr	r2, [r3, #0]
    fe38:	4bb9      	ldr	r3, [pc, #740]	; (10120 <main+0x37c>)
    fe3a:	619a      	str	r2, [r3, #24]
				dbg_info("\nsetpoint limited to %f", maxAllowedChamberTemp);
    fe3c:	4bb9      	ldr	r3, [pc, #740]	; (10124 <main+0x380>)
    fe3e:	681a      	ldr	r2, [r3, #0]
    fe40:	4bba      	ldr	r3, [pc, #744]	; (1012c <main+0x388>)
    fe42:	1c10      	adds	r0, r2, #0
    fe44:	4798      	blx	r3
    fe46:	1c03      	adds	r3, r0, #0
    fe48:	1c0c      	adds	r4, r1, #0
    fe4a:	4ab9      	ldr	r2, [pc, #740]	; (10130 <main+0x38c>)
    fe4c:	1c10      	adds	r0, r2, #0
    fe4e:	1c1a      	adds	r2, r3, #0
    fe50:	1c23      	adds	r3, r4, #0
    fe52:	49b8      	ldr	r1, [pc, #736]	; (10134 <main+0x390>)
    fe54:	4788      	blx	r1
    fe56:	e01b      	b.n	fe90 <main+0xec>
			}
			else if (chamber1.setpoint < minAllowedChamberTemp)
    fe58:	4bb1      	ldr	r3, [pc, #708]	; (10120 <main+0x37c>)
    fe5a:	6999      	ldr	r1, [r3, #24]
    fe5c:	4bb6      	ldr	r3, [pc, #728]	; (10138 <main+0x394>)
    fe5e:	681a      	ldr	r2, [r3, #0]
    fe60:	4bb6      	ldr	r3, [pc, #728]	; (1013c <main+0x398>)
    fe62:	1c08      	adds	r0, r1, #0
    fe64:	1c11      	adds	r1, r2, #0
    fe66:	4798      	blx	r3
    fe68:	1c03      	adds	r3, r0, #0
    fe6a:	2b00      	cmp	r3, #0
    fe6c:	d010      	beq.n	fe90 <main+0xec>
			{
				chamber1.setpoint = minAllowedChamberTemp;
    fe6e:	4bb2      	ldr	r3, [pc, #712]	; (10138 <main+0x394>)
    fe70:	681a      	ldr	r2, [r3, #0]
    fe72:	4bab      	ldr	r3, [pc, #684]	; (10120 <main+0x37c>)
    fe74:	619a      	str	r2, [r3, #24]
				dbg_info("\nsetpoint limited to %f", minAllowedChamberTemp);
    fe76:	4bb0      	ldr	r3, [pc, #704]	; (10138 <main+0x394>)
    fe78:	681a      	ldr	r2, [r3, #0]
    fe7a:	4bac      	ldr	r3, [pc, #688]	; (1012c <main+0x388>)
    fe7c:	1c10      	adds	r0, r2, #0
    fe7e:	4798      	blx	r3
    fe80:	1c03      	adds	r3, r0, #0
    fe82:	1c0c      	adds	r4, r1, #0
    fe84:	4aaa      	ldr	r2, [pc, #680]	; (10130 <main+0x38c>)
    fe86:	1c10      	adds	r0, r2, #0
    fe88:	1c1a      	adds	r2, r3, #0
    fe8a:	1c23      	adds	r3, r4, #0
    fe8c:	49a9      	ldr	r1, [pc, #676]	; (10134 <main+0x390>)
    fe8e:	4788      	blx	r1
			}
			
			// heater1 ///////////////////////////////////
			// condensate tray heater
			//////////////////////////////////////////////
			if (deactivateAutoHeaterControl==false)
    fe90:	4bab      	ldr	r3, [pc, #684]	; (10140 <main+0x39c>)
    fe92:	781b      	ldrb	r3, [r3, #0]
    fe94:	2201      	movs	r2, #1
    fe96:	4053      	eors	r3, r2
    fe98:	b2db      	uxtb	r3, r3
    fe9a:	2b00      	cmp	r3, #0
    fe9c:	d007      	beq.n	feae <main+0x10a>
			{
				setHeaterState(&condHeater, condHeaterStateMachine());
    fe9e:	4ba9      	ldr	r3, [pc, #676]	; (10144 <main+0x3a0>)
    fea0:	4798      	blx	r3
    fea2:	1c03      	adds	r3, r0, #0
    fea4:	4aa8      	ldr	r2, [pc, #672]	; (10148 <main+0x3a4>)
    fea6:	1c10      	adds	r0, r2, #0
    fea8:	1c19      	adds	r1, r3, #0
    feaa:	4ba8      	ldr	r3, [pc, #672]	; (1014c <main+0x3a8>)
    feac:	4798      	blx	r3
			
			// heater2 ///////////////////////////////////
			// door heater
			//////////////////////////////////////////////
			// set the door heater based on setpoint
			if (deactivateAutoHeaterControl==false)
    feae:	4ba4      	ldr	r3, [pc, #656]	; (10140 <main+0x39c>)
    feb0:	781b      	ldrb	r3, [r3, #0]
    feb2:	2201      	movs	r2, #1
    feb4:	4053      	eors	r3, r2
    feb6:	b2db      	uxtb	r3, r3
    feb8:	2b00      	cmp	r3, #0
    feba:	d00a      	beq.n	fed2 <main+0x12e>
			{
				setHeaterState(&doorHeater, lookupDoorHeaterDutyVal(chamber1.setpoint));
    febc:	4b98      	ldr	r3, [pc, #608]	; (10120 <main+0x37c>)
    febe:	699b      	ldr	r3, [r3, #24]
    fec0:	1c18      	adds	r0, r3, #0
    fec2:	4ba3      	ldr	r3, [pc, #652]	; (10150 <main+0x3ac>)
    fec4:	4798      	blx	r3
    fec6:	1c03      	adds	r3, r0, #0
    fec8:	4aa2      	ldr	r2, [pc, #648]	; (10154 <main+0x3b0>)
    feca:	1c10      	adds	r0, r2, #0
    fecc:	1c19      	adds	r1, r3, #0
    fece:	4b9f      	ldr	r3, [pc, #636]	; (1014c <main+0x3a8>)
    fed0:	4798      	blx	r3
			}
			
			//////////////////////////////////////////////
			// chamber sensor EDFI 
			//////////////////////////////////////////////
			if (enableSensorEDFI==true)
    fed2:	4ba1      	ldr	r3, [pc, #644]	; (10158 <main+0x3b4>)
    fed4:	781b      	ldrb	r3, [r3, #0]
    fed6:	2b00      	cmp	r3, #0
    fed8:	d103      	bne.n	fee2 <main+0x13e>
				//chamberSensorEDFI();
				
			}
			else
			{
				controlTemperature = chamber2.chamberTemp;
    feda:	4ba0      	ldr	r3, [pc, #640]	; (1015c <main+0x3b8>)
    fedc:	685a      	ldr	r2, [r3, #4]
    fede:	4ba0      	ldr	r3, [pc, #640]	; (10160 <main+0x3bc>)
    fee0:	601a      	str	r2, [r3, #0]
			}				

			pidLoop1.Input = controlTemperature;
    fee2:	4b9f      	ldr	r3, [pc, #636]	; (10160 <main+0x3bc>)
    fee4:	681a      	ldr	r2, [r3, #0]
    fee6:	4b9f      	ldr	r3, [pc, #636]	; (10164 <main+0x3c0>)
    fee8:	61da      	str	r2, [r3, #28]
			pidLoop1.Setpoint = chamber1.setpoint;
    feea:	4b8d      	ldr	r3, [pc, #564]	; (10120 <main+0x37c>)
    feec:	699a      	ldr	r2, [r3, #24]
    feee:	4b9d      	ldr	r3, [pc, #628]	; (10164 <main+0x3c0>)
    fef0:	625a      	str	r2, [r3, #36]	; 0x24
			
			pidFan4.Input = chamberTempDifference;
    fef2:	4b9d      	ldr	r3, [pc, #628]	; (10168 <main+0x3c4>)
    fef4:	681a      	ldr	r2, [r3, #0]
    fef6:	4b9d      	ldr	r3, [pc, #628]	; (1016c <main+0x3c8>)
    fef8:	61da      	str	r2, [r3, #28]
			pidFan4.Setpoint = chamberTempUniformityTarget;
    fefa:	4b9d      	ldr	r3, [pc, #628]	; (10170 <main+0x3cc>)
    fefc:	681a      	ldr	r2, [r3, #0]
    fefe:	4b9b      	ldr	r3, [pc, #620]	; (1016c <main+0x3c8>)
    ff00:	625a      	str	r2, [r3, #36]	; 0x24
			}
			
		}
		
		// EVENT SLOT2 ///////////////////////////////////////////////	
		if (task2Time>TASK2_SEC) {
    ff02:	4b9c      	ldr	r3, [pc, #624]	; (10174 <main+0x3d0>)
    ff04:	681b      	ldr	r3, [r3, #0]
    ff06:	2b05      	cmp	r3, #5
    ff08:	d926      	bls.n	ff58 <main+0x1b4>
			task2LastTime = presentTimeInSec();
    ff0a:	4b82      	ldr	r3, [pc, #520]	; (10114 <main+0x370>)
    ff0c:	4798      	blx	r3
    ff0e:	1c02      	adds	r2, r0, #0
    ff10:	4b99      	ldr	r3, [pc, #612]	; (10178 <main+0x3d4>)
    ff12:	601a      	str	r2, [r3, #0]

			// determine operating mode
			if (chamber1.deactivateAutoControl==false)
    ff14:	4a82      	ldr	r2, [pc, #520]	; (10120 <main+0x37c>)
    ff16:	233d      	movs	r3, #61	; 0x3d
    ff18:	5cd3      	ldrb	r3, [r2, r3]
    ff1a:	2201      	movs	r2, #1
    ff1c:	4053      	eors	r3, r2
    ff1e:	b2db      	uxtb	r3, r3
    ff20:	2b00      	cmp	r3, #0
    ff22:	d008      	beq.n	ff36 <main+0x192>
			{
				modeStateMachine(&pidLoop1, &ps1, &chamber1);	// 'ps1' is control voltage
    ff24:	498f      	ldr	r1, [pc, #572]	; (10164 <main+0x3c0>)
    ff26:	4a95      	ldr	r2, [pc, #596]	; (1017c <main+0x3d8>)
    ff28:	4b7d      	ldr	r3, [pc, #500]	; (10120 <main+0x37c>)
    ff2a:	1c08      	adds	r0, r1, #0
    ff2c:	1c11      	adds	r1, r2, #0
    ff2e:	1c1a      	adds	r2, r3, #0
    ff30:	4b93      	ldr	r3, [pc, #588]	; (10180 <main+0x3dc>)
    ff32:	4798      	blx	r3
    ff34:	e00a      	b.n	ff4c <main+0x1a8>
			}
			else
			{
				if (defrostActive == true)
    ff36:	4b93      	ldr	r3, [pc, #588]	; (10184 <main+0x3e0>)
    ff38:	781b      	ldrb	r3, [r3, #0]
    ff3a:	2b00      	cmp	r3, #0
    ff3c:	d003      	beq.n	ff46 <main+0x1a2>
				{
					chamber1.mode_state = STATE_DEFROST;
    ff3e:	4b78      	ldr	r3, [pc, #480]	; (10120 <main+0x37c>)
    ff40:	2205      	movs	r2, #5
    ff42:	701a      	strb	r2, [r3, #0]
    ff44:	e002      	b.n	ff4c <main+0x1a8>
				}
				else
				{
					chamber1.mode_state = STATE_MANUAL;
    ff46:	4b76      	ldr	r3, [pc, #472]	; (10120 <main+0x37c>)
    ff48:	2206      	movs	r2, #6
    ff4a:	701a      	strb	r2, [r3, #0]
				}
			}
			
			if (phpDetected==true)
    ff4c:	4b8e      	ldr	r3, [pc, #568]	; (10188 <main+0x3e4>)
    ff4e:	781b      	ldrb	r3, [r3, #0]
    ff50:	2b00      	cmp	r3, #0
    ff52:	d001      	beq.n	ff58 <main+0x1b4>
			{				
				psHwController();
    ff54:	4b8d      	ldr	r3, [pc, #564]	; (1018c <main+0x3e8>)
    ff56:	4798      	blx	r3
			}
		}
		
		// EVENT SLOT12 ///////////////////////////////////////////////
		if (task12Time>TASK12_SEC) {
    ff58:	4b8d      	ldr	r3, [pc, #564]	; (10190 <main+0x3ec>)
    ff5a:	681b      	ldr	r3, [r3, #0]
    ff5c:	2b02      	cmp	r3, #2
    ff5e:	d800      	bhi.n	ff62 <main+0x1be>
    ff60:	e1f7      	b.n	10352 <main+0x5ae>
			task12LastTime = presentTimeInSec();			
    ff62:	4b6c      	ldr	r3, [pc, #432]	; (10114 <main+0x370>)
    ff64:	4798      	blx	r3
    ff66:	1c02      	adds	r2, r0, #0
    ff68:	4b8a      	ldr	r3, [pc, #552]	; (10194 <main+0x3f0>)
    ff6a:	601a      	str	r2, [r3, #0]

			if (fanReadRpm_emc2305(&fan1) != STATUS_OK) { errorRegister |= ERROR_FAN_CONTROLLER; dbg("\n...fan controller read failure\n"); }
    ff6c:	4b8a      	ldr	r3, [pc, #552]	; (10198 <main+0x3f4>)
    ff6e:	1c18      	adds	r0, r3, #0
    ff70:	4b8a      	ldr	r3, [pc, #552]	; (1019c <main+0x3f8>)
    ff72:	4798      	blx	r3
    ff74:	1c03      	adds	r3, r0, #0
    ff76:	2b00      	cmp	r3, #0
    ff78:	d00a      	beq.n	ff90 <main+0x1ec>
    ff7a:	4b89      	ldr	r3, [pc, #548]	; (101a0 <main+0x3fc>)
    ff7c:	881b      	ldrh	r3, [r3, #0]
    ff7e:	2220      	movs	r2, #32
    ff80:	4313      	orrs	r3, r2
    ff82:	b29a      	uxth	r2, r3
    ff84:	4b86      	ldr	r3, [pc, #536]	; (101a0 <main+0x3fc>)
    ff86:	801a      	strh	r2, [r3, #0]
    ff88:	4b86      	ldr	r3, [pc, #536]	; (101a4 <main+0x400>)
    ff8a:	1c18      	adds	r0, r3, #0
    ff8c:	4b86      	ldr	r3, [pc, #536]	; (101a8 <main+0x404>)
    ff8e:	4798      	blx	r3
			if (fanReadRpm_emc2305(&fan2) != STATUS_OK) { errorRegister |= ERROR_FAN_CONTROLLER; dbg("\n...fan controller read failure\n"); }
    ff90:	4b86      	ldr	r3, [pc, #536]	; (101ac <main+0x408>)
    ff92:	1c18      	adds	r0, r3, #0
    ff94:	4b81      	ldr	r3, [pc, #516]	; (1019c <main+0x3f8>)
    ff96:	4798      	blx	r3
    ff98:	1c03      	adds	r3, r0, #0
    ff9a:	2b00      	cmp	r3, #0
    ff9c:	d00a      	beq.n	ffb4 <main+0x210>
    ff9e:	4b80      	ldr	r3, [pc, #512]	; (101a0 <main+0x3fc>)
    ffa0:	881b      	ldrh	r3, [r3, #0]
    ffa2:	2220      	movs	r2, #32
    ffa4:	4313      	orrs	r3, r2
    ffa6:	b29a      	uxth	r2, r3
    ffa8:	4b7d      	ldr	r3, [pc, #500]	; (101a0 <main+0x3fc>)
    ffaa:	801a      	strh	r2, [r3, #0]
    ffac:	4b7d      	ldr	r3, [pc, #500]	; (101a4 <main+0x400>)
    ffae:	1c18      	adds	r0, r3, #0
    ffb0:	4b7d      	ldr	r3, [pc, #500]	; (101a8 <main+0x404>)
    ffb2:	4798      	blx	r3
			if (fanReadRpm_emc2305(&fan3) != STATUS_OK) { errorRegister |= ERROR_FAN_CONTROLLER; dbg("\n...fan controller read failure\n"); }
    ffb4:	4b7e      	ldr	r3, [pc, #504]	; (101b0 <main+0x40c>)
    ffb6:	1c18      	adds	r0, r3, #0
    ffb8:	4b78      	ldr	r3, [pc, #480]	; (1019c <main+0x3f8>)
    ffba:	4798      	blx	r3
    ffbc:	1c03      	adds	r3, r0, #0
    ffbe:	2b00      	cmp	r3, #0
    ffc0:	d00a      	beq.n	ffd8 <main+0x234>
    ffc2:	4b77      	ldr	r3, [pc, #476]	; (101a0 <main+0x3fc>)
    ffc4:	881b      	ldrh	r3, [r3, #0]
    ffc6:	2220      	movs	r2, #32
    ffc8:	4313      	orrs	r3, r2
    ffca:	b29a      	uxth	r2, r3
    ffcc:	4b74      	ldr	r3, [pc, #464]	; (101a0 <main+0x3fc>)
    ffce:	801a      	strh	r2, [r3, #0]
    ffd0:	4b74      	ldr	r3, [pc, #464]	; (101a4 <main+0x400>)
    ffd2:	1c18      	adds	r0, r3, #0
    ffd4:	4b74      	ldr	r3, [pc, #464]	; (101a8 <main+0x404>)
    ffd6:	4798      	blx	r3
			if (fanReadRpm_emc2305(&fan4) != STATUS_OK) { errorRegister |= ERROR_FAN_CONTROLLER; dbg("\n...fan controller read failure\n"); }
    ffd8:	4b76      	ldr	r3, [pc, #472]	; (101b4 <main+0x410>)
    ffda:	1c18      	adds	r0, r3, #0
    ffdc:	4b6f      	ldr	r3, [pc, #444]	; (1019c <main+0x3f8>)
    ffde:	4798      	blx	r3
    ffe0:	1c03      	adds	r3, r0, #0
    ffe2:	2b00      	cmp	r3, #0
    ffe4:	d00a      	beq.n	fffc <main+0x258>
    ffe6:	4b6e      	ldr	r3, [pc, #440]	; (101a0 <main+0x3fc>)
    ffe8:	881b      	ldrh	r3, [r3, #0]
    ffea:	2220      	movs	r2, #32
    ffec:	4313      	orrs	r3, r2
    ffee:	b29a      	uxth	r2, r3
    fff0:	4b6b      	ldr	r3, [pc, #428]	; (101a0 <main+0x3fc>)
    fff2:	801a      	strh	r2, [r3, #0]
    fff4:	4b6b      	ldr	r3, [pc, #428]	; (101a4 <main+0x400>)
    fff6:	1c18      	adds	r0, r3, #0
    fff8:	4b6b      	ldr	r3, [pc, #428]	; (101a8 <main+0x404>)
    fffa:	4798      	blx	r3
			if (fanReadRpm_emc2305(&fan5) != STATUS_OK) { errorRegister |= ERROR_FAN_CONTROLLER; dbg("\n...fan controller read failure\n"); }
    fffc:	4b6e      	ldr	r3, [pc, #440]	; (101b8 <main+0x414>)
    fffe:	1c18      	adds	r0, r3, #0
   10000:	4b66      	ldr	r3, [pc, #408]	; (1019c <main+0x3f8>)
   10002:	4798      	blx	r3
   10004:	1c03      	adds	r3, r0, #0
   10006:	2b00      	cmp	r3, #0
   10008:	d00a      	beq.n	10020 <main+0x27c>
   1000a:	4b65      	ldr	r3, [pc, #404]	; (101a0 <main+0x3fc>)
   1000c:	881b      	ldrh	r3, [r3, #0]
   1000e:	2220      	movs	r2, #32
   10010:	4313      	orrs	r3, r2
   10012:	b29a      	uxth	r2, r3
   10014:	4b62      	ldr	r3, [pc, #392]	; (101a0 <main+0x3fc>)
   10016:	801a      	strh	r2, [r3, #0]
   10018:	4b62      	ldr	r3, [pc, #392]	; (101a4 <main+0x400>)
   1001a:	1c18      	adds	r0, r3, #0
   1001c:	4b62      	ldr	r3, [pc, #392]	; (101a8 <main+0x404>)
   1001e:	4798      	blx	r3
			if (fanReadRpm_emc2305(&fan6) != STATUS_OK) { errorRegister |= ERROR_FAN_CONTROLLER; dbg("\n...fan controller read failure\n"); }
   10020:	4b66      	ldr	r3, [pc, #408]	; (101bc <main+0x418>)
   10022:	1c18      	adds	r0, r3, #0
   10024:	4b5d      	ldr	r3, [pc, #372]	; (1019c <main+0x3f8>)
   10026:	4798      	blx	r3
   10028:	1c03      	adds	r3, r0, #0
   1002a:	2b00      	cmp	r3, #0
   1002c:	d00a      	beq.n	10044 <main+0x2a0>
   1002e:	4b5c      	ldr	r3, [pc, #368]	; (101a0 <main+0x3fc>)
   10030:	881b      	ldrh	r3, [r3, #0]
   10032:	2220      	movs	r2, #32
   10034:	4313      	orrs	r3, r2
   10036:	b29a      	uxth	r2, r3
   10038:	4b59      	ldr	r3, [pc, #356]	; (101a0 <main+0x3fc>)
   1003a:	801a      	strh	r2, [r3, #0]
   1003c:	4b59      	ldr	r3, [pc, #356]	; (101a4 <main+0x400>)
   1003e:	1c18      	adds	r0, r3, #0
   10040:	4b59      	ldr	r3, [pc, #356]	; (101a8 <main+0x404>)
   10042:	4798      	blx	r3
			if (fanReadRpm_emc2305(&fan7) != STATUS_OK) { errorRegister |= ERROR_FAN_CONTROLLER; dbg("\n...fan controller read failure\n"); }
   10044:	4b5e      	ldr	r3, [pc, #376]	; (101c0 <main+0x41c>)
   10046:	1c18      	adds	r0, r3, #0
   10048:	4b54      	ldr	r3, [pc, #336]	; (1019c <main+0x3f8>)
   1004a:	4798      	blx	r3
   1004c:	1c03      	adds	r3, r0, #0
   1004e:	2b00      	cmp	r3, #0
   10050:	d00a      	beq.n	10068 <main+0x2c4>
   10052:	4b53      	ldr	r3, [pc, #332]	; (101a0 <main+0x3fc>)
   10054:	881b      	ldrh	r3, [r3, #0]
   10056:	2220      	movs	r2, #32
   10058:	4313      	orrs	r3, r2
   1005a:	b29a      	uxth	r2, r3
   1005c:	4b50      	ldr	r3, [pc, #320]	; (101a0 <main+0x3fc>)
   1005e:	801a      	strh	r2, [r3, #0]
   10060:	4b50      	ldr	r3, [pc, #320]	; (101a4 <main+0x400>)
   10062:	1c18      	adds	r0, r3, #0
   10064:	4b50      	ldr	r3, [pc, #320]	; (101a8 <main+0x404>)
   10066:	4798      	blx	r3
			if (fanReadRpm_emc2305(&fan8) != STATUS_OK) { errorRegister |= ERROR_FAN_CONTROLLER; dbg("\n...fan controller read failure\n"); }
   10068:	4b56      	ldr	r3, [pc, #344]	; (101c4 <main+0x420>)
   1006a:	1c18      	adds	r0, r3, #0
   1006c:	4b4b      	ldr	r3, [pc, #300]	; (1019c <main+0x3f8>)
   1006e:	4798      	blx	r3
   10070:	1c03      	adds	r3, r0, #0
   10072:	2b00      	cmp	r3, #0
   10074:	d00a      	beq.n	1008c <main+0x2e8>
   10076:	4b4a      	ldr	r3, [pc, #296]	; (101a0 <main+0x3fc>)
   10078:	881b      	ldrh	r3, [r3, #0]
   1007a:	2220      	movs	r2, #32
   1007c:	4313      	orrs	r3, r2
   1007e:	b29a      	uxth	r2, r3
   10080:	4b47      	ldr	r3, [pc, #284]	; (101a0 <main+0x3fc>)
   10082:	801a      	strh	r2, [r3, #0]
   10084:	4b47      	ldr	r3, [pc, #284]	; (101a4 <main+0x400>)
   10086:	1c18      	adds	r0, r3, #0
   10088:	4b47      	ldr	r3, [pc, #284]	; (101a8 <main+0x404>)
   1008a:	4798      	blx	r3
			
			if (fanReadStallStatus_emc2305() != STATUS_OK) { errorRegister |= ERROR_FAN_CONTROLLER; dbg("\n...fan controller read failure\n"); }
   1008c:	4b4e      	ldr	r3, [pc, #312]	; (101c8 <main+0x424>)
   1008e:	4798      	blx	r3
   10090:	1c03      	adds	r3, r0, #0
   10092:	2b00      	cmp	r3, #0
   10094:	d00a      	beq.n	100ac <main+0x308>
   10096:	4b42      	ldr	r3, [pc, #264]	; (101a0 <main+0x3fc>)
   10098:	881b      	ldrh	r3, [r3, #0]
   1009a:	2220      	movs	r2, #32
   1009c:	4313      	orrs	r3, r2
   1009e:	b29a      	uxth	r2, r3
   100a0:	4b3f      	ldr	r3, [pc, #252]	; (101a0 <main+0x3fc>)
   100a2:	801a      	strh	r2, [r3, #0]
   100a4:	4b3f      	ldr	r3, [pc, #252]	; (101a4 <main+0x400>)
   100a6:	1c18      	adds	r0, r3, #0
   100a8:	4b3f      	ldr	r3, [pc, #252]	; (101a8 <main+0x404>)
   100aa:	4798      	blx	r3
							
			//////////////////////////////////////////////
			// sideA Fans
			//////////////////////////////////////////////

			if (fan1.state==ON && fan2.state==ON && fan5.state==ON && fan6.state==ON) { bFanASyncFlag = ON; }
   100ac:	4b3a      	ldr	r3, [pc, #232]	; (10198 <main+0x3f4>)
   100ae:	7d5b      	ldrb	r3, [r3, #21]
   100b0:	2b00      	cmp	r3, #0
   100b2:	d100      	bne.n	100b6 <main+0x312>
   100b4:	e08c      	b.n	101d0 <main+0x42c>
   100b6:	4b3d      	ldr	r3, [pc, #244]	; (101ac <main+0x408>)
   100b8:	7d5b      	ldrb	r3, [r3, #21]
   100ba:	2b00      	cmp	r3, #0
   100bc:	d100      	bne.n	100c0 <main+0x31c>
   100be:	e087      	b.n	101d0 <main+0x42c>
   100c0:	4b3d      	ldr	r3, [pc, #244]	; (101b8 <main+0x414>)
   100c2:	7d5b      	ldrb	r3, [r3, #21]
   100c4:	2b00      	cmp	r3, #0
   100c6:	d100      	bne.n	100ca <main+0x326>
   100c8:	e082      	b.n	101d0 <main+0x42c>
   100ca:	4b3c      	ldr	r3, [pc, #240]	; (101bc <main+0x418>)
   100cc:	7d5b      	ldrb	r3, [r3, #21]
   100ce:	2b00      	cmp	r3, #0
   100d0:	d100      	bne.n	100d4 <main+0x330>
   100d2:	e07d      	b.n	101d0 <main+0x42c>
   100d4:	4b3d      	ldr	r3, [pc, #244]	; (101cc <main+0x428>)
   100d6:	2201      	movs	r2, #1
   100d8:	701a      	strb	r2, [r3, #0]
   100da:	e07c      	b.n	101d6 <main+0x432>
   100dc:	0000870d 	.word	0x0000870d
   100e0:	200002f4 	.word	0x200002f4
   100e4:	00009a6d 	.word	0x00009a6d
   100e8:	20000330 	.word	0x20000330
   100ec:	0000b991 	.word	0x0000b991
   100f0:	2000105c 	.word	0x2000105c
   100f4:	20001094 	.word	0x20001094
   100f8:	00016439 	.word	0x00016439
   100fc:	2000036f 	.word	0x2000036f
   10100:	20000179 	.word	0x20000179
   10104:	00001441 	.word	0x00001441
   10108:	20000375 	.word	0x20000375
   1010c:	0000f081 	.word	0x0000f081
   10110:	2000037c 	.word	0x2000037c
   10114:	0000dcad 	.word	0x0000dcad
   10118:	20000398 	.word	0x20000398
   1011c:	0000dde1 	.word	0x0000dde1
   10120:	200009b8 	.word	0x200009b8
   10124:	20000180 	.word	0x20000180
   10128:	0001f655 	.word	0x0001f655
   1012c:	00022111 	.word	0x00022111
   10130:	0002599c 	.word	0x0002599c
   10134:	0001b62d 	.word	0x0001b62d
   10138:	20000184 	.word	0x20000184
   1013c:	0001f62d 	.word	0x0001f62d
   10140:	20000376 	.word	0x20000376
   10144:	00007031 	.word	0x00007031
   10148:	20000ed4 	.word	0x20000ed4
   1014c:	00007275 	.word	0x00007275
   10150:	00006f01 	.word	0x00006f01
   10154:	20000b34 	.word	0x20000b34
   10158:	20000378 	.word	0x20000378
   1015c:	20000960 	.word	0x20000960
   10160:	20000188 	.word	0x20000188
   10164:	20000e10 	.word	0x20000e10
   10168:	20000350 	.word	0x20000350
   1016c:	20000bd8 	.word	0x20000bd8
   10170:	20000190 	.word	0x20000190
   10174:	20000380 	.word	0x20000380
   10178:	2000039c 	.word	0x2000039c
   1017c:	20000a84 	.word	0x20000a84
   10180:	0000e451 	.word	0x0000e451
   10184:	200002a4 	.word	0x200002a4
   10188:	20000374 	.word	0x20000374
   1018c:	0000e441 	.word	0x0000e441
   10190:	20000394 	.word	0x20000394
   10194:	200003b0 	.word	0x200003b0
   10198:	20000e84 	.word	0x20000e84
   1019c:	00005be1 	.word	0x00005be1
   101a0:	20000332 	.word	0x20000332
   101a4:	000259b4 	.word	0x000259b4
   101a8:	0001b899 	.word	0x0001b899
   101ac:	20000c58 	.word	0x20000c58
   101b0:	20000d18 	.word	0x20000d18
   101b4:	20000adc 	.word	0x20000adc
   101b8:	20000b8c 	.word	0x20000b8c
   101bc:	20000914 	.word	0x20000914
   101c0:	20000dc0 	.word	0x20000dc0
   101c4:	20000b40 	.word	0x20000b40
   101c8:	00005f61 	.word	0x00005f61
   101cc:	20000379 	.word	0x20000379
			else { bFanASyncFlag = OFF; }
   101d0:	4ba9      	ldr	r3, [pc, #676]	; (10478 <main+0x6d4>)
   101d2:	2200      	movs	r2, #0
   101d4:	701a      	strb	r2, [r3, #0]
				
			if(bFanASyncFlag == ON) {
   101d6:	4ba8      	ldr	r3, [pc, #672]	; (10478 <main+0x6d4>)
   101d8:	781b      	ldrb	r3, [r3, #0]
   101da:	2b00      	cmp	r3, #0
   101dc:	d01c      	beq.n	10218 <main+0x474>
				fanControl(&fan1, ps1.desiredVoltage);	// chamberA
   101de:	4ba7      	ldr	r3, [pc, #668]	; (1047c <main+0x6d8>)
   101e0:	695b      	ldr	r3, [r3, #20]
   101e2:	4aa7      	ldr	r2, [pc, #668]	; (10480 <main+0x6dc>)
   101e4:	1c10      	adds	r0, r2, #0
   101e6:	1c19      	adds	r1, r3, #0
   101e8:	4ba6      	ldr	r3, [pc, #664]	; (10484 <main+0x6e0>)
   101ea:	4798      	blx	r3
				fanControl(&fan2, ps1.desiredVoltage);	// reject1A
   101ec:	4ba3      	ldr	r3, [pc, #652]	; (1047c <main+0x6d8>)
   101ee:	695b      	ldr	r3, [r3, #20]
   101f0:	4aa5      	ldr	r2, [pc, #660]	; (10488 <main+0x6e4>)
   101f2:	1c10      	adds	r0, r2, #0
   101f4:	1c19      	adds	r1, r3, #0
   101f6:	4ba3      	ldr	r3, [pc, #652]	; (10484 <main+0x6e0>)
   101f8:	4798      	blx	r3
				fanControl(&fan5, ps1.desiredVoltage);	// reject2A
   101fa:	4ba0      	ldr	r3, [pc, #640]	; (1047c <main+0x6d8>)
   101fc:	695b      	ldr	r3, [r3, #20]
   101fe:	4aa3      	ldr	r2, [pc, #652]	; (1048c <main+0x6e8>)
   10200:	1c10      	adds	r0, r2, #0
   10202:	1c19      	adds	r1, r3, #0
   10204:	4b9f      	ldr	r3, [pc, #636]	; (10484 <main+0x6e0>)
   10206:	4798      	blx	r3
				fanControl(&fan6, ps1.desiredVoltage);	// reject3A
   10208:	4b9c      	ldr	r3, [pc, #624]	; (1047c <main+0x6d8>)
   1020a:	695b      	ldr	r3, [r3, #20]
   1020c:	4aa0      	ldr	r2, [pc, #640]	; (10490 <main+0x6ec>)
   1020e:	1c10      	adds	r0, r2, #0
   10210:	1c19      	adds	r1, r3, #0
   10212:	4b9c      	ldr	r3, [pc, #624]	; (10484 <main+0x6e0>)
   10214:	4798      	blx	r3
   10216:	e02b      	b.n	10270 <main+0x4cc>
			} else {
				if (fanbank==1) { fanControl(&fan1, ps1.desiredVoltage); }	// chamberA
   10218:	4b9e      	ldr	r3, [pc, #632]	; (10494 <main+0x6f0>)
   1021a:	781b      	ldrb	r3, [r3, #0]
   1021c:	2b01      	cmp	r3, #1
   1021e:	d106      	bne.n	1022e <main+0x48a>
   10220:	4b96      	ldr	r3, [pc, #600]	; (1047c <main+0x6d8>)
   10222:	695b      	ldr	r3, [r3, #20]
   10224:	4a96      	ldr	r2, [pc, #600]	; (10480 <main+0x6dc>)
   10226:	1c10      	adds	r0, r2, #0
   10228:	1c19      	adds	r1, r3, #0
   1022a:	4b96      	ldr	r3, [pc, #600]	; (10484 <main+0x6e0>)
   1022c:	4798      	blx	r3
				if (fanbank==3) { fanControl(&fan2, ps1.desiredVoltage); }	// reject1A
   1022e:	4b99      	ldr	r3, [pc, #612]	; (10494 <main+0x6f0>)
   10230:	781b      	ldrb	r3, [r3, #0]
   10232:	2b03      	cmp	r3, #3
   10234:	d106      	bne.n	10244 <main+0x4a0>
   10236:	4b91      	ldr	r3, [pc, #580]	; (1047c <main+0x6d8>)
   10238:	695b      	ldr	r3, [r3, #20]
   1023a:	4a93      	ldr	r2, [pc, #588]	; (10488 <main+0x6e4>)
   1023c:	1c10      	adds	r0, r2, #0
   1023e:	1c19      	adds	r1, r3, #0
   10240:	4b90      	ldr	r3, [pc, #576]	; (10484 <main+0x6e0>)
   10242:	4798      	blx	r3
				if (fanbank==5) { fanControl(&fan5, ps1.desiredVoltage); }	// reject2A
   10244:	4b93      	ldr	r3, [pc, #588]	; (10494 <main+0x6f0>)
   10246:	781b      	ldrb	r3, [r3, #0]
   10248:	2b05      	cmp	r3, #5
   1024a:	d106      	bne.n	1025a <main+0x4b6>
   1024c:	4b8b      	ldr	r3, [pc, #556]	; (1047c <main+0x6d8>)
   1024e:	695b      	ldr	r3, [r3, #20]
   10250:	4a8e      	ldr	r2, [pc, #568]	; (1048c <main+0x6e8>)
   10252:	1c10      	adds	r0, r2, #0
   10254:	1c19      	adds	r1, r3, #0
   10256:	4b8b      	ldr	r3, [pc, #556]	; (10484 <main+0x6e0>)
   10258:	4798      	blx	r3
				if (fanbank==7) { fanControl(&fan6, ps1.desiredVoltage); }	// reject3A				
   1025a:	4b8e      	ldr	r3, [pc, #568]	; (10494 <main+0x6f0>)
   1025c:	781b      	ldrb	r3, [r3, #0]
   1025e:	2b07      	cmp	r3, #7
   10260:	d106      	bne.n	10270 <main+0x4cc>
   10262:	4b86      	ldr	r3, [pc, #536]	; (1047c <main+0x6d8>)
   10264:	695b      	ldr	r3, [r3, #20]
   10266:	4a8a      	ldr	r2, [pc, #552]	; (10490 <main+0x6ec>)
   10268:	1c10      	adds	r0, r2, #0
   1026a:	1c19      	adds	r1, r3, #0
   1026c:	4b85      	ldr	r3, [pc, #532]	; (10484 <main+0x6e0>)
   1026e:	4798      	blx	r3

			//////////////////////////////////////////////
			// sideB Fans
			//////////////////////////////////////////////
						
			if (fan4.state==ON && fan3.state==ON && fan8.state==ON && fan7.state==ON) { bFanBSyncFlag = ON; }
   10270:	4b89      	ldr	r3, [pc, #548]	; (10498 <main+0x6f4>)
   10272:	7d5b      	ldrb	r3, [r3, #21]
   10274:	2b00      	cmp	r3, #0
   10276:	d00f      	beq.n	10298 <main+0x4f4>
   10278:	4b88      	ldr	r3, [pc, #544]	; (1049c <main+0x6f8>)
   1027a:	7d5b      	ldrb	r3, [r3, #21]
   1027c:	2b00      	cmp	r3, #0
   1027e:	d00b      	beq.n	10298 <main+0x4f4>
   10280:	4b87      	ldr	r3, [pc, #540]	; (104a0 <main+0x6fc>)
   10282:	7d5b      	ldrb	r3, [r3, #21]
   10284:	2b00      	cmp	r3, #0
   10286:	d007      	beq.n	10298 <main+0x4f4>
   10288:	4b86      	ldr	r3, [pc, #536]	; (104a4 <main+0x700>)
   1028a:	7d5b      	ldrb	r3, [r3, #21]
   1028c:	2b00      	cmp	r3, #0
   1028e:	d003      	beq.n	10298 <main+0x4f4>
   10290:	4b85      	ldr	r3, [pc, #532]	; (104a8 <main+0x704>)
   10292:	2201      	movs	r2, #1
   10294:	701a      	strb	r2, [r3, #0]
   10296:	e002      	b.n	1029e <main+0x4fa>
			else { bFanBSyncFlag = OFF; }
   10298:	4b83      	ldr	r3, [pc, #524]	; (104a8 <main+0x704>)
   1029a:	2200      	movs	r2, #0
   1029c:	701a      	strb	r2, [r3, #0]
			
			if(bFanBSyncFlag == ON) {			
   1029e:	4b82      	ldr	r3, [pc, #520]	; (104a8 <main+0x704>)
   102a0:	781b      	ldrb	r3, [r3, #0]
   102a2:	2b00      	cmp	r3, #0
   102a4:	d01c      	beq.n	102e0 <main+0x53c>
				fanControl(&fan4, ps1.desiredVoltage);	// chamberB
   102a6:	4b75      	ldr	r3, [pc, #468]	; (1047c <main+0x6d8>)
   102a8:	695b      	ldr	r3, [r3, #20]
   102aa:	4a7b      	ldr	r2, [pc, #492]	; (10498 <main+0x6f4>)
   102ac:	1c10      	adds	r0, r2, #0
   102ae:	1c19      	adds	r1, r3, #0
   102b0:	4b74      	ldr	r3, [pc, #464]	; (10484 <main+0x6e0>)
   102b2:	4798      	blx	r3
				fanControl(&fan3, ps1.desiredVoltage);	// reject1B
   102b4:	4b71      	ldr	r3, [pc, #452]	; (1047c <main+0x6d8>)
   102b6:	695b      	ldr	r3, [r3, #20]
   102b8:	4a78      	ldr	r2, [pc, #480]	; (1049c <main+0x6f8>)
   102ba:	1c10      	adds	r0, r2, #0
   102bc:	1c19      	adds	r1, r3, #0
   102be:	4b71      	ldr	r3, [pc, #452]	; (10484 <main+0x6e0>)
   102c0:	4798      	blx	r3
				fanControl(&fan8, ps1.desiredVoltage);	// reject2B
   102c2:	4b6e      	ldr	r3, [pc, #440]	; (1047c <main+0x6d8>)
   102c4:	695b      	ldr	r3, [r3, #20]
   102c6:	4a76      	ldr	r2, [pc, #472]	; (104a0 <main+0x6fc>)
   102c8:	1c10      	adds	r0, r2, #0
   102ca:	1c19      	adds	r1, r3, #0
   102cc:	4b6d      	ldr	r3, [pc, #436]	; (10484 <main+0x6e0>)
   102ce:	4798      	blx	r3
				fanControl(&fan7, ps1.desiredVoltage);	// reject3B	
   102d0:	4b6a      	ldr	r3, [pc, #424]	; (1047c <main+0x6d8>)
   102d2:	695b      	ldr	r3, [r3, #20]
   102d4:	4a73      	ldr	r2, [pc, #460]	; (104a4 <main+0x700>)
   102d6:	1c10      	adds	r0, r2, #0
   102d8:	1c19      	adds	r1, r3, #0
   102da:	4b6a      	ldr	r3, [pc, #424]	; (10484 <main+0x6e0>)
   102dc:	4798      	blx	r3
   102de:	e02b      	b.n	10338 <main+0x594>
			} else {
				if (fanbank==2) { fanControl(&fan4, ps1.desiredVoltage); }	// chamberB
   102e0:	4b6c      	ldr	r3, [pc, #432]	; (10494 <main+0x6f0>)
   102e2:	781b      	ldrb	r3, [r3, #0]
   102e4:	2b02      	cmp	r3, #2
   102e6:	d106      	bne.n	102f6 <main+0x552>
   102e8:	4b64      	ldr	r3, [pc, #400]	; (1047c <main+0x6d8>)
   102ea:	695b      	ldr	r3, [r3, #20]
   102ec:	4a6a      	ldr	r2, [pc, #424]	; (10498 <main+0x6f4>)
   102ee:	1c10      	adds	r0, r2, #0
   102f0:	1c19      	adds	r1, r3, #0
   102f2:	4b64      	ldr	r3, [pc, #400]	; (10484 <main+0x6e0>)
   102f4:	4798      	blx	r3
				if (fanbank==4) { fanControl(&fan3, ps1.desiredVoltage); }	// reject1B
   102f6:	4b67      	ldr	r3, [pc, #412]	; (10494 <main+0x6f0>)
   102f8:	781b      	ldrb	r3, [r3, #0]
   102fa:	2b04      	cmp	r3, #4
   102fc:	d106      	bne.n	1030c <main+0x568>
   102fe:	4b5f      	ldr	r3, [pc, #380]	; (1047c <main+0x6d8>)
   10300:	695b      	ldr	r3, [r3, #20]
   10302:	4a66      	ldr	r2, [pc, #408]	; (1049c <main+0x6f8>)
   10304:	1c10      	adds	r0, r2, #0
   10306:	1c19      	adds	r1, r3, #0
   10308:	4b5e      	ldr	r3, [pc, #376]	; (10484 <main+0x6e0>)
   1030a:	4798      	blx	r3
				if (fanbank==6) { fanControl(&fan8, ps1.desiredVoltage); }	// reject2B
   1030c:	4b61      	ldr	r3, [pc, #388]	; (10494 <main+0x6f0>)
   1030e:	781b      	ldrb	r3, [r3, #0]
   10310:	2b06      	cmp	r3, #6
   10312:	d106      	bne.n	10322 <main+0x57e>
   10314:	4b59      	ldr	r3, [pc, #356]	; (1047c <main+0x6d8>)
   10316:	695b      	ldr	r3, [r3, #20]
   10318:	4a61      	ldr	r2, [pc, #388]	; (104a0 <main+0x6fc>)
   1031a:	1c10      	adds	r0, r2, #0
   1031c:	1c19      	adds	r1, r3, #0
   1031e:	4b59      	ldr	r3, [pc, #356]	; (10484 <main+0x6e0>)
   10320:	4798      	blx	r3
				if (fanbank==8) { fanControl(&fan7, ps1.desiredVoltage); }	// reject3B								
   10322:	4b5c      	ldr	r3, [pc, #368]	; (10494 <main+0x6f0>)
   10324:	781b      	ldrb	r3, [r3, #0]
   10326:	2b08      	cmp	r3, #8
   10328:	d106      	bne.n	10338 <main+0x594>
   1032a:	4b54      	ldr	r3, [pc, #336]	; (1047c <main+0x6d8>)
   1032c:	695b      	ldr	r3, [r3, #20]
   1032e:	4a5d      	ldr	r2, [pc, #372]	; (104a4 <main+0x700>)
   10330:	1c10      	adds	r0, r2, #0
   10332:	1c19      	adds	r1, r3, #0
   10334:	4b53      	ldr	r3, [pc, #332]	; (10484 <main+0x6e0>)
   10336:	4798      	blx	r3
			}	

			fanbank++;
   10338:	4b56      	ldr	r3, [pc, #344]	; (10494 <main+0x6f0>)
   1033a:	781b      	ldrb	r3, [r3, #0]
   1033c:	3301      	adds	r3, #1
   1033e:	b2da      	uxtb	r2, r3
   10340:	4b54      	ldr	r3, [pc, #336]	; (10494 <main+0x6f0>)
   10342:	701a      	strb	r2, [r3, #0]
			if (fanbank>8)	{ fanbank = 1; }
   10344:	4b53      	ldr	r3, [pc, #332]	; (10494 <main+0x6f0>)
   10346:	781b      	ldrb	r3, [r3, #0]
   10348:	2b08      	cmp	r3, #8
   1034a:	d902      	bls.n	10352 <main+0x5ae>
   1034c:	4b51      	ldr	r3, [pc, #324]	; (10494 <main+0x6f0>)
   1034e:	2201      	movs	r2, #1
   10350:	701a      	strb	r2, [r3, #0]
			
		}
		
		// EVENT SLOT3 ///////////////////////////////////////////////
		if (task3Time>TASK3_SEC) {
   10352:	4b56      	ldr	r3, [pc, #344]	; (104ac <main+0x708>)
   10354:	681b      	ldr	r3, [r3, #0]
   10356:	2b05      	cmp	r3, #5
   10358:	d90a      	bls.n	10370 <main+0x5cc>
			task3LastTime = presentTimeInSec();
   1035a:	4b55      	ldr	r3, [pc, #340]	; (104b0 <main+0x70c>)
   1035c:	4798      	blx	r3
   1035e:	1c02      	adds	r2, r0, #0
   10360:	4b54      	ldr	r3, [pc, #336]	; (104b4 <main+0x710>)
   10362:	601a      	str	r2, [r3, #0]

			// print debug msgs
			if (enablePsDbgMsgs == true) 
   10364:	4b54      	ldr	r3, [pc, #336]	; (104b8 <main+0x714>)
   10366:	781b      	ldrb	r3, [r3, #0]
   10368:	2b00      	cmp	r3, #0
   1036a:	d001      	beq.n	10370 <main+0x5cc>
			{														
				printDbgMsgs();
   1036c:	4b53      	ldr	r3, [pc, #332]	; (104bc <main+0x718>)
   1036e:	4798      	blx	r3
			}
		}
		
		// EVENT SLOT4 AND 5 USED FOR DEFROST ////////////////////////
		defrostStateMachine();
   10370:	4b53      	ldr	r3, [pc, #332]	; (104c0 <main+0x71c>)
   10372:	4798      	blx	r3
		
		// EVENT SLOT6 ///////////////////////////////////////////////
		if (task6Time>TASK6_SEC) {
   10374:	4b53      	ldr	r3, [pc, #332]	; (104c4 <main+0x720>)
   10376:	681b      	ldr	r3, [r3, #0]
   10378:	2b0a      	cmp	r3, #10
   1037a:	d90c      	bls.n	10396 <main+0x5f2>
			task6LastTime = presentTimeInSec();
   1037c:	4b4c      	ldr	r3, [pc, #304]	; (104b0 <main+0x70c>)
   1037e:	4798      	blx	r3
   10380:	1c02      	adds	r2, r0, #0
   10382:	4b51      	ldr	r3, [pc, #324]	; (104c8 <main+0x724>)
   10384:	601a      	str	r2, [r3, #0]
			
			if (mfgTestModeFlag1==false)
   10386:	4b51      	ldr	r3, [pc, #324]	; (104cc <main+0x728>)
   10388:	781b      	ldrb	r3, [r3, #0]
   1038a:	2b00      	cmp	r3, #0
   1038c:	d103      	bne.n	10396 <main+0x5f2>
			{
				checkForSensorFaults();
   1038e:	4b50      	ldr	r3, [pc, #320]	; (104d0 <main+0x72c>)
   10390:	4798      	blx	r3
				checkForFanFaults();	
   10392:	4b50      	ldr	r3, [pc, #320]	; (104d4 <main+0x730>)
   10394:	4798      	blx	r3
			}
		}		
		
		// EVENT SLOT7 ///////////////////////////////////////////////
		if (task7Time>TASK7_SEC) {
   10396:	4b50      	ldr	r3, [pc, #320]	; (104d8 <main+0x734>)
   10398:	681b      	ldr	r3, [r3, #0]
   1039a:	2b28      	cmp	r3, #40	; 0x28
   1039c:	d902      	bls.n	103a4 <main+0x600>
			//task7LastTime = presentTimeInSec();
			
			inhibitOutput = false;	
   1039e:	4b4f      	ldr	r3, [pc, #316]	; (104dc <main+0x738>)
   103a0:	2200      	movs	r2, #0
   103a2:	701a      	strb	r2, [r3, #0]
		}			

		// EVENT SLOT8, 9, 10 USED FOR PHP SELF-CHECK ////////////////
		if (inhibitOutput==false && mfgTestModeFlag1==false && defrostActive==false)
   103a4:	4b4d      	ldr	r3, [pc, #308]	; (104dc <main+0x738>)
   103a6:	781b      	ldrb	r3, [r3, #0]
   103a8:	2201      	movs	r2, #1
   103aa:	4053      	eors	r3, r2
   103ac:	b2db      	uxtb	r3, r3
		{
			//phpSelfCheck();
		}
		
		// EVENT SLOT11 //////////////////////////////////////////////
		if (task11Time>TASK11_SEC) {
   103ae:	4b4c      	ldr	r3, [pc, #304]	; (104e0 <main+0x73c>)
   103b0:	681a      	ldr	r2, [r3, #0]
   103b2:	23e1      	movs	r3, #225	; 0xe1
   103b4:	011b      	lsls	r3, r3, #4
   103b6:	429a      	cmp	r2, r3
   103b8:	d924      	bls.n	10404 <main+0x660>
			task11LastTime = presentTimeInSec();
   103ba:	4b3d      	ldr	r3, [pc, #244]	; (104b0 <main+0x70c>)
   103bc:	4798      	blx	r3
   103be:	1c02      	adds	r2, r0, #0
   103c0:	4b48      	ldr	r3, [pc, #288]	; (104e4 <main+0x740>)
   103c2:	601a      	str	r2, [r3, #0]

			doorOpenLifetimeCnt += doorOpenCount_1Hr;
   103c4:	4b48      	ldr	r3, [pc, #288]	; (104e8 <main+0x744>)
   103c6:	881b      	ldrh	r3, [r3, #0]
   103c8:	1c1a      	adds	r2, r3, #0
   103ca:	4b48      	ldr	r3, [pc, #288]	; (104ec <main+0x748>)
   103cc:	681b      	ldr	r3, [r3, #0]
   103ce:	18d2      	adds	r2, r2, r3
   103d0:	4b46      	ldr	r3, [pc, #280]	; (104ec <main+0x748>)
   103d2:	601a      	str	r2, [r3, #0]
			eepromDataInfo.pAddr = &doorOpenLifetimeCnt;
   103d4:	4b46      	ldr	r3, [pc, #280]	; (104f0 <main+0x74c>)
   103d6:	4a45      	ldr	r2, [pc, #276]	; (104ec <main+0x748>)
   103d8:	601a      	str	r2, [r3, #0]
			eepromDataInfo.size = sizeof(doorOpenLifetimeCnt);
   103da:	4b45      	ldr	r3, [pc, #276]	; (104f0 <main+0x74c>)
   103dc:	2204      	movs	r2, #4
   103de:	711a      	strb	r2, [r3, #4]
			eepromDataInfo.nonvolatileFlag = true;
   103e0:	4b43      	ldr	r3, [pc, #268]	; (104f0 <main+0x74c>)
   103e2:	2201      	movs	r2, #1
   103e4:	715a      	strb	r2, [r3, #5]
			writeToEepromFlag = true;
   103e6:	4b43      	ldr	r3, [pc, #268]	; (104f4 <main+0x750>)
   103e8:	2201      	movs	r2, #1
   103ea:	701a      	strb	r2, [r3, #0]
						
			if (doorOpenCount_1Hr > doorOpenCount1HrLimit)
   103ec:	4b3e      	ldr	r3, [pc, #248]	; (104e8 <main+0x744>)
   103ee:	881a      	ldrh	r2, [r3, #0]
   103f0:	4b41      	ldr	r3, [pc, #260]	; (104f8 <main+0x754>)
   103f2:	881b      	ldrh	r3, [r3, #0]
   103f4:	429a      	cmp	r2, r3
   103f6:	d902      	bls.n	103fe <main+0x65a>
			{
				highUsageModeFlag = true;
   103f8:	4b40      	ldr	r3, [pc, #256]	; (104fc <main+0x758>)
   103fa:	2201      	movs	r2, #1
   103fc:	701a      	strb	r2, [r3, #0]
			}

			doorOpenCount_1Hr = 0;
   103fe:	4b3a      	ldr	r3, [pc, #232]	; (104e8 <main+0x744>)
   10400:	2200      	movs	r2, #0
   10402:	801a      	strh	r2, [r3, #0]
		}		
									
		// UPDATE TIME ///////////////////////////////////////////////	
		task1Time = updateTimeInSec(task1LastTime);
   10404:	4b3e      	ldr	r3, [pc, #248]	; (10500 <main+0x75c>)
   10406:	681b      	ldr	r3, [r3, #0]
   10408:	1c18      	adds	r0, r3, #0
   1040a:	4b3e      	ldr	r3, [pc, #248]	; (10504 <main+0x760>)
   1040c:	4798      	blx	r3
   1040e:	1c02      	adds	r2, r0, #0
   10410:	4b3d      	ldr	r3, [pc, #244]	; (10508 <main+0x764>)
   10412:	601a      	str	r2, [r3, #0]
		task2Time = updateTimeInSec(task2LastTime);
   10414:	4b3d      	ldr	r3, [pc, #244]	; (1050c <main+0x768>)
   10416:	681b      	ldr	r3, [r3, #0]
   10418:	1c18      	adds	r0, r3, #0
   1041a:	4b3a      	ldr	r3, [pc, #232]	; (10504 <main+0x760>)
   1041c:	4798      	blx	r3
   1041e:	1c02      	adds	r2, r0, #0
   10420:	4b3b      	ldr	r3, [pc, #236]	; (10510 <main+0x76c>)
   10422:	601a      	str	r2, [r3, #0]
		task3Time = updateTimeInSec(task3LastTime);
   10424:	4b23      	ldr	r3, [pc, #140]	; (104b4 <main+0x710>)
   10426:	681b      	ldr	r3, [r3, #0]
   10428:	1c18      	adds	r0, r3, #0
   1042a:	4b36      	ldr	r3, [pc, #216]	; (10504 <main+0x760>)
   1042c:	4798      	blx	r3
   1042e:	1c02      	adds	r2, r0, #0
   10430:	4b1e      	ldr	r3, [pc, #120]	; (104ac <main+0x708>)
   10432:	601a      	str	r2, [r3, #0]
		// task4 used for defrost
		// task5 used for defrost
		task6Time = updateTimeInSec(task6LastTime);
   10434:	4b24      	ldr	r3, [pc, #144]	; (104c8 <main+0x724>)
   10436:	681b      	ldr	r3, [r3, #0]
   10438:	1c18      	adds	r0, r3, #0
   1043a:	4b32      	ldr	r3, [pc, #200]	; (10504 <main+0x760>)
   1043c:	4798      	blx	r3
   1043e:	1c02      	adds	r2, r0, #0
   10440:	4b20      	ldr	r3, [pc, #128]	; (104c4 <main+0x720>)
   10442:	601a      	str	r2, [r3, #0]
		task7Time = updateTimeInSec(task7LastTime);
   10444:	4b33      	ldr	r3, [pc, #204]	; (10514 <main+0x770>)
   10446:	681b      	ldr	r3, [r3, #0]
   10448:	1c18      	adds	r0, r3, #0
   1044a:	4b2e      	ldr	r3, [pc, #184]	; (10504 <main+0x760>)
   1044c:	4798      	blx	r3
   1044e:	1c02      	adds	r2, r0, #0
   10450:	4b21      	ldr	r3, [pc, #132]	; (104d8 <main+0x734>)
   10452:	601a      	str	r2, [r3, #0]
		// task8 used for php self-check
		// task9 used for php self-check
		// task10 used for php self-check
		task11Time = updateTimeInSec(task11LastTime);
   10454:	4b23      	ldr	r3, [pc, #140]	; (104e4 <main+0x740>)
   10456:	681b      	ldr	r3, [r3, #0]
   10458:	1c18      	adds	r0, r3, #0
   1045a:	4b2a      	ldr	r3, [pc, #168]	; (10504 <main+0x760>)
   1045c:	4798      	blx	r3
   1045e:	1c02      	adds	r2, r0, #0
   10460:	4b1f      	ldr	r3, [pc, #124]	; (104e0 <main+0x73c>)
   10462:	601a      	str	r2, [r3, #0]
		task12Time = updateTimeInSec(task12LastTime);	
   10464:	4b2c      	ldr	r3, [pc, #176]	; (10518 <main+0x774>)
   10466:	681b      	ldr	r3, [r3, #0]
   10468:	1c18      	adds	r0, r3, #0
   1046a:	4b26      	ldr	r3, [pc, #152]	; (10504 <main+0x760>)
   1046c:	4798      	blx	r3
   1046e:	1c02      	adds	r2, r0, #0
   10470:	4b2a      	ldr	r3, [pc, #168]	; (1051c <main+0x778>)
   10472:	601a      	str	r2, [r3, #0]
		
	} // end while;
   10474:	e49b      	b.n	fdae <main+0xa>
   10476:	46c0      	nop			; (mov r8, r8)
   10478:	20000379 	.word	0x20000379
   1047c:	20000a84 	.word	0x20000a84
   10480:	20000e84 	.word	0x20000e84
   10484:	000060e1 	.word	0x000060e1
   10488:	20000c58 	.word	0x20000c58
   1048c:	20000b8c 	.word	0x20000b8c
   10490:	20000914 	.word	0x20000914
   10494:	2000017a 	.word	0x2000017a
   10498:	20000adc 	.word	0x20000adc
   1049c:	20000d18 	.word	0x20000d18
   104a0:	20000b40 	.word	0x20000b40
   104a4:	20000dc0 	.word	0x20000dc0
   104a8:	2000037a 	.word	0x2000037a
   104ac:	20000384 	.word	0x20000384
   104b0:	0000dcad 	.word	0x0000dcad
   104b4:	200003a0 	.word	0x200003a0
   104b8:	20000371 	.word	0x20000371
   104bc:	00003c45 	.word	0x00003c45
   104c0:	00004f1d 	.word	0x00004f1d
   104c4:	20000388 	.word	0x20000388
   104c8:	200003a4 	.word	0x200003a4
   104cc:	20000088 	.word	0x20000088
   104d0:	0000eedd 	.word	0x0000eedd
   104d4:	000068dd 	.word	0x000068dd
   104d8:	2000038c 	.word	0x2000038c
   104dc:	20000178 	.word	0x20000178
   104e0:	20000390 	.word	0x20000390
   104e4:	200003ac 	.word	0x200003ac
   104e8:	20000360 	.word	0x20000360
   104ec:	2000090c 	.word	0x2000090c
   104f0:	200008dc 	.word	0x200008dc
   104f4:	200002f4 	.word	0x200002f4
   104f8:	20000166 	.word	0x20000166
   104fc:	20000377 	.word	0x20000377
   10500:	20000398 	.word	0x20000398
   10504:	0000dd0d 	.word	0x0000dd0d
   10508:	2000037c 	.word	0x2000037c
   1050c:	2000039c 	.word	0x2000039c
   10510:	20000380 	.word	0x20000380
   10514:	200003a8 	.word	0x200003a8
   10518:	200003b0 	.word	0x200003b0
   1051c:	20000394 	.word	0x20000394

00010520 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   10520:	b580      	push	{r7, lr}
   10522:	b082      	sub	sp, #8
   10524:	af00      	add	r7, sp, #0
   10526:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   10528:	687b      	ldr	r3, [r7, #4]
   1052a:	2b00      	cmp	r3, #0
   1052c:	d00c      	beq.n	10548 <delay_cycles+0x28>
		SysTick->LOAD = n;
   1052e:	4b08      	ldr	r3, [pc, #32]	; (10550 <delay_cycles+0x30>)
   10530:	687a      	ldr	r2, [r7, #4]
   10532:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   10534:	4b06      	ldr	r3, [pc, #24]	; (10550 <delay_cycles+0x30>)
   10536:	2200      	movs	r2, #0
   10538:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   1053a:	46c0      	nop			; (mov r8, r8)
   1053c:	4b04      	ldr	r3, [pc, #16]	; (10550 <delay_cycles+0x30>)
   1053e:	681a      	ldr	r2, [r3, #0]
   10540:	2380      	movs	r3, #128	; 0x80
   10542:	025b      	lsls	r3, r3, #9
   10544:	4013      	ands	r3, r2
   10546:	d0f9      	beq.n	1053c <delay_cycles+0x1c>
		};
	}
}
   10548:	46bd      	mov	sp, r7
   1054a:	b002      	add	sp, #8
   1054c:	bd80      	pop	{r7, pc}
   1054e:	46c0      	nop			; (mov r8, r8)
   10550:	e000e010 	.word	0xe000e010

00010554 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   10554:	b580      	push	{r7, lr}
   10556:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   10558:	2000      	movs	r0, #0
   1055a:	4b10      	ldr	r3, [pc, #64]	; (1059c <delay_init+0x48>)
   1055c:	4798      	blx	r3
   1055e:	1c02      	adds	r2, r0, #0
   10560:	4b0f      	ldr	r3, [pc, #60]	; (105a0 <delay_init+0x4c>)
   10562:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   10564:	4b0e      	ldr	r3, [pc, #56]	; (105a0 <delay_init+0x4c>)
   10566:	681a      	ldr	r2, [r3, #0]
   10568:	4b0e      	ldr	r3, [pc, #56]	; (105a4 <delay_init+0x50>)
   1056a:	1c10      	adds	r0, r2, #0
   1056c:	22fa      	movs	r2, #250	; 0xfa
   1056e:	0091      	lsls	r1, r2, #2
   10570:	4798      	blx	r3
   10572:	1c03      	adds	r3, r0, #0
   10574:	1c1a      	adds	r2, r3, #0
   10576:	4b0a      	ldr	r3, [pc, #40]	; (105a0 <delay_init+0x4c>)
   10578:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   1057a:	4b09      	ldr	r3, [pc, #36]	; (105a0 <delay_init+0x4c>)
   1057c:	681a      	ldr	r2, [r3, #0]
   1057e:	4b09      	ldr	r3, [pc, #36]	; (105a4 <delay_init+0x50>)
   10580:	1c10      	adds	r0, r2, #0
   10582:	22fa      	movs	r2, #250	; 0xfa
   10584:	0091      	lsls	r1, r2, #2
   10586:	4798      	blx	r3
   10588:	1c03      	adds	r3, r0, #0
   1058a:	1c1a      	adds	r2, r3, #0
   1058c:	4b06      	ldr	r3, [pc, #24]	; (105a8 <delay_init+0x54>)
   1058e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   10590:	4b06      	ldr	r3, [pc, #24]	; (105ac <delay_init+0x58>)
   10592:	2205      	movs	r2, #5
   10594:	601a      	str	r2, [r3, #0]
}
   10596:	46bd      	mov	sp, r7
   10598:	bd80      	pop	{r7, pc}
   1059a:	46c0      	nop			; (mov r8, r8)
   1059c:	00017891 	.word	0x00017891
   105a0:	20000194 	.word	0x20000194
   105a4:	0001f42d 	.word	0x0001f42d
   105a8:	20000198 	.word	0x20000198
   105ac:	e000e010 	.word	0xe000e010

000105b0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   105b0:	b580      	push	{r7, lr}
   105b2:	b082      	sub	sp, #8
   105b4:	af00      	add	r7, sp, #0
   105b6:	6078      	str	r0, [r7, #4]
	while (n--) {
   105b8:	e004      	b.n	105c4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   105ba:	4b06      	ldr	r3, [pc, #24]	; (105d4 <delay_cycles_ms+0x24>)
   105bc:	681b      	ldr	r3, [r3, #0]
   105be:	1c18      	adds	r0, r3, #0
   105c0:	4b05      	ldr	r3, [pc, #20]	; (105d8 <delay_cycles_ms+0x28>)
   105c2:	4798      	blx	r3
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
   105c4:	687b      	ldr	r3, [r7, #4]
   105c6:	1e5a      	subs	r2, r3, #1
   105c8:	607a      	str	r2, [r7, #4]
   105ca:	2b00      	cmp	r3, #0
   105cc:	d1f5      	bne.n	105ba <delay_cycles_ms+0xa>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
   105ce:	46bd      	mov	sp, r7
   105d0:	b002      	add	sp, #8
   105d2:	bd80      	pop	{r7, pc}
   105d4:	20000194 	.word	0x20000194
   105d8:	00010521 	.word	0x00010521

000105dc <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
   105dc:	b580      	push	{r7, lr}
   105de:	af00      	add	r7, sp, #0
	return test_case_ptr;
   105e0:	4b02      	ldr	r3, [pc, #8]	; (105ec <test_get_case+0x10>)
   105e2:	681b      	ldr	r3, [r3, #0]
}
   105e4:	1c18      	adds	r0, r3, #0
   105e6:	46bd      	mov	sp, r7
   105e8:	bd80      	pop	{r7, pc}
   105ea:	46c0      	nop			; (mov r8, r8)
   105ec:	2000041c 	.word	0x2000041c

000105f0 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   105f0:	b580      	push	{r7, lr}
   105f2:	b082      	sub	sp, #8
   105f4:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   105f6:	4b0f      	ldr	r3, [pc, #60]	; (10634 <cpu_irq_enter_critical+0x44>)
   105f8:	681b      	ldr	r3, [r3, #0]
   105fa:	2b00      	cmp	r3, #0
   105fc:	d112      	bne.n	10624 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   105fe:	f3ef 8310 	mrs	r3, PRIMASK
   10602:	607b      	str	r3, [r7, #4]
  return(result);
   10604:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   10606:	2b00      	cmp	r3, #0
   10608:	d109      	bne.n	1061e <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   1060a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   1060c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   10610:	4b09      	ldr	r3, [pc, #36]	; (10638 <cpu_irq_enter_critical+0x48>)
   10612:	2200      	movs	r2, #0
   10614:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   10616:	4b09      	ldr	r3, [pc, #36]	; (1063c <cpu_irq_enter_critical+0x4c>)
   10618:	2201      	movs	r2, #1
   1061a:	701a      	strb	r2, [r3, #0]
   1061c:	e002      	b.n	10624 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   1061e:	4b07      	ldr	r3, [pc, #28]	; (1063c <cpu_irq_enter_critical+0x4c>)
   10620:	2200      	movs	r2, #0
   10622:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   10624:	4b03      	ldr	r3, [pc, #12]	; (10634 <cpu_irq_enter_critical+0x44>)
   10626:	681b      	ldr	r3, [r3, #0]
   10628:	1c5a      	adds	r2, r3, #1
   1062a:	4b02      	ldr	r3, [pc, #8]	; (10634 <cpu_irq_enter_critical+0x44>)
   1062c:	601a      	str	r2, [r3, #0]
}
   1062e:	46bd      	mov	sp, r7
   10630:	b002      	add	sp, #8
   10632:	bd80      	pop	{r7, pc}
   10634:	200003b8 	.word	0x200003b8
   10638:	2000019c 	.word	0x2000019c
   1063c:	200003bc 	.word	0x200003bc

00010640 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   10640:	b590      	push	{r4, r7, lr}
   10642:	b083      	sub	sp, #12
   10644:	af02      	add	r7, sp, #8
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);
   10646:	4b1e      	ldr	r3, [pc, #120]	; (106c0 <cpu_irq_leave_critical+0x80>)
   10648:	4798      	blx	r3
   1064a:	1c03      	adds	r3, r0, #0
   1064c:	2b00      	cmp	r3, #0
   1064e:	d012      	beq.n	10676 <cpu_irq_leave_critical+0x36>
   10650:	4b1c      	ldr	r3, [pc, #112]	; (106c4 <cpu_irq_leave_critical+0x84>)
   10652:	681b      	ldr	r3, [r3, #0]
   10654:	2b00      	cmp	r3, #0
   10656:	d11c      	bne.n	10692 <cpu_irq_leave_critical+0x52>
   10658:	4b19      	ldr	r3, [pc, #100]	; (106c0 <cpu_irq_leave_critical+0x80>)
   1065a:	4798      	blx	r3
   1065c:	1c02      	adds	r2, r0, #0
   1065e:	4b1a      	ldr	r3, [pc, #104]	; (106c8 <cpu_irq_leave_critical+0x88>)
   10660:	491a      	ldr	r1, [pc, #104]	; (106cc <cpu_irq_leave_critical+0x8c>)
   10662:	9100      	str	r1, [sp, #0]
   10664:	491a      	ldr	r1, [pc, #104]	; (106d0 <cpu_irq_leave_critical+0x90>)
   10666:	9101      	str	r1, [sp, #4]
   10668:	1c10      	adds	r0, r2, #0
   1066a:	2101      	movs	r1, #1
   1066c:	1c1a      	adds	r2, r3, #0
   1066e:	2349      	movs	r3, #73	; 0x49
   10670:	4c18      	ldr	r4, [pc, #96]	; (106d4 <cpu_irq_leave_critical+0x94>)
   10672:	47a0      	blx	r4
   10674:	e00d      	b.n	10692 <cpu_irq_leave_critical+0x52>
   10676:	4b13      	ldr	r3, [pc, #76]	; (106c4 <cpu_irq_leave_critical+0x84>)
   10678:	681b      	ldr	r3, [r3, #0]
   1067a:	2b00      	cmp	r3, #0
   1067c:	d109      	bne.n	10692 <cpu_irq_leave_critical+0x52>
   1067e:	4916      	ldr	r1, [pc, #88]	; (106d8 <cpu_irq_leave_critical+0x98>)
   10680:	4a13      	ldr	r2, [pc, #76]	; (106d0 <cpu_irq_leave_critical+0x90>)
   10682:	4b11      	ldr	r3, [pc, #68]	; (106c8 <cpu_irq_leave_critical+0x88>)
   10684:	1c08      	adds	r0, r1, #0
   10686:	1c11      	adds	r1, r2, #0
   10688:	1c1a      	adds	r2, r3, #0
   1068a:	2349      	movs	r3, #73	; 0x49
   1068c:	4c13      	ldr	r4, [pc, #76]	; (106dc <cpu_irq_leave_critical+0x9c>)
   1068e:	47a0      	blx	r4
   10690:	e7fe      	b.n	10690 <cpu_irq_leave_critical+0x50>

	cpu_irq_critical_section_counter--;
   10692:	4b0c      	ldr	r3, [pc, #48]	; (106c4 <cpu_irq_leave_critical+0x84>)
   10694:	681b      	ldr	r3, [r3, #0]
   10696:	1e5a      	subs	r2, r3, #1
   10698:	4b0a      	ldr	r3, [pc, #40]	; (106c4 <cpu_irq_leave_critical+0x84>)
   1069a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   1069c:	4b09      	ldr	r3, [pc, #36]	; (106c4 <cpu_irq_leave_critical+0x84>)
   1069e:	681b      	ldr	r3, [r3, #0]
   106a0:	2b00      	cmp	r3, #0
   106a2:	d10a      	bne.n	106ba <cpu_irq_leave_critical+0x7a>
   106a4:	4b0e      	ldr	r3, [pc, #56]	; (106e0 <cpu_irq_leave_critical+0xa0>)
   106a6:	781b      	ldrb	r3, [r3, #0]
   106a8:	b2db      	uxtb	r3, r3
   106aa:	2b00      	cmp	r3, #0
   106ac:	d005      	beq.n	106ba <cpu_irq_leave_critical+0x7a>
		cpu_irq_enable();
   106ae:	4b0d      	ldr	r3, [pc, #52]	; (106e4 <cpu_irq_leave_critical+0xa4>)
   106b0:	2201      	movs	r2, #1
   106b2:	701a      	strb	r2, [r3, #0]
   106b4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   106b8:	b662      	cpsie	i
	}
}
   106ba:	46bd      	mov	sp, r7
   106bc:	b001      	add	sp, #4
   106be:	bd90      	pop	{r4, r7, pc}
   106c0:	000105dd 	.word	0x000105dd
   106c4:	200003b8 	.word	0x200003b8
   106c8:	000259d4 	.word	0x000259d4
   106cc:	00025a0c 	.word	0x00025a0c
   106d0:	00025a24 	.word	0x00025a24
   106d4:	000106e9 	.word	0x000106e9
   106d8:	00025a4c 	.word	0x00025a4c
   106dc:	0001b62d 	.word	0x0001b62d
   106e0:	200003bc 	.word	0x200003bc
   106e4:	2000019c 	.word	0x2000019c

000106e8 <test_case_fail>:
 * \param ... Values to insert into failure message.
 */
void test_case_fail(const struct test_case *test, int result,
		const char *file, unsigned int line,
		const char *fmt, ...)
{
   106e8:	b590      	push	{r4, r7, lr}
   106ea:	b087      	sub	sp, #28
   106ec:	af00      	add	r7, sp, #0
   106ee:	60f8      	str	r0, [r7, #12]
   106f0:	60b9      	str	r1, [r7, #8]
   106f2:	607a      	str	r2, [r7, #4]
   106f4:	603b      	str	r3, [r7, #0]
	va_list ap;

	dbg_error("Test '%s' failed at %s:%u:\r\n\t", test->name, file, line);
   106f6:	68fb      	ldr	r3, [r7, #12]
   106f8:	68d9      	ldr	r1, [r3, #12]
   106fa:	4855      	ldr	r0, [pc, #340]	; (10850 <test_case_fail+0x168>)
   106fc:	687a      	ldr	r2, [r7, #4]
   106fe:	683b      	ldr	r3, [r7, #0]
   10700:	4c54      	ldr	r4, [pc, #336]	; (10854 <test_case_fail+0x16c>)
   10702:	47a0      	blx	r4

	va_start(ap, fmt);
   10704:	1c3b      	adds	r3, r7, #0
   10706:	332c      	adds	r3, #44	; 0x2c
   10708:	617b      	str	r3, [r7, #20]
	dbg_vprintf_pgm(fmt, ap);
   1070a:	4b53      	ldr	r3, [pc, #332]	; (10858 <test_case_fail+0x170>)
   1070c:	681b      	ldr	r3, [r3, #0]
   1070e:	6899      	ldr	r1, [r3, #8]
   10710:	6aba      	ldr	r2, [r7, #40]	; 0x28
   10712:	697b      	ldr	r3, [r7, #20]
   10714:	1c08      	adds	r0, r1, #0
   10716:	1c11      	adds	r1, r2, #0
   10718:	1c1a      	adds	r2, r3, #0
   1071a:	4b50      	ldr	r3, [pc, #320]	; (1085c <test_case_fail+0x174>)
   1071c:	4798      	blx	r3
	va_end(ap);
	dbg_putchar('\r');
   1071e:	4b4e      	ldr	r3, [pc, #312]	; (10858 <test_case_fail+0x170>)
   10720:	681b      	ldr	r3, [r3, #0]
   10722:	689b      	ldr	r3, [r3, #8]
   10724:	689a      	ldr	r2, [r3, #8]
   10726:	3a01      	subs	r2, #1
   10728:	609a      	str	r2, [r3, #8]
   1072a:	689b      	ldr	r3, [r3, #8]
   1072c:	2b00      	cmp	r3, #0
   1072e:	da33      	bge.n	10798 <test_case_fail+0xb0>
   10730:	4b49      	ldr	r3, [pc, #292]	; (10858 <test_case_fail+0x170>)
   10732:	681b      	ldr	r3, [r3, #0]
   10734:	689b      	ldr	r3, [r3, #8]
   10736:	689a      	ldr	r2, [r3, #8]
   10738:	4b47      	ldr	r3, [pc, #284]	; (10858 <test_case_fail+0x170>)
   1073a:	681b      	ldr	r3, [r3, #0]
   1073c:	689b      	ldr	r3, [r3, #8]
   1073e:	699b      	ldr	r3, [r3, #24]
   10740:	429a      	cmp	r2, r3
   10742:	db1e      	blt.n	10782 <test_case_fail+0x9a>
   10744:	4b44      	ldr	r3, [pc, #272]	; (10858 <test_case_fail+0x170>)
   10746:	681b      	ldr	r3, [r3, #0]
   10748:	689b      	ldr	r3, [r3, #8]
   1074a:	681b      	ldr	r3, [r3, #0]
   1074c:	220d      	movs	r2, #13
   1074e:	701a      	strb	r2, [r3, #0]
   10750:	4b41      	ldr	r3, [pc, #260]	; (10858 <test_case_fail+0x170>)
   10752:	681b      	ldr	r3, [r3, #0]
   10754:	689b      	ldr	r3, [r3, #8]
   10756:	681b      	ldr	r3, [r3, #0]
   10758:	781b      	ldrb	r3, [r3, #0]
   1075a:	2b0a      	cmp	r3, #10
   1075c:	d006      	beq.n	1076c <test_case_fail+0x84>
   1075e:	4b3e      	ldr	r3, [pc, #248]	; (10858 <test_case_fail+0x170>)
   10760:	681b      	ldr	r3, [r3, #0]
   10762:	689b      	ldr	r3, [r3, #8]
   10764:	681a      	ldr	r2, [r3, #0]
   10766:	3201      	adds	r2, #1
   10768:	601a      	str	r2, [r3, #0]
   1076a:	e021      	b.n	107b0 <test_case_fail+0xc8>
   1076c:	4b3a      	ldr	r3, [pc, #232]	; (10858 <test_case_fail+0x170>)
   1076e:	681a      	ldr	r2, [r3, #0]
   10770:	4b39      	ldr	r3, [pc, #228]	; (10858 <test_case_fail+0x170>)
   10772:	681b      	ldr	r3, [r3, #0]
   10774:	689b      	ldr	r3, [r3, #8]
   10776:	1c10      	adds	r0, r2, #0
   10778:	210a      	movs	r1, #10
   1077a:	1c1a      	adds	r2, r3, #0
   1077c:	4b38      	ldr	r3, [pc, #224]	; (10860 <test_case_fail+0x178>)
   1077e:	4798      	blx	r3
   10780:	e016      	b.n	107b0 <test_case_fail+0xc8>
   10782:	4b35      	ldr	r3, [pc, #212]	; (10858 <test_case_fail+0x170>)
   10784:	681a      	ldr	r2, [r3, #0]
   10786:	4b34      	ldr	r3, [pc, #208]	; (10858 <test_case_fail+0x170>)
   10788:	681b      	ldr	r3, [r3, #0]
   1078a:	689b      	ldr	r3, [r3, #8]
   1078c:	1c10      	adds	r0, r2, #0
   1078e:	210d      	movs	r1, #13
   10790:	1c1a      	adds	r2, r3, #0
   10792:	4b33      	ldr	r3, [pc, #204]	; (10860 <test_case_fail+0x178>)
   10794:	4798      	blx	r3
   10796:	e00b      	b.n	107b0 <test_case_fail+0xc8>
   10798:	4b2f      	ldr	r3, [pc, #188]	; (10858 <test_case_fail+0x170>)
   1079a:	681b      	ldr	r3, [r3, #0]
   1079c:	689b      	ldr	r3, [r3, #8]
   1079e:	681b      	ldr	r3, [r3, #0]
   107a0:	220d      	movs	r2, #13
   107a2:	701a      	strb	r2, [r3, #0]
   107a4:	4b2c      	ldr	r3, [pc, #176]	; (10858 <test_case_fail+0x170>)
   107a6:	681b      	ldr	r3, [r3, #0]
   107a8:	689b      	ldr	r3, [r3, #8]
   107aa:	681a      	ldr	r2, [r3, #0]
   107ac:	3201      	adds	r2, #1
   107ae:	601a      	str	r2, [r3, #0]
	dbg_putchar('\n');
   107b0:	4b29      	ldr	r3, [pc, #164]	; (10858 <test_case_fail+0x170>)
   107b2:	681b      	ldr	r3, [r3, #0]
   107b4:	689b      	ldr	r3, [r3, #8]
   107b6:	689a      	ldr	r2, [r3, #8]
   107b8:	3a01      	subs	r2, #1
   107ba:	609a      	str	r2, [r3, #8]
   107bc:	689b      	ldr	r3, [r3, #8]
   107be:	2b00      	cmp	r3, #0
   107c0:	da33      	bge.n	1082a <test_case_fail+0x142>
   107c2:	4b25      	ldr	r3, [pc, #148]	; (10858 <test_case_fail+0x170>)
   107c4:	681b      	ldr	r3, [r3, #0]
   107c6:	689b      	ldr	r3, [r3, #8]
   107c8:	689a      	ldr	r2, [r3, #8]
   107ca:	4b23      	ldr	r3, [pc, #140]	; (10858 <test_case_fail+0x170>)
   107cc:	681b      	ldr	r3, [r3, #0]
   107ce:	689b      	ldr	r3, [r3, #8]
   107d0:	699b      	ldr	r3, [r3, #24]
   107d2:	429a      	cmp	r2, r3
   107d4:	db1e      	blt.n	10814 <test_case_fail+0x12c>
   107d6:	4b20      	ldr	r3, [pc, #128]	; (10858 <test_case_fail+0x170>)
   107d8:	681b      	ldr	r3, [r3, #0]
   107da:	689b      	ldr	r3, [r3, #8]
   107dc:	681b      	ldr	r3, [r3, #0]
   107de:	220a      	movs	r2, #10
   107e0:	701a      	strb	r2, [r3, #0]
   107e2:	4b1d      	ldr	r3, [pc, #116]	; (10858 <test_case_fail+0x170>)
   107e4:	681b      	ldr	r3, [r3, #0]
   107e6:	689b      	ldr	r3, [r3, #8]
   107e8:	681b      	ldr	r3, [r3, #0]
   107ea:	781b      	ldrb	r3, [r3, #0]
   107ec:	2b0a      	cmp	r3, #10
   107ee:	d006      	beq.n	107fe <test_case_fail+0x116>
   107f0:	4b19      	ldr	r3, [pc, #100]	; (10858 <test_case_fail+0x170>)
   107f2:	681b      	ldr	r3, [r3, #0]
   107f4:	689b      	ldr	r3, [r3, #8]
   107f6:	681a      	ldr	r2, [r3, #0]
   107f8:	3201      	adds	r2, #1
   107fa:	601a      	str	r2, [r3, #0]
   107fc:	e021      	b.n	10842 <test_case_fail+0x15a>
   107fe:	4b16      	ldr	r3, [pc, #88]	; (10858 <test_case_fail+0x170>)
   10800:	681a      	ldr	r2, [r3, #0]
   10802:	4b15      	ldr	r3, [pc, #84]	; (10858 <test_case_fail+0x170>)
   10804:	681b      	ldr	r3, [r3, #0]
   10806:	689b      	ldr	r3, [r3, #8]
   10808:	1c10      	adds	r0, r2, #0
   1080a:	210a      	movs	r1, #10
   1080c:	1c1a      	adds	r2, r3, #0
   1080e:	4b14      	ldr	r3, [pc, #80]	; (10860 <test_case_fail+0x178>)
   10810:	4798      	blx	r3
   10812:	e016      	b.n	10842 <test_case_fail+0x15a>
   10814:	4b10      	ldr	r3, [pc, #64]	; (10858 <test_case_fail+0x170>)
   10816:	681a      	ldr	r2, [r3, #0]
   10818:	4b0f      	ldr	r3, [pc, #60]	; (10858 <test_case_fail+0x170>)
   1081a:	681b      	ldr	r3, [r3, #0]
   1081c:	689b      	ldr	r3, [r3, #8]
   1081e:	1c10      	adds	r0, r2, #0
   10820:	210a      	movs	r1, #10
   10822:	1c1a      	adds	r2, r3, #0
   10824:	4b0e      	ldr	r3, [pc, #56]	; (10860 <test_case_fail+0x178>)
   10826:	4798      	blx	r3
   10828:	e00b      	b.n	10842 <test_case_fail+0x15a>
   1082a:	4b0b      	ldr	r3, [pc, #44]	; (10858 <test_case_fail+0x170>)
   1082c:	681b      	ldr	r3, [r3, #0]
   1082e:	689b      	ldr	r3, [r3, #8]
   10830:	681b      	ldr	r3, [r3, #0]
   10832:	220a      	movs	r2, #10
   10834:	701a      	strb	r2, [r3, #0]
   10836:	4b08      	ldr	r3, [pc, #32]	; (10858 <test_case_fail+0x170>)
   10838:	681b      	ldr	r3, [r3, #0]
   1083a:	689b      	ldr	r3, [r3, #8]
   1083c:	681a      	ldr	r2, [r3, #0]
   1083e:	3201      	adds	r2, #1
   10840:	601a      	str	r2, [r3, #0]

	/*
	 * This will cause the setjmp() call in test_call() to return
	 * TEST_FAIL.
	 */
	longjmp(test_failure_jmpbuf, result);
   10842:	4a08      	ldr	r2, [pc, #32]	; (10864 <test_case_fail+0x17c>)
   10844:	68bb      	ldr	r3, [r7, #8]
   10846:	1c10      	adds	r0, r2, #0
   10848:	1c19      	adds	r1, r3, #0
   1084a:	4b07      	ldr	r3, [pc, #28]	; (10868 <test_case_fail+0x180>)
   1084c:	4798      	blx	r3
   1084e:	46c0      	nop			; (mov r8, r8)
   10850:	00025aec 	.word	0x00025aec
   10854:	0001b62d 	.word	0x0001b62d
   10858:	200001a0 	.word	0x200001a0
   1085c:	0001cbd5 	.word	0x0001cbd5
   10860:	0001cbf1 	.word	0x0001cbf1
   10864:	200003c0 	.word	0x200003c0
   10868:	0001b8fd 	.word	0x0001b8fd

0001086c <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
   1086c:	b580      	push	{r7, lr}
   1086e:	af00      	add	r7, sp, #0
	return test_case_ptr;
   10870:	4b02      	ldr	r3, [pc, #8]	; (1087c <test_get_case+0x10>)
   10872:	681b      	ldr	r3, [r3, #0]
}
   10874:	1c18      	adds	r0, r3, #0
   10876:	46bd      	mov	sp, r7
   10878:	bd80      	pop	{r7, pc}
   1087a:	46c0      	nop			; (mov r8, r8)
   1087c:	2000041c 	.word	0x2000041c

00010880 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   10880:	b590      	push	{r4, r7, lr}
   10882:	b085      	sub	sp, #20
   10884:	af02      	add	r7, sp, #8
   10886:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
   10888:	4b15      	ldr	r3, [pc, #84]	; (108e0 <port_get_config_defaults+0x60>)
   1088a:	4798      	blx	r3
   1088c:	1c03      	adds	r3, r0, #0
   1088e:	2b00      	cmp	r3, #0
   10890:	d011      	beq.n	108b6 <port_get_config_defaults+0x36>
   10892:	687b      	ldr	r3, [r7, #4]
   10894:	2b00      	cmp	r3, #0
   10896:	d119      	bne.n	108cc <port_get_config_defaults+0x4c>
   10898:	4b11      	ldr	r3, [pc, #68]	; (108e0 <port_get_config_defaults+0x60>)
   1089a:	4798      	blx	r3
   1089c:	1c01      	adds	r1, r0, #0
   1089e:	4a11      	ldr	r2, [pc, #68]	; (108e4 <port_get_config_defaults+0x64>)
   108a0:	23ad      	movs	r3, #173	; 0xad
   108a2:	005b      	lsls	r3, r3, #1
   108a4:	4810      	ldr	r0, [pc, #64]	; (108e8 <port_get_config_defaults+0x68>)
   108a6:	9000      	str	r0, [sp, #0]
   108a8:	4810      	ldr	r0, [pc, #64]	; (108ec <port_get_config_defaults+0x6c>)
   108aa:	9001      	str	r0, [sp, #4]
   108ac:	1c08      	adds	r0, r1, #0
   108ae:	2101      	movs	r1, #1
   108b0:	4c0f      	ldr	r4, [pc, #60]	; (108f0 <port_get_config_defaults+0x70>)
   108b2:	47a0      	blx	r4
   108b4:	e00a      	b.n	108cc <port_get_config_defaults+0x4c>
   108b6:	687b      	ldr	r3, [r7, #4]
   108b8:	2b00      	cmp	r3, #0
   108ba:	d107      	bne.n	108cc <port_get_config_defaults+0x4c>
   108bc:	480d      	ldr	r0, [pc, #52]	; (108f4 <port_get_config_defaults+0x74>)
   108be:	490b      	ldr	r1, [pc, #44]	; (108ec <port_get_config_defaults+0x6c>)
   108c0:	4a08      	ldr	r2, [pc, #32]	; (108e4 <port_get_config_defaults+0x64>)
   108c2:	23ad      	movs	r3, #173	; 0xad
   108c4:	005b      	lsls	r3, r3, #1
   108c6:	4c0c      	ldr	r4, [pc, #48]	; (108f8 <port_get_config_defaults+0x78>)
   108c8:	47a0      	blx	r4
   108ca:	e7fe      	b.n	108ca <port_get_config_defaults+0x4a>

	/* Default configuration values */
	config->direction = PORT_PIN_DIR_INPUT;
   108cc:	687b      	ldr	r3, [r7, #4]
   108ce:	2200      	movs	r2, #0
   108d0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   108d2:	687b      	ldr	r3, [r7, #4]
   108d4:	2201      	movs	r2, #1
   108d6:	705a      	strb	r2, [r3, #1]
}
   108d8:	46bd      	mov	sp, r7
   108da:	b003      	add	sp, #12
   108dc:	bd90      	pop	{r4, r7, pc}
   108de:	46c0      	nop			; (mov r8, r8)
   108e0:	0001086d 	.word	0x0001086d
   108e4:	00025b6c 	.word	0x00025b6c
   108e8:	00025b90 	.word	0x00025b90
   108ec:	00025ba8 	.word	0x00025ba8
   108f0:	000106e9 	.word	0x000106e9
   108f4:	00025bb0 	.word	0x00025bb0
   108f8:	0001b62d 	.word	0x0001b62d

000108fc <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   108fc:	b580      	push	{r7, lr}
   108fe:	b082      	sub	sp, #8
   10900:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   10902:	1d3b      	adds	r3, r7, #4
   10904:	1c18      	adds	r0, r3, #0
   10906:	4b02      	ldr	r3, [pc, #8]	; (10910 <system_board_init+0x14>)
   10908:	4798      	blx	r3
	/* Set buttons as inputs */
	//RER
	//pin_conf.direction  = PORT_PIN_DIR_INPUT;
	//pin_conf.input_pull = PORT_PIN_PULL_UP;
	//port_pin_set_config(BUTTON_0_PIN, &pin_conf);
}
   1090a:	46bd      	mov	sp, r7
   1090c:	b002      	add	sp, #8
   1090e:	bd80      	pop	{r7, pc}
   10910:	00010881 	.word	0x00010881

00010914 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
   10914:	b580      	push	{r7, lr}
   10916:	af00      	add	r7, sp, #0
	return test_case_ptr;
   10918:	4b02      	ldr	r3, [pc, #8]	; (10924 <test_get_case+0x10>)
   1091a:	681b      	ldr	r3, [r3, #0]
}
   1091c:	1c18      	adds	r0, r3, #0
   1091e:	46bd      	mov	sp, r7
   10920:	bd80      	pop	{r7, pc}
   10922:	46c0      	nop			; (mov r8, r8)
   10924:	2000041c 	.word	0x2000041c

00010928 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   10928:	b590      	push	{r4, r7, lr}
   1092a:	b085      	sub	sp, #20
   1092c:	af02      	add	r7, sp, #8
   1092e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
   10930:	4b15      	ldr	r3, [pc, #84]	; (10988 <system_gclk_chan_get_config_defaults+0x60>)
   10932:	4798      	blx	r3
   10934:	1c03      	adds	r3, r0, #0
   10936:	2b00      	cmp	r3, #0
   10938:	d011      	beq.n	1095e <system_gclk_chan_get_config_defaults+0x36>
   1093a:	687b      	ldr	r3, [r7, #4]
   1093c:	2b00      	cmp	r3, #0
   1093e:	d119      	bne.n	10974 <system_gclk_chan_get_config_defaults+0x4c>
   10940:	4b11      	ldr	r3, [pc, #68]	; (10988 <system_gclk_chan_get_config_defaults+0x60>)
   10942:	4798      	blx	r3
   10944:	1c01      	adds	r1, r0, #0
   10946:	4a11      	ldr	r2, [pc, #68]	; (1098c <system_gclk_chan_get_config_defaults+0x64>)
   10948:	2314      	movs	r3, #20
   1094a:	33ff      	adds	r3, #255	; 0xff
   1094c:	4810      	ldr	r0, [pc, #64]	; (10990 <system_gclk_chan_get_config_defaults+0x68>)
   1094e:	9000      	str	r0, [sp, #0]
   10950:	4810      	ldr	r0, [pc, #64]	; (10994 <system_gclk_chan_get_config_defaults+0x6c>)
   10952:	9001      	str	r0, [sp, #4]
   10954:	1c08      	adds	r0, r1, #0
   10956:	2101      	movs	r1, #1
   10958:	4c0f      	ldr	r4, [pc, #60]	; (10998 <system_gclk_chan_get_config_defaults+0x70>)
   1095a:	47a0      	blx	r4
   1095c:	e00a      	b.n	10974 <system_gclk_chan_get_config_defaults+0x4c>
   1095e:	687b      	ldr	r3, [r7, #4]
   10960:	2b00      	cmp	r3, #0
   10962:	d107      	bne.n	10974 <system_gclk_chan_get_config_defaults+0x4c>
   10964:	480d      	ldr	r0, [pc, #52]	; (1099c <system_gclk_chan_get_config_defaults+0x74>)
   10966:	490b      	ldr	r1, [pc, #44]	; (10994 <system_gclk_chan_get_config_defaults+0x6c>)
   10968:	4a08      	ldr	r2, [pc, #32]	; (1098c <system_gclk_chan_get_config_defaults+0x64>)
   1096a:	2314      	movs	r3, #20
   1096c:	33ff      	adds	r3, #255	; 0xff
   1096e:	4c0c      	ldr	r4, [pc, #48]	; (109a0 <system_gclk_chan_get_config_defaults+0x78>)
   10970:	47a0      	blx	r4
   10972:	e7fe      	b.n	10972 <system_gclk_chan_get_config_defaults+0x4a>

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   10974:	687b      	ldr	r3, [r7, #4]
   10976:	2200      	movs	r2, #0
   10978:	701a      	strb	r2, [r3, #0]
	config->write_lock       = false;
   1097a:	687b      	ldr	r3, [r7, #4]
   1097c:	2200      	movs	r2, #0
   1097e:	705a      	strb	r2, [r3, #1]
}
   10980:	46bd      	mov	sp, r7
   10982:	b003      	add	sp, #12
   10984:	bd90      	pop	{r4, r7, pc}
   10986:	46c0      	nop			; (mov r8, r8)
   10988:	00010915 	.word	0x00010915
   1098c:	00025bd4 	.word	0x00025bd4
   10990:	00025c00 	.word	0x00025c00
   10994:	00025c18 	.word	0x00025c18
   10998:	000106e9 	.word	0x000106e9
   1099c:	00025c20 	.word	0x00025c20
   109a0:	0001b62d 	.word	0x0001b62d

000109a4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   109a4:	b590      	push	{r4, r7, lr}
   109a6:	b085      	sub	sp, #20
   109a8:	af02      	add	r7, sp, #8
   109aa:	1c02      	adds	r2, r0, #0
   109ac:	6039      	str	r1, [r7, #0]
   109ae:	1dfb      	adds	r3, r7, #7
   109b0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   109b2:	1dfb      	adds	r3, r7, #7
   109b4:	781b      	ldrb	r3, [r3, #0]
   109b6:	2b01      	cmp	r3, #1
   109b8:	d00a      	beq.n	109d0 <system_apb_clock_set_mask+0x2c>
   109ba:	2b02      	cmp	r3, #2
   109bc:	d00f      	beq.n	109de <system_apb_clock_set_mask+0x3a>
   109be:	2b00      	cmp	r3, #0
   109c0:	d114      	bne.n	109ec <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   109c2:	4b1a      	ldr	r3, [pc, #104]	; (10a2c <system_apb_clock_set_mask+0x88>)
   109c4:	4a19      	ldr	r2, [pc, #100]	; (10a2c <system_apb_clock_set_mask+0x88>)
   109c6:	6991      	ldr	r1, [r2, #24]
   109c8:	683a      	ldr	r2, [r7, #0]
   109ca:	430a      	orrs	r2, r1
   109cc:	619a      	str	r2, [r3, #24]
			break;
   109ce:	e028      	b.n	10a22 <system_apb_clock_set_mask+0x7e>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   109d0:	4b16      	ldr	r3, [pc, #88]	; (10a2c <system_apb_clock_set_mask+0x88>)
   109d2:	4a16      	ldr	r2, [pc, #88]	; (10a2c <system_apb_clock_set_mask+0x88>)
   109d4:	69d1      	ldr	r1, [r2, #28]
   109d6:	683a      	ldr	r2, [r7, #0]
   109d8:	430a      	orrs	r2, r1
   109da:	61da      	str	r2, [r3, #28]
			break;
   109dc:	e021      	b.n	10a22 <system_apb_clock_set_mask+0x7e>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   109de:	4b13      	ldr	r3, [pc, #76]	; (10a2c <system_apb_clock_set_mask+0x88>)
   109e0:	4a12      	ldr	r2, [pc, #72]	; (10a2c <system_apb_clock_set_mask+0x88>)
   109e2:	6a11      	ldr	r1, [r2, #32]
   109e4:	683a      	ldr	r2, [r7, #0]
   109e6:	430a      	orrs	r2, r1
   109e8:	621a      	str	r2, [r3, #32]
			break;
   109ea:	e01a      	b.n	10a22 <system_apb_clock_set_mask+0x7e>

		default:
			Assert(false);
   109ec:	4b10      	ldr	r3, [pc, #64]	; (10a30 <system_apb_clock_set_mask+0x8c>)
   109ee:	4798      	blx	r3
   109f0:	1c03      	adds	r3, r0, #0
   109f2:	2b00      	cmp	r3, #0
   109f4:	d00e      	beq.n	10a14 <system_apb_clock_set_mask+0x70>
   109f6:	4b0e      	ldr	r3, [pc, #56]	; (10a30 <system_apb_clock_set_mask+0x8c>)
   109f8:	4798      	blx	r3
   109fa:	1c01      	adds	r1, r0, #0
   109fc:	4a0d      	ldr	r2, [pc, #52]	; (10a34 <system_apb_clock_set_mask+0x90>)
   109fe:	4b0e      	ldr	r3, [pc, #56]	; (10a38 <system_apb_clock_set_mask+0x94>)
   10a00:	480e      	ldr	r0, [pc, #56]	; (10a3c <system_apb_clock_set_mask+0x98>)
   10a02:	9000      	str	r0, [sp, #0]
   10a04:	480e      	ldr	r0, [pc, #56]	; (10a40 <system_apb_clock_set_mask+0x9c>)
   10a06:	9001      	str	r0, [sp, #4]
   10a08:	1c08      	adds	r0, r1, #0
   10a0a:	2101      	movs	r1, #1
   10a0c:	4c0d      	ldr	r4, [pc, #52]	; (10a44 <system_apb_clock_set_mask+0xa0>)
   10a0e:	47a0      	blx	r4
			return STATUS_ERR_INVALID_ARG;
   10a10:	2317      	movs	r3, #23
   10a12:	e007      	b.n	10a24 <system_apb_clock_set_mask+0x80>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
			break;

		default:
			Assert(false);
   10a14:	480c      	ldr	r0, [pc, #48]	; (10a48 <system_apb_clock_set_mask+0xa4>)
   10a16:	490a      	ldr	r1, [pc, #40]	; (10a40 <system_apb_clock_set_mask+0x9c>)
   10a18:	4a06      	ldr	r2, [pc, #24]	; (10a34 <system_apb_clock_set_mask+0x90>)
   10a1a:	4b07      	ldr	r3, [pc, #28]	; (10a38 <system_apb_clock_set_mask+0x94>)
   10a1c:	4c0b      	ldr	r4, [pc, #44]	; (10a4c <system_apb_clock_set_mask+0xa8>)
   10a1e:	47a0      	blx	r4
   10a20:	e7fe      	b.n	10a20 <system_apb_clock_set_mask+0x7c>
			return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
   10a22:	2300      	movs	r3, #0
}
   10a24:	1c18      	adds	r0, r3, #0
   10a26:	46bd      	mov	sp, r7
   10a28:	b003      	add	sp, #12
   10a2a:	bd90      	pop	{r4, r7, pc}
   10a2c:	40000400 	.word	0x40000400
   10a30:	00010915 	.word	0x00010915
   10a34:	00025c44 	.word	0x00025c44
   10a38:	00000409 	.word	0x00000409
   10a3c:	00025c00 	.word	0x00025c00
   10a40:	00025c74 	.word	0x00025c74
   10a44:	000106e9 	.word	0x000106e9
   10a48:	00025c20 	.word	0x00025c20
   10a4c:	0001b62d 	.word	0x0001b62d

00010a50 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   10a50:	b590      	push	{r4, r7, lr}
   10a52:	b085      	sub	sp, #20
   10a54:	af02      	add	r7, sp, #8
   10a56:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
   10a58:	4b16      	ldr	r3, [pc, #88]	; (10ab4 <system_pinmux_get_config_defaults+0x64>)
   10a5a:	4798      	blx	r3
   10a5c:	1c03      	adds	r3, r0, #0
   10a5e:	2b00      	cmp	r3, #0
   10a60:	d011      	beq.n	10a86 <system_pinmux_get_config_defaults+0x36>
   10a62:	687b      	ldr	r3, [r7, #4]
   10a64:	2b00      	cmp	r3, #0
   10a66:	d119      	bne.n	10a9c <system_pinmux_get_config_defaults+0x4c>
   10a68:	4b12      	ldr	r3, [pc, #72]	; (10ab4 <system_pinmux_get_config_defaults+0x64>)
   10a6a:	4798      	blx	r3
   10a6c:	1c01      	adds	r1, r0, #0
   10a6e:	4a12      	ldr	r2, [pc, #72]	; (10ab8 <system_pinmux_get_config_defaults+0x68>)
   10a70:	239d      	movs	r3, #157	; 0x9d
   10a72:	005b      	lsls	r3, r3, #1
   10a74:	4811      	ldr	r0, [pc, #68]	; (10abc <system_pinmux_get_config_defaults+0x6c>)
   10a76:	9000      	str	r0, [sp, #0]
   10a78:	4811      	ldr	r0, [pc, #68]	; (10ac0 <system_pinmux_get_config_defaults+0x70>)
   10a7a:	9001      	str	r0, [sp, #4]
   10a7c:	1c08      	adds	r0, r1, #0
   10a7e:	2101      	movs	r1, #1
   10a80:	4c10      	ldr	r4, [pc, #64]	; (10ac4 <system_pinmux_get_config_defaults+0x74>)
   10a82:	47a0      	blx	r4
   10a84:	e00a      	b.n	10a9c <system_pinmux_get_config_defaults+0x4c>
   10a86:	687b      	ldr	r3, [r7, #4]
   10a88:	2b00      	cmp	r3, #0
   10a8a:	d107      	bne.n	10a9c <system_pinmux_get_config_defaults+0x4c>
   10a8c:	480e      	ldr	r0, [pc, #56]	; (10ac8 <system_pinmux_get_config_defaults+0x78>)
   10a8e:	490c      	ldr	r1, [pc, #48]	; (10ac0 <system_pinmux_get_config_defaults+0x70>)
   10a90:	4a09      	ldr	r2, [pc, #36]	; (10ab8 <system_pinmux_get_config_defaults+0x68>)
   10a92:	239d      	movs	r3, #157	; 0x9d
   10a94:	005b      	lsls	r3, r3, #1
   10a96:	4c0d      	ldr	r4, [pc, #52]	; (10acc <system_pinmux_get_config_defaults+0x7c>)
   10a98:	47a0      	blx	r4
   10a9a:	e7fe      	b.n	10a9a <system_pinmux_get_config_defaults+0x4a>

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   10a9c:	687b      	ldr	r3, [r7, #4]
   10a9e:	2280      	movs	r2, #128	; 0x80
   10aa0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   10aa2:	687b      	ldr	r3, [r7, #4]
   10aa4:	2200      	movs	r2, #0
   10aa6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   10aa8:	687b      	ldr	r3, [r7, #4]
   10aaa:	2201      	movs	r2, #1
   10aac:	709a      	strb	r2, [r3, #2]
}
   10aae:	46bd      	mov	sp, r7
   10ab0:	b003      	add	sp, #12
   10ab2:	bd90      	pop	{r4, r7, pc}
   10ab4:	00010915 	.word	0x00010915
   10ab8:	00025c7c 	.word	0x00025c7c
   10abc:	00025c00 	.word	0x00025c00
   10ac0:	00025c18 	.word	0x00025c18
   10ac4:	000106e9 	.word	0x000106e9
   10ac8:	00025c20 	.word	0x00025c20
   10acc:	0001b62d 	.word	0x0001b62d

00010ad0 <adc_is_syncing>:
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   10ad0:	b590      	push	{r4, r7, lr}
   10ad2:	b087      	sub	sp, #28
   10ad4:	af02      	add	r7, sp, #8
   10ad6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
   10ad8:	4b19      	ldr	r3, [pc, #100]	; (10b40 <adc_is_syncing+0x70>)
   10ada:	4798      	blx	r3
   10adc:	1c03      	adds	r3, r0, #0
   10ade:	2b00      	cmp	r3, #0
   10ae0:	d010      	beq.n	10b04 <adc_is_syncing+0x34>
   10ae2:	687b      	ldr	r3, [r7, #4]
   10ae4:	2b00      	cmp	r3, #0
   10ae6:	d117      	bne.n	10b18 <adc_is_syncing+0x48>
   10ae8:	4b15      	ldr	r3, [pc, #84]	; (10b40 <adc_is_syncing+0x70>)
   10aea:	4798      	blx	r3
   10aec:	1c01      	adds	r1, r0, #0
   10aee:	4a15      	ldr	r2, [pc, #84]	; (10b44 <adc_is_syncing+0x74>)
   10af0:	4b15      	ldr	r3, [pc, #84]	; (10b48 <adc_is_syncing+0x78>)
   10af2:	4816      	ldr	r0, [pc, #88]	; (10b4c <adc_is_syncing+0x7c>)
   10af4:	9000      	str	r0, [sp, #0]
   10af6:	4816      	ldr	r0, [pc, #88]	; (10b50 <adc_is_syncing+0x80>)
   10af8:	9001      	str	r0, [sp, #4]
   10afa:	1c08      	adds	r0, r1, #0
   10afc:	2101      	movs	r1, #1
   10afe:	4c15      	ldr	r4, [pc, #84]	; (10b54 <adc_is_syncing+0x84>)
   10b00:	47a0      	blx	r4
   10b02:	e009      	b.n	10b18 <adc_is_syncing+0x48>
   10b04:	687b      	ldr	r3, [r7, #4]
   10b06:	2b00      	cmp	r3, #0
   10b08:	d106      	bne.n	10b18 <adc_is_syncing+0x48>
   10b0a:	4813      	ldr	r0, [pc, #76]	; (10b58 <adc_is_syncing+0x88>)
   10b0c:	4910      	ldr	r1, [pc, #64]	; (10b50 <adc_is_syncing+0x80>)
   10b0e:	4a0d      	ldr	r2, [pc, #52]	; (10b44 <adc_is_syncing+0x74>)
   10b10:	4b0d      	ldr	r3, [pc, #52]	; (10b48 <adc_is_syncing+0x78>)
   10b12:	4c12      	ldr	r4, [pc, #72]	; (10b5c <adc_is_syncing+0x8c>)
   10b14:	47a0      	blx	r4
   10b16:	e7fe      	b.n	10b16 <adc_is_syncing+0x46>

	Adc *const adc_module = module_inst->hw;
   10b18:	687b      	ldr	r3, [r7, #4]
   10b1a:	681b      	ldr	r3, [r3, #0]
   10b1c:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   10b1e:	68fb      	ldr	r3, [r7, #12]
   10b20:	699b      	ldr	r3, [r3, #24]
   10b22:	041b      	lsls	r3, r3, #16
   10b24:	0e1b      	lsrs	r3, r3, #24
   10b26:	b2db      	uxtb	r3, r3
   10b28:	b2db      	uxtb	r3, r3
   10b2a:	b25b      	sxtb	r3, r3
   10b2c:	2b00      	cmp	r3, #0
   10b2e:	da01      	bge.n	10b34 <adc_is_syncing+0x64>
		return true;
   10b30:	2301      	movs	r3, #1
   10b32:	e000      	b.n	10b36 <adc_is_syncing+0x66>
	}

	return false;
   10b34:	2300      	movs	r3, #0
}
   10b36:	1c18      	adds	r0, r3, #0
   10b38:	46bd      	mov	sp, r7
   10b3a:	b005      	add	sp, #20
   10b3c:	bd90      	pop	{r4, r7, pc}
   10b3e:	46c0      	nop			; (mov r8, r8)
   10b40:	00010915 	.word	0x00010915
   10b44:	00025cac 	.word	0x00025cac
   10b48:	0000048d 	.word	0x0000048d
   10b4c:	00025c00 	.word	0x00025c00
   10b50:	00025cd0 	.word	0x00025cd0
   10b54:	000106e9 	.word	0x000106e9
   10b58:	00025c20 	.word	0x00025c20
   10b5c:	0001b62d 	.word	0x0001b62d

00010b60 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
   10b60:	b580      	push	{r7, lr}
   10b62:	b098      	sub	sp, #96	; 0x60
   10b64:	af00      	add	r7, sp, #0
   10b66:	6078      	str	r0, [r7, #4]
	struct system_pinmux_config config;
	system_pinmux_get_config_defaults(&config);
   10b68:	1c3b      	adds	r3, r7, #0
   10b6a:	335c      	adds	r3, #92	; 0x5c
   10b6c:	1c18      	adds	r0, r3, #0
   10b6e:	4b13      	ldr	r3, [pc, #76]	; (10bbc <_adc_configure_ain_pin+0x5c>)
   10b70:	4798      	blx	r3

	config.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   10b72:	1c3b      	adds	r3, r7, #0
   10b74:	335c      	adds	r3, #92	; 0x5c
   10b76:	2200      	movs	r2, #0
   10b78:	709a      	strb	r2, [r3, #2]

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[ADC_INPUTCTRL_MUXPOS_PIN20] = {
   10b7a:	1c3a      	adds	r2, r7, #0
   10b7c:	320c      	adds	r2, #12
   10b7e:	4b10      	ldr	r3, [pc, #64]	; (10bc0 <_adc_configure_ain_pin+0x60>)
   10b80:	1c11      	adds	r1, r2, #0
   10b82:	1c1a      	adds	r2, r3, #0
   10b84:	2350      	movs	r3, #80	; 0x50
   10b86:	1c08      	adds	r0, r1, #0
   10b88:	1c11      	adds	r1, r2, #0
   10b8a:	1c1a      	adds	r2, r3, #0
   10b8c:	4b0d      	ldr	r3, [pc, #52]	; (10bc4 <_adc_configure_ain_pin+0x64>)
   10b8e:	4798      	blx	r3
			PIN_PA08B_ADC_AIN16, PIN_PA09B_ADC_AIN17,
			PIN_PA10B_ADC_AIN18, PIN_PA11B_ADC_AIN19,
		};

	/* Analog functions are at mux setting B */
	config.mux_position = 1;
   10b90:	1c3b      	adds	r3, r7, #0
   10b92:	335c      	adds	r3, #92	; 0x5c
   10b94:	2201      	movs	r2, #1
   10b96:	701a      	strb	r2, [r3, #0]

	if (pin <= ADC_INPUTCTRL_MUXPOS_PIN20) {
   10b98:	687b      	ldr	r3, [r7, #4]
   10b9a:	2b14      	cmp	r3, #20
   10b9c:	d80b      	bhi.n	10bb6 <_adc_configure_ain_pin+0x56>
		system_pinmux_pin_set_config(pinmapping[pin], &config);
   10b9e:	1c3b      	adds	r3, r7, #0
   10ba0:	330c      	adds	r3, #12
   10ba2:	687a      	ldr	r2, [r7, #4]
   10ba4:	0092      	lsls	r2, r2, #2
   10ba6:	58d3      	ldr	r3, [r2, r3]
   10ba8:	b2da      	uxtb	r2, r3
   10baa:	1c3b      	adds	r3, r7, #0
   10bac:	335c      	adds	r3, #92	; 0x5c
   10bae:	1c10      	adds	r0, r2, #0
   10bb0:	1c19      	adds	r1, r3, #0
   10bb2:	4b05      	ldr	r3, [pc, #20]	; (10bc8 <_adc_configure_ain_pin+0x68>)
   10bb4:	4798      	blx	r3
	}
}
   10bb6:	46bd      	mov	sp, r7
   10bb8:	b018      	add	sp, #96	; 0x60
   10bba:	bd80      	pop	{r7, pc}
   10bbc:	00010a51 	.word	0x00010a51
   10bc0:	00025cdc 	.word	0x00025cdc
   10bc4:	0001b375 	.word	0x0001b375
   10bc8:	00017d71 	.word	0x00017d71

00010bcc <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
   10bcc:	b5b0      	push	{r4, r5, r7, lr}
   10bce:	b088      	sub	sp, #32
   10bd0:	af00      	add	r7, sp, #0
   10bd2:	6078      	str	r0, [r7, #4]
   10bd4:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
   10bd6:	1c3b      	adds	r3, r7, #0
   10bd8:	331f      	adds	r3, #31
   10bda:	2200      	movs	r2, #0
   10bdc:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
   10bde:	2310      	movs	r3, #16
   10be0:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
   10be2:	1c3b      	adds	r3, r7, #0
   10be4:	3317      	adds	r3, #23
   10be6:	2200      	movs	r2, #0
   10be8:	701a      	strb	r2, [r3, #0]

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
   10bea:	687b      	ldr	r3, [r7, #4]
   10bec:	681b      	ldr	r3, [r3, #0]
   10bee:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   10bf0:	1c3b      	adds	r3, r7, #0
   10bf2:	330c      	adds	r3, #12
   10bf4:	1c18      	adds	r0, r3, #0
   10bf6:	4bc4      	ldr	r3, [pc, #784]	; (10f08 <_adc_set_config+0x33c>)
   10bf8:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
   10bfa:	683b      	ldr	r3, [r7, #0]
   10bfc:	781a      	ldrb	r2, [r3, #0]
   10bfe:	1c3b      	adds	r3, r7, #0
   10c00:	330c      	adds	r3, #12
   10c02:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
   10c04:	1c3b      	adds	r3, r7, #0
   10c06:	330c      	adds	r3, #12
   10c08:	2017      	movs	r0, #23
   10c0a:	1c19      	adds	r1, r3, #0
   10c0c:	4bbf      	ldr	r3, [pc, #764]	; (10f0c <_adc_set_config+0x340>)
   10c0e:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
   10c10:	2017      	movs	r0, #23
   10c12:	4bbf      	ldr	r3, [pc, #764]	; (10f10 <_adc_set_config+0x344>)
   10c14:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
   10c16:	683a      	ldr	r2, [r7, #0]
   10c18:	232c      	movs	r3, #44	; 0x2c
   10c1a:	5cd3      	ldrb	r3, [r2, r3]
   10c1c:	2b00      	cmp	r3, #0
   10c1e:	d02e      	beq.n	10c7e <_adc_set_config+0xb2>
		uint8_t start_pin = config->pin_scan.offset_start_scan +
   10c20:	683a      	ldr	r2, [r7, #0]
   10c22:	232b      	movs	r3, #43	; 0x2b
   10c24:	5cd1      	ldrb	r1, [r2, r3]
				(uint8_t)config->positive_input;
   10c26:	683b      	ldr	r3, [r7, #0]
   10c28:	7b1a      	ldrb	r2, [r3, #12]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t start_pin = config->pin_scan.offset_start_scan +
   10c2a:	1c3b      	adds	r3, r7, #0
   10c2c:	3316      	adds	r3, #22
   10c2e:	188a      	adds	r2, r1, r2
   10c30:	701a      	strb	r2, [r3, #0]
				(uint8_t)config->positive_input;
		uint8_t end_pin = start_pin + config->pin_scan.inputs_to_scan;
   10c32:	683a      	ldr	r2, [r7, #0]
   10c34:	232c      	movs	r3, #44	; 0x2c
   10c36:	5cd1      	ldrb	r1, [r2, r3]
   10c38:	1c3b      	adds	r3, r7, #0
   10c3a:	330f      	adds	r3, #15
   10c3c:	1c3a      	adds	r2, r7, #0
   10c3e:	3216      	adds	r2, #22
   10c40:	7812      	ldrb	r2, [r2, #0]
   10c42:	188a      	adds	r2, r1, r2
   10c44:	701a      	strb	r2, [r3, #0]
		for (; start_pin < end_pin; start_pin++) {
   10c46:	e00c      	b.n	10c62 <_adc_set_config+0x96>
			_adc_configure_ain_pin(start_pin);
   10c48:	1c3b      	adds	r3, r7, #0
   10c4a:	3316      	adds	r3, #22
   10c4c:	781b      	ldrb	r3, [r3, #0]
   10c4e:	1c18      	adds	r0, r3, #0
   10c50:	4bb0      	ldr	r3, [pc, #704]	; (10f14 <_adc_set_config+0x348>)
   10c52:	4798      	blx	r3
	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t start_pin = config->pin_scan.offset_start_scan +
				(uint8_t)config->positive_input;
		uint8_t end_pin = start_pin + config->pin_scan.inputs_to_scan;
		for (; start_pin < end_pin; start_pin++) {
   10c54:	1c3b      	adds	r3, r7, #0
   10c56:	3316      	adds	r3, #22
   10c58:	781a      	ldrb	r2, [r3, #0]
   10c5a:	1c3b      	adds	r3, r7, #0
   10c5c:	3316      	adds	r3, #22
   10c5e:	3201      	adds	r2, #1
   10c60:	701a      	strb	r2, [r3, #0]
   10c62:	1c3a      	adds	r2, r7, #0
   10c64:	3216      	adds	r2, #22
   10c66:	1c3b      	adds	r3, r7, #0
   10c68:	330f      	adds	r3, #15
   10c6a:	7812      	ldrb	r2, [r2, #0]
   10c6c:	781b      	ldrb	r3, [r3, #0]
   10c6e:	429a      	cmp	r2, r3
   10c70:	d3ea      	bcc.n	10c48 <_adc_set_config+0x7c>
			_adc_configure_ain_pin(start_pin);
		}
		_adc_configure_ain_pin(config->negative_input);
   10c72:	683b      	ldr	r3, [r7, #0]
   10c74:	89db      	ldrh	r3, [r3, #14]
   10c76:	1c18      	adds	r0, r3, #0
   10c78:	4ba6      	ldr	r3, [pc, #664]	; (10f14 <_adc_set_config+0x348>)
   10c7a:	4798      	blx	r3
   10c7c:	e009      	b.n	10c92 <_adc_set_config+0xc6>
	} else {
		_adc_configure_ain_pin(config->positive_input);
   10c7e:	683b      	ldr	r3, [r7, #0]
   10c80:	7b1b      	ldrb	r3, [r3, #12]
   10c82:	1c18      	adds	r0, r3, #0
   10c84:	4ba3      	ldr	r3, [pc, #652]	; (10f14 <_adc_set_config+0x348>)
   10c86:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
   10c88:	683b      	ldr	r3, [r7, #0]
   10c8a:	89db      	ldrh	r3, [r3, #14]
   10c8c:	1c18      	adds	r0, r3, #0
   10c8e:	4ba1      	ldr	r3, [pc, #644]	; (10f14 <_adc_set_config+0x348>)
   10c90:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
   10c92:	683b      	ldr	r3, [r7, #0]
   10c94:	7d5b      	ldrb	r3, [r3, #21]
   10c96:	009b      	lsls	r3, r3, #2
   10c98:	b2da      	uxtb	r2, r3
   10c9a:	693b      	ldr	r3, [r7, #16]
   10c9c:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   10c9e:	683b      	ldr	r3, [r7, #0]
   10ca0:	7d9b      	ldrb	r3, [r3, #22]
   10ca2:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
   10ca4:	b2da      	uxtb	r2, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);
   10ca6:	683b      	ldr	r3, [r7, #0]
   10ca8:	785b      	ldrb	r3, [r3, #1]

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
   10caa:	b2db      	uxtb	r3, r3
   10cac:	4313      	orrs	r3, r2
   10cae:	b2db      	uxtb	r3, r3
   10cb0:	b2da      	uxtb	r2, r3
   10cb2:	693b      	ldr	r3, [r7, #16]
   10cb4:	705a      	strb	r2, [r3, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
   10cb6:	683b      	ldr	r3, [r7, #0]
   10cb8:	791b      	ldrb	r3, [r3, #4]
   10cba:	2b34      	cmp	r3, #52	; 0x34
   10cbc:	d844      	bhi.n	10d48 <_adc_set_config+0x17c>
   10cbe:	009a      	lsls	r2, r3, #2
   10cc0:	4b95      	ldr	r3, [pc, #596]	; (10f18 <_adc_set_config+0x34c>)
   10cc2:	18d3      	adds	r3, r2, r3
   10cc4:	681b      	ldr	r3, [r3, #0]
   10cc6:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
   10cc8:	1c3b      	adds	r3, r7, #0
   10cca:	331f      	adds	r3, #31
   10ccc:	683a      	ldr	r2, [r7, #0]
   10cce:	7c52      	ldrb	r2, [r2, #17]
   10cd0:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
   10cd2:	1c3b      	adds	r3, r7, #0
   10cd4:	3317      	adds	r3, #23
   10cd6:	683a      	ldr	r2, [r7, #0]
   10cd8:	7c12      	ldrb	r2, [r2, #16]
   10cda:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   10cdc:	2310      	movs	r3, #16
   10cde:	61bb      	str	r3, [r7, #24]
		break;
   10ce0:	e034      	b.n	10d4c <_adc_set_config+0x180>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
   10ce2:	1c3b      	adds	r3, r7, #0
   10ce4:	331f      	adds	r3, #31
   10ce6:	2201      	movs	r2, #1
   10ce8:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
   10cea:	1c3b      	adds	r3, r7, #0
   10cec:	3317      	adds	r3, #23
   10cee:	2202      	movs	r2, #2
   10cf0:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   10cf2:	2310      	movs	r3, #16
   10cf4:	61bb      	str	r3, [r7, #24]
		break;
   10cf6:	e029      	b.n	10d4c <_adc_set_config+0x180>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
   10cf8:	1c3b      	adds	r3, r7, #0
   10cfa:	331f      	adds	r3, #31
   10cfc:	2202      	movs	r2, #2
   10cfe:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
   10d00:	1c3b      	adds	r3, r7, #0
   10d02:	3317      	adds	r3, #23
   10d04:	2204      	movs	r2, #4
   10d06:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   10d08:	2310      	movs	r3, #16
   10d0a:	61bb      	str	r3, [r7, #24]
		break;
   10d0c:	e01e      	b.n	10d4c <_adc_set_config+0x180>

	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_8;
   10d0e:	1c3b      	adds	r3, r7, #0
   10d10:	331f      	adds	r3, #31
   10d12:	2203      	movs	r2, #3
   10d14:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
   10d16:	1c3b      	adds	r3, r7, #0
   10d18:	3317      	adds	r3, #23
   10d1a:	2206      	movs	r2, #6
   10d1c:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   10d1e:	2310      	movs	r3, #16
   10d20:	61bb      	str	r3, [r7, #24]
		break;
   10d22:	e013      	b.n	10d4c <_adc_set_config+0x180>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_16;
   10d24:	1c3b      	adds	r3, r7, #0
   10d26:	331f      	adds	r3, #31
   10d28:	2204      	movs	r2, #4
   10d2a:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
   10d2c:	1c3b      	adds	r3, r7, #0
   10d2e:	3317      	adds	r3, #23
   10d30:	2208      	movs	r2, #8
   10d32:	701a      	strb	r2, [r3, #0]
		break;
   10d34:	e00a      	b.n	10d4c <_adc_set_config+0x180>

	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
   10d36:	2330      	movs	r3, #48	; 0x30
   10d38:	61bb      	str	r3, [r7, #24]
		break;
   10d3a:	e007      	b.n	10d4c <_adc_set_config+0x180>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
   10d3c:	2320      	movs	r3, #32
   10d3e:	61bb      	str	r3, [r7, #24]
		break;
   10d40:	e004      	b.n	10d4c <_adc_set_config+0x180>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
   10d42:	2300      	movs	r3, #0
   10d44:	61bb      	str	r3, [r7, #24]
		break;
   10d46:	e001      	b.n	10d4c <_adc_set_config+0x180>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
   10d48:	2317      	movs	r3, #23
   10d4a:	e1ad      	b.n	110a8 <_adc_set_config+0x4dc>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
   10d4c:	1c3b      	adds	r3, r7, #0
   10d4e:	331f      	adds	r3, #31
   10d50:	781b      	ldrb	r3, [r3, #0]
   10d52:	011b      	lsls	r3, r3, #4
   10d54:	b2da      	uxtb	r2, r3
   10d56:	2370      	movs	r3, #112	; 0x70
   10d58:	4013      	ands	r3, r2
   10d5a:	b2da      	uxtb	r2, r3
   10d5c:	1c3b      	adds	r3, r7, #0
   10d5e:	3317      	adds	r3, #23
   10d60:	781b      	ldrb	r3, [r3, #0]
   10d62:	4313      	orrs	r3, r2
   10d64:	b2da      	uxtb	r2, r3
   10d66:	693b      	ldr	r3, [r7, #16]
   10d68:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
   10d6a:	683b      	ldr	r3, [r7, #0]
   10d6c:	7ddb      	ldrb	r3, [r3, #23]
   10d6e:	2b3f      	cmp	r3, #63	; 0x3f
   10d70:	d901      	bls.n	10d76 <_adc_set_config+0x1aa>
		return STATUS_ERR_INVALID_ARG;
   10d72:	2317      	movs	r3, #23
   10d74:	e198      	b.n	110a8 <_adc_set_config+0x4dc>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
   10d76:	683b      	ldr	r3, [r7, #0]
   10d78:	7dda      	ldrb	r2, [r3, #23]
	/* Check validity of sample length value */
	if (config->sample_length > 63) {
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
   10d7a:	693b      	ldr	r3, [r7, #16]
   10d7c:	70da      	strb	r2, [r3, #3]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
   10d7e:	46c0      	nop			; (mov r8, r8)
   10d80:	687b      	ldr	r3, [r7, #4]
   10d82:	1c18      	adds	r0, r3, #0
   10d84:	4b65      	ldr	r3, [pc, #404]	; (10f1c <_adc_set_config+0x350>)
   10d86:	4798      	blx	r3
   10d88:	1c03      	adds	r3, r0, #0
   10d8a:	2b00      	cmp	r3, #0
   10d8c:	d1f8      	bne.n	10d80 <_adc_set_config+0x1b4>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
   10d8e:	683b      	ldr	r3, [r7, #0]
   10d90:	885a      	ldrh	r2, [r3, #2]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
   10d92:	69bb      	ldr	r3, [r7, #24]
   10d94:	b29b      	uxth	r3, r3
   10d96:	4313      	orrs	r3, r2
   10d98:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   10d9a:	6839      	ldr	r1, [r7, #0]
   10d9c:	2324      	movs	r3, #36	; 0x24
   10d9e:	5ccb      	ldrb	r3, [r1, r3]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
   10da0:	00db      	lsls	r3, r3, #3
   10da2:	b29b      	uxth	r3, r3
   10da4:	4313      	orrs	r3, r2
   10da6:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   10da8:	683b      	ldr	r3, [r7, #0]
   10daa:	7d1b      	ldrb	r3, [r3, #20]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
   10dac:	009b      	lsls	r3, r3, #2
   10dae:	b29b      	uxth	r3, r3
   10db0:	4313      	orrs	r3, r2
   10db2:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   10db4:	683b      	ldr	r3, [r7, #0]
   10db6:	7c9b      	ldrb	r3, [r3, #18]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
   10db8:	18db      	adds	r3, r3, r3
   10dba:	b29b      	uxth	r3, r3
   10dbc:	4313      	orrs	r3, r2
   10dbe:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
   10dc0:	683b      	ldr	r3, [r7, #0]
   10dc2:	7cdb      	ldrb	r3, [r3, #19]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
   10dc4:	4313      	orrs	r3, r2
   10dc6:	b29a      	uxth	r2, r3
   10dc8:	693b      	ldr	r3, [r7, #16]
   10dca:	809a      	strh	r2, [r3, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
   10dcc:	683b      	ldr	r3, [r7, #0]
   10dce:	7e1b      	ldrb	r3, [r3, #24]
   10dd0:	2b00      	cmp	r3, #0
   10dd2:	d100      	bne.n	10dd6 <_adc_set_config+0x20a>
   10dd4:	e0c3      	b.n	10f5e <_adc_set_config+0x392>
		switch (resolution) {
   10dd6:	69bb      	ldr	r3, [r7, #24]
   10dd8:	2b10      	cmp	r3, #16
   10dda:	d100      	bne.n	10dde <_adc_set_config+0x212>
   10ddc:	e079      	b.n	10ed2 <_adc_set_config+0x306>
   10dde:	d802      	bhi.n	10de6 <_adc_set_config+0x21a>
   10de0:	2b00      	cmp	r3, #0
   10de2:	d04f      	beq.n	10e84 <_adc_set_config+0x2b8>
			}
			break;
		}
	}

	while (adc_is_syncing(module_inst)) {
   10de4:	e0bb      	b.n	10f5e <_adc_set_config+0x392>
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
   10de6:	2b20      	cmp	r3, #32
   10de8:	d025      	beq.n	10e36 <_adc_set_config+0x26a>
   10dea:	2b30      	cmp	r3, #48	; 0x30
   10dec:	d000      	beq.n	10df0 <_adc_set_config+0x224>
			}
			break;
		}
	}

	while (adc_is_syncing(module_inst)) {
   10dee:	e0b6      	b.n	10f5e <_adc_set_config+0x392>

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
   10df0:	683b      	ldr	r3, [r7, #0]
   10df2:	7cdb      	ldrb	r3, [r3, #19]
   10df4:	2b00      	cmp	r3, #0
   10df6:	d013      	beq.n	10e20 <_adc_set_config+0x254>
					(config->window.window_lower_value > 127 ||
   10df8:	683b      	ldr	r3, [r7, #0]
   10dfa:	69db      	ldr	r3, [r3, #28]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
   10dfc:	2b7f      	cmp	r3, #127	; 0x7f
   10dfe:	dc0d      	bgt.n	10e1c <_adc_set_config+0x250>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
   10e00:	683b      	ldr	r3, [r7, #0]
   10e02:	69db      	ldr	r3, [r3, #28]
	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
   10e04:	1c1a      	adds	r2, r3, #0
   10e06:	3280      	adds	r2, #128	; 0x80
   10e08:	db08      	blt.n	10e1c <_adc_set_config+0x250>
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
   10e0a:	683b      	ldr	r3, [r7, #0]
   10e0c:	6a1b      	ldr	r3, [r3, #32]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
   10e0e:	2b7f      	cmp	r3, #127	; 0x7f
   10e10:	dc04      	bgt.n	10e1c <_adc_set_config+0x250>
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
   10e12:	683b      	ldr	r3, [r7, #0]
   10e14:	6a1b      	ldr	r3, [r3, #32]
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
   10e16:	1c1a      	adds	r2, r3, #0
   10e18:	3280      	adds	r2, #128	; 0x80
   10e1a:	da01      	bge.n	10e20 <_adc_set_config+0x254>
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   10e1c:	2317      	movs	r3, #23
   10e1e:	e143      	b.n	110a8 <_adc_set_config+0x4dc>
			} else if (config->window.window_lower_value > 255 ||
   10e20:	683b      	ldr	r3, [r7, #0]
   10e22:	69db      	ldr	r3, [r3, #28]
   10e24:	2bff      	cmp	r3, #255	; 0xff
   10e26:	dc03      	bgt.n	10e30 <_adc_set_config+0x264>
					config->window.window_upper_value > 255){
   10e28:	683b      	ldr	r3, [r7, #0]
   10e2a:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
   10e2c:	2bff      	cmp	r3, #255	; 0xff
   10e2e:	dd01      	ble.n	10e34 <_adc_set_config+0x268>
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   10e30:	2317      	movs	r3, #23
   10e32:	e139      	b.n	110a8 <_adc_set_config+0x4dc>
			}
			break;
   10e34:	e093      	b.n	10f5e <_adc_set_config+0x392>
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
   10e36:	683b      	ldr	r3, [r7, #0]
   10e38:	7cdb      	ldrb	r3, [r3, #19]
   10e3a:	2b00      	cmp	r3, #0
   10e3c:	d015      	beq.n	10e6a <_adc_set_config+0x29e>
					(config->window.window_lower_value > 511 ||
   10e3e:	683b      	ldr	r3, [r7, #0]
   10e40:	69da      	ldr	r2, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
   10e42:	4b37      	ldr	r3, [pc, #220]	; (10f20 <_adc_set_config+0x354>)
   10e44:	429a      	cmp	r2, r3
   10e46:	dc0e      	bgt.n	10e66 <_adc_set_config+0x29a>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
   10e48:	683b      	ldr	r3, [r7, #0]
   10e4a:	69da      	ldr	r2, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
   10e4c:	4b35      	ldr	r3, [pc, #212]	; (10f24 <_adc_set_config+0x358>)
   10e4e:	429a      	cmp	r2, r3
   10e50:	db09      	blt.n	10e66 <_adc_set_config+0x29a>
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
   10e52:	683b      	ldr	r3, [r7, #0]
   10e54:	6a1a      	ldr	r2, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
   10e56:	4b32      	ldr	r3, [pc, #200]	; (10f20 <_adc_set_config+0x354>)
   10e58:	429a      	cmp	r2, r3
   10e5a:	dc04      	bgt.n	10e66 <_adc_set_config+0x29a>
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
   10e5c:	683b      	ldr	r3, [r7, #0]
   10e5e:	6a1a      	ldr	r2, [r3, #32]
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
   10e60:	4b31      	ldr	r3, [pc, #196]	; (10f28 <_adc_set_config+0x35c>)
   10e62:	429a      	cmp	r2, r3
   10e64:	db01      	blt.n	10e6a <_adc_set_config+0x29e>
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   10e66:	2317      	movs	r3, #23
   10e68:	e11e      	b.n	110a8 <_adc_set_config+0x4dc>
			} else if (config->window.window_lower_value > 1023 ||
   10e6a:	683b      	ldr	r3, [r7, #0]
   10e6c:	69da      	ldr	r2, [r3, #28]
   10e6e:	4b2f      	ldr	r3, [pc, #188]	; (10f2c <_adc_set_config+0x360>)
   10e70:	429a      	cmp	r2, r3
   10e72:	dc04      	bgt.n	10e7e <_adc_set_config+0x2b2>
					config->window.window_upper_value > 1023){
   10e74:	683b      	ldr	r3, [r7, #0]
   10e76:	6a1a      	ldr	r2, [r3, #32]
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
   10e78:	4b2c      	ldr	r3, [pc, #176]	; (10f2c <_adc_set_config+0x360>)
   10e7a:	429a      	cmp	r2, r3
   10e7c:	dd01      	ble.n	10e82 <_adc_set_config+0x2b6>
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   10e7e:	2317      	movs	r3, #23
   10e80:	e112      	b.n	110a8 <_adc_set_config+0x4dc>
			}
			break;
   10e82:	e06c      	b.n	10f5e <_adc_set_config+0x392>
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
   10e84:	683b      	ldr	r3, [r7, #0]
   10e86:	7cdb      	ldrb	r3, [r3, #19]
   10e88:	2b00      	cmp	r3, #0
   10e8a:	d015      	beq.n	10eb8 <_adc_set_config+0x2ec>
					(config->window.window_lower_value > 2047 ||
   10e8c:	683b      	ldr	r3, [r7, #0]
   10e8e:	69da      	ldr	r2, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
   10e90:	4b27      	ldr	r3, [pc, #156]	; (10f30 <_adc_set_config+0x364>)
   10e92:	429a      	cmp	r2, r3
   10e94:	dc0e      	bgt.n	10eb4 <_adc_set_config+0x2e8>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
   10e96:	683b      	ldr	r3, [r7, #0]
   10e98:	69da      	ldr	r2, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
   10e9a:	4b26      	ldr	r3, [pc, #152]	; (10f34 <_adc_set_config+0x368>)
   10e9c:	429a      	cmp	r2, r3
   10e9e:	db09      	blt.n	10eb4 <_adc_set_config+0x2e8>
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
   10ea0:	683b      	ldr	r3, [r7, #0]
   10ea2:	6a1a      	ldr	r2, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
   10ea4:	4b22      	ldr	r3, [pc, #136]	; (10f30 <_adc_set_config+0x364>)
   10ea6:	429a      	cmp	r2, r3
   10ea8:	dc04      	bgt.n	10eb4 <_adc_set_config+0x2e8>
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
   10eaa:	683b      	ldr	r3, [r7, #0]
   10eac:	6a1a      	ldr	r2, [r3, #32]
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
   10eae:	4b21      	ldr	r3, [pc, #132]	; (10f34 <_adc_set_config+0x368>)
   10eb0:	429a      	cmp	r2, r3
   10eb2:	da01      	bge.n	10eb8 <_adc_set_config+0x2ec>
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   10eb4:	2317      	movs	r3, #23
   10eb6:	e0f7      	b.n	110a8 <_adc_set_config+0x4dc>
			} else if (config->window.window_lower_value > 4095 ||
   10eb8:	683b      	ldr	r3, [r7, #0]
   10eba:	69da      	ldr	r2, [r3, #28]
   10ebc:	4b1e      	ldr	r3, [pc, #120]	; (10f38 <_adc_set_config+0x36c>)
   10ebe:	429a      	cmp	r2, r3
   10ec0:	dc04      	bgt.n	10ecc <_adc_set_config+0x300>
					config->window.window_upper_value > 4095){
   10ec2:	683b      	ldr	r3, [r7, #0]
   10ec4:	6a1a      	ldr	r2, [r3, #32]
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
   10ec6:	4b1c      	ldr	r3, [pc, #112]	; (10f38 <_adc_set_config+0x36c>)
   10ec8:	429a      	cmp	r2, r3
   10eca:	dd01      	ble.n	10ed0 <_adc_set_config+0x304>
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   10ecc:	2317      	movs	r3, #23
   10ece:	e0eb      	b.n	110a8 <_adc_set_config+0x4dc>
			}
			break;
   10ed0:	e045      	b.n	10f5e <_adc_set_config+0x392>
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
   10ed2:	683b      	ldr	r3, [r7, #0]
   10ed4:	7cdb      	ldrb	r3, [r3, #19]
   10ed6:	2b00      	cmp	r3, #0
   10ed8:	d034      	beq.n	10f44 <_adc_set_config+0x378>
					(config->window.window_lower_value > 32767 ||
   10eda:	683b      	ldr	r3, [r7, #0]
   10edc:	69da      	ldr	r2, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
   10ede:	4b17      	ldr	r3, [pc, #92]	; (10f3c <_adc_set_config+0x370>)
   10ee0:	429a      	cmp	r2, r3
   10ee2:	dc0e      	bgt.n	10f02 <_adc_set_config+0x336>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
   10ee4:	683b      	ldr	r3, [r7, #0]
   10ee6:	69da      	ldr	r2, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
   10ee8:	4b15      	ldr	r3, [pc, #84]	; (10f40 <_adc_set_config+0x374>)
   10eea:	429a      	cmp	r2, r3
   10eec:	db09      	blt.n	10f02 <_adc_set_config+0x336>
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
   10eee:	683b      	ldr	r3, [r7, #0]
   10ef0:	6a1a      	ldr	r2, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
   10ef2:	4b12      	ldr	r3, [pc, #72]	; (10f3c <_adc_set_config+0x370>)
   10ef4:	429a      	cmp	r2, r3
   10ef6:	dc04      	bgt.n	10f02 <_adc_set_config+0x336>
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
   10ef8:	683b      	ldr	r3, [r7, #0]
   10efa:	6a1a      	ldr	r2, [r3, #32]
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
   10efc:	4b10      	ldr	r3, [pc, #64]	; (10f40 <_adc_set_config+0x374>)
   10efe:	429a      	cmp	r2, r3
   10f00:	da20      	bge.n	10f44 <_adc_set_config+0x378>
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   10f02:	2317      	movs	r3, #23
   10f04:	e0d0      	b.n	110a8 <_adc_set_config+0x4dc>
   10f06:	46c0      	nop			; (mov r8, r8)
   10f08:	00010929 	.word	0x00010929
   10f0c:	00017971 	.word	0x00017971
   10f10:	00017a25 	.word	0x00017a25
   10f14:	00010b61 	.word	0x00010b61
   10f18:	00025d54 	.word	0x00025d54
   10f1c:	00010ad1 	.word	0x00010ad1
   10f20:	000001ff 	.word	0x000001ff
   10f24:	fffffe00 	.word	0xfffffe00
   10f28:	fffffe01 	.word	0xfffffe01
   10f2c:	000003ff 	.word	0x000003ff
   10f30:	000007ff 	.word	0x000007ff
   10f34:	fffff800 	.word	0xfffff800
   10f38:	00000fff 	.word	0x00000fff
   10f3c:	00007fff 	.word	0x00007fff
   10f40:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
   10f44:	683b      	ldr	r3, [r7, #0]
   10f46:	69da      	ldr	r2, [r3, #28]
   10f48:	4b59      	ldr	r3, [pc, #356]	; (110b0 <_adc_set_config+0x4e4>)
   10f4a:	429a      	cmp	r2, r3
   10f4c:	dc04      	bgt.n	10f58 <_adc_set_config+0x38c>
					config->window.window_upper_value > 65535){
   10f4e:	683b      	ldr	r3, [r7, #0]
   10f50:	6a1a      	ldr	r2, [r3, #32]
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
   10f52:	4b57      	ldr	r3, [pc, #348]	; (110b0 <_adc_set_config+0x4e4>)
   10f54:	429a      	cmp	r2, r3
   10f56:	dd01      	ble.n	10f5c <_adc_set_config+0x390>
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   10f58:	2317      	movs	r3, #23
   10f5a:	e0a5      	b.n	110a8 <_adc_set_config+0x4dc>
			}
			break;
   10f5c:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
   10f5e:	46c0      	nop			; (mov r8, r8)
   10f60:	687b      	ldr	r3, [r7, #4]
   10f62:	1c18      	adds	r0, r3, #0
   10f64:	4b53      	ldr	r3, [pc, #332]	; (110b4 <_adc_set_config+0x4e8>)
   10f66:	4798      	blx	r3
   10f68:	1c03      	adds	r3, r0, #0
   10f6a:	2b00      	cmp	r3, #0
   10f6c:	d1f8      	bne.n	10f60 <_adc_set_config+0x394>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
   10f6e:	683b      	ldr	r3, [r7, #0]
   10f70:	7e1a      	ldrb	r2, [r3, #24]
   10f72:	693b      	ldr	r3, [r7, #16]
   10f74:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
   10f76:	46c0      	nop			; (mov r8, r8)
   10f78:	687b      	ldr	r3, [r7, #4]
   10f7a:	1c18      	adds	r0, r3, #0
   10f7c:	4b4d      	ldr	r3, [pc, #308]	; (110b4 <_adc_set_config+0x4e8>)
   10f7e:	4798      	blx	r3
   10f80:	1c03      	adds	r3, r0, #0
   10f82:	2b00      	cmp	r3, #0
   10f84:	d1f8      	bne.n	10f78 <_adc_set_config+0x3ac>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
   10f86:	683b      	ldr	r3, [r7, #0]
   10f88:	69db      	ldr	r3, [r3, #28]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
   10f8a:	b29a      	uxth	r2, r3
   10f8c:	693b      	ldr	r3, [r7, #16]
   10f8e:	839a      	strh	r2, [r3, #28]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
   10f90:	46c0      	nop			; (mov r8, r8)
   10f92:	687b      	ldr	r3, [r7, #4]
   10f94:	1c18      	adds	r0, r3, #0
   10f96:	4b47      	ldr	r3, [pc, #284]	; (110b4 <_adc_set_config+0x4e8>)
   10f98:	4798      	blx	r3
   10f9a:	1c03      	adds	r3, r0, #0
   10f9c:	2b00      	cmp	r3, #0
   10f9e:	d1f8      	bne.n	10f92 <_adc_set_config+0x3c6>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
   10fa0:	683b      	ldr	r3, [r7, #0]
   10fa2:	6a1b      	ldr	r3, [r3, #32]
   10fa4:	b29a      	uxth	r2, r3
   10fa6:	693b      	ldr	r3, [r7, #16]
   10fa8:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
   10faa:	1c3b      	adds	r3, r7, #0
   10fac:	3315      	adds	r3, #21
   10fae:	6839      	ldr	r1, [r7, #0]
   10fb0:	222c      	movs	r2, #44	; 0x2c
   10fb2:	5c8a      	ldrb	r2, [r1, r2]
   10fb4:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
   10fb6:	1c3b      	adds	r3, r7, #0
   10fb8:	3315      	adds	r3, #21
   10fba:	781b      	ldrb	r3, [r3, #0]
   10fbc:	2b00      	cmp	r3, #0
   10fbe:	d006      	beq.n	10fce <_adc_set_config+0x402>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
   10fc0:	1c3b      	adds	r3, r7, #0
   10fc2:	3315      	adds	r3, #21
   10fc4:	781a      	ldrb	r2, [r3, #0]
   10fc6:	1c3b      	adds	r3, r7, #0
   10fc8:	3315      	adds	r3, #21
   10fca:	3a01      	subs	r2, #1
   10fcc:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   10fce:	1c3b      	adds	r3, r7, #0
   10fd0:	3315      	adds	r3, #21
   10fd2:	781b      	ldrb	r3, [r3, #0]
   10fd4:	2b0f      	cmp	r3, #15
   10fd6:	d804      	bhi.n	10fe2 <_adc_set_config+0x416>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
   10fd8:	683a      	ldr	r2, [r7, #0]
   10fda:	232b      	movs	r3, #43	; 0x2b
   10fdc:	5cd3      	ldrb	r3, [r2, r3]
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   10fde:	2b0f      	cmp	r3, #15
   10fe0:	d901      	bls.n	10fe6 <_adc_set_config+0x41a>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
   10fe2:	2317      	movs	r3, #23
   10fe4:	e060      	b.n	110a8 <_adc_set_config+0x4dc>
	}

	while (adc_is_syncing(module_inst)) {
   10fe6:	46c0      	nop			; (mov r8, r8)
   10fe8:	687b      	ldr	r3, [r7, #4]
   10fea:	1c18      	adds	r0, r3, #0
   10fec:	4b31      	ldr	r3, [pc, #196]	; (110b4 <_adc_set_config+0x4e8>)
   10fee:	4798      	blx	r3
   10ff0:	1c03      	adds	r3, r0, #0
   10ff2:	2b00      	cmp	r3, #0
   10ff4:	d1f8      	bne.n	10fe8 <_adc_set_config+0x41c>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
   10ff6:	683b      	ldr	r3, [r7, #0]
   10ff8:	689a      	ldr	r2, [r3, #8]
			(config->pin_scan.offset_start_scan <<
   10ffa:	6839      	ldr	r1, [r7, #0]
   10ffc:	232b      	movs	r3, #43	; 0x2b
   10ffe:	5ccb      	ldrb	r3, [r1, r3]
   11000:	051b      	lsls	r3, r3, #20
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
   11002:	431a      	orrs	r2, r3
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   11004:	1c3b      	adds	r3, r7, #0
   11006:	3315      	adds	r3, #21
   11008:	781b      	ldrb	r3, [r3, #0]
   1100a:	041b      	lsls	r3, r3, #16

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
   1100c:	431a      	orrs	r2, r3
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
   1100e:	683b      	ldr	r3, [r7, #0]
   11010:	89db      	ldrh	r3, [r3, #14]
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   11012:	431a      	orrs	r2, r3
			config->negative_input |
			config->positive_input;
   11014:	683b      	ldr	r3, [r7, #0]
   11016:	7b1b      	ldrb	r3, [r3, #12]
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
   11018:	431a      	orrs	r2, r3
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
   1101a:	693b      	ldr	r3, [r7, #16]
   1101c:	611a      	str	r2, [r3, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
   1101e:	683a      	ldr	r2, [r7, #0]
   11020:	232a      	movs	r3, #42	; 0x2a
   11022:	5cd2      	ldrb	r2, [r2, r3]
   11024:	693b      	ldr	r3, [r7, #16]
   11026:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
   11028:	693b      	ldr	r3, [r7, #16]
   1102a:	220f      	movs	r2, #15
   1102c:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
   1102e:	683a      	ldr	r2, [r7, #0]
   11030:	2324      	movs	r3, #36	; 0x24
   11032:	5cd3      	ldrb	r3, [r2, r3]
   11034:	2b00      	cmp	r3, #0
   11036:	d01d      	beq.n	11074 <_adc_set_config+0x4a8>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
   11038:	683b      	ldr	r3, [r7, #0]
   1103a:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   1103c:	4b1e      	ldr	r3, [pc, #120]	; (110b8 <_adc_set_config+0x4ec>)
   1103e:	429a      	cmp	r2, r3
   11040:	d901      	bls.n	11046 <_adc_set_config+0x47a>
			return STATUS_ERR_INVALID_ARG;
   11042:	2317      	movs	r3, #23
   11044:	e030      	b.n	110a8 <_adc_set_config+0x4dc>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
   11046:	683b      	ldr	r3, [r7, #0]
   11048:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   1104a:	693b      	ldr	r3, [r7, #16]
   1104c:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
   1104e:	683b      	ldr	r3, [r7, #0]
   11050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   11052:	b21a      	sxth	r2, r3
   11054:	4b19      	ldr	r3, [pc, #100]	; (110bc <_adc_set_config+0x4f0>)
   11056:	429a      	cmp	r2, r3
   11058:	dc05      	bgt.n	11066 <_adc_set_config+0x49a>
				config->correction.offset_correction < -2048) {
   1105a:	683b      	ldr	r3, [r7, #0]
   1105c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
   1105e:	b21a      	sxth	r2, r3
   11060:	4b17      	ldr	r3, [pc, #92]	; (110c0 <_adc_set_config+0x4f4>)
   11062:	429a      	cmp	r2, r3
   11064:	da01      	bge.n	1106a <_adc_set_config+0x49e>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
   11066:	2317      	movs	r3, #23
   11068:	e01e      	b.n	110a8 <_adc_set_config+0x4dc>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
   1106a:	683b      	ldr	r3, [r7, #0]
   1106c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   1106e:	b29a      	uxth	r2, r3
   11070:	693b      	ldr	r3, [r7, #16]
   11072:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
   11074:	4b13      	ldr	r3, [pc, #76]	; (110c4 <_adc_set_config+0x4f8>)
   11076:	681b      	ldr	r3, [r3, #0]
   11078:	08db      	lsrs	r3, r3, #3
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
   1107a:	b29b      	uxth	r3, r3
   1107c:	021b      	lsls	r3, r3, #8
   1107e:	b29a      	uxth	r2, r3
   11080:	23e0      	movs	r3, #224	; 0xe0
   11082:	00db      	lsls	r3, r3, #3
   11084:	4013      	ands	r3, r2
   11086:	b299      	uxth	r1, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
   11088:	4b0f      	ldr	r3, [pc, #60]	; (110c8 <_adc_set_config+0x4fc>)
   1108a:	681a      	ldr	r2, [r3, #0]
   1108c:	685b      	ldr	r3, [r3, #4]
   1108e:	0158      	lsls	r0, r3, #5
   11090:	0ed4      	lsrs	r4, r2, #27
   11092:	4304      	orrs	r4, r0
   11094:	0edd      	lsrs	r5, r3, #27
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
   11096:	b2a2      	uxth	r2, r4
   11098:	23ff      	movs	r3, #255	; 0xff
   1109a:	4013      	ands	r3, r2
   1109c:	b29b      	uxth	r3, r3
   1109e:	430b      	orrs	r3, r1
   110a0:	b29a      	uxth	r2, r3
   110a2:	693b      	ldr	r3, [r7, #16]
   110a4:	851a      	strh	r2, [r3, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
   110a6:	2300      	movs	r3, #0
}
   110a8:	1c18      	adds	r0, r3, #0
   110aa:	46bd      	mov	sp, r7
   110ac:	b008      	add	sp, #32
   110ae:	bdb0      	pop	{r4, r5, r7, pc}
   110b0:	0000ffff 	.word	0x0000ffff
   110b4:	00010ad1 	.word	0x00010ad1
   110b8:	00000fff 	.word	0x00000fff
   110bc:	000007ff 	.word	0x000007ff
   110c0:	fffff800 	.word	0xfffff800
   110c4:	00806024 	.word	0x00806024
   110c8:	00806020 	.word	0x00806020

000110cc <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
   110cc:	b590      	push	{r4, r7, lr}
   110ce:	b089      	sub	sp, #36	; 0x24
   110d0:	af02      	add	r7, sp, #8
   110d2:	60f8      	str	r0, [r7, #12]
   110d4:	60b9      	str	r1, [r7, #8]
   110d6:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
   110d8:	4b63      	ldr	r3, [pc, #396]	; (11268 <adc_init+0x19c>)
   110da:	4798      	blx	r3
   110dc:	1c03      	adds	r3, r0, #0
   110de:	2b00      	cmp	r3, #0
   110e0:	d011      	beq.n	11106 <adc_init+0x3a>
   110e2:	68fb      	ldr	r3, [r7, #12]
   110e4:	2b00      	cmp	r3, #0
   110e6:	d119      	bne.n	1111c <adc_init+0x50>
   110e8:	4b5f      	ldr	r3, [pc, #380]	; (11268 <adc_init+0x19c>)
   110ea:	4798      	blx	r3
   110ec:	1c01      	adds	r1, r0, #0
   110ee:	4a5f      	ldr	r2, [pc, #380]	; (1126c <adc_init+0x1a0>)
   110f0:	23c5      	movs	r3, #197	; 0xc5
   110f2:	005b      	lsls	r3, r3, #1
   110f4:	485e      	ldr	r0, [pc, #376]	; (11270 <adc_init+0x1a4>)
   110f6:	9000      	str	r0, [sp, #0]
   110f8:	485e      	ldr	r0, [pc, #376]	; (11274 <adc_init+0x1a8>)
   110fa:	9001      	str	r0, [sp, #4]
   110fc:	1c08      	adds	r0, r1, #0
   110fe:	2101      	movs	r1, #1
   11100:	4c5d      	ldr	r4, [pc, #372]	; (11278 <adc_init+0x1ac>)
   11102:	47a0      	blx	r4
   11104:	e00a      	b.n	1111c <adc_init+0x50>
   11106:	68fb      	ldr	r3, [r7, #12]
   11108:	2b00      	cmp	r3, #0
   1110a:	d107      	bne.n	1111c <adc_init+0x50>
   1110c:	485b      	ldr	r0, [pc, #364]	; (1127c <adc_init+0x1b0>)
   1110e:	4959      	ldr	r1, [pc, #356]	; (11274 <adc_init+0x1a8>)
   11110:	4a56      	ldr	r2, [pc, #344]	; (1126c <adc_init+0x1a0>)
   11112:	23c5      	movs	r3, #197	; 0xc5
   11114:	005b      	lsls	r3, r3, #1
   11116:	4c5a      	ldr	r4, [pc, #360]	; (11280 <adc_init+0x1b4>)
   11118:	47a0      	blx	r4
   1111a:	e7fe      	b.n	1111a <adc_init+0x4e>
	Assert(hw);
   1111c:	4b52      	ldr	r3, [pc, #328]	; (11268 <adc_init+0x19c>)
   1111e:	4798      	blx	r3
   11120:	1c03      	adds	r3, r0, #0
   11122:	2b00      	cmp	r3, #0
   11124:	d011      	beq.n	1114a <adc_init+0x7e>
   11126:	68bb      	ldr	r3, [r7, #8]
   11128:	2b00      	cmp	r3, #0
   1112a:	d119      	bne.n	11160 <adc_init+0x94>
   1112c:	4b4e      	ldr	r3, [pc, #312]	; (11268 <adc_init+0x19c>)
   1112e:	4798      	blx	r3
   11130:	1c01      	adds	r1, r0, #0
   11132:	4a4e      	ldr	r2, [pc, #312]	; (1126c <adc_init+0x1a0>)
   11134:	238c      	movs	r3, #140	; 0x8c
   11136:	33ff      	adds	r3, #255	; 0xff
   11138:	484d      	ldr	r0, [pc, #308]	; (11270 <adc_init+0x1a4>)
   1113a:	9000      	str	r0, [sp, #0]
   1113c:	4851      	ldr	r0, [pc, #324]	; (11284 <adc_init+0x1b8>)
   1113e:	9001      	str	r0, [sp, #4]
   11140:	1c08      	adds	r0, r1, #0
   11142:	2101      	movs	r1, #1
   11144:	4c4c      	ldr	r4, [pc, #304]	; (11278 <adc_init+0x1ac>)
   11146:	47a0      	blx	r4
   11148:	e00a      	b.n	11160 <adc_init+0x94>
   1114a:	68bb      	ldr	r3, [r7, #8]
   1114c:	2b00      	cmp	r3, #0
   1114e:	d107      	bne.n	11160 <adc_init+0x94>
   11150:	484a      	ldr	r0, [pc, #296]	; (1127c <adc_init+0x1b0>)
   11152:	494c      	ldr	r1, [pc, #304]	; (11284 <adc_init+0x1b8>)
   11154:	4a45      	ldr	r2, [pc, #276]	; (1126c <adc_init+0x1a0>)
   11156:	238c      	movs	r3, #140	; 0x8c
   11158:	33ff      	adds	r3, #255	; 0xff
   1115a:	4c49      	ldr	r4, [pc, #292]	; (11280 <adc_init+0x1b4>)
   1115c:	47a0      	blx	r4
   1115e:	e7fe      	b.n	1115e <adc_init+0x92>
	Assert(config);
   11160:	4b41      	ldr	r3, [pc, #260]	; (11268 <adc_init+0x19c>)
   11162:	4798      	blx	r3
   11164:	1c03      	adds	r3, r0, #0
   11166:	2b00      	cmp	r3, #0
   11168:	d011      	beq.n	1118e <adc_init+0xc2>
   1116a:	687b      	ldr	r3, [r7, #4]
   1116c:	2b00      	cmp	r3, #0
   1116e:	d119      	bne.n	111a4 <adc_init+0xd8>
   11170:	4b3d      	ldr	r3, [pc, #244]	; (11268 <adc_init+0x19c>)
   11172:	4798      	blx	r3
   11174:	1c01      	adds	r1, r0, #0
   11176:	4a3d      	ldr	r2, [pc, #244]	; (1126c <adc_init+0x1a0>)
   11178:	23c6      	movs	r3, #198	; 0xc6
   1117a:	005b      	lsls	r3, r3, #1
   1117c:	483c      	ldr	r0, [pc, #240]	; (11270 <adc_init+0x1a4>)
   1117e:	9000      	str	r0, [sp, #0]
   11180:	4841      	ldr	r0, [pc, #260]	; (11288 <adc_init+0x1bc>)
   11182:	9001      	str	r0, [sp, #4]
   11184:	1c08      	adds	r0, r1, #0
   11186:	2101      	movs	r1, #1
   11188:	4c3b      	ldr	r4, [pc, #236]	; (11278 <adc_init+0x1ac>)
   1118a:	47a0      	blx	r4
   1118c:	e00a      	b.n	111a4 <adc_init+0xd8>
   1118e:	687b      	ldr	r3, [r7, #4]
   11190:	2b00      	cmp	r3, #0
   11192:	d107      	bne.n	111a4 <adc_init+0xd8>
   11194:	4839      	ldr	r0, [pc, #228]	; (1127c <adc_init+0x1b0>)
   11196:	493c      	ldr	r1, [pc, #240]	; (11288 <adc_init+0x1bc>)
   11198:	4a34      	ldr	r2, [pc, #208]	; (1126c <adc_init+0x1a0>)
   1119a:	23c6      	movs	r3, #198	; 0xc6
   1119c:	005b      	lsls	r3, r3, #1
   1119e:	4c38      	ldr	r4, [pc, #224]	; (11280 <adc_init+0x1b4>)
   111a0:	47a0      	blx	r4
   111a2:	e7fe      	b.n	111a2 <adc_init+0xd6>

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
   111a4:	68fb      	ldr	r3, [r7, #12]
   111a6:	68ba      	ldr	r2, [r7, #8]
   111a8:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
   111aa:	2380      	movs	r3, #128	; 0x80
   111ac:	025b      	lsls	r3, r3, #9
   111ae:	2002      	movs	r0, #2
   111b0:	1c19      	adds	r1, r3, #0
   111b2:	4b36      	ldr	r3, [pc, #216]	; (1128c <adc_init+0x1c0>)
   111b4:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
   111b6:	68bb      	ldr	r3, [r7, #8]
   111b8:	681b      	ldr	r3, [r3, #0]
   111ba:	b2db      	uxtb	r3, r3
   111bc:	1c1a      	adds	r2, r3, #0
   111be:	2301      	movs	r3, #1
   111c0:	4013      	ands	r3, r2
   111c2:	d001      	beq.n	111c8 <adc_init+0xfc>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
   111c4:	2305      	movs	r3, #5
   111c6:	e04b      	b.n	11260 <adc_init+0x194>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
   111c8:	68bb      	ldr	r3, [r7, #8]
   111ca:	681b      	ldr	r3, [r3, #0]
   111cc:	b2db      	uxtb	r3, r3
   111ce:	1c1a      	adds	r2, r3, #0
   111d0:	2302      	movs	r3, #2
   111d2:	4013      	ands	r3, r2
   111d4:	d001      	beq.n	111da <adc_init+0x10e>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
   111d6:	231c      	movs	r3, #28
   111d8:	e042      	b.n	11260 <adc_init+0x194>
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
   111da:	1c3b      	adds	r3, r7, #0
   111dc:	3317      	adds	r3, #23
   111de:	2200      	movs	r2, #0
   111e0:	701a      	strb	r2, [r3, #0]
   111e2:	e00f      	b.n	11204 <adc_init+0x138>
		module_inst->callback[i] = NULL;
   111e4:	1c3b      	adds	r3, r7, #0
   111e6:	3317      	adds	r3, #23
   111e8:	781b      	ldrb	r3, [r3, #0]
   111ea:	68fa      	ldr	r2, [r7, #12]
   111ec:	009b      	lsls	r3, r3, #2
   111ee:	18d3      	adds	r3, r2, r3
   111f0:	3304      	adds	r3, #4
   111f2:	2200      	movs	r2, #0
   111f4:	601a      	str	r2, [r3, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
   111f6:	1c3b      	adds	r3, r7, #0
   111f8:	3317      	adds	r3, #23
   111fa:	781a      	ldrb	r2, [r3, #0]
   111fc:	1c3b      	adds	r3, r7, #0
   111fe:	3317      	adds	r3, #23
   11200:	3201      	adds	r2, #1
   11202:	701a      	strb	r2, [r3, #0]
   11204:	1c3b      	adds	r3, r7, #0
   11206:	3317      	adds	r3, #23
   11208:	781b      	ldrb	r3, [r3, #0]
   1120a:	2b02      	cmp	r3, #2
   1120c:	d9ea      	bls.n	111e4 <adc_init+0x118>
		module_inst->callback[i] = NULL;
	};

	module_inst->registered_callback_mask = 0;
   1120e:	68fb      	ldr	r3, [r7, #12]
   11210:	2200      	movs	r2, #0
   11212:	759a      	strb	r2, [r3, #22]
	module_inst->enabled_callback_mask = 0;
   11214:	68fb      	ldr	r3, [r7, #12]
   11216:	2200      	movs	r2, #0
   11218:	75da      	strb	r2, [r3, #23]
	module_inst->remaining_conversions = 0;
   1121a:	68fb      	ldr	r3, [r7, #12]
   1121c:	2200      	movs	r2, #0
   1121e:	829a      	strh	r2, [r3, #20]
	module_inst->job_status = STATUS_OK;
   11220:	68fb      	ldr	r3, [r7, #12]
   11222:	2200      	movs	r2, #0
   11224:	761a      	strb	r2, [r3, #24]

	_adc_instances[0] = module_inst;
   11226:	4b1a      	ldr	r3, [pc, #104]	; (11290 <adc_init+0x1c4>)
   11228:	68fa      	ldr	r2, [r7, #12]
   1122a:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
   1122c:	687a      	ldr	r2, [r7, #4]
   1122e:	232a      	movs	r3, #42	; 0x2a
   11230:	5cd3      	ldrb	r3, [r2, r3]
   11232:	2b00      	cmp	r3, #0
   11234:	d10a      	bne.n	1124c <adc_init+0x180>
			!config->freerunning) {
   11236:	687b      	ldr	r3, [r7, #4]
   11238:	7d1b      	ldrb	r3, [r3, #20]
   1123a:	2201      	movs	r2, #1
   1123c:	4053      	eors	r3, r2
   1123e:	b2db      	uxtb	r3, r3
	module_inst->remaining_conversions = 0;
	module_inst->job_status = STATUS_OK;

	_adc_instances[0] = module_inst;

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
   11240:	2b00      	cmp	r3, #0
   11242:	d003      	beq.n	1124c <adc_init+0x180>
			!config->freerunning) {
		module_inst->software_trigger = true;
   11244:	68fb      	ldr	r3, [r7, #12]
   11246:	2201      	movs	r2, #1
   11248:	765a      	strb	r2, [r3, #25]
   1124a:	e002      	b.n	11252 <adc_init+0x186>
	} else {
		module_inst->software_trigger = false;
   1124c:	68fb      	ldr	r3, [r7, #12]
   1124e:	2200      	movs	r2, #0
   11250:	765a      	strb	r2, [r3, #25]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
   11252:	68fa      	ldr	r2, [r7, #12]
   11254:	687b      	ldr	r3, [r7, #4]
   11256:	1c10      	adds	r0, r2, #0
   11258:	1c19      	adds	r1, r3, #0
   1125a:	4b0e      	ldr	r3, [pc, #56]	; (11294 <adc_init+0x1c8>)
   1125c:	4798      	blx	r3
   1125e:	1c03      	adds	r3, r0, #0
}
   11260:	1c18      	adds	r0, r3, #0
   11262:	46bd      	mov	sp, r7
   11264:	b007      	add	sp, #28
   11266:	bd90      	pop	{r4, r7, pc}
   11268:	00010915 	.word	0x00010915
   1126c:	00025d2c 	.word	0x00025d2c
   11270:	00025c00 	.word	0x00025c00
   11274:	00025cd0 	.word	0x00025cd0
   11278:	000106e9 	.word	0x000106e9
   1127c:	00025c20 	.word	0x00025c20
   11280:	0001b62d 	.word	0x0001b62d
   11284:	00025d50 	.word	0x00025d50
   11288:	00025c18 	.word	0x00025c18
   1128c:	000109a5 	.word	0x000109a5
   11290:	200011c4 	.word	0x200011c4
   11294:	00010bcd 	.word	0x00010bcd

00011298 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
   11298:	b580      	push	{r7, lr}
   1129a:	af00      	add	r7, sp, #0
	return test_case_ptr;
   1129c:	4b02      	ldr	r3, [pc, #8]	; (112a8 <test_get_case+0x10>)
   1129e:	681b      	ldr	r3, [r3, #0]
}
   112a0:	1c18      	adds	r0, r3, #0
   112a2:	46bd      	mov	sp, r7
   112a4:	bd80      	pop	{r7, pc}
   112a6:	46c0      	nop			; (mov r8, r8)
   112a8:	2000041c 	.word	0x2000041c

000112ac <adc_is_syncing>:
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   112ac:	b590      	push	{r4, r7, lr}
   112ae:	b087      	sub	sp, #28
   112b0:	af02      	add	r7, sp, #8
   112b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
   112b4:	4b19      	ldr	r3, [pc, #100]	; (1131c <adc_is_syncing+0x70>)
   112b6:	4798      	blx	r3
   112b8:	1c03      	adds	r3, r0, #0
   112ba:	2b00      	cmp	r3, #0
   112bc:	d010      	beq.n	112e0 <adc_is_syncing+0x34>
   112be:	687b      	ldr	r3, [r7, #4]
   112c0:	2b00      	cmp	r3, #0
   112c2:	d117      	bne.n	112f4 <adc_is_syncing+0x48>
   112c4:	4b15      	ldr	r3, [pc, #84]	; (1131c <adc_is_syncing+0x70>)
   112c6:	4798      	blx	r3
   112c8:	1c01      	adds	r1, r0, #0
   112ca:	4a15      	ldr	r2, [pc, #84]	; (11320 <adc_is_syncing+0x74>)
   112cc:	4b15      	ldr	r3, [pc, #84]	; (11324 <adc_is_syncing+0x78>)
   112ce:	4816      	ldr	r0, [pc, #88]	; (11328 <adc_is_syncing+0x7c>)
   112d0:	9000      	str	r0, [sp, #0]
   112d2:	4816      	ldr	r0, [pc, #88]	; (1132c <adc_is_syncing+0x80>)
   112d4:	9001      	str	r0, [sp, #4]
   112d6:	1c08      	adds	r0, r1, #0
   112d8:	2101      	movs	r1, #1
   112da:	4c15      	ldr	r4, [pc, #84]	; (11330 <adc_is_syncing+0x84>)
   112dc:	47a0      	blx	r4
   112de:	e009      	b.n	112f4 <adc_is_syncing+0x48>
   112e0:	687b      	ldr	r3, [r7, #4]
   112e2:	2b00      	cmp	r3, #0
   112e4:	d106      	bne.n	112f4 <adc_is_syncing+0x48>
   112e6:	4813      	ldr	r0, [pc, #76]	; (11334 <adc_is_syncing+0x88>)
   112e8:	4910      	ldr	r1, [pc, #64]	; (1132c <adc_is_syncing+0x80>)
   112ea:	4a0d      	ldr	r2, [pc, #52]	; (11320 <adc_is_syncing+0x74>)
   112ec:	4b0d      	ldr	r3, [pc, #52]	; (11324 <adc_is_syncing+0x78>)
   112ee:	4c12      	ldr	r4, [pc, #72]	; (11338 <adc_is_syncing+0x8c>)
   112f0:	47a0      	blx	r4
   112f2:	e7fe      	b.n	112f2 <adc_is_syncing+0x46>

	Adc *const adc_module = module_inst->hw;
   112f4:	687b      	ldr	r3, [r7, #4]
   112f6:	681b      	ldr	r3, [r3, #0]
   112f8:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   112fa:	68fb      	ldr	r3, [r7, #12]
   112fc:	699b      	ldr	r3, [r3, #24]
   112fe:	041b      	lsls	r3, r3, #16
   11300:	0e1b      	lsrs	r3, r3, #24
   11302:	b2db      	uxtb	r3, r3
   11304:	b2db      	uxtb	r3, r3
   11306:	b25b      	sxtb	r3, r3
   11308:	2b00      	cmp	r3, #0
   1130a:	da01      	bge.n	11310 <adc_is_syncing+0x64>
		return true;
   1130c:	2301      	movs	r3, #1
   1130e:	e000      	b.n	11312 <adc_is_syncing+0x66>
	}

	return false;
   11310:	2300      	movs	r3, #0
}
   11312:	1c18      	adds	r0, r3, #0
   11314:	46bd      	mov	sp, r7
   11316:	b005      	add	sp, #20
   11318:	bd90      	pop	{r4, r7, pc}
   1131a:	46c0      	nop			; (mov r8, r8)
   1131c:	00011299 	.word	0x00011299
   11320:	00025e28 	.word	0x00025e28
   11324:	0000048d 	.word	0x0000048d
   11328:	00025e4c 	.word	0x00025e4c
   1132c:	00025e64 	.word	0x00025e64
   11330:	000106e9 	.word	0x000106e9
   11334:	00025e70 	.word	0x00025e70
   11338:	0001b62d 	.word	0x0001b62d

0001133c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   1133c:	b590      	push	{r4, r7, lr}
   1133e:	b087      	sub	sp, #28
   11340:	af02      	add	r7, sp, #8
   11342:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
   11344:	4b2c      	ldr	r3, [pc, #176]	; (113f8 <adc_start_conversion+0xbc>)
   11346:	4798      	blx	r3
   11348:	1c03      	adds	r3, r0, #0
   1134a:	2b00      	cmp	r3, #0
   1134c:	d011      	beq.n	11372 <adc_start_conversion+0x36>
   1134e:	687b      	ldr	r3, [r7, #4]
   11350:	2b00      	cmp	r3, #0
   11352:	d119      	bne.n	11388 <adc_start_conversion+0x4c>
   11354:	4b28      	ldr	r3, [pc, #160]	; (113f8 <adc_start_conversion+0xbc>)
   11356:	4798      	blx	r3
   11358:	1c01      	adds	r1, r0, #0
   1135a:	4a28      	ldr	r2, [pc, #160]	; (113fc <adc_start_conversion+0xc0>)
   1135c:	23a8      	movs	r3, #168	; 0xa8
   1135e:	00db      	lsls	r3, r3, #3
   11360:	4827      	ldr	r0, [pc, #156]	; (11400 <adc_start_conversion+0xc4>)
   11362:	9000      	str	r0, [sp, #0]
   11364:	4827      	ldr	r0, [pc, #156]	; (11404 <adc_start_conversion+0xc8>)
   11366:	9001      	str	r0, [sp, #4]
   11368:	1c08      	adds	r0, r1, #0
   1136a:	2101      	movs	r1, #1
   1136c:	4c26      	ldr	r4, [pc, #152]	; (11408 <adc_start_conversion+0xcc>)
   1136e:	47a0      	blx	r4
   11370:	e00a      	b.n	11388 <adc_start_conversion+0x4c>
   11372:	687b      	ldr	r3, [r7, #4]
   11374:	2b00      	cmp	r3, #0
   11376:	d107      	bne.n	11388 <adc_start_conversion+0x4c>
   11378:	4824      	ldr	r0, [pc, #144]	; (1140c <adc_start_conversion+0xd0>)
   1137a:	4922      	ldr	r1, [pc, #136]	; (11404 <adc_start_conversion+0xc8>)
   1137c:	4a1f      	ldr	r2, [pc, #124]	; (113fc <adc_start_conversion+0xc0>)
   1137e:	23a8      	movs	r3, #168	; 0xa8
   11380:	00db      	lsls	r3, r3, #3
   11382:	4c23      	ldr	r4, [pc, #140]	; (11410 <adc_start_conversion+0xd4>)
   11384:	47a0      	blx	r4
   11386:	e7fe      	b.n	11386 <adc_start_conversion+0x4a>
	Assert(module_inst->hw);
   11388:	4b1b      	ldr	r3, [pc, #108]	; (113f8 <adc_start_conversion+0xbc>)
   1138a:	4798      	blx	r3
   1138c:	1c03      	adds	r3, r0, #0
   1138e:	2b00      	cmp	r3, #0
   11390:	d011      	beq.n	113b6 <adc_start_conversion+0x7a>
   11392:	687b      	ldr	r3, [r7, #4]
   11394:	681b      	ldr	r3, [r3, #0]
   11396:	2b00      	cmp	r3, #0
   11398:	d118      	bne.n	113cc <adc_start_conversion+0x90>
   1139a:	4b17      	ldr	r3, [pc, #92]	; (113f8 <adc_start_conversion+0xbc>)
   1139c:	4798      	blx	r3
   1139e:	1c01      	adds	r1, r0, #0
   113a0:	4a16      	ldr	r2, [pc, #88]	; (113fc <adc_start_conversion+0xc0>)
   113a2:	4b1c      	ldr	r3, [pc, #112]	; (11414 <adc_start_conversion+0xd8>)
   113a4:	4816      	ldr	r0, [pc, #88]	; (11400 <adc_start_conversion+0xc4>)
   113a6:	9000      	str	r0, [sp, #0]
   113a8:	481b      	ldr	r0, [pc, #108]	; (11418 <adc_start_conversion+0xdc>)
   113aa:	9001      	str	r0, [sp, #4]
   113ac:	1c08      	adds	r0, r1, #0
   113ae:	2101      	movs	r1, #1
   113b0:	4c15      	ldr	r4, [pc, #84]	; (11408 <adc_start_conversion+0xcc>)
   113b2:	47a0      	blx	r4
   113b4:	e00a      	b.n	113cc <adc_start_conversion+0x90>
   113b6:	687b      	ldr	r3, [r7, #4]
   113b8:	681b      	ldr	r3, [r3, #0]
   113ba:	2b00      	cmp	r3, #0
   113bc:	d106      	bne.n	113cc <adc_start_conversion+0x90>
   113be:	4813      	ldr	r0, [pc, #76]	; (1140c <adc_start_conversion+0xd0>)
   113c0:	4915      	ldr	r1, [pc, #84]	; (11418 <adc_start_conversion+0xdc>)
   113c2:	4a0e      	ldr	r2, [pc, #56]	; (113fc <adc_start_conversion+0xc0>)
   113c4:	4b13      	ldr	r3, [pc, #76]	; (11414 <adc_start_conversion+0xd8>)
   113c6:	4c12      	ldr	r4, [pc, #72]	; (11410 <adc_start_conversion+0xd4>)
   113c8:	47a0      	blx	r4
   113ca:	e7fe      	b.n	113ca <adc_start_conversion+0x8e>

	Adc *const adc_module = module_inst->hw;
   113cc:	687b      	ldr	r3, [r7, #4]
   113ce:	681b      	ldr	r3, [r3, #0]
   113d0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   113d2:	46c0      	nop			; (mov r8, r8)
   113d4:	687b      	ldr	r3, [r7, #4]
   113d6:	1c18      	adds	r0, r3, #0
   113d8:	4b10      	ldr	r3, [pc, #64]	; (1141c <adc_start_conversion+0xe0>)
   113da:	4798      	blx	r3
   113dc:	1c03      	adds	r3, r0, #0
   113de:	2b00      	cmp	r3, #0
   113e0:	d1f8      	bne.n	113d4 <adc_start_conversion+0x98>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   113e2:	68fb      	ldr	r3, [r7, #12]
   113e4:	68db      	ldr	r3, [r3, #12]
   113e6:	b2db      	uxtb	r3, r3
   113e8:	2202      	movs	r2, #2
   113ea:	4313      	orrs	r3, r2
   113ec:	b2da      	uxtb	r2, r3
   113ee:	68fb      	ldr	r3, [r7, #12]
   113f0:	731a      	strb	r2, [r3, #12]
}
   113f2:	46bd      	mov	sp, r7
   113f4:	b005      	add	sp, #20
   113f6:	bd90      	pop	{r4, r7, pc}
   113f8:	00011299 	.word	0x00011299
   113fc:	00025e28 	.word	0x00025e28
   11400:	00025e4c 	.word	0x00025e4c
   11404:	00025e64 	.word	0x00025e64
   11408:	000106e9 	.word	0x000106e9
   1140c:	00025e70 	.word	0x00025e70
   11410:	0001b62d 	.word	0x0001b62d
   11414:	00000541 	.word	0x00000541
   11418:	00025e94 	.word	0x00025e94
   1141c:	000112ad 	.word	0x000112ad

00011420 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   11420:	b590      	push	{r4, r7, lr}
   11422:	b087      	sub	sp, #28
   11424:	af02      	add	r7, sp, #8
   11426:	6078      	str	r0, [r7, #4]
   11428:	1c0a      	adds	r2, r1, #0
   1142a:	1cfb      	adds	r3, r7, #3
   1142c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
   1142e:	4b26      	ldr	r3, [pc, #152]	; (114c8 <adc_disable_interrupt+0xa8>)
   11430:	4798      	blx	r3
   11432:	1c03      	adds	r3, r0, #0
   11434:	2b00      	cmp	r3, #0
   11436:	d010      	beq.n	1145a <adc_disable_interrupt+0x3a>
   11438:	687b      	ldr	r3, [r7, #4]
   1143a:	2b00      	cmp	r3, #0
   1143c:	d117      	bne.n	1146e <adc_disable_interrupt+0x4e>
   1143e:	4b22      	ldr	r3, [pc, #136]	; (114c8 <adc_disable_interrupt+0xa8>)
   11440:	4798      	blx	r3
   11442:	1c01      	adds	r1, r0, #0
   11444:	4a21      	ldr	r2, [pc, #132]	; (114cc <adc_disable_interrupt+0xac>)
   11446:	4b22      	ldr	r3, [pc, #136]	; (114d0 <adc_disable_interrupt+0xb0>)
   11448:	4822      	ldr	r0, [pc, #136]	; (114d4 <adc_disable_interrupt+0xb4>)
   1144a:	9000      	str	r0, [sp, #0]
   1144c:	4822      	ldr	r0, [pc, #136]	; (114d8 <adc_disable_interrupt+0xb8>)
   1144e:	9001      	str	r0, [sp, #4]
   11450:	1c08      	adds	r0, r1, #0
   11452:	2101      	movs	r1, #1
   11454:	4c21      	ldr	r4, [pc, #132]	; (114dc <adc_disable_interrupt+0xbc>)
   11456:	47a0      	blx	r4
   11458:	e009      	b.n	1146e <adc_disable_interrupt+0x4e>
   1145a:	687b      	ldr	r3, [r7, #4]
   1145c:	2b00      	cmp	r3, #0
   1145e:	d106      	bne.n	1146e <adc_disable_interrupt+0x4e>
   11460:	481f      	ldr	r0, [pc, #124]	; (114e0 <adc_disable_interrupt+0xc0>)
   11462:	491d      	ldr	r1, [pc, #116]	; (114d8 <adc_disable_interrupt+0xb8>)
   11464:	4a19      	ldr	r2, [pc, #100]	; (114cc <adc_disable_interrupt+0xac>)
   11466:	4b1a      	ldr	r3, [pc, #104]	; (114d0 <adc_disable_interrupt+0xb0>)
   11468:	4c1e      	ldr	r4, [pc, #120]	; (114e4 <adc_disable_interrupt+0xc4>)
   1146a:	47a0      	blx	r4
   1146c:	e7fe      	b.n	1146c <adc_disable_interrupt+0x4c>
	Assert(module_inst->hw);
   1146e:	4b16      	ldr	r3, [pc, #88]	; (114c8 <adc_disable_interrupt+0xa8>)
   11470:	4798      	blx	r3
   11472:	1c03      	adds	r3, r0, #0
   11474:	2b00      	cmp	r3, #0
   11476:	d011      	beq.n	1149c <adc_disable_interrupt+0x7c>
   11478:	687b      	ldr	r3, [r7, #4]
   1147a:	681b      	ldr	r3, [r3, #0]
   1147c:	2b00      	cmp	r3, #0
   1147e:	d118      	bne.n	114b2 <adc_disable_interrupt+0x92>
   11480:	4b11      	ldr	r3, [pc, #68]	; (114c8 <adc_disable_interrupt+0xa8>)
   11482:	4798      	blx	r3
   11484:	1c01      	adds	r1, r0, #0
   11486:	4a11      	ldr	r2, [pc, #68]	; (114cc <adc_disable_interrupt+0xac>)
   11488:	4b17      	ldr	r3, [pc, #92]	; (114e8 <adc_disable_interrupt+0xc8>)
   1148a:	4812      	ldr	r0, [pc, #72]	; (114d4 <adc_disable_interrupt+0xb4>)
   1148c:	9000      	str	r0, [sp, #0]
   1148e:	4817      	ldr	r0, [pc, #92]	; (114ec <adc_disable_interrupt+0xcc>)
   11490:	9001      	str	r0, [sp, #4]
   11492:	1c08      	adds	r0, r1, #0
   11494:	2101      	movs	r1, #1
   11496:	4c11      	ldr	r4, [pc, #68]	; (114dc <adc_disable_interrupt+0xbc>)
   11498:	47a0      	blx	r4
   1149a:	e00a      	b.n	114b2 <adc_disable_interrupt+0x92>
   1149c:	687b      	ldr	r3, [r7, #4]
   1149e:	681b      	ldr	r3, [r3, #0]
   114a0:	2b00      	cmp	r3, #0
   114a2:	d106      	bne.n	114b2 <adc_disable_interrupt+0x92>
   114a4:	480e      	ldr	r0, [pc, #56]	; (114e0 <adc_disable_interrupt+0xc0>)
   114a6:	4911      	ldr	r1, [pc, #68]	; (114ec <adc_disable_interrupt+0xcc>)
   114a8:	4a08      	ldr	r2, [pc, #32]	; (114cc <adc_disable_interrupt+0xac>)
   114aa:	4b0f      	ldr	r3, [pc, #60]	; (114e8 <adc_disable_interrupt+0xc8>)
   114ac:	4c0d      	ldr	r4, [pc, #52]	; (114e4 <adc_disable_interrupt+0xc4>)
   114ae:	47a0      	blx	r4
   114b0:	e7fe      	b.n	114b0 <adc_disable_interrupt+0x90>

	Adc *const adc_module = module_inst->hw;
   114b2:	687b      	ldr	r3, [r7, #4]
   114b4:	681b      	ldr	r3, [r3, #0]
   114b6:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   114b8:	68fb      	ldr	r3, [r7, #12]
   114ba:	1cfa      	adds	r2, r7, #3
   114bc:	7812      	ldrb	r2, [r2, #0]
   114be:	759a      	strb	r2, [r3, #22]
}
   114c0:	46bd      	mov	sp, r7
   114c2:	b005      	add	sp, #20
   114c4:	bd90      	pop	{r4, r7, pc}
   114c6:	46c0      	nop			; (mov r8, r8)
   114c8:	00011299 	.word	0x00011299
   114cc:	00025e28 	.word	0x00025e28
   114d0:	0000068a 	.word	0x0000068a
   114d4:	00025e4c 	.word	0x00025e4c
   114d8:	00025e64 	.word	0x00025e64
   114dc:	000106e9 	.word	0x000106e9
   114e0:	00025e70 	.word	0x00025e70
   114e4:	0001b62d 	.word	0x0001b62d
   114e8:	0000068b 	.word	0x0000068b
   114ec:	00025e94 	.word	0x00025e94

000114f0 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   114f0:	b580      	push	{r7, lr}
   114f2:	b084      	sub	sp, #16
   114f4:	af00      	add	r7, sp, #0
   114f6:	1c02      	adds	r2, r0, #0
   114f8:	1dfb      	adds	r3, r7, #7
   114fa:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   114fc:	1dfb      	adds	r3, r7, #7
   114fe:	781a      	ldrb	r2, [r3, #0]
   11500:	4b38      	ldr	r3, [pc, #224]	; (115e4 <_adc_interrupt_handler+0xf4>)
   11502:	0092      	lsls	r2, r2, #2
   11504:	58d3      	ldr	r3, [r2, r3]
   11506:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
   11508:	68fb      	ldr	r3, [r7, #12]
   1150a:	681b      	ldr	r3, [r3, #0]
   1150c:	699b      	ldr	r3, [r3, #24]
   1150e:	b2db      	uxtb	r3, r3
   11510:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   11512:	68ba      	ldr	r2, [r7, #8]
   11514:	2301      	movs	r3, #1
   11516:	4013      	ands	r3, r2
   11518:	d03b      	beq.n	11592 <_adc_interrupt_handler+0xa2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   1151a:	68fb      	ldr	r3, [r7, #12]
   1151c:	681b      	ldr	r3, [r3, #0]
   1151e:	2201      	movs	r2, #1
   11520:	761a      	strb	r2, [r3, #24]

		if (module->remaining_conversions > 0) {
   11522:	68fb      	ldr	r3, [r7, #12]
   11524:	695b      	ldr	r3, [r3, #20]
   11526:	b29b      	uxth	r3, r3
   11528:	2b00      	cmp	r3, #0
   1152a:	d01a      	beq.n	11562 <_adc_interrupt_handler+0x72>
			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
   1152c:	68fb      	ldr	r3, [r7, #12]
   1152e:	691b      	ldr	r3, [r3, #16]
   11530:	1c99      	adds	r1, r3, #2
   11532:	68fa      	ldr	r2, [r7, #12]
   11534:	6111      	str	r1, [r2, #16]
   11536:	68fa      	ldr	r2, [r7, #12]
   11538:	6812      	ldr	r2, [r2, #0]
   1153a:	6992      	ldr	r2, [r2, #24]
   1153c:	0c12      	lsrs	r2, r2, #16
   1153e:	b292      	uxth	r2, r2
   11540:	801a      	strh	r2, [r3, #0]
			module->remaining_conversions--;
   11542:	68fb      	ldr	r3, [r7, #12]
   11544:	695b      	ldr	r3, [r3, #20]
   11546:	b29b      	uxth	r3, r3
   11548:	3b01      	subs	r3, #1
   1154a:	b29a      	uxth	r2, r3
   1154c:	68fb      	ldr	r3, [r7, #12]
   1154e:	829a      	strh	r2, [r3, #20]
			if (module->software_trigger == true) {
   11550:	68fb      	ldr	r3, [r7, #12]
   11552:	7e5b      	ldrb	r3, [r3, #25]
   11554:	2b00      	cmp	r3, #0
   11556:	d01c      	beq.n	11592 <_adc_interrupt_handler+0xa2>
				adc_start_conversion(module);
   11558:	68fb      	ldr	r3, [r7, #12]
   1155a:	1c18      	adds	r0, r3, #0
   1155c:	4b22      	ldr	r3, [pc, #136]	; (115e8 <_adc_interrupt_handler+0xf8>)
   1155e:	4798      	blx	r3
   11560:	e017      	b.n	11592 <_adc_interrupt_handler+0xa2>
			}
		} else {
			if (module->job_status == STATUS_BUSY) {
   11562:	68fb      	ldr	r3, [r7, #12]
   11564:	699b      	ldr	r3, [r3, #24]
   11566:	b2db      	uxtb	r3, r3
   11568:	2b05      	cmp	r3, #5
   1156a:	d112      	bne.n	11592 <_adc_interrupt_handler+0xa2>
				/* job is complete. update status,disable interrupt
				 *and call callback */
				module->job_status = STATUS_OK;
   1156c:	68fb      	ldr	r3, [r7, #12]
   1156e:	2200      	movs	r2, #0
   11570:	761a      	strb	r2, [r3, #24]
				adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   11572:	68fb      	ldr	r3, [r7, #12]
   11574:	1c18      	adds	r0, r3, #0
   11576:	2101      	movs	r1, #1
   11578:	4b1c      	ldr	r3, [pc, #112]	; (115ec <_adc_interrupt_handler+0xfc>)
   1157a:	4798      	blx	r3
				if(module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) {
   1157c:	68fb      	ldr	r3, [r7, #12]
   1157e:	7ddb      	ldrb	r3, [r3, #23]
   11580:	1c1a      	adds	r2, r3, #0
   11582:	2301      	movs	r3, #1
   11584:	4013      	ands	r3, r2
   11586:	d004      	beq.n	11592 <_adc_interrupt_handler+0xa2>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   11588:	68fb      	ldr	r3, [r7, #12]
   1158a:	685b      	ldr	r3, [r3, #4]
   1158c:	68fa      	ldr	r2, [r7, #12]
   1158e:	1c10      	adds	r0, r2, #0
   11590:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   11592:	68ba      	ldr	r2, [r7, #8]
   11594:	2304      	movs	r3, #4
   11596:	4013      	ands	r3, r2
   11598:	d00e      	beq.n	115b8 <_adc_interrupt_handler+0xc8>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   1159a:	68fb      	ldr	r3, [r7, #12]
   1159c:	681b      	ldr	r3, [r3, #0]
   1159e:	2204      	movs	r2, #4
   115a0:	761a      	strb	r2, [r3, #24]
		if(module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) {
   115a2:	68fb      	ldr	r3, [r7, #12]
   115a4:	7ddb      	ldrb	r3, [r3, #23]
   115a6:	1c1a      	adds	r2, r3, #0
   115a8:	2302      	movs	r3, #2
   115aa:	4013      	ands	r3, r2
   115ac:	d004      	beq.n	115b8 <_adc_interrupt_handler+0xc8>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   115ae:	68fb      	ldr	r3, [r7, #12]
   115b0:	689b      	ldr	r3, [r3, #8]
   115b2:	68fa      	ldr	r2, [r7, #12]
   115b4:	1c10      	adds	r0, r2, #0
   115b6:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   115b8:	68ba      	ldr	r2, [r7, #8]
   115ba:	2302      	movs	r3, #2
   115bc:	4013      	ands	r3, r2
   115be:	d00e      	beq.n	115de <_adc_interrupt_handler+0xee>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   115c0:	68fb      	ldr	r3, [r7, #12]
   115c2:	681b      	ldr	r3, [r3, #0]
   115c4:	2202      	movs	r2, #2
   115c6:	761a      	strb	r2, [r3, #24]
		if(module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) {
   115c8:	68fb      	ldr	r3, [r7, #12]
   115ca:	7ddb      	ldrb	r3, [r3, #23]
   115cc:	1c1a      	adds	r2, r3, #0
   115ce:	2304      	movs	r3, #4
   115d0:	4013      	ands	r3, r2
   115d2:	d004      	beq.n	115de <_adc_interrupt_handler+0xee>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   115d4:	68fb      	ldr	r3, [r7, #12]
   115d6:	68db      	ldr	r3, [r3, #12]
   115d8:	68fa      	ldr	r2, [r7, #12]
   115da:	1c10      	adds	r0, r2, #0
   115dc:	4798      	blx	r3
		}
	}
}
   115de:	46bd      	mov	sp, r7
   115e0:	b004      	add	sp, #16
   115e2:	bd80      	pop	{r7, pc}
   115e4:	200011c4 	.word	0x200011c4
   115e8:	0001133d 	.word	0x0001133d
   115ec:	00011421 	.word	0x00011421

000115f0 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   115f0:	b580      	push	{r7, lr}
   115f2:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   115f4:	2000      	movs	r0, #0
   115f6:	4b02      	ldr	r3, [pc, #8]	; (11600 <ADC_Handler+0x10>)
   115f8:	4798      	blx	r3
}
   115fa:	46bd      	mov	sp, r7
   115fc:	bd80      	pop	{r7, pc}
   115fe:	46c0      	nop			; (mov r8, r8)
   11600:	000114f1 	.word	0x000114f1

00011604 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
   11604:	b580      	push	{r7, lr}
   11606:	af00      	add	r7, sp, #0
	return test_case_ptr;
   11608:	4b02      	ldr	r3, [pc, #8]	; (11614 <test_get_case+0x10>)
   1160a:	681b      	ldr	r3, [r3, #0]
}
   1160c:	1c18      	adds	r0, r3, #0
   1160e:	46bd      	mov	sp, r7
   11610:	bd80      	pop	{r7, pc}
   11612:	46c0      	nop			; (mov r8, r8)
   11614:	2000041c 	.word	0x2000041c

00011618 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   11618:	b590      	push	{r4, r7, lr}
   1161a:	b087      	sub	sp, #28
   1161c:	af02      	add	r7, sp, #8
   1161e:	1c02      	adds	r2, r0, #0
   11620:	1dfb      	adds	r3, r7, #7
   11622:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   11624:	1c3b      	adds	r3, r7, #0
   11626:	330f      	adds	r3, #15
   11628:	1dfa      	adds	r2, r7, #7
   1162a:	7812      	ldrb	r2, [r2, #0]
   1162c:	0952      	lsrs	r2, r2, #5
   1162e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   11630:	1c3b      	adds	r3, r7, #0
   11632:	330f      	adds	r3, #15
   11634:	781b      	ldrb	r3, [r3, #0]
   11636:	2b00      	cmp	r3, #0
   11638:	d10b      	bne.n	11652 <_extint_get_eic_from_channel+0x3a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1163a:	4b16      	ldr	r3, [pc, #88]	; (11694 <_extint_get_eic_from_channel+0x7c>)
   1163c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   1163e:	1c3b      	adds	r3, r7, #0
   11640:	330f      	adds	r3, #15
   11642:	781b      	ldrb	r3, [r3, #0]
   11644:	009b      	lsls	r3, r3, #2
   11646:	2210      	movs	r2, #16
   11648:	19d2      	adds	r2, r2, r7
   1164a:	18d3      	adds	r3, r2, r3
   1164c:	3b08      	subs	r3, #8
   1164e:	681b      	ldr	r3, [r3, #0]
   11650:	e01c      	b.n	1168c <_extint_get_eic_from_channel+0x74>
	} else {
		Assert(false);
   11652:	4b11      	ldr	r3, [pc, #68]	; (11698 <_extint_get_eic_from_channel+0x80>)
   11654:	4798      	blx	r3
   11656:	1c03      	adds	r3, r0, #0
   11658:	2b00      	cmp	r3, #0
   1165a:	d00f      	beq.n	1167c <_extint_get_eic_from_channel+0x64>
   1165c:	4b0e      	ldr	r3, [pc, #56]	; (11698 <_extint_get_eic_from_channel+0x80>)
   1165e:	4798      	blx	r3
   11660:	1c01      	adds	r1, r0, #0
   11662:	4a0e      	ldr	r2, [pc, #56]	; (1169c <_extint_get_eic_from_channel+0x84>)
   11664:	2368      	movs	r3, #104	; 0x68
   11666:	33ff      	adds	r3, #255	; 0xff
   11668:	480d      	ldr	r0, [pc, #52]	; (116a0 <_extint_get_eic_from_channel+0x88>)
   1166a:	9000      	str	r0, [sp, #0]
   1166c:	480d      	ldr	r0, [pc, #52]	; (116a4 <_extint_get_eic_from_channel+0x8c>)
   1166e:	9001      	str	r0, [sp, #4]
   11670:	1c08      	adds	r0, r1, #0
   11672:	2101      	movs	r1, #1
   11674:	4c0c      	ldr	r4, [pc, #48]	; (116a8 <_extint_get_eic_from_channel+0x90>)
   11676:	47a0      	blx	r4
		return NULL;
   11678:	2300      	movs	r3, #0
   1167a:	e007      	b.n	1168c <_extint_get_eic_from_channel+0x74>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
   1167c:	480b      	ldr	r0, [pc, #44]	; (116ac <_extint_get_eic_from_channel+0x94>)
   1167e:	4909      	ldr	r1, [pc, #36]	; (116a4 <_extint_get_eic_from_channel+0x8c>)
   11680:	4a06      	ldr	r2, [pc, #24]	; (1169c <_extint_get_eic_from_channel+0x84>)
   11682:	2368      	movs	r3, #104	; 0x68
   11684:	33ff      	adds	r3, #255	; 0xff
   11686:	4c0a      	ldr	r4, [pc, #40]	; (116b0 <_extint_get_eic_from_channel+0x98>)
   11688:	47a0      	blx	r4
   1168a:	e7fe      	b.n	1168a <_extint_get_eic_from_channel+0x72>
		return NULL;
	}
}
   1168c:	1c18      	adds	r0, r3, #0
   1168e:	46bd      	mov	sp, r7
   11690:	b005      	add	sp, #20
   11692:	bd90      	pop	{r4, r7, pc}
   11694:	40001800 	.word	0x40001800
   11698:	00011605 	.word	0x00011605
   1169c:	00025ef8 	.word	0x00025ef8
   116a0:	00025f20 	.word	0x00025f20
   116a4:	00025f38 	.word	0x00025f38
   116a8:	000106e9 	.word	0x000106e9
   116ac:	00025f40 	.word	0x00025f40
   116b0:	0001b62d 	.word	0x0001b62d

000116b4 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   116b4:	b580      	push	{r7, lr}
   116b6:	b084      	sub	sp, #16
   116b8:	af00      	add	r7, sp, #0
   116ba:	1c02      	adds	r2, r0, #0
   116bc:	1dfb      	adds	r3, r7, #7
   116be:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   116c0:	1dfb      	adds	r3, r7, #7
   116c2:	781b      	ldrb	r3, [r3, #0]
   116c4:	1c18      	adds	r0, r3, #0
   116c6:	4b0c      	ldr	r3, [pc, #48]	; (116f8 <extint_chan_is_detected+0x44>)
   116c8:	4798      	blx	r3
   116ca:	1c03      	adds	r3, r0, #0
   116cc:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   116ce:	1dfb      	adds	r3, r7, #7
   116d0:	781a      	ldrb	r2, [r3, #0]
   116d2:	231f      	movs	r3, #31
   116d4:	4013      	ands	r3, r2
   116d6:	2201      	movs	r2, #1
   116d8:	1c11      	adds	r1, r2, #0
   116da:	4099      	lsls	r1, r3
   116dc:	1c0b      	adds	r3, r1, #0
   116de:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   116e0:	68fb      	ldr	r3, [r7, #12]
   116e2:	691b      	ldr	r3, [r3, #16]
   116e4:	68ba      	ldr	r2, [r7, #8]
   116e6:	4013      	ands	r3, r2
   116e8:	1e5a      	subs	r2, r3, #1
   116ea:	4193      	sbcs	r3, r2
   116ec:	b2db      	uxtb	r3, r3
}
   116ee:	1c18      	adds	r0, r3, #0
   116f0:	46bd      	mov	sp, r7
   116f2:	b004      	add	sp, #16
   116f4:	bd80      	pop	{r7, pc}
   116f6:	46c0      	nop			; (mov r8, r8)
   116f8:	00011619 	.word	0x00011619

000116fc <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check.
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   116fc:	b580      	push	{r7, lr}
   116fe:	b084      	sub	sp, #16
   11700:	af00      	add	r7, sp, #0
   11702:	1c02      	adds	r2, r0, #0
   11704:	1dfb      	adds	r3, r7, #7
   11706:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   11708:	1dfb      	adds	r3, r7, #7
   1170a:	781b      	ldrb	r3, [r3, #0]
   1170c:	1c18      	adds	r0, r3, #0
   1170e:	4b09      	ldr	r3, [pc, #36]	; (11734 <extint_chan_clear_detected+0x38>)
   11710:	4798      	blx	r3
   11712:	1c03      	adds	r3, r0, #0
   11714:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   11716:	1dfb      	adds	r3, r7, #7
   11718:	781a      	ldrb	r2, [r3, #0]
   1171a:	231f      	movs	r3, #31
   1171c:	4013      	ands	r3, r2
   1171e:	2201      	movs	r2, #1
   11720:	1c11      	adds	r1, r2, #0
   11722:	4099      	lsls	r1, r3
   11724:	1c0b      	adds	r3, r1, #0
   11726:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   11728:	68fb      	ldr	r3, [r7, #12]
   1172a:	68ba      	ldr	r2, [r7, #8]
   1172c:	611a      	str	r2, [r3, #16]
}
   1172e:	46bd      	mov	sp, r7
   11730:	b004      	add	sp, #16
   11732:	bd80      	pop	{r7, pc}
   11734:	00011619 	.word	0x00011619

00011738 <EIC_Handler>:
	return STATUS_OK;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   11738:	b580      	push	{r7, lr}
   1173a:	b082      	sub	sp, #8
   1173c:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (uint32_t i = 0; i < (32 * EIC_INST_NUM); i++) {
   1173e:	2300      	movs	r3, #0
   11740:	607b      	str	r3, [r7, #4]
   11742:	e02b      	b.n	1179c <EIC_Handler+0x64>
		if (extint_chan_is_detected(i)) {
   11744:	687b      	ldr	r3, [r7, #4]
   11746:	b2db      	uxtb	r3, r3
   11748:	1c18      	adds	r0, r3, #0
   1174a:	4b17      	ldr	r3, [pc, #92]	; (117a8 <EIC_Handler+0x70>)
   1174c:	4798      	blx	r3
   1174e:	1c03      	adds	r3, r0, #0
   11750:	2b00      	cmp	r3, #0
   11752:	d020      	beq.n	11796 <EIC_Handler+0x5e>
			/* Clear flag */
			extint_chan_clear_detected(i);
   11754:	687b      	ldr	r3, [r7, #4]
   11756:	b2db      	uxtb	r3, r3
   11758:	1c18      	adds	r0, r3, #0
   1175a:	4b14      	ldr	r3, [pc, #80]	; (117ac <EIC_Handler+0x74>)
   1175c:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			for (uint8_t j = 0; j < EXTINT_CALLBACKS_MAX; j++) {
   1175e:	1cfb      	adds	r3, r7, #3
   11760:	2200      	movs	r2, #0
   11762:	701a      	strb	r2, [r3, #0]
   11764:	e013      	b.n	1178e <EIC_Handler+0x56>
				if (_extint_dev.callbacks[j] != NULL) {
   11766:	1cfb      	adds	r3, r7, #3
   11768:	781a      	ldrb	r2, [r3, #0]
   1176a:	4b11      	ldr	r3, [pc, #68]	; (117b0 <EIC_Handler+0x78>)
   1176c:	0092      	lsls	r2, r2, #2
   1176e:	58d3      	ldr	r3, [r2, r3]
   11770:	2b00      	cmp	r3, #0
   11772:	d007      	beq.n	11784 <EIC_Handler+0x4c>
					/* Run the registered callback */
					_extint_dev.callbacks[j](i);
   11774:	1cfb      	adds	r3, r7, #3
   11776:	781a      	ldrb	r2, [r3, #0]
   11778:	4b0d      	ldr	r3, [pc, #52]	; (117b0 <EIC_Handler+0x78>)
   1177a:	0092      	lsls	r2, r2, #2
   1177c:	58d3      	ldr	r3, [r2, r3]
   1177e:	687a      	ldr	r2, [r7, #4]
   11780:	1c10      	adds	r0, r2, #0
   11782:	4798      	blx	r3
	for (uint32_t i = 0; i < (32 * EIC_INST_NUM); i++) {
		if (extint_chan_is_detected(i)) {
			/* Clear flag */
			extint_chan_clear_detected(i);
			/* Find any associated callback entries in the callback table */
			for (uint8_t j = 0; j < EXTINT_CALLBACKS_MAX; j++) {
   11784:	1cfb      	adds	r3, r7, #3
   11786:	781a      	ldrb	r2, [r3, #0]
   11788:	1cfb      	adds	r3, r7, #3
   1178a:	3201      	adds	r2, #1
   1178c:	701a      	strb	r2, [r3, #0]
   1178e:	1cfb      	adds	r3, r7, #3
   11790:	781b      	ldrb	r3, [r3, #0]
   11792:	2b09      	cmp	r3, #9
   11794:	d9e7      	bls.n	11766 <EIC_Handler+0x2e>

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (uint32_t i = 0; i < (32 * EIC_INST_NUM); i++) {
   11796:	687b      	ldr	r3, [r7, #4]
   11798:	3301      	adds	r3, #1
   1179a:	607b      	str	r3, [r7, #4]
   1179c:	687b      	ldr	r3, [r7, #4]
   1179e:	2b1f      	cmp	r3, #31
   117a0:	d9d0      	bls.n	11744 <EIC_Handler+0xc>
					_extint_dev.callbacks[j](i);
				}
			}
		}
	}
}
   117a2:	46bd      	mov	sp, r7
   117a4:	b002      	add	sp, #8
   117a6:	bd80      	pop	{r7, pc}
   117a8:	000116b5 	.word	0x000116b5
   117ac:	000116fd 	.word	0x000116fd
   117b0:	200011c8 	.word	0x200011c8

000117b4 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
   117b4:	b580      	push	{r7, lr}
   117b6:	af00      	add	r7, sp, #0
	return test_case_ptr;
   117b8:	4b02      	ldr	r3, [pc, #8]	; (117c4 <test_get_case+0x10>)
   117ba:	681b      	ldr	r3, [r3, #0]
}
   117bc:	1c18      	adds	r0, r3, #0
   117be:	46bd      	mov	sp, r7
   117c0:	bd80      	pop	{r7, pc}
   117c2:	46c0      	nop			; (mov r8, r8)
   117c4:	2000041c 	.word	0x2000041c

000117c8 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
   117c8:	b580      	push	{r7, lr}
   117ca:	b082      	sub	sp, #8
   117cc:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   117ce:	4b07      	ldr	r3, [pc, #28]	; (117ec <nvm_is_ready+0x24>)
   117d0:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   117d2:	687b      	ldr	r3, [r7, #4]
   117d4:	695b      	ldr	r3, [r3, #20]
   117d6:	b2db      	uxtb	r3, r3
   117d8:	1c1a      	adds	r2, r3, #0
   117da:	2301      	movs	r3, #1
   117dc:	4013      	ands	r3, r2
   117de:	1e5a      	subs	r2, r3, #1
   117e0:	4193      	sbcs	r3, r2
   117e2:	b2db      	uxtb	r3, r3
}
   117e4:	1c18      	adds	r0, r3, #0
   117e6:	46bd      	mov	sp, r7
   117e8:	b002      	add	sp, #8
   117ea:	bd80      	pop	{r7, pc}
   117ec:	41004000 	.word	0x41004000

000117f0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   117f0:	b590      	push	{r4, r7, lr}
   117f2:	b085      	sub	sp, #20
   117f4:	af02      	add	r7, sp, #8
   117f6:	1c02      	adds	r2, r0, #0
   117f8:	6039      	str	r1, [r7, #0]
   117fa:	1dfb      	adds	r3, r7, #7
   117fc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   117fe:	1dfb      	adds	r3, r7, #7
   11800:	781b      	ldrb	r3, [r3, #0]
   11802:	2b01      	cmp	r3, #1
   11804:	d00a      	beq.n	1181c <system_apb_clock_set_mask+0x2c>
   11806:	2b02      	cmp	r3, #2
   11808:	d00f      	beq.n	1182a <system_apb_clock_set_mask+0x3a>
   1180a:	2b00      	cmp	r3, #0
   1180c:	d114      	bne.n	11838 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1180e:	4b1a      	ldr	r3, [pc, #104]	; (11878 <system_apb_clock_set_mask+0x88>)
   11810:	4a19      	ldr	r2, [pc, #100]	; (11878 <system_apb_clock_set_mask+0x88>)
   11812:	6991      	ldr	r1, [r2, #24]
   11814:	683a      	ldr	r2, [r7, #0]
   11816:	430a      	orrs	r2, r1
   11818:	619a      	str	r2, [r3, #24]
			break;
   1181a:	e028      	b.n	1186e <system_apb_clock_set_mask+0x7e>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   1181c:	4b16      	ldr	r3, [pc, #88]	; (11878 <system_apb_clock_set_mask+0x88>)
   1181e:	4a16      	ldr	r2, [pc, #88]	; (11878 <system_apb_clock_set_mask+0x88>)
   11820:	69d1      	ldr	r1, [r2, #28]
   11822:	683a      	ldr	r2, [r7, #0]
   11824:	430a      	orrs	r2, r1
   11826:	61da      	str	r2, [r3, #28]
			break;
   11828:	e021      	b.n	1186e <system_apb_clock_set_mask+0x7e>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   1182a:	4b13      	ldr	r3, [pc, #76]	; (11878 <system_apb_clock_set_mask+0x88>)
   1182c:	4a12      	ldr	r2, [pc, #72]	; (11878 <system_apb_clock_set_mask+0x88>)
   1182e:	6a11      	ldr	r1, [r2, #32]
   11830:	683a      	ldr	r2, [r7, #0]
   11832:	430a      	orrs	r2, r1
   11834:	621a      	str	r2, [r3, #32]
			break;
   11836:	e01a      	b.n	1186e <system_apb_clock_set_mask+0x7e>

		default:
			Assert(false);
   11838:	4b10      	ldr	r3, [pc, #64]	; (1187c <system_apb_clock_set_mask+0x8c>)
   1183a:	4798      	blx	r3
   1183c:	1c03      	adds	r3, r0, #0
   1183e:	2b00      	cmp	r3, #0
   11840:	d00e      	beq.n	11860 <system_apb_clock_set_mask+0x70>
   11842:	4b0e      	ldr	r3, [pc, #56]	; (1187c <system_apb_clock_set_mask+0x8c>)
   11844:	4798      	blx	r3
   11846:	1c01      	adds	r1, r0, #0
   11848:	4a0d      	ldr	r2, [pc, #52]	; (11880 <system_apb_clock_set_mask+0x90>)
   1184a:	4b0e      	ldr	r3, [pc, #56]	; (11884 <system_apb_clock_set_mask+0x94>)
   1184c:	480e      	ldr	r0, [pc, #56]	; (11888 <system_apb_clock_set_mask+0x98>)
   1184e:	9000      	str	r0, [sp, #0]
   11850:	480e      	ldr	r0, [pc, #56]	; (1188c <system_apb_clock_set_mask+0x9c>)
   11852:	9001      	str	r0, [sp, #4]
   11854:	1c08      	adds	r0, r1, #0
   11856:	2101      	movs	r1, #1
   11858:	4c0d      	ldr	r4, [pc, #52]	; (11890 <system_apb_clock_set_mask+0xa0>)
   1185a:	47a0      	blx	r4
			return STATUS_ERR_INVALID_ARG;
   1185c:	2317      	movs	r3, #23
   1185e:	e007      	b.n	11870 <system_apb_clock_set_mask+0x80>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
			break;

		default:
			Assert(false);
   11860:	480c      	ldr	r0, [pc, #48]	; (11894 <system_apb_clock_set_mask+0xa4>)
   11862:	490a      	ldr	r1, [pc, #40]	; (1188c <system_apb_clock_set_mask+0x9c>)
   11864:	4a06      	ldr	r2, [pc, #24]	; (11880 <system_apb_clock_set_mask+0x90>)
   11866:	4b07      	ldr	r3, [pc, #28]	; (11884 <system_apb_clock_set_mask+0x94>)
   11868:	4c0b      	ldr	r4, [pc, #44]	; (11898 <system_apb_clock_set_mask+0xa8>)
   1186a:	47a0      	blx	r4
   1186c:	e7fe      	b.n	1186c <system_apb_clock_set_mask+0x7c>
			return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
   1186e:	2300      	movs	r3, #0
}
   11870:	1c18      	adds	r0, r3, #0
   11872:	46bd      	mov	sp, r7
   11874:	b003      	add	sp, #12
   11876:	bd90      	pop	{r4, r7, pc}
   11878:	40000400 	.word	0x40000400
   1187c:	000117b5 	.word	0x000117b5
   11880:	00025fa4 	.word	0x00025fa4
   11884:	00000409 	.word	0x00000409
   11888:	00025fd4 	.word	0x00025fd4
   1188c:	00025fec 	.word	0x00025fec
   11890:	000106e9 	.word	0x000106e9
   11894:	00025ff4 	.word	0x00025ff4
   11898:	0001b62d 	.word	0x0001b62d

0001189c <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
   1189c:	b580      	push	{r7, lr}
   1189e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   118a0:	4b01      	ldr	r3, [pc, #4]	; (118a8 <system_interrupt_enter_critical_section+0xc>)
   118a2:	4798      	blx	r3
}
   118a4:	46bd      	mov	sp, r7
   118a6:	bd80      	pop	{r7, pc}
   118a8:	000105f1 	.word	0x000105f1

000118ac <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
   118ac:	b580      	push	{r7, lr}
   118ae:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   118b0:	4b01      	ldr	r3, [pc, #4]	; (118b8 <system_interrupt_leave_critical_section+0xc>)
   118b2:	4798      	blx	r3
}
   118b4:	46bd      	mov	sp, r7
   118b6:	bd80      	pop	{r7, pc}
   118b8:	00010641 	.word	0x00010641

000118bc <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
   118bc:	b590      	push	{r4, r7, lr}
   118be:	b087      	sub	sp, #28
   118c0:	af02      	add	r7, sp, #8
   118c2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);
   118c4:	4b36      	ldr	r3, [pc, #216]	; (119a0 <nvm_set_config+0xe4>)
   118c6:	4798      	blx	r3
   118c8:	1c03      	adds	r3, r0, #0
   118ca:	2b00      	cmp	r3, #0
   118cc:	d011      	beq.n	118f2 <nvm_set_config+0x36>
   118ce:	687b      	ldr	r3, [r7, #4]
   118d0:	2b00      	cmp	r3, #0
   118d2:	d11b      	bne.n	1190c <nvm_set_config+0x50>
   118d4:	4b32      	ldr	r3, [pc, #200]	; (119a0 <nvm_set_config+0xe4>)
   118d6:	4798      	blx	r3
   118d8:	1c02      	adds	r2, r0, #0
   118da:	4b32      	ldr	r3, [pc, #200]	; (119a4 <nvm_set_config+0xe8>)
   118dc:	4932      	ldr	r1, [pc, #200]	; (119a8 <nvm_set_config+0xec>)
   118de:	9100      	str	r1, [sp, #0]
   118e0:	4932      	ldr	r1, [pc, #200]	; (119ac <nvm_set_config+0xf0>)
   118e2:	9101      	str	r1, [sp, #4]
   118e4:	1c10      	adds	r0, r2, #0
   118e6:	2101      	movs	r1, #1
   118e8:	1c1a      	adds	r2, r3, #0
   118ea:	2369      	movs	r3, #105	; 0x69
   118ec:	4c30      	ldr	r4, [pc, #192]	; (119b0 <nvm_set_config+0xf4>)
   118ee:	47a0      	blx	r4
   118f0:	e00c      	b.n	1190c <nvm_set_config+0x50>
   118f2:	687b      	ldr	r3, [r7, #4]
   118f4:	2b00      	cmp	r3, #0
   118f6:	d109      	bne.n	1190c <nvm_set_config+0x50>
   118f8:	492e      	ldr	r1, [pc, #184]	; (119b4 <nvm_set_config+0xf8>)
   118fa:	4a2c      	ldr	r2, [pc, #176]	; (119ac <nvm_set_config+0xf0>)
   118fc:	4b29      	ldr	r3, [pc, #164]	; (119a4 <nvm_set_config+0xe8>)
   118fe:	1c08      	adds	r0, r1, #0
   11900:	1c11      	adds	r1, r2, #0
   11902:	1c1a      	adds	r2, r3, #0
   11904:	2369      	movs	r3, #105	; 0x69
   11906:	4c2c      	ldr	r4, [pc, #176]	; (119b8 <nvm_set_config+0xfc>)
   11908:	47a0      	blx	r4
   1190a:	e7fe      	b.n	1190a <nvm_set_config+0x4e>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   1190c:	4b2b      	ldr	r3, [pc, #172]	; (119bc <nvm_set_config+0x100>)
   1190e:	60fb      	str	r3, [r7, #12]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
   11910:	2001      	movs	r0, #1
   11912:	2104      	movs	r1, #4
   11914:	4b2a      	ldr	r3, [pc, #168]	; (119c0 <nvm_set_config+0x104>)
   11916:	4798      	blx	r3

	/* Clear error flags */
	nvm_module->STATUS.reg &= ~NVMCTRL_STATUS_MASK;
   11918:	68fb      	ldr	r3, [r7, #12]
   1191a:	699b      	ldr	r3, [r3, #24]
   1191c:	b29a      	uxth	r2, r3
   1191e:	4b29      	ldr	r3, [pc, #164]	; (119c4 <nvm_set_config+0x108>)
   11920:	4013      	ands	r3, r2
   11922:	b29a      	uxth	r2, r3
   11924:	68fb      	ldr	r3, [r7, #12]
   11926:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11928:	4b27      	ldr	r3, [pc, #156]	; (119c8 <nvm_set_config+0x10c>)
   1192a:	4798      	blx	r3
   1192c:	1c03      	adds	r3, r0, #0
   1192e:	2201      	movs	r2, #1
   11930:	4053      	eors	r3, r2
   11932:	b2db      	uxtb	r3, r3
   11934:	2b00      	cmp	r3, #0
   11936:	d001      	beq.n	1193c <nvm_set_config+0x80>
		return STATUS_BUSY;
   11938:	2305      	movs	r3, #5
   1193a:	e02d      	b.n	11998 <nvm_set_config+0xdc>
	}

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			(config->sleep_power_mode  << NVMCTRL_CTRLB_SLEEPPRM_Pos) |
   1193c:	687b      	ldr	r3, [r7, #4]
   1193e:	881b      	ldrh	r3, [r3, #0]
   11940:	021a      	lsls	r2, r3, #8
			(config->manual_page_write << NVMCTRL_CTRLB_MANW_Pos) |
   11942:	687b      	ldr	r3, [r7, #4]
   11944:	789b      	ldrb	r3, [r3, #2]
   11946:	01db      	lsls	r3, r3, #7
		return STATUS_BUSY;
	}

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			(config->sleep_power_mode  << NVMCTRL_CTRLB_SLEEPPRM_Pos) |
   11948:	431a      	orrs	r2, r3
			(config->manual_page_write << NVMCTRL_CTRLB_MANW_Pos) |
			(config->wait_states       << NVMCTRL_CTRLB_RWS_Pos);
   1194a:	687b      	ldr	r3, [r7, #4]
   1194c:	78db      	ldrb	r3, [r3, #3]
   1194e:	005b      	lsls	r3, r3, #1
	}

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			(config->sleep_power_mode  << NVMCTRL_CTRLB_SLEEPPRM_Pos) |
			(config->manual_page_write << NVMCTRL_CTRLB_MANW_Pos) |
   11950:	4313      	orrs	r3, r2
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
	}

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
   11952:	1c1a      	adds	r2, r3, #0
   11954:	68fb      	ldr	r3, [r7, #12]
   11956:	605a      	str	r2, [r3, #4]
			(config->sleep_power_mode  << NVMCTRL_CTRLB_SLEEPPRM_Pos) |
			(config->manual_page_write << NVMCTRL_CTRLB_MANW_Pos) |
			(config->wait_states       << NVMCTRL_CTRLB_RWS_Pos);

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
   11958:	68fb      	ldr	r3, [r7, #12]
   1195a:	689b      	ldr	r3, [r3, #8]
   1195c:	035b      	lsls	r3, r3, #13
   1195e:	0f5b      	lsrs	r3, r3, #29
   11960:	b2db      	uxtb	r3, r3
   11962:	2208      	movs	r2, #8
   11964:	1c11      	adds	r1, r2, #0
   11966:	4099      	lsls	r1, r3
   11968:	1c0b      	adds	r3, r1, #0
   1196a:	b29a      	uxth	r2, r3
   1196c:	4b17      	ldr	r3, [pc, #92]	; (119cc <nvm_set_config+0x110>)
   1196e:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
   11970:	68fb      	ldr	r3, [r7, #12]
   11972:	689b      	ldr	r3, [r3, #8]
   11974:	b29a      	uxth	r2, r3
   11976:	4b15      	ldr	r3, [pc, #84]	; (119cc <nvm_set_config+0x110>)
   11978:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
   1197a:	687b      	ldr	r3, [r7, #4]
   1197c:	789a      	ldrb	r2, [r3, #2]
   1197e:	4b13      	ldr	r3, [pc, #76]	; (119cc <nvm_set_config+0x110>)
   11980:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   11982:	68fb      	ldr	r3, [r7, #12]
   11984:	699b      	ldr	r3, [r3, #24]
   11986:	b29b      	uxth	r3, r3
   11988:	1c1a      	adds	r2, r3, #0
   1198a:	2380      	movs	r3, #128	; 0x80
   1198c:	005b      	lsls	r3, r3, #1
   1198e:	4013      	ands	r3, r2
   11990:	d001      	beq.n	11996 <nvm_set_config+0xda>
		return STATUS_ERR_IO;
   11992:	2310      	movs	r3, #16
   11994:	e000      	b.n	11998 <nvm_set_config+0xdc>
	}

	return STATUS_OK;
   11996:	2300      	movs	r3, #0
}
   11998:	1c18      	adds	r0, r3, #0
   1199a:	46bd      	mov	sp, r7
   1199c:	b005      	add	sp, #20
   1199e:	bd90      	pop	{r4, r7, pc}
   119a0:	000117b5 	.word	0x000117b5
   119a4:	00026018 	.word	0x00026018
   119a8:	00025fd4 	.word	0x00025fd4
   119ac:	0002603c 	.word	0x0002603c
   119b0:	000106e9 	.word	0x000106e9
   119b4:	00025ff4 	.word	0x00025ff4
   119b8:	0001b62d 	.word	0x0001b62d
   119bc:	41004000 	.word	0x41004000
   119c0:	000117f1 	.word	0x000117f1
   119c4:	fffffee0 	.word	0xfffffee0
   119c8:	000117c9 	.word	0x000117c9
   119cc:	20000420 	.word	0x20000420

000119d0 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
   119d0:	b580      	push	{r7, lr}
   119d2:	b086      	sub	sp, #24
   119d4:	af00      	add	r7, sp, #0
   119d6:	60b9      	str	r1, [r7, #8]
   119d8:	607a      	str	r2, [r7, #4]
   119da:	1c3b      	adds	r3, r7, #0
   119dc:	330f      	adds	r3, #15
   119de:	1c02      	adds	r2, r0, #0
   119e0:	701a      	strb	r2, [r3, #0]
	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)){
   119e2:	4b27      	ldr	r3, [pc, #156]	; (11a80 <nvm_execute_command+0xb0>)
   119e4:	881b      	ldrh	r3, [r3, #0]
   119e6:	4a26      	ldr	r2, [pc, #152]	; (11a80 <nvm_execute_command+0xb0>)
   119e8:	8852      	ldrh	r2, [r2, #2]
   119ea:	435a      	muls	r2, r3
   119ec:	68bb      	ldr	r3, [r7, #8]
   119ee:	429a      	cmp	r2, r3
   119f0:	d201      	bcs.n	119f6 <nvm_execute_command+0x26>
		return STATUS_ERR_BAD_ADDRESS;
   119f2:	2318      	movs	r3, #24
   119f4:	e040      	b.n	11a78 <nvm_execute_command+0xa8>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   119f6:	4b23      	ldr	r3, [pc, #140]	; (11a84 <nvm_execute_command+0xb4>)
   119f8:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg &= ~NVMCTRL_STATUS_MASK;
   119fa:	697b      	ldr	r3, [r7, #20]
   119fc:	699b      	ldr	r3, [r3, #24]
   119fe:	b29a      	uxth	r2, r3
   11a00:	4b21      	ldr	r3, [pc, #132]	; (11a88 <nvm_execute_command+0xb8>)
   11a02:	4013      	ands	r3, r2
   11a04:	b29a      	uxth	r2, r3
   11a06:	697b      	ldr	r3, [r7, #20]
   11a08:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11a0a:	4b20      	ldr	r3, [pc, #128]	; (11a8c <nvm_execute_command+0xbc>)
   11a0c:	4798      	blx	r3
   11a0e:	1c03      	adds	r3, r0, #0
   11a10:	2201      	movs	r2, #1
   11a12:	4053      	eors	r3, r2
   11a14:	b2db      	uxtb	r3, r3
   11a16:	2b00      	cmp	r3, #0
   11a18:	d001      	beq.n	11a1e <nvm_execute_command+0x4e>
		return STATUS_BUSY;
   11a1a:	2305      	movs	r3, #5
   11a1c:	e02c      	b.n	11a78 <nvm_execute_command+0xa8>
	}

	switch (command) {
   11a1e:	1c3b      	adds	r3, r7, #0
   11a20:	330f      	adds	r3, #15
   11a22:	781b      	ldrb	r3, [r3, #0]
   11a24:	2b45      	cmp	r3, #69	; 0x45
   11a26:	d81a      	bhi.n	11a5e <nvm_execute_command+0x8e>
   11a28:	009a      	lsls	r2, r3, #2
   11a2a:	4b19      	ldr	r3, [pc, #100]	; (11a90 <nvm_execute_command+0xc0>)
   11a2c:	18d3      	adds	r3, r2, r3
   11a2e:	681b      	ldr	r3, [r3, #0]
   11a30:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if(nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   11a32:	697b      	ldr	r3, [r7, #20]
   11a34:	699b      	ldr	r3, [r3, #24]
   11a36:	b29b      	uxth	r3, r3
   11a38:	1c1a      	adds	r2, r3, #0
   11a3a:	2380      	movs	r3, #128	; 0x80
   11a3c:	005b      	lsls	r3, r3, #1
   11a3e:	4013      	ands	r3, r2
   11a40:	d001      	beq.n	11a46 <nvm_execute_command+0x76>
				return STATUS_ERR_IO;
   11a42:	2310      	movs	r3, #16
   11a44:	e018      	b.n	11a78 <nvm_execute_command+0xa8>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   11a46:	68bb      	ldr	r3, [r7, #8]
   11a48:	089b      	lsrs	r3, r3, #2
   11a4a:	005a      	lsls	r2, r3, #1
   11a4c:	697b      	ldr	r3, [r7, #20]
   11a4e:	61da      	str	r2, [r3, #28]
			break;
   11a50:	e008      	b.n	11a64 <nvm_execute_command+0x94>
		case NVM_COMMAND_WRITE_PAGE:
		case NVM_COMMAND_LOCK_REGION:
		case NVM_COMMAND_UNLOCK_REGION:

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   11a52:	68bb      	ldr	r3, [r7, #8]
   11a54:	089b      	lsrs	r3, r3, #2
   11a56:	005a      	lsls	r2, r3, #1
   11a58:	697b      	ldr	r3, [r7, #20]
   11a5a:	61da      	str	r2, [r3, #28]
			break;
   11a5c:	e002      	b.n	11a64 <nvm_execute_command+0x94>
		case NVM_COMMAND_ENTER_LOW_POWER_MODE:
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
   11a5e:	2317      	movs	r3, #23
   11a60:	e00a      	b.n	11a78 <nvm_execute_command+0xa8>
		/* Commands not requiring address */
		case NVM_COMMAND_PAGE_BUFFER_CLEAR:
		case NVM_COMMAND_SET_SECURITY_BIT:
		case NVM_COMMAND_ENTER_LOW_POWER_MODE:
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;
   11a62:	46c0      	nop			; (mov r8, r8)
		default:
			return STATUS_ERR_INVALID_ARG;
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
   11a64:	1c3b      	adds	r3, r7, #0
   11a66:	330f      	adds	r3, #15
   11a68:	781b      	ldrb	r3, [r3, #0]
   11a6a:	b29b      	uxth	r3, r3
   11a6c:	4a09      	ldr	r2, [pc, #36]	; (11a94 <nvm_execute_command+0xc4>)
   11a6e:	4313      	orrs	r3, r2
   11a70:	b29a      	uxth	r2, r3
   11a72:	697b      	ldr	r3, [r7, #20]
   11a74:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
   11a76:	2300      	movs	r3, #0
}
   11a78:	1c18      	adds	r0, r3, #0
   11a7a:	46bd      	mov	sp, r7
   11a7c:	b006      	add	sp, #24
   11a7e:	bd80      	pop	{r7, pc}
   11a80:	20000420 	.word	0x20000420
   11a84:	41004000 	.word	0x41004000
   11a88:	fffffee0 	.word	0xfffffee0
   11a8c:	000117c9 	.word	0x000117c9
   11a90:	00026050 	.word	0x00026050
   11a94:	ffffa500 	.word	0xffffa500

00011a98 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
   11a98:	b580      	push	{r7, lr}
   11a9a:	b088      	sub	sp, #32
   11a9c:	af00      	add	r7, sp, #0
   11a9e:	60f8      	str	r0, [r7, #12]
   11aa0:	60b9      	str	r1, [r7, #8]
   11aa2:	1dbb      	adds	r3, r7, #6
   11aa4:	801a      	strh	r2, [r3, #0]
	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   11aa6:	4b3f      	ldr	r3, [pc, #252]	; (11ba4 <nvm_write_buffer+0x10c>)
   11aa8:	881b      	ldrh	r3, [r3, #0]
   11aaa:	4a3e      	ldr	r2, [pc, #248]	; (11ba4 <nvm_write_buffer+0x10c>)
   11aac:	8852      	ldrh	r2, [r2, #2]
   11aae:	435a      	muls	r2, r3
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
	/* Check if the destination address is valid */
	if (destination_address >
   11ab0:	68fb      	ldr	r3, [r7, #12]
   11ab2:	429a      	cmp	r2, r3
   11ab4:	d201      	bcs.n	11aba <nvm_write_buffer+0x22>
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
		return STATUS_ERR_BAD_ADDRESS;
   11ab6:	2318      	movs	r3, #24
   11ab8:	e070      	b.n	11b9c <nvm_write_buffer+0x104>
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
   11aba:	4b3a      	ldr	r3, [pc, #232]	; (11ba4 <nvm_write_buffer+0x10c>)
   11abc:	881b      	ldrh	r3, [r3, #0]
   11abe:	3b01      	subs	r3, #1
   11ac0:	68fa      	ldr	r2, [r7, #12]
   11ac2:	4013      	ands	r3, r2
   11ac4:	d001      	beq.n	11aca <nvm_write_buffer+0x32>
		return STATUS_ERR_BAD_ADDRESS;
   11ac6:	2318      	movs	r3, #24
   11ac8:	e068      	b.n	11b9c <nvm_write_buffer+0x104>
	}

	/* Check if the write length is longer than a NVM page */
	if (length > _nvm_dev.page_size) {
   11aca:	4b36      	ldr	r3, [pc, #216]	; (11ba4 <nvm_write_buffer+0x10c>)
   11acc:	881b      	ldrh	r3, [r3, #0]
   11ace:	1dba      	adds	r2, r7, #6
   11ad0:	8812      	ldrh	r2, [r2, #0]
   11ad2:	429a      	cmp	r2, r3
   11ad4:	d901      	bls.n	11ada <nvm_write_buffer+0x42>
		return STATUS_ERR_INVALID_ARG;
   11ad6:	2317      	movs	r3, #23
   11ad8:	e060      	b.n	11b9c <nvm_write_buffer+0x104>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11ada:	4b33      	ldr	r3, [pc, #204]	; (11ba8 <nvm_write_buffer+0x110>)
   11adc:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11ade:	4b33      	ldr	r3, [pc, #204]	; (11bac <nvm_write_buffer+0x114>)
   11ae0:	4798      	blx	r3
   11ae2:	1c03      	adds	r3, r0, #0
   11ae4:	2201      	movs	r2, #1
   11ae6:	4053      	eors	r3, r2
   11ae8:	b2db      	uxtb	r3, r3
   11aea:	2b00      	cmp	r3, #0
   11aec:	d001      	beq.n	11af2 <nvm_write_buffer+0x5a>
		return STATUS_BUSY;
   11aee:	2305      	movs	r3, #5
   11af0:	e054      	b.n	11b9c <nvm_write_buffer+0x104>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
   11af2:	697b      	ldr	r3, [r7, #20]
   11af4:	4a2e      	ldr	r2, [pc, #184]	; (11bb0 <nvm_write_buffer+0x118>)
   11af6:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
   11af8:	46c0      	nop			; (mov r8, r8)
   11afa:	4b2c      	ldr	r3, [pc, #176]	; (11bac <nvm_write_buffer+0x114>)
   11afc:	4798      	blx	r3
   11afe:	1c03      	adds	r3, r0, #0
   11b00:	2201      	movs	r2, #1
   11b02:	4053      	eors	r3, r2
   11b04:	b2db      	uxtb	r3, r3
   11b06:	2b00      	cmp	r3, #0
   11b08:	d1f7      	bne.n	11afa <nvm_write_buffer+0x62>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg &= ~NVMCTRL_STATUS_MASK;
   11b0a:	697b      	ldr	r3, [r7, #20]
   11b0c:	699b      	ldr	r3, [r3, #24]
   11b0e:	b29a      	uxth	r2, r3
   11b10:	4b28      	ldr	r3, [pc, #160]	; (11bb4 <nvm_write_buffer+0x11c>)
   11b12:	4013      	ands	r3, r2
   11b14:	b29a      	uxth	r2, r3
   11b16:	697b      	ldr	r3, [r7, #20]
   11b18:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
   11b1a:	68fb      	ldr	r3, [r7, #12]
   11b1c:	085b      	lsrs	r3, r3, #1
   11b1e:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   11b20:	1c3b      	adds	r3, r7, #0
   11b22:	331a      	adds	r3, #26
   11b24:	2200      	movs	r2, #0
   11b26:	801a      	strh	r2, [r3, #0]
   11b28:	e030      	b.n	11b8c <nvm_write_buffer+0xf4>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
   11b2a:	1c3b      	adds	r3, r7, #0
   11b2c:	331a      	adds	r3, #26
   11b2e:	881b      	ldrh	r3, [r3, #0]
   11b30:	68ba      	ldr	r2, [r7, #8]
   11b32:	18d3      	adds	r3, r2, r3
   11b34:	781a      	ldrb	r2, [r3, #0]
   11b36:	1c3b      	adds	r3, r7, #0
   11b38:	3318      	adds	r3, #24
   11b3a:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   11b3c:	1c3b      	adds	r3, r7, #0
   11b3e:	331a      	adds	r3, #26
   11b40:	881a      	ldrh	r2, [r3, #0]
   11b42:	1dbb      	adds	r3, r7, #6
   11b44:	881b      	ldrh	r3, [r3, #0]
   11b46:	3b01      	subs	r3, #1
   11b48:	429a      	cmp	r2, r3
   11b4a:	da10      	bge.n	11b6e <nvm_write_buffer+0xd6>
			data |= (buffer[i + 1] << 8);
   11b4c:	1c3b      	adds	r3, r7, #0
   11b4e:	331a      	adds	r3, #26
   11b50:	881b      	ldrh	r3, [r3, #0]
   11b52:	3301      	adds	r3, #1
   11b54:	68ba      	ldr	r2, [r7, #8]
   11b56:	18d3      	adds	r3, r2, r3
   11b58:	781b      	ldrb	r3, [r3, #0]
   11b5a:	021b      	lsls	r3, r3, #8
   11b5c:	b29a      	uxth	r2, r3
   11b5e:	1c3b      	adds	r3, r7, #0
   11b60:	3318      	adds	r3, #24
   11b62:	881b      	ldrh	r3, [r3, #0]
   11b64:	4313      	orrs	r3, r2
   11b66:	b29a      	uxth	r2, r3
   11b68:	1c3b      	adds	r3, r7, #0
   11b6a:	3318      	adds	r3, #24
   11b6c:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
   11b6e:	69fb      	ldr	r3, [r7, #28]
   11b70:	1c5a      	adds	r2, r3, #1
   11b72:	61fa      	str	r2, [r7, #28]
   11b74:	005b      	lsls	r3, r3, #1
   11b76:	1c3a      	adds	r2, r7, #0
   11b78:	3218      	adds	r2, #24
   11b7a:	8812      	ldrh	r2, [r2, #0]
   11b7c:	801a      	strh	r2, [r3, #0]

	uint32_t nvm_address = destination_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   11b7e:	1c3b      	adds	r3, r7, #0
   11b80:	331a      	adds	r3, #26
   11b82:	1c3a      	adds	r2, r7, #0
   11b84:	321a      	adds	r2, #26
   11b86:	8812      	ldrh	r2, [r2, #0]
   11b88:	3202      	adds	r2, #2
   11b8a:	801a      	strh	r2, [r3, #0]
   11b8c:	1c3a      	adds	r2, r7, #0
   11b8e:	321a      	adds	r2, #26
   11b90:	1dbb      	adds	r3, r7, #6
   11b92:	8812      	ldrh	r2, [r2, #0]
   11b94:	881b      	ldrh	r3, [r3, #0]
   11b96:	429a      	cmp	r2, r3
   11b98:	d3c7      	bcc.n	11b2a <nvm_write_buffer+0x92>

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
	}

	return STATUS_OK;
   11b9a:	2300      	movs	r3, #0
}
   11b9c:	1c18      	adds	r0, r3, #0
   11b9e:	46bd      	mov	sp, r7
   11ba0:	b008      	add	sp, #32
   11ba2:	bd80      	pop	{r7, pc}
   11ba4:	20000420 	.word	0x20000420
   11ba8:	41004000 	.word	0x41004000
   11bac:	000117c9 	.word	0x000117c9
   11bb0:	ffffa544 	.word	0xffffa544
   11bb4:	fffffee0 	.word	0xfffffee0

00011bb8 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
   11bb8:	b580      	push	{r7, lr}
   11bba:	b088      	sub	sp, #32
   11bbc:	af00      	add	r7, sp, #0
   11bbe:	60f8      	str	r0, [r7, #12]
   11bc0:	60b9      	str	r1, [r7, #8]
   11bc2:	1dbb      	adds	r3, r7, #6
   11bc4:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   11bc6:	4b38      	ldr	r3, [pc, #224]	; (11ca8 <nvm_read_buffer+0xf0>)
   11bc8:	881b      	ldrh	r3, [r3, #0]
   11bca:	4a37      	ldr	r2, [pc, #220]	; (11ca8 <nvm_read_buffer+0xf0>)
   11bcc:	8852      	ldrh	r2, [r2, #2]
   11bce:	435a      	muls	r2, r3
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
	/* Check if the source address is valid */
	if (source_address >
   11bd0:	68fb      	ldr	r3, [r7, #12]
   11bd2:	429a      	cmp	r2, r3
   11bd4:	d201      	bcs.n	11bda <nvm_read_buffer+0x22>
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
		return STATUS_ERR_BAD_ADDRESS;
   11bd6:	2318      	movs	r3, #24
   11bd8:	e062      	b.n	11ca0 <nvm_read_buffer+0xe8>
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
   11bda:	4b33      	ldr	r3, [pc, #204]	; (11ca8 <nvm_read_buffer+0xf0>)
   11bdc:	881b      	ldrh	r3, [r3, #0]
   11bde:	3b01      	subs	r3, #1
   11be0:	68fa      	ldr	r2, [r7, #12]
   11be2:	4013      	ands	r3, r2
   11be4:	d001      	beq.n	11bea <nvm_read_buffer+0x32>
		return STATUS_ERR_BAD_ADDRESS;
   11be6:	2318      	movs	r3, #24
   11be8:	e05a      	b.n	11ca0 <nvm_read_buffer+0xe8>
	}

	/* Check if the write length is longer than a NVM page */
	if (length > _nvm_dev.page_size) {
   11bea:	4b2f      	ldr	r3, [pc, #188]	; (11ca8 <nvm_read_buffer+0xf0>)
   11bec:	881b      	ldrh	r3, [r3, #0]
   11bee:	1dba      	adds	r2, r7, #6
   11bf0:	8812      	ldrh	r2, [r2, #0]
   11bf2:	429a      	cmp	r2, r3
   11bf4:	d901      	bls.n	11bfa <nvm_read_buffer+0x42>
		return STATUS_ERR_INVALID_ARG;
   11bf6:	2317      	movs	r3, #23
   11bf8:	e052      	b.n	11ca0 <nvm_read_buffer+0xe8>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11bfa:	4b2c      	ldr	r3, [pc, #176]	; (11cac <nvm_read_buffer+0xf4>)
   11bfc:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11bfe:	4b2c      	ldr	r3, [pc, #176]	; (11cb0 <nvm_read_buffer+0xf8>)
   11c00:	4798      	blx	r3
   11c02:	1c03      	adds	r3, r0, #0
   11c04:	2201      	movs	r2, #1
   11c06:	4053      	eors	r3, r2
   11c08:	b2db      	uxtb	r3, r3
   11c0a:	2b00      	cmp	r3, #0
   11c0c:	d001      	beq.n	11c12 <nvm_read_buffer+0x5a>
		return STATUS_BUSY;
   11c0e:	2305      	movs	r3, #5
   11c10:	e046      	b.n	11ca0 <nvm_read_buffer+0xe8>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg &= ~NVMCTRL_STATUS_MASK;
   11c12:	697b      	ldr	r3, [r7, #20]
   11c14:	699b      	ldr	r3, [r3, #24]
   11c16:	b29a      	uxth	r2, r3
   11c18:	4b26      	ldr	r3, [pc, #152]	; (11cb4 <nvm_read_buffer+0xfc>)
   11c1a:	4013      	ands	r3, r2
   11c1c:	b29a      	uxth	r2, r3
   11c1e:	697b      	ldr	r3, [r7, #20]
   11c20:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
   11c22:	68fb      	ldr	r3, [r7, #12]
   11c24:	085b      	lsrs	r3, r3, #1
   11c26:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   11c28:	1c3b      	adds	r3, r7, #0
   11c2a:	331a      	adds	r3, #26
   11c2c:	2200      	movs	r2, #0
   11c2e:	801a      	strh	r2, [r3, #0]
   11c30:	e02e      	b.n	11c90 <nvm_read_buffer+0xd8>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
   11c32:	69fb      	ldr	r3, [r7, #28]
   11c34:	1c5a      	adds	r2, r3, #1
   11c36:	61fa      	str	r2, [r7, #28]
   11c38:	005b      	lsls	r3, r3, #1
   11c3a:	1c1a      	adds	r2, r3, #0
   11c3c:	1c3b      	adds	r3, r7, #0
   11c3e:	3312      	adds	r3, #18
   11c40:	8812      	ldrh	r2, [r2, #0]
   11c42:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
   11c44:	1c3b      	adds	r3, r7, #0
   11c46:	331a      	adds	r3, #26
   11c48:	881b      	ldrh	r3, [r3, #0]
   11c4a:	68ba      	ldr	r2, [r7, #8]
   11c4c:	18d3      	adds	r3, r2, r3
   11c4e:	1c3a      	adds	r2, r7, #0
   11c50:	3212      	adds	r2, #18
   11c52:	8812      	ldrh	r2, [r2, #0]
   11c54:	b2d2      	uxtb	r2, r2
   11c56:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   11c58:	1c3b      	adds	r3, r7, #0
   11c5a:	331a      	adds	r3, #26
   11c5c:	881a      	ldrh	r2, [r3, #0]
   11c5e:	1dbb      	adds	r3, r7, #6
   11c60:	881b      	ldrh	r3, [r3, #0]
   11c62:	3b01      	subs	r3, #1
   11c64:	429a      	cmp	r2, r3
   11c66:	da0c      	bge.n	11c82 <nvm_read_buffer+0xca>
			buffer[i + 1] = (data >> 8);
   11c68:	1c3b      	adds	r3, r7, #0
   11c6a:	331a      	adds	r3, #26
   11c6c:	881b      	ldrh	r3, [r3, #0]
   11c6e:	3301      	adds	r3, #1
   11c70:	68ba      	ldr	r2, [r7, #8]
   11c72:	18d3      	adds	r3, r2, r3
   11c74:	1c3a      	adds	r2, r7, #0
   11c76:	3212      	adds	r2, #18
   11c78:	8812      	ldrh	r2, [r2, #0]
   11c7a:	0a12      	lsrs	r2, r2, #8
   11c7c:	b292      	uxth	r2, r2
   11c7e:	b2d2      	uxtb	r2, r2
   11c80:	701a      	strb	r2, [r3, #0]

	uint32_t page_address = source_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   11c82:	1c3b      	adds	r3, r7, #0
   11c84:	331a      	adds	r3, #26
   11c86:	1c3a      	adds	r2, r7, #0
   11c88:	321a      	adds	r2, #26
   11c8a:	8812      	ldrh	r2, [r2, #0]
   11c8c:	3202      	adds	r2, #2
   11c8e:	801a      	strh	r2, [r3, #0]
   11c90:	1c3a      	adds	r2, r7, #0
   11c92:	321a      	adds	r2, #26
   11c94:	1dbb      	adds	r3, r7, #6
   11c96:	8812      	ldrh	r2, [r2, #0]
   11c98:	881b      	ldrh	r3, [r3, #0]
   11c9a:	429a      	cmp	r2, r3
   11c9c:	d3c9      	bcc.n	11c32 <nvm_read_buffer+0x7a>
		if (i < (length - 1)) {
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
   11c9e:	2300      	movs	r3, #0
}
   11ca0:	1c18      	adds	r0, r3, #0
   11ca2:	46bd      	mov	sp, r7
   11ca4:	b008      	add	sp, #32
   11ca6:	bd80      	pop	{r7, pc}
   11ca8:	20000420 	.word	0x20000420
   11cac:	41004000 	.word	0x41004000
   11cb0:	000117c9 	.word	0x000117c9
   11cb4:	fffffee0 	.word	0xfffffee0

00011cb8 <nvm_erase_row>:
 *                                 acceptable range of the NVM memory region or
 *                                 not aligned to the start of a row
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
   11cb8:	b580      	push	{r7, lr}
   11cba:	b084      	sub	sp, #16
   11cbc:	af00      	add	r7, sp, #0
   11cbe:	6078      	str	r0, [r7, #4]
	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   11cc0:	4b19      	ldr	r3, [pc, #100]	; (11d28 <nvm_erase_row+0x70>)
   11cc2:	881b      	ldrh	r3, [r3, #0]
   11cc4:	4a18      	ldr	r2, [pc, #96]	; (11d28 <nvm_erase_row+0x70>)
   11cc6:	8852      	ldrh	r2, [r2, #2]
   11cc8:	435a      	muls	r2, r3
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
	/* Check if the row address is valid */
	if (row_address >
   11cca:	687b      	ldr	r3, [r7, #4]
   11ccc:	429a      	cmp	r2, r3
   11cce:	d201      	bcs.n	11cd4 <nvm_erase_row+0x1c>
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
		return STATUS_ERR_BAD_ADDRESS;
   11cd0:	2318      	movs	r3, #24
   11cd2:	e025      	b.n	11d20 <nvm_erase_row+0x68>
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
   11cd4:	4b14      	ldr	r3, [pc, #80]	; (11d28 <nvm_erase_row+0x70>)
   11cd6:	881b      	ldrh	r3, [r3, #0]
   11cd8:	009b      	lsls	r3, r3, #2
   11cda:	3b01      	subs	r3, #1
   11cdc:	687a      	ldr	r2, [r7, #4]
   11cde:	4013      	ands	r3, r2
   11ce0:	d001      	beq.n	11ce6 <nvm_erase_row+0x2e>
		return STATUS_ERR_BAD_ADDRESS;
   11ce2:	2318      	movs	r3, #24
   11ce4:	e01c      	b.n	11d20 <nvm_erase_row+0x68>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11ce6:	4b11      	ldr	r3, [pc, #68]	; (11d2c <nvm_erase_row+0x74>)
   11ce8:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11cea:	4b11      	ldr	r3, [pc, #68]	; (11d30 <nvm_erase_row+0x78>)
   11cec:	4798      	blx	r3
   11cee:	1c03      	adds	r3, r0, #0
   11cf0:	2201      	movs	r2, #1
   11cf2:	4053      	eors	r3, r2
   11cf4:	b2db      	uxtb	r3, r3
   11cf6:	2b00      	cmp	r3, #0
   11cf8:	d001      	beq.n	11cfe <nvm_erase_row+0x46>
		return STATUS_BUSY;
   11cfa:	2305      	movs	r3, #5
   11cfc:	e010      	b.n	11d20 <nvm_erase_row+0x68>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg &= ~NVMCTRL_STATUS_MASK;
   11cfe:	68fb      	ldr	r3, [r7, #12]
   11d00:	699b      	ldr	r3, [r3, #24]
   11d02:	b29a      	uxth	r2, r3
   11d04:	4b0b      	ldr	r3, [pc, #44]	; (11d34 <nvm_erase_row+0x7c>)
   11d06:	4013      	ands	r3, r2
   11d08:	b29a      	uxth	r2, r3
   11d0a:	68fb      	ldr	r3, [r7, #12]
   11d0c:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
   11d0e:	687b      	ldr	r3, [r7, #4]
   11d10:	089b      	lsrs	r3, r3, #2
   11d12:	005a      	lsls	r2, r3, #1
   11d14:	68fb      	ldr	r3, [r7, #12]
   11d16:	61da      	str	r2, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
   11d18:	68fb      	ldr	r3, [r7, #12]
   11d1a:	4a07      	ldr	r2, [pc, #28]	; (11d38 <nvm_erase_row+0x80>)
   11d1c:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
   11d1e:	2300      	movs	r3, #0
}
   11d20:	1c18      	adds	r0, r3, #0
   11d22:	46bd      	mov	sp, r7
   11d24:	b004      	add	sp, #16
   11d26:	bd80      	pop	{r7, pc}
   11d28:	20000420 	.word	0x20000420
   11d2c:	41004000 	.word	0x41004000
   11d30:	000117c9 	.word	0x000117c9
   11d34:	fffffee0 	.word	0xfffffee0
   11d38:	ffffa502 	.word	0xffffa502

00011d3c <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
   11d3c:	b590      	push	{r4, r7, lr}
   11d3e:	b089      	sub	sp, #36	; 0x24
   11d40:	af02      	add	r7, sp, #8
   11d42:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);
   11d44:	4b3d      	ldr	r3, [pc, #244]	; (11e3c <nvm_get_parameters+0x100>)
   11d46:	4798      	blx	r3
   11d48:	1c03      	adds	r3, r0, #0
   11d4a:	2b00      	cmp	r3, #0
   11d4c:	d010      	beq.n	11d70 <nvm_get_parameters+0x34>
   11d4e:	687b      	ldr	r3, [r7, #4]
   11d50:	2b00      	cmp	r3, #0
   11d52:	d117      	bne.n	11d84 <nvm_get_parameters+0x48>
   11d54:	4b39      	ldr	r3, [pc, #228]	; (11e3c <nvm_get_parameters+0x100>)
   11d56:	4798      	blx	r3
   11d58:	1c01      	adds	r1, r0, #0
   11d5a:	4a39      	ldr	r2, [pc, #228]	; (11e40 <nvm_get_parameters+0x104>)
   11d5c:	4b39      	ldr	r3, [pc, #228]	; (11e44 <nvm_get_parameters+0x108>)
   11d5e:	483a      	ldr	r0, [pc, #232]	; (11e48 <nvm_get_parameters+0x10c>)
   11d60:	9000      	str	r0, [sp, #0]
   11d62:	483a      	ldr	r0, [pc, #232]	; (11e4c <nvm_get_parameters+0x110>)
   11d64:	9001      	str	r0, [sp, #4]
   11d66:	1c08      	adds	r0, r1, #0
   11d68:	2101      	movs	r1, #1
   11d6a:	4c39      	ldr	r4, [pc, #228]	; (11e50 <nvm_get_parameters+0x114>)
   11d6c:	47a0      	blx	r4
   11d6e:	e009      	b.n	11d84 <nvm_get_parameters+0x48>
   11d70:	687b      	ldr	r3, [r7, #4]
   11d72:	2b00      	cmp	r3, #0
   11d74:	d106      	bne.n	11d84 <nvm_get_parameters+0x48>
   11d76:	4837      	ldr	r0, [pc, #220]	; (11e54 <nvm_get_parameters+0x118>)
   11d78:	4934      	ldr	r1, [pc, #208]	; (11e4c <nvm_get_parameters+0x110>)
   11d7a:	4a31      	ldr	r2, [pc, #196]	; (11e40 <nvm_get_parameters+0x104>)
   11d7c:	4b31      	ldr	r3, [pc, #196]	; (11e44 <nvm_get_parameters+0x108>)
   11d7e:	4c36      	ldr	r4, [pc, #216]	; (11e58 <nvm_get_parameters+0x11c>)
   11d80:	47a0      	blx	r4
   11d82:	e7fe      	b.n	11d82 <nvm_get_parameters+0x46>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11d84:	4b35      	ldr	r3, [pc, #212]	; (11e5c <nvm_get_parameters+0x120>)
   11d86:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg &= ~NVMCTRL_STATUS_MASK;
   11d88:	697b      	ldr	r3, [r7, #20]
   11d8a:	699b      	ldr	r3, [r3, #24]
   11d8c:	b29a      	uxth	r2, r3
   11d8e:	4b34      	ldr	r3, [pc, #208]	; (11e60 <nvm_get_parameters+0x124>)
   11d90:	4013      	ands	r3, r2
   11d92:	b29a      	uxth	r2, r3
   11d94:	697b      	ldr	r3, [r7, #20]
   11d96:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
   11d98:	697b      	ldr	r3, [r7, #20]
   11d9a:	689b      	ldr	r3, [r3, #8]
   11d9c:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
   11d9e:	693a      	ldr	r2, [r7, #16]
   11da0:	23e0      	movs	r3, #224	; 0xe0
   11da2:	02db      	lsls	r3, r3, #11
   11da4:	4013      	ands	r3, r2
   11da6:	0c1b      	lsrs	r3, r3, #16
   11da8:	2208      	movs	r2, #8
   11daa:	1c11      	adds	r1, r2, #0
   11dac:	4099      	lsls	r1, r3
   11dae:	1c0b      	adds	r3, r1, #0

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
   11db0:	b2da      	uxtb	r2, r3
   11db2:	687b      	ldr	r3, [r7, #4]
   11db4:	701a      	strb	r2, [r3, #0]
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
   11db6:	693b      	ldr	r3, [r7, #16]
   11db8:	b29a      	uxth	r2, r3
   11dba:	687b      	ldr	r3, [r7, #4]
   11dbc:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
   11dbe:	4b29      	ldr	r3, [pc, #164]	; (11e64 <nvm_get_parameters+0x128>)
   11dc0:	881b      	ldrh	r3, [r3, #0]
   11dc2:	b29b      	uxth	r3, r3
   11dc4:	1c1a      	adds	r2, r3, #0
   11dc6:	2370      	movs	r3, #112	; 0x70
   11dc8:	4013      	ands	r3, r2
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
   11dca:	091a      	lsrs	r2, r3, #4
	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
			(param_reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
   11dcc:	1c3b      	adds	r3, r7, #0
   11dce:	330e      	adds	r3, #14
   11dd0:	801a      	strh	r2, [r3, #0]
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
   11dd2:	1c3b      	adds	r3, r7, #0
   11dd4:	330e      	adds	r3, #14
   11dd6:	881b      	ldrh	r3, [r3, #0]
   11dd8:	2b07      	cmp	r3, #7
   11dda:	d103      	bne.n	11de4 <nvm_get_parameters+0xa8>
		parameters->eeprom_number_of_pages = 0;
   11ddc:	687b      	ldr	r3, [r7, #4]
   11dde:	2200      	movs	r2, #0
   11de0:	605a      	str	r2, [r3, #4]
   11de2:	e00b      	b.n	11dfc <nvm_get_parameters+0xc0>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
   11de4:	1c3b      	adds	r3, r7, #0
   11de6:	330e      	adds	r3, #14
   11de8:	881b      	ldrh	r3, [r3, #0]
   11dea:	2206      	movs	r2, #6
   11dec:	1ad3      	subs	r3, r2, r3
   11dee:	2204      	movs	r2, #4
   11df0:	1c11      	adds	r1, r2, #0
   11df2:	4099      	lsls	r1, r3
   11df4:	1c0b      	adds	r3, r1, #0
	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
		parameters->eeprom_number_of_pages = 0;
	}
	else {
		parameters->eeprom_number_of_pages =
   11df6:	1c1a      	adds	r2, r3, #0
   11df8:	687b      	ldr	r3, [r7, #4]
   11dfa:	605a      	str	r2, [r3, #4]
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
   11dfc:	4b19      	ldr	r3, [pc, #100]	; (11e64 <nvm_get_parameters+0x128>)
   11dfe:	881b      	ldrh	r3, [r3, #0]
   11e00:	b299      	uxth	r1, r3
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
   11e02:	1c3b      	adds	r3, r7, #0
   11e04:	330c      	adds	r3, #12
   11e06:	2207      	movs	r2, #7
   11e08:	400a      	ands	r2, r1
   11e0a:	801a      	strh	r2, [r3, #0]
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
   11e0c:	1c3b      	adds	r3, r7, #0
   11e0e:	330c      	adds	r3, #12
   11e10:	881b      	ldrh	r3, [r3, #0]
   11e12:	2b07      	cmp	r3, #7
   11e14:	d103      	bne.n	11e1e <nvm_get_parameters+0xe2>
		parameters->bootloader_number_of_pages = 0;
   11e16:	687b      	ldr	r3, [r7, #4]
   11e18:	2200      	movs	r2, #0
   11e1a:	609a      	str	r2, [r3, #8]
   11e1c:	e00b      	b.n	11e36 <nvm_get_parameters+0xfa>
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
   11e1e:	1c3b      	adds	r3, r7, #0
   11e20:	330c      	adds	r3, #12
   11e22:	881b      	ldrh	r3, [r3, #0]
   11e24:	2207      	movs	r2, #7
   11e26:	1ad3      	subs	r3, r2, r3
   11e28:	2204      	movs	r2, #4
   11e2a:	1c11      	adds	r1, r2, #0
   11e2c:	4099      	lsls	r1, r3
   11e2e:	1c0b      	adds	r3, r1, #0
	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
		parameters->bootloader_number_of_pages = 0;
	}
	else {
		parameters->bootloader_number_of_pages =
   11e30:	1c1a      	adds	r2, r3, #0
   11e32:	687b      	ldr	r3, [r7, #4]
   11e34:	609a      	str	r2, [r3, #8]
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
   11e36:	46bd      	mov	sp, r7
   11e38:	b007      	add	sp, #28
   11e3a:	bd90      	pop	{r4, r7, pc}
   11e3c:	000117b5 	.word	0x000117b5
   11e40:	00026018 	.word	0x00026018
   11e44:	0000022d 	.word	0x0000022d
   11e48:	00025fd4 	.word	0x00025fd4
   11e4c:	00026044 	.word	0x00026044
   11e50:	000106e9 	.word	0x000106e9
   11e54:	00025ff4 	.word	0x00025ff4
   11e58:	0001b62d 	.word	0x0001b62d
   11e5c:	41004000 	.word	0x41004000
   11e60:	fffffee0 	.word	0xfffffee0
   11e64:	00804000 	.word	0x00804000

00011e68 <_nvm_translate_raw_fusebits_to_struct>:
 *
 */
static void _nvm_translate_raw_fusebits_to_struct (
		uint32_t *raw_user_row,
		struct nvm_fusebits *fusebits)
{
   11e68:	b580      	push	{r7, lr}
   11e6a:	b082      	sub	sp, #8
   11e6c:	af00      	add	r7, sp, #0
   11e6e:	6078      	str	r0, [r7, #4]
   11e70:	6039      	str	r1, [r7, #0]

	fusebits->bootloader_size = (enum nvm_bootloader_size)
			((raw_user_row[0] & NVMCTRL_FUSES_BOOTPROT_Msk)
   11e72:	687b      	ldr	r3, [r7, #4]
   11e74:	681b      	ldr	r3, [r3, #0]
static void _nvm_translate_raw_fusebits_to_struct (
		uint32_t *raw_user_row,
		struct nvm_fusebits *fusebits)
{

	fusebits->bootloader_size = (enum nvm_bootloader_size)
   11e76:	b2da      	uxtb	r2, r3
   11e78:	2307      	movs	r3, #7
   11e7a:	4013      	ands	r3, r2
   11e7c:	b2da      	uxtb	r2, r3
   11e7e:	683b      	ldr	r3, [r7, #0]
   11e80:	701a      	strb	r2, [r3, #0]
			((raw_user_row[0] & NVMCTRL_FUSES_BOOTPROT_Msk)
			>> NVMCTRL_FUSES_BOOTPROT_Pos);

	fusebits->eeprom_size = (enum nvm_eeprom_emulator_size)
			((raw_user_row[0] & NVMCTRL_FUSES_EEPROM_SIZE_Msk)
   11e82:	687b      	ldr	r3, [r7, #4]
   11e84:	681a      	ldr	r2, [r3, #0]
   11e86:	2370      	movs	r3, #112	; 0x70
   11e88:	4013      	ands	r3, r2
			>> NVMCTRL_FUSES_EEPROM_SIZE_Pos);
   11e8a:	091b      	lsrs	r3, r3, #4

	fusebits->bootloader_size = (enum nvm_bootloader_size)
			((raw_user_row[0] & NVMCTRL_FUSES_BOOTPROT_Msk)
			>> NVMCTRL_FUSES_BOOTPROT_Pos);

	fusebits->eeprom_size = (enum nvm_eeprom_emulator_size)
   11e8c:	b2da      	uxtb	r2, r3
   11e8e:	683b      	ldr	r3, [r7, #0]
   11e90:	705a      	strb	r2, [r3, #1]
			((raw_user_row[0] & NVMCTRL_FUSES_EEPROM_SIZE_Msk)
			>> NVMCTRL_FUSES_EEPROM_SIZE_Pos);

	fusebits->bod33_level = (uint8_t)
			((raw_user_row[0] & SYSCTRL_FUSES_BOD33USERLEVEL_Msk)
   11e92:	687b      	ldr	r3, [r7, #4]
   11e94:	681a      	ldr	r2, [r3, #0]
   11e96:	23fc      	movs	r3, #252	; 0xfc
   11e98:	019b      	lsls	r3, r3, #6
   11e9a:	4013      	ands	r3, r2
			>> SYSCTRL_FUSES_BOD33USERLEVEL_Pos);
   11e9c:	0a1b      	lsrs	r3, r3, #8

	fusebits->eeprom_size = (enum nvm_eeprom_emulator_size)
			((raw_user_row[0] & NVMCTRL_FUSES_EEPROM_SIZE_Msk)
			>> NVMCTRL_FUSES_EEPROM_SIZE_Pos);

	fusebits->bod33_level = (uint8_t)
   11e9e:	b2da      	uxtb	r2, r3
   11ea0:	683b      	ldr	r3, [r7, #0]
   11ea2:	709a      	strb	r2, [r3, #2]
			((raw_user_row[0] & SYSCTRL_FUSES_BOD33USERLEVEL_Msk)
			>> SYSCTRL_FUSES_BOD33USERLEVEL_Pos);

	fusebits->bod33_enable = (bool)
			((raw_user_row[0] & SYSCTRL_FUSES_BOD33_EN_Msk)
   11ea4:	687b      	ldr	r3, [r7, #4]
   11ea6:	681a      	ldr	r2, [r3, #0]
   11ea8:	2380      	movs	r3, #128	; 0x80
   11eaa:	01db      	lsls	r3, r3, #7
   11eac:	4013      	ands	r3, r2
			>> SYSCTRL_FUSES_BOD33_EN_Pos);
   11eae:	0b9b      	lsrs	r3, r3, #14

	fusebits->bod33_level = (uint8_t)
			((raw_user_row[0] & SYSCTRL_FUSES_BOD33USERLEVEL_Msk)
			>> SYSCTRL_FUSES_BOD33USERLEVEL_Pos);

	fusebits->bod33_enable = (bool)
   11eb0:	1e5a      	subs	r2, r3, #1
   11eb2:	4193      	sbcs	r3, r2
   11eb4:	b2da      	uxtb	r2, r3
   11eb6:	683b      	ldr	r3, [r7, #0]
   11eb8:	70da      	strb	r2, [r3, #3]
			((raw_user_row[0] & SYSCTRL_FUSES_BOD33_EN_Msk)
			>> SYSCTRL_FUSES_BOD33_EN_Pos);

	fusebits->bod33_action = (enum nvm_bod33_action)
			((raw_user_row[0] & SYSCTRL_FUSES_BOD33_ACTION_Msk)
   11eba:	687b      	ldr	r3, [r7, #4]
   11ebc:	681a      	ldr	r2, [r3, #0]
   11ebe:	23c0      	movs	r3, #192	; 0xc0
   11ec0:	025b      	lsls	r3, r3, #9
   11ec2:	4013      	ands	r3, r2
			>> SYSCTRL_FUSES_BOD33_ACTION_Pos);
   11ec4:	0bdb      	lsrs	r3, r3, #15

	fusebits->bod33_enable = (bool)
			((raw_user_row[0] & SYSCTRL_FUSES_BOD33_EN_Msk)
			>> SYSCTRL_FUSES_BOD33_EN_Pos);

	fusebits->bod33_action = (enum nvm_bod33_action)
   11ec6:	b2da      	uxtb	r2, r3
   11ec8:	683b      	ldr	r3, [r7, #0]
   11eca:	711a      	strb	r2, [r3, #4]
			((raw_user_row[0] & SYSCTRL_FUSES_BOD33_ACTION_Msk)
			>> SYSCTRL_FUSES_BOD33_ACTION_Pos);

	fusebits->bod12_level = (uint8_t)
			((raw_user_row[0] & SYSCTRL_FUSES_BOD12USERLEVEL_Msk)
   11ecc:	687b      	ldr	r3, [r7, #4]
   11ece:	681a      	ldr	r2, [r3, #0]
   11ed0:	23f8      	movs	r3, #248	; 0xf8
   11ed2:	039b      	lsls	r3, r3, #14
   11ed4:	4013      	ands	r3, r2
			>> SYSCTRL_FUSES_BOD12USERLEVEL_Pos);
   11ed6:	0c5b      	lsrs	r3, r3, #17

	fusebits->bod33_action = (enum nvm_bod33_action)
			((raw_user_row[0] & SYSCTRL_FUSES_BOD33_ACTION_Msk)
			>> SYSCTRL_FUSES_BOD33_ACTION_Pos);

	fusebits->bod12_level = (uint8_t)
   11ed8:	b2da      	uxtb	r2, r3
   11eda:	683b      	ldr	r3, [r7, #0]
   11edc:	715a      	strb	r2, [r3, #5]
			((raw_user_row[0] & SYSCTRL_FUSES_BOD12USERLEVEL_Msk)
			>> SYSCTRL_FUSES_BOD12USERLEVEL_Pos);

	fusebits->bod12_enable = (bool)
			((raw_user_row[0] & SYSCTRL_FUSES_BOD12_EN_Msk) >> SYSCTRL_FUSES_BOD12_EN_Pos);
   11ede:	687b      	ldr	r3, [r7, #4]
   11ee0:	681a      	ldr	r2, [r3, #0]
   11ee2:	2380      	movs	r3, #128	; 0x80
   11ee4:	03db      	lsls	r3, r3, #15
   11ee6:	4013      	ands	r3, r2
   11ee8:	0d9b      	lsrs	r3, r3, #22

	fusebits->bod12_level = (uint8_t)
			((raw_user_row[0] & SYSCTRL_FUSES_BOD12USERLEVEL_Msk)
			>> SYSCTRL_FUSES_BOD12USERLEVEL_Pos);

	fusebits->bod12_enable = (bool)
   11eea:	1e5a      	subs	r2, r3, #1
   11eec:	4193      	sbcs	r3, r2
   11eee:	b2da      	uxtb	r2, r3
   11ef0:	683b      	ldr	r3, [r7, #0]
   11ef2:	719a      	strb	r2, [r3, #6]
			((raw_user_row[0] & SYSCTRL_FUSES_BOD12_EN_Msk) >> SYSCTRL_FUSES_BOD12_EN_Pos);

	fusebits->bod12_action = (enum nvm_bod12_action)
			((raw_user_row[0] & SYSCTRL_FUSES_BOD12_ACTION_Msk)
   11ef4:	687b      	ldr	r3, [r7, #4]
   11ef6:	681a      	ldr	r2, [r3, #0]
   11ef8:	23c0      	movs	r3, #192	; 0xc0
   11efa:	045b      	lsls	r3, r3, #17
   11efc:	4013      	ands	r3, r2
			>> SYSCTRL_FUSES_BOD12_ACTION_Pos);
   11efe:	0ddb      	lsrs	r3, r3, #23
			>> SYSCTRL_FUSES_BOD12USERLEVEL_Pos);

	fusebits->bod12_enable = (bool)
			((raw_user_row[0] & SYSCTRL_FUSES_BOD12_EN_Msk) >> SYSCTRL_FUSES_BOD12_EN_Pos);

	fusebits->bod12_action = (enum nvm_bod12_action)
   11f00:	b2da      	uxtb	r2, r3
   11f02:	683b      	ldr	r3, [r7, #0]
   11f04:	71da      	strb	r2, [r3, #7]
			((raw_user_row[0] & SYSCTRL_FUSES_BOD12_ACTION_Msk)
			>> SYSCTRL_FUSES_BOD12_ACTION_Pos);

	fusebits->wdt_enable = (bool)
			((raw_user_row[0] & WDT_FUSES_ENABLE_Msk) >> WDT_FUSES_ENABLE_Pos);
   11f06:	687b      	ldr	r3, [r7, #4]
   11f08:	681a      	ldr	r2, [r3, #0]
   11f0a:	2380      	movs	r3, #128	; 0x80
   11f0c:	049b      	lsls	r3, r3, #18
   11f0e:	4013      	ands	r3, r2
   11f10:	0e5b      	lsrs	r3, r3, #25

	fusebits->bod12_action = (enum nvm_bod12_action)
			((raw_user_row[0] & SYSCTRL_FUSES_BOD12_ACTION_Msk)
			>> SYSCTRL_FUSES_BOD12_ACTION_Pos);

	fusebits->wdt_enable = (bool)
   11f12:	1e5a      	subs	r2, r3, #1
   11f14:	4193      	sbcs	r3, r2
   11f16:	b2da      	uxtb	r2, r3
   11f18:	683b      	ldr	r3, [r7, #0]
   11f1a:	721a      	strb	r2, [r3, #8]
			((raw_user_row[0] & WDT_FUSES_ENABLE_Msk) >> WDT_FUSES_ENABLE_Pos);

	fusebits->wdt_always_on = (bool)
			((raw_user_row[0] & WDT_FUSES_ALWAYSON_Msk) >> WDT_FUSES_ALWAYSON_Pos);
   11f1c:	687b      	ldr	r3, [r7, #4]
   11f1e:	681a      	ldr	r2, [r3, #0]
   11f20:	2380      	movs	r3, #128	; 0x80
   11f22:	04db      	lsls	r3, r3, #19
   11f24:	4013      	ands	r3, r2
   11f26:	0e9b      	lsrs	r3, r3, #26
			>> SYSCTRL_FUSES_BOD12_ACTION_Pos);

	fusebits->wdt_enable = (bool)
			((raw_user_row[0] & WDT_FUSES_ENABLE_Msk) >> WDT_FUSES_ENABLE_Pos);

	fusebits->wdt_always_on = (bool)
   11f28:	1e5a      	subs	r2, r3, #1
   11f2a:	4193      	sbcs	r3, r2
   11f2c:	b2da      	uxtb	r2, r3
   11f2e:	683b      	ldr	r3, [r7, #0]
   11f30:	725a      	strb	r2, [r3, #9]
			((raw_user_row[0] & WDT_FUSES_ALWAYSON_Msk) >> WDT_FUSES_ALWAYSON_Pos);

	fusebits->wdt_timeout_period = (uint8_t)
			((raw_user_row[0] & WDT_FUSES_PER_Msk) >> WDT_FUSES_PER_Pos);
   11f32:	687b      	ldr	r3, [r7, #4]
   11f34:	681a      	ldr	r2, [r3, #0]
   11f36:	23f0      	movs	r3, #240	; 0xf0
   11f38:	05db      	lsls	r3, r3, #23
   11f3a:	4013      	ands	r3, r2
   11f3c:	0edb      	lsrs	r3, r3, #27
			((raw_user_row[0] & WDT_FUSES_ENABLE_Msk) >> WDT_FUSES_ENABLE_Pos);

	fusebits->wdt_always_on = (bool)
			((raw_user_row[0] & WDT_FUSES_ALWAYSON_Msk) >> WDT_FUSES_ALWAYSON_Pos);

	fusebits->wdt_timeout_period = (uint8_t)
   11f3e:	b2da      	uxtb	r2, r3
   11f40:	683b      	ldr	r3, [r7, #0]
   11f42:	729a      	strb	r2, [r3, #10]
			((raw_user_row[0] & WDT_FUSES_PER_Msk) >> WDT_FUSES_PER_Pos);

	/* WDT Windows timout lay between two 32-bit words in the user row. Because only one bit lays in word[0],
	   bits in word[1] must be left sifted by one to make the correct number */
	fusebits->wdt_window_timeout = (enum nvm_wdt_window_timeout)
			((raw_user_row[0] & WDT_FUSES_WINDOW_0_Msk) >> WDT_FUSES_WINDOW_0_Pos) |
   11f44:	687b      	ldr	r3, [r7, #4]
   11f46:	681b      	ldr	r3, [r3, #0]
   11f48:	0fdb      	lsrs	r3, r3, #31
	fusebits->wdt_timeout_period = (uint8_t)
			((raw_user_row[0] & WDT_FUSES_PER_Msk) >> WDT_FUSES_PER_Pos);

	/* WDT Windows timout lay between two 32-bit words in the user row. Because only one bit lays in word[0],
	   bits in word[1] must be left sifted by one to make the correct number */
	fusebits->wdt_window_timeout = (enum nvm_wdt_window_timeout)
   11f4a:	b2da      	uxtb	r2, r3
			((raw_user_row[0] & WDT_FUSES_WINDOW_0_Msk) >> WDT_FUSES_WINDOW_0_Pos) |
			((raw_user_row[1] & WDT_FUSES_WINDOW_1_Msk) << 1);
   11f4c:	687b      	ldr	r3, [r7, #4]
   11f4e:	3304      	adds	r3, #4
   11f50:	681b      	ldr	r3, [r3, #0]
	fusebits->wdt_timeout_period = (uint8_t)
			((raw_user_row[0] & WDT_FUSES_PER_Msk) >> WDT_FUSES_PER_Pos);

	/* WDT Windows timout lay between two 32-bit words in the user row. Because only one bit lays in word[0],
	   bits in word[1] must be left sifted by one to make the correct number */
	fusebits->wdt_window_timeout = (enum nvm_wdt_window_timeout)
   11f52:	b2d9      	uxtb	r1, r3
   11f54:	2307      	movs	r3, #7
   11f56:	400b      	ands	r3, r1
   11f58:	b2db      	uxtb	r3, r3
   11f5a:	18db      	adds	r3, r3, r3
   11f5c:	b2db      	uxtb	r3, r3
   11f5e:	4313      	orrs	r3, r2
   11f60:	b2da      	uxtb	r2, r3
   11f62:	683b      	ldr	r3, [r7, #0]
   11f64:	72da      	strb	r2, [r3, #11]
			((raw_user_row[0] & WDT_FUSES_WINDOW_0_Msk) >> WDT_FUSES_WINDOW_0_Pos) |
			((raw_user_row[1] & WDT_FUSES_WINDOW_1_Msk) << 1);

	fusebits->wdt_early_warning_offset = (enum nvm_wdt_early_warning_offset)
			((raw_user_row[1] & WDT_FUSES_EWOFFSET_Msk) >> WDT_FUSES_EWOFFSET_Pos);
   11f66:	687b      	ldr	r3, [r7, #4]
   11f68:	3304      	adds	r3, #4
   11f6a:	681a      	ldr	r2, [r3, #0]
   11f6c:	2378      	movs	r3, #120	; 0x78
   11f6e:	4013      	ands	r3, r2
   11f70:	08db      	lsrs	r3, r3, #3
	   bits in word[1] must be left sifted by one to make the correct number */
	fusebits->wdt_window_timeout = (enum nvm_wdt_window_timeout)
			((raw_user_row[0] & WDT_FUSES_WINDOW_0_Msk) >> WDT_FUSES_WINDOW_0_Pos) |
			((raw_user_row[1] & WDT_FUSES_WINDOW_1_Msk) << 1);

	fusebits->wdt_early_warning_offset = (enum nvm_wdt_early_warning_offset)
   11f72:	b2da      	uxtb	r2, r3
   11f74:	683b      	ldr	r3, [r7, #0]
   11f76:	731a      	strb	r2, [r3, #12]
			((raw_user_row[1] & WDT_FUSES_EWOFFSET_Msk) >> WDT_FUSES_EWOFFSET_Pos);

	fusebits->wdt_window_mode_enable_at_poweron = (bool)
			((raw_user_row[1] & WDT_FUSES_WEN_Msk) >> WDT_FUSES_WEN_Pos);
   11f78:	687b      	ldr	r3, [r7, #4]
   11f7a:	3304      	adds	r3, #4
   11f7c:	681a      	ldr	r2, [r3, #0]
   11f7e:	2380      	movs	r3, #128	; 0x80
   11f80:	4013      	ands	r3, r2
   11f82:	09db      	lsrs	r3, r3, #7
			((raw_user_row[1] & WDT_FUSES_WINDOW_1_Msk) << 1);

	fusebits->wdt_early_warning_offset = (enum nvm_wdt_early_warning_offset)
			((raw_user_row[1] & WDT_FUSES_EWOFFSET_Msk) >> WDT_FUSES_EWOFFSET_Pos);

	fusebits->wdt_window_mode_enable_at_poweron = (bool)
   11f84:	1e5a      	subs	r2, r3, #1
   11f86:	4193      	sbcs	r3, r2
   11f88:	b2da      	uxtb	r2, r3
   11f8a:	683b      	ldr	r3, [r7, #0]
   11f8c:	735a      	strb	r2, [r3, #13]
			((raw_user_row[1] & WDT_FUSES_WEN_Msk) >> WDT_FUSES_WEN_Pos);

	fusebits->lockbits = (uint16_t)
			((raw_user_row[1] & NVMCTRL_FUSES_REGION_LOCKS_Msk)
   11f8e:	687b      	ldr	r3, [r7, #4]
   11f90:	3304      	adds	r3, #4
   11f92:	681b      	ldr	r3, [r3, #0]
			>> NVMCTRL_FUSES_REGION_LOCKS_Pos);
   11f94:	0c1b      	lsrs	r3, r3, #16
			((raw_user_row[1] & WDT_FUSES_EWOFFSET_Msk) >> WDT_FUSES_EWOFFSET_Pos);

	fusebits->wdt_window_mode_enable_at_poweron = (bool)
			((raw_user_row[1] & WDT_FUSES_WEN_Msk) >> WDT_FUSES_WEN_Pos);

	fusebits->lockbits = (uint16_t)
   11f96:	b29a      	uxth	r2, r3
   11f98:	683b      	ldr	r3, [r7, #0]
   11f9a:	81da      	strh	r2, [r3, #14]
			((raw_user_row[1] & NVMCTRL_FUSES_REGION_LOCKS_Msk)
			>> NVMCTRL_FUSES_REGION_LOCKS_Pos);

}
   11f9c:	46bd      	mov	sp, r7
   11f9e:	b002      	add	sp, #8
   11fa0:	bd80      	pop	{r7, pc}
   11fa2:	46c0      	nop			; (mov r8, r8)

00011fa4 <_nvm_translate_struct_to_raw_fusebits>:
 *
 */
static void _nvm_translate_struct_to_raw_fusebits (
		struct nvm_fusebits *fusebits,
		uint32_t *raw_fusebits)
{
   11fa4:	b580      	push	{r7, lr}
   11fa6:	b082      	sub	sp, #8
   11fa8:	af00      	add	r7, sp, #0
   11faa:	6078      	str	r0, [r7, #4]
   11fac:	6039      	str	r1, [r7, #0]

	/* Generating 32-bit word 1 */
			/* Setting EEPROM emulator area size and bootloader size */
	raw_fusebits[0] = (NVMCTRL_FUSES_BOOTPROT((uint8_t)(fusebits->bootloader_size))         |
   11fae:	687b      	ldr	r3, [r7, #4]
   11fb0:	781b      	ldrb	r3, [r3, #0]
   11fb2:	1c1a      	adds	r2, r3, #0
   11fb4:	2307      	movs	r3, #7
   11fb6:	401a      	ands	r2, r3
			    NVMCTRL_FUSES_EEPROM_SIZE((uint8_t)(fusebits->eeprom_size))         |
   11fb8:	687b      	ldr	r3, [r7, #4]
   11fba:	785b      	ldrb	r3, [r3, #1]
   11fbc:	011b      	lsls	r3, r3, #4
   11fbe:	1c19      	adds	r1, r3, #0
   11fc0:	2370      	movs	r3, #112	; 0x70
   11fc2:	400b      	ands	r3, r1
		uint32_t *raw_fusebits)
{

	/* Generating 32-bit word 1 */
			/* Setting EEPROM emulator area size and bootloader size */
	raw_fusebits[0] = (NVMCTRL_FUSES_BOOTPROT((uint8_t)(fusebits->bootloader_size))         |
   11fc4:	431a      	orrs	r2, r3

			/* Reserved bits should be 1 */
			    _NVM_FUSEBITS_0_RESERVED_BITS                                       |

			/* Setting BOD33 fuses */
			    SYSCTRL_FUSES_BOD33USERLEVEL(fusebits->bod33_level)                 |
   11fc6:	687b      	ldr	r3, [r7, #4]
   11fc8:	789b      	ldrb	r3, [r3, #2]
   11fca:	021b      	lsls	r3, r3, #8
   11fcc:	1c19      	adds	r1, r3, #0
   11fce:	23fc      	movs	r3, #252	; 0xfc
   11fd0:	019b      	lsls	r3, r3, #6
   11fd2:	400b      	ands	r3, r1
			/* Setting EEPROM emulator area size and bootloader size */
	raw_fusebits[0] = (NVMCTRL_FUSES_BOOTPROT((uint8_t)(fusebits->bootloader_size))         |
			    NVMCTRL_FUSES_EEPROM_SIZE((uint8_t)(fusebits->eeprom_size))         |

			/* Reserved bits should be 1 */
			    _NVM_FUSEBITS_0_RESERVED_BITS                                       |
   11fd4:	431a      	orrs	r2, r3

			/* Setting BOD33 fuses */
			    SYSCTRL_FUSES_BOD33USERLEVEL(fusebits->bod33_level)                 |
			    ((uint32_t)(fusebits->bod33_enable)) << SYSCTRL_FUSES_BOD33_EN_Pos  |
   11fd6:	687b      	ldr	r3, [r7, #4]
   11fd8:	78db      	ldrb	r3, [r3, #3]
   11fda:	039b      	lsls	r3, r3, #14

			/* Reserved bits should be 1 */
			    _NVM_FUSEBITS_0_RESERVED_BITS                                       |

			/* Setting BOD33 fuses */
			    SYSCTRL_FUSES_BOD33USERLEVEL(fusebits->bod33_level)                 |
   11fdc:	431a      	orrs	r2, r3
			    ((uint32_t)(fusebits->bod33_enable)) << SYSCTRL_FUSES_BOD33_EN_Pos  |
			    SYSCTRL_FUSES_BOD33_ACTION((uint8_t)(fusebits->bod33_action))       |
   11fde:	687b      	ldr	r3, [r7, #4]
   11fe0:	791b      	ldrb	r3, [r3, #4]
   11fe2:	03db      	lsls	r3, r3, #15
			/* Reserved bits should be 1 */
			    _NVM_FUSEBITS_0_RESERVED_BITS                                       |

			/* Setting BOD33 fuses */
			    SYSCTRL_FUSES_BOD33USERLEVEL(fusebits->bod33_level)                 |
			    ((uint32_t)(fusebits->bod33_enable)) << SYSCTRL_FUSES_BOD33_EN_Pos  |
   11fe4:	1c19      	adds	r1, r3, #0
   11fe6:	23c0      	movs	r3, #192	; 0xc0
   11fe8:	025b      	lsls	r3, r3, #9
   11fea:	400b      	ands	r3, r1
   11fec:	431a      	orrs	r2, r3
			    SYSCTRL_FUSES_BOD33_ACTION((uint8_t)(fusebits->bod33_action))       |

			/* Setting BOD12 fuses */
			    SYSCTRL_FUSES_BOD12USERLEVEL(fusebits->bod12_level)                 |
   11fee:	687b      	ldr	r3, [r7, #4]
   11ff0:	795b      	ldrb	r3, [r3, #5]
   11ff2:	045b      	lsls	r3, r3, #17
			    _NVM_FUSEBITS_0_RESERVED_BITS                                       |

			/* Setting BOD33 fuses */
			    SYSCTRL_FUSES_BOD33USERLEVEL(fusebits->bod33_level)                 |
			    ((uint32_t)(fusebits->bod33_enable)) << SYSCTRL_FUSES_BOD33_EN_Pos  |
			    SYSCTRL_FUSES_BOD33_ACTION((uint8_t)(fusebits->bod33_action))       |
   11ff4:	1c19      	adds	r1, r3, #0
   11ff6:	23f8      	movs	r3, #248	; 0xf8
   11ff8:	039b      	lsls	r3, r3, #14
   11ffa:	400b      	ands	r3, r1
   11ffc:	431a      	orrs	r2, r3

			/* Setting BOD12 fuses */
			    SYSCTRL_FUSES_BOD12USERLEVEL(fusebits->bod12_level)                 |
			    ((uint32_t)(fusebits->bod33_enable)) << SYSCTRL_FUSES_BOD12_EN_Pos  |
   11ffe:	687b      	ldr	r3, [r7, #4]
   12000:	78db      	ldrb	r3, [r3, #3]
   12002:	059b      	lsls	r3, r3, #22
			    SYSCTRL_FUSES_BOD33USERLEVEL(fusebits->bod33_level)                 |
			    ((uint32_t)(fusebits->bod33_enable)) << SYSCTRL_FUSES_BOD33_EN_Pos  |
			    SYSCTRL_FUSES_BOD33_ACTION((uint8_t)(fusebits->bod33_action))       |

			/* Setting BOD12 fuses */
			    SYSCTRL_FUSES_BOD12USERLEVEL(fusebits->bod12_level)                 |
   12004:	431a      	orrs	r2, r3
			    ((uint32_t)(fusebits->bod33_enable)) << SYSCTRL_FUSES_BOD12_EN_Pos  |
			    SYSCTRL_FUSES_BOD12_ACTION((uint8_t)(fusebits->bod12_action))       |
   12006:	687b      	ldr	r3, [r7, #4]
   12008:	79db      	ldrb	r3, [r3, #7]
   1200a:	05db      	lsls	r3, r3, #23
			    ((uint32_t)(fusebits->bod33_enable)) << SYSCTRL_FUSES_BOD33_EN_Pos  |
			    SYSCTRL_FUSES_BOD33_ACTION((uint8_t)(fusebits->bod33_action))       |

			/* Setting BOD12 fuses */
			    SYSCTRL_FUSES_BOD12USERLEVEL(fusebits->bod12_level)                 |
			    ((uint32_t)(fusebits->bod33_enable)) << SYSCTRL_FUSES_BOD12_EN_Pos  |
   1200c:	1c19      	adds	r1, r3, #0
   1200e:	23c0      	movs	r3, #192	; 0xc0
   12010:	045b      	lsls	r3, r3, #17
   12012:	400b      	ands	r3, r1
   12014:	431a      	orrs	r2, r3
			    SYSCTRL_FUSES_BOD12_ACTION((uint8_t)(fusebits->bod12_action))       |

			/* Setting WDT fuses */
			    ((uint32_t)(fusebits->wdt_enable)) << WDT_FUSES_ENABLE_Pos          |
   12016:	687b      	ldr	r3, [r7, #4]
   12018:	7a1b      	ldrb	r3, [r3, #8]
   1201a:	065b      	lsls	r3, r3, #25
			    SYSCTRL_FUSES_BOD33_ACTION((uint8_t)(fusebits->bod33_action))       |

			/* Setting BOD12 fuses */
			    SYSCTRL_FUSES_BOD12USERLEVEL(fusebits->bod12_level)                 |
			    ((uint32_t)(fusebits->bod33_enable)) << SYSCTRL_FUSES_BOD12_EN_Pos  |
			    SYSCTRL_FUSES_BOD12_ACTION((uint8_t)(fusebits->bod12_action))       |
   1201c:	431a      	orrs	r2, r3

			/* Setting WDT fuses */
			    ((uint32_t)(fusebits->wdt_enable)) << WDT_FUSES_ENABLE_Pos          |
			    ((uint32_t)(fusebits->wdt_always_on)) << WDT_FUSES_ALWAYSON_Pos     |
   1201e:	687b      	ldr	r3, [r7, #4]
   12020:	7a5b      	ldrb	r3, [r3, #9]
   12022:	069b      	lsls	r3, r3, #26
			    SYSCTRL_FUSES_BOD12USERLEVEL(fusebits->bod12_level)                 |
			    ((uint32_t)(fusebits->bod33_enable)) << SYSCTRL_FUSES_BOD12_EN_Pos  |
			    SYSCTRL_FUSES_BOD12_ACTION((uint8_t)(fusebits->bod12_action))       |

			/* Setting WDT fuses */
			    ((uint32_t)(fusebits->wdt_enable)) << WDT_FUSES_ENABLE_Pos          |
   12024:	431a      	orrs	r2, r3
			    ((uint32_t)(fusebits->wdt_always_on)) << WDT_FUSES_ALWAYSON_Pos     |
			    WDT_FUSES_PER(fusebits->wdt_timeout_period)                         |
   12026:	687b      	ldr	r3, [r7, #4]
   12028:	7a9b      	ldrb	r3, [r3, #10]
   1202a:	06db      	lsls	r3, r3, #27
			    ((uint32_t)(fusebits->bod33_enable)) << SYSCTRL_FUSES_BOD12_EN_Pos  |
			    SYSCTRL_FUSES_BOD12_ACTION((uint8_t)(fusebits->bod12_action))       |

			/* Setting WDT fuses */
			    ((uint32_t)(fusebits->wdt_enable)) << WDT_FUSES_ENABLE_Pos          |
			    ((uint32_t)(fusebits->wdt_always_on)) << WDT_FUSES_ALWAYSON_Pos     |
   1202c:	1c19      	adds	r1, r3, #0
   1202e:	23f0      	movs	r3, #240	; 0xf0
   12030:	05db      	lsls	r3, r3, #23
   12032:	400b      	ands	r3, r1
   12034:	431a      	orrs	r2, r3
			    WDT_FUSES_PER(fusebits->wdt_timeout_period)                         |
			    (((uint32_t)(fusebits->wdt_window_timeout)) & 0x01) << WDT_FUSES_WINDOW_0_Pos);
   12036:	687b      	ldr	r3, [r7, #4]
   12038:	7adb      	ldrb	r3, [r3, #11]
   1203a:	07db      	lsls	r3, r3, #31
			    SYSCTRL_FUSES_BOD12_ACTION((uint8_t)(fusebits->bod12_action))       |

			/* Setting WDT fuses */
			    ((uint32_t)(fusebits->wdt_enable)) << WDT_FUSES_ENABLE_Pos          |
			    ((uint32_t)(fusebits->wdt_always_on)) << WDT_FUSES_ALWAYSON_Pos     |
			    WDT_FUSES_PER(fusebits->wdt_timeout_period)                         |
   1203c:	4313      	orrs	r3, r2
   1203e:	2288      	movs	r2, #136	; 0x88
   12040:	431a      	orrs	r2, r3
		uint32_t *raw_fusebits)
{

	/* Generating 32-bit word 1 */
			/* Setting EEPROM emulator area size and bootloader size */
	raw_fusebits[0] = (NVMCTRL_FUSES_BOOTPROT((uint8_t)(fusebits->bootloader_size))         |
   12042:	683b      	ldr	r3, [r7, #0]
   12044:	601a      	str	r2, [r3, #0]
			    WDT_FUSES_PER(fusebits->wdt_timeout_period)                         |
			    (((uint32_t)(fusebits->wdt_window_timeout)) & 0x01) << WDT_FUSES_WINDOW_0_Pos);

	/* Generating 32-bit word 2 */
			/* WDT fuse settings continued */
	raw_fusebits[1] = ((((uint32_t)(fusebits->wdt_window_timeout)) & 0x0E) >> 1                      |
   12046:	683b      	ldr	r3, [r7, #0]
   12048:	3304      	adds	r3, #4
   1204a:	687a      	ldr	r2, [r7, #4]
   1204c:	7ad2      	ldrb	r2, [r2, #11]
   1204e:	1c11      	adds	r1, r2, #0
   12050:	220e      	movs	r2, #14
   12052:	400a      	ands	r2, r1
   12054:	0851      	lsrs	r1, r2, #1
			  WDT_FUSES_EWOFFSET((uint32_t)(fusebits->wdt_early_warning_offset))             |
   12056:	687a      	ldr	r2, [r7, #4]
   12058:	7b12      	ldrb	r2, [r2, #12]
   1205a:	00d0      	lsls	r0, r2, #3
   1205c:	2278      	movs	r2, #120	; 0x78
   1205e:	4002      	ands	r2, r0
			    WDT_FUSES_PER(fusebits->wdt_timeout_period)                         |
			    (((uint32_t)(fusebits->wdt_window_timeout)) & 0x01) << WDT_FUSES_WINDOW_0_Pos);

	/* Generating 32-bit word 2 */
			/* WDT fuse settings continued */
	raw_fusebits[1] = ((((uint32_t)(fusebits->wdt_window_timeout)) & 0x0E) >> 1                      |
   12060:	4311      	orrs	r1, r2
			  WDT_FUSES_EWOFFSET((uint32_t)(fusebits->wdt_early_warning_offset))             |
			  ((uint32_t)(fusebits->wdt_window_mode_enable_at_poweron)) << WDT_FUSES_WEN_Pos |
   12062:	687a      	ldr	r2, [r7, #4]
   12064:	7b52      	ldrb	r2, [r2, #13]
   12066:	01d2      	lsls	r2, r2, #7
			    (((uint32_t)(fusebits->wdt_window_timeout)) & 0x01) << WDT_FUSES_WINDOW_0_Pos);

	/* Generating 32-bit word 2 */
			/* WDT fuse settings continued */
	raw_fusebits[1] = ((((uint32_t)(fusebits->wdt_window_timeout)) & 0x0E) >> 1                      |
			  WDT_FUSES_EWOFFSET((uint32_t)(fusebits->wdt_early_warning_offset))             |
   12068:	4311      	orrs	r1, r2

			/* Reserved bits should be 1 */
			  _NVM_FUSEBITS_1_RESERVED_BITS                                                   |

			/* Setting flash region lock bits */
			  NVMCTRL_FUSES_REGION_LOCKS(fusebits->lockbits));
   1206a:	687a      	ldr	r2, [r7, #4]
   1206c:	89d2      	ldrh	r2, [r2, #14]
   1206e:	0412      	lsls	r2, r2, #16
	raw_fusebits[1] = ((((uint32_t)(fusebits->wdt_window_timeout)) & 0x0E) >> 1                      |
			  WDT_FUSES_EWOFFSET((uint32_t)(fusebits->wdt_early_warning_offset))             |
			  ((uint32_t)(fusebits->wdt_window_mode_enable_at_poweron)) << WDT_FUSES_WEN_Pos |

			/* Reserved bits should be 1 */
			  _NVM_FUSEBITS_1_RESERVED_BITS                                                   |
   12070:	430a      	orrs	r2, r1
   12072:	21ff      	movs	r1, #255	; 0xff
   12074:	0209      	lsls	r1, r1, #8
   12076:	430a      	orrs	r2, r1
			    WDT_FUSES_PER(fusebits->wdt_timeout_period)                         |
			    (((uint32_t)(fusebits->wdt_window_timeout)) & 0x01) << WDT_FUSES_WINDOW_0_Pos);

	/* Generating 32-bit word 2 */
			/* WDT fuse settings continued */
	raw_fusebits[1] = ((((uint32_t)(fusebits->wdt_window_timeout)) & 0x0E) >> 1                      |
   12078:	601a      	str	r2, [r3, #0]
			  _NVM_FUSEBITS_1_RESERVED_BITS                                                   |

			/* Setting flash region lock bits */
			  NVMCTRL_FUSES_REGION_LOCKS(fusebits->lockbits));

}
   1207a:	46bd      	mov	sp, r7
   1207c:	b002      	add	sp, #8
   1207e:	bd80      	pop	{r7, pc}

00012080 <nvm_get_fuses>:
 *
 * \retval STATUS_OK   This function will always return STATUS_OK
 */
enum status_code nvm_get_fuses (
		struct nvm_fusebits *fusebits)
{
   12080:	b580      	push	{r7, lr}
   12082:	b086      	sub	sp, #24
   12084:	af00      	add	r7, sp, #0
   12086:	6078      	str	r0, [r7, #4]
	enum status_code error_code = STATUS_OK;
   12088:	1c3b      	adds	r3, r7, #0
   1208a:	3317      	adds	r3, #23
   1208c:	2200      	movs	r2, #0
   1208e:	701a      	strb	r2, [r3, #0]
	uint32_t raw_fusebits[2];

	/* Make sure the module is ready */
	while (!nvm_is_ready()) {
   12090:	46c0      	nop			; (mov r8, r8)
   12092:	4b18      	ldr	r3, [pc, #96]	; (120f4 <nvm_get_fuses+0x74>)
   12094:	4798      	blx	r3
   12096:	1c03      	adds	r3, r0, #0
   12098:	2201      	movs	r2, #1
   1209a:	4053      	eors	r3, r2
   1209c:	b2db      	uxtb	r3, r3
   1209e:	2b00      	cmp	r3, #0
   120a0:	d1f7      	bne.n	12092 <nvm_get_fuses+0x12>
	};

	/* Read the fuse settings in the user row, 64 bit */
	((uint16_t*)&raw_fusebits)[0] = (uint16_t)NVM_MEMORY[NVMCTRL_USER / 2];
   120a2:	1c3b      	adds	r3, r7, #0
   120a4:	330c      	adds	r3, #12
   120a6:	4a14      	ldr	r2, [pc, #80]	; (120f8 <nvm_get_fuses+0x78>)
   120a8:	8812      	ldrh	r2, [r2, #0]
   120aa:	b292      	uxth	r2, r2
   120ac:	801a      	strh	r2, [r3, #0]
	((uint16_t*)&raw_fusebits)[1] = (uint16_t)NVM_MEMORY[(NVMCTRL_USER / 2) + 1];
   120ae:	1c3b      	adds	r3, r7, #0
   120b0:	330c      	adds	r3, #12
   120b2:	3302      	adds	r3, #2
   120b4:	4a11      	ldr	r2, [pc, #68]	; (120fc <nvm_get_fuses+0x7c>)
   120b6:	8812      	ldrh	r2, [r2, #0]
   120b8:	b292      	uxth	r2, r2
   120ba:	801a      	strh	r2, [r3, #0]
	((uint16_t*)&raw_fusebits)[2] = (uint16_t)NVM_MEMORY[(NVMCTRL_USER / 2) + 2];
   120bc:	1c3b      	adds	r3, r7, #0
   120be:	330c      	adds	r3, #12
   120c0:	3304      	adds	r3, #4
   120c2:	4a0f      	ldr	r2, [pc, #60]	; (12100 <nvm_get_fuses+0x80>)
   120c4:	8812      	ldrh	r2, [r2, #0]
   120c6:	b292      	uxth	r2, r2
   120c8:	801a      	strh	r2, [r3, #0]
	((uint16_t*)&raw_fusebits)[3] = (uint16_t)NVM_MEMORY[(NVMCTRL_USER / 2) + 3];
   120ca:	1c3b      	adds	r3, r7, #0
   120cc:	330c      	adds	r3, #12
   120ce:	3306      	adds	r3, #6
   120d0:	4a0c      	ldr	r2, [pc, #48]	; (12104 <nvm_get_fuses+0x84>)
   120d2:	8812      	ldrh	r2, [r2, #0]
   120d4:	b292      	uxth	r2, r2
   120d6:	801a      	strh	r2, [r3, #0]

	_nvm_translate_raw_fusebits_to_struct(raw_fusebits, fusebits);
   120d8:	1c3a      	adds	r2, r7, #0
   120da:	320c      	adds	r2, #12
   120dc:	687b      	ldr	r3, [r7, #4]
   120de:	1c10      	adds	r0, r2, #0
   120e0:	1c19      	adds	r1, r3, #0
   120e2:	4b09      	ldr	r3, [pc, #36]	; (12108 <nvm_get_fuses+0x88>)
   120e4:	4798      	blx	r3

	return error_code;
   120e6:	1c3b      	adds	r3, r7, #0
   120e8:	3317      	adds	r3, #23
   120ea:	781b      	ldrb	r3, [r3, #0]
}
   120ec:	1c18      	adds	r0, r3, #0
   120ee:	46bd      	mov	sp, r7
   120f0:	b006      	add	sp, #24
   120f2:	bd80      	pop	{r7, pc}
   120f4:	000117c9 	.word	0x000117c9
   120f8:	00804000 	.word	0x00804000
   120fc:	00804002 	.word	0x00804002
   12100:	00804004 	.word	0x00804004
   12104:	00804006 	.word	0x00804006
   12108:	00011e69 	.word	0x00011e69

0001210c <nvm_set_fuses>:
 *
 * \retval STATUS_ERR_IO      Writing of fuses to user row failed
 */
enum status_code nvm_set_fuses(
		struct nvm_fusebits *fusebits)
{
   1210c:	b590      	push	{r4, r7, lr}
   1210e:	b089      	sub	sp, #36	; 0x24
   12110:	af02      	add	r7, sp, #8
   12112:	6078      	str	r0, [r7, #4]
	Nvmctrl *const nvm_module = NVMCTRL;
   12114:	4b50      	ldr	r3, [pc, #320]	; (12258 <nvm_set_fuses+0x14c>)
   12116:	613b      	str	r3, [r7, #16]
	uint8_t state = _NVM_SET_FUSES_STATE_ERASE_ROW;
   12118:	1c3b      	adds	r3, r7, #0
   1211a:	3317      	adds	r3, #23
   1211c:	2200      	movs	r2, #0
   1211e:	701a      	strb	r2, [r3, #0]
	uint32_t raw_fusebits[2];
	enum status_code err = STATUS_OK;
   12120:	1c3b      	adds	r3, r7, #0
   12122:	3316      	adds	r3, #22
   12124:	2200      	movs	r2, #0
   12126:	701a      	strb	r2, [r3, #0]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   12128:	693b      	ldr	r3, [r7, #16]
   1212a:	699b      	ldr	r3, [r3, #24]
   1212c:	b29b      	uxth	r3, r3
   1212e:	1c1a      	adds	r2, r3, #0
   12130:	2380      	movs	r3, #128	; 0x80
   12132:	005b      	lsls	r3, r3, #1
   12134:	4013      	ands	r3, r2
   12136:	d001      	beq.n	1213c <nvm_set_fuses+0x30>
		return STATUS_ERR_IO;
   12138:	2310      	movs	r3, #16
   1213a:	e089      	b.n	12250 <nvm_set_fuses+0x144>
	}

	/* Enter critcal section to avoid context switching */
	system_interrupt_enter_critical_section();
   1213c:	4b47      	ldr	r3, [pc, #284]	; (1225c <nvm_set_fuses+0x150>)
   1213e:	4798      	blx	r3

	do {

		/* Wait for the nvm controller to become ready */
		while (!nvm_is_ready()) {
   12140:	e7ff      	b.n	12142 <nvm_set_fuses+0x36>
   12142:	46c0      	nop			; (mov r8, r8)
   12144:	4b46      	ldr	r3, [pc, #280]	; (12260 <nvm_set_fuses+0x154>)
   12146:	4798      	blx	r3
   12148:	1c03      	adds	r3, r0, #0
   1214a:	2201      	movs	r2, #1
   1214c:	4053      	eors	r3, r2
   1214e:	b2db      	uxtb	r3, r3
   12150:	2b00      	cmp	r3, #0
   12152:	d1f7      	bne.n	12144 <nvm_set_fuses+0x38>
		}

		/* Has something gone wrong? */
		if (nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_ERROR) {
   12154:	693b      	ldr	r3, [r7, #16]
   12156:	695b      	ldr	r3, [r3, #20]
   12158:	b2db      	uxtb	r3, r3
   1215a:	1c1a      	adds	r2, r3, #0
   1215c:	2302      	movs	r3, #2
   1215e:	4013      	ands	r3, r2
   12160:	d014      	beq.n	1218c <nvm_set_fuses+0x80>
			/* Don't bother about what, just clear status flags and return error status*/
			nvm_module->STATUS.reg  |= ~NVMCTRL_STATUS_MASK;
   12162:	693b      	ldr	r3, [r7, #16]
   12164:	699b      	ldr	r3, [r3, #24]
   12166:	b29b      	uxth	r3, r3
   12168:	4a3e      	ldr	r2, [pc, #248]	; (12264 <nvm_set_fuses+0x158>)
   1216a:	4313      	orrs	r3, r2
   1216c:	b29a      	uxth	r2, r3
   1216e:	693b      	ldr	r3, [r7, #16]
   12170:	831a      	strh	r2, [r3, #24]
			nvm_module->INTFLAG.reg |= NVMCTRL_INTFLAG_ERROR;
   12172:	693b      	ldr	r3, [r7, #16]
   12174:	695b      	ldr	r3, [r3, #20]
   12176:	b2db      	uxtb	r3, r3
   12178:	2202      	movs	r2, #2
   1217a:	4313      	orrs	r3, r2
   1217c:	b2da      	uxtb	r2, r3
   1217e:	693b      	ldr	r3, [r7, #16]
   12180:	751a      	strb	r2, [r3, #20]

			err = STATUS_ERR_IO;
   12182:	1c3b      	adds	r3, r7, #0
   12184:	3316      	adds	r3, #22
   12186:	2210      	movs	r2, #16
   12188:	701a      	strb	r2, [r3, #0]
			break;
   1218a:	e05c      	b.n	12246 <nvm_set_fuses+0x13a>
		}

		switch (state) {
   1218c:	1c3b      	adds	r3, r7, #0
   1218e:	3317      	adds	r3, #23
   12190:	781b      	ldrb	r3, [r3, #0]
   12192:	2b01      	cmp	r3, #1
   12194:	d00d      	beq.n	121b2 <nvm_set_fuses+0xa6>
   12196:	2b02      	cmp	r3, #2
   12198:	d00f      	beq.n	121ba <nvm_set_fuses+0xae>
   1219a:	2b00      	cmp	r3, #0
   1219c:	d12c      	bne.n	121f8 <nvm_set_fuses+0xec>

		case _NVM_SET_FUSES_STATE_ERASE_ROW:
			/* Erase AUX row */
			nvm_module->PARAM.reg = 0;
   1219e:	693b      	ldr	r3, [r7, #16]
   121a0:	2200      	movs	r2, #0
   121a2:	609a      	str	r2, [r3, #8]
			nvm_module->ADDR.reg = NVMCTRL_USER / 2;
   121a4:	693b      	ldr	r3, [r7, #16]
   121a6:	4a30      	ldr	r2, [pc, #192]	; (12268 <nvm_set_fuses+0x15c>)
   121a8:	61da      	str	r2, [r3, #28]
			nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_AUX_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
   121aa:	693b      	ldr	r3, [r7, #16]
   121ac:	4a2f      	ldr	r2, [pc, #188]	; (1226c <nvm_set_fuses+0x160>)
   121ae:	801a      	strh	r2, [r3, #0]
			break;
   121b0:	e03c      	b.n	1222c <nvm_set_fuses+0x120>

		case _NVM_SET_FUSES_STATE_ERASE_PAGE_BUFFER:
			/* Erase the page buffer before buffering new data */
			nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
   121b2:	693b      	ldr	r3, [r7, #16]
   121b4:	4a2e      	ldr	r2, [pc, #184]	; (12270 <nvm_set_fuses+0x164>)
   121b6:	801a      	strh	r2, [r3, #0]
			break;
   121b8:	e038      	b.n	1222c <nvm_set_fuses+0x120>

		case _NVM_SET_FUSES_STATE_WRITE_FUSES:
			_nvm_translate_struct_to_raw_fusebits(fusebits, raw_fusebits);
   121ba:	687a      	ldr	r2, [r7, #4]
   121bc:	1c3b      	adds	r3, r7, #0
   121be:	3308      	adds	r3, #8
   121c0:	1c10      	adds	r0, r2, #0
   121c2:	1c19      	adds	r1, r3, #0
   121c4:	4b2b      	ldr	r3, [pc, #172]	; (12274 <nvm_set_fuses+0x168>)
   121c6:	4798      	blx	r3

			/* Write new user row content (address must be converted from 8-bit to 16-bit aligned) */
			NVM_MEMORY[NVMCTRL_USER / 2]       = ((uint16_t*)raw_fusebits)[0];
   121c8:	4b2b      	ldr	r3, [pc, #172]	; (12278 <nvm_set_fuses+0x16c>)
   121ca:	1c3a      	adds	r2, r7, #0
   121cc:	3208      	adds	r2, #8
   121ce:	8812      	ldrh	r2, [r2, #0]
   121d0:	801a      	strh	r2, [r3, #0]
			NVM_MEMORY[(NVMCTRL_USER / 2) + 1] = ((uint16_t*)raw_fusebits)[1];
   121d2:	4b2a      	ldr	r3, [pc, #168]	; (1227c <nvm_set_fuses+0x170>)
   121d4:	1c3a      	adds	r2, r7, #0
   121d6:	320a      	adds	r2, #10
   121d8:	8812      	ldrh	r2, [r2, #0]
   121da:	801a      	strh	r2, [r3, #0]
			NVM_MEMORY[(NVMCTRL_USER / 2) + 2] = ((uint16_t*)raw_fusebits)[2];
   121dc:	4b28      	ldr	r3, [pc, #160]	; (12280 <nvm_set_fuses+0x174>)
   121de:	1c3a      	adds	r2, r7, #0
   121e0:	320c      	adds	r2, #12
   121e2:	8812      	ldrh	r2, [r2, #0]
   121e4:	801a      	strh	r2, [r3, #0]
			NVM_MEMORY[(NVMCTRL_USER / 2) + 3] = ((uint16_t*)raw_fusebits)[3];
   121e6:	4b27      	ldr	r3, [pc, #156]	; (12284 <nvm_set_fuses+0x178>)
   121e8:	1c3a      	adds	r2, r7, #0
   121ea:	320e      	adds	r2, #14
   121ec:	8812      	ldrh	r2, [r2, #0]
   121ee:	801a      	strh	r2, [r3, #0]

			nvm_module->CTRLA.reg = NVM_COMMAND_WRITE_AUX_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
   121f0:	693b      	ldr	r3, [r7, #16]
   121f2:	4a25      	ldr	r2, [pc, #148]	; (12288 <nvm_set_fuses+0x17c>)
   121f4:	801a      	strh	r2, [r3, #0]
			break;
   121f6:	e019      	b.n	1222c <nvm_set_fuses+0x120>

		default:
			/* Should never be executed */
			Assert(false);
   121f8:	4b24      	ldr	r3, [pc, #144]	; (1228c <nvm_set_fuses+0x180>)
   121fa:	4798      	blx	r3
   121fc:	1c03      	adds	r3, r0, #0
   121fe:	2b00      	cmp	r3, #0
   12200:	d00d      	beq.n	1221e <nvm_set_fuses+0x112>
   12202:	4b22      	ldr	r3, [pc, #136]	; (1228c <nvm_set_fuses+0x180>)
   12204:	4798      	blx	r3
   12206:	1c01      	adds	r1, r0, #0
   12208:	4a21      	ldr	r2, [pc, #132]	; (12290 <nvm_set_fuses+0x184>)
   1220a:	4b22      	ldr	r3, [pc, #136]	; (12294 <nvm_set_fuses+0x188>)
   1220c:	4822      	ldr	r0, [pc, #136]	; (12298 <nvm_set_fuses+0x18c>)
   1220e:	9000      	str	r0, [sp, #0]
   12210:	4822      	ldr	r0, [pc, #136]	; (1229c <nvm_set_fuses+0x190>)
   12212:	9001      	str	r0, [sp, #4]
   12214:	1c08      	adds	r0, r1, #0
   12216:	2101      	movs	r1, #1
   12218:	4c21      	ldr	r4, [pc, #132]	; (122a0 <nvm_set_fuses+0x194>)
   1221a:	47a0      	blx	r4
			break;
   1221c:	e006      	b.n	1222c <nvm_set_fuses+0x120>
			nvm_module->CTRLA.reg = NVM_COMMAND_WRITE_AUX_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
			break;

		default:
			/* Should never be executed */
			Assert(false);
   1221e:	4821      	ldr	r0, [pc, #132]	; (122a4 <nvm_set_fuses+0x198>)
   12220:	491e      	ldr	r1, [pc, #120]	; (1229c <nvm_set_fuses+0x190>)
   12222:	4a1b      	ldr	r2, [pc, #108]	; (12290 <nvm_set_fuses+0x184>)
   12224:	4b1b      	ldr	r3, [pc, #108]	; (12294 <nvm_set_fuses+0x188>)
   12226:	4c20      	ldr	r4, [pc, #128]	; (122a8 <nvm_set_fuses+0x19c>)
   12228:	47a0      	blx	r4
   1222a:	e7fe      	b.n	1222a <nvm_set_fuses+0x11e>
			break;
		}

		/* Goto next state */
		state++;
   1222c:	1c3b      	adds	r3, r7, #0
   1222e:	3317      	adds	r3, #23
   12230:	781a      	ldrb	r2, [r3, #0]
   12232:	1c3b      	adds	r3, r7, #0
   12234:	3317      	adds	r3, #23
   12236:	3201      	adds	r2, #1
   12238:	701a      	strb	r2, [r3, #0]

	} while (state != _NVM_SET_FUSES_STATE_END);
   1223a:	1c3b      	adds	r3, r7, #0
   1223c:	3317      	adds	r3, #23
   1223e:	781b      	ldrb	r3, [r3, #0]
   12240:	2b03      	cmp	r3, #3
   12242:	d000      	beq.n	12246 <nvm_set_fuses+0x13a>
   12244:	e77d      	b.n	12142 <nvm_set_fuses+0x36>

	system_interrupt_leave_critical_section();
   12246:	4b19      	ldr	r3, [pc, #100]	; (122ac <nvm_set_fuses+0x1a0>)
   12248:	4798      	blx	r3

	return err;
   1224a:	1c3b      	adds	r3, r7, #0
   1224c:	3316      	adds	r3, #22
   1224e:	781b      	ldrb	r3, [r3, #0]
}
   12250:	1c18      	adds	r0, r3, #0
   12252:	46bd      	mov	sp, r7
   12254:	b007      	add	sp, #28
   12256:	bd90      	pop	{r4, r7, pc}
   12258:	41004000 	.word	0x41004000
   1225c:	0001189d 	.word	0x0001189d
   12260:	000117c9 	.word	0x000117c9
   12264:	fffffee0 	.word	0xfffffee0
   12268:	00402000 	.word	0x00402000
   1226c:	ffffa505 	.word	0xffffa505
   12270:	ffffa544 	.word	0xffffa544
   12274:	00011fa5 	.word	0x00011fa5
   12278:	00804000 	.word	0x00804000
   1227c:	00804002 	.word	0x00804002
   12280:	00804004 	.word	0x00804004
   12284:	00804006 	.word	0x00804006
   12288:	ffffa506 	.word	0xffffa506
   1228c:	000117b5 	.word	0x000117b5
   12290:	00026018 	.word	0x00026018
   12294:	00000386 	.word	0x00000386
   12298:	00025fd4 	.word	0x00025fd4
   1229c:	00025fec 	.word	0x00025fec
   122a0:	000106e9 	.word	0x000106e9
   122a4:	00025ff4 	.word	0x00025ff4
   122a8:	0001b62d 	.word	0x0001b62d
   122ac:	000118ad 	.word	0x000118ad

000122b0 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
   122b0:	b580      	push	{r7, lr}
   122b2:	af00      	add	r7, sp, #0
	return test_case_ptr;
   122b4:	4b02      	ldr	r3, [pc, #8]	; (122c0 <test_get_case+0x10>)
   122b6:	681b      	ldr	r3, [r3, #0]
}
   122b8:	1c18      	adds	r0, r3, #0
   122ba:	46bd      	mov	sp, r7
   122bc:	bd80      	pop	{r7, pc}
   122be:	46c0      	nop			; (mov r8, r8)
   122c0:	2000041c 	.word	0x2000041c

000122c4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   122c4:	b590      	push	{r4, r7, lr}
   122c6:	b085      	sub	sp, #20
   122c8:	af02      	add	r7, sp, #8
   122ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
   122cc:	4b16      	ldr	r3, [pc, #88]	; (12328 <system_pinmux_get_config_defaults+0x64>)
   122ce:	4798      	blx	r3
   122d0:	1c03      	adds	r3, r0, #0
   122d2:	2b00      	cmp	r3, #0
   122d4:	d011      	beq.n	122fa <system_pinmux_get_config_defaults+0x36>
   122d6:	687b      	ldr	r3, [r7, #4]
   122d8:	2b00      	cmp	r3, #0
   122da:	d119      	bne.n	12310 <system_pinmux_get_config_defaults+0x4c>
   122dc:	4b12      	ldr	r3, [pc, #72]	; (12328 <system_pinmux_get_config_defaults+0x64>)
   122de:	4798      	blx	r3
   122e0:	1c01      	adds	r1, r0, #0
   122e2:	4a12      	ldr	r2, [pc, #72]	; (1232c <system_pinmux_get_config_defaults+0x68>)
   122e4:	239d      	movs	r3, #157	; 0x9d
   122e6:	005b      	lsls	r3, r3, #1
   122e8:	4811      	ldr	r0, [pc, #68]	; (12330 <system_pinmux_get_config_defaults+0x6c>)
   122ea:	9000      	str	r0, [sp, #0]
   122ec:	4811      	ldr	r0, [pc, #68]	; (12334 <system_pinmux_get_config_defaults+0x70>)
   122ee:	9001      	str	r0, [sp, #4]
   122f0:	1c08      	adds	r0, r1, #0
   122f2:	2101      	movs	r1, #1
   122f4:	4c10      	ldr	r4, [pc, #64]	; (12338 <system_pinmux_get_config_defaults+0x74>)
   122f6:	47a0      	blx	r4
   122f8:	e00a      	b.n	12310 <system_pinmux_get_config_defaults+0x4c>
   122fa:	687b      	ldr	r3, [r7, #4]
   122fc:	2b00      	cmp	r3, #0
   122fe:	d107      	bne.n	12310 <system_pinmux_get_config_defaults+0x4c>
   12300:	480e      	ldr	r0, [pc, #56]	; (1233c <system_pinmux_get_config_defaults+0x78>)
   12302:	490c      	ldr	r1, [pc, #48]	; (12334 <system_pinmux_get_config_defaults+0x70>)
   12304:	4a09      	ldr	r2, [pc, #36]	; (1232c <system_pinmux_get_config_defaults+0x68>)
   12306:	239d      	movs	r3, #157	; 0x9d
   12308:	005b      	lsls	r3, r3, #1
   1230a:	4c0d      	ldr	r4, [pc, #52]	; (12340 <system_pinmux_get_config_defaults+0x7c>)
   1230c:	47a0      	blx	r4
   1230e:	e7fe      	b.n	1230e <system_pinmux_get_config_defaults+0x4a>

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   12310:	687b      	ldr	r3, [r7, #4]
   12312:	2280      	movs	r2, #128	; 0x80
   12314:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12316:	687b      	ldr	r3, [r7, #4]
   12318:	2200      	movs	r2, #0
   1231a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1231c:	687b      	ldr	r3, [r7, #4]
   1231e:	2201      	movs	r2, #1
   12320:	709a      	strb	r2, [r3, #2]
}
   12322:	46bd      	mov	sp, r7
   12324:	b003      	add	sp, #12
   12326:	bd90      	pop	{r4, r7, pc}
   12328:	000122b1 	.word	0x000122b1
   1232c:	00026168 	.word	0x00026168
   12330:	00026198 	.word	0x00026198
   12334:	000261b0 	.word	0x000261b0
   12338:	000106e9 	.word	0x000106e9
   1233c:	000261b8 	.word	0x000261b8
   12340:	0001b62d 	.word	0x0001b62d

00012344 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin.
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   12344:	b590      	push	{r4, r7, lr}
   12346:	b087      	sub	sp, #28
   12348:	af02      	add	r7, sp, #8
   1234a:	1c02      	adds	r2, r0, #0
   1234c:	6039      	str	r1, [r7, #0]
   1234e:	1dfb      	adds	r3, r7, #7
   12350:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);
   12352:	4b21      	ldr	r3, [pc, #132]	; (123d8 <port_pin_set_config+0x94>)
   12354:	4798      	blx	r3
   12356:	1c03      	adds	r3, r0, #0
   12358:	2b00      	cmp	r3, #0
   1235a:	d011      	beq.n	12380 <port_pin_set_config+0x3c>
   1235c:	683b      	ldr	r3, [r7, #0]
   1235e:	2b00      	cmp	r3, #0
   12360:	d11b      	bne.n	1239a <port_pin_set_config+0x56>
   12362:	4b1d      	ldr	r3, [pc, #116]	; (123d8 <port_pin_set_config+0x94>)
   12364:	4798      	blx	r3
   12366:	1c02      	adds	r2, r0, #0
   12368:	4b1c      	ldr	r3, [pc, #112]	; (123dc <port_pin_set_config+0x98>)
   1236a:	491d      	ldr	r1, [pc, #116]	; (123e0 <port_pin_set_config+0x9c>)
   1236c:	9100      	str	r1, [sp, #0]
   1236e:	491d      	ldr	r1, [pc, #116]	; (123e4 <port_pin_set_config+0xa0>)
   12370:	9101      	str	r1, [sp, #4]
   12372:	1c10      	adds	r0, r2, #0
   12374:	2101      	movs	r1, #1
   12376:	1c1a      	adds	r2, r3, #0
   12378:	233e      	movs	r3, #62	; 0x3e
   1237a:	4c1b      	ldr	r4, [pc, #108]	; (123e8 <port_pin_set_config+0xa4>)
   1237c:	47a0      	blx	r4
   1237e:	e00c      	b.n	1239a <port_pin_set_config+0x56>
   12380:	683b      	ldr	r3, [r7, #0]
   12382:	2b00      	cmp	r3, #0
   12384:	d109      	bne.n	1239a <port_pin_set_config+0x56>
   12386:	4919      	ldr	r1, [pc, #100]	; (123ec <port_pin_set_config+0xa8>)
   12388:	4a16      	ldr	r2, [pc, #88]	; (123e4 <port_pin_set_config+0xa0>)
   1238a:	4b14      	ldr	r3, [pc, #80]	; (123dc <port_pin_set_config+0x98>)
   1238c:	1c08      	adds	r0, r1, #0
   1238e:	1c11      	adds	r1, r2, #0
   12390:	1c1a      	adds	r2, r3, #0
   12392:	233e      	movs	r3, #62	; 0x3e
   12394:	4c16      	ldr	r4, [pc, #88]	; (123f0 <port_pin_set_config+0xac>)
   12396:	47a0      	blx	r4
   12398:	e7fe      	b.n	12398 <port_pin_set_config+0x54>

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   1239a:	1c3b      	adds	r3, r7, #0
   1239c:	330c      	adds	r3, #12
   1239e:	1c18      	adds	r0, r3, #0
   123a0:	4b14      	ldr	r3, [pc, #80]	; (123f4 <port_pin_set_config+0xb0>)
   123a2:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   123a4:	1c3b      	adds	r3, r7, #0
   123a6:	330c      	adds	r3, #12
   123a8:	2280      	movs	r2, #128	; 0x80
   123aa:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   123ac:	683b      	ldr	r3, [r7, #0]
   123ae:	781a      	ldrb	r2, [r3, #0]
   123b0:	1c3b      	adds	r3, r7, #0
   123b2:	330c      	adds	r3, #12
   123b4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   123b6:	683b      	ldr	r3, [r7, #0]
   123b8:	785a      	ldrb	r2, [r3, #1]
   123ba:	1c3b      	adds	r3, r7, #0
   123bc:	330c      	adds	r3, #12
   123be:	709a      	strb	r2, [r3, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   123c0:	1dfb      	adds	r3, r7, #7
   123c2:	781a      	ldrb	r2, [r3, #0]
   123c4:	1c3b      	adds	r3, r7, #0
   123c6:	330c      	adds	r3, #12
   123c8:	1c10      	adds	r0, r2, #0
   123ca:	1c19      	adds	r1, r3, #0
   123cc:	4b0a      	ldr	r3, [pc, #40]	; (123f8 <port_pin_set_config+0xb4>)
   123ce:	4798      	blx	r3
}
   123d0:	46bd      	mov	sp, r7
   123d2:	b005      	add	sp, #20
   123d4:	bd90      	pop	{r4, r7, pc}
   123d6:	46c0      	nop			; (mov r8, r8)
   123d8:	000122b1 	.word	0x000122b1
   123dc:	000261dc 	.word	0x000261dc
   123e0:	00026198 	.word	0x00026198
   123e4:	000261b0 	.word	0x000261b0
   123e8:	000106e9 	.word	0x000106e9
   123ec:	000261b8 	.word	0x000261b8
   123f0:	0001b62d 	.word	0x0001b62d
   123f4:	000122c5 	.word	0x000122c5
   123f8:	00017d71 	.word	0x00017d71

000123fc <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
   123fc:	b580      	push	{r7, lr}
   123fe:	af00      	add	r7, sp, #0
	return test_case_ptr;
   12400:	4b02      	ldr	r3, [pc, #8]	; (1240c <test_get_case+0x10>)
   12402:	681b      	ldr	r3, [r3, #0]
}
   12404:	1c18      	adds	r0, r3, #0
   12406:	46bd      	mov	sp, r7
   12408:	bd80      	pop	{r7, pc}
   1240a:	46c0      	nop			; (mov r8, r8)
   1240c:	2000041c 	.word	0x2000041c

00012410 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   12410:	b590      	push	{r4, r7, lr}
   12412:	b085      	sub	sp, #20
   12414:	af02      	add	r7, sp, #8
   12416:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
   12418:	4b15      	ldr	r3, [pc, #84]	; (12470 <system_gclk_chan_get_config_defaults+0x60>)
   1241a:	4798      	blx	r3
   1241c:	1c03      	adds	r3, r0, #0
   1241e:	2b00      	cmp	r3, #0
   12420:	d011      	beq.n	12446 <system_gclk_chan_get_config_defaults+0x36>
   12422:	687b      	ldr	r3, [r7, #4]
   12424:	2b00      	cmp	r3, #0
   12426:	d119      	bne.n	1245c <system_gclk_chan_get_config_defaults+0x4c>
   12428:	4b11      	ldr	r3, [pc, #68]	; (12470 <system_gclk_chan_get_config_defaults+0x60>)
   1242a:	4798      	blx	r3
   1242c:	1c01      	adds	r1, r0, #0
   1242e:	4a11      	ldr	r2, [pc, #68]	; (12474 <system_gclk_chan_get_config_defaults+0x64>)
   12430:	2314      	movs	r3, #20
   12432:	33ff      	adds	r3, #255	; 0xff
   12434:	4810      	ldr	r0, [pc, #64]	; (12478 <system_gclk_chan_get_config_defaults+0x68>)
   12436:	9000      	str	r0, [sp, #0]
   12438:	4810      	ldr	r0, [pc, #64]	; (1247c <system_gclk_chan_get_config_defaults+0x6c>)
   1243a:	9001      	str	r0, [sp, #4]
   1243c:	1c08      	adds	r0, r1, #0
   1243e:	2101      	movs	r1, #1
   12440:	4c0f      	ldr	r4, [pc, #60]	; (12480 <system_gclk_chan_get_config_defaults+0x70>)
   12442:	47a0      	blx	r4
   12444:	e00a      	b.n	1245c <system_gclk_chan_get_config_defaults+0x4c>
   12446:	687b      	ldr	r3, [r7, #4]
   12448:	2b00      	cmp	r3, #0
   1244a:	d107      	bne.n	1245c <system_gclk_chan_get_config_defaults+0x4c>
   1244c:	480d      	ldr	r0, [pc, #52]	; (12484 <system_gclk_chan_get_config_defaults+0x74>)
   1244e:	490b      	ldr	r1, [pc, #44]	; (1247c <system_gclk_chan_get_config_defaults+0x6c>)
   12450:	4a08      	ldr	r2, [pc, #32]	; (12474 <system_gclk_chan_get_config_defaults+0x64>)
   12452:	2314      	movs	r3, #20
   12454:	33ff      	adds	r3, #255	; 0xff
   12456:	4c0c      	ldr	r4, [pc, #48]	; (12488 <system_gclk_chan_get_config_defaults+0x78>)
   12458:	47a0      	blx	r4
   1245a:	e7fe      	b.n	1245a <system_gclk_chan_get_config_defaults+0x4a>

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   1245c:	687b      	ldr	r3, [r7, #4]
   1245e:	2200      	movs	r2, #0
   12460:	701a      	strb	r2, [r3, #0]
	config->write_lock       = false;
   12462:	687b      	ldr	r3, [r7, #4]
   12464:	2200      	movs	r2, #0
   12466:	705a      	strb	r2, [r3, #1]
}
   12468:	46bd      	mov	sp, r7
   1246a:	b003      	add	sp, #12
   1246c:	bd90      	pop	{r4, r7, pc}
   1246e:	46c0      	nop			; (mov r8, r8)
   12470:	000123fd 	.word	0x000123fd
   12474:	00026208 	.word	0x00026208
   12478:	00026234 	.word	0x00026234
   1247c:	0002624c 	.word	0x0002624c
   12480:	000106e9 	.word	0x000106e9
   12484:	00026254 	.word	0x00026254
   12488:	0001b62d 	.word	0x0001b62d

0001248c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1248c:	b590      	push	{r4, r7, lr}
   1248e:	b085      	sub	sp, #20
   12490:	af02      	add	r7, sp, #8
   12492:	1c02      	adds	r2, r0, #0
   12494:	6039      	str	r1, [r7, #0]
   12496:	1dfb      	adds	r3, r7, #7
   12498:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1249a:	1dfb      	adds	r3, r7, #7
   1249c:	781b      	ldrb	r3, [r3, #0]
   1249e:	2b01      	cmp	r3, #1
   124a0:	d00a      	beq.n	124b8 <system_apb_clock_set_mask+0x2c>
   124a2:	2b02      	cmp	r3, #2
   124a4:	d00f      	beq.n	124c6 <system_apb_clock_set_mask+0x3a>
   124a6:	2b00      	cmp	r3, #0
   124a8:	d114      	bne.n	124d4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   124aa:	4b1a      	ldr	r3, [pc, #104]	; (12514 <system_apb_clock_set_mask+0x88>)
   124ac:	4a19      	ldr	r2, [pc, #100]	; (12514 <system_apb_clock_set_mask+0x88>)
   124ae:	6991      	ldr	r1, [r2, #24]
   124b0:	683a      	ldr	r2, [r7, #0]
   124b2:	430a      	orrs	r2, r1
   124b4:	619a      	str	r2, [r3, #24]
			break;
   124b6:	e028      	b.n	1250a <system_apb_clock_set_mask+0x7e>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   124b8:	4b16      	ldr	r3, [pc, #88]	; (12514 <system_apb_clock_set_mask+0x88>)
   124ba:	4a16      	ldr	r2, [pc, #88]	; (12514 <system_apb_clock_set_mask+0x88>)
   124bc:	69d1      	ldr	r1, [r2, #28]
   124be:	683a      	ldr	r2, [r7, #0]
   124c0:	430a      	orrs	r2, r1
   124c2:	61da      	str	r2, [r3, #28]
			break;
   124c4:	e021      	b.n	1250a <system_apb_clock_set_mask+0x7e>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   124c6:	4b13      	ldr	r3, [pc, #76]	; (12514 <system_apb_clock_set_mask+0x88>)
   124c8:	4a12      	ldr	r2, [pc, #72]	; (12514 <system_apb_clock_set_mask+0x88>)
   124ca:	6a11      	ldr	r1, [r2, #32]
   124cc:	683a      	ldr	r2, [r7, #0]
   124ce:	430a      	orrs	r2, r1
   124d0:	621a      	str	r2, [r3, #32]
			break;
   124d2:	e01a      	b.n	1250a <system_apb_clock_set_mask+0x7e>

		default:
			Assert(false);
   124d4:	4b10      	ldr	r3, [pc, #64]	; (12518 <system_apb_clock_set_mask+0x8c>)
   124d6:	4798      	blx	r3
   124d8:	1c03      	adds	r3, r0, #0
   124da:	2b00      	cmp	r3, #0
   124dc:	d00e      	beq.n	124fc <system_apb_clock_set_mask+0x70>
   124de:	4b0e      	ldr	r3, [pc, #56]	; (12518 <system_apb_clock_set_mask+0x8c>)
   124e0:	4798      	blx	r3
   124e2:	1c01      	adds	r1, r0, #0
   124e4:	4a0d      	ldr	r2, [pc, #52]	; (1251c <system_apb_clock_set_mask+0x90>)
   124e6:	4b0e      	ldr	r3, [pc, #56]	; (12520 <system_apb_clock_set_mask+0x94>)
   124e8:	480e      	ldr	r0, [pc, #56]	; (12524 <system_apb_clock_set_mask+0x98>)
   124ea:	9000      	str	r0, [sp, #0]
   124ec:	480e      	ldr	r0, [pc, #56]	; (12528 <system_apb_clock_set_mask+0x9c>)
   124ee:	9001      	str	r0, [sp, #4]
   124f0:	1c08      	adds	r0, r1, #0
   124f2:	2101      	movs	r1, #1
   124f4:	4c0d      	ldr	r4, [pc, #52]	; (1252c <system_apb_clock_set_mask+0xa0>)
   124f6:	47a0      	blx	r4
			return STATUS_ERR_INVALID_ARG;
   124f8:	2317      	movs	r3, #23
   124fa:	e007      	b.n	1250c <system_apb_clock_set_mask+0x80>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
			break;

		default:
			Assert(false);
   124fc:	480c      	ldr	r0, [pc, #48]	; (12530 <system_apb_clock_set_mask+0xa4>)
   124fe:	490a      	ldr	r1, [pc, #40]	; (12528 <system_apb_clock_set_mask+0x9c>)
   12500:	4a06      	ldr	r2, [pc, #24]	; (1251c <system_apb_clock_set_mask+0x90>)
   12502:	4b07      	ldr	r3, [pc, #28]	; (12520 <system_apb_clock_set_mask+0x94>)
   12504:	4c0b      	ldr	r4, [pc, #44]	; (12534 <system_apb_clock_set_mask+0xa8>)
   12506:	47a0      	blx	r4
   12508:	e7fe      	b.n	12508 <system_apb_clock_set_mask+0x7c>
			return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
   1250a:	2300      	movs	r3, #0
}
   1250c:	1c18      	adds	r0, r3, #0
   1250e:	46bd      	mov	sp, r7
   12510:	b003      	add	sp, #12
   12512:	bd90      	pop	{r4, r7, pc}
   12514:	40000400 	.word	0x40000400
   12518:	000123fd 	.word	0x000123fd
   1251c:	00026278 	.word	0x00026278
   12520:	00000409 	.word	0x00000409
   12524:	00026234 	.word	0x00026234
   12528:	000262a8 	.word	0x000262a8
   1252c:	000106e9 	.word	0x000106e9
   12530:	00026254 	.word	0x00026254
   12534:	0001b62d 	.word	0x0001b62d

00012538 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   12538:	b580      	push	{r7, lr}
   1253a:	b082      	sub	sp, #8
   1253c:	af00      	add	r7, sp, #0
   1253e:	1c02      	adds	r2, r0, #0
   12540:	1dfb      	adds	r3, r7, #7
   12542:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12544:	4a07      	ldr	r2, [pc, #28]	; (12564 <system_interrupt_disable+0x2c>)
   12546:	1dfb      	adds	r3, r7, #7
   12548:	781b      	ldrb	r3, [r3, #0]
   1254a:	1c19      	adds	r1, r3, #0
   1254c:	231f      	movs	r3, #31
   1254e:	400b      	ands	r3, r1
   12550:	2101      	movs	r1, #1
   12552:	1c08      	adds	r0, r1, #0
   12554:	4098      	lsls	r0, r3
   12556:	1c03      	adds	r3, r0, #0
   12558:	1c19      	adds	r1, r3, #0
   1255a:	2380      	movs	r3, #128	; 0x80
   1255c:	50d1      	str	r1, [r2, r3]
}
   1255e:	46bd      	mov	sp, r7
   12560:	b002      	add	sp, #8
   12562:	bd80      	pop	{r7, pc}
   12564:	e000e100 	.word	0xe000e100

00012568 <rtc_calendar_is_syncing>:
 *
 * \retval true  if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(void)
{
   12568:	b580      	push	{r7, lr}
   1256a:	b082      	sub	sp, #8
   1256c:	af00      	add	r7, sp, #0
        Rtc *const rtc_module = RTC;
   1256e:	4b09      	ldr	r3, [pc, #36]	; (12594 <rtc_calendar_is_syncing+0x2c>)
   12570:	607b      	str	r3, [r7, #4]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   12572:	687b      	ldr	r3, [r7, #4]
   12574:	689b      	ldr	r3, [r3, #8]
   12576:	021b      	lsls	r3, r3, #8
   12578:	0e1b      	lsrs	r3, r3, #24
   1257a:	b2db      	uxtb	r3, r3
   1257c:	b2db      	uxtb	r3, r3
   1257e:	b25b      	sxtb	r3, r3
   12580:	2b00      	cmp	r3, #0
   12582:	da01      	bge.n	12588 <rtc_calendar_is_syncing+0x20>
                return true;
   12584:	2301      	movs	r3, #1
   12586:	e000      	b.n	1258a <rtc_calendar_is_syncing+0x22>
        }

        return false;
   12588:	2300      	movs	r3, #0
}
   1258a:	1c18      	adds	r0, r3, #0
   1258c:	46bd      	mov	sp, r7
   1258e:	b002      	add	sp, #8
   12590:	bd80      	pop	{r7, pc}
   12592:	46c0      	nop			; (mov r8, r8)
   12594:	40001400 	.word	0x40001400

00012598 <rtc_calendar_disable>:
 * \brief Disables the RTC module.
 *
 * Disables the RTC module.
 */
static inline void rtc_calendar_disable(void)
{
   12598:	b580      	push	{r7, lr}
   1259a:	b082      	sub	sp, #8
   1259c:	af00      	add	r7, sp, #0
	/* Initialize module pointer. */
	Rtc *const rtc_module = RTC;
   1259e:	4b0b      	ldr	r3, [pc, #44]	; (125cc <rtc_calendar_disable+0x34>)
   125a0:	607b      	str	r3, [r7, #4]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   125a2:	2003      	movs	r0, #3
   125a4:	4b0a      	ldr	r3, [pc, #40]	; (125d0 <rtc_calendar_disable+0x38>)
   125a6:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing()) {
   125a8:	46c0      	nop			; (mov r8, r8)
   125aa:	4b0a      	ldr	r3, [pc, #40]	; (125d4 <rtc_calendar_disable+0x3c>)
   125ac:	4798      	blx	r3
   125ae:	1c03      	adds	r3, r0, #0
   125b0:	2b00      	cmp	r3, #0
   125b2:	d1fa      	bne.n	125aa <rtc_calendar_disable+0x12>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   125b4:	687b      	ldr	r3, [r7, #4]
   125b6:	681b      	ldr	r3, [r3, #0]
   125b8:	b29b      	uxth	r3, r3
   125ba:	2202      	movs	r2, #2
   125bc:	4393      	bics	r3, r2
   125be:	b29a      	uxth	r2, r3
   125c0:	687b      	ldr	r3, [r7, #4]
   125c2:	801a      	strh	r2, [r3, #0]
}
   125c4:	46bd      	mov	sp, r7
   125c6:	b002      	add	sp, #8
   125c8:	bd80      	pop	{r7, pc}
   125ca:	46c0      	nop			; (mov r8, r8)
   125cc:	40001400 	.word	0x40001400
   125d0:	00012539 	.word	0x00012539
   125d4:	00012569 	.word	0x00012569

000125d8 <rtc_calendar_reset>:
/**
 * \brief Resets the RTC module
 * Resets the RTC module to hardware defaults.
 */
void rtc_calendar_reset(void)
{
   125d8:	b580      	push	{r7, lr}
   125da:	b082      	sub	sp, #8
   125dc:	af00      	add	r7, sp, #0
	/* Initialize module pointer. */
	Rtc *const rtc_module = RTC;
   125de:	4b0d      	ldr	r3, [pc, #52]	; (12614 <rtc_calendar_reset+0x3c>)
   125e0:	607b      	str	r3, [r7, #4]

	/* Disable module before reset. */
	rtc_calendar_disable();
   125e2:	4b0d      	ldr	r3, [pc, #52]	; (12618 <rtc_calendar_reset+0x40>)
   125e4:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	_rtc_dev.registered_callback = 0;
   125e6:	4b0d      	ldr	r3, [pc, #52]	; (1261c <rtc_calendar_reset+0x44>)
   125e8:	2200      	movs	r2, #0
   125ea:	731a      	strb	r2, [r3, #12]
	_rtc_dev.enabled_callback    = 0;
   125ec:	4b0b      	ldr	r3, [pc, #44]	; (1261c <rtc_calendar_reset+0x44>)
   125ee:	2200      	movs	r2, #0
   125f0:	735a      	strb	r2, [r3, #13]
#endif

	while (rtc_calendar_is_syncing()) {
   125f2:	46c0      	nop			; (mov r8, r8)
   125f4:	4b0a      	ldr	r3, [pc, #40]	; (12620 <rtc_calendar_reset+0x48>)
   125f6:	4798      	blx	r3
   125f8:	1c03      	adds	r3, r0, #0
   125fa:	2b00      	cmp	r3, #0
   125fc:	d1fa      	bne.n	125f4 <rtc_calendar_reset+0x1c>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   125fe:	687b      	ldr	r3, [r7, #4]
   12600:	681b      	ldr	r3, [r3, #0]
   12602:	b29b      	uxth	r3, r3
   12604:	2201      	movs	r2, #1
   12606:	4313      	orrs	r3, r2
   12608:	b29a      	uxth	r2, r3
   1260a:	687b      	ldr	r3, [r7, #4]
   1260c:	801a      	strh	r2, [r3, #0]
}
   1260e:	46bd      	mov	sp, r7
   12610:	b002      	add	sp, #8
   12612:	bd80      	pop	{r7, pc}
   12614:	40001400 	.word	0x40001400
   12618:	00012599 	.word	0x00012599
   1261c:	200011f0 	.word	0x200011f0
   12620:	00012569 	.word	0x00012569

00012624 <_rtc_calendar_time_to_register_value>:
/**
 * \internal Convert time structure to register_value.
 */
static uint32_t _rtc_calendar_time_to_register_value(
		const struct rtc_calendar_time *const time)
{
   12624:	b580      	push	{r7, lr}
   12626:	b084      	sub	sp, #16
   12628:	af00      	add	r7, sp, #0
   1262a:	6078      	str	r0, [r7, #4]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - _rtc_dev.year_init_value) <<
   1262c:	687b      	ldr	r3, [r7, #4]
   1262e:	88db      	ldrh	r3, [r3, #6]
   12630:	1c1a      	adds	r2, r3, #0
   12632:	4b1d      	ldr	r3, [pc, #116]	; (126a8 <_rtc_calendar_time_to_register_value+0x84>)
   12634:	681b      	ldr	r3, [r3, #0]
   12636:	0c1b      	lsrs	r3, r3, #16
   12638:	b29b      	uxth	r3, r3
   1263a:	1ad3      	subs	r3, r2, r3
   1263c:	069b      	lsls	r3, r3, #26
   1263e:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   12640:	687b      	ldr	r3, [r7, #4]
   12642:	795b      	ldrb	r3, [r3, #5]
   12644:	059b      	lsls	r3, r3, #22
   12646:	68fa      	ldr	r2, [r7, #12]
   12648:	4313      	orrs	r3, r2
   1264a:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   1264c:	687b      	ldr	r3, [r7, #4]
   1264e:	791b      	ldrb	r3, [r3, #4]
   12650:	045b      	lsls	r3, r3, #17
   12652:	68fa      	ldr	r2, [r7, #12]
   12654:	4313      	orrs	r3, r2
   12656:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   12658:	687b      	ldr	r3, [r7, #4]
   1265a:	789b      	ldrb	r3, [r3, #2]
   1265c:	031b      	lsls	r3, r3, #12
   1265e:	68fa      	ldr	r2, [r7, #12]
   12660:	4313      	orrs	r3, r2
   12662:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(_rtc_dev.clock_24h) && (time->pm)) {
   12664:	4b10      	ldr	r3, [pc, #64]	; (126a8 <_rtc_calendar_time_to_register_value+0x84>)
   12666:	681b      	ldr	r3, [r3, #0]
   12668:	b2db      	uxtb	r3, r3
   1266a:	2201      	movs	r2, #1
   1266c:	4053      	eors	r3, r2
   1266e:	b2db      	uxtb	r3, r3
   12670:	2b00      	cmp	r3, #0
   12672:	d008      	beq.n	12686 <_rtc_calendar_time_to_register_value+0x62>
   12674:	687b      	ldr	r3, [r7, #4]
   12676:	78db      	ldrb	r3, [r3, #3]
   12678:	2b00      	cmp	r3, #0
   1267a:	d004      	beq.n	12686 <_rtc_calendar_time_to_register_value+0x62>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   1267c:	68fb      	ldr	r3, [r7, #12]
   1267e:	2280      	movs	r2, #128	; 0x80
   12680:	0252      	lsls	r2, r2, #9
   12682:	4313      	orrs	r3, r2
   12684:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   12686:	687b      	ldr	r3, [r7, #4]
   12688:	785b      	ldrb	r3, [r3, #1]
   1268a:	019b      	lsls	r3, r3, #6
   1268c:	68fa      	ldr	r2, [r7, #12]
   1268e:	4313      	orrs	r3, r2
   12690:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   12692:	687b      	ldr	r3, [r7, #4]
   12694:	781b      	ldrb	r3, [r3, #0]
   12696:	68fa      	ldr	r2, [r7, #12]
   12698:	4313      	orrs	r3, r2
   1269a:	60fb      	str	r3, [r7, #12]

	return register_value;
   1269c:	68fb      	ldr	r3, [r7, #12]
}
   1269e:	1c18      	adds	r0, r3, #0
   126a0:	46bd      	mov	sp, r7
   126a2:	b004      	add	sp, #16
   126a4:	bd80      	pop	{r7, pc}
   126a6:	46c0      	nop			; (mov r8, r8)
   126a8:	200011f0 	.word	0x200011f0

000126ac <_rtc_calendar_register_value_to_time>:
 * \internal Convert register_value to time structure.
 */
static void _rtc_calendar_register_value_to_time(
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   126ac:	b580      	push	{r7, lr}
   126ae:	b082      	sub	sp, #8
   126b0:	af00      	add	r7, sp, #0
   126b2:	6078      	str	r0, [r7, #4]
   126b4:	6039      	str	r1, [r7, #0]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   126b6:	687b      	ldr	r3, [r7, #4]
   126b8:	0e9b      	lsrs	r3, r3, #26
   126ba:	b29a      	uxth	r2, r3
			RTC_MODE2_CLOCK_YEAR_Pos) + _rtc_dev.year_init_value;
   126bc:	4b24      	ldr	r3, [pc, #144]	; (12750 <_rtc_calendar_register_value_to_time+0xa4>)
   126be:	681b      	ldr	r3, [r3, #0]
   126c0:	0c1b      	lsrs	r3, r3, #16
   126c2:	b29b      	uxth	r3, r3
static void _rtc_calendar_register_value_to_time(
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   126c4:	18d3      	adds	r3, r2, r3
   126c6:	b29a      	uxth	r2, r3
   126c8:	683b      	ldr	r3, [r7, #0]
   126ca:	80da      	strh	r2, [r3, #6]
			RTC_MODE2_CLOCK_YEAR_Pos) + _rtc_dev.year_init_value;

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   126cc:	687a      	ldr	r2, [r7, #4]
   126ce:	23f0      	movs	r3, #240	; 0xf0
   126d0:	049b      	lsls	r3, r3, #18
   126d2:	4013      	ands	r3, r2
   126d4:	0d9b      	lsrs	r3, r3, #22
   126d6:	b2da      	uxtb	r2, r3
   126d8:	683b      	ldr	r3, [r7, #0]
   126da:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   126dc:	687a      	ldr	r2, [r7, #4]
   126de:	23f8      	movs	r3, #248	; 0xf8
   126e0:	039b      	lsls	r3, r3, #14
   126e2:	4013      	ands	r3, r2
   126e4:	0c5b      	lsrs	r3, r3, #17
   126e6:	b2da      	uxtb	r2, r3
   126e8:	683b      	ldr	r3, [r7, #0]
   126ea:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (_rtc_dev.clock_24h) {
   126ec:	4b18      	ldr	r3, [pc, #96]	; (12750 <_rtc_calendar_register_value_to_time+0xa4>)
   126ee:	681b      	ldr	r3, [r3, #0]
   126f0:	b2db      	uxtb	r3, r3
   126f2:	2b00      	cmp	r3, #0
   126f4:	d008      	beq.n	12708 <_rtc_calendar_register_value_to_time+0x5c>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   126f6:	687a      	ldr	r2, [r7, #4]
   126f8:	23f8      	movs	r3, #248	; 0xf8
   126fa:	025b      	lsls	r3, r3, #9
   126fc:	4013      	ands	r3, r2
   126fe:	0b1b      	lsrs	r3, r3, #12
   12700:	b2da      	uxtb	r2, r3
   12702:	683b      	ldr	r3, [r7, #0]
   12704:	709a      	strb	r2, [r3, #2]
   12706:	e010      	b.n	1272a <_rtc_calendar_register_value_to_time+0x7e>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
   12708:	687a      	ldr	r2, [r7, #4]
   1270a:	23f0      	movs	r3, #240	; 0xf0
   1270c:	021b      	lsls	r3, r3, #8
   1270e:	4013      	ands	r3, r2
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   12710:	0b1b      	lsrs	r3, r3, #12
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
   12712:	b2da      	uxtb	r2, r3
   12714:	683b      	ldr	r3, [r7, #0]
   12716:	709a      	strb	r2, [r3, #2]
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   12718:	687a      	ldr	r2, [r7, #4]
   1271a:	2380      	movs	r3, #128	; 0x80
   1271c:	025b      	lsls	r3, r3, #9
   1271e:	4013      	ands	r3, r2
   12720:	1e5a      	subs	r2, r3, #1
   12722:	4193      	sbcs	r3, r2
   12724:	b2da      	uxtb	r2, r3
   12726:	683b      	ldr	r3, [r7, #0]
   12728:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   1272a:	687a      	ldr	r2, [r7, #4]
   1272c:	23fc      	movs	r3, #252	; 0xfc
   1272e:	011b      	lsls	r3, r3, #4
   12730:	4013      	ands	r3, r2
   12732:	099b      	lsrs	r3, r3, #6
   12734:	b2da      	uxtb	r2, r3
   12736:	683b      	ldr	r3, [r7, #0]
   12738:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   1273a:	687b      	ldr	r3, [r7, #4]
   1273c:	b2da      	uxtb	r2, r3
   1273e:	233f      	movs	r3, #63	; 0x3f
   12740:	4013      	ands	r3, r2
   12742:	b2da      	uxtb	r2, r3
   12744:	683b      	ldr	r3, [r7, #0]
   12746:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   12748:	46bd      	mov	sp, r7
   1274a:	b002      	add	sp, #8
   1274c:	bd80      	pop	{r7, pc}
   1274e:	46c0      	nop			; (mov r8, r8)
   12750:	200011f0 	.word	0x200011f0

00012754 <_rtc_calendar_set_config>:
 *
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		const struct rtc_calendar_config *const config)
{
   12754:	b580      	push	{r7, lr}
   12756:	b084      	sub	sp, #16
   12758:	af00      	add	r7, sp, #0
   1275a:	6078      	str	r0, [r7, #4]
	/* Initialize module pointer. */
	Rtc *const rtc_module = RTC;
   1275c:	4b2d      	ldr	r3, [pc, #180]	; (12814 <_rtc_calendar_set_config+0xc0>)
   1275e:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   12760:	687b      	ldr	r3, [r7, #4]
   12762:	881a      	ldrh	r2, [r3, #0]
   12764:	1c3b      	adds	r3, r7, #0
   12766:	330e      	adds	r3, #14
   12768:	2108      	movs	r1, #8
   1276a:	430a      	orrs	r2, r1
   1276c:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   1276e:	687b      	ldr	r3, [r7, #4]
   12770:	791b      	ldrb	r3, [r3, #4]
   12772:	2201      	movs	r2, #1
   12774:	4053      	eors	r3, r2
   12776:	b2db      	uxtb	r3, r3
   12778:	2b00      	cmp	r3, #0
   1277a:	d007      	beq.n	1278c <_rtc_calendar_set_config+0x38>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   1277c:	1c3b      	adds	r3, r7, #0
   1277e:	330e      	adds	r3, #14
   12780:	1c3a      	adds	r2, r7, #0
   12782:	320e      	adds	r2, #14
   12784:	8812      	ldrh	r2, [r2, #0]
   12786:	2140      	movs	r1, #64	; 0x40
   12788:	430a      	orrs	r2, r1
   1278a:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   1278c:	687b      	ldr	r3, [r7, #4]
   1278e:	789b      	ldrb	r3, [r3, #2]
   12790:	2b00      	cmp	r3, #0
   12792:	d007      	beq.n	127a4 <_rtc_calendar_set_config+0x50>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   12794:	1c3b      	adds	r3, r7, #0
   12796:	330e      	adds	r3, #14
   12798:	1c3a      	adds	r2, r7, #0
   1279a:	320e      	adds	r2, #14
   1279c:	8812      	ldrh	r2, [r2, #0]
   1279e:	2180      	movs	r1, #128	; 0x80
   127a0:	430a      	orrs	r2, r1
   127a2:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   127a4:	68bb      	ldr	r3, [r7, #8]
   127a6:	1c3a      	adds	r2, r7, #0
   127a8:	320e      	adds	r2, #14
   127aa:	8812      	ldrh	r2, [r2, #0]
   127ac:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   127ae:	687b      	ldr	r3, [r7, #4]
   127b0:	78db      	ldrb	r3, [r3, #3]
   127b2:	2b00      	cmp	r3, #0
   127b4:	d009      	beq.n	127ca <_rtc_calendar_set_config+0x76>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   127b6:	68bb      	ldr	r3, [r7, #8]
   127b8:	681b      	ldr	r3, [r3, #0]
   127ba:	0c1b      	lsrs	r3, r3, #16
   127bc:	b29b      	uxth	r3, r3
   127be:	2280      	movs	r2, #128	; 0x80
   127c0:	01d2      	lsls	r2, r2, #7
   127c2:	4313      	orrs	r3, r2
   127c4:	b29a      	uxth	r2, r3
   127c6:	68bb      	ldr	r3, [r7, #8]
   127c8:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   127ca:	1c3b      	adds	r3, r7, #0
   127cc:	330d      	adds	r3, #13
   127ce:	2200      	movs	r2, #0
   127d0:	701a      	strb	r2, [r3, #0]
   127d2:	e017      	b.n	12804 <_rtc_calendar_set_config+0xb0>
		rtc_calendar_set_alarm(&(config->alarm[i]), (enum rtc_calendar_alarm)i);
   127d4:	1c3b      	adds	r3, r7, #0
   127d6:	330d      	adds	r3, #13
   127d8:	781a      	ldrb	r2, [r3, #0]
   127da:	1c13      	adds	r3, r2, #0
   127dc:	009b      	lsls	r3, r3, #2
   127de:	189b      	adds	r3, r3, r2
   127e0:	005b      	lsls	r3, r3, #1
   127e2:	3308      	adds	r3, #8
   127e4:	687a      	ldr	r2, [r7, #4]
   127e6:	18d2      	adds	r2, r2, r3
   127e8:	1c3b      	adds	r3, r7, #0
   127ea:	330d      	adds	r3, #13
   127ec:	781b      	ldrb	r3, [r3, #0]
   127ee:	1c10      	adds	r0, r2, #0
   127f0:	1c19      	adds	r1, r3, #0
   127f2:	4b09      	ldr	r3, [pc, #36]	; (12818 <_rtc_calendar_set_config+0xc4>)
   127f4:	4798      	blx	r3
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   127f6:	1c3b      	adds	r3, r7, #0
   127f8:	330d      	adds	r3, #13
   127fa:	781a      	ldrb	r2, [r3, #0]
   127fc:	1c3b      	adds	r3, r7, #0
   127fe:	330d      	adds	r3, #13
   12800:	3201      	adds	r2, #1
   12802:	701a      	strb	r2, [r3, #0]
   12804:	1c3b      	adds	r3, r7, #0
   12806:	330d      	adds	r3, #13
   12808:	781b      	ldrb	r3, [r3, #0]
   1280a:	2b00      	cmp	r3, #0
   1280c:	d0e2      	beq.n	127d4 <_rtc_calendar_set_config+0x80>
		rtc_calendar_set_alarm(&(config->alarm[i]), (enum rtc_calendar_alarm)i);
	}
}
   1280e:	46bd      	mov	sp, r7
   12810:	b004      	add	sp, #16
   12812:	bd80      	pop	{r7, pc}
   12814:	40001400 	.word	0x40001400
   12818:	00012999 	.word	0x00012999

0001281c <rtc_calendar_init>:
 *
 * \param[in] config  Pointer to the configuration structure.
 */
void rtc_calendar_init(
		const struct rtc_calendar_config *const config)
{
   1281c:	b590      	push	{r4, r7, lr}
   1281e:	b087      	sub	sp, #28
   12820:	af02      	add	r7, sp, #8
   12822:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(config);
   12824:	4b27      	ldr	r3, [pc, #156]	; (128c4 <rtc_calendar_init+0xa8>)
   12826:	4798      	blx	r3
   12828:	1c03      	adds	r3, r0, #0
   1282a:	2b00      	cmp	r3, #0
   1282c:	d011      	beq.n	12852 <rtc_calendar_init+0x36>
   1282e:	687b      	ldr	r3, [r7, #4]
   12830:	2b00      	cmp	r3, #0
   12832:	d11b      	bne.n	1286c <rtc_calendar_init+0x50>
   12834:	4b23      	ldr	r3, [pc, #140]	; (128c4 <rtc_calendar_init+0xa8>)
   12836:	4798      	blx	r3
   12838:	1c02      	adds	r2, r0, #0
   1283a:	4b23      	ldr	r3, [pc, #140]	; (128c8 <rtc_calendar_init+0xac>)
   1283c:	4923      	ldr	r1, [pc, #140]	; (128cc <rtc_calendar_init+0xb0>)
   1283e:	9100      	str	r1, [sp, #0]
   12840:	4923      	ldr	r1, [pc, #140]	; (128d0 <rtc_calendar_init+0xb4>)
   12842:	9101      	str	r1, [sp, #4]
   12844:	1c10      	adds	r0, r2, #0
   12846:	2101      	movs	r1, #1
   12848:	1c1a      	adds	r2, r3, #0
   1284a:	23d5      	movs	r3, #213	; 0xd5
   1284c:	4c21      	ldr	r4, [pc, #132]	; (128d4 <rtc_calendar_init+0xb8>)
   1284e:	47a0      	blx	r4
   12850:	e00c      	b.n	1286c <rtc_calendar_init+0x50>
   12852:	687b      	ldr	r3, [r7, #4]
   12854:	2b00      	cmp	r3, #0
   12856:	d109      	bne.n	1286c <rtc_calendar_init+0x50>
   12858:	491f      	ldr	r1, [pc, #124]	; (128d8 <rtc_calendar_init+0xbc>)
   1285a:	4a1d      	ldr	r2, [pc, #116]	; (128d0 <rtc_calendar_init+0xb4>)
   1285c:	4b1a      	ldr	r3, [pc, #104]	; (128c8 <rtc_calendar_init+0xac>)
   1285e:	1c08      	adds	r0, r1, #0
   12860:	1c11      	adds	r1, r2, #0
   12862:	1c1a      	adds	r2, r3, #0
   12864:	23d5      	movs	r3, #213	; 0xd5
   12866:	4c1d      	ldr	r4, [pc, #116]	; (128dc <rtc_calendar_init+0xc0>)
   12868:	47a0      	blx	r4
   1286a:	e7fe      	b.n	1286a <rtc_calendar_init+0x4e>

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   1286c:	2000      	movs	r0, #0
   1286e:	2120      	movs	r1, #32
   12870:	4b1b      	ldr	r3, [pc, #108]	; (128e0 <rtc_calendar_init+0xc4>)
   12872:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   12874:	1c3b      	adds	r3, r7, #0
   12876:	330c      	adds	r3, #12
   12878:	1c18      	adds	r0, r3, #0
   1287a:	4b1a      	ldr	r3, [pc, #104]	; (128e4 <rtc_calendar_init+0xc8>)
   1287c:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   1287e:	1c3b      	adds	r3, r7, #0
   12880:	330c      	adds	r3, #12
   12882:	2202      	movs	r2, #2
   12884:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   12886:	1c3b      	adds	r3, r7, #0
   12888:	330c      	adds	r3, #12
   1288a:	2002      	movs	r0, #2
   1288c:	1c19      	adds	r1, r3, #0
   1288e:	4b16      	ldr	r3, [pc, #88]	; (128e8 <rtc_calendar_init+0xcc>)
   12890:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   12892:	2002      	movs	r0, #2
   12894:	4b15      	ldr	r3, [pc, #84]	; (128ec <rtc_calendar_init+0xd0>)
   12896:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset();
   12898:	4b15      	ldr	r3, [pc, #84]	; (128f0 <rtc_calendar_init+0xd4>)
   1289a:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	_rtc_dev.clock_24h           = config->clock_24h;
   1289c:	687b      	ldr	r3, [r7, #4]
   1289e:	791a      	ldrb	r2, [r3, #4]
   128a0:	4b14      	ldr	r3, [pc, #80]	; (128f4 <rtc_calendar_init+0xd8>)
   128a2:	701a      	strb	r2, [r3, #0]
	_rtc_dev.continuously_update = config->continuously_update;
   128a4:	687b      	ldr	r3, [r7, #4]
   128a6:	78da      	ldrb	r2, [r3, #3]
   128a8:	4b12      	ldr	r3, [pc, #72]	; (128f4 <rtc_calendar_init+0xd8>)
   128aa:	705a      	strb	r2, [r3, #1]
	_rtc_dev.year_init_value     = config->year_init_value;
   128ac:	687b      	ldr	r3, [r7, #4]
   128ae:	88da      	ldrh	r2, [r3, #6]
   128b0:	4b10      	ldr	r3, [pc, #64]	; (128f4 <rtc_calendar_init+0xd8>)
   128b2:	805a      	strh	r2, [r3, #2]

	/* Set config. */
	_rtc_calendar_set_config(config);
   128b4:	687b      	ldr	r3, [r7, #4]
   128b6:	1c18      	adds	r0, r3, #0
   128b8:	4b0f      	ldr	r3, [pc, #60]	; (128f8 <rtc_calendar_init+0xdc>)
   128ba:	4798      	blx	r3
}
   128bc:	46bd      	mov	sp, r7
   128be:	b005      	add	sp, #20
   128c0:	bd90      	pop	{r4, r7, pc}
   128c2:	46c0      	nop			; (mov r8, r8)
   128c4:	000123fd 	.word	0x000123fd
   128c8:	000262b0 	.word	0x000262b0
   128cc:	00026234 	.word	0x00026234
   128d0:	0002624c 	.word	0x0002624c
   128d4:	000106e9 	.word	0x000106e9
   128d8:	00026254 	.word	0x00026254
   128dc:	0001b62d 	.word	0x0001b62d
   128e0:	0001248d 	.word	0x0001248d
   128e4:	00012411 	.word	0x00012411
   128e8:	00017971 	.word	0x00017971
   128ec:	00017a25 	.word	0x00017a25
   128f0:	000125d9 	.word	0x000125d9
   128f4:	200011f0 	.word	0x200011f0
   128f8:	00012755 	.word	0x00012755

000128fc <rtc_calendar_set_time>:
 *
 * \param[in] time  The time to set in the calendar.
 */
void rtc_calendar_set_time(
		const struct rtc_calendar_time *const time)
{
   128fc:	b580      	push	{r7, lr}
   128fe:	b084      	sub	sp, #16
   12900:	af00      	add	r7, sp, #0
   12902:	6078      	str	r0, [r7, #4]
	/* Initialize module pointer. */
	Rtc *const rtc_module = RTC;
   12904:	4b09      	ldr	r3, [pc, #36]	; (1292c <rtc_calendar_set_time+0x30>)
   12906:	60fb      	str	r3, [r7, #12]

	uint32_t register_value = _rtc_calendar_time_to_register_value(time);
   12908:	687b      	ldr	r3, [r7, #4]
   1290a:	1c18      	adds	r0, r3, #0
   1290c:	4b08      	ldr	r3, [pc, #32]	; (12930 <rtc_calendar_set_time+0x34>)
   1290e:	4798      	blx	r3
   12910:	1c03      	adds	r3, r0, #0
   12912:	60bb      	str	r3, [r7, #8]

	while (rtc_calendar_is_syncing()) {
   12914:	46c0      	nop			; (mov r8, r8)
   12916:	4b07      	ldr	r3, [pc, #28]	; (12934 <rtc_calendar_set_time+0x38>)
   12918:	4798      	blx	r3
   1291a:	1c03      	adds	r3, r0, #0
   1291c:	2b00      	cmp	r3, #0
   1291e:	d1fa      	bne.n	12916 <rtc_calendar_set_time+0x1a>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
   12920:	68fb      	ldr	r3, [r7, #12]
   12922:	68ba      	ldr	r2, [r7, #8]
   12924:	611a      	str	r2, [r3, #16]
}
   12926:	46bd      	mov	sp, r7
   12928:	b004      	add	sp, #16
   1292a:	bd80      	pop	{r7, pc}
   1292c:	40001400 	.word	0x40001400
   12930:	00012625 	.word	0x00012625
   12934:	00012569 	.word	0x00012569

00012938 <rtc_calendar_get_time>:
 *
 * \param[out] time  Pointer to value that will be filled with current time.
 */
void rtc_calendar_get_time(
		struct rtc_calendar_time *const time)
{
   12938:	b580      	push	{r7, lr}
   1293a:	b084      	sub	sp, #16
   1293c:	af00      	add	r7, sp, #0
   1293e:	6078      	str	r0, [r7, #4]
	/* Initialize module pointer. */
	Rtc *const rtc_module = RTC;
   12940:	4b10      	ldr	r3, [pc, #64]	; (12984 <rtc_calendar_get_time+0x4c>)
   12942:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(_rtc_dev.continuously_update)) {
   12944:	4b10      	ldr	r3, [pc, #64]	; (12988 <rtc_calendar_get_time+0x50>)
   12946:	681b      	ldr	r3, [r3, #0]
   12948:	041b      	lsls	r3, r3, #16
   1294a:	0e1b      	lsrs	r3, r3, #24
   1294c:	b2db      	uxtb	r3, r3
   1294e:	2201      	movs	r2, #1
   12950:	4053      	eors	r3, r2
   12952:	b2db      	uxtb	r3, r3
   12954:	2b00      	cmp	r3, #0
   12956:	d008      	beq.n	1296a <rtc_calendar_get_time+0x32>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   12958:	68fb      	ldr	r3, [r7, #12]
   1295a:	4a0c      	ldr	r2, [pc, #48]	; (1298c <rtc_calendar_get_time+0x54>)
   1295c:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing()) {
   1295e:	46c0      	nop			; (mov r8, r8)
   12960:	4b0b      	ldr	r3, [pc, #44]	; (12990 <rtc_calendar_get_time+0x58>)
   12962:	4798      	blx	r3
   12964:	1c03      	adds	r3, r0, #0
   12966:	2b00      	cmp	r3, #0
   12968:	d1fa      	bne.n	12960 <rtc_calendar_get_time+0x28>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   1296a:	68fb      	ldr	r3, [r7, #12]
   1296c:	691b      	ldr	r3, [r3, #16]
   1296e:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	_rtc_calendar_register_value_to_time(register_value, time);
   12970:	68ba      	ldr	r2, [r7, #8]
   12972:	687b      	ldr	r3, [r7, #4]
   12974:	1c10      	adds	r0, r2, #0
   12976:	1c19      	adds	r1, r3, #0
   12978:	4b06      	ldr	r3, [pc, #24]	; (12994 <rtc_calendar_get_time+0x5c>)
   1297a:	4798      	blx	r3
}
   1297c:	46bd      	mov	sp, r7
   1297e:	b004      	add	sp, #16
   12980:	bd80      	pop	{r7, pc}
   12982:	46c0      	nop			; (mov r8, r8)
   12984:	40001400 	.word	0x40001400
   12988:	200011f0 	.word	0x200011f0
   1298c:	ffff8000 	.word	0xffff8000
   12990:	00012569 	.word	0x00012569
   12994:	000126ad 	.word	0x000126ad

00012998 <rtc_calendar_set_alarm>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided.
 */
enum status_code rtc_calendar_set_alarm(
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   12998:	b580      	push	{r7, lr}
   1299a:	b084      	sub	sp, #16
   1299c:	af00      	add	r7, sp, #0
   1299e:	6078      	str	r0, [r7, #4]
   129a0:	1c0a      	adds	r2, r1, #0
   129a2:	1cfb      	adds	r3, r7, #3
   129a4:	701a      	strb	r2, [r3, #0]
	/* Initialize module pointer. */
	Rtc *const rtc_module = RTC;
   129a6:	4b14      	ldr	r3, [pc, #80]	; (129f8 <rtc_calendar_set_alarm+0x60>)
   129a8:	60fb      	str	r3, [r7, #12]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   129aa:	1cfb      	adds	r3, r7, #3
   129ac:	781b      	ldrb	r3, [r3, #0]
   129ae:	2b01      	cmp	r3, #1
   129b0:	d901      	bls.n	129b6 <rtc_calendar_set_alarm+0x1e>
		return STATUS_ERR_INVALID_ARG;
   129b2:	2317      	movs	r3, #23
   129b4:	e01c      	b.n	129f0 <rtc_calendar_set_alarm+0x58>
	}

	/* Get register_value from time. */
	uint32_t register_value = _rtc_calendar_time_to_register_value(&(alarm->time));
   129b6:	687b      	ldr	r3, [r7, #4]
   129b8:	1c18      	adds	r0, r3, #0
   129ba:	4b10      	ldr	r3, [pc, #64]	; (129fc <rtc_calendar_set_alarm+0x64>)
   129bc:	4798      	blx	r3
   129be:	1c03      	adds	r3, r0, #0
   129c0:	60bb      	str	r3, [r7, #8]

	while (rtc_calendar_is_syncing()) {
   129c2:	46c0      	nop			; (mov r8, r8)
   129c4:	4b0e      	ldr	r3, [pc, #56]	; (12a00 <rtc_calendar_set_alarm+0x68>)
   129c6:	4798      	blx	r3
   129c8:	1c03      	adds	r3, r0, #0
   129ca:	2b00      	cmp	r3, #0
   129cc:	d1fa      	bne.n	129c4 <rtc_calendar_set_alarm+0x2c>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   129ce:	1cfb      	adds	r3, r7, #3
   129d0:	781a      	ldrb	r2, [r3, #0]
   129d2:	68fb      	ldr	r3, [r7, #12]
   129d4:	3203      	adds	r2, #3
   129d6:	00d2      	lsls	r2, r2, #3
   129d8:	68b9      	ldr	r1, [r7, #8]
   129da:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   129dc:	1cfb      	adds	r3, r7, #3
   129de:	781b      	ldrb	r3, [r3, #0]
   129e0:	687a      	ldr	r2, [r7, #4]
   129e2:	7a12      	ldrb	r2, [r2, #8]
   129e4:	68f9      	ldr	r1, [r7, #12]
   129e6:	3303      	adds	r3, #3
   129e8:	00db      	lsls	r3, r3, #3
   129ea:	18cb      	adds	r3, r1, r3
   129ec:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
   129ee:	2300      	movs	r3, #0
}
   129f0:	1c18      	adds	r0, r3, #0
   129f2:	46bd      	mov	sp, r7
   129f4:	b004      	add	sp, #16
   129f6:	bd80      	pop	{r7, pc}
   129f8:	40001400 	.word	0x40001400
   129fc:	00012625 	.word	0x00012625
   12a00:	00012569 	.word	0x00012569

00012a04 <rtc_calendar_register_callback>:
 * \retval STATUS_ERR_INVALID_ARG If trying to register a callback not available
 */
enum status_code rtc_calendar_register_callback(
		rtc_calendar_callback_t callback,
		enum rtc_calendar_callback callback_type)
{
   12a04:	b580      	push	{r7, lr}
   12a06:	b084      	sub	sp, #16
   12a08:	af00      	add	r7, sp, #0
   12a0a:	6078      	str	r0, [r7, #4]
   12a0c:	1c0a      	adds	r2, r1, #0
   12a0e:	1cfb      	adds	r3, r7, #3
   12a10:	701a      	strb	r2, [r3, #0]

	enum status_code status = STATUS_OK;
   12a12:	1c3b      	adds	r3, r7, #0
   12a14:	330f      	adds	r3, #15
   12a16:	2200      	movs	r2, #0
   12a18:	701a      	strb	r2, [r3, #0]

	/* Overflow callback */
	if (callback_type == RTC_CALENDAR_CALLBACK_OVERFLOW) {
   12a1a:	1cfb      	adds	r3, r7, #3
   12a1c:	781b      	ldrb	r3, [r3, #0]
   12a1e:	2b01      	cmp	r3, #1
   12a20:	d104      	bne.n	12a2c <rtc_calendar_register_callback+0x28>
		status = STATUS_OK;
   12a22:	1c3b      	adds	r3, r7, #0
   12a24:	330f      	adds	r3, #15
   12a26:	2200      	movs	r2, #0
   12a28:	701a      	strb	r2, [r3, #0]
   12a2a:	e007      	b.n	12a3c <rtc_calendar_register_callback+0x38>
	} else if (callback_type > RTC_NUM_OF_ALARMS) {
   12a2c:	1cfb      	adds	r3, r7, #3
   12a2e:	781b      	ldrb	r3, [r3, #0]
   12a30:	2b01      	cmp	r3, #1
   12a32:	d903      	bls.n	12a3c <rtc_calendar_register_callback+0x38>
		/* Make sure alarm callback can be registered */
		status = STATUS_ERR_INVALID_ARG;
   12a34:	1c3b      	adds	r3, r7, #0
   12a36:	330f      	adds	r3, #15
   12a38:	2217      	movs	r2, #23
   12a3a:	701a      	strb	r2, [r3, #0]
	}

	if (status == STATUS_OK) {
   12a3c:	1c3b      	adds	r3, r7, #0
   12a3e:	330f      	adds	r3, #15
   12a40:	781b      	ldrb	r3, [r3, #0]
   12a42:	2b00      	cmp	r3, #0
   12a44:	d116      	bne.n	12a74 <rtc_calendar_register_callback+0x70>
		/* Register callback */
		_rtc_dev.callbacks[callback_type] = callback;
   12a46:	1cfb      	adds	r3, r7, #3
   12a48:	781b      	ldrb	r3, [r3, #0]
   12a4a:	4a0e      	ldr	r2, [pc, #56]	; (12a84 <rtc_calendar_register_callback+0x80>)
   12a4c:	009b      	lsls	r3, r3, #2
   12a4e:	18d3      	adds	r3, r2, r3
   12a50:	687a      	ldr	r2, [r7, #4]
   12a52:	605a      	str	r2, [r3, #4]
		/* Set corresponding bit to set callback as registered */
		_rtc_dev.registered_callback |= (1 << callback_type);
   12a54:	4b0b      	ldr	r3, [pc, #44]	; (12a84 <rtc_calendar_register_callback+0x80>)
   12a56:	68db      	ldr	r3, [r3, #12]
   12a58:	b2db      	uxtb	r3, r3
   12a5a:	b2da      	uxtb	r2, r3
   12a5c:	1cfb      	adds	r3, r7, #3
   12a5e:	781b      	ldrb	r3, [r3, #0]
   12a60:	2101      	movs	r1, #1
   12a62:	1c08      	adds	r0, r1, #0
   12a64:	4098      	lsls	r0, r3
   12a66:	1c03      	adds	r3, r0, #0
   12a68:	b2db      	uxtb	r3, r3
   12a6a:	4313      	orrs	r3, r2
   12a6c:	b2db      	uxtb	r3, r3
   12a6e:	b2da      	uxtb	r2, r3
   12a70:	4b04      	ldr	r3, [pc, #16]	; (12a84 <rtc_calendar_register_callback+0x80>)
   12a72:	731a      	strb	r2, [r3, #12]
	}

	return status;
   12a74:	1c3b      	adds	r3, r7, #0
   12a76:	330f      	adds	r3, #15
   12a78:	781b      	ldrb	r3, [r3, #0]
}
   12a7a:	1c18      	adds	r0, r3, #0
   12a7c:	46bd      	mov	sp, r7
   12a7e:	b004      	add	sp, #16
   12a80:	bd80      	pop	{r7, pc}
   12a82:	46c0      	nop			; (mov r8, r8)
   12a84:	200011f0 	.word	0x200011f0

00012a88 <rtc_calendar_enable_callback>:
 *
 * \param[in]     callback_type Callback type to enable
 */
void rtc_calendar_enable_callback(
		enum rtc_calendar_callback callback_type)
{
   12a88:	b580      	push	{r7, lr}
   12a8a:	b084      	sub	sp, #16
   12a8c:	af00      	add	r7, sp, #0
   12a8e:	1c02      	adds	r2, r0, #0
   12a90:	1dfb      	adds	r3, r7, #7
   12a92:	701a      	strb	r2, [r3, #0]
	/* Initialize hardware module pointer */
	Rtc *const rtc_hw = RTC;
   12a94:	4b15      	ldr	r3, [pc, #84]	; (12aec <rtc_calendar_enable_callback+0x64>)
   12a96:	60fb      	str	r3, [r7, #12]

	if (callback_type == RTC_CALENDAR_CALLBACK_OVERFLOW) {
   12a98:	1dfb      	adds	r3, r7, #7
   12a9a:	781b      	ldrb	r3, [r3, #0]
   12a9c:	2b01      	cmp	r3, #1
   12a9e:	d103      	bne.n	12aa8 <rtc_calendar_enable_callback+0x20>
		rtc_hw->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_OVF;
   12aa0:	68fb      	ldr	r3, [r7, #12]
   12aa2:	2280      	movs	r2, #128	; 0x80
   12aa4:	71da      	strb	r2, [r3, #7]
   12aa6:	e00b      	b.n	12ac0 <rtc_calendar_enable_callback+0x38>
	} else {
		rtc_hw->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_ALARM(1 << callback_type);
   12aa8:	1dfb      	adds	r3, r7, #7
   12aaa:	781b      	ldrb	r3, [r3, #0]
   12aac:	2201      	movs	r2, #1
   12aae:	1c10      	adds	r0, r2, #0
   12ab0:	4098      	lsls	r0, r3
   12ab2:	1c03      	adds	r3, r0, #0
   12ab4:	b2da      	uxtb	r2, r3
   12ab6:	2301      	movs	r3, #1
   12ab8:	4013      	ands	r3, r2
   12aba:	b2da      	uxtb	r2, r3
   12abc:	68fb      	ldr	r3, [r7, #12]
   12abe:	71da      	strb	r2, [r3, #7]
	}
	/* Mark callback as enabled. */
	_rtc_dev.enabled_callback |= (1 << callback_type);
   12ac0:	4b0b      	ldr	r3, [pc, #44]	; (12af0 <rtc_calendar_enable_callback+0x68>)
   12ac2:	68db      	ldr	r3, [r3, #12]
   12ac4:	041b      	lsls	r3, r3, #16
   12ac6:	0e1b      	lsrs	r3, r3, #24
   12ac8:	b2db      	uxtb	r3, r3
   12aca:	b2da      	uxtb	r2, r3
   12acc:	1dfb      	adds	r3, r7, #7
   12ace:	781b      	ldrb	r3, [r3, #0]
   12ad0:	2101      	movs	r1, #1
   12ad2:	1c08      	adds	r0, r1, #0
   12ad4:	4098      	lsls	r0, r3
   12ad6:	1c03      	adds	r3, r0, #0
   12ad8:	b2db      	uxtb	r3, r3
   12ada:	4313      	orrs	r3, r2
   12adc:	b2db      	uxtb	r3, r3
   12ade:	b2da      	uxtb	r2, r3
   12ae0:	4b03      	ldr	r3, [pc, #12]	; (12af0 <rtc_calendar_enable_callback+0x68>)
   12ae2:	735a      	strb	r2, [r3, #13]
}
   12ae4:	46bd      	mov	sp, r7
   12ae6:	b004      	add	sp, #16
   12ae8:	bd80      	pop	{r7, pc}
   12aea:	46c0      	nop			; (mov r8, r8)
   12aec:	40001400 	.word	0x40001400
   12af0:	200011f0 	.word	0x200011f0

00012af4 <rtc_calendar_disable_callback>:
 *
 * \param[in]     callback_type Callback type to disable
 */
void rtc_calendar_disable_callback(
		enum rtc_calendar_callback callback_type)
{
   12af4:	b580      	push	{r7, lr}
   12af6:	b084      	sub	sp, #16
   12af8:	af00      	add	r7, sp, #0
   12afa:	1c02      	adds	r2, r0, #0
   12afc:	1dfb      	adds	r3, r7, #7
   12afe:	701a      	strb	r2, [r3, #0]
	/* Initialize hardware module pointer */
	Rtc *const rtc_hw = RTC;
   12b00:	4b16      	ldr	r3, [pc, #88]	; (12b5c <rtc_calendar_disable_callback+0x68>)
   12b02:	60fb      	str	r3, [r7, #12]

	/* Disable interrupt */
	if (callback_type == RTC_CALENDAR_CALLBACK_OVERFLOW) {
   12b04:	1dfb      	adds	r3, r7, #7
   12b06:	781b      	ldrb	r3, [r3, #0]
   12b08:	2b01      	cmp	r3, #1
   12b0a:	d103      	bne.n	12b14 <rtc_calendar_disable_callback+0x20>
		rtc_hw->MODE2.INTENCLR.reg = RTC_MODE2_INTFLAG_OVF;
   12b0c:	68fb      	ldr	r3, [r7, #12]
   12b0e:	2280      	movs	r2, #128	; 0x80
   12b10:	719a      	strb	r2, [r3, #6]
   12b12:	e00b      	b.n	12b2c <rtc_calendar_disable_callback+0x38>
	} else {
		rtc_hw->MODE2.INTENCLR.reg = RTC_MODE2_INTFLAG_ALARM(1 << callback_type);
   12b14:	1dfb      	adds	r3, r7, #7
   12b16:	781b      	ldrb	r3, [r3, #0]
   12b18:	2201      	movs	r2, #1
   12b1a:	1c10      	adds	r0, r2, #0
   12b1c:	4098      	lsls	r0, r3
   12b1e:	1c03      	adds	r3, r0, #0
   12b20:	b2da      	uxtb	r2, r3
   12b22:	2301      	movs	r3, #1
   12b24:	4013      	ands	r3, r2
   12b26:	b2da      	uxtb	r2, r3
   12b28:	68fb      	ldr	r3, [r7, #12]
   12b2a:	719a      	strb	r2, [r3, #6]
	}

	/* Mark callback as disabled. */
	_rtc_dev.enabled_callback &= ~(1 << callback_type);
   12b2c:	4b0c      	ldr	r3, [pc, #48]	; (12b60 <rtc_calendar_disable_callback+0x6c>)
   12b2e:	68db      	ldr	r3, [r3, #12]
   12b30:	041b      	lsls	r3, r3, #16
   12b32:	0e1b      	lsrs	r3, r3, #24
   12b34:	b2db      	uxtb	r3, r3
   12b36:	b2db      	uxtb	r3, r3
   12b38:	1dfa      	adds	r2, r7, #7
   12b3a:	7812      	ldrb	r2, [r2, #0]
   12b3c:	2101      	movs	r1, #1
   12b3e:	1c08      	adds	r0, r1, #0
   12b40:	4090      	lsls	r0, r2
   12b42:	1c02      	adds	r2, r0, #0
   12b44:	b2d2      	uxtb	r2, r2
   12b46:	43d2      	mvns	r2, r2
   12b48:	b2d2      	uxtb	r2, r2
   12b4a:	4013      	ands	r3, r2
   12b4c:	b2db      	uxtb	r3, r3
   12b4e:	b2da      	uxtb	r2, r3
   12b50:	4b03      	ldr	r3, [pc, #12]	; (12b60 <rtc_calendar_disable_callback+0x6c>)
   12b52:	735a      	strb	r2, [r3, #13]
}
   12b54:	46bd      	mov	sp, r7
   12b56:	b004      	add	sp, #16
   12b58:	bd80      	pop	{r7, pc}
   12b5a:	46c0      	nop			; (mov r8, r8)
   12b5c:	40001400 	.word	0x40001400
   12b60:	200011f0 	.word	0x200011f0

00012b64 <RTC_Handler>:
/**
 * \internal Interrupt handler for RTC
 *
 */
void RTC_Handler(void)
{
   12b64:	b580      	push	{r7, lr}
   12b66:	b082      	sub	sp, #8
   12b68:	af00      	add	r7, sp, #0
	/* Initialize hardware module pointer */
	Rtc *const rtc_hw = RTC;
   12b6a:	4b1e      	ldr	r3, [pc, #120]	; (12be4 <RTC_Handler+0x80>)
   12b6c:	607b      	str	r3, [r7, #4]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = _rtc_dev.enabled_callback &
   12b6e:	4b1e      	ldr	r3, [pc, #120]	; (12be8 <RTC_Handler+0x84>)
   12b70:	68db      	ldr	r3, [r3, #12]
   12b72:	041b      	lsls	r3, r3, #16
   12b74:	0e1b      	lsrs	r3, r3, #24
   12b76:	b2da      	uxtb	r2, r3
			_rtc_dev.registered_callback;
   12b78:	4b1b      	ldr	r3, [pc, #108]	; (12be8 <RTC_Handler+0x84>)
   12b7a:	68db      	ldr	r3, [r3, #12]
   12b7c:	b2d9      	uxtb	r1, r3
{
	/* Initialize hardware module pointer */
	Rtc *const rtc_hw = RTC;

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = _rtc_dev.enabled_callback &
   12b7e:	1cfb      	adds	r3, r7, #3
   12b80:	400a      	ands	r2, r1
   12b82:	701a      	strb	r2, [r3, #0]
			_rtc_dev.registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = (rtc_hw->MODE2.INTFLAG.reg &
   12b84:	687b      	ldr	r3, [r7, #4]
   12b86:	689b      	ldr	r3, [r3, #8]
   12b88:	b2da      	uxtb	r2, r3
			rtc_hw->MODE2.INTENSET.reg);
   12b8a:	687b      	ldr	r3, [r7, #4]
   12b8c:	685b      	ldr	r3, [r3, #4]
   12b8e:	0e1b      	lsrs	r3, r3, #24
   12b90:	b2db      	uxtb	r3, r3
	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = _rtc_dev.enabled_callback &
			_rtc_dev.registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = (rtc_hw->MODE2.INTFLAG.reg &
   12b92:	4013      	ands	r3, r2
   12b94:	b2da      	uxtb	r2, r3
   12b96:	1c3b      	adds	r3, r7, #0
   12b98:	801a      	strh	r2, [r3, #0]
			rtc_hw->MODE2.INTENSET.reg);

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   12b9a:	1c3b      	adds	r3, r7, #0
   12b9c:	881a      	ldrh	r2, [r3, #0]
   12b9e:	2380      	movs	r3, #128	; 0x80
   12ba0:	4013      	ands	r3, r2
   12ba2:	d00b      	beq.n	12bbc <RTC_Handler+0x58>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   12ba4:	1cfb      	adds	r3, r7, #3
   12ba6:	781a      	ldrb	r2, [r3, #0]
   12ba8:	2302      	movs	r3, #2
   12baa:	4013      	ands	r3, r2
   12bac:	d002      	beq.n	12bb4 <RTC_Handler+0x50>
			_rtc_dev.callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   12bae:	4b0e      	ldr	r3, [pc, #56]	; (12be8 <RTC_Handler+0x84>)
   12bb0:	689b      	ldr	r3, [r3, #8]
   12bb2:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_hw->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   12bb4:	687b      	ldr	r3, [r7, #4]
   12bb6:	2280      	movs	r2, #128	; 0x80
   12bb8:	721a      	strb	r2, [r3, #8]
   12bba:	e00f      	b.n	12bdc <RTC_Handler+0x78>

	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   12bbc:	1c3b      	adds	r3, r7, #0
   12bbe:	881a      	ldrh	r2, [r3, #0]
   12bc0:	2301      	movs	r3, #1
   12bc2:	4013      	ands	r3, r2
   12bc4:	d00a      	beq.n	12bdc <RTC_Handler+0x78>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   12bc6:	1cfb      	adds	r3, r7, #3
   12bc8:	781a      	ldrb	r2, [r3, #0]
   12bca:	2301      	movs	r3, #1
   12bcc:	4013      	ands	r3, r2
   12bce:	d002      	beq.n	12bd6 <RTC_Handler+0x72>
			_rtc_dev.callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   12bd0:	4b05      	ldr	r3, [pc, #20]	; (12be8 <RTC_Handler+0x84>)
   12bd2:	685b      	ldr	r3, [r3, #4]
   12bd4:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_hw->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   12bd6:	687b      	ldr	r3, [r7, #4]
   12bd8:	2201      	movs	r2, #1
   12bda:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_hw->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   12bdc:	46bd      	mov	sp, r7
   12bde:	b002      	add	sp, #8
   12be0:	bd80      	pop	{r7, pc}
   12be2:	46c0      	nop			; (mov r8, r8)
   12be4:	40001400 	.word	0x40001400
   12be8:	200011f0 	.word	0x200011f0

00012bec <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
   12bec:	b580      	push	{r7, lr}
   12bee:	af00      	add	r7, sp, #0
	return test_case_ptr;
   12bf0:	4b02      	ldr	r3, [pc, #8]	; (12bfc <test_get_case+0x10>)
   12bf2:	681b      	ldr	r3, [r3, #0]
}
   12bf4:	1c18      	adds	r0, r3, #0
   12bf6:	46bd      	mov	sp, r7
   12bf8:	bd80      	pop	{r7, pc}
   12bfa:	46c0      	nop			; (mov r8, r8)
   12bfc:	2000041c 	.word	0x2000041c

00012c00 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   12c00:	b590      	push	{r4, r7, lr}
   12c02:	b085      	sub	sp, #20
   12c04:	af02      	add	r7, sp, #8
   12c06:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
   12c08:	4b15      	ldr	r3, [pc, #84]	; (12c60 <system_gclk_chan_get_config_defaults+0x60>)
   12c0a:	4798      	blx	r3
   12c0c:	1c03      	adds	r3, r0, #0
   12c0e:	2b00      	cmp	r3, #0
   12c10:	d011      	beq.n	12c36 <system_gclk_chan_get_config_defaults+0x36>
   12c12:	687b      	ldr	r3, [r7, #4]
   12c14:	2b00      	cmp	r3, #0
   12c16:	d119      	bne.n	12c4c <system_gclk_chan_get_config_defaults+0x4c>
   12c18:	4b11      	ldr	r3, [pc, #68]	; (12c60 <system_gclk_chan_get_config_defaults+0x60>)
   12c1a:	4798      	blx	r3
   12c1c:	1c01      	adds	r1, r0, #0
   12c1e:	4a11      	ldr	r2, [pc, #68]	; (12c64 <system_gclk_chan_get_config_defaults+0x64>)
   12c20:	2314      	movs	r3, #20
   12c22:	33ff      	adds	r3, #255	; 0xff
   12c24:	4810      	ldr	r0, [pc, #64]	; (12c68 <system_gclk_chan_get_config_defaults+0x68>)
   12c26:	9000      	str	r0, [sp, #0]
   12c28:	4810      	ldr	r0, [pc, #64]	; (12c6c <system_gclk_chan_get_config_defaults+0x6c>)
   12c2a:	9001      	str	r0, [sp, #4]
   12c2c:	1c08      	adds	r0, r1, #0
   12c2e:	2101      	movs	r1, #1
   12c30:	4c0f      	ldr	r4, [pc, #60]	; (12c70 <system_gclk_chan_get_config_defaults+0x70>)
   12c32:	47a0      	blx	r4
   12c34:	e00a      	b.n	12c4c <system_gclk_chan_get_config_defaults+0x4c>
   12c36:	687b      	ldr	r3, [r7, #4]
   12c38:	2b00      	cmp	r3, #0
   12c3a:	d107      	bne.n	12c4c <system_gclk_chan_get_config_defaults+0x4c>
   12c3c:	480d      	ldr	r0, [pc, #52]	; (12c74 <system_gclk_chan_get_config_defaults+0x74>)
   12c3e:	490b      	ldr	r1, [pc, #44]	; (12c6c <system_gclk_chan_get_config_defaults+0x6c>)
   12c40:	4a08      	ldr	r2, [pc, #32]	; (12c64 <system_gclk_chan_get_config_defaults+0x64>)
   12c42:	2314      	movs	r3, #20
   12c44:	33ff      	adds	r3, #255	; 0xff
   12c46:	4c0c      	ldr	r4, [pc, #48]	; (12c78 <system_gclk_chan_get_config_defaults+0x78>)
   12c48:	47a0      	blx	r4
   12c4a:	e7fe      	b.n	12c4a <system_gclk_chan_get_config_defaults+0x4a>

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   12c4c:	687b      	ldr	r3, [r7, #4]
   12c4e:	2200      	movs	r2, #0
   12c50:	701a      	strb	r2, [r3, #0]
	config->write_lock       = false;
   12c52:	687b      	ldr	r3, [r7, #4]
   12c54:	2200      	movs	r2, #0
   12c56:	705a      	strb	r2, [r3, #1]
}
   12c58:	46bd      	mov	sp, r7
   12c5a:	b003      	add	sp, #12
   12c5c:	bd90      	pop	{r4, r7, pc}
   12c5e:	46c0      	nop			; (mov r8, r8)
   12c60:	00012bed 	.word	0x00012bed
   12c64:	000262dc 	.word	0x000262dc
   12c68:	00026308 	.word	0x00026308
   12c6c:	00026320 	.word	0x00026320
   12c70:	000106e9 	.word	0x000106e9
   12c74:	00026328 	.word	0x00026328
   12c78:	0001b62d 	.word	0x0001b62d

00012c7c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   12c7c:	b590      	push	{r4, r7, lr}
   12c7e:	b085      	sub	sp, #20
   12c80:	af02      	add	r7, sp, #8
   12c82:	1c02      	adds	r2, r0, #0
   12c84:	6039      	str	r1, [r7, #0]
   12c86:	1dfb      	adds	r3, r7, #7
   12c88:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12c8a:	1dfb      	adds	r3, r7, #7
   12c8c:	781b      	ldrb	r3, [r3, #0]
   12c8e:	2b01      	cmp	r3, #1
   12c90:	d00a      	beq.n	12ca8 <system_apb_clock_set_mask+0x2c>
   12c92:	2b02      	cmp	r3, #2
   12c94:	d00f      	beq.n	12cb6 <system_apb_clock_set_mask+0x3a>
   12c96:	2b00      	cmp	r3, #0
   12c98:	d114      	bne.n	12cc4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   12c9a:	4b1a      	ldr	r3, [pc, #104]	; (12d04 <system_apb_clock_set_mask+0x88>)
   12c9c:	4a19      	ldr	r2, [pc, #100]	; (12d04 <system_apb_clock_set_mask+0x88>)
   12c9e:	6991      	ldr	r1, [r2, #24]
   12ca0:	683a      	ldr	r2, [r7, #0]
   12ca2:	430a      	orrs	r2, r1
   12ca4:	619a      	str	r2, [r3, #24]
			break;
   12ca6:	e028      	b.n	12cfa <system_apb_clock_set_mask+0x7e>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12ca8:	4b16      	ldr	r3, [pc, #88]	; (12d04 <system_apb_clock_set_mask+0x88>)
   12caa:	4a16      	ldr	r2, [pc, #88]	; (12d04 <system_apb_clock_set_mask+0x88>)
   12cac:	69d1      	ldr	r1, [r2, #28]
   12cae:	683a      	ldr	r2, [r7, #0]
   12cb0:	430a      	orrs	r2, r1
   12cb2:	61da      	str	r2, [r3, #28]
			break;
   12cb4:	e021      	b.n	12cfa <system_apb_clock_set_mask+0x7e>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12cb6:	4b13      	ldr	r3, [pc, #76]	; (12d04 <system_apb_clock_set_mask+0x88>)
   12cb8:	4a12      	ldr	r2, [pc, #72]	; (12d04 <system_apb_clock_set_mask+0x88>)
   12cba:	6a11      	ldr	r1, [r2, #32]
   12cbc:	683a      	ldr	r2, [r7, #0]
   12cbe:	430a      	orrs	r2, r1
   12cc0:	621a      	str	r2, [r3, #32]
			break;
   12cc2:	e01a      	b.n	12cfa <system_apb_clock_set_mask+0x7e>

		default:
			Assert(false);
   12cc4:	4b10      	ldr	r3, [pc, #64]	; (12d08 <system_apb_clock_set_mask+0x8c>)
   12cc6:	4798      	blx	r3
   12cc8:	1c03      	adds	r3, r0, #0
   12cca:	2b00      	cmp	r3, #0
   12ccc:	d00e      	beq.n	12cec <system_apb_clock_set_mask+0x70>
   12cce:	4b0e      	ldr	r3, [pc, #56]	; (12d08 <system_apb_clock_set_mask+0x8c>)
   12cd0:	4798      	blx	r3
   12cd2:	1c01      	adds	r1, r0, #0
   12cd4:	4a0d      	ldr	r2, [pc, #52]	; (12d0c <system_apb_clock_set_mask+0x90>)
   12cd6:	4b0e      	ldr	r3, [pc, #56]	; (12d10 <system_apb_clock_set_mask+0x94>)
   12cd8:	480e      	ldr	r0, [pc, #56]	; (12d14 <system_apb_clock_set_mask+0x98>)
   12cda:	9000      	str	r0, [sp, #0]
   12cdc:	480e      	ldr	r0, [pc, #56]	; (12d18 <system_apb_clock_set_mask+0x9c>)
   12cde:	9001      	str	r0, [sp, #4]
   12ce0:	1c08      	adds	r0, r1, #0
   12ce2:	2101      	movs	r1, #1
   12ce4:	4c0d      	ldr	r4, [pc, #52]	; (12d1c <system_apb_clock_set_mask+0xa0>)
   12ce6:	47a0      	blx	r4
			return STATUS_ERR_INVALID_ARG;
   12ce8:	2317      	movs	r3, #23
   12cea:	e007      	b.n	12cfc <system_apb_clock_set_mask+0x80>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
			break;

		default:
			Assert(false);
   12cec:	480c      	ldr	r0, [pc, #48]	; (12d20 <system_apb_clock_set_mask+0xa4>)
   12cee:	490a      	ldr	r1, [pc, #40]	; (12d18 <system_apb_clock_set_mask+0x9c>)
   12cf0:	4a06      	ldr	r2, [pc, #24]	; (12d0c <system_apb_clock_set_mask+0x90>)
   12cf2:	4b07      	ldr	r3, [pc, #28]	; (12d10 <system_apb_clock_set_mask+0x94>)
   12cf4:	4c0b      	ldr	r4, [pc, #44]	; (12d24 <system_apb_clock_set_mask+0xa8>)
   12cf6:	47a0      	blx	r4
   12cf8:	e7fe      	b.n	12cf8 <system_apb_clock_set_mask+0x7c>
			return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
   12cfa:	2300      	movs	r3, #0
}
   12cfc:	1c18      	adds	r0, r3, #0
   12cfe:	46bd      	mov	sp, r7
   12d00:	b003      	add	sp, #12
   12d02:	bd90      	pop	{r4, r7, pc}
   12d04:	40000400 	.word	0x40000400
   12d08:	00012bed 	.word	0x00012bed
   12d0c:	0002634c 	.word	0x0002634c
   12d10:	00000409 	.word	0x00000409
   12d14:	00026308 	.word	0x00026308
   12d18:	0002637c 	.word	0x0002637c
   12d1c:	000106e9 	.word	0x000106e9
   12d20:	00026328 	.word	0x00026328
   12d24:	0001b62d 	.word	0x0001b62d

00012d28 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   12d28:	b590      	push	{r4, r7, lr}
   12d2a:	b085      	sub	sp, #20
   12d2c:	af02      	add	r7, sp, #8
   12d2e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
   12d30:	4b16      	ldr	r3, [pc, #88]	; (12d8c <system_pinmux_get_config_defaults+0x64>)
   12d32:	4798      	blx	r3
   12d34:	1c03      	adds	r3, r0, #0
   12d36:	2b00      	cmp	r3, #0
   12d38:	d011      	beq.n	12d5e <system_pinmux_get_config_defaults+0x36>
   12d3a:	687b      	ldr	r3, [r7, #4]
   12d3c:	2b00      	cmp	r3, #0
   12d3e:	d119      	bne.n	12d74 <system_pinmux_get_config_defaults+0x4c>
   12d40:	4b12      	ldr	r3, [pc, #72]	; (12d8c <system_pinmux_get_config_defaults+0x64>)
   12d42:	4798      	blx	r3
   12d44:	1c01      	adds	r1, r0, #0
   12d46:	4a12      	ldr	r2, [pc, #72]	; (12d90 <system_pinmux_get_config_defaults+0x68>)
   12d48:	239d      	movs	r3, #157	; 0x9d
   12d4a:	005b      	lsls	r3, r3, #1
   12d4c:	4811      	ldr	r0, [pc, #68]	; (12d94 <system_pinmux_get_config_defaults+0x6c>)
   12d4e:	9000      	str	r0, [sp, #0]
   12d50:	4811      	ldr	r0, [pc, #68]	; (12d98 <system_pinmux_get_config_defaults+0x70>)
   12d52:	9001      	str	r0, [sp, #4]
   12d54:	1c08      	adds	r0, r1, #0
   12d56:	2101      	movs	r1, #1
   12d58:	4c10      	ldr	r4, [pc, #64]	; (12d9c <system_pinmux_get_config_defaults+0x74>)
   12d5a:	47a0      	blx	r4
   12d5c:	e00a      	b.n	12d74 <system_pinmux_get_config_defaults+0x4c>
   12d5e:	687b      	ldr	r3, [r7, #4]
   12d60:	2b00      	cmp	r3, #0
   12d62:	d107      	bne.n	12d74 <system_pinmux_get_config_defaults+0x4c>
   12d64:	480e      	ldr	r0, [pc, #56]	; (12da0 <system_pinmux_get_config_defaults+0x78>)
   12d66:	490c      	ldr	r1, [pc, #48]	; (12d98 <system_pinmux_get_config_defaults+0x70>)
   12d68:	4a09      	ldr	r2, [pc, #36]	; (12d90 <system_pinmux_get_config_defaults+0x68>)
   12d6a:	239d      	movs	r3, #157	; 0x9d
   12d6c:	005b      	lsls	r3, r3, #1
   12d6e:	4c0d      	ldr	r4, [pc, #52]	; (12da4 <system_pinmux_get_config_defaults+0x7c>)
   12d70:	47a0      	blx	r4
   12d72:	e7fe      	b.n	12d72 <system_pinmux_get_config_defaults+0x4a>

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   12d74:	687b      	ldr	r3, [r7, #4]
   12d76:	2280      	movs	r2, #128	; 0x80
   12d78:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12d7a:	687b      	ldr	r3, [r7, #4]
   12d7c:	2200      	movs	r2, #0
   12d7e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   12d80:	687b      	ldr	r3, [r7, #4]
   12d82:	2201      	movs	r2, #1
   12d84:	709a      	strb	r2, [r3, #2]
}
   12d86:	46bd      	mov	sp, r7
   12d88:	b003      	add	sp, #12
   12d8a:	bd90      	pop	{r4, r7, pc}
   12d8c:	00012bed 	.word	0x00012bed
   12d90:	00026384 	.word	0x00026384
   12d94:	00026308 	.word	0x00026308
   12d98:	00026320 	.word	0x00026320
   12d9c:	000106e9 	.word	0x000106e9
   12da0:	00026328 	.word	0x00026328
   12da4:	0001b62d 	.word	0x0001b62d

00012da8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   12da8:	b590      	push	{r4, r7, lr}
   12daa:	b087      	sub	sp, #28
   12dac:	af02      	add	r7, sp, #8
   12dae:	1c02      	adds	r2, r0, #0
   12db0:	1dfb      	adds	r3, r7, #7
   12db2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   12db4:	1c3b      	adds	r3, r7, #0
   12db6:	330f      	adds	r3, #15
   12db8:	1dfa      	adds	r2, r7, #7
   12dba:	7812      	ldrb	r2, [r2, #0]
   12dbc:	09d2      	lsrs	r2, r2, #7
   12dbe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   12dc0:	1c3b      	adds	r3, r7, #0
   12dc2:	330e      	adds	r3, #14
   12dc4:	1dfa      	adds	r2, r7, #7
   12dc6:	7812      	ldrb	r2, [r2, #0]
   12dc8:	0952      	lsrs	r2, r2, #5
   12dca:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   12dcc:	4b1b      	ldr	r3, [pc, #108]	; (12e3c <system_pinmux_get_group_from_gpio_pin+0x94>)
   12dce:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   12dd0:	1c3b      	adds	r3, r7, #0
   12dd2:	330f      	adds	r3, #15
   12dd4:	781b      	ldrb	r3, [r3, #0]
   12dd6:	2b00      	cmp	r3, #0
   12dd8:	d10e      	bne.n	12df8 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
   12dda:	1c3b      	adds	r3, r7, #0
   12ddc:	330f      	adds	r3, #15
   12dde:	781b      	ldrb	r3, [r3, #0]
   12de0:	009b      	lsls	r3, r3, #2
   12de2:	2210      	movs	r2, #16
   12de4:	19d2      	adds	r2, r2, r7
   12de6:	18d3      	adds	r3, r2, r3
   12de8:	3b08      	subs	r3, #8
   12dea:	681a      	ldr	r2, [r3, #0]
   12dec:	1c3b      	adds	r3, r7, #0
   12dee:	330e      	adds	r3, #14
   12df0:	781b      	ldrb	r3, [r3, #0]
   12df2:	01db      	lsls	r3, r3, #7
   12df4:	18d3      	adds	r3, r2, r3
   12df6:	e01c      	b.n	12e32 <system_pinmux_get_group_from_gpio_pin+0x8a>
	} else {
		Assert(false);
   12df8:	4b11      	ldr	r3, [pc, #68]	; (12e40 <system_pinmux_get_group_from_gpio_pin+0x98>)
   12dfa:	4798      	blx	r3
   12dfc:	1c03      	adds	r3, r0, #0
   12dfe:	2b00      	cmp	r3, #0
   12e00:	d00f      	beq.n	12e22 <system_pinmux_get_group_from_gpio_pin+0x7a>
   12e02:	4b0f      	ldr	r3, [pc, #60]	; (12e40 <system_pinmux_get_group_from_gpio_pin+0x98>)
   12e04:	4798      	blx	r3
   12e06:	1c01      	adds	r1, r0, #0
   12e08:	4a0e      	ldr	r2, [pc, #56]	; (12e44 <system_pinmux_get_group_from_gpio_pin+0x9c>)
   12e0a:	2368      	movs	r3, #104	; 0x68
   12e0c:	33ff      	adds	r3, #255	; 0xff
   12e0e:	480e      	ldr	r0, [pc, #56]	; (12e48 <system_pinmux_get_group_from_gpio_pin+0xa0>)
   12e10:	9000      	str	r0, [sp, #0]
   12e12:	480e      	ldr	r0, [pc, #56]	; (12e4c <system_pinmux_get_group_from_gpio_pin+0xa4>)
   12e14:	9001      	str	r0, [sp, #4]
   12e16:	1c08      	adds	r0, r1, #0
   12e18:	2101      	movs	r1, #1
   12e1a:	4c0d      	ldr	r4, [pc, #52]	; (12e50 <system_pinmux_get_group_from_gpio_pin+0xa8>)
   12e1c:	47a0      	blx	r4
		return NULL;
   12e1e:	2300      	movs	r3, #0
   12e20:	e007      	b.n	12e32 <system_pinmux_get_group_from_gpio_pin+0x8a>
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
   12e22:	480c      	ldr	r0, [pc, #48]	; (12e54 <system_pinmux_get_group_from_gpio_pin+0xac>)
   12e24:	4909      	ldr	r1, [pc, #36]	; (12e4c <system_pinmux_get_group_from_gpio_pin+0xa4>)
   12e26:	4a07      	ldr	r2, [pc, #28]	; (12e44 <system_pinmux_get_group_from_gpio_pin+0x9c>)
   12e28:	2368      	movs	r3, #104	; 0x68
   12e2a:	33ff      	adds	r3, #255	; 0xff
   12e2c:	4c0a      	ldr	r4, [pc, #40]	; (12e58 <system_pinmux_get_group_from_gpio_pin+0xb0>)
   12e2e:	47a0      	blx	r4
   12e30:	e7fe      	b.n	12e30 <system_pinmux_get_group_from_gpio_pin+0x88>
		return NULL;
	}
}
   12e32:	1c18      	adds	r0, r3, #0
   12e34:	46bd      	mov	sp, r7
   12e36:	b005      	add	sp, #20
   12e38:	bd90      	pop	{r4, r7, pc}
   12e3a:	46c0      	nop			; (mov r8, r8)
   12e3c:	41004400 	.word	0x41004400
   12e40:	00012bed 	.word	0x00012bed
   12e44:	00026384 	.word	0x00026384
   12e48:	00026308 	.word	0x00026308
   12e4c:	0002637c 	.word	0x0002637c
   12e50:	000106e9 	.word	0x000106e9
   12e54:	00026328 	.word	0x00026328
   12e58:	0001b62d 	.word	0x0001b62d

00012e5c <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
   12e5c:	b580      	push	{r7, lr}
   12e5e:	b086      	sub	sp, #24
   12e60:	af00      	add	r7, sp, #0
   12e62:	1c02      	adds	r2, r0, #0
   12e64:	1dfb      	adds	r3, r7, #7
   12e66:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   12e68:	1dfb      	adds	r3, r7, #7
   12e6a:	781b      	ldrb	r3, [r3, #0]
   12e6c:	1c18      	adds	r0, r3, #0
   12e6e:	4b19      	ldr	r3, [pc, #100]	; (12ed4 <system_pinmux_pin_get_mux_position+0x78>)
   12e70:	4798      	blx	r3
   12e72:	1c03      	adds	r3, r0, #0
   12e74:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
   12e76:	1dfb      	adds	r3, r7, #7
   12e78:	781a      	ldrb	r2, [r3, #0]
   12e7a:	231f      	movs	r3, #31
   12e7c:	4013      	ands	r3, r2
   12e7e:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   12e80:	6979      	ldr	r1, [r7, #20]
   12e82:	2340      	movs	r3, #64	; 0x40
   12e84:	693a      	ldr	r2, [r7, #16]
   12e86:	188a      	adds	r2, r1, r2
   12e88:	18d3      	adds	r3, r2, r3
   12e8a:	781b      	ldrb	r3, [r3, #0]
   12e8c:	b2db      	uxtb	r3, r3
   12e8e:	1c1a      	adds	r2, r3, #0
   12e90:	2301      	movs	r3, #1
   12e92:	4013      	ands	r3, r2
   12e94:	d101      	bne.n	12e9a <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
   12e96:	2380      	movs	r3, #128	; 0x80
   12e98:	e017      	b.n	12eca <system_pinmux_pin_get_mux_position+0x6e>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
   12e9a:	693b      	ldr	r3, [r7, #16]
   12e9c:	085a      	lsrs	r2, r3, #1
   12e9e:	6979      	ldr	r1, [r7, #20]
   12ea0:	2330      	movs	r3, #48	; 0x30
   12ea2:	188a      	adds	r2, r1, r2
   12ea4:	18d3      	adds	r3, r2, r3
   12ea6:	781b      	ldrb	r3, [r3, #0]
   12ea8:	b2db      	uxtb	r3, r3
   12eaa:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
   12eac:	693a      	ldr	r2, [r7, #16]
   12eae:	2301      	movs	r3, #1
   12eb0:	4013      	ands	r3, r2
   12eb2:	d005      	beq.n	12ec0 <system_pinmux_pin_get_mux_position+0x64>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
   12eb4:	68fa      	ldr	r2, [r7, #12]
   12eb6:	23f0      	movs	r3, #240	; 0xf0
   12eb8:	4013      	ands	r3, r2
   12eba:	091b      	lsrs	r3, r3, #4
   12ebc:	b2db      	uxtb	r3, r3
   12ebe:	e004      	b.n	12eca <system_pinmux_pin_get_mux_position+0x6e>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
   12ec0:	68fb      	ldr	r3, [r7, #12]
   12ec2:	b2da      	uxtb	r2, r3
   12ec4:	230f      	movs	r3, #15
   12ec6:	4013      	ands	r3, r2
   12ec8:	b2db      	uxtb	r3, r3
	}
}
   12eca:	1c18      	adds	r0, r3, #0
   12ecc:	46bd      	mov	sp, r7
   12ece:	b006      	add	sp, #24
   12ed0:	bd80      	pop	{r7, pc}
   12ed2:	46c0      	nop			; (mov r8, r8)
   12ed4:	00012da9 	.word	0x00012da9

00012ed8 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   12ed8:	b590      	push	{r4, r7, lr}
   12eda:	b087      	sub	sp, #28
   12edc:	af02      	add	r7, sp, #8
   12ede:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);
   12ee0:	4b2b      	ldr	r3, [pc, #172]	; (12f90 <_i2c_master_wait_for_sync+0xb8>)
   12ee2:	4798      	blx	r3
   12ee4:	1c03      	adds	r3, r0, #0
   12ee6:	2b00      	cmp	r3, #0
   12ee8:	d011      	beq.n	12f0e <_i2c_master_wait_for_sync+0x36>
   12eea:	687b      	ldr	r3, [r7, #4]
   12eec:	2b00      	cmp	r3, #0
   12eee:	d11b      	bne.n	12f28 <_i2c_master_wait_for_sync+0x50>
   12ef0:	4b27      	ldr	r3, [pc, #156]	; (12f90 <_i2c_master_wait_for_sync+0xb8>)
   12ef2:	4798      	blx	r3
   12ef4:	1c02      	adds	r2, r0, #0
   12ef6:	4b27      	ldr	r3, [pc, #156]	; (12f94 <_i2c_master_wait_for_sync+0xbc>)
   12ef8:	4927      	ldr	r1, [pc, #156]	; (12f98 <_i2c_master_wait_for_sync+0xc0>)
   12efa:	9100      	str	r1, [sp, #0]
   12efc:	4927      	ldr	r1, [pc, #156]	; (12f9c <_i2c_master_wait_for_sync+0xc4>)
   12efe:	9101      	str	r1, [sp, #4]
   12f00:	1c10      	adds	r0, r2, #0
   12f02:	2101      	movs	r1, #1
   12f04:	1c1a      	adds	r2, r3, #0
   12f06:	23f1      	movs	r3, #241	; 0xf1
   12f08:	4c25      	ldr	r4, [pc, #148]	; (12fa0 <_i2c_master_wait_for_sync+0xc8>)
   12f0a:	47a0      	blx	r4
   12f0c:	e00c      	b.n	12f28 <_i2c_master_wait_for_sync+0x50>
   12f0e:	687b      	ldr	r3, [r7, #4]
   12f10:	2b00      	cmp	r3, #0
   12f12:	d109      	bne.n	12f28 <_i2c_master_wait_for_sync+0x50>
   12f14:	4923      	ldr	r1, [pc, #140]	; (12fa4 <_i2c_master_wait_for_sync+0xcc>)
   12f16:	4a21      	ldr	r2, [pc, #132]	; (12f9c <_i2c_master_wait_for_sync+0xc4>)
   12f18:	4b1e      	ldr	r3, [pc, #120]	; (12f94 <_i2c_master_wait_for_sync+0xbc>)
   12f1a:	1c08      	adds	r0, r1, #0
   12f1c:	1c11      	adds	r1, r2, #0
   12f1e:	1c1a      	adds	r2, r3, #0
   12f20:	23f1      	movs	r3, #241	; 0xf1
   12f22:	4c21      	ldr	r4, [pc, #132]	; (12fa8 <_i2c_master_wait_for_sync+0xd0>)
   12f24:	47a0      	blx	r4
   12f26:	e7fe      	b.n	12f26 <_i2c_master_wait_for_sync+0x4e>
	Assert(module->hw);
   12f28:	4b19      	ldr	r3, [pc, #100]	; (12f90 <_i2c_master_wait_for_sync+0xb8>)
   12f2a:	4798      	blx	r3
   12f2c:	1c03      	adds	r3, r0, #0
   12f2e:	2b00      	cmp	r3, #0
   12f30:	d012      	beq.n	12f58 <_i2c_master_wait_for_sync+0x80>
   12f32:	687b      	ldr	r3, [r7, #4]
   12f34:	681b      	ldr	r3, [r3, #0]
   12f36:	2b00      	cmp	r3, #0
   12f38:	d11c      	bne.n	12f74 <_i2c_master_wait_for_sync+0x9c>
   12f3a:	4b15      	ldr	r3, [pc, #84]	; (12f90 <_i2c_master_wait_for_sync+0xb8>)
   12f3c:	4798      	blx	r3
   12f3e:	1c02      	adds	r2, r0, #0
   12f40:	4b14      	ldr	r3, [pc, #80]	; (12f94 <_i2c_master_wait_for_sync+0xbc>)
   12f42:	4915      	ldr	r1, [pc, #84]	; (12f98 <_i2c_master_wait_for_sync+0xc0>)
   12f44:	9100      	str	r1, [sp, #0]
   12f46:	4919      	ldr	r1, [pc, #100]	; (12fac <_i2c_master_wait_for_sync+0xd4>)
   12f48:	9101      	str	r1, [sp, #4]
   12f4a:	1c10      	adds	r0, r2, #0
   12f4c:	2101      	movs	r1, #1
   12f4e:	1c1a      	adds	r2, r3, #0
   12f50:	23f2      	movs	r3, #242	; 0xf2
   12f52:	4c13      	ldr	r4, [pc, #76]	; (12fa0 <_i2c_master_wait_for_sync+0xc8>)
   12f54:	47a0      	blx	r4
   12f56:	e00d      	b.n	12f74 <_i2c_master_wait_for_sync+0x9c>
   12f58:	687b      	ldr	r3, [r7, #4]
   12f5a:	681b      	ldr	r3, [r3, #0]
   12f5c:	2b00      	cmp	r3, #0
   12f5e:	d109      	bne.n	12f74 <_i2c_master_wait_for_sync+0x9c>
   12f60:	4910      	ldr	r1, [pc, #64]	; (12fa4 <_i2c_master_wait_for_sync+0xcc>)
   12f62:	4a12      	ldr	r2, [pc, #72]	; (12fac <_i2c_master_wait_for_sync+0xd4>)
   12f64:	4b0b      	ldr	r3, [pc, #44]	; (12f94 <_i2c_master_wait_for_sync+0xbc>)
   12f66:	1c08      	adds	r0, r1, #0
   12f68:	1c11      	adds	r1, r2, #0
   12f6a:	1c1a      	adds	r2, r3, #0
   12f6c:	23f2      	movs	r3, #242	; 0xf2
   12f6e:	4c0e      	ldr	r4, [pc, #56]	; (12fa8 <_i2c_master_wait_for_sync+0xd0>)
   12f70:	47a0      	blx	r4
   12f72:	e7fe      	b.n	12f72 <_i2c_master_wait_for_sync+0x9a>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12f74:	687b      	ldr	r3, [r7, #4]
   12f76:	681b      	ldr	r3, [r3, #0]
   12f78:	60fb      	str	r3, [r7, #12]

	while (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY) {
   12f7a:	46c0      	nop			; (mov r8, r8)
   12f7c:	68fb      	ldr	r3, [r7, #12]
   12f7e:	691b      	ldr	r3, [r3, #16]
   12f80:	b29b      	uxth	r3, r3
   12f82:	b29b      	uxth	r3, r3
   12f84:	b21b      	sxth	r3, r3
   12f86:	2b00      	cmp	r3, #0
   12f88:	dbf8      	blt.n	12f7c <_i2c_master_wait_for_sync+0xa4>
		/* Wait for I2C module to sync. */
	}
}
   12f8a:	46bd      	mov	sp, r7
   12f8c:	b005      	add	sp, #20
   12f8e:	bd90      	pop	{r4, r7, pc}
   12f90:	00012bed 	.word	0x00012bed
   12f94:	000263b4 	.word	0x000263b4
   12f98:	00026308 	.word	0x00026308
   12f9c:	000263e4 	.word	0x000263e4
   12fa0:	000106e9 	.word	0x000106e9
   12fa4:	00026328 	.word	0x00026328
   12fa8:	0001b62d 	.word	0x0001b62d
   12fac:	000263ec 	.word	0x000263ec

00012fb0 <_i2c_master_check_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_check_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   12fb0:	b590      	push	{r4, r7, lr}
   12fb2:	b08f      	sub	sp, #60	; 0x3c
   12fb4:	af02      	add	r7, sp, #8
   12fb6:	6078      	str	r0, [r7, #4]
   12fb8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments. */
	Assert(module);
   12fba:	4b8a      	ldr	r3, [pc, #552]	; (131e4 <_i2c_master_check_config+0x234>)
   12fbc:	4798      	blx	r3
   12fbe:	1c03      	adds	r3, r0, #0
   12fc0:	2b00      	cmp	r3, #0
   12fc2:	d011      	beq.n	12fe8 <_i2c_master_check_config+0x38>
   12fc4:	687b      	ldr	r3, [r7, #4]
   12fc6:	2b00      	cmp	r3, #0
   12fc8:	d11b      	bne.n	13002 <_i2c_master_check_config+0x52>
   12fca:	4b86      	ldr	r3, [pc, #536]	; (131e4 <_i2c_master_check_config+0x234>)
   12fcc:	4798      	blx	r3
   12fce:	1c02      	adds	r2, r0, #0
   12fd0:	4b85      	ldr	r3, [pc, #532]	; (131e8 <_i2c_master_check_config+0x238>)
   12fd2:	4986      	ldr	r1, [pc, #536]	; (131ec <_i2c_master_check_config+0x23c>)
   12fd4:	9100      	str	r1, [sp, #0]
   12fd6:	4986      	ldr	r1, [pc, #536]	; (131f0 <_i2c_master_check_config+0x240>)
   12fd8:	9101      	str	r1, [sp, #4]
   12fda:	1c10      	adds	r0, r2, #0
   12fdc:	2101      	movs	r1, #1
   12fde:	1c1a      	adds	r2, r3, #0
   12fe0:	2349      	movs	r3, #73	; 0x49
   12fe2:	4c84      	ldr	r4, [pc, #528]	; (131f4 <_i2c_master_check_config+0x244>)
   12fe4:	47a0      	blx	r4
   12fe6:	e00c      	b.n	13002 <_i2c_master_check_config+0x52>
   12fe8:	687b      	ldr	r3, [r7, #4]
   12fea:	2b00      	cmp	r3, #0
   12fec:	d109      	bne.n	13002 <_i2c_master_check_config+0x52>
   12fee:	4982      	ldr	r1, [pc, #520]	; (131f8 <_i2c_master_check_config+0x248>)
   12ff0:	4a7f      	ldr	r2, [pc, #508]	; (131f0 <_i2c_master_check_config+0x240>)
   12ff2:	4b7d      	ldr	r3, [pc, #500]	; (131e8 <_i2c_master_check_config+0x238>)
   12ff4:	1c08      	adds	r0, r1, #0
   12ff6:	1c11      	adds	r1, r2, #0
   12ff8:	1c1a      	adds	r2, r3, #0
   12ffa:	2349      	movs	r3, #73	; 0x49
   12ffc:	4c7f      	ldr	r4, [pc, #508]	; (131fc <_i2c_master_check_config+0x24c>)
   12ffe:	47a0      	blx	r4
   13000:	e7fe      	b.n	13000 <_i2c_master_check_config+0x50>
	Assert(module->hw);
   13002:	4b78      	ldr	r3, [pc, #480]	; (131e4 <_i2c_master_check_config+0x234>)
   13004:	4798      	blx	r3
   13006:	1c03      	adds	r3, r0, #0
   13008:	2b00      	cmp	r3, #0
   1300a:	d012      	beq.n	13032 <_i2c_master_check_config+0x82>
   1300c:	687b      	ldr	r3, [r7, #4]
   1300e:	681b      	ldr	r3, [r3, #0]
   13010:	2b00      	cmp	r3, #0
   13012:	d11c      	bne.n	1304e <_i2c_master_check_config+0x9e>
   13014:	4b73      	ldr	r3, [pc, #460]	; (131e4 <_i2c_master_check_config+0x234>)
   13016:	4798      	blx	r3
   13018:	1c02      	adds	r2, r0, #0
   1301a:	4b73      	ldr	r3, [pc, #460]	; (131e8 <_i2c_master_check_config+0x238>)
   1301c:	4973      	ldr	r1, [pc, #460]	; (131ec <_i2c_master_check_config+0x23c>)
   1301e:	9100      	str	r1, [sp, #0]
   13020:	4977      	ldr	r1, [pc, #476]	; (13200 <_i2c_master_check_config+0x250>)
   13022:	9101      	str	r1, [sp, #4]
   13024:	1c10      	adds	r0, r2, #0
   13026:	2101      	movs	r1, #1
   13028:	1c1a      	adds	r2, r3, #0
   1302a:	234a      	movs	r3, #74	; 0x4a
   1302c:	4c71      	ldr	r4, [pc, #452]	; (131f4 <_i2c_master_check_config+0x244>)
   1302e:	47a0      	blx	r4
   13030:	e00d      	b.n	1304e <_i2c_master_check_config+0x9e>
   13032:	687b      	ldr	r3, [r7, #4]
   13034:	681b      	ldr	r3, [r3, #0]
   13036:	2b00      	cmp	r3, #0
   13038:	d109      	bne.n	1304e <_i2c_master_check_config+0x9e>
   1303a:	496f      	ldr	r1, [pc, #444]	; (131f8 <_i2c_master_check_config+0x248>)
   1303c:	4a70      	ldr	r2, [pc, #448]	; (13200 <_i2c_master_check_config+0x250>)
   1303e:	4b6a      	ldr	r3, [pc, #424]	; (131e8 <_i2c_master_check_config+0x238>)
   13040:	1c08      	adds	r0, r1, #0
   13042:	1c11      	adds	r1, r2, #0
   13044:	1c1a      	adds	r2, r3, #0
   13046:	234a      	movs	r3, #74	; 0x4a
   13048:	4c6c      	ldr	r4, [pc, #432]	; (131fc <_i2c_master_check_config+0x24c>)
   1304a:	47a0      	blx	r4
   1304c:	e7fe      	b.n	1304c <_i2c_master_check_config+0x9c>
	Assert(config);
   1304e:	4b65      	ldr	r3, [pc, #404]	; (131e4 <_i2c_master_check_config+0x234>)
   13050:	4798      	blx	r3
   13052:	1c03      	adds	r3, r0, #0
   13054:	2b00      	cmp	r3, #0
   13056:	d011      	beq.n	1307c <_i2c_master_check_config+0xcc>
   13058:	683b      	ldr	r3, [r7, #0]
   1305a:	2b00      	cmp	r3, #0
   1305c:	d11b      	bne.n	13096 <_i2c_master_check_config+0xe6>
   1305e:	4b61      	ldr	r3, [pc, #388]	; (131e4 <_i2c_master_check_config+0x234>)
   13060:	4798      	blx	r3
   13062:	1c02      	adds	r2, r0, #0
   13064:	4b60      	ldr	r3, [pc, #384]	; (131e8 <_i2c_master_check_config+0x238>)
   13066:	4961      	ldr	r1, [pc, #388]	; (131ec <_i2c_master_check_config+0x23c>)
   13068:	9100      	str	r1, [sp, #0]
   1306a:	4966      	ldr	r1, [pc, #408]	; (13204 <_i2c_master_check_config+0x254>)
   1306c:	9101      	str	r1, [sp, #4]
   1306e:	1c10      	adds	r0, r2, #0
   13070:	2101      	movs	r1, #1
   13072:	1c1a      	adds	r2, r3, #0
   13074:	234b      	movs	r3, #75	; 0x4b
   13076:	4c5f      	ldr	r4, [pc, #380]	; (131f4 <_i2c_master_check_config+0x244>)
   13078:	47a0      	blx	r4
   1307a:	e00c      	b.n	13096 <_i2c_master_check_config+0xe6>
   1307c:	683b      	ldr	r3, [r7, #0]
   1307e:	2b00      	cmp	r3, #0
   13080:	d109      	bne.n	13096 <_i2c_master_check_config+0xe6>
   13082:	495d      	ldr	r1, [pc, #372]	; (131f8 <_i2c_master_check_config+0x248>)
   13084:	4a5f      	ldr	r2, [pc, #380]	; (13204 <_i2c_master_check_config+0x254>)
   13086:	4b58      	ldr	r3, [pc, #352]	; (131e8 <_i2c_master_check_config+0x238>)
   13088:	1c08      	adds	r0, r1, #0
   1308a:	1c11      	adds	r1, r2, #0
   1308c:	1c1a      	adds	r2, r3, #0
   1308e:	234b      	movs	r3, #75	; 0x4b
   13090:	4c5a      	ldr	r4, [pc, #360]	; (131fc <_i2c_master_check_config+0x24c>)
   13092:	47a0      	blx	r4
   13094:	e7fe      	b.n	13094 <_i2c_master_check_config+0xe4>

	/* Temporary variables. */
	uint32_t tmp_ctrla = 0;
   13096:	2300      	movs	r3, #0
   13098:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t tmp_baud;
	enum status_code tmp_status_code = STATUS_OK;
   1309a:	1c3b      	adds	r3, r7, #0
   1309c:	332b      	adds	r3, #43	; 0x2b
   1309e:	2200      	movs	r2, #0
   130a0:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   130a2:	687b      	ldr	r3, [r7, #4]
   130a4:	681b      	ldr	r3, [r3, #0]
   130a6:	61fb      	str	r3, [r7, #28]
	Sercom *const sercom_hw = module->hw;
   130a8:	687b      	ldr	r3, [r7, #4]
   130aa:	681b      	ldr	r3, [r3, #0]
   130ac:	61bb      	str	r3, [r7, #24]

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   130ae:	1c3c      	adds	r4, r7, #0
   130b0:	3417      	adds	r4, #23
   130b2:	69bb      	ldr	r3, [r7, #24]
   130b4:	1c18      	adds	r0, r3, #0
   130b6:	4b54      	ldr	r3, [pc, #336]	; (13208 <_i2c_master_check_config+0x258>)
   130b8:	4798      	blx	r3
   130ba:	1c03      	adds	r3, r0, #0
   130bc:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   130be:	1c3b      	adds	r3, r7, #0
   130c0:	330c      	adds	r3, #12
   130c2:	1c18      	adds	r0, r3, #0
   130c4:	4b51      	ldr	r3, [pc, #324]	; (1320c <_i2c_master_check_config+0x25c>)
   130c6:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   130c8:	683b      	ldr	r3, [r7, #0]
   130ca:	691b      	ldr	r3, [r3, #16]
   130cc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t pad1 = config->pinmux_pad1;
   130ce:	683b      	ldr	r3, [r7, #0]
   130d0:	695b      	ldr	r3, [r3, #20]
   130d2:	623b      	str	r3, [r7, #32]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   130d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   130d6:	2b00      	cmp	r3, #0
   130d8:	d106      	bne.n	130e8 <_i2c_master_check_config+0x138>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   130da:	69bb      	ldr	r3, [r7, #24]
   130dc:	1c18      	adds	r0, r3, #0
   130de:	2100      	movs	r1, #0
   130e0:	4b4b      	ldr	r3, [pc, #300]	; (13210 <_i2c_master_check_config+0x260>)
   130e2:	4798      	blx	r3
   130e4:	1c03      	adds	r3, r0, #0
   130e6:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if ((pad0 & 0xFFFF) != system_pinmux_pin_get_mux_position(pad0 >> 16)) {
   130e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   130ea:	041b      	lsls	r3, r3, #16
   130ec:	0c1c      	lsrs	r4, r3, #16
   130ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   130f0:	0c1b      	lsrs	r3, r3, #16
   130f2:	b2db      	uxtb	r3, r3
   130f4:	1c18      	adds	r0, r3, #0
   130f6:	4b47      	ldr	r3, [pc, #284]	; (13214 <_i2c_master_check_config+0x264>)
   130f8:	4798      	blx	r3
   130fa:	1c03      	adds	r3, r0, #0
   130fc:	429c      	cmp	r4, r3
   130fe:	d001      	beq.n	13104 <_i2c_master_check_config+0x154>
		return STATUS_ERR_DENIED;
   13100:	231c      	movs	r3, #28
   13102:	e06b      	b.n	131dc <_i2c_master_check_config+0x22c>
	}

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   13104:	6a3b      	ldr	r3, [r7, #32]
   13106:	2b00      	cmp	r3, #0
   13108:	d106      	bne.n	13118 <_i2c_master_check_config+0x168>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   1310a:	69bb      	ldr	r3, [r7, #24]
   1310c:	1c18      	adds	r0, r3, #0
   1310e:	2101      	movs	r1, #1
   13110:	4b3f      	ldr	r3, [pc, #252]	; (13210 <_i2c_master_check_config+0x260>)
   13112:	4798      	blx	r3
   13114:	1c03      	adds	r3, r0, #0
   13116:	623b      	str	r3, [r7, #32]
	}
	if ((pad1 & 0xFFFF) != system_pinmux_pin_get_mux_position(pad1 >> 16)) {
   13118:	6a3b      	ldr	r3, [r7, #32]
   1311a:	041b      	lsls	r3, r3, #16
   1311c:	0c1c      	lsrs	r4, r3, #16
   1311e:	6a3b      	ldr	r3, [r7, #32]
   13120:	0c1b      	lsrs	r3, r3, #16
   13122:	b2db      	uxtb	r3, r3
   13124:	1c18      	adds	r0, r3, #0
   13126:	4b3b      	ldr	r3, [pc, #236]	; (13214 <_i2c_master_check_config+0x264>)
   13128:	4798      	blx	r3
   1312a:	1c03      	adds	r3, r0, #0
   1312c:	429c      	cmp	r4, r3
   1312e:	d001      	beq.n	13134 <_i2c_master_check_config+0x184>
		return STATUS_ERR_DENIED;
   13130:	231c      	movs	r3, #28
   13132:	e053      	b.n	131dc <_i2c_master_check_config+0x22c>
	}

	/* Check and set if module should run in standby. */
	if (config->run_in_standby) {
   13134:	683b      	ldr	r3, [r7, #0]
   13136:	7b1b      	ldrb	r3, [r3, #12]
   13138:	2b00      	cmp	r3, #0
   1313a:	d003      	beq.n	13144 <_i2c_master_check_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_RUNSTDBY;
   1313c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1313e:	2280      	movs	r2, #128	; 0x80
   13140:	4313      	orrs	r3, r2
   13142:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   13144:	683b      	ldr	r3, [r7, #0]
   13146:	685b      	ldr	r3, [r3, #4]
   13148:	2b00      	cmp	r3, #0
   1314a:	d004      	beq.n	13156 <_i2c_master_check_config+0x1a6>
		tmp_ctrla |= config->start_hold_time;
   1314c:	683b      	ldr	r3, [r7, #0]
   1314e:	685b      	ldr	r3, [r3, #4]
   13150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13152:	4313      	orrs	r3, r2
   13154:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	tmp_ctrla |= SERCOM_I2CM_CTRLA_ENABLE | SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;
   13156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13158:	2216      	movs	r2, #22
   1315a:	4313      	orrs	r3, r2
   1315c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Write config to register CTRLA. */
	if (tmp_ctrla != i2c_module->CTRLA.reg) {
   1315e:	69fb      	ldr	r3, [r7, #28]
   13160:	681a      	ldr	r2, [r3, #0]
   13162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13164:	429a      	cmp	r2, r3
   13166:	d003      	beq.n	13170 <_i2c_master_check_config+0x1c0>
		tmp_status_code = STATUS_ERR_DENIED;
   13168:	1c3b      	adds	r3, r7, #0
   1316a:	332b      	adds	r3, #43	; 0x2b
   1316c:	221c      	movs	r2, #28
   1316e:	701a      	strb	r2, [r3, #0]
	}

	/* Find and set baudrate. */
	tmp_baud = (int32_t)((system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE +
   13170:	1c3b      	adds	r3, r7, #0
   13172:	3317      	adds	r3, #23
   13174:	781b      	ldrb	r3, [r3, #0]
   13176:	330d      	adds	r3, #13
   13178:	b2db      	uxtb	r3, r3
   1317a:	1c18      	adds	r0, r3, #0
   1317c:	4b26      	ldr	r3, [pc, #152]	; (13218 <_i2c_master_check_config+0x268>)
   1317e:	4798      	blx	r3
   13180:	1c01      	adds	r1, r0, #0
			sercom_index) / (2000*(config->baud_rate))) - 5);
   13182:	683b      	ldr	r3, [r7, #0]
   13184:	881b      	ldrh	r3, [r3, #0]
   13186:	22fa      	movs	r2, #250	; 0xfa
   13188:	00d2      	lsls	r2, r2, #3
   1318a:	4353      	muls	r3, r2
   1318c:	1c1a      	adds	r2, r3, #0
   1318e:	4b23      	ldr	r3, [pc, #140]	; (1321c <_i2c_master_check_config+0x26c>)
   13190:	1c08      	adds	r0, r1, #0
   13192:	1c11      	adds	r1, r2, #0
   13194:	4798      	blx	r3
   13196:	1c03      	adds	r3, r0, #0
   13198:	3b05      	subs	r3, #5
	if (tmp_ctrla != i2c_module->CTRLA.reg) {
		tmp_status_code = STATUS_ERR_DENIED;
	}

	/* Find and set baudrate. */
	tmp_baud = (int32_t)((system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE +
   1319a:	613b      	str	r3, [r7, #16]
			sercom_index) / (2000*(config->baud_rate))) - 5);

	/* Check that baud rate is supported at current speed. */
	if (tmp_baud != i2c_module->BAUD.reg) {
   1319c:	69fb      	ldr	r3, [r7, #28]
   1319e:	689b      	ldr	r3, [r3, #8]
   131a0:	0c1b      	lsrs	r3, r3, #16
   131a2:	b29b      	uxth	r3, r3
   131a4:	1c1a      	adds	r2, r3, #0
   131a6:	693b      	ldr	r3, [r7, #16]
   131a8:	429a      	cmp	r2, r3
   131aa:	d003      	beq.n	131b4 <_i2c_master_check_config+0x204>
		tmp_status_code = STATUS_ERR_DENIED;
   131ac:	1c3b      	adds	r3, r7, #0
   131ae:	332b      	adds	r3, #43	; 0x2b
   131b0:	221c      	movs	r2, #28
   131b2:	701a      	strb	r2, [r3, #0]
	}

	if (tmp_status_code == STATUS_OK) {
   131b4:	1c3b      	adds	r3, r7, #0
   131b6:	332b      	adds	r3, #43	; 0x2b
   131b8:	781b      	ldrb	r3, [r3, #0]
   131ba:	2b00      	cmp	r3, #0
   131bc:	d108      	bne.n	131d0 <_i2c_master_check_config+0x220>
		/* Save timeout on unknown bus state in software module. */
		module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   131be:	683b      	ldr	r3, [r7, #0]
   131c0:	891a      	ldrh	r2, [r3, #8]
   131c2:	687b      	ldr	r3, [r7, #4]
   131c4:	809a      	strh	r2, [r3, #4]

		/* Save timeout on buffer write. */
		module->buffer_timeout = config->buffer_timeout;
   131c6:	683b      	ldr	r3, [r7, #0]
   131c8:	895a      	ldrh	r2, [r3, #10]
   131ca:	687b      	ldr	r3, [r7, #4]
   131cc:	80da      	strh	r2, [r3, #6]
   131ce:	e002      	b.n	131d6 <_i2c_master_check_config+0x226>
	} else {
		module->hw = NULL;
   131d0:	687b      	ldr	r3, [r7, #4]
   131d2:	2200      	movs	r2, #0
   131d4:	601a      	str	r2, [r3, #0]
	}


	return tmp_status_code;
   131d6:	1c3b      	adds	r3, r7, #0
   131d8:	332b      	adds	r3, #43	; 0x2b
   131da:	781b      	ldrb	r3, [r3, #0]
}
   131dc:	1c18      	adds	r0, r3, #0
   131de:	46bd      	mov	sp, r7
   131e0:	b00d      	add	sp, #52	; 0x34
   131e2:	bd90      	pop	{r4, r7, pc}
   131e4:	00012bed 	.word	0x00012bed
   131e8:	000263f8 	.word	0x000263f8
   131ec:	00026308 	.word	0x00026308
   131f0:	000263e4 	.word	0x000263e4
   131f4:	000106e9 	.word	0x000106e9
   131f8:	00026328 	.word	0x00026328
   131fc:	0001b62d 	.word	0x0001b62d
   13200:	000263ec 	.word	0x000263ec
   13204:	00026320 	.word	0x00026320
   13208:	00015171 	.word	0x00015171
   1320c:	00012d29 	.word	0x00012d29
   13210:	00014ee5 	.word	0x00014ee5
   13214:	00012e5d 	.word	0x00012e5d
   13218:	00017ac9 	.word	0x00017ac9
   1321c:	0001f42d 	.word	0x0001f42d

00013220 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   13220:	b590      	push	{r4, r7, lr}
   13222:	b08f      	sub	sp, #60	; 0x3c
   13224:	af02      	add	r7, sp, #8
   13226:	6078      	str	r0, [r7, #4]
   13228:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments. */
	Assert(module);
   1322a:	4b89      	ldr	r3, [pc, #548]	; (13450 <_i2c_master_set_config+0x230>)
   1322c:	4798      	blx	r3
   1322e:	1c03      	adds	r3, r0, #0
   13230:	2b00      	cmp	r3, #0
   13232:	d011      	beq.n	13258 <_i2c_master_set_config+0x38>
   13234:	687b      	ldr	r3, [r7, #4]
   13236:	2b00      	cmp	r3, #0
   13238:	d11b      	bne.n	13272 <_i2c_master_set_config+0x52>
   1323a:	4b85      	ldr	r3, [pc, #532]	; (13450 <_i2c_master_set_config+0x230>)
   1323c:	4798      	blx	r3
   1323e:	1c02      	adds	r2, r0, #0
   13240:	4b84      	ldr	r3, [pc, #528]	; (13454 <_i2c_master_set_config+0x234>)
   13242:	4985      	ldr	r1, [pc, #532]	; (13458 <_i2c_master_set_config+0x238>)
   13244:	9100      	str	r1, [sp, #0]
   13246:	4985      	ldr	r1, [pc, #532]	; (1345c <_i2c_master_set_config+0x23c>)
   13248:	9101      	str	r1, [sp, #4]
   1324a:	1c10      	adds	r0, r2, #0
   1324c:	2101      	movs	r1, #1
   1324e:	1c1a      	adds	r2, r3, #0
   13250:	23a9      	movs	r3, #169	; 0xa9
   13252:	4c83      	ldr	r4, [pc, #524]	; (13460 <_i2c_master_set_config+0x240>)
   13254:	47a0      	blx	r4
   13256:	e00c      	b.n	13272 <_i2c_master_set_config+0x52>
   13258:	687b      	ldr	r3, [r7, #4]
   1325a:	2b00      	cmp	r3, #0
   1325c:	d109      	bne.n	13272 <_i2c_master_set_config+0x52>
   1325e:	4981      	ldr	r1, [pc, #516]	; (13464 <_i2c_master_set_config+0x244>)
   13260:	4a7e      	ldr	r2, [pc, #504]	; (1345c <_i2c_master_set_config+0x23c>)
   13262:	4b7c      	ldr	r3, [pc, #496]	; (13454 <_i2c_master_set_config+0x234>)
   13264:	1c08      	adds	r0, r1, #0
   13266:	1c11      	adds	r1, r2, #0
   13268:	1c1a      	adds	r2, r3, #0
   1326a:	23a9      	movs	r3, #169	; 0xa9
   1326c:	4c7e      	ldr	r4, [pc, #504]	; (13468 <_i2c_master_set_config+0x248>)
   1326e:	47a0      	blx	r4
   13270:	e7fe      	b.n	13270 <_i2c_master_set_config+0x50>
	Assert(module->hw);
   13272:	4b77      	ldr	r3, [pc, #476]	; (13450 <_i2c_master_set_config+0x230>)
   13274:	4798      	blx	r3
   13276:	1c03      	adds	r3, r0, #0
   13278:	2b00      	cmp	r3, #0
   1327a:	d012      	beq.n	132a2 <_i2c_master_set_config+0x82>
   1327c:	687b      	ldr	r3, [r7, #4]
   1327e:	681b      	ldr	r3, [r3, #0]
   13280:	2b00      	cmp	r3, #0
   13282:	d11c      	bne.n	132be <_i2c_master_set_config+0x9e>
   13284:	4b72      	ldr	r3, [pc, #456]	; (13450 <_i2c_master_set_config+0x230>)
   13286:	4798      	blx	r3
   13288:	1c02      	adds	r2, r0, #0
   1328a:	4b72      	ldr	r3, [pc, #456]	; (13454 <_i2c_master_set_config+0x234>)
   1328c:	4972      	ldr	r1, [pc, #456]	; (13458 <_i2c_master_set_config+0x238>)
   1328e:	9100      	str	r1, [sp, #0]
   13290:	4976      	ldr	r1, [pc, #472]	; (1346c <_i2c_master_set_config+0x24c>)
   13292:	9101      	str	r1, [sp, #4]
   13294:	1c10      	adds	r0, r2, #0
   13296:	2101      	movs	r1, #1
   13298:	1c1a      	adds	r2, r3, #0
   1329a:	23aa      	movs	r3, #170	; 0xaa
   1329c:	4c70      	ldr	r4, [pc, #448]	; (13460 <_i2c_master_set_config+0x240>)
   1329e:	47a0      	blx	r4
   132a0:	e00d      	b.n	132be <_i2c_master_set_config+0x9e>
   132a2:	687b      	ldr	r3, [r7, #4]
   132a4:	681b      	ldr	r3, [r3, #0]
   132a6:	2b00      	cmp	r3, #0
   132a8:	d109      	bne.n	132be <_i2c_master_set_config+0x9e>
   132aa:	496e      	ldr	r1, [pc, #440]	; (13464 <_i2c_master_set_config+0x244>)
   132ac:	4a6f      	ldr	r2, [pc, #444]	; (1346c <_i2c_master_set_config+0x24c>)
   132ae:	4b69      	ldr	r3, [pc, #420]	; (13454 <_i2c_master_set_config+0x234>)
   132b0:	1c08      	adds	r0, r1, #0
   132b2:	1c11      	adds	r1, r2, #0
   132b4:	1c1a      	adds	r2, r3, #0
   132b6:	23aa      	movs	r3, #170	; 0xaa
   132b8:	4c6b      	ldr	r4, [pc, #428]	; (13468 <_i2c_master_set_config+0x248>)
   132ba:	47a0      	blx	r4
   132bc:	e7fe      	b.n	132bc <_i2c_master_set_config+0x9c>
	Assert(config);
   132be:	4b64      	ldr	r3, [pc, #400]	; (13450 <_i2c_master_set_config+0x230>)
   132c0:	4798      	blx	r3
   132c2:	1c03      	adds	r3, r0, #0
   132c4:	2b00      	cmp	r3, #0
   132c6:	d011      	beq.n	132ec <_i2c_master_set_config+0xcc>
   132c8:	683b      	ldr	r3, [r7, #0]
   132ca:	2b00      	cmp	r3, #0
   132cc:	d11b      	bne.n	13306 <_i2c_master_set_config+0xe6>
   132ce:	4b60      	ldr	r3, [pc, #384]	; (13450 <_i2c_master_set_config+0x230>)
   132d0:	4798      	blx	r3
   132d2:	1c02      	adds	r2, r0, #0
   132d4:	4b5f      	ldr	r3, [pc, #380]	; (13454 <_i2c_master_set_config+0x234>)
   132d6:	4960      	ldr	r1, [pc, #384]	; (13458 <_i2c_master_set_config+0x238>)
   132d8:	9100      	str	r1, [sp, #0]
   132da:	4965      	ldr	r1, [pc, #404]	; (13470 <_i2c_master_set_config+0x250>)
   132dc:	9101      	str	r1, [sp, #4]
   132de:	1c10      	adds	r0, r2, #0
   132e0:	2101      	movs	r1, #1
   132e2:	1c1a      	adds	r2, r3, #0
   132e4:	23ab      	movs	r3, #171	; 0xab
   132e6:	4c5e      	ldr	r4, [pc, #376]	; (13460 <_i2c_master_set_config+0x240>)
   132e8:	47a0      	blx	r4
   132ea:	e00c      	b.n	13306 <_i2c_master_set_config+0xe6>
   132ec:	683b      	ldr	r3, [r7, #0]
   132ee:	2b00      	cmp	r3, #0
   132f0:	d109      	bne.n	13306 <_i2c_master_set_config+0xe6>
   132f2:	495c      	ldr	r1, [pc, #368]	; (13464 <_i2c_master_set_config+0x244>)
   132f4:	4a5e      	ldr	r2, [pc, #376]	; (13470 <_i2c_master_set_config+0x250>)
   132f6:	4b57      	ldr	r3, [pc, #348]	; (13454 <_i2c_master_set_config+0x234>)
   132f8:	1c08      	adds	r0, r1, #0
   132fa:	1c11      	adds	r1, r2, #0
   132fc:	1c1a      	adds	r2, r3, #0
   132fe:	23ab      	movs	r3, #171	; 0xab
   13300:	4c59      	ldr	r4, [pc, #356]	; (13468 <_i2c_master_set_config+0x248>)
   13302:	47a0      	blx	r4
   13304:	e7fe      	b.n	13304 <_i2c_master_set_config+0xe4>

	/* Temporary variables. */
	uint32_t tmp_ctrla = 0;
   13306:	2300      	movs	r3, #0
   13308:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t tmp_baud;
	enum status_code tmp_status_code = STATUS_OK;
   1330a:	1c3b      	adds	r3, r7, #0
   1330c:	332b      	adds	r3, #43	; 0x2b
   1330e:	2200      	movs	r2, #0
   13310:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13312:	687b      	ldr	r3, [r7, #4]
   13314:	681b      	ldr	r3, [r3, #0]
   13316:	61fb      	str	r3, [r7, #28]
	Sercom *const sercom_hw = module->hw;
   13318:	687b      	ldr	r3, [r7, #4]
   1331a:	681b      	ldr	r3, [r3, #0]
   1331c:	61bb      	str	r3, [r7, #24]

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   1331e:	1c3c      	adds	r4, r7, #0
   13320:	3417      	adds	r4, #23
   13322:	69bb      	ldr	r3, [r7, #24]
   13324:	1c18      	adds	r0, r3, #0
   13326:	4b53      	ldr	r3, [pc, #332]	; (13474 <_i2c_master_set_config+0x254>)
   13328:	4798      	blx	r3
   1332a:	1c03      	adds	r3, r0, #0
   1332c:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   1332e:	1c3b      	adds	r3, r7, #0
   13330:	330c      	adds	r3, #12
   13332:	1c18      	adds	r0, r3, #0
   13334:	4b50      	ldr	r3, [pc, #320]	; (13478 <_i2c_master_set_config+0x258>)
   13336:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   13338:	683b      	ldr	r3, [r7, #0]
   1333a:	691b      	ldr	r3, [r3, #16]
   1333c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t pad1 = config->pinmux_pad1;
   1333e:	683b      	ldr	r3, [r7, #0]
   13340:	695b      	ldr	r3, [r3, #20]
   13342:	623b      	str	r3, [r7, #32]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   13344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13346:	2b00      	cmp	r3, #0
   13348:	d106      	bne.n	13358 <_i2c_master_set_config+0x138>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   1334a:	69bb      	ldr	r3, [r7, #24]
   1334c:	1c18      	adds	r0, r3, #0
   1334e:	2100      	movs	r1, #0
   13350:	4b4a      	ldr	r3, [pc, #296]	; (1347c <_i2c_master_set_config+0x25c>)
   13352:	4798      	blx	r3
   13354:	1c03      	adds	r3, r0, #0
   13356:	627b      	str	r3, [r7, #36]	; 0x24
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   13358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1335a:	b2da      	uxtb	r2, r3
   1335c:	1c3b      	adds	r3, r7, #0
   1335e:	330c      	adds	r3, #12
   13360:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   13362:	1c3b      	adds	r3, r7, #0
   13364:	330c      	adds	r3, #12
   13366:	2202      	movs	r2, #2
   13368:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   1336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1336c:	0c1b      	lsrs	r3, r3, #16
   1336e:	b2da      	uxtb	r2, r3
   13370:	1c3b      	adds	r3, r7, #0
   13372:	330c      	adds	r3, #12
   13374:	1c10      	adds	r0, r2, #0
   13376:	1c19      	adds	r1, r3, #0
   13378:	4b41      	ldr	r3, [pc, #260]	; (13480 <_i2c_master_set_config+0x260>)
   1337a:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   1337c:	6a3b      	ldr	r3, [r7, #32]
   1337e:	2b00      	cmp	r3, #0
   13380:	d106      	bne.n	13390 <_i2c_master_set_config+0x170>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   13382:	69bb      	ldr	r3, [r7, #24]
   13384:	1c18      	adds	r0, r3, #0
   13386:	2101      	movs	r1, #1
   13388:	4b3c      	ldr	r3, [pc, #240]	; (1347c <_i2c_master_set_config+0x25c>)
   1338a:	4798      	blx	r3
   1338c:	1c03      	adds	r3, r0, #0
   1338e:	623b      	str	r3, [r7, #32]
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   13390:	6a3b      	ldr	r3, [r7, #32]
   13392:	b2da      	uxtb	r2, r3
   13394:	1c3b      	adds	r3, r7, #0
   13396:	330c      	adds	r3, #12
   13398:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   1339a:	1c3b      	adds	r3, r7, #0
   1339c:	330c      	adds	r3, #12
   1339e:	2202      	movs	r2, #2
   133a0:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   133a2:	6a3b      	ldr	r3, [r7, #32]
   133a4:	0c1b      	lsrs	r3, r3, #16
   133a6:	b2da      	uxtb	r2, r3
   133a8:	1c3b      	adds	r3, r7, #0
   133aa:	330c      	adds	r3, #12
   133ac:	1c10      	adds	r0, r2, #0
   133ae:	1c19      	adds	r1, r3, #0
   133b0:	4b33      	ldr	r3, [pc, #204]	; (13480 <_i2c_master_set_config+0x260>)
   133b2:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   133b4:	683b      	ldr	r3, [r7, #0]
   133b6:	891a      	ldrh	r2, [r3, #8]
   133b8:	687b      	ldr	r3, [r7, #4]
   133ba:	809a      	strh	r2, [r3, #4]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   133bc:	683b      	ldr	r3, [r7, #0]
   133be:	895a      	ldrh	r2, [r3, #10]
   133c0:	687b      	ldr	r3, [r7, #4]
   133c2:	80da      	strh	r2, [r3, #6]

	/* Check and set if module should run in standby. */
	if (config->run_in_standby) {
   133c4:	683b      	ldr	r3, [r7, #0]
   133c6:	7b1b      	ldrb	r3, [r3, #12]
   133c8:	2b00      	cmp	r3, #0
   133ca:	d001      	beq.n	133d0 <_i2c_master_set_config+0x1b0>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   133cc:	2380      	movs	r3, #128	; 0x80
   133ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   133d0:	683b      	ldr	r3, [r7, #0]
   133d2:	685b      	ldr	r3, [r3, #4]
   133d4:	2b00      	cmp	r3, #0
   133d6:	d004      	beq.n	133e2 <_i2c_master_set_config+0x1c2>
		tmp_ctrla |= config->start_hold_time;
   133d8:	683b      	ldr	r3, [r7, #0]
   133da:	685b      	ldr	r3, [r3, #4]
   133dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   133de:	4313      	orrs	r3, r2
   133e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   133e2:	69fb      	ldr	r3, [r7, #28]
   133e4:	681a      	ldr	r2, [r3, #0]
   133e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   133e8:	431a      	orrs	r2, r3
   133ea:	69fb      	ldr	r3, [r7, #28]
   133ec:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   133ee:	69fb      	ldr	r3, [r7, #28]
   133f0:	2280      	movs	r2, #128	; 0x80
   133f2:	0052      	lsls	r2, r2, #1
   133f4:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate. */
	tmp_baud = (int32_t)((system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE +
   133f6:	1c3b      	adds	r3, r7, #0
   133f8:	3317      	adds	r3, #23
   133fa:	781b      	ldrb	r3, [r3, #0]
   133fc:	330d      	adds	r3, #13
   133fe:	b2db      	uxtb	r3, r3
   13400:	1c18      	adds	r0, r3, #0
   13402:	4b20      	ldr	r3, [pc, #128]	; (13484 <_i2c_master_set_config+0x264>)
   13404:	4798      	blx	r3
   13406:	1c01      	adds	r1, r0, #0
			sercom_index) / (2000*(config->baud_rate))) - 5);
   13408:	683b      	ldr	r3, [r7, #0]
   1340a:	881b      	ldrh	r3, [r3, #0]
   1340c:	22fa      	movs	r2, #250	; 0xfa
   1340e:	00d2      	lsls	r2, r2, #3
   13410:	4353      	muls	r3, r2
   13412:	1c1a      	adds	r2, r3, #0
   13414:	4b1c      	ldr	r3, [pc, #112]	; (13488 <_i2c_master_set_config+0x268>)
   13416:	1c08      	adds	r0, r1, #0
   13418:	1c11      	adds	r1, r2, #0
   1341a:	4798      	blx	r3
   1341c:	1c03      	adds	r3, r0, #0
   1341e:	3b05      	subs	r3, #5

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate. */
	tmp_baud = (int32_t)((system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE +
   13420:	613b      	str	r3, [r7, #16]
			sercom_index) / (2000*(config->baud_rate))) - 5);

	/* Check that baud rate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0) {
   13422:	693b      	ldr	r3, [r7, #16]
   13424:	2bff      	cmp	r3, #255	; 0xff
   13426:	dc02      	bgt.n	1342e <_i2c_master_set_config+0x20e>
   13428:	693b      	ldr	r3, [r7, #16]
   1342a:	2b00      	cmp	r3, #0
   1342c:	da04      	bge.n	13438 <_i2c_master_set_config+0x218>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1342e:	1c3b      	adds	r3, r7, #0
   13430:	332b      	adds	r3, #43	; 0x2b
   13432:	2240      	movs	r2, #64	; 0x40
   13434:	701a      	strb	r2, [r3, #0]
   13436:	e004      	b.n	13442 <_i2c_master_set_config+0x222>
	} else {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = (uint8_t)tmp_baud;
   13438:	693b      	ldr	r3, [r7, #16]
   1343a:	b2db      	uxtb	r3, r3
   1343c:	1c1a      	adds	r2, r3, #0
   1343e:	69fb      	ldr	r3, [r7, #28]
   13440:	815a      	strh	r2, [r3, #10]
	}

	return tmp_status_code;
   13442:	1c3b      	adds	r3, r7, #0
   13444:	332b      	adds	r3, #43	; 0x2b
   13446:	781b      	ldrb	r3, [r3, #0]
}
   13448:	1c18      	adds	r0, r3, #0
   1344a:	46bd      	mov	sp, r7
   1344c:	b00d      	add	sp, #52	; 0x34
   1344e:	bd90      	pop	{r4, r7, pc}
   13450:	00012bed 	.word	0x00012bed
   13454:	000263f8 	.word	0x000263f8
   13458:	00026308 	.word	0x00026308
   1345c:	000263e4 	.word	0x000263e4
   13460:	000106e9 	.word	0x000106e9
   13464:	00026328 	.word	0x00026328
   13468:	0001b62d 	.word	0x0001b62d
   1346c:	000263ec 	.word	0x000263ec
   13470:	00026320 	.word	0x00026320
   13474:	00015171 	.word	0x00015171
   13478:	00012d29 	.word	0x00012d29
   1347c:	00014ee5 	.word	0x00014ee5
   13480:	00017d71 	.word	0x00017d71
   13484:	00017ac9 	.word	0x00017ac9
   13488:	0001f42d 	.word	0x0001f42d

0001348c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   1348c:	b590      	push	{r4, r7, lr}
   1348e:	b08d      	sub	sp, #52	; 0x34
   13490:	af02      	add	r7, sp, #8
   13492:	60f8      	str	r0, [r7, #12]
   13494:	60b9      	str	r1, [r7, #8]
   13496:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
   13498:	4b60      	ldr	r3, [pc, #384]	; (1361c <i2c_master_init+0x190>)
   1349a:	4798      	blx	r3
   1349c:	1c03      	adds	r3, r0, #0
   1349e:	2b00      	cmp	r3, #0
   134a0:	d011      	beq.n	134c6 <i2c_master_init+0x3a>
   134a2:	68fb      	ldr	r3, [r7, #12]
   134a4:	2b00      	cmp	r3, #0
   134a6:	d119      	bne.n	134dc <i2c_master_init+0x50>
   134a8:	4b5c      	ldr	r3, [pc, #368]	; (1361c <i2c_master_init+0x190>)
   134aa:	4798      	blx	r3
   134ac:	1c01      	adds	r1, r0, #0
   134ae:	4a5c      	ldr	r2, [pc, #368]	; (13620 <i2c_master_init+0x194>)
   134b0:	2388      	movs	r3, #136	; 0x88
   134b2:	005b      	lsls	r3, r3, #1
   134b4:	485b      	ldr	r0, [pc, #364]	; (13624 <i2c_master_init+0x198>)
   134b6:	9000      	str	r0, [sp, #0]
   134b8:	485b      	ldr	r0, [pc, #364]	; (13628 <i2c_master_init+0x19c>)
   134ba:	9001      	str	r0, [sp, #4]
   134bc:	1c08      	adds	r0, r1, #0
   134be:	2101      	movs	r1, #1
   134c0:	4c5a      	ldr	r4, [pc, #360]	; (1362c <i2c_master_init+0x1a0>)
   134c2:	47a0      	blx	r4
   134c4:	e00a      	b.n	134dc <i2c_master_init+0x50>
   134c6:	68fb      	ldr	r3, [r7, #12]
   134c8:	2b00      	cmp	r3, #0
   134ca:	d107      	bne.n	134dc <i2c_master_init+0x50>
   134cc:	4858      	ldr	r0, [pc, #352]	; (13630 <i2c_master_init+0x1a4>)
   134ce:	4956      	ldr	r1, [pc, #344]	; (13628 <i2c_master_init+0x19c>)
   134d0:	4a53      	ldr	r2, [pc, #332]	; (13620 <i2c_master_init+0x194>)
   134d2:	2388      	movs	r3, #136	; 0x88
   134d4:	005b      	lsls	r3, r3, #1
   134d6:	4c57      	ldr	r4, [pc, #348]	; (13634 <i2c_master_init+0x1a8>)
   134d8:	47a0      	blx	r4
   134da:	e7fe      	b.n	134da <i2c_master_init+0x4e>
	Assert(hw);
   134dc:	4b4f      	ldr	r3, [pc, #316]	; (1361c <i2c_master_init+0x190>)
   134de:	4798      	blx	r3
   134e0:	1c03      	adds	r3, r0, #0
   134e2:	2b00      	cmp	r3, #0
   134e4:	d011      	beq.n	1350a <i2c_master_init+0x7e>
   134e6:	68bb      	ldr	r3, [r7, #8]
   134e8:	2b00      	cmp	r3, #0
   134ea:	d119      	bne.n	13520 <i2c_master_init+0x94>
   134ec:	4b4b      	ldr	r3, [pc, #300]	; (1361c <i2c_master_init+0x190>)
   134ee:	4798      	blx	r3
   134f0:	1c01      	adds	r1, r0, #0
   134f2:	4a4b      	ldr	r2, [pc, #300]	; (13620 <i2c_master_init+0x194>)
   134f4:	2312      	movs	r3, #18
   134f6:	33ff      	adds	r3, #255	; 0xff
   134f8:	484a      	ldr	r0, [pc, #296]	; (13624 <i2c_master_init+0x198>)
   134fa:	9000      	str	r0, [sp, #0]
   134fc:	484e      	ldr	r0, [pc, #312]	; (13638 <i2c_master_init+0x1ac>)
   134fe:	9001      	str	r0, [sp, #4]
   13500:	1c08      	adds	r0, r1, #0
   13502:	2101      	movs	r1, #1
   13504:	4c49      	ldr	r4, [pc, #292]	; (1362c <i2c_master_init+0x1a0>)
   13506:	47a0      	blx	r4
   13508:	e00a      	b.n	13520 <i2c_master_init+0x94>
   1350a:	68bb      	ldr	r3, [r7, #8]
   1350c:	2b00      	cmp	r3, #0
   1350e:	d107      	bne.n	13520 <i2c_master_init+0x94>
   13510:	4847      	ldr	r0, [pc, #284]	; (13630 <i2c_master_init+0x1a4>)
   13512:	4949      	ldr	r1, [pc, #292]	; (13638 <i2c_master_init+0x1ac>)
   13514:	4a42      	ldr	r2, [pc, #264]	; (13620 <i2c_master_init+0x194>)
   13516:	2312      	movs	r3, #18
   13518:	33ff      	adds	r3, #255	; 0xff
   1351a:	4c46      	ldr	r4, [pc, #280]	; (13634 <i2c_master_init+0x1a8>)
   1351c:	47a0      	blx	r4
   1351e:	e7fe      	b.n	1351e <i2c_master_init+0x92>
	Assert(config);
   13520:	4b3e      	ldr	r3, [pc, #248]	; (1361c <i2c_master_init+0x190>)
   13522:	4798      	blx	r3
   13524:	1c03      	adds	r3, r0, #0
   13526:	2b00      	cmp	r3, #0
   13528:	d011      	beq.n	1354e <i2c_master_init+0xc2>
   1352a:	687b      	ldr	r3, [r7, #4]
   1352c:	2b00      	cmp	r3, #0
   1352e:	d119      	bne.n	13564 <i2c_master_init+0xd8>
   13530:	4b3a      	ldr	r3, [pc, #232]	; (1361c <i2c_master_init+0x190>)
   13532:	4798      	blx	r3
   13534:	1c01      	adds	r1, r0, #0
   13536:	4a3a      	ldr	r2, [pc, #232]	; (13620 <i2c_master_init+0x194>)
   13538:	2389      	movs	r3, #137	; 0x89
   1353a:	005b      	lsls	r3, r3, #1
   1353c:	4839      	ldr	r0, [pc, #228]	; (13624 <i2c_master_init+0x198>)
   1353e:	9000      	str	r0, [sp, #0]
   13540:	483e      	ldr	r0, [pc, #248]	; (1363c <i2c_master_init+0x1b0>)
   13542:	9001      	str	r0, [sp, #4]
   13544:	1c08      	adds	r0, r1, #0
   13546:	2101      	movs	r1, #1
   13548:	4c38      	ldr	r4, [pc, #224]	; (1362c <i2c_master_init+0x1a0>)
   1354a:	47a0      	blx	r4
   1354c:	e00a      	b.n	13564 <i2c_master_init+0xd8>
   1354e:	687b      	ldr	r3, [r7, #4]
   13550:	2b00      	cmp	r3, #0
   13552:	d107      	bne.n	13564 <i2c_master_init+0xd8>
   13554:	4836      	ldr	r0, [pc, #216]	; (13630 <i2c_master_init+0x1a4>)
   13556:	4939      	ldr	r1, [pc, #228]	; (1363c <i2c_master_init+0x1b0>)
   13558:	4a31      	ldr	r2, [pc, #196]	; (13620 <i2c_master_init+0x194>)
   1355a:	2389      	movs	r3, #137	; 0x89
   1355c:	005b      	lsls	r3, r3, #1
   1355e:	4c35      	ldr	r4, [pc, #212]	; (13634 <i2c_master_init+0x1a8>)
   13560:	47a0      	blx	r4
   13562:	e7fe      	b.n	13562 <i2c_master_init+0xd6>

	/* Initialize software module */
	module->hw = hw;
   13564:	68fb      	ldr	r3, [r7, #12]
   13566:	68ba      	ldr	r2, [r7, #8]
   13568:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1356a:	68fb      	ldr	r3, [r7, #12]
   1356c:	681b      	ldr	r3, [r3, #0]
   1356e:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   13570:	68fb      	ldr	r3, [r7, #12]
   13572:	681b      	ldr	r3, [r3, #0]
   13574:	1c18      	adds	r0, r3, #0
   13576:	4b32      	ldr	r3, [pc, #200]	; (13640 <i2c_master_init+0x1b4>)
   13578:	4798      	blx	r3
   1357a:	1c03      	adds	r3, r0, #0
   1357c:	623b      	str	r3, [r7, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1357e:	6a3b      	ldr	r3, [r7, #32]
   13580:	3302      	adds	r3, #2
   13582:	61fb      	str	r3, [r7, #28]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   13584:	6a3b      	ldr	r3, [r7, #32]
   13586:	330d      	adds	r3, #13
   13588:	61bb      	str	r3, [r7, #24]

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1358a:	69fb      	ldr	r3, [r7, #28]
   1358c:	2201      	movs	r2, #1
   1358e:	1c11      	adds	r1, r2, #0
   13590:	4099      	lsls	r1, r3
   13592:	1c0b      	adds	r3, r1, #0
   13594:	2002      	movs	r0, #2
   13596:	1c19      	adds	r1, r3, #0
   13598:	4b2a      	ldr	r3, [pc, #168]	; (13644 <i2c_master_init+0x1b8>)
   1359a:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1359c:	1c3b      	adds	r3, r7, #0
   1359e:	3314      	adds	r3, #20
   135a0:	1c18      	adds	r0, r3, #0
   135a2:	4b29      	ldr	r3, [pc, #164]	; (13648 <i2c_master_init+0x1bc>)
   135a4:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   135a6:	687b      	ldr	r3, [r7, #4]
   135a8:	789a      	ldrb	r2, [r3, #2]
   135aa:	1c3b      	adds	r3, r7, #0
   135ac:	3314      	adds	r3, #20
   135ae:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   135b0:	69bb      	ldr	r3, [r7, #24]
   135b2:	b2da      	uxtb	r2, r3
   135b4:	1c3b      	adds	r3, r7, #0
   135b6:	3314      	adds	r3, #20
   135b8:	1c10      	adds	r0, r2, #0
   135ba:	1c19      	adds	r1, r3, #0
   135bc:	4b23      	ldr	r3, [pc, #140]	; (1364c <i2c_master_init+0x1c0>)
   135be:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   135c0:	69bb      	ldr	r3, [r7, #24]
   135c2:	b2db      	uxtb	r3, r3
   135c4:	1c18      	adds	r0, r3, #0
   135c6:	4b22      	ldr	r3, [pc, #136]	; (13650 <i2c_master_init+0x1c4>)
   135c8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   135ca:	687b      	ldr	r3, [r7, #4]
   135cc:	789b      	ldrb	r3, [r3, #2]
   135ce:	1c18      	adds	r0, r3, #0
   135d0:	2100      	movs	r1, #0
   135d2:	4b20      	ldr	r3, [pc, #128]	; (13654 <i2c_master_init+0x1c8>)
   135d4:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   135d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   135d8:	681a      	ldr	r2, [r3, #0]
   135da:	2302      	movs	r3, #2
   135dc:	4013      	ands	r3, r2
   135de:	d007      	beq.n	135f0 <i2c_master_init+0x164>
#  if I2C_MASTER_CALLBACK_MODE == false
		return _i2c_master_check_config(module, config);
   135e0:	68fa      	ldr	r2, [r7, #12]
   135e2:	687b      	ldr	r3, [r7, #4]
   135e4:	1c10      	adds	r0, r2, #0
   135e6:	1c19      	adds	r1, r3, #0
   135e8:	4b1b      	ldr	r3, [pc, #108]	; (13658 <i2c_master_init+0x1cc>)
   135ea:	4798      	blx	r3
   135ec:	1c03      	adds	r3, r0, #0
   135ee:	e010      	b.n	13612 <i2c_master_init+0x186>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   135f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   135f2:	681a      	ldr	r2, [r3, #0]
   135f4:	2301      	movs	r3, #1
   135f6:	4013      	ands	r3, r2
   135f8:	d001      	beq.n	135fe <i2c_master_init+0x172>
		return STATUS_BUSY;
   135fa:	2305      	movs	r3, #5
   135fc:	e009      	b.n	13612 <i2c_master_init+0x186>
	module->enabled_callback = 0;
	module->buffer_length = 0;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;
   135fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13600:	2214      	movs	r2, #20
   13602:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   13604:	68fa      	ldr	r2, [r7, #12]
   13606:	687b      	ldr	r3, [r7, #4]
   13608:	1c10      	adds	r0, r2, #0
   1360a:	1c19      	adds	r1, r3, #0
   1360c:	4b13      	ldr	r3, [pc, #76]	; (1365c <i2c_master_init+0x1d0>)
   1360e:	4798      	blx	r3
   13610:	1c03      	adds	r3, r0, #0
}
   13612:	1c18      	adds	r0, r3, #0
   13614:	46bd      	mov	sp, r7
   13616:	b00b      	add	sp, #44	; 0x2c
   13618:	bd90      	pop	{r4, r7, pc}
   1361a:	46c0      	nop			; (mov r8, r8)
   1361c:	00012bed 	.word	0x00012bed
   13620:	000263f8 	.word	0x000263f8
   13624:	00026308 	.word	0x00026308
   13628:	000263e4 	.word	0x000263e4
   1362c:	000106e9 	.word	0x000106e9
   13630:	00026328 	.word	0x00026328
   13634:	0001b62d 	.word	0x0001b62d
   13638:	00026428 	.word	0x00026428
   1363c:	00026320 	.word	0x00026320
   13640:	00015171 	.word	0x00015171
   13644:	00012c7d 	.word	0x00012c7d
   13648:	00012c01 	.word	0x00012c01
   1364c:	00017971 	.word	0x00017971
   13650:	00017a25 	.word	0x00017a25
   13654:	00014e59 	.word	0x00014e59
   13658:	00012fb1 	.word	0x00012fb1
   1365c:	00013221 	.word	0x00013221

00013660 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   13660:	b590      	push	{r4, r7, lr}
   13662:	b087      	sub	sp, #28
   13664:	af02      	add	r7, sp, #8
   13666:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
   13668:	4b39      	ldr	r3, [pc, #228]	; (13750 <_i2c_master_address_response+0xf0>)
   1366a:	4798      	blx	r3
   1366c:	1c03      	adds	r3, r0, #0
   1366e:	2b00      	cmp	r3, #0
   13670:	d011      	beq.n	13696 <_i2c_master_address_response+0x36>
   13672:	687b      	ldr	r3, [r7, #4]
   13674:	2b00      	cmp	r3, #0
   13676:	d119      	bne.n	136ac <_i2c_master_address_response+0x4c>
   13678:	4b35      	ldr	r3, [pc, #212]	; (13750 <_i2c_master_address_response+0xf0>)
   1367a:	4798      	blx	r3
   1367c:	1c01      	adds	r1, r0, #0
   1367e:	4a35      	ldr	r2, [pc, #212]	; (13754 <_i2c_master_address_response+0xf4>)
   13680:	23bf      	movs	r3, #191	; 0xbf
   13682:	005b      	lsls	r3, r3, #1
   13684:	4834      	ldr	r0, [pc, #208]	; (13758 <_i2c_master_address_response+0xf8>)
   13686:	9000      	str	r0, [sp, #0]
   13688:	4834      	ldr	r0, [pc, #208]	; (1375c <_i2c_master_address_response+0xfc>)
   1368a:	9001      	str	r0, [sp, #4]
   1368c:	1c08      	adds	r0, r1, #0
   1368e:	2101      	movs	r1, #1
   13690:	4c33      	ldr	r4, [pc, #204]	; (13760 <_i2c_master_address_response+0x100>)
   13692:	47a0      	blx	r4
   13694:	e00a      	b.n	136ac <_i2c_master_address_response+0x4c>
   13696:	687b      	ldr	r3, [r7, #4]
   13698:	2b00      	cmp	r3, #0
   1369a:	d107      	bne.n	136ac <_i2c_master_address_response+0x4c>
   1369c:	4831      	ldr	r0, [pc, #196]	; (13764 <_i2c_master_address_response+0x104>)
   1369e:	492f      	ldr	r1, [pc, #188]	; (1375c <_i2c_master_address_response+0xfc>)
   136a0:	4a2c      	ldr	r2, [pc, #176]	; (13754 <_i2c_master_address_response+0xf4>)
   136a2:	23bf      	movs	r3, #191	; 0xbf
   136a4:	005b      	lsls	r3, r3, #1
   136a6:	4c30      	ldr	r4, [pc, #192]	; (13768 <_i2c_master_address_response+0x108>)
   136a8:	47a0      	blx	r4
   136aa:	e7fe      	b.n	136aa <_i2c_master_address_response+0x4a>
	Assert(module->hw);
   136ac:	4b28      	ldr	r3, [pc, #160]	; (13750 <_i2c_master_address_response+0xf0>)
   136ae:	4798      	blx	r3
   136b0:	1c03      	adds	r3, r0, #0
   136b2:	2b00      	cmp	r3, #0
   136b4:	d012      	beq.n	136dc <_i2c_master_address_response+0x7c>
   136b6:	687b      	ldr	r3, [r7, #4]
   136b8:	681b      	ldr	r3, [r3, #0]
   136ba:	2b00      	cmp	r3, #0
   136bc:	d11a      	bne.n	136f4 <_i2c_master_address_response+0x94>
   136be:	4b24      	ldr	r3, [pc, #144]	; (13750 <_i2c_master_address_response+0xf0>)
   136c0:	4798      	blx	r3
   136c2:	1c01      	adds	r1, r0, #0
   136c4:	4a23      	ldr	r2, [pc, #140]	; (13754 <_i2c_master_address_response+0xf4>)
   136c6:	2380      	movs	r3, #128	; 0x80
   136c8:	33ff      	adds	r3, #255	; 0xff
   136ca:	4823      	ldr	r0, [pc, #140]	; (13758 <_i2c_master_address_response+0xf8>)
   136cc:	9000      	str	r0, [sp, #0]
   136ce:	4827      	ldr	r0, [pc, #156]	; (1376c <_i2c_master_address_response+0x10c>)
   136d0:	9001      	str	r0, [sp, #4]
   136d2:	1c08      	adds	r0, r1, #0
   136d4:	2101      	movs	r1, #1
   136d6:	4c22      	ldr	r4, [pc, #136]	; (13760 <_i2c_master_address_response+0x100>)
   136d8:	47a0      	blx	r4
   136da:	e00b      	b.n	136f4 <_i2c_master_address_response+0x94>
   136dc:	687b      	ldr	r3, [r7, #4]
   136de:	681b      	ldr	r3, [r3, #0]
   136e0:	2b00      	cmp	r3, #0
   136e2:	d107      	bne.n	136f4 <_i2c_master_address_response+0x94>
   136e4:	481f      	ldr	r0, [pc, #124]	; (13764 <_i2c_master_address_response+0x104>)
   136e6:	4921      	ldr	r1, [pc, #132]	; (1376c <_i2c_master_address_response+0x10c>)
   136e8:	4a1a      	ldr	r2, [pc, #104]	; (13754 <_i2c_master_address_response+0xf4>)
   136ea:	2380      	movs	r3, #128	; 0x80
   136ec:	33ff      	adds	r3, #255	; 0xff
   136ee:	4c1e      	ldr	r4, [pc, #120]	; (13768 <_i2c_master_address_response+0x108>)
   136f0:	47a0      	blx	r4
   136f2:	e7fe      	b.n	136f2 <_i2c_master_address_response+0x92>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   136f4:	687b      	ldr	r3, [r7, #4]
   136f6:	681b      	ldr	r3, [r3, #0]
   136f8:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   136fa:	68fb      	ldr	r3, [r7, #12]
   136fc:	68db      	ldr	r3, [r3, #12]
   136fe:	021b      	lsls	r3, r3, #8
   13700:	0e1b      	lsrs	r3, r3, #24
   13702:	b2db      	uxtb	r3, r3
   13704:	1c1a      	adds	r2, r3, #0
   13706:	2302      	movs	r3, #2
   13708:	4013      	ands	r3, r2
   1370a:	d00b      	beq.n	13724 <_i2c_master_address_response+0xc4>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   1370c:	68fb      	ldr	r3, [r7, #12]
   1370e:	2202      	movs	r2, #2
   13710:	739a      	strb	r2, [r3, #14]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   13712:	68fb      	ldr	r3, [r7, #12]
   13714:	691b      	ldr	r3, [r3, #16]
   13716:	b29b      	uxth	r3, r3
   13718:	1c1a      	adds	r2, r3, #0
   1371a:	2302      	movs	r3, #2
   1371c:	4013      	ands	r3, r2
   1371e:	d011      	beq.n	13744 <_i2c_master_address_response+0xe4>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   13720:	2341      	movs	r3, #65	; 0x41
   13722:	e010      	b.n	13746 <_i2c_master_address_response+0xe6>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   13724:	68fb      	ldr	r3, [r7, #12]
   13726:	691b      	ldr	r3, [r3, #16]
   13728:	b29b      	uxth	r3, r3
   1372a:	1c1a      	adds	r2, r3, #0
   1372c:	2304      	movs	r3, #4
   1372e:	4013      	ands	r3, r2
   13730:	d008      	beq.n	13744 <_i2c_master_address_response+0xe4>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13732:	68fb      	ldr	r3, [r7, #12]
   13734:	685b      	ldr	r3, [r3, #4]
   13736:	22c0      	movs	r2, #192	; 0xc0
   13738:	0292      	lsls	r2, r2, #10
   1373a:	431a      	orrs	r2, r3
   1373c:	68fb      	ldr	r3, [r7, #12]
   1373e:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   13740:	2318      	movs	r3, #24
   13742:	e000      	b.n	13746 <_i2c_master_address_response+0xe6>
	}

	return STATUS_OK;
   13744:	2300      	movs	r3, #0
}
   13746:	1c18      	adds	r0, r3, #0
   13748:	46bd      	mov	sp, r7
   1374a:	b005      	add	sp, #20
   1374c:	bd90      	pop	{r4, r7, pc}
   1374e:	46c0      	nop			; (mov r8, r8)
   13750:	00012bed 	.word	0x00012bed
   13754:	000263f8 	.word	0x000263f8
   13758:	00026308 	.word	0x00026308
   1375c:	000263e4 	.word	0x000263e4
   13760:	000106e9 	.word	0x000106e9
   13764:	00026328 	.word	0x00026328
   13768:	0001b62d 	.word	0x0001b62d
   1376c:	000263ec 	.word	0x000263ec

00013770 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
static enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   13770:	b590      	push	{r4, r7, lr}
   13772:	b087      	sub	sp, #28
   13774:	af02      	add	r7, sp, #8
   13776:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
   13778:	4b3a      	ldr	r3, [pc, #232]	; (13864 <_i2c_master_wait_for_bus+0xf4>)
   1377a:	4798      	blx	r3
   1377c:	1c03      	adds	r3, r0, #0
   1377e:	2b00      	cmp	r3, #0
   13780:	d011      	beq.n	137a6 <_i2c_master_wait_for_bus+0x36>
   13782:	687b      	ldr	r3, [r7, #4]
   13784:	2b00      	cmp	r3, #0
   13786:	d119      	bne.n	137bc <_i2c_master_wait_for_bus+0x4c>
   13788:	4b36      	ldr	r3, [pc, #216]	; (13864 <_i2c_master_wait_for_bus+0xf4>)
   1378a:	4798      	blx	r3
   1378c:	1c01      	adds	r1, r0, #0
   1378e:	4a36      	ldr	r2, [pc, #216]	; (13868 <_i2c_master_wait_for_bus+0xf8>)
   13790:	23d5      	movs	r3, #213	; 0xd5
   13792:	005b      	lsls	r3, r3, #1
   13794:	4835      	ldr	r0, [pc, #212]	; (1386c <_i2c_master_wait_for_bus+0xfc>)
   13796:	9000      	str	r0, [sp, #0]
   13798:	4835      	ldr	r0, [pc, #212]	; (13870 <_i2c_master_wait_for_bus+0x100>)
   1379a:	9001      	str	r0, [sp, #4]
   1379c:	1c08      	adds	r0, r1, #0
   1379e:	2101      	movs	r1, #1
   137a0:	4c34      	ldr	r4, [pc, #208]	; (13874 <_i2c_master_wait_for_bus+0x104>)
   137a2:	47a0      	blx	r4
   137a4:	e00a      	b.n	137bc <_i2c_master_wait_for_bus+0x4c>
   137a6:	687b      	ldr	r3, [r7, #4]
   137a8:	2b00      	cmp	r3, #0
   137aa:	d107      	bne.n	137bc <_i2c_master_wait_for_bus+0x4c>
   137ac:	4832      	ldr	r0, [pc, #200]	; (13878 <_i2c_master_wait_for_bus+0x108>)
   137ae:	4930      	ldr	r1, [pc, #192]	; (13870 <_i2c_master_wait_for_bus+0x100>)
   137b0:	4a2d      	ldr	r2, [pc, #180]	; (13868 <_i2c_master_wait_for_bus+0xf8>)
   137b2:	23d5      	movs	r3, #213	; 0xd5
   137b4:	005b      	lsls	r3, r3, #1
   137b6:	4c31      	ldr	r4, [pc, #196]	; (1387c <_i2c_master_wait_for_bus+0x10c>)
   137b8:	47a0      	blx	r4
   137ba:	e7fe      	b.n	137ba <_i2c_master_wait_for_bus+0x4a>
	Assert(module->hw);
   137bc:	4b29      	ldr	r3, [pc, #164]	; (13864 <_i2c_master_wait_for_bus+0xf4>)
   137be:	4798      	blx	r3
   137c0:	1c03      	adds	r3, r0, #0
   137c2:	2b00      	cmp	r3, #0
   137c4:	d012      	beq.n	137ec <_i2c_master_wait_for_bus+0x7c>
   137c6:	687b      	ldr	r3, [r7, #4]
   137c8:	681b      	ldr	r3, [r3, #0]
   137ca:	2b00      	cmp	r3, #0
   137cc:	d11a      	bne.n	13804 <_i2c_master_wait_for_bus+0x94>
   137ce:	4b25      	ldr	r3, [pc, #148]	; (13864 <_i2c_master_wait_for_bus+0xf4>)
   137d0:	4798      	blx	r3
   137d2:	1c01      	adds	r1, r0, #0
   137d4:	4a24      	ldr	r2, [pc, #144]	; (13868 <_i2c_master_wait_for_bus+0xf8>)
   137d6:	23ac      	movs	r3, #172	; 0xac
   137d8:	33ff      	adds	r3, #255	; 0xff
   137da:	4824      	ldr	r0, [pc, #144]	; (1386c <_i2c_master_wait_for_bus+0xfc>)
   137dc:	9000      	str	r0, [sp, #0]
   137de:	4828      	ldr	r0, [pc, #160]	; (13880 <_i2c_master_wait_for_bus+0x110>)
   137e0:	9001      	str	r0, [sp, #4]
   137e2:	1c08      	adds	r0, r1, #0
   137e4:	2101      	movs	r1, #1
   137e6:	4c23      	ldr	r4, [pc, #140]	; (13874 <_i2c_master_wait_for_bus+0x104>)
   137e8:	47a0      	blx	r4
   137ea:	e00b      	b.n	13804 <_i2c_master_wait_for_bus+0x94>
   137ec:	687b      	ldr	r3, [r7, #4]
   137ee:	681b      	ldr	r3, [r3, #0]
   137f0:	2b00      	cmp	r3, #0
   137f2:	d107      	bne.n	13804 <_i2c_master_wait_for_bus+0x94>
   137f4:	4820      	ldr	r0, [pc, #128]	; (13878 <_i2c_master_wait_for_bus+0x108>)
   137f6:	4922      	ldr	r1, [pc, #136]	; (13880 <_i2c_master_wait_for_bus+0x110>)
   137f8:	4a1b      	ldr	r2, [pc, #108]	; (13868 <_i2c_master_wait_for_bus+0xf8>)
   137fa:	23ac      	movs	r3, #172	; 0xac
   137fc:	33ff      	adds	r3, #255	; 0xff
   137fe:	4c1f      	ldr	r4, [pc, #124]	; (1387c <_i2c_master_wait_for_bus+0x10c>)
   13800:	47a0      	blx	r4
   13802:	e7fe      	b.n	13802 <_i2c_master_wait_for_bus+0x92>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13804:	687b      	ldr	r3, [r7, #4]
   13806:	681b      	ldr	r3, [r3, #0]
   13808:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   1380a:	1c3b      	adds	r3, r7, #0
   1380c:	330e      	adds	r3, #14
   1380e:	2200      	movs	r2, #0
   13810:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   13812:	e00f      	b.n	13834 <_i2c_master_wait_for_bus+0xc4>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   13814:	1c3b      	adds	r3, r7, #0
   13816:	330e      	adds	r3, #14
   13818:	1c3a      	adds	r2, r7, #0
   1381a:	320e      	adds	r2, #14
   1381c:	8812      	ldrh	r2, [r2, #0]
   1381e:	3201      	adds	r2, #1
   13820:	801a      	strh	r2, [r3, #0]
   13822:	687b      	ldr	r3, [r7, #4]
   13824:	88db      	ldrh	r3, [r3, #6]
   13826:	1c3a      	adds	r2, r7, #0
   13828:	320e      	adds	r2, #14
   1382a:	8812      	ldrh	r2, [r2, #0]
   1382c:	429a      	cmp	r2, r3
   1382e:	d301      	bcc.n	13834 <_i2c_master_wait_for_bus+0xc4>
			return STATUS_ERR_TIMEOUT;
   13830:	2312      	movs	r3, #18
   13832:	e012      	b.n	1385a <_i2c_master_wait_for_bus+0xea>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   13834:	68bb      	ldr	r3, [r7, #8]
   13836:	68db      	ldr	r3, [r3, #12]
   13838:	021b      	lsls	r3, r3, #8
   1383a:	0e1b      	lsrs	r3, r3, #24
   1383c:	b2db      	uxtb	r3, r3
   1383e:	1c1a      	adds	r2, r3, #0
   13840:	2301      	movs	r3, #1
   13842:	4013      	ands	r3, r2
   13844:	d108      	bne.n	13858 <_i2c_master_wait_for_bus+0xe8>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   13846:	68bb      	ldr	r3, [r7, #8]
   13848:	68db      	ldr	r3, [r3, #12]
   1384a:	021b      	lsls	r3, r3, #8
   1384c:	0e1b      	lsrs	r3, r3, #24
   1384e:	b2db      	uxtb	r3, r3
   13850:	1c1a      	adds	r2, r3, #0
   13852:	2302      	movs	r3, #2
   13854:	4013      	ands	r3, r2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   13856:	d0dd      	beq.n	13814 <_i2c_master_wait_for_bus+0xa4>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
   13858:	2300      	movs	r3, #0
}
   1385a:	1c18      	adds	r0, r3, #0
   1385c:	46bd      	mov	sp, r7
   1385e:	b005      	add	sp, #20
   13860:	bd90      	pop	{r4, r7, pc}
   13862:	46c0      	nop			; (mov r8, r8)
   13864:	00012bed 	.word	0x00012bed
   13868:	000263f8 	.word	0x000263f8
   1386c:	00026308 	.word	0x00026308
   13870:	000263e4 	.word	0x000263e4
   13874:	000106e9 	.word	0x000106e9
   13878:	00026328 	.word	0x00026328
   1387c:	0001b62d 	.word	0x0001b62d
   13880:	000263ec 	.word	0x000263ec

00013884 <_i2c_master_read>:
 *
 */
static enum status_code _i2c_master_read(
		struct i2c_master_module *const module,
		struct i2c_packet *const packet)
{
   13884:	b590      	push	{r4, r7, lr}
   13886:	b089      	sub	sp, #36	; 0x24
   13888:	af02      	add	r7, sp, #8
   1388a:	6078      	str	r0, [r7, #4]
   1388c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
   1388e:	4b81      	ldr	r3, [pc, #516]	; (13a94 <_i2c_master_read+0x210>)
   13890:	4798      	blx	r3
   13892:	1c03      	adds	r3, r0, #0
   13894:	2b00      	cmp	r3, #0
   13896:	d011      	beq.n	138bc <_i2c_master_read+0x38>
   13898:	687b      	ldr	r3, [r7, #4]
   1389a:	2b00      	cmp	r3, #0
   1389c:	d119      	bne.n	138d2 <_i2c_master_read+0x4e>
   1389e:	4b7d      	ldr	r3, [pc, #500]	; (13a94 <_i2c_master_read+0x210>)
   138a0:	4798      	blx	r3
   138a2:	1c01      	adds	r1, r0, #0
   138a4:	4a7c      	ldr	r2, [pc, #496]	; (13a98 <_i2c_master_read+0x214>)
   138a6:	23d4      	movs	r3, #212	; 0xd4
   138a8:	33ff      	adds	r3, #255	; 0xff
   138aa:	487c      	ldr	r0, [pc, #496]	; (13a9c <_i2c_master_read+0x218>)
   138ac:	9000      	str	r0, [sp, #0]
   138ae:	487c      	ldr	r0, [pc, #496]	; (13aa0 <_i2c_master_read+0x21c>)
   138b0:	9001      	str	r0, [sp, #4]
   138b2:	1c08      	adds	r0, r1, #0
   138b4:	2101      	movs	r1, #1
   138b6:	4c7b      	ldr	r4, [pc, #492]	; (13aa4 <_i2c_master_read+0x220>)
   138b8:	47a0      	blx	r4
   138ba:	e00a      	b.n	138d2 <_i2c_master_read+0x4e>
   138bc:	687b      	ldr	r3, [r7, #4]
   138be:	2b00      	cmp	r3, #0
   138c0:	d107      	bne.n	138d2 <_i2c_master_read+0x4e>
   138c2:	4879      	ldr	r0, [pc, #484]	; (13aa8 <_i2c_master_read+0x224>)
   138c4:	4976      	ldr	r1, [pc, #472]	; (13aa0 <_i2c_master_read+0x21c>)
   138c6:	4a74      	ldr	r2, [pc, #464]	; (13a98 <_i2c_master_read+0x214>)
   138c8:	23d4      	movs	r3, #212	; 0xd4
   138ca:	33ff      	adds	r3, #255	; 0xff
   138cc:	4c77      	ldr	r4, [pc, #476]	; (13aac <_i2c_master_read+0x228>)
   138ce:	47a0      	blx	r4
   138d0:	e7fe      	b.n	138d0 <_i2c_master_read+0x4c>
	Assert(module->hw);
   138d2:	4b70      	ldr	r3, [pc, #448]	; (13a94 <_i2c_master_read+0x210>)
   138d4:	4798      	blx	r3
   138d6:	1c03      	adds	r3, r0, #0
   138d8:	2b00      	cmp	r3, #0
   138da:	d012      	beq.n	13902 <_i2c_master_read+0x7e>
   138dc:	687b      	ldr	r3, [r7, #4]
   138de:	681b      	ldr	r3, [r3, #0]
   138e0:	2b00      	cmp	r3, #0
   138e2:	d11a      	bne.n	1391a <_i2c_master_read+0x96>
   138e4:	4b6b      	ldr	r3, [pc, #428]	; (13a94 <_i2c_master_read+0x210>)
   138e6:	4798      	blx	r3
   138e8:	1c01      	adds	r1, r0, #0
   138ea:	4a6b      	ldr	r2, [pc, #428]	; (13a98 <_i2c_master_read+0x214>)
   138ec:	23ea      	movs	r3, #234	; 0xea
   138ee:	005b      	lsls	r3, r3, #1
   138f0:	486a      	ldr	r0, [pc, #424]	; (13a9c <_i2c_master_read+0x218>)
   138f2:	9000      	str	r0, [sp, #0]
   138f4:	486e      	ldr	r0, [pc, #440]	; (13ab0 <_i2c_master_read+0x22c>)
   138f6:	9001      	str	r0, [sp, #4]
   138f8:	1c08      	adds	r0, r1, #0
   138fa:	2101      	movs	r1, #1
   138fc:	4c69      	ldr	r4, [pc, #420]	; (13aa4 <_i2c_master_read+0x220>)
   138fe:	47a0      	blx	r4
   13900:	e00b      	b.n	1391a <_i2c_master_read+0x96>
   13902:	687b      	ldr	r3, [r7, #4]
   13904:	681b      	ldr	r3, [r3, #0]
   13906:	2b00      	cmp	r3, #0
   13908:	d107      	bne.n	1391a <_i2c_master_read+0x96>
   1390a:	4867      	ldr	r0, [pc, #412]	; (13aa8 <_i2c_master_read+0x224>)
   1390c:	4968      	ldr	r1, [pc, #416]	; (13ab0 <_i2c_master_read+0x22c>)
   1390e:	4a62      	ldr	r2, [pc, #392]	; (13a98 <_i2c_master_read+0x214>)
   13910:	23ea      	movs	r3, #234	; 0xea
   13912:	005b      	lsls	r3, r3, #1
   13914:	4c65      	ldr	r4, [pc, #404]	; (13aac <_i2c_master_read+0x228>)
   13916:	47a0      	blx	r4
   13918:	e7fe      	b.n	13918 <_i2c_master_read+0x94>
	Assert(packet);
   1391a:	4b5e      	ldr	r3, [pc, #376]	; (13a94 <_i2c_master_read+0x210>)
   1391c:	4798      	blx	r3
   1391e:	1c03      	adds	r3, r0, #0
   13920:	2b00      	cmp	r3, #0
   13922:	d011      	beq.n	13948 <_i2c_master_read+0xc4>
   13924:	683b      	ldr	r3, [r7, #0]
   13926:	2b00      	cmp	r3, #0
   13928:	d119      	bne.n	1395e <_i2c_master_read+0xda>
   1392a:	4b5a      	ldr	r3, [pc, #360]	; (13a94 <_i2c_master_read+0x210>)
   1392c:	4798      	blx	r3
   1392e:	1c01      	adds	r1, r0, #0
   13930:	4a59      	ldr	r2, [pc, #356]	; (13a98 <_i2c_master_read+0x214>)
   13932:	23d6      	movs	r3, #214	; 0xd6
   13934:	33ff      	adds	r3, #255	; 0xff
   13936:	4859      	ldr	r0, [pc, #356]	; (13a9c <_i2c_master_read+0x218>)
   13938:	9000      	str	r0, [sp, #0]
   1393a:	485e      	ldr	r0, [pc, #376]	; (13ab4 <_i2c_master_read+0x230>)
   1393c:	9001      	str	r0, [sp, #4]
   1393e:	1c08      	adds	r0, r1, #0
   13940:	2101      	movs	r1, #1
   13942:	4c58      	ldr	r4, [pc, #352]	; (13aa4 <_i2c_master_read+0x220>)
   13944:	47a0      	blx	r4
   13946:	e00a      	b.n	1395e <_i2c_master_read+0xda>
   13948:	683b      	ldr	r3, [r7, #0]
   1394a:	2b00      	cmp	r3, #0
   1394c:	d107      	bne.n	1395e <_i2c_master_read+0xda>
   1394e:	4856      	ldr	r0, [pc, #344]	; (13aa8 <_i2c_master_read+0x224>)
   13950:	4958      	ldr	r1, [pc, #352]	; (13ab4 <_i2c_master_read+0x230>)
   13952:	4a51      	ldr	r2, [pc, #324]	; (13a98 <_i2c_master_read+0x214>)
   13954:	23d6      	movs	r3, #214	; 0xd6
   13956:	33ff      	adds	r3, #255	; 0xff
   13958:	4c54      	ldr	r4, [pc, #336]	; (13aac <_i2c_master_read+0x228>)
   1395a:	47a0      	blx	r4
   1395c:	e7fe      	b.n	1395c <_i2c_master_read+0xd8>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1395e:	687b      	ldr	r3, [r7, #4]
   13960:	681b      	ldr	r3, [r3, #0]
   13962:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
   13964:	1c3b      	adds	r3, r7, #0
   13966:	3314      	adds	r3, #20
   13968:	683a      	ldr	r2, [r7, #0]
   1396a:	8852      	ldrh	r2, [r2, #2]
   1396c:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
   1396e:	1c3b      	adds	r3, r7, #0
   13970:	3312      	adds	r3, #18
   13972:	2200      	movs	r2, #0
   13974:	801a      	strh	r2, [r3, #0]

	/* Set address and direction bit. Will send start command on bus. */
	i2c_module->ADDR.reg = (packet->address << 1) | _I2C_TRANSFER_READ;
   13976:	683b      	ldr	r3, [r7, #0]
   13978:	781b      	ldrb	r3, [r3, #0]
   1397a:	005b      	lsls	r3, r3, #1
   1397c:	b2db      	uxtb	r3, r3
   1397e:	2201      	movs	r2, #1
   13980:	4313      	orrs	r3, r2
   13982:	b2db      	uxtb	r3, r3
   13984:	b2da      	uxtb	r2, r3
   13986:	68fb      	ldr	r3, [r7, #12]
   13988:	751a      	strb	r2, [r3, #20]

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   1398a:	1c3c      	adds	r4, r7, #0
   1398c:	3417      	adds	r4, #23
   1398e:	687b      	ldr	r3, [r7, #4]
   13990:	1c18      	adds	r0, r3, #0
   13992:	4b49      	ldr	r3, [pc, #292]	; (13ab8 <_i2c_master_read+0x234>)
   13994:	4798      	blx	r3
   13996:	1c03      	adds	r3, r0, #0
   13998:	7023      	strb	r3, [r4, #0]

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   1399a:	68fb      	ldr	r3, [r7, #12]
   1399c:	685a      	ldr	r2, [r3, #4]
   1399e:	4b47      	ldr	r3, [pc, #284]	; (13abc <_i2c_master_read+0x238>)
   139a0:	401a      	ands	r2, r3
   139a2:	68fb      	ldr	r3, [r7, #12]
   139a4:	605a      	str	r2, [r3, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
   139a6:	1c3b      	adds	r3, r7, #0
   139a8:	3317      	adds	r3, #23
   139aa:	781b      	ldrb	r3, [r3, #0]
   139ac:	2b00      	cmp	r3, #0
   139ae:	d107      	bne.n	139c0 <_i2c_master_read+0x13c>
		tmp_status = _i2c_master_address_response(module);
   139b0:	1c3c      	adds	r4, r7, #0
   139b2:	3417      	adds	r4, #23
   139b4:	687b      	ldr	r3, [r7, #4]
   139b6:	1c18      	adds	r0, r3, #0
   139b8:	4b41      	ldr	r3, [pc, #260]	; (13ac0 <_i2c_master_read+0x23c>)
   139ba:	4798      	blx	r3
   139bc:	1c03      	adds	r3, r0, #0
   139be:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
   139c0:	1c3b      	adds	r3, r7, #0
   139c2:	3317      	adds	r3, #23
   139c4:	781b      	ldrb	r3, [r3, #0]
   139c6:	2b00      	cmp	r3, #0
   139c8:	d15c      	bne.n	13a84 <_i2c_master_read+0x200>
		/* Read data buffer. */
		while (tmp_data_length--) {
   139ca:	e035      	b.n	13a38 <_i2c_master_read+0x1b4>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
   139cc:	68fb      	ldr	r3, [r7, #12]
   139ce:	691b      	ldr	r3, [r3, #16]
   139d0:	b29b      	uxth	r3, r3
   139d2:	1c1a      	adds	r2, r3, #0
   139d4:	2320      	movs	r3, #32
   139d6:	4013      	ands	r3, r2
   139d8:	d101      	bne.n	139de <_i2c_master_read+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
   139da:	2341      	movs	r3, #65	; 0x41
   139dc:	e055      	b.n	13a8a <_i2c_master_read+0x206>
			}

			if (tmp_data_length == 0) {
   139de:	1c3b      	adds	r3, r7, #0
   139e0:	3314      	adds	r3, #20
   139e2:	881b      	ldrh	r3, [r3, #0]
   139e4:	2b00      	cmp	r3, #0
   139e6:	d107      	bne.n	139f8 <_i2c_master_read+0x174>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   139e8:	68fb      	ldr	r3, [r7, #12]
   139ea:	685b      	ldr	r3, [r3, #4]
   139ec:	2280      	movs	r2, #128	; 0x80
   139ee:	02d2      	lsls	r2, r2, #11
   139f0:	431a      	orrs	r2, r3
   139f2:	68fb      	ldr	r3, [r7, #12]
   139f4:	605a      	str	r2, [r3, #4]
   139f6:	e019      	b.n	13a2c <_i2c_master_read+0x1a8>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
   139f8:	687b      	ldr	r3, [r7, #4]
   139fa:	1c18      	adds	r0, r3, #0
   139fc:	4b31      	ldr	r3, [pc, #196]	; (13ac4 <_i2c_master_read+0x240>)
   139fe:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
   13a00:	683b      	ldr	r3, [r7, #0]
   13a02:	685a      	ldr	r2, [r3, #4]
   13a04:	1c3b      	adds	r3, r7, #0
   13a06:	3312      	adds	r3, #18
   13a08:	881b      	ldrh	r3, [r3, #0]
   13a0a:	1c39      	adds	r1, r7, #0
   13a0c:	3112      	adds	r1, #18
   13a0e:	1c58      	adds	r0, r3, #1
   13a10:	8008      	strh	r0, [r1, #0]
   13a12:	18d2      	adds	r2, r2, r3
   13a14:	68fb      	ldr	r3, [r7, #12]
   13a16:	699b      	ldr	r3, [r3, #24]
   13a18:	b2db      	uxtb	r3, r3
   13a1a:	7013      	strb	r3, [r2, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
   13a1c:	1c3c      	adds	r4, r7, #0
   13a1e:	3417      	adds	r4, #23
   13a20:	687b      	ldr	r3, [r7, #4]
   13a22:	1c18      	adds	r0, r3, #0
   13a24:	4b24      	ldr	r3, [pc, #144]	; (13ab8 <_i2c_master_read+0x234>)
   13a26:	4798      	blx	r3
   13a28:	1c03      	adds	r3, r0, #0
   13a2a:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
   13a2c:	1c3b      	adds	r3, r7, #0
   13a2e:	3317      	adds	r3, #23
   13a30:	781b      	ldrb	r3, [r3, #0]
   13a32:	2b00      	cmp	r3, #0
   13a34:	d000      	beq.n	13a38 <_i2c_master_read+0x1b4>
				break;
   13a36:	e008      	b.n	13a4a <_i2c_master_read+0x1c6>
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
   13a38:	1c3b      	adds	r3, r7, #0
   13a3a:	3314      	adds	r3, #20
   13a3c:	881b      	ldrh	r3, [r3, #0]
   13a3e:	1c3a      	adds	r2, r7, #0
   13a40:	3214      	adds	r2, #20
   13a42:	1e59      	subs	r1, r3, #1
   13a44:	8011      	strh	r1, [r2, #0]
   13a46:	2b00      	cmp	r3, #0
   13a48:	d1c0      	bne.n	139cc <_i2c_master_read+0x148>
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
   13a4a:	687b      	ldr	r3, [r7, #4]
   13a4c:	7a1b      	ldrb	r3, [r3, #8]
   13a4e:	2b00      	cmp	r3, #0
   13a50:	d00a      	beq.n	13a68 <_i2c_master_read+0x1e4>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
   13a52:	687b      	ldr	r3, [r7, #4]
   13a54:	1c18      	adds	r0, r3, #0
   13a56:	4b1b      	ldr	r3, [pc, #108]	; (13ac4 <_i2c_master_read+0x240>)
   13a58:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13a5a:	68fb      	ldr	r3, [r7, #12]
   13a5c:	685b      	ldr	r3, [r3, #4]
   13a5e:	22c0      	movs	r2, #192	; 0xc0
   13a60:	0292      	lsls	r2, r2, #10
   13a62:	431a      	orrs	r2, r3
   13a64:	68fb      	ldr	r3, [r7, #12]
   13a66:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
   13a68:	687b      	ldr	r3, [r7, #4]
   13a6a:	1c18      	adds	r0, r3, #0
   13a6c:	4b15      	ldr	r3, [pc, #84]	; (13ac4 <_i2c_master_read+0x240>)
   13a6e:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
   13a70:	683b      	ldr	r3, [r7, #0]
   13a72:	685a      	ldr	r2, [r3, #4]
   13a74:	1c3b      	adds	r3, r7, #0
   13a76:	3312      	adds	r3, #18
   13a78:	881b      	ldrh	r3, [r3, #0]
   13a7a:	18d2      	adds	r2, r2, r3
   13a7c:	68fb      	ldr	r3, [r7, #12]
   13a7e:	699b      	ldr	r3, [r3, #24]
   13a80:	b2db      	uxtb	r3, r3
   13a82:	7013      	strb	r3, [r2, #0]
	}

	return tmp_status;
   13a84:	1c3b      	adds	r3, r7, #0
   13a86:	3317      	adds	r3, #23
   13a88:	781b      	ldrb	r3, [r3, #0]
}
   13a8a:	1c18      	adds	r0, r3, #0
   13a8c:	46bd      	mov	sp, r7
   13a8e:	b007      	add	sp, #28
   13a90:	bd90      	pop	{r4, r7, pc}
   13a92:	46c0      	nop			; (mov r8, r8)
   13a94:	00012bed 	.word	0x00012bed
   13a98:	000263f8 	.word	0x000263f8
   13a9c:	00026308 	.word	0x00026308
   13aa0:	000263e4 	.word	0x000263e4
   13aa4:	000106e9 	.word	0x000106e9
   13aa8:	00026328 	.word	0x00026328
   13aac:	0001b62d 	.word	0x0001b62d
   13ab0:	000263ec 	.word	0x000263ec
   13ab4:	0002642c 	.word	0x0002642c
   13ab8:	00013771 	.word	0x00013771
   13abc:	fffbffff 	.word	0xfffbffff
   13ac0:	00013661 	.word	0x00013661
   13ac4:	00012ed9 	.word	0x00012ed9

00013ac8 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_packet *const packet)
{
   13ac8:	b590      	push	{r4, r7, lr}
   13aca:	b085      	sub	sp, #20
   13acc:	af02      	add	r7, sp, #8
   13ace:	6078      	str	r0, [r7, #4]
   13ad0:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
   13ad2:	4b38      	ldr	r3, [pc, #224]	; (13bb4 <i2c_master_read_packet_wait+0xec>)
   13ad4:	4798      	blx	r3
   13ad6:	1c03      	adds	r3, r0, #0
   13ad8:	2b00      	cmp	r3, #0
   13ada:	d010      	beq.n	13afe <i2c_master_read_packet_wait+0x36>
   13adc:	687b      	ldr	r3, [r7, #4]
   13ade:	2b00      	cmp	r3, #0
   13ae0:	d117      	bne.n	13b12 <i2c_master_read_packet_wait+0x4a>
   13ae2:	4b34      	ldr	r3, [pc, #208]	; (13bb4 <i2c_master_read_packet_wait+0xec>)
   13ae4:	4798      	blx	r3
   13ae6:	1c01      	adds	r1, r0, #0
   13ae8:	4a33      	ldr	r2, [pc, #204]	; (13bb8 <i2c_master_read_packet_wait+0xf0>)
   13aea:	4b34      	ldr	r3, [pc, #208]	; (13bbc <i2c_master_read_packet_wait+0xf4>)
   13aec:	4834      	ldr	r0, [pc, #208]	; (13bc0 <i2c_master_read_packet_wait+0xf8>)
   13aee:	9000      	str	r0, [sp, #0]
   13af0:	4834      	ldr	r0, [pc, #208]	; (13bc4 <i2c_master_read_packet_wait+0xfc>)
   13af2:	9001      	str	r0, [sp, #4]
   13af4:	1c08      	adds	r0, r1, #0
   13af6:	2101      	movs	r1, #1
   13af8:	4c33      	ldr	r4, [pc, #204]	; (13bc8 <i2c_master_read_packet_wait+0x100>)
   13afa:	47a0      	blx	r4
   13afc:	e009      	b.n	13b12 <i2c_master_read_packet_wait+0x4a>
   13afe:	687b      	ldr	r3, [r7, #4]
   13b00:	2b00      	cmp	r3, #0
   13b02:	d106      	bne.n	13b12 <i2c_master_read_packet_wait+0x4a>
   13b04:	4831      	ldr	r0, [pc, #196]	; (13bcc <i2c_master_read_packet_wait+0x104>)
   13b06:	492f      	ldr	r1, [pc, #188]	; (13bc4 <i2c_master_read_packet_wait+0xfc>)
   13b08:	4a2b      	ldr	r2, [pc, #172]	; (13bb8 <i2c_master_read_packet_wait+0xf0>)
   13b0a:	4b2c      	ldr	r3, [pc, #176]	; (13bbc <i2c_master_read_packet_wait+0xf4>)
   13b0c:	4c30      	ldr	r4, [pc, #192]	; (13bd0 <i2c_master_read_packet_wait+0x108>)
   13b0e:	47a0      	blx	r4
   13b10:	e7fe      	b.n	13b10 <i2c_master_read_packet_wait+0x48>
	Assert(module->hw);
   13b12:	4b28      	ldr	r3, [pc, #160]	; (13bb4 <i2c_master_read_packet_wait+0xec>)
   13b14:	4798      	blx	r3
   13b16:	1c03      	adds	r3, r0, #0
   13b18:	2b00      	cmp	r3, #0
   13b1a:	d011      	beq.n	13b40 <i2c_master_read_packet_wait+0x78>
   13b1c:	687b      	ldr	r3, [r7, #4]
   13b1e:	681b      	ldr	r3, [r3, #0]
   13b20:	2b00      	cmp	r3, #0
   13b22:	d118      	bne.n	13b56 <i2c_master_read_packet_wait+0x8e>
   13b24:	4b23      	ldr	r3, [pc, #140]	; (13bb4 <i2c_master_read_packet_wait+0xec>)
   13b26:	4798      	blx	r3
   13b28:	1c01      	adds	r1, r0, #0
   13b2a:	4a23      	ldr	r2, [pc, #140]	; (13bb8 <i2c_master_read_packet_wait+0xf0>)
   13b2c:	4b29      	ldr	r3, [pc, #164]	; (13bd4 <i2c_master_read_packet_wait+0x10c>)
   13b2e:	4824      	ldr	r0, [pc, #144]	; (13bc0 <i2c_master_read_packet_wait+0xf8>)
   13b30:	9000      	str	r0, [sp, #0]
   13b32:	4829      	ldr	r0, [pc, #164]	; (13bd8 <i2c_master_read_packet_wait+0x110>)
   13b34:	9001      	str	r0, [sp, #4]
   13b36:	1c08      	adds	r0, r1, #0
   13b38:	2101      	movs	r1, #1
   13b3a:	4c23      	ldr	r4, [pc, #140]	; (13bc8 <i2c_master_read_packet_wait+0x100>)
   13b3c:	47a0      	blx	r4
   13b3e:	e00a      	b.n	13b56 <i2c_master_read_packet_wait+0x8e>
   13b40:	687b      	ldr	r3, [r7, #4]
   13b42:	681b      	ldr	r3, [r3, #0]
   13b44:	2b00      	cmp	r3, #0
   13b46:	d106      	bne.n	13b56 <i2c_master_read_packet_wait+0x8e>
   13b48:	4820      	ldr	r0, [pc, #128]	; (13bcc <i2c_master_read_packet_wait+0x104>)
   13b4a:	4923      	ldr	r1, [pc, #140]	; (13bd8 <i2c_master_read_packet_wait+0x110>)
   13b4c:	4a1a      	ldr	r2, [pc, #104]	; (13bb8 <i2c_master_read_packet_wait+0xf0>)
   13b4e:	4b21      	ldr	r3, [pc, #132]	; (13bd4 <i2c_master_read_packet_wait+0x10c>)
   13b50:	4c1f      	ldr	r4, [pc, #124]	; (13bd0 <i2c_master_read_packet_wait+0x108>)
   13b52:	47a0      	blx	r4
   13b54:	e7fe      	b.n	13b54 <i2c_master_read_packet_wait+0x8c>
	Assert(packet);
   13b56:	4b17      	ldr	r3, [pc, #92]	; (13bb4 <i2c_master_read_packet_wait+0xec>)
   13b58:	4798      	blx	r3
   13b5a:	1c03      	adds	r3, r0, #0
   13b5c:	2b00      	cmp	r3, #0
   13b5e:	d010      	beq.n	13b82 <i2c_master_read_packet_wait+0xba>
   13b60:	683b      	ldr	r3, [r7, #0]
   13b62:	2b00      	cmp	r3, #0
   13b64:	d117      	bne.n	13b96 <i2c_master_read_packet_wait+0xce>
   13b66:	4b13      	ldr	r3, [pc, #76]	; (13bb4 <i2c_master_read_packet_wait+0xec>)
   13b68:	4798      	blx	r3
   13b6a:	1c01      	adds	r1, r0, #0
   13b6c:	4a12      	ldr	r2, [pc, #72]	; (13bb8 <i2c_master_read_packet_wait+0xf0>)
   13b6e:	4b1b      	ldr	r3, [pc, #108]	; (13bdc <i2c_master_read_packet_wait+0x114>)
   13b70:	4813      	ldr	r0, [pc, #76]	; (13bc0 <i2c_master_read_packet_wait+0xf8>)
   13b72:	9000      	str	r0, [sp, #0]
   13b74:	481a      	ldr	r0, [pc, #104]	; (13be0 <i2c_master_read_packet_wait+0x118>)
   13b76:	9001      	str	r0, [sp, #4]
   13b78:	1c08      	adds	r0, r1, #0
   13b7a:	2101      	movs	r1, #1
   13b7c:	4c12      	ldr	r4, [pc, #72]	; (13bc8 <i2c_master_read_packet_wait+0x100>)
   13b7e:	47a0      	blx	r4
   13b80:	e009      	b.n	13b96 <i2c_master_read_packet_wait+0xce>
   13b82:	683b      	ldr	r3, [r7, #0]
   13b84:	2b00      	cmp	r3, #0
   13b86:	d106      	bne.n	13b96 <i2c_master_read_packet_wait+0xce>
   13b88:	4810      	ldr	r0, [pc, #64]	; (13bcc <i2c_master_read_packet_wait+0x104>)
   13b8a:	4915      	ldr	r1, [pc, #84]	; (13be0 <i2c_master_read_packet_wait+0x118>)
   13b8c:	4a0a      	ldr	r2, [pc, #40]	; (13bb8 <i2c_master_read_packet_wait+0xf0>)
   13b8e:	4b13      	ldr	r3, [pc, #76]	; (13bdc <i2c_master_read_packet_wait+0x114>)
   13b90:	4c0f      	ldr	r4, [pc, #60]	; (13bd0 <i2c_master_read_packet_wait+0x108>)
   13b92:	47a0      	blx	r4
   13b94:	e7fe      	b.n	13b94 <i2c_master_read_packet_wait+0xcc>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
   13b96:	687b      	ldr	r3, [r7, #4]
   13b98:	2201      	movs	r2, #1
   13b9a:	721a      	strb	r2, [r3, #8]

	return _i2c_master_read(module, packet);
   13b9c:	687a      	ldr	r2, [r7, #4]
   13b9e:	683b      	ldr	r3, [r7, #0]
   13ba0:	1c10      	adds	r0, r2, #0
   13ba2:	1c19      	adds	r1, r3, #0
   13ba4:	4b0f      	ldr	r3, [pc, #60]	; (13be4 <i2c_master_read_packet_wait+0x11c>)
   13ba6:	4798      	blx	r3
   13ba8:	1c03      	adds	r3, r0, #0
}
   13baa:	1c18      	adds	r0, r3, #0
   13bac:	46bd      	mov	sp, r7
   13bae:	b003      	add	sp, #12
   13bb0:	bd90      	pop	{r4, r7, pc}
   13bb2:	46c0      	nop			; (mov r8, r8)
   13bb4:	00012bed 	.word	0x00012bed
   13bb8:	000263f8 	.word	0x000263f8
   13bbc:	00000231 	.word	0x00000231
   13bc0:	00026308 	.word	0x00026308
   13bc4:	000263e4 	.word	0x000263e4
   13bc8:	000106e9 	.word	0x000106e9
   13bcc:	00026328 	.word	0x00026328
   13bd0:	0001b62d 	.word	0x0001b62d
   13bd4:	00000232 	.word	0x00000232
   13bd8:	000263ec 	.word	0x000263ec
   13bdc:	00000233 	.word	0x00000233
   13be0:	0002642c 	.word	0x0002642c
   13be4:	00013885 	.word	0x00013885

00013be8 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_packet *const packet)
{
   13be8:	b590      	push	{r4, r7, lr}
   13bea:	b087      	sub	sp, #28
   13bec:	af00      	add	r7, sp, #0
   13bee:	6078      	str	r0, [r7, #4]
   13bf0:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13bf2:	687b      	ldr	r3, [r7, #4]
   13bf4:	681b      	ldr	r3, [r3, #0]
   13bf6:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
   13bf8:	1c3b      	adds	r3, r7, #0
   13bfa:	3314      	adds	r3, #20
   13bfc:	683a      	ldr	r2, [r7, #0]
   13bfe:	8852      	ldrh	r2, [r2, #2]
   13c00:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
   13c02:	687b      	ldr	r3, [r7, #4]
   13c04:	1c18      	adds	r0, r3, #0
   13c06:	4b3d      	ldr	r3, [pc, #244]	; (13cfc <_i2c_master_write_packet+0x114>)
   13c08:	4798      	blx	r3

	/* Set address and direction bit. Will send start command on bus. */
	i2c_module->ADDR.reg = (packet->address << 1) | _I2C_TRANSFER_WRITE;
   13c0a:	683b      	ldr	r3, [r7, #0]
   13c0c:	781b      	ldrb	r3, [r3, #0]
   13c0e:	18db      	adds	r3, r3, r3
   13c10:	b2da      	uxtb	r2, r3
   13c12:	68fb      	ldr	r3, [r7, #12]
   13c14:	751a      	strb	r2, [r3, #20]

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   13c16:	1c3c      	adds	r4, r7, #0
   13c18:	3417      	adds	r4, #23
   13c1a:	687b      	ldr	r3, [r7, #4]
   13c1c:	1c18      	adds	r0, r3, #0
   13c1e:	4b38      	ldr	r3, [pc, #224]	; (13d00 <_i2c_master_write_packet+0x118>)
   13c20:	4798      	blx	r3
   13c22:	1c03      	adds	r3, r0, #0
   13c24:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
   13c26:	1c3b      	adds	r3, r7, #0
   13c28:	3317      	adds	r3, #23
   13c2a:	781b      	ldrb	r3, [r3, #0]
   13c2c:	2b00      	cmp	r3, #0
   13c2e:	d107      	bne.n	13c40 <_i2c_master_write_packet+0x58>
		tmp_status = _i2c_master_address_response(module);
   13c30:	1c3c      	adds	r4, r7, #0
   13c32:	3417      	adds	r4, #23
   13c34:	687b      	ldr	r3, [r7, #4]
   13c36:	1c18      	adds	r0, r3, #0
   13c38:	4b32      	ldr	r3, [pc, #200]	; (13d04 <_i2c_master_write_packet+0x11c>)
   13c3a:	4798      	blx	r3
   13c3c:	1c03      	adds	r3, r0, #0
   13c3e:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
   13c40:	1c3b      	adds	r3, r7, #0
   13c42:	3317      	adds	r3, #23
   13c44:	781b      	ldrb	r3, [r3, #0]
   13c46:	2b00      	cmp	r3, #0
   13c48:	d150      	bne.n	13cec <_i2c_master_write_packet+0x104>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
   13c4a:	1c3b      	adds	r3, r7, #0
   13c4c:	3312      	adds	r3, #18
   13c4e:	2200      	movs	r2, #0
   13c50:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
   13c52:	e033      	b.n	13cbc <_i2c_master_write_packet+0xd4>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
   13c54:	68fb      	ldr	r3, [r7, #12]
   13c56:	691b      	ldr	r3, [r3, #16]
   13c58:	b29b      	uxth	r3, r3
   13c5a:	1c1a      	adds	r2, r3, #0
   13c5c:	2320      	movs	r3, #32
   13c5e:	4013      	ands	r3, r2
   13c60:	d101      	bne.n	13c66 <_i2c_master_write_packet+0x7e>
				return STATUS_ERR_PACKET_COLLISION;
   13c62:	2341      	movs	r3, #65	; 0x41
   13c64:	e045      	b.n	13cf2 <_i2c_master_write_packet+0x10a>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
   13c66:	687b      	ldr	r3, [r7, #4]
   13c68:	1c18      	adds	r0, r3, #0
   13c6a:	4b24      	ldr	r3, [pc, #144]	; (13cfc <_i2c_master_write_packet+0x114>)
   13c6c:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
   13c6e:	683b      	ldr	r3, [r7, #0]
   13c70:	685a      	ldr	r2, [r3, #4]
   13c72:	1c3b      	adds	r3, r7, #0
   13c74:	3312      	adds	r3, #18
   13c76:	881b      	ldrh	r3, [r3, #0]
   13c78:	1c39      	adds	r1, r7, #0
   13c7a:	3112      	adds	r1, #18
   13c7c:	1c58      	adds	r0, r3, #1
   13c7e:	8008      	strh	r0, [r1, #0]
   13c80:	18d3      	adds	r3, r2, r3
   13c82:	781a      	ldrb	r2, [r3, #0]
   13c84:	68fb      	ldr	r3, [r7, #12]
   13c86:	761a      	strb	r2, [r3, #24]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
   13c88:	1c3c      	adds	r4, r7, #0
   13c8a:	3417      	adds	r4, #23
   13c8c:	687b      	ldr	r3, [r7, #4]
   13c8e:	1c18      	adds	r0, r3, #0
   13c90:	4b1b      	ldr	r3, [pc, #108]	; (13d00 <_i2c_master_write_packet+0x118>)
   13c92:	4798      	blx	r3
   13c94:	1c03      	adds	r3, r0, #0
   13c96:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
   13c98:	1c3b      	adds	r3, r7, #0
   13c9a:	3317      	adds	r3, #23
   13c9c:	781b      	ldrb	r3, [r3, #0]
   13c9e:	2b00      	cmp	r3, #0
   13ca0:	d000      	beq.n	13ca4 <_i2c_master_write_packet+0xbc>
				break;
   13ca2:	e014      	b.n	13cce <_i2c_master_write_packet+0xe6>
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   13ca4:	68fb      	ldr	r3, [r7, #12]
   13ca6:	691b      	ldr	r3, [r3, #16]
   13ca8:	b29b      	uxth	r3, r3
   13caa:	1c1a      	adds	r2, r3, #0
   13cac:	2304      	movs	r3, #4
   13cae:	4013      	ands	r3, r2
   13cb0:	d004      	beq.n	13cbc <_i2c_master_write_packet+0xd4>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
   13cb2:	1c3b      	adds	r3, r7, #0
   13cb4:	3317      	adds	r3, #23
   13cb6:	221e      	movs	r2, #30
   13cb8:	701a      	strb	r2, [r3, #0]
				break;
   13cba:	e008      	b.n	13cce <_i2c_master_write_packet+0xe6>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
   13cbc:	1c3b      	adds	r3, r7, #0
   13cbe:	3314      	adds	r3, #20
   13cc0:	881b      	ldrh	r3, [r3, #0]
   13cc2:	1c3a      	adds	r2, r7, #0
   13cc4:	3214      	adds	r2, #20
   13cc6:	1e59      	subs	r1, r3, #1
   13cc8:	8011      	strh	r1, [r2, #0]
   13cca:	2b00      	cmp	r3, #0
   13ccc:	d1c2      	bne.n	13c54 <_i2c_master_write_packet+0x6c>
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
   13cce:	687b      	ldr	r3, [r7, #4]
   13cd0:	7a1b      	ldrb	r3, [r3, #8]
   13cd2:	2b00      	cmp	r3, #0
   13cd4:	d00a      	beq.n	13cec <_i2c_master_write_packet+0x104>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
   13cd6:	687b      	ldr	r3, [r7, #4]
   13cd8:	1c18      	adds	r0, r3, #0
   13cda:	4b08      	ldr	r3, [pc, #32]	; (13cfc <_i2c_master_write_packet+0x114>)
   13cdc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13cde:	68fb      	ldr	r3, [r7, #12]
   13ce0:	685b      	ldr	r3, [r3, #4]
   13ce2:	22c0      	movs	r2, #192	; 0xc0
   13ce4:	0292      	lsls	r2, r2, #10
   13ce6:	431a      	orrs	r2, r3
   13ce8:	68fb      	ldr	r3, [r7, #12]
   13cea:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
   13cec:	1c3b      	adds	r3, r7, #0
   13cee:	3317      	adds	r3, #23
   13cf0:	781b      	ldrb	r3, [r3, #0]
}
   13cf2:	1c18      	adds	r0, r3, #0
   13cf4:	46bd      	mov	sp, r7
   13cf6:	b007      	add	sp, #28
   13cf8:	bd90      	pop	{r4, r7, pc}
   13cfa:	46c0      	nop			; (mov r8, r8)
   13cfc:	00012ed9 	.word	0x00012ed9
   13d00:	00013771 	.word	0x00013771
   13d04:	00013661 	.word	0x00013661

00013d08 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_packet *const packet)
{
   13d08:	b590      	push	{r4, r7, lr}
   13d0a:	b085      	sub	sp, #20
   13d0c:	af02      	add	r7, sp, #8
   13d0e:	6078      	str	r0, [r7, #4]
   13d10:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
   13d12:	4b39      	ldr	r3, [pc, #228]	; (13df8 <i2c_master_write_packet_wait+0xf0>)
   13d14:	4798      	blx	r3
   13d16:	1c03      	adds	r3, r0, #0
   13d18:	2b00      	cmp	r3, #0
   13d1a:	d010      	beq.n	13d3e <i2c_master_write_packet_wait+0x36>
   13d1c:	687b      	ldr	r3, [r7, #4]
   13d1e:	2b00      	cmp	r3, #0
   13d20:	d117      	bne.n	13d52 <i2c_master_write_packet_wait+0x4a>
   13d22:	4b35      	ldr	r3, [pc, #212]	; (13df8 <i2c_master_write_packet_wait+0xf0>)
   13d24:	4798      	blx	r3
   13d26:	1c01      	adds	r1, r0, #0
   13d28:	4a34      	ldr	r2, [pc, #208]	; (13dfc <i2c_master_write_packet_wait+0xf4>)
   13d2a:	4b35      	ldr	r3, [pc, #212]	; (13e00 <i2c_master_write_packet_wait+0xf8>)
   13d2c:	4835      	ldr	r0, [pc, #212]	; (13e04 <i2c_master_write_packet_wait+0xfc>)
   13d2e:	9000      	str	r0, [sp, #0]
   13d30:	4835      	ldr	r0, [pc, #212]	; (13e08 <i2c_master_write_packet_wait+0x100>)
   13d32:	9001      	str	r0, [sp, #4]
   13d34:	1c08      	adds	r0, r1, #0
   13d36:	2101      	movs	r1, #1
   13d38:	4c34      	ldr	r4, [pc, #208]	; (13e0c <i2c_master_write_packet_wait+0x104>)
   13d3a:	47a0      	blx	r4
   13d3c:	e009      	b.n	13d52 <i2c_master_write_packet_wait+0x4a>
   13d3e:	687b      	ldr	r3, [r7, #4]
   13d40:	2b00      	cmp	r3, #0
   13d42:	d106      	bne.n	13d52 <i2c_master_write_packet_wait+0x4a>
   13d44:	4832      	ldr	r0, [pc, #200]	; (13e10 <i2c_master_write_packet_wait+0x108>)
   13d46:	4930      	ldr	r1, [pc, #192]	; (13e08 <i2c_master_write_packet_wait+0x100>)
   13d48:	4a2c      	ldr	r2, [pc, #176]	; (13dfc <i2c_master_write_packet_wait+0xf4>)
   13d4a:	4b2d      	ldr	r3, [pc, #180]	; (13e00 <i2c_master_write_packet_wait+0xf8>)
   13d4c:	4c31      	ldr	r4, [pc, #196]	; (13e14 <i2c_master_write_packet_wait+0x10c>)
   13d4e:	47a0      	blx	r4
   13d50:	e7fe      	b.n	13d50 <i2c_master_write_packet_wait+0x48>
	Assert(module->hw);
   13d52:	4b29      	ldr	r3, [pc, #164]	; (13df8 <i2c_master_write_packet_wait+0xf0>)
   13d54:	4798      	blx	r3
   13d56:	1c03      	adds	r3, r0, #0
   13d58:	2b00      	cmp	r3, #0
   13d5a:	d012      	beq.n	13d82 <i2c_master_write_packet_wait+0x7a>
   13d5c:	687b      	ldr	r3, [r7, #4]
   13d5e:	681b      	ldr	r3, [r3, #0]
   13d60:	2b00      	cmp	r3, #0
   13d62:	d11a      	bne.n	13d9a <i2c_master_write_packet_wait+0x92>
   13d64:	4b24      	ldr	r3, [pc, #144]	; (13df8 <i2c_master_write_packet_wait+0xf0>)
   13d66:	4798      	blx	r3
   13d68:	1c01      	adds	r1, r0, #0
   13d6a:	4a24      	ldr	r2, [pc, #144]	; (13dfc <i2c_master_write_packet_wait+0xf4>)
   13d6c:	23b8      	movs	r3, #184	; 0xb8
   13d6e:	009b      	lsls	r3, r3, #2
   13d70:	4824      	ldr	r0, [pc, #144]	; (13e04 <i2c_master_write_packet_wait+0xfc>)
   13d72:	9000      	str	r0, [sp, #0]
   13d74:	4828      	ldr	r0, [pc, #160]	; (13e18 <i2c_master_write_packet_wait+0x110>)
   13d76:	9001      	str	r0, [sp, #4]
   13d78:	1c08      	adds	r0, r1, #0
   13d7a:	2101      	movs	r1, #1
   13d7c:	4c23      	ldr	r4, [pc, #140]	; (13e0c <i2c_master_write_packet_wait+0x104>)
   13d7e:	47a0      	blx	r4
   13d80:	e00b      	b.n	13d9a <i2c_master_write_packet_wait+0x92>
   13d82:	687b      	ldr	r3, [r7, #4]
   13d84:	681b      	ldr	r3, [r3, #0]
   13d86:	2b00      	cmp	r3, #0
   13d88:	d107      	bne.n	13d9a <i2c_master_write_packet_wait+0x92>
   13d8a:	4821      	ldr	r0, [pc, #132]	; (13e10 <i2c_master_write_packet_wait+0x108>)
   13d8c:	4922      	ldr	r1, [pc, #136]	; (13e18 <i2c_master_write_packet_wait+0x110>)
   13d8e:	4a1b      	ldr	r2, [pc, #108]	; (13dfc <i2c_master_write_packet_wait+0xf4>)
   13d90:	23b8      	movs	r3, #184	; 0xb8
   13d92:	009b      	lsls	r3, r3, #2
   13d94:	4c1f      	ldr	r4, [pc, #124]	; (13e14 <i2c_master_write_packet_wait+0x10c>)
   13d96:	47a0      	blx	r4
   13d98:	e7fe      	b.n	13d98 <i2c_master_write_packet_wait+0x90>
	Assert(packet);
   13d9a:	4b17      	ldr	r3, [pc, #92]	; (13df8 <i2c_master_write_packet_wait+0xf0>)
   13d9c:	4798      	blx	r3
   13d9e:	1c03      	adds	r3, r0, #0
   13da0:	2b00      	cmp	r3, #0
   13da2:	d010      	beq.n	13dc6 <i2c_master_write_packet_wait+0xbe>
   13da4:	683b      	ldr	r3, [r7, #0]
   13da6:	2b00      	cmp	r3, #0
   13da8:	d117      	bne.n	13dda <i2c_master_write_packet_wait+0xd2>
   13daa:	4b13      	ldr	r3, [pc, #76]	; (13df8 <i2c_master_write_packet_wait+0xf0>)
   13dac:	4798      	blx	r3
   13dae:	1c01      	adds	r1, r0, #0
   13db0:	4a12      	ldr	r2, [pc, #72]	; (13dfc <i2c_master_write_packet_wait+0xf4>)
   13db2:	4b1a      	ldr	r3, [pc, #104]	; (13e1c <i2c_master_write_packet_wait+0x114>)
   13db4:	4813      	ldr	r0, [pc, #76]	; (13e04 <i2c_master_write_packet_wait+0xfc>)
   13db6:	9000      	str	r0, [sp, #0]
   13db8:	4819      	ldr	r0, [pc, #100]	; (13e20 <i2c_master_write_packet_wait+0x118>)
   13dba:	9001      	str	r0, [sp, #4]
   13dbc:	1c08      	adds	r0, r1, #0
   13dbe:	2101      	movs	r1, #1
   13dc0:	4c12      	ldr	r4, [pc, #72]	; (13e0c <i2c_master_write_packet_wait+0x104>)
   13dc2:	47a0      	blx	r4
   13dc4:	e009      	b.n	13dda <i2c_master_write_packet_wait+0xd2>
   13dc6:	683b      	ldr	r3, [r7, #0]
   13dc8:	2b00      	cmp	r3, #0
   13dca:	d106      	bne.n	13dda <i2c_master_write_packet_wait+0xd2>
   13dcc:	4810      	ldr	r0, [pc, #64]	; (13e10 <i2c_master_write_packet_wait+0x108>)
   13dce:	4914      	ldr	r1, [pc, #80]	; (13e20 <i2c_master_write_packet_wait+0x118>)
   13dd0:	4a0a      	ldr	r2, [pc, #40]	; (13dfc <i2c_master_write_packet_wait+0xf4>)
   13dd2:	4b12      	ldr	r3, [pc, #72]	; (13e1c <i2c_master_write_packet_wait+0x114>)
   13dd4:	4c0f      	ldr	r4, [pc, #60]	; (13e14 <i2c_master_write_packet_wait+0x10c>)
   13dd6:	47a0      	blx	r4
   13dd8:	e7fe      	b.n	13dd8 <i2c_master_write_packet_wait+0xd0>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
   13dda:	687b      	ldr	r3, [r7, #4]
   13ddc:	2201      	movs	r2, #1
   13dde:	721a      	strb	r2, [r3, #8]

	return _i2c_master_write_packet(module, packet);
   13de0:	687a      	ldr	r2, [r7, #4]
   13de2:	683b      	ldr	r3, [r7, #0]
   13de4:	1c10      	adds	r0, r2, #0
   13de6:	1c19      	adds	r1, r3, #0
   13de8:	4b0e      	ldr	r3, [pc, #56]	; (13e24 <i2c_master_write_packet_wait+0x11c>)
   13dea:	4798      	blx	r3
   13dec:	1c03      	adds	r3, r0, #0
}
   13dee:	1c18      	adds	r0, r3, #0
   13df0:	46bd      	mov	sp, r7
   13df2:	b003      	add	sp, #12
   13df4:	bd90      	pop	{r4, r7, pc}
   13df6:	46c0      	nop			; (mov r8, r8)
   13df8:	00012bed 	.word	0x00012bed
   13dfc:	000263f8 	.word	0x000263f8
   13e00:	000002df 	.word	0x000002df
   13e04:	00026308 	.word	0x00026308
   13e08:	000263e4 	.word	0x000263e4
   13e0c:	000106e9 	.word	0x000106e9
   13e10:	00026328 	.word	0x00026328
   13e14:	0001b62d 	.word	0x0001b62d
   13e18:	000263ec 	.word	0x000263ec
   13e1c:	000002e1 	.word	0x000002e1
   13e20:	0002642c 	.word	0x0002642c
   13e24:	00013be9 	.word	0x00013be9

00013e28 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
   13e28:	b580      	push	{r7, lr}
   13e2a:	af00      	add	r7, sp, #0
	return test_case_ptr;
   13e2c:	4b02      	ldr	r3, [pc, #8]	; (13e38 <test_get_case+0x10>)
   13e2e:	681b      	ldr	r3, [r3, #0]
}
   13e30:	1c18      	adds	r0, r3, #0
   13e32:	46bd      	mov	sp, r7
   13e34:	bd80      	pop	{r7, pc}
   13e36:	46c0      	nop			; (mov r8, r8)
   13e38:	2000041c 	.word	0x2000041c

00013e3c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   13e3c:	b590      	push	{r4, r7, lr}
   13e3e:	b085      	sub	sp, #20
   13e40:	af02      	add	r7, sp, #8
   13e42:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
   13e44:	4b15      	ldr	r3, [pc, #84]	; (13e9c <system_gclk_chan_get_config_defaults+0x60>)
   13e46:	4798      	blx	r3
   13e48:	1c03      	adds	r3, r0, #0
   13e4a:	2b00      	cmp	r3, #0
   13e4c:	d011      	beq.n	13e72 <system_gclk_chan_get_config_defaults+0x36>
   13e4e:	687b      	ldr	r3, [r7, #4]
   13e50:	2b00      	cmp	r3, #0
   13e52:	d119      	bne.n	13e88 <system_gclk_chan_get_config_defaults+0x4c>
   13e54:	4b11      	ldr	r3, [pc, #68]	; (13e9c <system_gclk_chan_get_config_defaults+0x60>)
   13e56:	4798      	blx	r3
   13e58:	1c01      	adds	r1, r0, #0
   13e5a:	4a11      	ldr	r2, [pc, #68]	; (13ea0 <system_gclk_chan_get_config_defaults+0x64>)
   13e5c:	2314      	movs	r3, #20
   13e5e:	33ff      	adds	r3, #255	; 0xff
   13e60:	4810      	ldr	r0, [pc, #64]	; (13ea4 <system_gclk_chan_get_config_defaults+0x68>)
   13e62:	9000      	str	r0, [sp, #0]
   13e64:	4810      	ldr	r0, [pc, #64]	; (13ea8 <system_gclk_chan_get_config_defaults+0x6c>)
   13e66:	9001      	str	r0, [sp, #4]
   13e68:	1c08      	adds	r0, r1, #0
   13e6a:	2101      	movs	r1, #1
   13e6c:	4c0f      	ldr	r4, [pc, #60]	; (13eac <system_gclk_chan_get_config_defaults+0x70>)
   13e6e:	47a0      	blx	r4
   13e70:	e00a      	b.n	13e88 <system_gclk_chan_get_config_defaults+0x4c>
   13e72:	687b      	ldr	r3, [r7, #4]
   13e74:	2b00      	cmp	r3, #0
   13e76:	d107      	bne.n	13e88 <system_gclk_chan_get_config_defaults+0x4c>
   13e78:	480d      	ldr	r0, [pc, #52]	; (13eb0 <system_gclk_chan_get_config_defaults+0x74>)
   13e7a:	490b      	ldr	r1, [pc, #44]	; (13ea8 <system_gclk_chan_get_config_defaults+0x6c>)
   13e7c:	4a08      	ldr	r2, [pc, #32]	; (13ea0 <system_gclk_chan_get_config_defaults+0x64>)
   13e7e:	2314      	movs	r3, #20
   13e80:	33ff      	adds	r3, #255	; 0xff
   13e82:	4c0c      	ldr	r4, [pc, #48]	; (13eb4 <system_gclk_chan_get_config_defaults+0x78>)
   13e84:	47a0      	blx	r4
   13e86:	e7fe      	b.n	13e86 <system_gclk_chan_get_config_defaults+0x4a>

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   13e88:	687b      	ldr	r3, [r7, #4]
   13e8a:	2200      	movs	r2, #0
   13e8c:	701a      	strb	r2, [r3, #0]
	config->write_lock       = false;
   13e8e:	687b      	ldr	r3, [r7, #4]
   13e90:	2200      	movs	r2, #0
   13e92:	705a      	strb	r2, [r3, #1]
}
   13e94:	46bd      	mov	sp, r7
   13e96:	b003      	add	sp, #12
   13e98:	bd90      	pop	{r4, r7, pc}
   13e9a:	46c0      	nop			; (mov r8, r8)
   13e9c:	00013e29 	.word	0x00013e29
   13ea0:	00026434 	.word	0x00026434
   13ea4:	00026460 	.word	0x00026460
   13ea8:	00026478 	.word	0x00026478
   13eac:	000106e9 	.word	0x000106e9
   13eb0:	00026480 	.word	0x00026480
   13eb4:	0001b62d 	.word	0x0001b62d

00013eb8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   13eb8:	b590      	push	{r4, r7, lr}
   13eba:	b085      	sub	sp, #20
   13ebc:	af02      	add	r7, sp, #8
   13ebe:	1c02      	adds	r2, r0, #0
   13ec0:	6039      	str	r1, [r7, #0]
   13ec2:	1dfb      	adds	r3, r7, #7
   13ec4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   13ec6:	1dfb      	adds	r3, r7, #7
   13ec8:	781b      	ldrb	r3, [r3, #0]
   13eca:	2b01      	cmp	r3, #1
   13ecc:	d00a      	beq.n	13ee4 <system_apb_clock_set_mask+0x2c>
   13ece:	2b02      	cmp	r3, #2
   13ed0:	d00f      	beq.n	13ef2 <system_apb_clock_set_mask+0x3a>
   13ed2:	2b00      	cmp	r3, #0
   13ed4:	d114      	bne.n	13f00 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   13ed6:	4b1a      	ldr	r3, [pc, #104]	; (13f40 <system_apb_clock_set_mask+0x88>)
   13ed8:	4a19      	ldr	r2, [pc, #100]	; (13f40 <system_apb_clock_set_mask+0x88>)
   13eda:	6991      	ldr	r1, [r2, #24]
   13edc:	683a      	ldr	r2, [r7, #0]
   13ede:	430a      	orrs	r2, r1
   13ee0:	619a      	str	r2, [r3, #24]
			break;
   13ee2:	e028      	b.n	13f36 <system_apb_clock_set_mask+0x7e>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   13ee4:	4b16      	ldr	r3, [pc, #88]	; (13f40 <system_apb_clock_set_mask+0x88>)
   13ee6:	4a16      	ldr	r2, [pc, #88]	; (13f40 <system_apb_clock_set_mask+0x88>)
   13ee8:	69d1      	ldr	r1, [r2, #28]
   13eea:	683a      	ldr	r2, [r7, #0]
   13eec:	430a      	orrs	r2, r1
   13eee:	61da      	str	r2, [r3, #28]
			break;
   13ef0:	e021      	b.n	13f36 <system_apb_clock_set_mask+0x7e>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   13ef2:	4b13      	ldr	r3, [pc, #76]	; (13f40 <system_apb_clock_set_mask+0x88>)
   13ef4:	4a12      	ldr	r2, [pc, #72]	; (13f40 <system_apb_clock_set_mask+0x88>)
   13ef6:	6a11      	ldr	r1, [r2, #32]
   13ef8:	683a      	ldr	r2, [r7, #0]
   13efa:	430a      	orrs	r2, r1
   13efc:	621a      	str	r2, [r3, #32]
			break;
   13efe:	e01a      	b.n	13f36 <system_apb_clock_set_mask+0x7e>

		default:
			Assert(false);
   13f00:	4b10      	ldr	r3, [pc, #64]	; (13f44 <system_apb_clock_set_mask+0x8c>)
   13f02:	4798      	blx	r3
   13f04:	1c03      	adds	r3, r0, #0
   13f06:	2b00      	cmp	r3, #0
   13f08:	d00e      	beq.n	13f28 <system_apb_clock_set_mask+0x70>
   13f0a:	4b0e      	ldr	r3, [pc, #56]	; (13f44 <system_apb_clock_set_mask+0x8c>)
   13f0c:	4798      	blx	r3
   13f0e:	1c01      	adds	r1, r0, #0
   13f10:	4a0d      	ldr	r2, [pc, #52]	; (13f48 <system_apb_clock_set_mask+0x90>)
   13f12:	4b0e      	ldr	r3, [pc, #56]	; (13f4c <system_apb_clock_set_mask+0x94>)
   13f14:	480e      	ldr	r0, [pc, #56]	; (13f50 <system_apb_clock_set_mask+0x98>)
   13f16:	9000      	str	r0, [sp, #0]
   13f18:	480e      	ldr	r0, [pc, #56]	; (13f54 <system_apb_clock_set_mask+0x9c>)
   13f1a:	9001      	str	r0, [sp, #4]
   13f1c:	1c08      	adds	r0, r1, #0
   13f1e:	2101      	movs	r1, #1
   13f20:	4c0d      	ldr	r4, [pc, #52]	; (13f58 <system_apb_clock_set_mask+0xa0>)
   13f22:	47a0      	blx	r4
			return STATUS_ERR_INVALID_ARG;
   13f24:	2317      	movs	r3, #23
   13f26:	e007      	b.n	13f38 <system_apb_clock_set_mask+0x80>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
			break;

		default:
			Assert(false);
   13f28:	480c      	ldr	r0, [pc, #48]	; (13f5c <system_apb_clock_set_mask+0xa4>)
   13f2a:	490a      	ldr	r1, [pc, #40]	; (13f54 <system_apb_clock_set_mask+0x9c>)
   13f2c:	4a06      	ldr	r2, [pc, #24]	; (13f48 <system_apb_clock_set_mask+0x90>)
   13f2e:	4b07      	ldr	r3, [pc, #28]	; (13f4c <system_apb_clock_set_mask+0x94>)
   13f30:	4c0b      	ldr	r4, [pc, #44]	; (13f60 <system_apb_clock_set_mask+0xa8>)
   13f32:	47a0      	blx	r4
   13f34:	e7fe      	b.n	13f34 <system_apb_clock_set_mask+0x7c>
			return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
   13f36:	2300      	movs	r3, #0
}
   13f38:	1c18      	adds	r0, r3, #0
   13f3a:	46bd      	mov	sp, r7
   13f3c:	b003      	add	sp, #12
   13f3e:	bd90      	pop	{r4, r7, pc}
   13f40:	40000400 	.word	0x40000400
   13f44:	00013e29 	.word	0x00013e29
   13f48:	000264a4 	.word	0x000264a4
   13f4c:	00000409 	.word	0x00000409
   13f50:	00026460 	.word	0x00026460
   13f54:	000264d4 	.word	0x000264d4
   13f58:	000106e9 	.word	0x000106e9
   13f5c:	00026480 	.word	0x00026480
   13f60:	0001b62d 	.word	0x0001b62d

00013f64 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   13f64:	b590      	push	{r4, r7, lr}
   13f66:	b085      	sub	sp, #20
   13f68:	af02      	add	r7, sp, #8
   13f6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
   13f6c:	4b16      	ldr	r3, [pc, #88]	; (13fc8 <system_pinmux_get_config_defaults+0x64>)
   13f6e:	4798      	blx	r3
   13f70:	1c03      	adds	r3, r0, #0
   13f72:	2b00      	cmp	r3, #0
   13f74:	d011      	beq.n	13f9a <system_pinmux_get_config_defaults+0x36>
   13f76:	687b      	ldr	r3, [r7, #4]
   13f78:	2b00      	cmp	r3, #0
   13f7a:	d119      	bne.n	13fb0 <system_pinmux_get_config_defaults+0x4c>
   13f7c:	4b12      	ldr	r3, [pc, #72]	; (13fc8 <system_pinmux_get_config_defaults+0x64>)
   13f7e:	4798      	blx	r3
   13f80:	1c01      	adds	r1, r0, #0
   13f82:	4a12      	ldr	r2, [pc, #72]	; (13fcc <system_pinmux_get_config_defaults+0x68>)
   13f84:	239d      	movs	r3, #157	; 0x9d
   13f86:	005b      	lsls	r3, r3, #1
   13f88:	4811      	ldr	r0, [pc, #68]	; (13fd0 <system_pinmux_get_config_defaults+0x6c>)
   13f8a:	9000      	str	r0, [sp, #0]
   13f8c:	4811      	ldr	r0, [pc, #68]	; (13fd4 <system_pinmux_get_config_defaults+0x70>)
   13f8e:	9001      	str	r0, [sp, #4]
   13f90:	1c08      	adds	r0, r1, #0
   13f92:	2101      	movs	r1, #1
   13f94:	4c10      	ldr	r4, [pc, #64]	; (13fd8 <system_pinmux_get_config_defaults+0x74>)
   13f96:	47a0      	blx	r4
   13f98:	e00a      	b.n	13fb0 <system_pinmux_get_config_defaults+0x4c>
   13f9a:	687b      	ldr	r3, [r7, #4]
   13f9c:	2b00      	cmp	r3, #0
   13f9e:	d107      	bne.n	13fb0 <system_pinmux_get_config_defaults+0x4c>
   13fa0:	480e      	ldr	r0, [pc, #56]	; (13fdc <system_pinmux_get_config_defaults+0x78>)
   13fa2:	490c      	ldr	r1, [pc, #48]	; (13fd4 <system_pinmux_get_config_defaults+0x70>)
   13fa4:	4a09      	ldr	r2, [pc, #36]	; (13fcc <system_pinmux_get_config_defaults+0x68>)
   13fa6:	239d      	movs	r3, #157	; 0x9d
   13fa8:	005b      	lsls	r3, r3, #1
   13faa:	4c0d      	ldr	r4, [pc, #52]	; (13fe0 <system_pinmux_get_config_defaults+0x7c>)
   13fac:	47a0      	blx	r4
   13fae:	e7fe      	b.n	13fae <system_pinmux_get_config_defaults+0x4a>

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   13fb0:	687b      	ldr	r3, [r7, #4]
   13fb2:	2280      	movs	r2, #128	; 0x80
   13fb4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   13fb6:	687b      	ldr	r3, [r7, #4]
   13fb8:	2200      	movs	r2, #0
   13fba:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   13fbc:	687b      	ldr	r3, [r7, #4]
   13fbe:	2201      	movs	r2, #1
   13fc0:	709a      	strb	r2, [r3, #2]
}
   13fc2:	46bd      	mov	sp, r7
   13fc4:	b003      	add	sp, #12
   13fc6:	bd90      	pop	{r4, r7, pc}
   13fc8:	00013e29 	.word	0x00013e29
   13fcc:	000264dc 	.word	0x000264dc
   13fd0:	00026460 	.word	0x00026460
   13fd4:	00026478 	.word	0x00026478
   13fd8:	000106e9 	.word	0x000106e9
   13fdc:	00026480 	.word	0x00026480
   13fe0:	0001b62d 	.word	0x0001b62d

00013fe4 <_i2c_slave_set_config>:
 *                                         previously set
 */
static enum status_code _i2c_slave_set_config(
		struct i2c_slave_module *const module,
		const struct i2c_slave_config *const config)
{
   13fe4:	b590      	push	{r4, r7, lr}
   13fe6:	b08b      	sub	sp, #44	; 0x2c
   13fe8:	af02      	add	r7, sp, #8
   13fea:	6078      	str	r0, [r7, #4]
   13fec:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments. */
	Assert(module);
   13fee:	4b70      	ldr	r3, [pc, #448]	; (141b0 <_i2c_slave_set_config+0x1cc>)
   13ff0:	4798      	blx	r3
   13ff2:	1c03      	adds	r3, r0, #0
   13ff4:	2b00      	cmp	r3, #0
   13ff6:	d011      	beq.n	1401c <_i2c_slave_set_config+0x38>
   13ff8:	687b      	ldr	r3, [r7, #4]
   13ffa:	2b00      	cmp	r3, #0
   13ffc:	d11b      	bne.n	14036 <_i2c_slave_set_config+0x52>
   13ffe:	4b6c      	ldr	r3, [pc, #432]	; (141b0 <_i2c_slave_set_config+0x1cc>)
   14000:	4798      	blx	r3
   14002:	1c02      	adds	r2, r0, #0
   14004:	4b6b      	ldr	r3, [pc, #428]	; (141b4 <_i2c_slave_set_config+0x1d0>)
   14006:	496c      	ldr	r1, [pc, #432]	; (141b8 <_i2c_slave_set_config+0x1d4>)
   14008:	9100      	str	r1, [sp, #0]
   1400a:	496c      	ldr	r1, [pc, #432]	; (141bc <_i2c_slave_set_config+0x1d8>)
   1400c:	9101      	str	r1, [sp, #4]
   1400e:	1c10      	adds	r0, r2, #0
   14010:	2101      	movs	r1, #1
   14012:	1c1a      	adds	r2, r3, #0
   14014:	2399      	movs	r3, #153	; 0x99
   14016:	4c6a      	ldr	r4, [pc, #424]	; (141c0 <_i2c_slave_set_config+0x1dc>)
   14018:	47a0      	blx	r4
   1401a:	e00c      	b.n	14036 <_i2c_slave_set_config+0x52>
   1401c:	687b      	ldr	r3, [r7, #4]
   1401e:	2b00      	cmp	r3, #0
   14020:	d109      	bne.n	14036 <_i2c_slave_set_config+0x52>
   14022:	4968      	ldr	r1, [pc, #416]	; (141c4 <_i2c_slave_set_config+0x1e0>)
   14024:	4a65      	ldr	r2, [pc, #404]	; (141bc <_i2c_slave_set_config+0x1d8>)
   14026:	4b63      	ldr	r3, [pc, #396]	; (141b4 <_i2c_slave_set_config+0x1d0>)
   14028:	1c08      	adds	r0, r1, #0
   1402a:	1c11      	adds	r1, r2, #0
   1402c:	1c1a      	adds	r2, r3, #0
   1402e:	2399      	movs	r3, #153	; 0x99
   14030:	4c65      	ldr	r4, [pc, #404]	; (141c8 <_i2c_slave_set_config+0x1e4>)
   14032:	47a0      	blx	r4
   14034:	e7fe      	b.n	14034 <_i2c_slave_set_config+0x50>
	Assert(module->hw);
   14036:	4b5e      	ldr	r3, [pc, #376]	; (141b0 <_i2c_slave_set_config+0x1cc>)
   14038:	4798      	blx	r3
   1403a:	1c03      	adds	r3, r0, #0
   1403c:	2b00      	cmp	r3, #0
   1403e:	d012      	beq.n	14066 <_i2c_slave_set_config+0x82>
   14040:	687b      	ldr	r3, [r7, #4]
   14042:	681b      	ldr	r3, [r3, #0]
   14044:	2b00      	cmp	r3, #0
   14046:	d11c      	bne.n	14082 <_i2c_slave_set_config+0x9e>
   14048:	4b59      	ldr	r3, [pc, #356]	; (141b0 <_i2c_slave_set_config+0x1cc>)
   1404a:	4798      	blx	r3
   1404c:	1c02      	adds	r2, r0, #0
   1404e:	4b59      	ldr	r3, [pc, #356]	; (141b4 <_i2c_slave_set_config+0x1d0>)
   14050:	4959      	ldr	r1, [pc, #356]	; (141b8 <_i2c_slave_set_config+0x1d4>)
   14052:	9100      	str	r1, [sp, #0]
   14054:	495d      	ldr	r1, [pc, #372]	; (141cc <_i2c_slave_set_config+0x1e8>)
   14056:	9101      	str	r1, [sp, #4]
   14058:	1c10      	adds	r0, r2, #0
   1405a:	2101      	movs	r1, #1
   1405c:	1c1a      	adds	r2, r3, #0
   1405e:	239a      	movs	r3, #154	; 0x9a
   14060:	4c57      	ldr	r4, [pc, #348]	; (141c0 <_i2c_slave_set_config+0x1dc>)
   14062:	47a0      	blx	r4
   14064:	e00d      	b.n	14082 <_i2c_slave_set_config+0x9e>
   14066:	687b      	ldr	r3, [r7, #4]
   14068:	681b      	ldr	r3, [r3, #0]
   1406a:	2b00      	cmp	r3, #0
   1406c:	d109      	bne.n	14082 <_i2c_slave_set_config+0x9e>
   1406e:	4955      	ldr	r1, [pc, #340]	; (141c4 <_i2c_slave_set_config+0x1e0>)
   14070:	4a56      	ldr	r2, [pc, #344]	; (141cc <_i2c_slave_set_config+0x1e8>)
   14072:	4b50      	ldr	r3, [pc, #320]	; (141b4 <_i2c_slave_set_config+0x1d0>)
   14074:	1c08      	adds	r0, r1, #0
   14076:	1c11      	adds	r1, r2, #0
   14078:	1c1a      	adds	r2, r3, #0
   1407a:	239a      	movs	r3, #154	; 0x9a
   1407c:	4c52      	ldr	r4, [pc, #328]	; (141c8 <_i2c_slave_set_config+0x1e4>)
   1407e:	47a0      	blx	r4
   14080:	e7fe      	b.n	14080 <_i2c_slave_set_config+0x9c>
	Assert(config);
   14082:	4b4b      	ldr	r3, [pc, #300]	; (141b0 <_i2c_slave_set_config+0x1cc>)
   14084:	4798      	blx	r3
   14086:	1c03      	adds	r3, r0, #0
   14088:	2b00      	cmp	r3, #0
   1408a:	d011      	beq.n	140b0 <_i2c_slave_set_config+0xcc>
   1408c:	683b      	ldr	r3, [r7, #0]
   1408e:	2b00      	cmp	r3, #0
   14090:	d11b      	bne.n	140ca <_i2c_slave_set_config+0xe6>
   14092:	4b47      	ldr	r3, [pc, #284]	; (141b0 <_i2c_slave_set_config+0x1cc>)
   14094:	4798      	blx	r3
   14096:	1c02      	adds	r2, r0, #0
   14098:	4b46      	ldr	r3, [pc, #280]	; (141b4 <_i2c_slave_set_config+0x1d0>)
   1409a:	4947      	ldr	r1, [pc, #284]	; (141b8 <_i2c_slave_set_config+0x1d4>)
   1409c:	9100      	str	r1, [sp, #0]
   1409e:	494c      	ldr	r1, [pc, #304]	; (141d0 <_i2c_slave_set_config+0x1ec>)
   140a0:	9101      	str	r1, [sp, #4]
   140a2:	1c10      	adds	r0, r2, #0
   140a4:	2101      	movs	r1, #1
   140a6:	1c1a      	adds	r2, r3, #0
   140a8:	239b      	movs	r3, #155	; 0x9b
   140aa:	4c45      	ldr	r4, [pc, #276]	; (141c0 <_i2c_slave_set_config+0x1dc>)
   140ac:	47a0      	blx	r4
   140ae:	e00c      	b.n	140ca <_i2c_slave_set_config+0xe6>
   140b0:	683b      	ldr	r3, [r7, #0]
   140b2:	2b00      	cmp	r3, #0
   140b4:	d109      	bne.n	140ca <_i2c_slave_set_config+0xe6>
   140b6:	4943      	ldr	r1, [pc, #268]	; (141c4 <_i2c_slave_set_config+0x1e0>)
   140b8:	4a45      	ldr	r2, [pc, #276]	; (141d0 <_i2c_slave_set_config+0x1ec>)
   140ba:	4b3e      	ldr	r3, [pc, #248]	; (141b4 <_i2c_slave_set_config+0x1d0>)
   140bc:	1c08      	adds	r0, r1, #0
   140be:	1c11      	adds	r1, r2, #0
   140c0:	1c1a      	adds	r2, r3, #0
   140c2:	239b      	movs	r3, #155	; 0x9b
   140c4:	4c40      	ldr	r4, [pc, #256]	; (141c8 <_i2c_slave_set_config+0x1e4>)
   140c6:	47a0      	blx	r4
   140c8:	e7fe      	b.n	140c8 <_i2c_slave_set_config+0xe4>

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
   140ca:	687b      	ldr	r3, [r7, #4]
   140cc:	681b      	ldr	r3, [r3, #0]
   140ce:	617b      	str	r3, [r7, #20]
	Sercom *const sercom_hw = module->hw;
   140d0:	687b      	ldr	r3, [r7, #4]
   140d2:	681b      	ldr	r3, [r3, #0]
   140d4:	613b      	str	r3, [r7, #16]

	module->buffer_timeout = config->buffer_timeout;
   140d6:	683b      	ldr	r3, [r7, #0]
   140d8:	891a      	ldrh	r2, [r3, #8]
   140da:	687b      	ldr	r3, [r7, #4]
   140dc:	809a      	strh	r2, [r3, #4]

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   140de:	1c3b      	adds	r3, r7, #0
   140e0:	330c      	adds	r3, #12
   140e2:	1c18      	adds	r0, r3, #0
   140e4:	4b3b      	ldr	r3, [pc, #236]	; (141d4 <_i2c_slave_set_config+0x1f0>)
   140e6:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   140e8:	683b      	ldr	r3, [r7, #0]
   140ea:	695b      	ldr	r3, [r3, #20]
   140ec:	61fb      	str	r3, [r7, #28]
	uint32_t pad1 = config->pinmux_pad1;
   140ee:	683b      	ldr	r3, [r7, #0]
   140f0:	699b      	ldr	r3, [r3, #24]
   140f2:	61bb      	str	r3, [r7, #24]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   140f4:	69fb      	ldr	r3, [r7, #28]
   140f6:	2b00      	cmp	r3, #0
   140f8:	d106      	bne.n	14108 <_i2c_slave_set_config+0x124>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   140fa:	693b      	ldr	r3, [r7, #16]
   140fc:	1c18      	adds	r0, r3, #0
   140fe:	2100      	movs	r1, #0
   14100:	4b35      	ldr	r3, [pc, #212]	; (141d8 <_i2c_slave_set_config+0x1f4>)
   14102:	4798      	blx	r3
   14104:	1c03      	adds	r3, r0, #0
   14106:	61fb      	str	r3, [r7, #28]
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   14108:	69fb      	ldr	r3, [r7, #28]
   1410a:	b2da      	uxtb	r2, r3
   1410c:	1c3b      	adds	r3, r7, #0
   1410e:	330c      	adds	r3, #12
   14110:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   14112:	1c3b      	adds	r3, r7, #0
   14114:	330c      	adds	r3, #12
   14116:	2202      	movs	r2, #2
   14118:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   1411a:	69fb      	ldr	r3, [r7, #28]
   1411c:	0c1b      	lsrs	r3, r3, #16
   1411e:	b2da      	uxtb	r2, r3
   14120:	1c3b      	adds	r3, r7, #0
   14122:	330c      	adds	r3, #12
   14124:	1c10      	adds	r0, r2, #0
   14126:	1c19      	adds	r1, r3, #0
   14128:	4b2c      	ldr	r3, [pc, #176]	; (141dc <_i2c_slave_set_config+0x1f8>)
   1412a:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   1412c:	69bb      	ldr	r3, [r7, #24]
   1412e:	2b00      	cmp	r3, #0
   14130:	d106      	bne.n	14140 <_i2c_slave_set_config+0x15c>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   14132:	693b      	ldr	r3, [r7, #16]
   14134:	1c18      	adds	r0, r3, #0
   14136:	2101      	movs	r1, #1
   14138:	4b27      	ldr	r3, [pc, #156]	; (141d8 <_i2c_slave_set_config+0x1f4>)
   1413a:	4798      	blx	r3
   1413c:	1c03      	adds	r3, r0, #0
   1413e:	61bb      	str	r3, [r7, #24]
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   14140:	69bb      	ldr	r3, [r7, #24]
   14142:	b2da      	uxtb	r2, r3
   14144:	1c3b      	adds	r3, r7, #0
   14146:	330c      	adds	r3, #12
   14148:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   1414a:	1c3b      	adds	r3, r7, #0
   1414c:	330c      	adds	r3, #12
   1414e:	2202      	movs	r2, #2
   14150:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   14152:	69bb      	ldr	r3, [r7, #24]
   14154:	0c1b      	lsrs	r3, r3, #16
   14156:	b2da      	uxtb	r2, r3
   14158:	1c3b      	adds	r3, r7, #0
   1415a:	330c      	adds	r3, #12
   1415c:	1c10      	adds	r0, r2, #0
   1415e:	1c19      	adds	r1, r3, #0
   14160:	4b1e      	ldr	r3, [pc, #120]	; (141dc <_i2c_slave_set_config+0x1f8>)
   14162:	4798      	blx	r3

	/* Write config to register CTRLA */
	i2c_hw->CTRLA.reg |= config->sda_hold_time |
   14164:	697b      	ldr	r3, [r7, #20]
   14166:	681a      	ldr	r2, [r3, #0]
   14168:	683b      	ldr	r3, [r7, #0]
   1416a:	6859      	ldr	r1, [r3, #4]
			(config->run_in_standby << SERCOM_I2CS_CTRLA_RUNSTDBY_Pos);
   1416c:	683b      	ldr	r3, [r7, #0]
   1416e:	7c5b      	ldrb	r3, [r3, #17]
   14170:	01db      	lsls	r3, r3, #7
	pin_conf.mux_position = pad1 & 0xFFFF;
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);

	/* Write config to register CTRLA */
	i2c_hw->CTRLA.reg |= config->sda_hold_time |
   14172:	430b      	orrs	r3, r1
   14174:	431a      	orrs	r2, r3
   14176:	697b      	ldr	r3, [r7, #20]
   14178:	601a      	str	r2, [r3, #0]
			(config->run_in_standby << SERCOM_I2CS_CTRLA_RUNSTDBY_Pos);

	/* Set CTRLB configuration */
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN | config->address_mode;
   1417a:	683b      	ldr	r3, [r7, #0]
   1417c:	895b      	ldrh	r3, [r3, #10]
   1417e:	2280      	movs	r2, #128	; 0x80
   14180:	0052      	lsls	r2, r2, #1
   14182:	4313      	orrs	r3, r2
   14184:	b29b      	uxth	r3, r3
   14186:	1c1a      	adds	r2, r3, #0
   14188:	697b      	ldr	r3, [r7, #20]
   1418a:	605a      	str	r2, [r3, #4]

	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
   1418c:	683b      	ldr	r3, [r7, #0]
   1418e:	7b1b      	ldrb	r3, [r3, #12]
   14190:	005a      	lsls	r2, r3, #1
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
   14192:	683b      	ldr	r3, [r7, #0]
   14194:	7b5b      	ldrb	r3, [r3, #13]
   14196:	045b      	lsls	r3, r3, #17
			(config->run_in_standby << SERCOM_I2CS_CTRLA_RUNSTDBY_Pos);

	/* Set CTRLB configuration */
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN | config->address_mode;

	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
   14198:	431a      	orrs	r2, r3
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
			config->enable_general_call_address << SERCOM_I2CS_ADDR_GENCEN_Pos;
   1419a:	683b      	ldr	r3, [r7, #0]
   1419c:	7b9b      	ldrb	r3, [r3, #14]

	/* Set CTRLB configuration */
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN | config->address_mode;

	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
   1419e:	4313      	orrs	r3, r2
			(config->run_in_standby << SERCOM_I2CS_CTRLA_RUNSTDBY_Pos);

	/* Set CTRLB configuration */
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN | config->address_mode;

	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
   141a0:	1c1a      	adds	r2, r3, #0
   141a2:	697b      	ldr	r3, [r7, #20]
   141a4:	615a      	str	r2, [r3, #20]
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
			config->enable_general_call_address << SERCOM_I2CS_ADDR_GENCEN_Pos;

	return STATUS_OK;
   141a6:	2300      	movs	r3, #0
}
   141a8:	1c18      	adds	r0, r3, #0
   141aa:	46bd      	mov	sp, r7
   141ac:	b009      	add	sp, #36	; 0x24
   141ae:	bd90      	pop	{r4, r7, pc}
   141b0:	00013e29 	.word	0x00013e29
   141b4:	00026550 	.word	0x00026550
   141b8:	00026460 	.word	0x00026460
   141bc:	0002653c 	.word	0x0002653c
   141c0:	000106e9 	.word	0x000106e9
   141c4:	00026480 	.word	0x00026480
   141c8:	0001b62d 	.word	0x0001b62d
   141cc:	00026544 	.word	0x00026544
   141d0:	00026478 	.word	0x00026478
   141d4:	00013f65 	.word	0x00013f65
   141d8:	00014ee5 	.word	0x00014ee5
   141dc:	00017d71 	.word	0x00017d71

000141e0 <i2c_slave_init>:
 */
enum status_code i2c_slave_init(
		struct i2c_slave_module *const module,
		Sercom *const hw,
		const struct i2c_slave_config *const config)
{
   141e0:	b590      	push	{r4, r7, lr}
   141e2:	b08d      	sub	sp, #52	; 0x34
   141e4:	af02      	add	r7, sp, #8
   141e6:	60f8      	str	r0, [r7, #12]
   141e8:	60b9      	str	r1, [r7, #8]
   141ea:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
   141ec:	4b73      	ldr	r3, [pc, #460]	; (143bc <i2c_slave_init+0x1dc>)
   141ee:	4798      	blx	r3
   141f0:	1c03      	adds	r3, r0, #0
   141f2:	2b00      	cmp	r3, #0
   141f4:	d011      	beq.n	1421a <i2c_slave_init+0x3a>
   141f6:	68fb      	ldr	r3, [r7, #12]
   141f8:	2b00      	cmp	r3, #0
   141fa:	d11b      	bne.n	14234 <i2c_slave_init+0x54>
   141fc:	4b6f      	ldr	r3, [pc, #444]	; (143bc <i2c_slave_init+0x1dc>)
   141fe:	4798      	blx	r3
   14200:	1c02      	adds	r2, r0, #0
   14202:	4b6f      	ldr	r3, [pc, #444]	; (143c0 <i2c_slave_init+0x1e0>)
   14204:	496f      	ldr	r1, [pc, #444]	; (143c4 <i2c_slave_init+0x1e4>)
   14206:	9100      	str	r1, [sp, #0]
   14208:	496f      	ldr	r1, [pc, #444]	; (143c8 <i2c_slave_init+0x1e8>)
   1420a:	9101      	str	r1, [sp, #4]
   1420c:	1c10      	adds	r0, r2, #0
   1420e:	2101      	movs	r1, #1
   14210:	1c1a      	adds	r2, r3, #0
   14212:	23de      	movs	r3, #222	; 0xde
   14214:	4c6d      	ldr	r4, [pc, #436]	; (143cc <i2c_slave_init+0x1ec>)
   14216:	47a0      	blx	r4
   14218:	e00c      	b.n	14234 <i2c_slave_init+0x54>
   1421a:	68fb      	ldr	r3, [r7, #12]
   1421c:	2b00      	cmp	r3, #0
   1421e:	d109      	bne.n	14234 <i2c_slave_init+0x54>
   14220:	496b      	ldr	r1, [pc, #428]	; (143d0 <i2c_slave_init+0x1f0>)
   14222:	4a69      	ldr	r2, [pc, #420]	; (143c8 <i2c_slave_init+0x1e8>)
   14224:	4b66      	ldr	r3, [pc, #408]	; (143c0 <i2c_slave_init+0x1e0>)
   14226:	1c08      	adds	r0, r1, #0
   14228:	1c11      	adds	r1, r2, #0
   1422a:	1c1a      	adds	r2, r3, #0
   1422c:	23de      	movs	r3, #222	; 0xde
   1422e:	4c69      	ldr	r4, [pc, #420]	; (143d4 <i2c_slave_init+0x1f4>)
   14230:	47a0      	blx	r4
   14232:	e7fe      	b.n	14232 <i2c_slave_init+0x52>
	Assert(hw);
   14234:	4b61      	ldr	r3, [pc, #388]	; (143bc <i2c_slave_init+0x1dc>)
   14236:	4798      	blx	r3
   14238:	1c03      	adds	r3, r0, #0
   1423a:	2b00      	cmp	r3, #0
   1423c:	d011      	beq.n	14262 <i2c_slave_init+0x82>
   1423e:	68bb      	ldr	r3, [r7, #8]
   14240:	2b00      	cmp	r3, #0
   14242:	d11b      	bne.n	1427c <i2c_slave_init+0x9c>
   14244:	4b5d      	ldr	r3, [pc, #372]	; (143bc <i2c_slave_init+0x1dc>)
   14246:	4798      	blx	r3
   14248:	1c02      	adds	r2, r0, #0
   1424a:	4b5d      	ldr	r3, [pc, #372]	; (143c0 <i2c_slave_init+0x1e0>)
   1424c:	495d      	ldr	r1, [pc, #372]	; (143c4 <i2c_slave_init+0x1e4>)
   1424e:	9100      	str	r1, [sp, #0]
   14250:	4961      	ldr	r1, [pc, #388]	; (143d8 <i2c_slave_init+0x1f8>)
   14252:	9101      	str	r1, [sp, #4]
   14254:	1c10      	adds	r0, r2, #0
   14256:	2101      	movs	r1, #1
   14258:	1c1a      	adds	r2, r3, #0
   1425a:	23df      	movs	r3, #223	; 0xdf
   1425c:	4c5b      	ldr	r4, [pc, #364]	; (143cc <i2c_slave_init+0x1ec>)
   1425e:	47a0      	blx	r4
   14260:	e00c      	b.n	1427c <i2c_slave_init+0x9c>
   14262:	68bb      	ldr	r3, [r7, #8]
   14264:	2b00      	cmp	r3, #0
   14266:	d109      	bne.n	1427c <i2c_slave_init+0x9c>
   14268:	4959      	ldr	r1, [pc, #356]	; (143d0 <i2c_slave_init+0x1f0>)
   1426a:	4a5b      	ldr	r2, [pc, #364]	; (143d8 <i2c_slave_init+0x1f8>)
   1426c:	4b54      	ldr	r3, [pc, #336]	; (143c0 <i2c_slave_init+0x1e0>)
   1426e:	1c08      	adds	r0, r1, #0
   14270:	1c11      	adds	r1, r2, #0
   14272:	1c1a      	adds	r2, r3, #0
   14274:	23df      	movs	r3, #223	; 0xdf
   14276:	4c57      	ldr	r4, [pc, #348]	; (143d4 <i2c_slave_init+0x1f4>)
   14278:	47a0      	blx	r4
   1427a:	e7fe      	b.n	1427a <i2c_slave_init+0x9a>
	Assert(config);
   1427c:	4b4f      	ldr	r3, [pc, #316]	; (143bc <i2c_slave_init+0x1dc>)
   1427e:	4798      	blx	r3
   14280:	1c03      	adds	r3, r0, #0
   14282:	2b00      	cmp	r3, #0
   14284:	d011      	beq.n	142aa <i2c_slave_init+0xca>
   14286:	687b      	ldr	r3, [r7, #4]
   14288:	2b00      	cmp	r3, #0
   1428a:	d11b      	bne.n	142c4 <i2c_slave_init+0xe4>
   1428c:	4b4b      	ldr	r3, [pc, #300]	; (143bc <i2c_slave_init+0x1dc>)
   1428e:	4798      	blx	r3
   14290:	1c02      	adds	r2, r0, #0
   14292:	4b4b      	ldr	r3, [pc, #300]	; (143c0 <i2c_slave_init+0x1e0>)
   14294:	494b      	ldr	r1, [pc, #300]	; (143c4 <i2c_slave_init+0x1e4>)
   14296:	9100      	str	r1, [sp, #0]
   14298:	4950      	ldr	r1, [pc, #320]	; (143dc <i2c_slave_init+0x1fc>)
   1429a:	9101      	str	r1, [sp, #4]
   1429c:	1c10      	adds	r0, r2, #0
   1429e:	2101      	movs	r1, #1
   142a0:	1c1a      	adds	r2, r3, #0
   142a2:	23e0      	movs	r3, #224	; 0xe0
   142a4:	4c49      	ldr	r4, [pc, #292]	; (143cc <i2c_slave_init+0x1ec>)
   142a6:	47a0      	blx	r4
   142a8:	e00c      	b.n	142c4 <i2c_slave_init+0xe4>
   142aa:	687b      	ldr	r3, [r7, #4]
   142ac:	2b00      	cmp	r3, #0
   142ae:	d109      	bne.n	142c4 <i2c_slave_init+0xe4>
   142b0:	4947      	ldr	r1, [pc, #284]	; (143d0 <i2c_slave_init+0x1f0>)
   142b2:	4a4a      	ldr	r2, [pc, #296]	; (143dc <i2c_slave_init+0x1fc>)
   142b4:	4b42      	ldr	r3, [pc, #264]	; (143c0 <i2c_slave_init+0x1e0>)
   142b6:	1c08      	adds	r0, r1, #0
   142b8:	1c11      	adds	r1, r2, #0
   142ba:	1c1a      	adds	r2, r3, #0
   142bc:	23e0      	movs	r3, #224	; 0xe0
   142be:	4c45      	ldr	r4, [pc, #276]	; (143d4 <i2c_slave_init+0x1f4>)
   142c0:	47a0      	blx	r4
   142c2:	e7fe      	b.n	142c2 <i2c_slave_init+0xe2>

	/* Initialize software module */
	module->hw = hw;
   142c4:	68fb      	ldr	r3, [r7, #12]
   142c6:	68ba      	ldr	r2, [r7, #8]
   142c8:	601a      	str	r2, [r3, #0]

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
   142ca:	68fb      	ldr	r3, [r7, #12]
   142cc:	681b      	ldr	r3, [r3, #0]
   142ce:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
   142d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   142d2:	681a      	ldr	r2, [r3, #0]
   142d4:	2302      	movs	r3, #2
   142d6:	4013      	ands	r3, r2
   142d8:	d001      	beq.n	142de <i2c_slave_init+0xfe>
#if I2C_SLAVE_CALLBACK_MODE == false
		return _i2c_slave_check_config(module, config);
#else
		return STATUS_ERR_DENIED;
   142da:	231c      	movs	r3, #28
   142dc:	e06a      	b.n	143b4 <i2c_slave_init+0x1d4>
#endif
	}

	/* Check if reset is in progress. */
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
   142de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   142e0:	681a      	ldr	r2, [r3, #0]
   142e2:	2301      	movs	r3, #1
   142e4:	4013      	ands	r3, r2
   142e6:	d001      	beq.n	142ec <i2c_slave_init+0x10c>
		return STATUS_BUSY;
   142e8:	2305      	movs	r3, #5
   142ea:	e063      	b.n	143b4 <i2c_slave_init+0x1d4>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   142ec:	68fb      	ldr	r3, [r7, #12]
   142ee:	681b      	ldr	r3, [r3, #0]
   142f0:	1c18      	adds	r0, r3, #0
   142f2:	4b3b      	ldr	r3, [pc, #236]	; (143e0 <i2c_slave_init+0x200>)
   142f4:	4798      	blx	r3
   142f6:	1c03      	adds	r3, r0, #0
   142f8:	623b      	str	r3, [r7, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   142fa:	6a3b      	ldr	r3, [r7, #32]
   142fc:	3302      	adds	r3, #2
   142fe:	61fb      	str	r3, [r7, #28]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   14300:	6a3b      	ldr	r3, [r7, #32]
   14302:	330d      	adds	r3, #13
   14304:	61bb      	str	r3, [r7, #24]

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   14306:	69fb      	ldr	r3, [r7, #28]
   14308:	2201      	movs	r2, #1
   1430a:	1c11      	adds	r1, r2, #0
   1430c:	4099      	lsls	r1, r3
   1430e:	1c0b      	adds	r3, r1, #0
   14310:	2002      	movs	r0, #2
   14312:	1c19      	adds	r1, r3, #0
   14314:	4b33      	ldr	r3, [pc, #204]	; (143e4 <i2c_slave_init+0x204>)
   14316:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   14318:	1c3b      	adds	r3, r7, #0
   1431a:	3314      	adds	r3, #20
   1431c:	1c18      	adds	r0, r3, #0
   1431e:	4b32      	ldr	r3, [pc, #200]	; (143e8 <i2c_slave_init+0x208>)
   14320:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   14322:	687b      	ldr	r3, [r7, #4]
   14324:	7c1a      	ldrb	r2, [r3, #16]
   14326:	1c3b      	adds	r3, r7, #0
   14328:	3314      	adds	r3, #20
   1432a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1432c:	69bb      	ldr	r3, [r7, #24]
   1432e:	b2da      	uxtb	r2, r3
   14330:	1c3b      	adds	r3, r7, #0
   14332:	3314      	adds	r3, #20
   14334:	1c10      	adds	r0, r2, #0
   14336:	1c19      	adds	r1, r3, #0
   14338:	4b2c      	ldr	r3, [pc, #176]	; (143ec <i2c_slave_init+0x20c>)
   1433a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1433c:	69bb      	ldr	r3, [r7, #24]
   1433e:	b2db      	uxtb	r3, r3
   14340:	1c18      	adds	r0, r3, #0
   14342:	4b2b      	ldr	r3, [pc, #172]	; (143f0 <i2c_slave_init+0x210>)
   14344:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   14346:	687b      	ldr	r3, [r7, #4]
   14348:	7c1b      	ldrb	r3, [r3, #16]
   1434a:	1c18      	adds	r0, r3, #0
   1434c:	2100      	movs	r1, #0
   1434e:	4b29      	ldr	r3, [pc, #164]	; (143f4 <i2c_slave_init+0x214>)
   14350:	4798      	blx	r3

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Get sercom instance index. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   14352:	68fb      	ldr	r3, [r7, #12]
   14354:	681b      	ldr	r3, [r3, #0]
   14356:	1c3c      	adds	r4, r7, #0
   14358:	3417      	adds	r4, #23
   1435a:	1c18      	adds	r0, r3, #0
   1435c:	4b20      	ldr	r3, [pc, #128]	; (143e0 <i2c_slave_init+0x200>)
   1435e:	4798      	blx	r3
   14360:	1c03      	adds	r3, r0, #0
   14362:	7023      	strb	r3, [r4, #0]

	/* Save software module in interrupt handler. */
	_sercom_set_handler(instance_index, _i2c_slave_interrupt_handler);
   14364:	1c3b      	adds	r3, r7, #0
   14366:	3317      	adds	r3, #23
   14368:	781a      	ldrb	r2, [r3, #0]
   1436a:	4b23      	ldr	r3, [pc, #140]	; (143f8 <i2c_slave_init+0x218>)
   1436c:	1c10      	adds	r0, r2, #0
   1436e:	1c19      	adds	r1, r3, #0
   14370:	4b22      	ldr	r3, [pc, #136]	; (143fc <i2c_slave_init+0x21c>)
   14372:	4798      	blx	r3

	/* Save software module. */
	_sercom_instances[instance_index] = module;
   14374:	1c3b      	adds	r3, r7, #0
   14376:	3317      	adds	r3, #23
   14378:	781a      	ldrb	r2, [r3, #0]
   1437a:	4b21      	ldr	r3, [pc, #132]	; (14400 <i2c_slave_init+0x220>)
   1437c:	0092      	lsls	r2, r2, #2
   1437e:	68f9      	ldr	r1, [r7, #12]
   14380:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   14382:	68fa      	ldr	r2, [r7, #12]
   14384:	2320      	movs	r3, #32
   14386:	2100      	movs	r1, #0
   14388:	54d1      	strb	r1, [r2, r3]
	module->enabled_callback = 0;
   1438a:	68fa      	ldr	r2, [r7, #12]
   1438c:	2321      	movs	r3, #33	; 0x21
   1438e:	2100      	movs	r1, #0
   14390:	54d1      	strb	r1, [r2, r3]
	module->buffer_length = 0;
   14392:	68fb      	ldr	r3, [r7, #12]
   14394:	2200      	movs	r2, #0
   14396:	845a      	strh	r2, [r3, #34]	; 0x22
	module->nack_on_address = config->enable_nack_on_address;
   14398:	687b      	ldr	r3, [r7, #4]
   1439a:	7bda      	ldrb	r2, [r3, #15]
   1439c:	68fb      	ldr	r3, [r7, #12]
   1439e:	719a      	strb	r2, [r3, #6]
#endif

	/* Set SERCOM module to operate in I2C slave mode. */
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE_I2C_SLAVE;
   143a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   143a2:	2210      	movs	r2, #16
   143a4:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_slave_set_config(module, config);
   143a6:	68fa      	ldr	r2, [r7, #12]
   143a8:	687b      	ldr	r3, [r7, #4]
   143aa:	1c10      	adds	r0, r2, #0
   143ac:	1c19      	adds	r1, r3, #0
   143ae:	4b15      	ldr	r3, [pc, #84]	; (14404 <i2c_slave_init+0x224>)
   143b0:	4798      	blx	r3
   143b2:	1c03      	adds	r3, r0, #0
}
   143b4:	1c18      	adds	r0, r3, #0
   143b6:	46bd      	mov	sp, r7
   143b8:	b00b      	add	sp, #44	; 0x2c
   143ba:	bd90      	pop	{r4, r7, pc}
   143bc:	00013e29 	.word	0x00013e29
   143c0:	00026550 	.word	0x00026550
   143c4:	00026460 	.word	0x00026460
   143c8:	0002653c 	.word	0x0002653c
   143cc:	000106e9 	.word	0x000106e9
   143d0:	00026480 	.word	0x00026480
   143d4:	0001b62d 	.word	0x0001b62d
   143d8:	00026580 	.word	0x00026580
   143dc:	00026478 	.word	0x00026478
   143e0:	00015171 	.word	0x00015171
   143e4:	00013eb9 	.word	0x00013eb9
   143e8:	00013e3d 	.word	0x00013e3d
   143ec:	00017971 	.word	0x00017971
   143f0:	00017a25 	.word	0x00017a25
   143f4:	00014e59 	.word	0x00014e59
   143f8:	00014869 	.word	0x00014869
   143fc:	00015215 	.word	0x00015215
   14400:	20001200 	.word	0x20001200
   14404:	00013fe5 	.word	0x00013fe5

00014408 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
   14408:	b580      	push	{r7, lr}
   1440a:	af00      	add	r7, sp, #0
	return test_case_ptr;
   1440c:	4b02      	ldr	r3, [pc, #8]	; (14418 <test_get_case+0x10>)
   1440e:	681b      	ldr	r3, [r3, #0]
}
   14410:	1c18      	adds	r0, r3, #0
   14412:	46bd      	mov	sp, r7
   14414:	bd80      	pop	{r7, pc}
   14416:	46c0      	nop			; (mov r8, r8)
   14418:	2000041c 	.word	0x2000041c

0001441c <_i2c_slave_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_slave_read(
		struct i2c_slave_module *const module)
{
   1441c:	b580      	push	{r7, lr}
   1441e:	b084      	sub	sp, #16
   14420:	af00      	add	r7, sp, #0
   14422:	6078      	str	r0, [r7, #4]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
   14424:	687b      	ldr	r3, [r7, #4]
   14426:	681b      	ldr	r3, [r3, #0]
   14428:	60fb      	str	r3, [r7, #12]

	/* Read byte from master and put in buffer. */
	*(module->buffer++) = i2c_hw->DATA.reg;
   1442a:	687b      	ldr	r3, [r7, #4]
   1442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1442e:	1c59      	adds	r1, r3, #1
   14430:	687a      	ldr	r2, [r7, #4]
   14432:	6291      	str	r1, [r2, #40]	; 0x28
   14434:	68fa      	ldr	r2, [r7, #12]
   14436:	6992      	ldr	r2, [r2, #24]
   14438:	b2d2      	uxtb	r2, r2
   1443a:	701a      	strb	r2, [r3, #0]

	/*Decrement remaining buffer length */
	module->buffer_remaining--;
   1443c:	687b      	ldr	r3, [r7, #4]
   1443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14440:	b29b      	uxth	r3, r3
   14442:	3b01      	subs	r3, #1
   14444:	b29a      	uxth	r2, r3
   14446:	687b      	ldr	r3, [r7, #4]
   14448:	849a      	strh	r2, [r3, #36]	; 0x24
}
   1444a:	46bd      	mov	sp, r7
   1444c:	b004      	add	sp, #16
   1444e:	bd80      	pop	{r7, pc}

00014450 <_i2c_slave_write>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_slave_write(
		struct i2c_slave_module *const module)
{
   14450:	b580      	push	{r7, lr}
   14452:	b084      	sub	sp, #16
   14454:	af00      	add	r7, sp, #0
   14456:	6078      	str	r0, [r7, #4]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
   14458:	687b      	ldr	r3, [r7, #4]
   1445a:	681b      	ldr	r3, [r3, #0]
   1445c:	60fb      	str	r3, [r7, #12]

	/* Write byte from buffer to master */
	i2c_hw->DATA.reg = *(module->buffer++);
   1445e:	687b      	ldr	r3, [r7, #4]
   14460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14462:	1c59      	adds	r1, r3, #1
   14464:	687a      	ldr	r2, [r7, #4]
   14466:	6291      	str	r1, [r2, #40]	; 0x28
   14468:	781b      	ldrb	r3, [r3, #0]
   1446a:	b2da      	uxtb	r2, r3
   1446c:	68fb      	ldr	r3, [r7, #12]
   1446e:	761a      	strb	r2, [r3, #24]

	/*Decrement remaining buffer length */
	module->buffer_remaining--;
   14470:	687b      	ldr	r3, [r7, #4]
   14472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14474:	b29b      	uxth	r3, r3
   14476:	3b01      	subs	r3, #1
   14478:	b29a      	uxth	r2, r3
   1447a:	687b      	ldr	r3, [r7, #4]
   1447c:	849a      	strh	r2, [r3, #36]	; 0x24
}
   1447e:	46bd      	mov	sp, r7
   14480:	b004      	add	sp, #16
   14482:	bd80      	pop	{r7, pc}

00014484 <i2c_slave_register_callback>:
 */
void i2c_slave_register_callback(
		struct i2c_slave_module *const module,
		i2c_slave_callback_t callback,
		enum i2c_slave_callback callback_type)
{
   14484:	b590      	push	{r4, r7, lr}
   14486:	b087      	sub	sp, #28
   14488:	af02      	add	r7, sp, #8
   1448a:	60f8      	str	r0, [r7, #12]
   1448c:	60b9      	str	r1, [r7, #8]
   1448e:	1dfb      	adds	r3, r7, #7
   14490:	701a      	strb	r2, [r3, #0]
	/* Sanity check. */
	Assert(module);
   14492:	4b44      	ldr	r3, [pc, #272]	; (145a4 <i2c_slave_register_callback+0x120>)
   14494:	4798      	blx	r3
   14496:	1c03      	adds	r3, r0, #0
   14498:	2b00      	cmp	r3, #0
   1449a:	d011      	beq.n	144c0 <i2c_slave_register_callback+0x3c>
   1449c:	68fb      	ldr	r3, [r7, #12]
   1449e:	2b00      	cmp	r3, #0
   144a0:	d11b      	bne.n	144da <i2c_slave_register_callback+0x56>
   144a2:	4b40      	ldr	r3, [pc, #256]	; (145a4 <i2c_slave_register_callback+0x120>)
   144a4:	4798      	blx	r3
   144a6:	1c02      	adds	r2, r0, #0
   144a8:	4b3f      	ldr	r3, [pc, #252]	; (145a8 <i2c_slave_register_callback+0x124>)
   144aa:	4940      	ldr	r1, [pc, #256]	; (145ac <i2c_slave_register_callback+0x128>)
   144ac:	9100      	str	r1, [sp, #0]
   144ae:	4940      	ldr	r1, [pc, #256]	; (145b0 <i2c_slave_register_callback+0x12c>)
   144b0:	9101      	str	r1, [sp, #4]
   144b2:	1c10      	adds	r0, r2, #0
   144b4:	2101      	movs	r1, #1
   144b6:	1c1a      	adds	r2, r3, #0
   144b8:	2386      	movs	r3, #134	; 0x86
   144ba:	4c3e      	ldr	r4, [pc, #248]	; (145b4 <i2c_slave_register_callback+0x130>)
   144bc:	47a0      	blx	r4
   144be:	e00c      	b.n	144da <i2c_slave_register_callback+0x56>
   144c0:	68fb      	ldr	r3, [r7, #12]
   144c2:	2b00      	cmp	r3, #0
   144c4:	d109      	bne.n	144da <i2c_slave_register_callback+0x56>
   144c6:	493c      	ldr	r1, [pc, #240]	; (145b8 <i2c_slave_register_callback+0x134>)
   144c8:	4a39      	ldr	r2, [pc, #228]	; (145b0 <i2c_slave_register_callback+0x12c>)
   144ca:	4b37      	ldr	r3, [pc, #220]	; (145a8 <i2c_slave_register_callback+0x124>)
   144cc:	1c08      	adds	r0, r1, #0
   144ce:	1c11      	adds	r1, r2, #0
   144d0:	1c1a      	adds	r2, r3, #0
   144d2:	2386      	movs	r3, #134	; 0x86
   144d4:	4c39      	ldr	r4, [pc, #228]	; (145bc <i2c_slave_register_callback+0x138>)
   144d6:	47a0      	blx	r4
   144d8:	e7fe      	b.n	144d8 <i2c_slave_register_callback+0x54>
	Assert(module->hw);
   144da:	4b32      	ldr	r3, [pc, #200]	; (145a4 <i2c_slave_register_callback+0x120>)
   144dc:	4798      	blx	r3
   144de:	1c03      	adds	r3, r0, #0
   144e0:	2b00      	cmp	r3, #0
   144e2:	d012      	beq.n	1450a <i2c_slave_register_callback+0x86>
   144e4:	68fb      	ldr	r3, [r7, #12]
   144e6:	681b      	ldr	r3, [r3, #0]
   144e8:	2b00      	cmp	r3, #0
   144ea:	d11c      	bne.n	14526 <i2c_slave_register_callback+0xa2>
   144ec:	4b2d      	ldr	r3, [pc, #180]	; (145a4 <i2c_slave_register_callback+0x120>)
   144ee:	4798      	blx	r3
   144f0:	1c02      	adds	r2, r0, #0
   144f2:	4b2d      	ldr	r3, [pc, #180]	; (145a8 <i2c_slave_register_callback+0x124>)
   144f4:	492d      	ldr	r1, [pc, #180]	; (145ac <i2c_slave_register_callback+0x128>)
   144f6:	9100      	str	r1, [sp, #0]
   144f8:	4931      	ldr	r1, [pc, #196]	; (145c0 <i2c_slave_register_callback+0x13c>)
   144fa:	9101      	str	r1, [sp, #4]
   144fc:	1c10      	adds	r0, r2, #0
   144fe:	2101      	movs	r1, #1
   14500:	1c1a      	adds	r2, r3, #0
   14502:	2387      	movs	r3, #135	; 0x87
   14504:	4c2b      	ldr	r4, [pc, #172]	; (145b4 <i2c_slave_register_callback+0x130>)
   14506:	47a0      	blx	r4
   14508:	e00d      	b.n	14526 <i2c_slave_register_callback+0xa2>
   1450a:	68fb      	ldr	r3, [r7, #12]
   1450c:	681b      	ldr	r3, [r3, #0]
   1450e:	2b00      	cmp	r3, #0
   14510:	d109      	bne.n	14526 <i2c_slave_register_callback+0xa2>
   14512:	4929      	ldr	r1, [pc, #164]	; (145b8 <i2c_slave_register_callback+0x134>)
   14514:	4a2a      	ldr	r2, [pc, #168]	; (145c0 <i2c_slave_register_callback+0x13c>)
   14516:	4b24      	ldr	r3, [pc, #144]	; (145a8 <i2c_slave_register_callback+0x124>)
   14518:	1c08      	adds	r0, r1, #0
   1451a:	1c11      	adds	r1, r2, #0
   1451c:	1c1a      	adds	r2, r3, #0
   1451e:	2387      	movs	r3, #135	; 0x87
   14520:	4c26      	ldr	r4, [pc, #152]	; (145bc <i2c_slave_register_callback+0x138>)
   14522:	47a0      	blx	r4
   14524:	e7fe      	b.n	14524 <i2c_slave_register_callback+0xa0>
	Assert(callback);
   14526:	4b1f      	ldr	r3, [pc, #124]	; (145a4 <i2c_slave_register_callback+0x120>)
   14528:	4798      	blx	r3
   1452a:	1c03      	adds	r3, r0, #0
   1452c:	2b00      	cmp	r3, #0
   1452e:	d011      	beq.n	14554 <i2c_slave_register_callback+0xd0>
   14530:	68bb      	ldr	r3, [r7, #8]
   14532:	2b00      	cmp	r3, #0
   14534:	d11b      	bne.n	1456e <i2c_slave_register_callback+0xea>
   14536:	4b1b      	ldr	r3, [pc, #108]	; (145a4 <i2c_slave_register_callback+0x120>)
   14538:	4798      	blx	r3
   1453a:	1c02      	adds	r2, r0, #0
   1453c:	4b1a      	ldr	r3, [pc, #104]	; (145a8 <i2c_slave_register_callback+0x124>)
   1453e:	491b      	ldr	r1, [pc, #108]	; (145ac <i2c_slave_register_callback+0x128>)
   14540:	9100      	str	r1, [sp, #0]
   14542:	4920      	ldr	r1, [pc, #128]	; (145c4 <i2c_slave_register_callback+0x140>)
   14544:	9101      	str	r1, [sp, #4]
   14546:	1c10      	adds	r0, r2, #0
   14548:	2101      	movs	r1, #1
   1454a:	1c1a      	adds	r2, r3, #0
   1454c:	2388      	movs	r3, #136	; 0x88
   1454e:	4c19      	ldr	r4, [pc, #100]	; (145b4 <i2c_slave_register_callback+0x130>)
   14550:	47a0      	blx	r4
   14552:	e00c      	b.n	1456e <i2c_slave_register_callback+0xea>
   14554:	68bb      	ldr	r3, [r7, #8]
   14556:	2b00      	cmp	r3, #0
   14558:	d109      	bne.n	1456e <i2c_slave_register_callback+0xea>
   1455a:	4917      	ldr	r1, [pc, #92]	; (145b8 <i2c_slave_register_callback+0x134>)
   1455c:	4a19      	ldr	r2, [pc, #100]	; (145c4 <i2c_slave_register_callback+0x140>)
   1455e:	4b12      	ldr	r3, [pc, #72]	; (145a8 <i2c_slave_register_callback+0x124>)
   14560:	1c08      	adds	r0, r1, #0
   14562:	1c11      	adds	r1, r2, #0
   14564:	1c1a      	adds	r2, r3, #0
   14566:	2388      	movs	r3, #136	; 0x88
   14568:	4c14      	ldr	r4, [pc, #80]	; (145bc <i2c_slave_register_callback+0x138>)
   1456a:	47a0      	blx	r4
   1456c:	e7fe      	b.n	1456c <i2c_slave_register_callback+0xe8>

	/* Register callback. */
	module->callbacks[callback_type] = callback;
   1456e:	1dfb      	adds	r3, r7, #7
   14570:	781a      	ldrb	r2, [r3, #0]
   14572:	68fb      	ldr	r3, [r7, #12]
   14574:	3202      	adds	r2, #2
   14576:	0092      	lsls	r2, r2, #2
   14578:	68b9      	ldr	r1, [r7, #8]
   1457a:	50d1      	str	r1, [r2, r3]

	/* Set corresponding bit to set callback as initiated. */
	module->registered_callback |= (1 << callback_type);
   1457c:	68fb      	ldr	r3, [r7, #12]
   1457e:	6a1b      	ldr	r3, [r3, #32]
   14580:	b2db      	uxtb	r3, r3
   14582:	b2da      	uxtb	r2, r3
   14584:	1dfb      	adds	r3, r7, #7
   14586:	781b      	ldrb	r3, [r3, #0]
   14588:	2101      	movs	r1, #1
   1458a:	1c08      	adds	r0, r1, #0
   1458c:	4098      	lsls	r0, r3
   1458e:	1c03      	adds	r3, r0, #0
   14590:	b2db      	uxtb	r3, r3
   14592:	4313      	orrs	r3, r2
   14594:	b2db      	uxtb	r3, r3
   14596:	b2d9      	uxtb	r1, r3
   14598:	68fa      	ldr	r2, [r7, #12]
   1459a:	2320      	movs	r3, #32
   1459c:	54d1      	strb	r1, [r2, r3]
}
   1459e:	46bd      	mov	sp, r7
   145a0:	b005      	add	sp, #20
   145a2:	bd90      	pop	{r4, r7, pc}
   145a4:	00014409 	.word	0x00014409
   145a8:	0002660c 	.word	0x0002660c
   145ac:	000265bc 	.word	0x000265bc
   145b0:	000265d4 	.word	0x000265d4
   145b4:	000106e9 	.word	0x000106e9
   145b8:	000265dc 	.word	0x000265dc
   145bc:	0001b62d 	.word	0x0001b62d
   145c0:	00026600 	.word	0x00026600
   145c4:	00026648 	.word	0x00026648

000145c8 <i2c_slave_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_slave_read_packet_job(
		struct i2c_slave_module *const module,
		struct i2c_packet *const packet)
{
   145c8:	b590      	push	{r4, r7, lr}
   145ca:	b087      	sub	sp, #28
   145cc:	af02      	add	r7, sp, #8
   145ce:	6078      	str	r0, [r7, #4]
   145d0:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module); //RER
   145d2:	4b48      	ldr	r3, [pc, #288]	; (146f4 <i2c_slave_read_packet_job+0x12c>)
   145d4:	4798      	blx	r3
   145d6:	1c03      	adds	r3, r0, #0
   145d8:	2b00      	cmp	r3, #0
   145da:	d011      	beq.n	14600 <i2c_slave_read_packet_job+0x38>
   145dc:	687b      	ldr	r3, [r7, #4]
   145de:	2b00      	cmp	r3, #0
   145e0:	d11b      	bne.n	1461a <i2c_slave_read_packet_job+0x52>
   145e2:	4b44      	ldr	r3, [pc, #272]	; (146f4 <i2c_slave_read_packet_job+0x12c>)
   145e4:	4798      	blx	r3
   145e6:	1c02      	adds	r2, r0, #0
   145e8:	4b43      	ldr	r3, [pc, #268]	; (146f8 <i2c_slave_read_packet_job+0x130>)
   145ea:	4944      	ldr	r1, [pc, #272]	; (146fc <i2c_slave_read_packet_job+0x134>)
   145ec:	9100      	str	r1, [sp, #0]
   145ee:	4944      	ldr	r1, [pc, #272]	; (14700 <i2c_slave_read_packet_job+0x138>)
   145f0:	9101      	str	r1, [sp, #4]
   145f2:	1c10      	adds	r0, r2, #0
   145f4:	2101      	movs	r1, #1
   145f6:	1c1a      	adds	r2, r3, #0
   145f8:	23be      	movs	r3, #190	; 0xbe
   145fa:	4c42      	ldr	r4, [pc, #264]	; (14704 <i2c_slave_read_packet_job+0x13c>)
   145fc:	47a0      	blx	r4
   145fe:	e00c      	b.n	1461a <i2c_slave_read_packet_job+0x52>
   14600:	687b      	ldr	r3, [r7, #4]
   14602:	2b00      	cmp	r3, #0
   14604:	d109      	bne.n	1461a <i2c_slave_read_packet_job+0x52>
   14606:	4940      	ldr	r1, [pc, #256]	; (14708 <i2c_slave_read_packet_job+0x140>)
   14608:	4a3d      	ldr	r2, [pc, #244]	; (14700 <i2c_slave_read_packet_job+0x138>)
   1460a:	4b3b      	ldr	r3, [pc, #236]	; (146f8 <i2c_slave_read_packet_job+0x130>)
   1460c:	1c08      	adds	r0, r1, #0
   1460e:	1c11      	adds	r1, r2, #0
   14610:	1c1a      	adds	r2, r3, #0
   14612:	23be      	movs	r3, #190	; 0xbe
   14614:	4c3d      	ldr	r4, [pc, #244]	; (1470c <i2c_slave_read_packet_job+0x144>)
   14616:	47a0      	blx	r4
   14618:	e7fe      	b.n	14618 <i2c_slave_read_packet_job+0x50>
	Assert(module->hw);
   1461a:	4b36      	ldr	r3, [pc, #216]	; (146f4 <i2c_slave_read_packet_job+0x12c>)
   1461c:	4798      	blx	r3
   1461e:	1c03      	adds	r3, r0, #0
   14620:	2b00      	cmp	r3, #0
   14622:	d012      	beq.n	1464a <i2c_slave_read_packet_job+0x82>
   14624:	687b      	ldr	r3, [r7, #4]
   14626:	681b      	ldr	r3, [r3, #0]
   14628:	2b00      	cmp	r3, #0
   1462a:	d11c      	bne.n	14666 <i2c_slave_read_packet_job+0x9e>
   1462c:	4b31      	ldr	r3, [pc, #196]	; (146f4 <i2c_slave_read_packet_job+0x12c>)
   1462e:	4798      	blx	r3
   14630:	1c02      	adds	r2, r0, #0
   14632:	4b31      	ldr	r3, [pc, #196]	; (146f8 <i2c_slave_read_packet_job+0x130>)
   14634:	4931      	ldr	r1, [pc, #196]	; (146fc <i2c_slave_read_packet_job+0x134>)
   14636:	9100      	str	r1, [sp, #0]
   14638:	4935      	ldr	r1, [pc, #212]	; (14710 <i2c_slave_read_packet_job+0x148>)
   1463a:	9101      	str	r1, [sp, #4]
   1463c:	1c10      	adds	r0, r2, #0
   1463e:	2101      	movs	r1, #1
   14640:	1c1a      	adds	r2, r3, #0
   14642:	23bf      	movs	r3, #191	; 0xbf
   14644:	4c2f      	ldr	r4, [pc, #188]	; (14704 <i2c_slave_read_packet_job+0x13c>)
   14646:	47a0      	blx	r4
   14648:	e00d      	b.n	14666 <i2c_slave_read_packet_job+0x9e>
   1464a:	687b      	ldr	r3, [r7, #4]
   1464c:	681b      	ldr	r3, [r3, #0]
   1464e:	2b00      	cmp	r3, #0
   14650:	d109      	bne.n	14666 <i2c_slave_read_packet_job+0x9e>
   14652:	492d      	ldr	r1, [pc, #180]	; (14708 <i2c_slave_read_packet_job+0x140>)
   14654:	4a2e      	ldr	r2, [pc, #184]	; (14710 <i2c_slave_read_packet_job+0x148>)
   14656:	4b28      	ldr	r3, [pc, #160]	; (146f8 <i2c_slave_read_packet_job+0x130>)
   14658:	1c08      	adds	r0, r1, #0
   1465a:	1c11      	adds	r1, r2, #0
   1465c:	1c1a      	adds	r2, r3, #0
   1465e:	23bf      	movs	r3, #191	; 0xbf
   14660:	4c2a      	ldr	r4, [pc, #168]	; (1470c <i2c_slave_read_packet_job+0x144>)
   14662:	47a0      	blx	r4
   14664:	e7fe      	b.n	14664 <i2c_slave_read_packet_job+0x9c>
	Assert(packet);
   14666:	4b23      	ldr	r3, [pc, #140]	; (146f4 <i2c_slave_read_packet_job+0x12c>)
   14668:	4798      	blx	r3
   1466a:	1c03      	adds	r3, r0, #0
   1466c:	2b00      	cmp	r3, #0
   1466e:	d011      	beq.n	14694 <i2c_slave_read_packet_job+0xcc>
   14670:	683b      	ldr	r3, [r7, #0]
   14672:	2b00      	cmp	r3, #0
   14674:	d11b      	bne.n	146ae <i2c_slave_read_packet_job+0xe6>
   14676:	4b1f      	ldr	r3, [pc, #124]	; (146f4 <i2c_slave_read_packet_job+0x12c>)
   14678:	4798      	blx	r3
   1467a:	1c02      	adds	r2, r0, #0
   1467c:	4b1e      	ldr	r3, [pc, #120]	; (146f8 <i2c_slave_read_packet_job+0x130>)
   1467e:	491f      	ldr	r1, [pc, #124]	; (146fc <i2c_slave_read_packet_job+0x134>)
   14680:	9100      	str	r1, [sp, #0]
   14682:	4924      	ldr	r1, [pc, #144]	; (14714 <i2c_slave_read_packet_job+0x14c>)
   14684:	9101      	str	r1, [sp, #4]
   14686:	1c10      	adds	r0, r2, #0
   14688:	2101      	movs	r1, #1
   1468a:	1c1a      	adds	r2, r3, #0
   1468c:	23c0      	movs	r3, #192	; 0xc0
   1468e:	4c1d      	ldr	r4, [pc, #116]	; (14704 <i2c_slave_read_packet_job+0x13c>)
   14690:	47a0      	blx	r4
   14692:	e00c      	b.n	146ae <i2c_slave_read_packet_job+0xe6>
   14694:	683b      	ldr	r3, [r7, #0]
   14696:	2b00      	cmp	r3, #0
   14698:	d109      	bne.n	146ae <i2c_slave_read_packet_job+0xe6>
   1469a:	491b      	ldr	r1, [pc, #108]	; (14708 <i2c_slave_read_packet_job+0x140>)
   1469c:	4a1d      	ldr	r2, [pc, #116]	; (14714 <i2c_slave_read_packet_job+0x14c>)
   1469e:	4b16      	ldr	r3, [pc, #88]	; (146f8 <i2c_slave_read_packet_job+0x130>)
   146a0:	1c08      	adds	r0, r1, #0
   146a2:	1c11      	adds	r1, r2, #0
   146a4:	1c1a      	adds	r2, r3, #0
   146a6:	23c0      	movs	r3, #192	; 0xc0
   146a8:	4c18      	ldr	r4, [pc, #96]	; (1470c <i2c_slave_read_packet_job+0x144>)
   146aa:	47a0      	blx	r4
   146ac:	e7fe      	b.n	146ac <i2c_slave_read_packet_job+0xe4>

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
   146ae:	687b      	ldr	r3, [r7, #4]
   146b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   146b2:	b29b      	uxth	r3, r3
   146b4:	2b00      	cmp	r3, #0
   146b6:	d001      	beq.n	146bc <i2c_slave_read_packet_job+0xf4>
		return STATUS_BUSY;
   146b8:	2305      	movs	r3, #5
   146ba:	e016      	b.n	146ea <i2c_slave_read_packet_job+0x122>
	}

	/* Save packet to software module. */
	module->buffer           = packet->data;
   146bc:	683b      	ldr	r3, [r7, #0]
   146be:	685a      	ldr	r2, [r3, #4]
   146c0:	687b      	ldr	r3, [r7, #4]
   146c2:	629a      	str	r2, [r3, #40]	; 0x28
	module->buffer_remaining = packet->data_length;
   146c4:	683b      	ldr	r3, [r7, #0]
   146c6:	885a      	ldrh	r2, [r3, #2]
   146c8:	687b      	ldr	r3, [r7, #4]
   146ca:	849a      	strh	r2, [r3, #36]	; 0x24
	module->buffer_length    = packet->data_length;
   146cc:	683b      	ldr	r3, [r7, #0]
   146ce:	885a      	ldrh	r2, [r3, #2]
   146d0:	687b      	ldr	r3, [r7, #4]
   146d2:	845a      	strh	r2, [r3, #34]	; 0x22
	module->status           = STATUS_BUSY;
   146d4:	687a      	ldr	r2, [r7, #4]
   146d6:	232d      	movs	r3, #45	; 0x2d
   146d8:	2105      	movs	r1, #5
   146da:	54d1      	strb	r1, [r2, r3]

	/* Enable interrupts */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
   146dc:	687b      	ldr	r3, [r7, #4]
   146de:	681b      	ldr	r3, [r3, #0]
   146e0:	60fb      	str	r3, [r7, #12]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
   146e2:	68fb      	ldr	r3, [r7, #12]
   146e4:	2207      	movs	r2, #7
   146e6:	735a      	strb	r2, [r3, #13]
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;


	/* Read will begin when master initiates the transfer */
	return STATUS_OK;
   146e8:	2300      	movs	r3, #0
}
   146ea:	1c18      	adds	r0, r3, #0
   146ec:	46bd      	mov	sp, r7
   146ee:	b005      	add	sp, #20
   146f0:	bd90      	pop	{r4, r7, pc}
   146f2:	46c0      	nop			; (mov r8, r8)
   146f4:	00014409 	.word	0x00014409
   146f8:	0002660c 	.word	0x0002660c
   146fc:	000265bc 	.word	0x000265bc
   14700:	000265d4 	.word	0x000265d4
   14704:	000106e9 	.word	0x000106e9
   14708:	000265dc 	.word	0x000265dc
   1470c:	0001b62d 	.word	0x0001b62d
   14710:	00026600 	.word	0x00026600
   14714:	00026654 	.word	0x00026654

00014718 <i2c_slave_write_packet_job>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
enum status_code i2c_slave_write_packet_job(
		struct i2c_slave_module *const module,
		struct i2c_packet *const packet)
{
   14718:	b590      	push	{r4, r7, lr}
   1471a:	b087      	sub	sp, #28
   1471c:	af02      	add	r7, sp, #8
   1471e:	6078      	str	r0, [r7, #4]
   14720:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
   14722:	4b48      	ldr	r3, [pc, #288]	; (14844 <i2c_slave_write_packet_job+0x12c>)
   14724:	4798      	blx	r3
   14726:	1c03      	adds	r3, r0, #0
   14728:	2b00      	cmp	r3, #0
   1472a:	d011      	beq.n	14750 <i2c_slave_write_packet_job+0x38>
   1472c:	687b      	ldr	r3, [r7, #4]
   1472e:	2b00      	cmp	r3, #0
   14730:	d11b      	bne.n	1476a <i2c_slave_write_packet_job+0x52>
   14732:	4b44      	ldr	r3, [pc, #272]	; (14844 <i2c_slave_write_packet_job+0x12c>)
   14734:	4798      	blx	r3
   14736:	1c02      	adds	r2, r0, #0
   14738:	4b43      	ldr	r3, [pc, #268]	; (14848 <i2c_slave_write_packet_job+0x130>)
   1473a:	4944      	ldr	r1, [pc, #272]	; (1484c <i2c_slave_write_packet_job+0x134>)
   1473c:	9100      	str	r1, [sp, #0]
   1473e:	4944      	ldr	r1, [pc, #272]	; (14850 <i2c_slave_write_packet_job+0x138>)
   14740:	9101      	str	r1, [sp, #4]
   14742:	1c10      	adds	r0, r2, #0
   14744:	2101      	movs	r1, #1
   14746:	1c1a      	adds	r2, r3, #0
   14748:	23ec      	movs	r3, #236	; 0xec
   1474a:	4c42      	ldr	r4, [pc, #264]	; (14854 <i2c_slave_write_packet_job+0x13c>)
   1474c:	47a0      	blx	r4
   1474e:	e00c      	b.n	1476a <i2c_slave_write_packet_job+0x52>
   14750:	687b      	ldr	r3, [r7, #4]
   14752:	2b00      	cmp	r3, #0
   14754:	d109      	bne.n	1476a <i2c_slave_write_packet_job+0x52>
   14756:	4940      	ldr	r1, [pc, #256]	; (14858 <i2c_slave_write_packet_job+0x140>)
   14758:	4a3d      	ldr	r2, [pc, #244]	; (14850 <i2c_slave_write_packet_job+0x138>)
   1475a:	4b3b      	ldr	r3, [pc, #236]	; (14848 <i2c_slave_write_packet_job+0x130>)
   1475c:	1c08      	adds	r0, r1, #0
   1475e:	1c11      	adds	r1, r2, #0
   14760:	1c1a      	adds	r2, r3, #0
   14762:	23ec      	movs	r3, #236	; 0xec
   14764:	4c3d      	ldr	r4, [pc, #244]	; (1485c <i2c_slave_write_packet_job+0x144>)
   14766:	47a0      	blx	r4
   14768:	e7fe      	b.n	14768 <i2c_slave_write_packet_job+0x50>
	Assert(module->hw);
   1476a:	4b36      	ldr	r3, [pc, #216]	; (14844 <i2c_slave_write_packet_job+0x12c>)
   1476c:	4798      	blx	r3
   1476e:	1c03      	adds	r3, r0, #0
   14770:	2b00      	cmp	r3, #0
   14772:	d012      	beq.n	1479a <i2c_slave_write_packet_job+0x82>
   14774:	687b      	ldr	r3, [r7, #4]
   14776:	681b      	ldr	r3, [r3, #0]
   14778:	2b00      	cmp	r3, #0
   1477a:	d11c      	bne.n	147b6 <i2c_slave_write_packet_job+0x9e>
   1477c:	4b31      	ldr	r3, [pc, #196]	; (14844 <i2c_slave_write_packet_job+0x12c>)
   1477e:	4798      	blx	r3
   14780:	1c02      	adds	r2, r0, #0
   14782:	4b31      	ldr	r3, [pc, #196]	; (14848 <i2c_slave_write_packet_job+0x130>)
   14784:	4931      	ldr	r1, [pc, #196]	; (1484c <i2c_slave_write_packet_job+0x134>)
   14786:	9100      	str	r1, [sp, #0]
   14788:	4935      	ldr	r1, [pc, #212]	; (14860 <i2c_slave_write_packet_job+0x148>)
   1478a:	9101      	str	r1, [sp, #4]
   1478c:	1c10      	adds	r0, r2, #0
   1478e:	2101      	movs	r1, #1
   14790:	1c1a      	adds	r2, r3, #0
   14792:	23ed      	movs	r3, #237	; 0xed
   14794:	4c2f      	ldr	r4, [pc, #188]	; (14854 <i2c_slave_write_packet_job+0x13c>)
   14796:	47a0      	blx	r4
   14798:	e00d      	b.n	147b6 <i2c_slave_write_packet_job+0x9e>
   1479a:	687b      	ldr	r3, [r7, #4]
   1479c:	681b      	ldr	r3, [r3, #0]
   1479e:	2b00      	cmp	r3, #0
   147a0:	d109      	bne.n	147b6 <i2c_slave_write_packet_job+0x9e>
   147a2:	492d      	ldr	r1, [pc, #180]	; (14858 <i2c_slave_write_packet_job+0x140>)
   147a4:	4a2e      	ldr	r2, [pc, #184]	; (14860 <i2c_slave_write_packet_job+0x148>)
   147a6:	4b28      	ldr	r3, [pc, #160]	; (14848 <i2c_slave_write_packet_job+0x130>)
   147a8:	1c08      	adds	r0, r1, #0
   147aa:	1c11      	adds	r1, r2, #0
   147ac:	1c1a      	adds	r2, r3, #0
   147ae:	23ed      	movs	r3, #237	; 0xed
   147b0:	4c2a      	ldr	r4, [pc, #168]	; (1485c <i2c_slave_write_packet_job+0x144>)
   147b2:	47a0      	blx	r4
   147b4:	e7fe      	b.n	147b4 <i2c_slave_write_packet_job+0x9c>
	Assert(packet);
   147b6:	4b23      	ldr	r3, [pc, #140]	; (14844 <i2c_slave_write_packet_job+0x12c>)
   147b8:	4798      	blx	r3
   147ba:	1c03      	adds	r3, r0, #0
   147bc:	2b00      	cmp	r3, #0
   147be:	d011      	beq.n	147e4 <i2c_slave_write_packet_job+0xcc>
   147c0:	683b      	ldr	r3, [r7, #0]
   147c2:	2b00      	cmp	r3, #0
   147c4:	d11b      	bne.n	147fe <i2c_slave_write_packet_job+0xe6>
   147c6:	4b1f      	ldr	r3, [pc, #124]	; (14844 <i2c_slave_write_packet_job+0x12c>)
   147c8:	4798      	blx	r3
   147ca:	1c02      	adds	r2, r0, #0
   147cc:	4b1e      	ldr	r3, [pc, #120]	; (14848 <i2c_slave_write_packet_job+0x130>)
   147ce:	491f      	ldr	r1, [pc, #124]	; (1484c <i2c_slave_write_packet_job+0x134>)
   147d0:	9100      	str	r1, [sp, #0]
   147d2:	4924      	ldr	r1, [pc, #144]	; (14864 <i2c_slave_write_packet_job+0x14c>)
   147d4:	9101      	str	r1, [sp, #4]
   147d6:	1c10      	adds	r0, r2, #0
   147d8:	2101      	movs	r1, #1
   147da:	1c1a      	adds	r2, r3, #0
   147dc:	23ee      	movs	r3, #238	; 0xee
   147de:	4c1d      	ldr	r4, [pc, #116]	; (14854 <i2c_slave_write_packet_job+0x13c>)
   147e0:	47a0      	blx	r4
   147e2:	e00c      	b.n	147fe <i2c_slave_write_packet_job+0xe6>
   147e4:	683b      	ldr	r3, [r7, #0]
   147e6:	2b00      	cmp	r3, #0
   147e8:	d109      	bne.n	147fe <i2c_slave_write_packet_job+0xe6>
   147ea:	491b      	ldr	r1, [pc, #108]	; (14858 <i2c_slave_write_packet_job+0x140>)
   147ec:	4a1d      	ldr	r2, [pc, #116]	; (14864 <i2c_slave_write_packet_job+0x14c>)
   147ee:	4b16      	ldr	r3, [pc, #88]	; (14848 <i2c_slave_write_packet_job+0x130>)
   147f0:	1c08      	adds	r0, r1, #0
   147f2:	1c11      	adds	r1, r2, #0
   147f4:	1c1a      	adds	r2, r3, #0
   147f6:	23ee      	movs	r3, #238	; 0xee
   147f8:	4c18      	ldr	r4, [pc, #96]	; (1485c <i2c_slave_write_packet_job+0x144>)
   147fa:	47a0      	blx	r4
   147fc:	e7fe      	b.n	147fc <i2c_slave_write_packet_job+0xe4>

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
   147fe:	687b      	ldr	r3, [r7, #4]
   14800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14802:	b29b      	uxth	r3, r3
   14804:	2b00      	cmp	r3, #0
   14806:	d001      	beq.n	1480c <i2c_slave_write_packet_job+0xf4>
		return STATUS_BUSY;
   14808:	2305      	movs	r3, #5
   1480a:	e016      	b.n	1483a <i2c_slave_write_packet_job+0x122>
	}

	/* Save packet to software module. */
	module->buffer           = packet->data;
   1480c:	683b      	ldr	r3, [r7, #0]
   1480e:	685a      	ldr	r2, [r3, #4]
   14810:	687b      	ldr	r3, [r7, #4]
   14812:	629a      	str	r2, [r3, #40]	; 0x28
	module->buffer_remaining = packet->data_length;
   14814:	683b      	ldr	r3, [r7, #0]
   14816:	885a      	ldrh	r2, [r3, #2]
   14818:	687b      	ldr	r3, [r7, #4]
   1481a:	849a      	strh	r2, [r3, #36]	; 0x24
	module->buffer_length    = packet->data_length;
   1481c:	683b      	ldr	r3, [r7, #0]
   1481e:	885a      	ldrh	r2, [r3, #2]
   14820:	687b      	ldr	r3, [r7, #4]
   14822:	845a      	strh	r2, [r3, #34]	; 0x22
	module->status           = STATUS_BUSY;
   14824:	687a      	ldr	r2, [r7, #4]
   14826:	232d      	movs	r3, #45	; 0x2d
   14828:	2105      	movs	r1, #5
   1482a:	54d1      	strb	r1, [r2, r3]

	/* Enable interrupts */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
   1482c:	687b      	ldr	r3, [r7, #4]
   1482e:	681b      	ldr	r3, [r3, #0]
   14830:	60fb      	str	r3, [r7, #12]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
   14832:	68fb      	ldr	r3, [r7, #12]
   14834:	2207      	movs	r2, #7
   14836:	735a      	strb	r2, [r3, #13]
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	return STATUS_OK;
   14838:	2300      	movs	r3, #0
}
   1483a:	1c18      	adds	r0, r3, #0
   1483c:	46bd      	mov	sp, r7
   1483e:	b005      	add	sp, #20
   14840:	bd90      	pop	{r4, r7, pc}
   14842:	46c0      	nop			; (mov r8, r8)
   14844:	00014409 	.word	0x00014409
   14848:	0002660c 	.word	0x0002660c
   1484c:	000265bc 	.word	0x000265bc
   14850:	000265d4 	.word	0x000265d4
   14854:	000106e9 	.word	0x000106e9
   14858:	000265dc 	.word	0x000265dc
   1485c:	0001b62d 	.word	0x0001b62d
   14860:	00026600 	.word	0x00026600
   14864:	00026654 	.word	0x00026654

00014868 <_i2c_slave_interrupt_handler>:
 *
 * \param[in] instance Sercom instance that triggered the interrupt
 */
void _i2c_slave_interrupt_handler(
		uint8_t instance)
{
   14868:	b590      	push	{r4, r7, lr}
   1486a:	b089      	sub	sp, #36	; 0x24
   1486c:	af02      	add	r7, sp, #8
   1486e:	1c02      	adds	r2, r0, #0
   14870:	1dfb      	adds	r3, r7, #7
   14872:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling. */
	struct i2c_slave_module *module =
			(struct i2c_slave_module*)_sercom_instances[instance];
   14874:	1dfb      	adds	r3, r7, #7
   14876:	781a      	ldrb	r2, [r3, #0]
 */
void _i2c_slave_interrupt_handler(
		uint8_t instance)
{
	/* Get software module for callback handling. */
	struct i2c_slave_module *module =
   14878:	4bb6      	ldr	r3, [pc, #728]	; (14b54 <_i2c_slave_interrupt_handler+0x2ec>)
   1487a:	0092      	lsls	r2, r2, #2
   1487c:	58d3      	ldr	r3, [r2, r3]
   1487e:	617b      	str	r3, [r7, #20]
			(struct i2c_slave_module*)_sercom_instances[instance];

	Assert(module);
   14880:	4bb5      	ldr	r3, [pc, #724]	; (14b58 <_i2c_slave_interrupt_handler+0x2f0>)
   14882:	4798      	blx	r3
   14884:	1c03      	adds	r3, r0, #0
   14886:	2b00      	cmp	r3, #0
   14888:	d011      	beq.n	148ae <_i2c_slave_interrupt_handler+0x46>
   1488a:	697b      	ldr	r3, [r7, #20]
   1488c:	2b00      	cmp	r3, #0
   1488e:	d119      	bne.n	148c4 <_i2c_slave_interrupt_handler+0x5c>
   14890:	4bb1      	ldr	r3, [pc, #708]	; (14b58 <_i2c_slave_interrupt_handler+0x2f0>)
   14892:	4798      	blx	r3
   14894:	1c01      	adds	r1, r0, #0
   14896:	4ab1      	ldr	r2, [pc, #708]	; (14b5c <_i2c_slave_interrupt_handler+0x2f4>)
   14898:	2310      	movs	r3, #16
   1489a:	33ff      	adds	r3, #255	; 0xff
   1489c:	48b0      	ldr	r0, [pc, #704]	; (14b60 <_i2c_slave_interrupt_handler+0x2f8>)
   1489e:	9000      	str	r0, [sp, #0]
   148a0:	48b0      	ldr	r0, [pc, #704]	; (14b64 <_i2c_slave_interrupt_handler+0x2fc>)
   148a2:	9001      	str	r0, [sp, #4]
   148a4:	1c08      	adds	r0, r1, #0
   148a6:	2101      	movs	r1, #1
   148a8:	4caf      	ldr	r4, [pc, #700]	; (14b68 <_i2c_slave_interrupt_handler+0x300>)
   148aa:	47a0      	blx	r4
   148ac:	e00a      	b.n	148c4 <_i2c_slave_interrupt_handler+0x5c>
   148ae:	697b      	ldr	r3, [r7, #20]
   148b0:	2b00      	cmp	r3, #0
   148b2:	d107      	bne.n	148c4 <_i2c_slave_interrupt_handler+0x5c>
   148b4:	48ad      	ldr	r0, [pc, #692]	; (14b6c <_i2c_slave_interrupt_handler+0x304>)
   148b6:	49ab      	ldr	r1, [pc, #684]	; (14b64 <_i2c_slave_interrupt_handler+0x2fc>)
   148b8:	4aa8      	ldr	r2, [pc, #672]	; (14b5c <_i2c_slave_interrupt_handler+0x2f4>)
   148ba:	2310      	movs	r3, #16
   148bc:	33ff      	adds	r3, #255	; 0xff
   148be:	4cac      	ldr	r4, [pc, #688]	; (14b70 <_i2c_slave_interrupt_handler+0x308>)
   148c0:	47a0      	blx	r4
   148c2:	e7fe      	b.n	148c2 <_i2c_slave_interrupt_handler+0x5a>

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
   148c4:	697b      	ldr	r3, [r7, #20]
   148c6:	681b      	ldr	r3, [r3, #0]
   148c8:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   148ca:	697b      	ldr	r3, [r7, #20]
   148cc:	6a1b      	ldr	r3, [r3, #32]
   148ce:	041b      	lsls	r3, r3, #16
   148d0:	0e1b      	lsrs	r3, r3, #24
   148d2:	b2da      	uxtb	r2, r3
   148d4:	697b      	ldr	r3, [r7, #20]
   148d6:	6a1b      	ldr	r3, [r3, #32]
   148d8:	b2d9      	uxtb	r1, r3
	Assert(module);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
   148da:	1c3b      	adds	r3, r7, #0
   148dc:	330f      	adds	r3, #15
   148de:	400a      	ands	r2, r1
   148e0:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;


	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH) {
   148e2:	693b      	ldr	r3, [r7, #16]
   148e4:	68db      	ldr	r3, [r3, #12]
   148e6:	021b      	lsls	r3, r3, #8
   148e8:	0e1b      	lsrs	r3, r3, #24
   148ea:	b2db      	uxtb	r3, r3
   148ec:	1c1a      	adds	r2, r3, #0
   148ee:	2302      	movs	r3, #2
   148f0:	4013      	ands	r3, r2
   148f2:	d100      	bne.n	148f6 <_i2c_slave_interrupt_handler+0x8e>
   148f4:	e0c5      	b.n	14a82 <_i2c_slave_interrupt_handler+0x21a>
	/* Address match */
		/* Check if last transfer is done - repeated start */
		if (module->buffer_length != module->buffer_remaining &&
   148f6:	697b      	ldr	r3, [r7, #20]
   148f8:	6a1b      	ldr	r3, [r3, #32]
   148fa:	0c1b      	lsrs	r3, r3, #16
   148fc:	b29a      	uxth	r2, r3
   148fe:	697b      	ldr	r3, [r7, #20]
   14900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14902:	b29b      	uxth	r3, r3
   14904:	429a      	cmp	r2, r3
   14906:	d01b      	beq.n	14940 <_i2c_slave_interrupt_handler+0xd8>
				module->transfer_direction == 0) {
   14908:	697b      	ldr	r3, [r7, #20]
   1490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1490c:	b2db      	uxtb	r3, r3


	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH) {
	/* Address match */
		/* Check if last transfer is done - repeated start */
		if (module->buffer_length != module->buffer_remaining &&
   1490e:	2b00      	cmp	r3, #0
   14910:	d116      	bne.n	14940 <_i2c_slave_interrupt_handler+0xd8>
				module->transfer_direction == 0) {

			module->status = STATUS_OK;
   14912:	697a      	ldr	r2, [r7, #20]
   14914:	232d      	movs	r3, #45	; 0x2d
   14916:	2100      	movs	r1, #0
   14918:	54d1      	strb	r1, [r2, r3]
			module->buffer_length = 0;
   1491a:	697b      	ldr	r3, [r7, #20]
   1491c:	2200      	movs	r2, #0
   1491e:	845a      	strh	r2, [r3, #34]	; 0x22
			module->buffer_remaining = 0;
   14920:	697b      	ldr	r3, [r7, #20]
   14922:	2200      	movs	r2, #0
   14924:	849a      	strh	r2, [r3, #36]	; 0x24

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))) {
   14926:	1c3b      	adds	r3, r7, #0
   14928:	330f      	adds	r3, #15
   1492a:	781a      	ldrb	r2, [r3, #0]
   1492c:	2302      	movs	r3, #2
   1492e:	4013      	ands	r3, r2
   14930:	d005      	beq.n	1493e <_i2c_slave_interrupt_handler+0xd6>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
   14932:	697b      	ldr	r3, [r7, #20]
   14934:	68db      	ldr	r3, [r3, #12]
   14936:	697a      	ldr	r2, [r7, #20]
   14938:	1c10      	adds	r0, r2, #0
   1493a:	4798      	blx	r3

			module->status = STATUS_OK;
			module->buffer_length = 0;
			module->buffer_remaining = 0;

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))) {
   1493c:	e023      	b.n	14986 <_i2c_slave_interrupt_handler+0x11e>
   1493e:	e022      	b.n	14986 <_i2c_slave_interrupt_handler+0x11e>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
			}
		} else if (module->buffer_length != module->buffer_remaining &&
   14940:	697b      	ldr	r3, [r7, #20]
   14942:	6a1b      	ldr	r3, [r3, #32]
   14944:	0c1b      	lsrs	r3, r3, #16
   14946:	b29a      	uxth	r2, r3
   14948:	697b      	ldr	r3, [r7, #20]
   1494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1494c:	b29b      	uxth	r3, r3
   1494e:	429a      	cmp	r2, r3
   14950:	d019      	beq.n	14986 <_i2c_slave_interrupt_handler+0x11e>
				module->transfer_direction == 1) {
   14952:	697b      	ldr	r3, [r7, #20]
   14954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14956:	b2db      	uxtb	r3, r3
			module->buffer_remaining = 0;

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))) {
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
			}
		} else if (module->buffer_length != module->buffer_remaining &&
   14958:	2b01      	cmp	r3, #1
   1495a:	d114      	bne.n	14986 <_i2c_slave_interrupt_handler+0x11e>
				module->transfer_direction == 1) {
			module->status = STATUS_OK;
   1495c:	697a      	ldr	r2, [r7, #20]
   1495e:	232d      	movs	r3, #45	; 0x2d
   14960:	2100      	movs	r1, #0
   14962:	54d1      	strb	r1, [r2, r3]
			module->buffer_length = 0;
   14964:	697b      	ldr	r3, [r7, #20]
   14966:	2200      	movs	r2, #0
   14968:	845a      	strh	r2, [r3, #34]	; 0x22
			module->buffer_remaining = 0;
   1496a:	697b      	ldr	r3, [r7, #20]
   1496c:	2200      	movs	r2, #0
   1496e:	849a      	strh	r2, [r3, #36]	; 0x24

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
   14970:	1c3b      	adds	r3, r7, #0
   14972:	330f      	adds	r3, #15
   14974:	781a      	ldrb	r2, [r3, #0]
   14976:	2301      	movs	r3, #1
   14978:	4013      	ands	r3, r2
   1497a:	d004      	beq.n	14986 <_i2c_slave_interrupt_handler+0x11e>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
   1497c:	697b      	ldr	r3, [r7, #20]
   1497e:	689b      	ldr	r3, [r3, #8]
   14980:	697a      	ldr	r2, [r7, #20]
   14982:	1c10      	adds	r0, r2, #0
   14984:	4798      	blx	r3
			}
		}

		if (i2c_hw->STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR ||
   14986:	693b      	ldr	r3, [r7, #16]
   14988:	691b      	ldr	r3, [r3, #16]
   1498a:	b29b      	uxth	r3, r3
   1498c:	1c1a      	adds	r2, r3, #0
   1498e:	2301      	movs	r3, #1
   14990:	4013      	ands	r3, r2
   14992:	d00e      	beq.n	149b2 <_i2c_slave_interrupt_handler+0x14a>
				SERCOM_I2CS_STATUS_COLL || SERCOM_I2CS_STATUS_LOWTOUT)) {
			/* An error occurred in last packet transfer */
			module->status = STATUS_ERR_IO;
   14994:	697a      	ldr	r2, [r7, #20]
   14996:	232d      	movs	r3, #45	; 0x2d
   14998:	2110      	movs	r1, #16
   1499a:	54d1      	strb	r1, [r2, r3]

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER))) {
   1499c:	1c3b      	adds	r3, r7, #0
   1499e:	330f      	adds	r3, #15
   149a0:	781a      	ldrb	r2, [r3, #0]
   149a2:	2320      	movs	r3, #32
   149a4:	4013      	ands	r3, r2
   149a6:	d004      	beq.n	149b2 <_i2c_slave_interrupt_handler+0x14a>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
   149a8:	697b      	ldr	r3, [r7, #20]
   149aa:	69db      	ldr	r3, [r3, #28]
   149ac:	697a      	ldr	r2, [r7, #20]
   149ae:	1c10      	adds	r0, r2, #0
   149b0:	4798      	blx	r3
			}
		}
		if (module->nack_on_address) {
   149b2:	697b      	ldr	r3, [r7, #20]
   149b4:	799b      	ldrb	r3, [r3, #6]
   149b6:	2b00      	cmp	r3, #0
   149b8:	d007      	beq.n	149ca <_i2c_slave_interrupt_handler+0x162>
			/* NACK address */
			i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_ACKACT;
   149ba:	693b      	ldr	r3, [r7, #16]
   149bc:	685b      	ldr	r3, [r3, #4]
   149be:	2280      	movs	r2, #128	; 0x80
   149c0:	02d2      	lsls	r2, r2, #11
   149c2:	431a      	orrs	r2, r3
   149c4:	693b      	ldr	r3, [r7, #16]
   149c6:	605a      	str	r2, [r3, #4]
   149c8:	e04d      	b.n	14a66 <_i2c_slave_interrupt_handler+0x1fe>
		} else if (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_DIR) {
   149ca:	693b      	ldr	r3, [r7, #16]
   149cc:	691b      	ldr	r3, [r3, #16]
   149ce:	b29b      	uxth	r3, r3
   149d0:	1c1a      	adds	r2, r3, #0
   149d2:	2308      	movs	r3, #8
   149d4:	4013      	ands	r3, r2
   149d6:	d023      	beq.n	14a20 <_i2c_slave_interrupt_handler+0x1b8>
			/* Set transfer direction in module instance */
			module->transfer_direction = 1;
   149d8:	697a      	ldr	r2, [r7, #20]
   149da:	232c      	movs	r3, #44	; 0x2c
   149dc:	2101      	movs	r1, #1
   149de:	54d1      	strb	r1, [r2, r3]

			/* Read request from master */
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST)) {
   149e0:	1c3b      	adds	r3, r7, #0
   149e2:	330f      	adds	r3, #15
   149e4:	781a      	ldrb	r2, [r3, #0]
   149e6:	2304      	movs	r3, #4
   149e8:	4013      	ands	r3, r2
   149ea:	d004      	beq.n	149f6 <_i2c_slave_interrupt_handler+0x18e>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
   149ec:	697b      	ldr	r3, [r7, #20]
   149ee:	691b      	ldr	r3, [r3, #16]
   149f0:	697a      	ldr	r2, [r7, #20]
   149f2:	1c10      	adds	r0, r2, #0
   149f4:	4798      	blx	r3
			}

			if (module->buffer_length == 0) {
   149f6:	697b      	ldr	r3, [r7, #20]
   149f8:	6a1b      	ldr	r3, [r3, #32]
   149fa:	0c1b      	lsrs	r3, r3, #16
   149fc:	b29b      	uxth	r3, r3
   149fe:	2b00      	cmp	r3, #0
   14a00:	d107      	bne.n	14a12 <_i2c_slave_interrupt_handler+0x1aa>
				/* Data buffer not set up, NACK address */
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_ACKACT;
   14a02:	693b      	ldr	r3, [r7, #16]
   14a04:	685b      	ldr	r3, [r3, #4]
   14a06:	2280      	movs	r2, #128	; 0x80
   14a08:	02d2      	lsls	r2, r2, #11
   14a0a:	431a      	orrs	r2, r3
   14a0c:	693b      	ldr	r3, [r7, #16]
   14a0e:	605a      	str	r2, [r3, #4]
   14a10:	e029      	b.n	14a66 <_i2c_slave_interrupt_handler+0x1fe>
			} else {
				/* ACK address */
				i2c_hw->CTRLB.reg &= ~SERCOM_I2CS_CTRLB_ACKACT;
   14a12:	693b      	ldr	r3, [r7, #16]
   14a14:	685a      	ldr	r2, [r3, #4]
   14a16:	4b57      	ldr	r3, [pc, #348]	; (14b74 <_i2c_slave_interrupt_handler+0x30c>)
   14a18:	401a      	ands	r2, r3
   14a1a:	693b      	ldr	r3, [r7, #16]
   14a1c:	605a      	str	r2, [r3, #4]
   14a1e:	e022      	b.n	14a66 <_i2c_slave_interrupt_handler+0x1fe>
			}
		} else {
			/* Set transfer direction in dev inst */
			module->transfer_direction = 0;
   14a20:	697a      	ldr	r2, [r7, #20]
   14a22:	232c      	movs	r3, #44	; 0x2c
   14a24:	2100      	movs	r1, #0
   14a26:	54d1      	strb	r1, [r2, r3]
			
			/* Write request from master */
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)) {
   14a28:	1c3b      	adds	r3, r7, #0
   14a2a:	330f      	adds	r3, #15
   14a2c:	781a      	ldrb	r2, [r3, #0]
   14a2e:	2308      	movs	r3, #8
   14a30:	4013      	ands	r3, r2
   14a32:	d004      	beq.n	14a3e <_i2c_slave_interrupt_handler+0x1d6>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_REQUEST](module);
   14a34:	697b      	ldr	r3, [r7, #20]
   14a36:	695b      	ldr	r3, [r3, #20]
   14a38:	697a      	ldr	r2, [r7, #20]
   14a3a:	1c10      	adds	r0, r2, #0
   14a3c:	4798      	blx	r3
			}

			if (module->buffer_length == 0) {
   14a3e:	697b      	ldr	r3, [r7, #20]
   14a40:	6a1b      	ldr	r3, [r3, #32]
   14a42:	0c1b      	lsrs	r3, r3, #16
   14a44:	b29b      	uxth	r3, r3
   14a46:	2b00      	cmp	r3, #0
   14a48:	d107      	bne.n	14a5a <_i2c_slave_interrupt_handler+0x1f2>
				/* Data buffer not set up, NACK address */
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_ACKACT;
   14a4a:	693b      	ldr	r3, [r7, #16]
   14a4c:	685b      	ldr	r3, [r3, #4]
   14a4e:	2280      	movs	r2, #128	; 0x80
   14a50:	02d2      	lsls	r2, r2, #11
   14a52:	431a      	orrs	r2, r3
   14a54:	693b      	ldr	r3, [r7, #16]
   14a56:	605a      	str	r2, [r3, #4]
   14a58:	e005      	b.n	14a66 <_i2c_slave_interrupt_handler+0x1fe>
			} else {
				/* ACK address */
				i2c_hw->CTRLB.reg &= ~SERCOM_I2CS_CTRLB_ACKACT;
   14a5a:	693b      	ldr	r3, [r7, #16]
   14a5c:	685a      	ldr	r2, [r3, #4]
   14a5e:	4b45      	ldr	r3, [pc, #276]	; (14b74 <_i2c_slave_interrupt_handler+0x30c>)
   14a60:	401a      	ands	r2, r3
   14a62:	693b      	ldr	r3, [r7, #16]
   14a64:	605a      	str	r2, [r3, #4]
			}
		}

		/* ACK or NACK address */
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x3);
   14a66:	693b      	ldr	r3, [r7, #16]
   14a68:	685b      	ldr	r3, [r3, #4]
   14a6a:	22c0      	movs	r2, #192	; 0xc0
   14a6c:	0292      	lsls	r2, r2, #10
   14a6e:	431a      	orrs	r2, r3
   14a70:	693b      	ldr	r3, [r7, #16]
   14a72:	605a      	str	r2, [r3, #4]

		/* ACK next incoming packet */
		i2c_hw->CTRLB.reg &= ~SERCOM_I2CS_CTRLB_ACKACT;
   14a74:	693b      	ldr	r3, [r7, #16]
   14a76:	685a      	ldr	r2, [r3, #4]
   14a78:	4b3e      	ldr	r3, [pc, #248]	; (14b74 <_i2c_slave_interrupt_handler+0x30c>)
   14a7a:	401a      	ands	r2, r3
   14a7c:	693b      	ldr	r3, [r7, #16]
   14a7e:	605a      	str	r2, [r3, #4]
   14a80:	e107      	b.n	14c92 <_i2c_slave_interrupt_handler+0x42a>

	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
   14a82:	693b      	ldr	r3, [r7, #16]
   14a84:	68db      	ldr	r3, [r3, #12]
   14a86:	021b      	lsls	r3, r3, #8
   14a88:	0e1b      	lsrs	r3, r3, #24
   14a8a:	b2db      	uxtb	r3, r3
   14a8c:	1c1a      	adds	r2, r3, #0
   14a8e:	2301      	movs	r3, #1
   14a90:	4013      	ands	r3, r2
   14a92:	d100      	bne.n	14a96 <_i2c_slave_interrupt_handler+0x22e>
   14a94:	e070      	b.n	14b78 <_i2c_slave_interrupt_handler+0x310>
		/* Stop condition on bus - current transfer done */

		/* Clear Stop interrupt */
		i2c_hw->INTFLAG.reg |= SERCOM_I2CS_INTFLAG_PREC;
   14a96:	693b      	ldr	r3, [r7, #16]
   14a98:	68db      	ldr	r3, [r3, #12]
   14a9a:	021b      	lsls	r3, r3, #8
   14a9c:	0e1b      	lsrs	r3, r3, #24
   14a9e:	b2db      	uxtb	r3, r3
   14aa0:	2201      	movs	r2, #1
   14aa2:	4313      	orrs	r3, r2
   14aa4:	b2da      	uxtb	r2, r3
   14aa6:	693b      	ldr	r3, [r7, #16]
   14aa8:	739a      	strb	r2, [r3, #14]

		/* Disable interrupts */
		i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_PREC | SERCOM_I2CS_INTFLAG_DRDY;
   14aaa:	693b      	ldr	r3, [r7, #16]
   14aac:	2205      	movs	r2, #5
   14aae:	731a      	strb	r2, [r3, #12]
		
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
   14ab0:	697b      	ldr	r3, [r7, #20]
   14ab2:	6a1b      	ldr	r3, [r3, #32]
   14ab4:	041b      	lsls	r3, r3, #16
   14ab6:	0e1b      	lsrs	r3, r3, #24
   14ab8:	b2db      	uxtb	r3, r3
   14aba:	1c1a      	adds	r2, r3, #0
   14abc:	2304      	movs	r3, #4
   14abe:	4013      	ands	r3, r2
   14ac0:	d109      	bne.n	14ad6 <_i2c_slave_interrupt_handler+0x26e>
				|| (module->enabled_callback == (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)))) {
   14ac2:	697b      	ldr	r3, [r7, #20]
   14ac4:	6a1b      	ldr	r3, [r3, #32]
   14ac6:	041b      	lsls	r3, r3, #16
   14ac8:	0e1b      	lsrs	r3, r3, #24
   14aca:	b2db      	uxtb	r3, r3
		i2c_hw->INTFLAG.reg |= SERCOM_I2CS_INTFLAG_PREC;

		/* Disable interrupts */
		i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_PREC | SERCOM_I2CS_INTFLAG_DRDY;
		
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
   14acc:	2b08      	cmp	r3, #8
   14ace:	d002      	beq.n	14ad6 <_i2c_slave_interrupt_handler+0x26e>
				|| (module->enabled_callback == (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)))) {
			/* Disable address match if read/write request is not enabled */
			i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_AMATCH;
   14ad0:	693b      	ldr	r3, [r7, #16]
   14ad2:	2202      	movs	r2, #2
   14ad4:	731a      	strb	r2, [r3, #12]
		}

		if (!(module->status == STATUS_ERR_OVERFLOW || module->status == STATUS_ERR_IO)) {
   14ad6:	697b      	ldr	r3, [r7, #20]
   14ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14ada:	041b      	lsls	r3, r3, #16
   14adc:	0e1b      	lsrs	r3, r3, #24
   14ade:	b2db      	uxtb	r3, r3
   14ae0:	2b1e      	cmp	r3, #30
   14ae2:	d100      	bne.n	14ae6 <_i2c_slave_interrupt_handler+0x27e>
   14ae4:	e0d5      	b.n	14c92 <_i2c_slave_interrupt_handler+0x42a>
   14ae6:	697b      	ldr	r3, [r7, #20]
   14ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14aea:	041b      	lsls	r3, r3, #16
   14aec:	0e1b      	lsrs	r3, r3, #24
   14aee:	b2db      	uxtb	r3, r3
   14af0:	2b10      	cmp	r3, #16
   14af2:	d100      	bne.n	14af6 <_i2c_slave_interrupt_handler+0x28e>
   14af4:	e0cd      	b.n	14c92 <_i2c_slave_interrupt_handler+0x42a>
			module->status = STATUS_OK;
   14af6:	697a      	ldr	r2, [r7, #20]
   14af8:	232d      	movs	r3, #45	; 0x2d
   14afa:	2100      	movs	r1, #0
   14afc:	54d1      	strb	r1, [r2, r3]
			module->buffer_length = 0;
   14afe:	697b      	ldr	r3, [r7, #20]
   14b00:	2200      	movs	r2, #0
   14b02:	845a      	strh	r2, [r3, #34]	; 0x22
			module->buffer_remaining = 0;
   14b04:	697b      	ldr	r3, [r7, #20]
   14b06:	2200      	movs	r2, #0
   14b08:	849a      	strh	r2, [r3, #36]	; 0x24

			/* Call appropriate callback if enabled and registered */
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))
   14b0a:	1c3b      	adds	r3, r7, #0
   14b0c:	330f      	adds	r3, #15
   14b0e:	781a      	ldrb	r2, [r3, #0]
   14b10:	2302      	movs	r3, #2
   14b12:	4013      	ands	r3, r2
   14b14:	d00a      	beq.n	14b2c <_i2c_slave_interrupt_handler+0x2c4>
					&& (module->transfer_direction == 0)) {
   14b16:	697b      	ldr	r3, [r7, #20]
   14b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14b1a:	b2db      	uxtb	r3, r3
   14b1c:	2b00      	cmp	r3, #0
   14b1e:	d105      	bne.n	14b2c <_i2c_slave_interrupt_handler+0x2c4>
				/* Read from master complete */
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
   14b20:	697b      	ldr	r3, [r7, #20]
   14b22:	68db      	ldr	r3, [r3, #12]
   14b24:	697a      	ldr	r2, [r7, #20]
   14b26:	1c10      	adds	r0, r2, #0
   14b28:	4798      	blx	r3
   14b2a:	e0b2      	b.n	14c92 <_i2c_slave_interrupt_handler+0x42a>
			} else if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))
   14b2c:	1c3b      	adds	r3, r7, #0
   14b2e:	330f      	adds	r3, #15
   14b30:	781a      	ldrb	r2, [r3, #0]
   14b32:	2301      	movs	r3, #1
   14b34:	4013      	ands	r3, r2
   14b36:	d100      	bne.n	14b3a <_i2c_slave_interrupt_handler+0x2d2>
   14b38:	e0ab      	b.n	14c92 <_i2c_slave_interrupt_handler+0x42a>
					&& (module->transfer_direction == 1)) {
   14b3a:	697b      	ldr	r3, [r7, #20]
   14b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14b3e:	b2db      	uxtb	r3, r3
   14b40:	2b01      	cmp	r3, #1
   14b42:	d000      	beq.n	14b46 <_i2c_slave_interrupt_handler+0x2de>
   14b44:	e0a5      	b.n	14c92 <_i2c_slave_interrupt_handler+0x42a>
				/* Write to master complete */
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
   14b46:	697b      	ldr	r3, [r7, #20]
   14b48:	689b      	ldr	r3, [r3, #8]
   14b4a:	697a      	ldr	r2, [r7, #20]
   14b4c:	1c10      	adds	r0, r2, #0
   14b4e:	4798      	blx	r3
   14b50:	e09f      	b.n	14c92 <_i2c_slave_interrupt_handler+0x42a>
   14b52:	46c0      	nop			; (mov r8, r8)
   14b54:	20001200 	.word	0x20001200
   14b58:	00014409 	.word	0x00014409
   14b5c:	0002660c 	.word	0x0002660c
   14b60:	000265bc 	.word	0x000265bc
   14b64:	000265d4 	.word	0x000265d4
   14b68:	000106e9 	.word	0x000106e9
   14b6c:	000265dc 	.word	0x000265dc
   14b70:	0001b62d 	.word	0x0001b62d
   14b74:	fffbffff 	.word	0xfffbffff
			}
					}
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
   14b78:	693b      	ldr	r3, [r7, #16]
   14b7a:	68db      	ldr	r3, [r3, #12]
   14b7c:	021b      	lsls	r3, r3, #8
   14b7e:	0e1b      	lsrs	r3, r3, #24
   14b80:	b2db      	uxtb	r3, r3
   14b82:	1c1a      	adds	r2, r3, #0
   14b84:	2304      	movs	r3, #4
   14b86:	4013      	ands	r3, r2
   14b88:	d100      	bne.n	14b8c <_i2c_slave_interrupt_handler+0x324>
   14b8a:	e082      	b.n	14c92 <_i2c_slave_interrupt_handler+0x42a>
		/* Check if buffer is full, or NACK from master */
		if (module->buffer_remaining <= 0 ||
   14b8c:	697b      	ldr	r3, [r7, #20]
   14b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14b90:	b29b      	uxth	r3, r3
   14b92:	2b00      	cmp	r3, #0
   14b94:	d014      	beq.n	14bc0 <_i2c_slave_interrupt_handler+0x358>
				(module->transfer_direction == 1 &&
   14b96:	697b      	ldr	r3, [r7, #20]
   14b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14b9a:	b2db      	uxtb	r3, r3
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
			}
					}
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
		/* Check if buffer is full, or NACK from master */
		if (module->buffer_remaining <= 0 ||
   14b9c:	2b01      	cmp	r3, #1
   14b9e:	d14f      	bne.n	14c40 <_i2c_slave_interrupt_handler+0x3d8>
				(module->transfer_direction == 1 &&
				(module->buffer_length > module->buffer_remaining) &&
   14ba0:	697b      	ldr	r3, [r7, #20]
   14ba2:	6a1b      	ldr	r3, [r3, #32]
   14ba4:	0c1b      	lsrs	r3, r3, #16
   14ba6:	b29a      	uxth	r2, r3
   14ba8:	697b      	ldr	r3, [r7, #20]
   14baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14bac:	b29b      	uxth	r3, r3
			}
					}
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
		/* Check if buffer is full, or NACK from master */
		if (module->buffer_remaining <= 0 ||
				(module->transfer_direction == 1 &&
   14bae:	429a      	cmp	r2, r3
   14bb0:	d946      	bls.n	14c40 <_i2c_slave_interrupt_handler+0x3d8>
				(module->buffer_length > module->buffer_remaining) &&
				(i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_RXNACK))) {
   14bb2:	693b      	ldr	r3, [r7, #16]
   14bb4:	691b      	ldr	r3, [r3, #16]
   14bb6:	b29b      	uxth	r3, r3
   14bb8:	1c1a      	adds	r2, r3, #0
   14bba:	2304      	movs	r3, #4
   14bbc:	4013      	ands	r3, r2
					}
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
		/* Check if buffer is full, or NACK from master */
		if (module->buffer_remaining <= 0 ||
				(module->transfer_direction == 1 &&
				(module->buffer_length > module->buffer_remaining) &&
   14bbe:	d03f      	beq.n	14c40 <_i2c_slave_interrupt_handler+0x3d8>
				(i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_RXNACK))) {

			module->buffer_remaining = 0;
   14bc0:	697b      	ldr	r3, [r7, #20]
   14bc2:	2200      	movs	r2, #0
   14bc4:	849a      	strh	r2, [r3, #36]	; 0x24
			module->buffer_length = 0;
   14bc6:	697b      	ldr	r3, [r7, #20]
   14bc8:	2200      	movs	r2, #0
   14bca:	845a      	strh	r2, [r3, #34]	; 0x22

			if (module->transfer_direction == 0) {
   14bcc:	697b      	ldr	r3, [r7, #20]
   14bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14bd0:	b2db      	uxtb	r3, r3
   14bd2:	2b00      	cmp	r3, #0
   14bd4:	d11d      	bne.n	14c12 <_i2c_slave_interrupt_handler+0x3aa>
				/* Buffer is full, send NACK */
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_ACKACT;
   14bd6:	693b      	ldr	r3, [r7, #16]
   14bd8:	685b      	ldr	r3, [r3, #4]
   14bda:	2280      	movs	r2, #128	; 0x80
   14bdc:	02d2      	lsls	r2, r2, #11
   14bde:	431a      	orrs	r2, r3
   14be0:	693b      	ldr	r3, [r7, #16]
   14be2:	605a      	str	r2, [r3, #4]
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
   14be4:	693b      	ldr	r3, [r7, #16]
   14be6:	685b      	ldr	r3, [r3, #4]
   14be8:	2280      	movs	r2, #128	; 0x80
   14bea:	0292      	lsls	r2, r2, #10
   14bec:	431a      	orrs	r2, r3
   14bee:	693b      	ldr	r3, [r7, #16]
   14bf0:	605a      	str	r2, [r3, #4]

				/* Set status, new character in DATA register will overflow
				 * buffer */
				module->status = STATUS_ERR_OVERFLOW;
   14bf2:	697a      	ldr	r2, [r7, #20]
   14bf4:	232d      	movs	r3, #45	; 0x2d
   14bf6:	211e      	movs	r1, #30
   14bf8:	54d1      	strb	r1, [r2, r3]

				if (callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR)) {
   14bfa:	1c3b      	adds	r3, r7, #0
   14bfc:	330f      	adds	r3, #15
   14bfe:	781a      	ldrb	r2, [r3, #0]
   14c00:	2310      	movs	r3, #16
   14c02:	4013      	ands	r3, r2
   14c04:	d01b      	beq.n	14c3e <_i2c_slave_interrupt_handler+0x3d6>
					/* Read complete */
					module->callbacks[I2C_SLAVE_CALLBACK_ERROR](module);
   14c06:	697b      	ldr	r3, [r7, #20]
   14c08:	699b      	ldr	r3, [r3, #24]
   14c0a:	697a      	ldr	r2, [r7, #20]
   14c0c:	1c10      	adds	r0, r2, #0
   14c0e:	4798      	blx	r3
				(i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_RXNACK))) {

			module->buffer_remaining = 0;
			module->buffer_length = 0;

			if (module->transfer_direction == 0) {
   14c10:	e03f      	b.n	14c92 <_i2c_slave_interrupt_handler+0x42a>
					/* Read complete */
					module->callbacks[I2C_SLAVE_CALLBACK_ERROR](module);
				}
			} else {
				/* Release SCL and wait for new start condition */
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_ACKACT;
   14c12:	693b      	ldr	r3, [r7, #16]
   14c14:	685b      	ldr	r3, [r3, #4]
   14c16:	2280      	movs	r2, #128	; 0x80
   14c18:	02d2      	lsls	r2, r2, #11
   14c1a:	431a      	orrs	r2, r3
   14c1c:	693b      	ldr	r3, [r7, #16]
   14c1e:	605a      	str	r2, [r3, #4]
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
   14c20:	693b      	ldr	r3, [r7, #16]
   14c22:	685b      	ldr	r3, [r3, #4]
   14c24:	2280      	movs	r2, #128	; 0x80
   14c26:	0292      	lsls	r2, r2, #10
   14c28:	431a      	orrs	r2, r3
   14c2a:	693b      	ldr	r3, [r7, #16]
   14c2c:	605a      	str	r2, [r3, #4]

				/* Transfer successful */
				module->status = STATUS_OK;
   14c2e:	697a      	ldr	r2, [r7, #20]
   14c30:	232d      	movs	r3, #45	; 0x2d
   14c32:	2100      	movs	r1, #0
   14c34:	54d1      	strb	r1, [r2, r3]

				/* Disable interrupts */
				i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_DRDY;
   14c36:	693b      	ldr	r3, [r7, #16]
   14c38:	2204      	movs	r2, #4
   14c3a:	731a      	strb	r2, [r3, #12]
				(i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_RXNACK))) {

			module->buffer_remaining = 0;
			module->buffer_length = 0;

			if (module->transfer_direction == 0) {
   14c3c:	e029      	b.n	14c92 <_i2c_slave_interrupt_handler+0x42a>
   14c3e:	e028      	b.n	14c92 <_i2c_slave_interrupt_handler+0x42a>
				/* Disable interrupts */
				i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_DRDY;
			}

		/* Continue buffer write/read */
		} else if (module->buffer_length > 0 && module->buffer_remaining > 0) {
   14c40:	697b      	ldr	r3, [r7, #20]
   14c42:	6a1b      	ldr	r3, [r3, #32]
   14c44:	0c1b      	lsrs	r3, r3, #16
   14c46:	b29b      	uxth	r3, r3
   14c48:	2b00      	cmp	r3, #0
   14c4a:	d022      	beq.n	14c92 <_i2c_slave_interrupt_handler+0x42a>
   14c4c:	697b      	ldr	r3, [r7, #20]
   14c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14c50:	b29b      	uxth	r3, r3
   14c52:	2b00      	cmp	r3, #0
   14c54:	d01d      	beq.n	14c92 <_i2c_slave_interrupt_handler+0x42a>
			/* Call function based on transfer direction */
			if (module->transfer_direction == 0) {
   14c56:	697b      	ldr	r3, [r7, #20]
   14c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14c5a:	b2db      	uxtb	r3, r3
   14c5c:	2b00      	cmp	r3, #0
   14c5e:	d114      	bne.n	14c8a <_i2c_slave_interrupt_handler+0x422>
				_i2c_slave_read(module);
   14c60:	697b      	ldr	r3, [r7, #20]
   14c62:	1c18      	adds	r0, r3, #0
   14c64:	4b0c      	ldr	r3, [pc, #48]	; (14c98 <_i2c_slave_interrupt_handler+0x430>)
   14c66:	4798      	blx	r3
				if (module->buffer_remaining <= 0)
   14c68:	697b      	ldr	r3, [r7, #20]
   14c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14c6c:	b29b      	uxth	r3, r3
   14c6e:	2b00      	cmp	r3, #0
   14c70:	d10f      	bne.n	14c92 <_i2c_slave_interrupt_handler+0x42a>
				{
					if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE)))
   14c72:	1c3b      	adds	r3, r7, #0
   14c74:	330f      	adds	r3, #15
   14c76:	781a      	ldrb	r2, [r3, #0]
   14c78:	2301      	movs	r3, #1
   14c7a:	4013      	ands	r3, r2
   14c7c:	d009      	beq.n	14c92 <_i2c_slave_interrupt_handler+0x42a>
					{
						module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
   14c7e:	697b      	ldr	r3, [r7, #20]
   14c80:	689b      	ldr	r3, [r3, #8]
   14c82:	697a      	ldr	r2, [r7, #20]
   14c84:	1c10      	adds	r0, r2, #0
   14c86:	4798      	blx	r3
   14c88:	e003      	b.n	14c92 <_i2c_slave_interrupt_handler+0x42a>
					}
				}
			} else {
				_i2c_slave_write(module);
   14c8a:	697b      	ldr	r3, [r7, #20]
   14c8c:	1c18      	adds	r0, r3, #0
   14c8e:	4b03      	ldr	r3, [pc, #12]	; (14c9c <_i2c_slave_interrupt_handler+0x434>)
   14c90:	4798      	blx	r3
			}
		}
		
	}
}
   14c92:	46bd      	mov	sp, r7
   14c94:	b007      	add	sp, #28
   14c96:	bd90      	pop	{r4, r7, pc}
   14c98:	0001441d 	.word	0x0001441d
   14c9c:	00014451 	.word	0x00014451

00014ca0 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
   14ca0:	b580      	push	{r7, lr}
   14ca2:	af00      	add	r7, sp, #0
	return test_case_ptr;
   14ca4:	4b02      	ldr	r3, [pc, #8]	; (14cb0 <test_get_case+0x10>)
   14ca6:	681b      	ldr	r3, [r3, #0]
}
   14ca8:	1c18      	adds	r0, r3, #0
   14caa:	46bd      	mov	sp, r7
   14cac:	bd80      	pop	{r7, pc}
   14cae:	46c0      	nop			; (mov r8, r8)
   14cb0:	2000041c 	.word	0x2000041c

00014cb4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   14cb4:	b590      	push	{r4, r7, lr}
   14cb6:	b085      	sub	sp, #20
   14cb8:	af02      	add	r7, sp, #8
   14cba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
   14cbc:	4b15      	ldr	r3, [pc, #84]	; (14d14 <system_gclk_chan_get_config_defaults+0x60>)
   14cbe:	4798      	blx	r3
   14cc0:	1c03      	adds	r3, r0, #0
   14cc2:	2b00      	cmp	r3, #0
   14cc4:	d011      	beq.n	14cea <system_gclk_chan_get_config_defaults+0x36>
   14cc6:	687b      	ldr	r3, [r7, #4]
   14cc8:	2b00      	cmp	r3, #0
   14cca:	d119      	bne.n	14d00 <system_gclk_chan_get_config_defaults+0x4c>
   14ccc:	4b11      	ldr	r3, [pc, #68]	; (14d14 <system_gclk_chan_get_config_defaults+0x60>)
   14cce:	4798      	blx	r3
   14cd0:	1c01      	adds	r1, r0, #0
   14cd2:	4a11      	ldr	r2, [pc, #68]	; (14d18 <system_gclk_chan_get_config_defaults+0x64>)
   14cd4:	2314      	movs	r3, #20
   14cd6:	33ff      	adds	r3, #255	; 0xff
   14cd8:	4810      	ldr	r0, [pc, #64]	; (14d1c <system_gclk_chan_get_config_defaults+0x68>)
   14cda:	9000      	str	r0, [sp, #0]
   14cdc:	4810      	ldr	r0, [pc, #64]	; (14d20 <system_gclk_chan_get_config_defaults+0x6c>)
   14cde:	9001      	str	r0, [sp, #4]
   14ce0:	1c08      	adds	r0, r1, #0
   14ce2:	2101      	movs	r1, #1
   14ce4:	4c0f      	ldr	r4, [pc, #60]	; (14d24 <system_gclk_chan_get_config_defaults+0x70>)
   14ce6:	47a0      	blx	r4
   14ce8:	e00a      	b.n	14d00 <system_gclk_chan_get_config_defaults+0x4c>
   14cea:	687b      	ldr	r3, [r7, #4]
   14cec:	2b00      	cmp	r3, #0
   14cee:	d107      	bne.n	14d00 <system_gclk_chan_get_config_defaults+0x4c>
   14cf0:	480d      	ldr	r0, [pc, #52]	; (14d28 <system_gclk_chan_get_config_defaults+0x74>)
   14cf2:	490b      	ldr	r1, [pc, #44]	; (14d20 <system_gclk_chan_get_config_defaults+0x6c>)
   14cf4:	4a08      	ldr	r2, [pc, #32]	; (14d18 <system_gclk_chan_get_config_defaults+0x64>)
   14cf6:	2314      	movs	r3, #20
   14cf8:	33ff      	adds	r3, #255	; 0xff
   14cfa:	4c0c      	ldr	r4, [pc, #48]	; (14d2c <system_gclk_chan_get_config_defaults+0x78>)
   14cfc:	47a0      	blx	r4
   14cfe:	e7fe      	b.n	14cfe <system_gclk_chan_get_config_defaults+0x4a>

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   14d00:	687b      	ldr	r3, [r7, #4]
   14d02:	2200      	movs	r2, #0
   14d04:	701a      	strb	r2, [r3, #0]
	config->write_lock       = false;
   14d06:	687b      	ldr	r3, [r7, #4]
   14d08:	2200      	movs	r2, #0
   14d0a:	705a      	strb	r2, [r3, #1]
}
   14d0c:	46bd      	mov	sp, r7
   14d0e:	b003      	add	sp, #12
   14d10:	bd90      	pop	{r4, r7, pc}
   14d12:	46c0      	nop			; (mov r8, r8)
   14d14:	00014ca1 	.word	0x00014ca1
   14d18:	0002665c 	.word	0x0002665c
   14d1c:	00026688 	.word	0x00026688
   14d20:	000266a0 	.word	0x000266a0
   14d24:	000106e9 	.word	0x000106e9
   14d28:	000266a8 	.word	0x000266a8
   14d2c:	0001b62d 	.word	0x0001b62d

00014d30 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   14d30:	b580      	push	{r7, lr}
   14d32:	b086      	sub	sp, #24
   14d34:	af00      	add	r7, sp, #0
   14d36:	60f8      	str	r0, [r7, #12]
   14d38:	60b9      	str	r1, [r7, #8]
   14d3a:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   14d3c:	1c3b      	adds	r3, r7, #0
   14d3e:	3316      	adds	r3, #22
   14d40:	2200      	movs	r2, #0
   14d42:	801a      	strh	r2, [r3, #0]

	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
   14d44:	68bb      	ldr	r3, [r7, #8]
   14d46:	085a      	lsrs	r2, r3, #1
   14d48:	68fb      	ldr	r3, [r7, #12]
   14d4a:	429a      	cmp	r2, r3
   14d4c:	d201      	bcs.n	14d52 <_sercom_get_sync_baud_val+0x22>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   14d4e:	2340      	movs	r3, #64	; 0x40
   14d50:	e018      	b.n	14d84 <_sercom_get_sync_baud_val+0x54>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	baud_calculated = (external_clock / (2 * baudrate)) - 1;
   14d52:	68fb      	ldr	r3, [r7, #12]
   14d54:	005a      	lsls	r2, r3, #1
   14d56:	4b0d      	ldr	r3, [pc, #52]	; (14d8c <_sercom_get_sync_baud_val+0x5c>)
   14d58:	68b8      	ldr	r0, [r7, #8]
   14d5a:	1c11      	adds	r1, r2, #0
   14d5c:	4798      	blx	r3
   14d5e:	1c03      	adds	r3, r0, #0
   14d60:	b29a      	uxth	r2, r3
   14d62:	1c3b      	adds	r3, r7, #0
   14d64:	3316      	adds	r3, #22
   14d66:	3a01      	subs	r2, #1
   14d68:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   14d6a:	1c3b      	adds	r3, r7, #0
   14d6c:	3316      	adds	r3, #22
   14d6e:	881b      	ldrh	r3, [r3, #0]
   14d70:	2bff      	cmp	r3, #255	; 0xff
   14d72:	d901      	bls.n	14d78 <_sercom_get_sync_baud_val+0x48>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   14d74:	2340      	movs	r3, #64	; 0x40
   14d76:	e005      	b.n	14d84 <_sercom_get_sync_baud_val+0x54>
	} else {
		*baudvalue = baud_calculated;
   14d78:	687b      	ldr	r3, [r7, #4]
   14d7a:	1c3a      	adds	r2, r7, #0
   14d7c:	3216      	adds	r2, #22
   14d7e:	8812      	ldrh	r2, [r2, #0]
   14d80:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   14d82:	2300      	movs	r3, #0
	}
}
   14d84:	1c18      	adds	r0, r3, #0
   14d86:	46bd      	mov	sp, r7
   14d88:	b006      	add	sp, #24
   14d8a:	bd80      	pop	{r7, pc}
   14d8c:	0001f42d 	.word	0x0001f42d

00014d90 <_sercom_get_async_baud_val>:
*/
enum status_code _sercom_get_async_baud_val(
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval)
{
   14d90:	b5f0      	push	{r4, r5, r6, r7, lr}
   14d92:	b093      	sub	sp, #76	; 0x4c
   14d94:	af00      	add	r7, sp, #0
   14d96:	62f8      	str	r0, [r7, #44]	; 0x2c
   14d98:	62b9      	str	r1, [r7, #40]	; 0x28
   14d9a:	627a      	str	r2, [r7, #36]	; 0x24
	/* Temporary variables  */
	uint64_t ratio = 0;
   14d9c:	2300      	movs	r3, #0
   14d9e:	2400      	movs	r4, #0
   14da0:	643b      	str	r3, [r7, #64]	; 0x40
   14da2:	647c      	str	r4, [r7, #68]	; 0x44
	uint64_t scale = 0;
   14da4:	2300      	movs	r3, #0
   14da6:	2400      	movs	r4, #0
   14da8:	63bb      	str	r3, [r7, #56]	; 0x38
   14daa:	63fc      	str	r4, [r7, #60]	; 0x3c
	uint64_t baud_calculated = 0;
   14dac:	2300      	movs	r3, #0
   14dae:	2400      	movs	r4, #0
   14db0:	633b      	str	r3, [r7, #48]	; 0x30
   14db2:	637c      	str	r4, [r7, #52]	; 0x34

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * 16) >= peripheral_clock) {
   14db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14db6:	011a      	lsls	r2, r3, #4
   14db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14dba:	429a      	cmp	r2, r3
   14dbc:	d301      	bcc.n	14dc2 <_sercom_get_async_baud_val+0x32>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   14dbe:	2340      	movs	r3, #64	; 0x40
   14dc0:	e03e      	b.n	14e40 <_sercom_get_async_baud_val+0xb0>
	}

	/* Calculate the BAUD value */
	ratio = ((16 * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
   14dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14dc4:	61bb      	str	r3, [r7, #24]
   14dc6:	2300      	movs	r3, #0
   14dc8:	61fb      	str	r3, [r7, #28]
   14dca:	69ba      	ldr	r2, [r7, #24]
   14dcc:	0f13      	lsrs	r3, r2, #28
   14dce:	69fd      	ldr	r5, [r7, #28]
   14dd0:	012d      	lsls	r5, r5, #4
   14dd2:	617d      	str	r5, [r7, #20]
   14dd4:	697e      	ldr	r6, [r7, #20]
   14dd6:	431e      	orrs	r6, r3
   14dd8:	617e      	str	r6, [r7, #20]
   14dda:	69ba      	ldr	r2, [r7, #24]
   14ddc:	0112      	lsls	r2, r2, #4
   14dde:	613a      	str	r2, [r7, #16]
   14de0:	693b      	ldr	r3, [r7, #16]
   14de2:	001b      	movs	r3, r3
   14de4:	60fb      	str	r3, [r7, #12]
   14de6:	2300      	movs	r3, #0
   14de8:	60bb      	str	r3, [r7, #8]
   14dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14dec:	603b      	str	r3, [r7, #0]
   14dee:	2300      	movs	r3, #0
   14df0:	607b      	str	r3, [r7, #4]
   14df2:	4c17      	ldr	r4, [pc, #92]	; (14e50 <_sercom_get_async_baud_val+0xc0>)
   14df4:	68b8      	ldr	r0, [r7, #8]
   14df6:	68f9      	ldr	r1, [r7, #12]
   14df8:	683a      	ldr	r2, [r7, #0]
   14dfa:	687b      	ldr	r3, [r7, #4]
   14dfc:	47a0      	blx	r4
   14dfe:	1c03      	adds	r3, r0, #0
   14e00:	1c0c      	adds	r4, r1, #0
   14e02:	643b      	str	r3, [r7, #64]	; 0x40
   14e04:	647c      	str	r4, [r7, #68]	; 0x44
	scale = ((uint64_t)1 << SHIFT) - ratio;
   14e06:	4a11      	ldr	r2, [pc, #68]	; (14e4c <_sercom_get_async_baud_val+0xbc>)
   14e08:	490f      	ldr	r1, [pc, #60]	; (14e48 <_sercom_get_async_baud_val+0xb8>)
   14e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   14e0c:	6c7c      	ldr	r4, [r7, #68]	; 0x44
   14e0e:	1c0d      	adds	r5, r1, #0
   14e10:	1c16      	adds	r6, r2, #0
   14e12:	1aed      	subs	r5, r5, r3
   14e14:	41a6      	sbcs	r6, r4
   14e16:	1c2b      	adds	r3, r5, #0
   14e18:	1c34      	adds	r4, r6, #0
   14e1a:	63bb      	str	r3, [r7, #56]	; 0x38
   14e1c:	63fc      	str	r4, [r7, #60]	; 0x3c
	baud_calculated = (65536 * scale) >> SHIFT;
   14e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14e20:	0c1b      	lsrs	r3, r3, #16
   14e22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14e24:	0416      	lsls	r6, r2, #16
   14e26:	431e      	orrs	r6, r3
   14e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14e2a:	041d      	lsls	r5, r3, #16
   14e2c:	0033      	movs	r3, r6
   14e2e:	633b      	str	r3, [r7, #48]	; 0x30
   14e30:	2300      	movs	r3, #0
   14e32:	637b      	str	r3, [r7, #52]	; 0x34

	*baudval = baud_calculated;
   14e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14e36:	6b7c      	ldr	r4, [r7, #52]	; 0x34
   14e38:	b29a      	uxth	r2, r3
   14e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14e3c:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
   14e3e:	2300      	movs	r3, #0
}
   14e40:	1c18      	adds	r0, r3, #0
   14e42:	46bd      	mov	sp, r7
   14e44:	b013      	add	sp, #76	; 0x4c
   14e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14e48:	00000000 	.word	0x00000000
   14e4c:	00000001 	.word	0x00000001
   14e50:	0001f67d 	.word	0x0001f67d
   14e54:	46c0      	nop			; (mov r8, r8)
   14e56:	46c0      	nop			; (mov r8, r8)

00014e58 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   14e58:	b580      	push	{r7, lr}
   14e5a:	b084      	sub	sp, #16
   14e5c:	af00      	add	r7, sp, #0
   14e5e:	1c0a      	adds	r2, r1, #0
   14e60:	1dfb      	adds	r3, r7, #7
   14e62:	1c01      	adds	r1, r0, #0
   14e64:	7019      	strb	r1, [r3, #0]
   14e66:	1dbb      	adds	r3, r7, #6
   14e68:	701a      	strb	r2, [r3, #0]
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
   14e6a:	4b1a      	ldr	r3, [pc, #104]	; (14ed4 <sercom_set_gclk_generator+0x7c>)
   14e6c:	781b      	ldrb	r3, [r3, #0]
   14e6e:	2201      	movs	r2, #1
   14e70:	4053      	eors	r3, r2
   14e72:	b2db      	uxtb	r3, r3
   14e74:	2b00      	cmp	r3, #0
   14e76:	d103      	bne.n	14e80 <sercom_set_gclk_generator+0x28>
   14e78:	1dbb      	adds	r3, r7, #6
   14e7a:	781b      	ldrb	r3, [r3, #0]
   14e7c:	2b00      	cmp	r3, #0
   14e7e:	d01b      	beq.n	14eb8 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   14e80:	1c3b      	adds	r3, r7, #0
   14e82:	330c      	adds	r3, #12
   14e84:	1c18      	adds	r0, r3, #0
   14e86:	4b14      	ldr	r3, [pc, #80]	; (14ed8 <sercom_set_gclk_generator+0x80>)
   14e88:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   14e8a:	1c3b      	adds	r3, r7, #0
   14e8c:	330c      	adds	r3, #12
   14e8e:	1dfa      	adds	r2, r7, #7
   14e90:	7812      	ldrb	r2, [r2, #0]
   14e92:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   14e94:	1c3b      	adds	r3, r7, #0
   14e96:	330c      	adds	r3, #12
   14e98:	200c      	movs	r0, #12
   14e9a:	1c19      	adds	r1, r3, #0
   14e9c:	4b0f      	ldr	r3, [pc, #60]	; (14edc <sercom_set_gclk_generator+0x84>)
   14e9e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   14ea0:	200c      	movs	r0, #12
   14ea2:	4b0f      	ldr	r3, [pc, #60]	; (14ee0 <sercom_set_gclk_generator+0x88>)
   14ea4:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
   14ea6:	4b0b      	ldr	r3, [pc, #44]	; (14ed4 <sercom_set_gclk_generator+0x7c>)
   14ea8:	1dfa      	adds	r2, r7, #7
   14eaa:	7812      	ldrb	r2, [r2, #0]
   14eac:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   14eae:	4b09      	ldr	r3, [pc, #36]	; (14ed4 <sercom_set_gclk_generator+0x7c>)
   14eb0:	2201      	movs	r2, #1
   14eb2:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   14eb4:	2300      	movs	r3, #0
   14eb6:	e008      	b.n	14eca <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   14eb8:	4b06      	ldr	r3, [pc, #24]	; (14ed4 <sercom_set_gclk_generator+0x7c>)
   14eba:	785b      	ldrb	r3, [r3, #1]
   14ebc:	1dfa      	adds	r2, r7, #7
   14ebe:	7812      	ldrb	r2, [r2, #0]
   14ec0:	429a      	cmp	r2, r3
   14ec2:	d101      	bne.n	14ec8 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config. */
		return STATUS_OK;
   14ec4:	2300      	movs	r3, #0
   14ec6:	e000      	b.n	14eca <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
   14ec8:	231d      	movs	r3, #29
}
   14eca:	1c18      	adds	r0, r3, #0
   14ecc:	46bd      	mov	sp, r7
   14ece:	b004      	add	sp, #16
   14ed0:	bd80      	pop	{r7, pc}
   14ed2:	46c0      	nop			; (mov r8, r8)
   14ed4:	20000428 	.word	0x20000428
   14ed8:	00014cb5 	.word	0x00014cb5
   14edc:	00017971 	.word	0x00017971
   14ee0:	00017a25 	.word	0x00017a25

00014ee4 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   14ee4:	b590      	push	{r4, r7, lr}
   14ee6:	b085      	sub	sp, #20
   14ee8:	af02      	add	r7, sp, #8
   14eea:	6078      	str	r0, [r7, #4]
   14eec:	1c0a      	adds	r2, r1, #0
   14eee:	1cfb      	adds	r3, r7, #3
   14ef0:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   14ef2:	687b      	ldr	r3, [r7, #4]
   14ef4:	4a5c      	ldr	r2, [pc, #368]	; (15068 <_sercom_get_default_pad+0x184>)
   14ef6:	4293      	cmp	r3, r2
   14ef8:	d03f      	beq.n	14f7a <_sercom_get_default_pad+0x96>
   14efa:	4a5b      	ldr	r2, [pc, #364]	; (15068 <_sercom_get_default_pad+0x184>)
   14efc:	4293      	cmp	r3, r2
   14efe:	d806      	bhi.n	14f0e <_sercom_get_default_pad+0x2a>
   14f00:	4a5a      	ldr	r2, [pc, #360]	; (1506c <_sercom_get_default_pad+0x188>)
   14f02:	4293      	cmp	r3, r2
   14f04:	d00f      	beq.n	14f26 <_sercom_get_default_pad+0x42>
   14f06:	4a5a      	ldr	r2, [pc, #360]	; (15070 <_sercom_get_default_pad+0x18c>)
   14f08:	4293      	cmp	r3, r2
   14f0a:	d021      	beq.n	14f50 <_sercom_get_default_pad+0x6c>
   14f0c:	e085      	b.n	1501a <_sercom_get_default_pad+0x136>
   14f0e:	4a59      	ldr	r2, [pc, #356]	; (15074 <_sercom_get_default_pad+0x190>)
   14f10:	4293      	cmp	r3, r2
   14f12:	d100      	bne.n	14f16 <_sercom_get_default_pad+0x32>
   14f14:	e05b      	b.n	14fce <_sercom_get_default_pad+0xea>
   14f16:	4a58      	ldr	r2, [pc, #352]	; (15078 <_sercom_get_default_pad+0x194>)
   14f18:	4293      	cmp	r3, r2
   14f1a:	d100      	bne.n	14f1e <_sercom_get_default_pad+0x3a>
   14f1c:	e06c      	b.n	14ff8 <_sercom_get_default_pad+0x114>
   14f1e:	4a57      	ldr	r2, [pc, #348]	; (1507c <_sercom_get_default_pad+0x198>)
   14f20:	4293      	cmp	r3, r2
   14f22:	d03f      	beq.n	14fa4 <_sercom_get_default_pad+0xc0>
   14f24:	e079      	b.n	1501a <_sercom_get_default_pad+0x136>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   14f26:	1cfb      	adds	r3, r7, #3
   14f28:	781b      	ldrb	r3, [r3, #0]
   14f2a:	2b01      	cmp	r3, #1
   14f2c:	d00a      	beq.n	14f44 <_sercom_get_default_pad+0x60>
   14f2e:	dc02      	bgt.n	14f36 <_sercom_get_default_pad+0x52>
   14f30:	2b00      	cmp	r3, #0
   14f32:	d005      	beq.n	14f40 <_sercom_get_default_pad+0x5c>
   14f34:	e071      	b.n	1501a <_sercom_get_default_pad+0x136>
   14f36:	2b02      	cmp	r3, #2
   14f38:	d006      	beq.n	14f48 <_sercom_get_default_pad+0x64>
   14f3a:	2b03      	cmp	r3, #3
   14f3c:	d006      	beq.n	14f4c <_sercom_get_default_pad+0x68>
   14f3e:	e06c      	b.n	1501a <_sercom_get_default_pad+0x136>
   14f40:	4b4f      	ldr	r3, [pc, #316]	; (15080 <_sercom_get_default_pad+0x19c>)
   14f42:	e08c      	b.n	1505e <_sercom_get_default_pad+0x17a>
   14f44:	4b4f      	ldr	r3, [pc, #316]	; (15084 <_sercom_get_default_pad+0x1a0>)
   14f46:	e08a      	b.n	1505e <_sercom_get_default_pad+0x17a>
   14f48:	4b4f      	ldr	r3, [pc, #316]	; (15088 <_sercom_get_default_pad+0x1a4>)
   14f4a:	e088      	b.n	1505e <_sercom_get_default_pad+0x17a>
   14f4c:	4b4f      	ldr	r3, [pc, #316]	; (1508c <_sercom_get_default_pad+0x1a8>)
   14f4e:	e086      	b.n	1505e <_sercom_get_default_pad+0x17a>
   14f50:	1cfb      	adds	r3, r7, #3
   14f52:	781b      	ldrb	r3, [r3, #0]
   14f54:	2b01      	cmp	r3, #1
   14f56:	d00a      	beq.n	14f6e <_sercom_get_default_pad+0x8a>
   14f58:	dc02      	bgt.n	14f60 <_sercom_get_default_pad+0x7c>
   14f5a:	2b00      	cmp	r3, #0
   14f5c:	d005      	beq.n	14f6a <_sercom_get_default_pad+0x86>
   14f5e:	e05c      	b.n	1501a <_sercom_get_default_pad+0x136>
   14f60:	2b02      	cmp	r3, #2
   14f62:	d006      	beq.n	14f72 <_sercom_get_default_pad+0x8e>
   14f64:	2b03      	cmp	r3, #3
   14f66:	d006      	beq.n	14f76 <_sercom_get_default_pad+0x92>
   14f68:	e057      	b.n	1501a <_sercom_get_default_pad+0x136>
   14f6a:	2303      	movs	r3, #3
   14f6c:	e077      	b.n	1505e <_sercom_get_default_pad+0x17a>
   14f6e:	4b48      	ldr	r3, [pc, #288]	; (15090 <_sercom_get_default_pad+0x1ac>)
   14f70:	e075      	b.n	1505e <_sercom_get_default_pad+0x17a>
   14f72:	4b48      	ldr	r3, [pc, #288]	; (15094 <_sercom_get_default_pad+0x1b0>)
   14f74:	e073      	b.n	1505e <_sercom_get_default_pad+0x17a>
   14f76:	4b48      	ldr	r3, [pc, #288]	; (15098 <_sercom_get_default_pad+0x1b4>)
   14f78:	e071      	b.n	1505e <_sercom_get_default_pad+0x17a>
   14f7a:	1cfb      	adds	r3, r7, #3
   14f7c:	781b      	ldrb	r3, [r3, #0]
   14f7e:	2b01      	cmp	r3, #1
   14f80:	d00a      	beq.n	14f98 <_sercom_get_default_pad+0xb4>
   14f82:	dc02      	bgt.n	14f8a <_sercom_get_default_pad+0xa6>
   14f84:	2b00      	cmp	r3, #0
   14f86:	d005      	beq.n	14f94 <_sercom_get_default_pad+0xb0>
   14f88:	e047      	b.n	1501a <_sercom_get_default_pad+0x136>
   14f8a:	2b02      	cmp	r3, #2
   14f8c:	d006      	beq.n	14f9c <_sercom_get_default_pad+0xb8>
   14f8e:	2b03      	cmp	r3, #3
   14f90:	d006      	beq.n	14fa0 <_sercom_get_default_pad+0xbc>
   14f92:	e042      	b.n	1501a <_sercom_get_default_pad+0x136>
   14f94:	4b41      	ldr	r3, [pc, #260]	; (1509c <_sercom_get_default_pad+0x1b8>)
   14f96:	e062      	b.n	1505e <_sercom_get_default_pad+0x17a>
   14f98:	4b41      	ldr	r3, [pc, #260]	; (150a0 <_sercom_get_default_pad+0x1bc>)
   14f9a:	e060      	b.n	1505e <_sercom_get_default_pad+0x17a>
   14f9c:	4b41      	ldr	r3, [pc, #260]	; (150a4 <_sercom_get_default_pad+0x1c0>)
   14f9e:	e05e      	b.n	1505e <_sercom_get_default_pad+0x17a>
   14fa0:	4b41      	ldr	r3, [pc, #260]	; (150a8 <_sercom_get_default_pad+0x1c4>)
   14fa2:	e05c      	b.n	1505e <_sercom_get_default_pad+0x17a>
   14fa4:	1cfb      	adds	r3, r7, #3
   14fa6:	781b      	ldrb	r3, [r3, #0]
   14fa8:	2b01      	cmp	r3, #1
   14faa:	d00a      	beq.n	14fc2 <_sercom_get_default_pad+0xde>
   14fac:	dc02      	bgt.n	14fb4 <_sercom_get_default_pad+0xd0>
   14fae:	2b00      	cmp	r3, #0
   14fb0:	d005      	beq.n	14fbe <_sercom_get_default_pad+0xda>
   14fb2:	e032      	b.n	1501a <_sercom_get_default_pad+0x136>
   14fb4:	2b02      	cmp	r3, #2
   14fb6:	d006      	beq.n	14fc6 <_sercom_get_default_pad+0xe2>
   14fb8:	2b03      	cmp	r3, #3
   14fba:	d006      	beq.n	14fca <_sercom_get_default_pad+0xe6>
   14fbc:	e02d      	b.n	1501a <_sercom_get_default_pad+0x136>
   14fbe:	4b3b      	ldr	r3, [pc, #236]	; (150ac <_sercom_get_default_pad+0x1c8>)
   14fc0:	e04d      	b.n	1505e <_sercom_get_default_pad+0x17a>
   14fc2:	4b3b      	ldr	r3, [pc, #236]	; (150b0 <_sercom_get_default_pad+0x1cc>)
   14fc4:	e04b      	b.n	1505e <_sercom_get_default_pad+0x17a>
   14fc6:	4b3b      	ldr	r3, [pc, #236]	; (150b4 <_sercom_get_default_pad+0x1d0>)
   14fc8:	e049      	b.n	1505e <_sercom_get_default_pad+0x17a>
   14fca:	4b3b      	ldr	r3, [pc, #236]	; (150b8 <_sercom_get_default_pad+0x1d4>)
   14fcc:	e047      	b.n	1505e <_sercom_get_default_pad+0x17a>
   14fce:	1cfb      	adds	r3, r7, #3
   14fd0:	781b      	ldrb	r3, [r3, #0]
   14fd2:	2b01      	cmp	r3, #1
   14fd4:	d00a      	beq.n	14fec <_sercom_get_default_pad+0x108>
   14fd6:	dc02      	bgt.n	14fde <_sercom_get_default_pad+0xfa>
   14fd8:	2b00      	cmp	r3, #0
   14fda:	d005      	beq.n	14fe8 <_sercom_get_default_pad+0x104>
   14fdc:	e01d      	b.n	1501a <_sercom_get_default_pad+0x136>
   14fde:	2b02      	cmp	r3, #2
   14fe0:	d006      	beq.n	14ff0 <_sercom_get_default_pad+0x10c>
   14fe2:	2b03      	cmp	r3, #3
   14fe4:	d006      	beq.n	14ff4 <_sercom_get_default_pad+0x110>
   14fe6:	e018      	b.n	1501a <_sercom_get_default_pad+0x136>
   14fe8:	4b34      	ldr	r3, [pc, #208]	; (150bc <_sercom_get_default_pad+0x1d8>)
   14fea:	e038      	b.n	1505e <_sercom_get_default_pad+0x17a>
   14fec:	4b34      	ldr	r3, [pc, #208]	; (150c0 <_sercom_get_default_pad+0x1dc>)
   14fee:	e036      	b.n	1505e <_sercom_get_default_pad+0x17a>
   14ff0:	4b34      	ldr	r3, [pc, #208]	; (150c4 <_sercom_get_default_pad+0x1e0>)
   14ff2:	e034      	b.n	1505e <_sercom_get_default_pad+0x17a>
   14ff4:	4b34      	ldr	r3, [pc, #208]	; (150c8 <_sercom_get_default_pad+0x1e4>)
   14ff6:	e032      	b.n	1505e <_sercom_get_default_pad+0x17a>
   14ff8:	1cfb      	adds	r3, r7, #3
   14ffa:	781b      	ldrb	r3, [r3, #0]
   14ffc:	2b01      	cmp	r3, #1
   14ffe:	d00a      	beq.n	15016 <_sercom_get_default_pad+0x132>
   15000:	dc02      	bgt.n	15008 <_sercom_get_default_pad+0x124>
   15002:	2b00      	cmp	r3, #0
   15004:	d005      	beq.n	15012 <_sercom_get_default_pad+0x12e>
   15006:	e008      	b.n	1501a <_sercom_get_default_pad+0x136>
   15008:	2b02      	cmp	r3, #2
   1500a:	d025      	beq.n	15058 <_sercom_get_default_pad+0x174>
   1500c:	2b03      	cmp	r3, #3
   1500e:	d025      	beq.n	1505c <_sercom_get_default_pad+0x178>
   15010:	e003      	b.n	1501a <_sercom_get_default_pad+0x136>
   15012:	4b2e      	ldr	r3, [pc, #184]	; (150cc <_sercom_get_default_pad+0x1e8>)
   15014:	e023      	b.n	1505e <_sercom_get_default_pad+0x17a>
   15016:	4b2e      	ldr	r3, [pc, #184]	; (150d0 <_sercom_get_default_pad+0x1ec>)
   15018:	e021      	b.n	1505e <_sercom_get_default_pad+0x17a>
	}

	Assert(false);
   1501a:	4b2e      	ldr	r3, [pc, #184]	; (150d4 <_sercom_get_default_pad+0x1f0>)
   1501c:	4798      	blx	r3
   1501e:	1c03      	adds	r3, r0, #0
   15020:	2b00      	cmp	r3, #0
   15022:	d00f      	beq.n	15044 <_sercom_get_default_pad+0x160>
   15024:	4b2b      	ldr	r3, [pc, #172]	; (150d4 <_sercom_get_default_pad+0x1f0>)
   15026:	4798      	blx	r3
   15028:	1c02      	adds	r2, r0, #0
   1502a:	4b2b      	ldr	r3, [pc, #172]	; (150d8 <_sercom_get_default_pad+0x1f4>)
   1502c:	492b      	ldr	r1, [pc, #172]	; (150dc <_sercom_get_default_pad+0x1f8>)
   1502e:	9100      	str	r1, [sp, #0]
   15030:	492b      	ldr	r1, [pc, #172]	; (150e0 <_sercom_get_default_pad+0x1fc>)
   15032:	9101      	str	r1, [sp, #4]
   15034:	1c10      	adds	r0, r2, #0
   15036:	2101      	movs	r1, #1
   15038:	1c1a      	adds	r2, r3, #0
   1503a:	23cf      	movs	r3, #207	; 0xcf
   1503c:	4c29      	ldr	r4, [pc, #164]	; (150e4 <_sercom_get_default_pad+0x200>)
   1503e:	47a0      	blx	r4
	return 0;
   15040:	2300      	movs	r3, #0
   15042:	e00c      	b.n	1505e <_sercom_get_default_pad+0x17a>
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
   15044:	4928      	ldr	r1, [pc, #160]	; (150e8 <_sercom_get_default_pad+0x204>)
   15046:	4a26      	ldr	r2, [pc, #152]	; (150e0 <_sercom_get_default_pad+0x1fc>)
   15048:	4b23      	ldr	r3, [pc, #140]	; (150d8 <_sercom_get_default_pad+0x1f4>)
   1504a:	1c08      	adds	r0, r1, #0
   1504c:	1c11      	adds	r1, r2, #0
   1504e:	1c1a      	adds	r2, r3, #0
   15050:	23cf      	movs	r3, #207	; 0xcf
   15052:	4c26      	ldr	r4, [pc, #152]	; (150ec <_sercom_get_default_pad+0x208>)
   15054:	47a0      	blx	r4
   15056:	e7fe      	b.n	15056 <_sercom_get_default_pad+0x172>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   15058:	46c0      	nop			; (mov r8, r8)
   1505a:	e000      	b.n	1505e <_sercom_get_default_pad+0x17a>
   1505c:	46c0      	nop			; (mov r8, r8)
	}

	Assert(false);
	return 0;
}
   1505e:	1c18      	adds	r0, r3, #0
   15060:	46bd      	mov	sp, r7
   15062:	b003      	add	sp, #12
   15064:	bd90      	pop	{r4, r7, pc}
   15066:	46c0      	nop			; (mov r8, r8)
   15068:	42001000 	.word	0x42001000
   1506c:	42000800 	.word	0x42000800
   15070:	42000c00 	.word	0x42000c00
   15074:	42001800 	.word	0x42001800
   15078:	42001c00 	.word	0x42001c00
   1507c:	42001400 	.word	0x42001400
   15080:	00040003 	.word	0x00040003
   15084:	00050003 	.word	0x00050003
   15088:	00060003 	.word	0x00060003
   1508c:	00070003 	.word	0x00070003
   15090:	00010003 	.word	0x00010003
   15094:	001e0003 	.word	0x001e0003
   15098:	001f0003 	.word	0x001f0003
   1509c:	00080003 	.word	0x00080003
   150a0:	00090003 	.word	0x00090003
   150a4:	000a0003 	.word	0x000a0003
   150a8:	000b0003 	.word	0x000b0003
   150ac:	00100003 	.word	0x00100003
   150b0:	00110003 	.word	0x00110003
   150b4:	00120003 	.word	0x00120003
   150b8:	00130003 	.word	0x00130003
   150bc:	000c0003 	.word	0x000c0003
   150c0:	000d0003 	.word	0x000d0003
   150c4:	000e0003 	.word	0x000e0003
   150c8:	000f0003 	.word	0x000f0003
   150cc:	00300002 	.word	0x00300002
   150d0:	00310002 	.word	0x00310002
   150d4:	00014ca1 	.word	0x00014ca1
   150d8:	000266cc 	.word	0x000266cc
   150dc:	00026688 	.word	0x00026688
   150e0:	000266f4 	.word	0x000266f4
   150e4:	000106e9 	.word	0x000106e9
   150e8:	000266a8 	.word	0x000266a8
   150ec:	0001b62d 	.word	0x0001b62d

000150f0 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
   150f0:	b580      	push	{r7, lr}
   150f2:	af00      	add	r7, sp, #0
	return test_case_ptr;
   150f4:	4b02      	ldr	r3, [pc, #8]	; (15100 <test_get_case+0x10>)
   150f6:	681b      	ldr	r3, [r3, #0]
}
   150f8:	1c18      	adds	r0, r3, #0
   150fa:	46bd      	mov	sp, r7
   150fc:	bd80      	pop	{r7, pc}
   150fe:	46c0      	nop			; (mov r8, r8)
   15100:	2000041c 	.word	0x2000041c

00015104 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   15104:	b590      	push	{r4, r7, lr}
   15106:	b085      	sub	sp, #20
   15108:	af02      	add	r7, sp, #8
   1510a:	1c02      	adds	r2, r0, #0
   1510c:	1dfb      	adds	r3, r7, #7
   1510e:	701a      	strb	r2, [r3, #0]
	Assert(false);
   15110:	4b10      	ldr	r3, [pc, #64]	; (15154 <_sercom_default_handler+0x50>)
   15112:	4798      	blx	r3
   15114:	1c03      	adds	r3, r0, #0
   15116:	2b00      	cmp	r3, #0
   15118:	d00e      	beq.n	15138 <_sercom_default_handler+0x34>
   1511a:	4b0e      	ldr	r3, [pc, #56]	; (15154 <_sercom_default_handler+0x50>)
   1511c:	4798      	blx	r3
   1511e:	1c02      	adds	r2, r0, #0
   15120:	4b0d      	ldr	r3, [pc, #52]	; (15158 <_sercom_default_handler+0x54>)
   15122:	490e      	ldr	r1, [pc, #56]	; (1515c <_sercom_default_handler+0x58>)
   15124:	9100      	str	r1, [sp, #0]
   15126:	490e      	ldr	r1, [pc, #56]	; (15160 <_sercom_default_handler+0x5c>)
   15128:	9101      	str	r1, [sp, #4]
   1512a:	1c10      	adds	r0, r2, #0
   1512c:	2101      	movs	r1, #1
   1512e:	1c1a      	adds	r2, r3, #0
   15130:	233e      	movs	r3, #62	; 0x3e
   15132:	4c0c      	ldr	r4, [pc, #48]	; (15164 <_sercom_default_handler+0x60>)
   15134:	47a0      	blx	r4
   15136:	e009      	b.n	1514c <_sercom_default_handler+0x48>
   15138:	490b      	ldr	r1, [pc, #44]	; (15168 <_sercom_default_handler+0x64>)
   1513a:	4a09      	ldr	r2, [pc, #36]	; (15160 <_sercom_default_handler+0x5c>)
   1513c:	4b06      	ldr	r3, [pc, #24]	; (15158 <_sercom_default_handler+0x54>)
   1513e:	1c08      	adds	r0, r1, #0
   15140:	1c11      	adds	r1, r2, #0
   15142:	1c1a      	adds	r2, r3, #0
   15144:	233e      	movs	r3, #62	; 0x3e
   15146:	4c09      	ldr	r4, [pc, #36]	; (1516c <_sercom_default_handler+0x68>)
   15148:	47a0      	blx	r4
   1514a:	e7fe      	b.n	1514a <_sercom_default_handler+0x46>
}
   1514c:	46bd      	mov	sp, r7
   1514e:	b003      	add	sp, #12
   15150:	bd90      	pop	{r4, r7, pc}
   15152:	46c0      	nop			; (mov r8, r8)
   15154:	000150f1 	.word	0x000150f1
   15158:	000266fc 	.word	0x000266fc
   1515c:	00026730 	.word	0x00026730
   15160:	00026748 	.word	0x00026748
   15164:	000106e9 	.word	0x000106e9
   15168:	00026750 	.word	0x00026750
   1516c:	0001b62d 	.word	0x0001b62d

00015170 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   15170:	b590      	push	{r4, r7, lr}
   15172:	b08d      	sub	sp, #52	; 0x34
   15174:	af02      	add	r7, sp, #8
   15176:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   15178:	1c3b      	adds	r3, r7, #0
   1517a:	330c      	adds	r3, #12
   1517c:	4a1d      	ldr	r2, [pc, #116]	; (151f4 <_sercom_get_sercom_inst_index+0x84>)
   1517e:	ca13      	ldmia	r2!, {r0, r1, r4}
   15180:	c313      	stmia	r3!, {r0, r1, r4}
   15182:	ca13      	ldmia	r2!, {r0, r1, r4}
   15184:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   15186:	2300      	movs	r3, #0
   15188:	627b      	str	r3, [r7, #36]	; 0x24
   1518a:	e00d      	b.n	151a8 <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   1518c:	687a      	ldr	r2, [r7, #4]
   1518e:	1c3b      	adds	r3, r7, #0
   15190:	330c      	adds	r3, #12
   15192:	6a79      	ldr	r1, [r7, #36]	; 0x24
   15194:	0089      	lsls	r1, r1, #2
   15196:	58cb      	ldr	r3, [r1, r3]
   15198:	429a      	cmp	r2, r3
   1519a:	d102      	bne.n	151a2 <_sercom_get_sercom_inst_index+0x32>
			return i;
   1519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1519e:	b2db      	uxtb	r3, r3
   151a0:	e024      	b.n	151ec <_sercom_get_sercom_inst_index+0x7c>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   151a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   151a4:	3301      	adds	r3, #1
   151a6:	627b      	str	r3, [r7, #36]	; 0x24
   151a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   151aa:	2b05      	cmp	r3, #5
   151ac:	d9ee      	bls.n	1518c <_sercom_get_sercom_inst_index+0x1c>
			return i;
		}
	}

	/* Invalid data given. */
	Assert(false);
   151ae:	4b12      	ldr	r3, [pc, #72]	; (151f8 <_sercom_get_sercom_inst_index+0x88>)
   151b0:	4798      	blx	r3
   151b2:	1c03      	adds	r3, r0, #0
   151b4:	2b00      	cmp	r3, #0
   151b6:	d00f      	beq.n	151d8 <_sercom_get_sercom_inst_index+0x68>
   151b8:	4b0f      	ldr	r3, [pc, #60]	; (151f8 <_sercom_get_sercom_inst_index+0x88>)
   151ba:	4798      	blx	r3
   151bc:	1c02      	adds	r2, r0, #0
   151be:	4b0f      	ldr	r3, [pc, #60]	; (151fc <_sercom_get_sercom_inst_index+0x8c>)
   151c0:	490f      	ldr	r1, [pc, #60]	; (15200 <_sercom_get_sercom_inst_index+0x90>)
   151c2:	9100      	str	r1, [sp, #0]
   151c4:	490f      	ldr	r1, [pc, #60]	; (15204 <_sercom_get_sercom_inst_index+0x94>)
   151c6:	9101      	str	r1, [sp, #4]
   151c8:	1c10      	adds	r0, r2, #0
   151ca:	2101      	movs	r1, #1
   151cc:	1c1a      	adds	r2, r3, #0
   151ce:	2357      	movs	r3, #87	; 0x57
   151d0:	4c0d      	ldr	r4, [pc, #52]	; (15208 <_sercom_get_sercom_inst_index+0x98>)
   151d2:	47a0      	blx	r4
	return 0;
   151d4:	2300      	movs	r3, #0
   151d6:	e009      	b.n	151ec <_sercom_get_sercom_inst_index+0x7c>
			return i;
		}
	}

	/* Invalid data given. */
	Assert(false);
   151d8:	490c      	ldr	r1, [pc, #48]	; (1520c <_sercom_get_sercom_inst_index+0x9c>)
   151da:	4a0a      	ldr	r2, [pc, #40]	; (15204 <_sercom_get_sercom_inst_index+0x94>)
   151dc:	4b07      	ldr	r3, [pc, #28]	; (151fc <_sercom_get_sercom_inst_index+0x8c>)
   151de:	1c08      	adds	r0, r1, #0
   151e0:	1c11      	adds	r1, r2, #0
   151e2:	1c1a      	adds	r2, r3, #0
   151e4:	2357      	movs	r3, #87	; 0x57
   151e6:	4c0a      	ldr	r4, [pc, #40]	; (15210 <_sercom_get_sercom_inst_index+0xa0>)
   151e8:	47a0      	blx	r4
   151ea:	e7fe      	b.n	151ea <_sercom_get_sercom_inst_index+0x7a>
	return 0;
}
   151ec:	1c18      	adds	r0, r3, #0
   151ee:	46bd      	mov	sp, r7
   151f0:	b00b      	add	sp, #44	; 0x2c
   151f2:	bd90      	pop	{r4, r7, pc}
   151f4:	00026774 	.word	0x00026774
   151f8:	000150f1 	.word	0x000150f1
   151fc:	000266fc 	.word	0x000266fc
   15200:	00026730 	.word	0x00026730
   15204:	00026748 	.word	0x00026748
   15208:	000106e9 	.word	0x000106e9
   1520c:	00026750 	.word	0x00026750
   15210:	0001b62d 	.word	0x0001b62d

00015214 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   15214:	b580      	push	{r7, lr}
   15216:	b084      	sub	sp, #16
   15218:	af00      	add	r7, sp, #0
   1521a:	1c02      	adds	r2, r0, #0
   1521c:	6039      	str	r1, [r7, #0]
   1521e:	1dfb      	adds	r3, r7, #7
   15220:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
   15222:	4b13      	ldr	r3, [pc, #76]	; (15270 <_sercom_set_handler+0x5c>)
   15224:	781b      	ldrb	r3, [r3, #0]
   15226:	2201      	movs	r2, #1
   15228:	4053      	eors	r3, r2
   1522a:	b2db      	uxtb	r3, r3
   1522c:	2b00      	cmp	r3, #0
   1522e:	d015      	beq.n	1525c <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   15230:	2300      	movs	r3, #0
   15232:	60fb      	str	r3, [r7, #12]
   15234:	e00c      	b.n	15250 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   15236:	4b0f      	ldr	r3, [pc, #60]	; (15274 <_sercom_set_handler+0x60>)
   15238:	68fa      	ldr	r2, [r7, #12]
   1523a:	0092      	lsls	r2, r2, #2
   1523c:	490e      	ldr	r1, [pc, #56]	; (15278 <_sercom_set_handler+0x64>)
   1523e:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   15240:	4b0e      	ldr	r3, [pc, #56]	; (1527c <_sercom_set_handler+0x68>)
   15242:	68fa      	ldr	r2, [r7, #12]
   15244:	0092      	lsls	r2, r2, #2
   15246:	2100      	movs	r1, #0
   15248:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1524a:	68fb      	ldr	r3, [r7, #12]
   1524c:	3301      	adds	r3, #1
   1524e:	60fb      	str	r3, [r7, #12]
   15250:	68fb      	ldr	r3, [r7, #12]
   15252:	2b05      	cmp	r3, #5
   15254:	d9ef      	bls.n	15236 <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
   15256:	4b06      	ldr	r3, [pc, #24]	; (15270 <_sercom_set_handler+0x5c>)
   15258:	2201      	movs	r2, #1
   1525a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   1525c:	1dfb      	adds	r3, r7, #7
   1525e:	781a      	ldrb	r2, [r3, #0]
   15260:	4b04      	ldr	r3, [pc, #16]	; (15274 <_sercom_set_handler+0x60>)
   15262:	0092      	lsls	r2, r2, #2
   15264:	6839      	ldr	r1, [r7, #0]
   15266:	50d1      	str	r1, [r2, r3]
}
   15268:	46bd      	mov	sp, r7
   1526a:	b004      	add	sp, #16
   1526c:	bd80      	pop	{r7, pc}
   1526e:	46c0      	nop			; (mov r8, r8)
   15270:	2000042c 	.word	0x2000042c
   15274:	20000430 	.word	0x20000430
   15278:	00015105 	.word	0x00015105
   1527c:	20001200 	.word	0x20001200

00015280 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   15280:	b590      	push	{r4, r7, lr}
   15282:	b085      	sub	sp, #20
   15284:	af00      	add	r7, sp, #0
   15286:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   15288:	1c3a      	adds	r2, r7, #0
   1528a:	3208      	adds	r2, #8
   1528c:	4b0e      	ldr	r3, [pc, #56]	; (152c8 <_sercom_get_interrupt_vector+0x48>)
   1528e:	1c11      	adds	r1, r2, #0
   15290:	1c1a      	adds	r2, r3, #0
   15292:	2306      	movs	r3, #6
   15294:	1c08      	adds	r0, r1, #0
   15296:	1c11      	adds	r1, r2, #0
   15298:	1c1a      	adds	r2, r3, #0
   1529a:	4b0c      	ldr	r3, [pc, #48]	; (152cc <_sercom_get_interrupt_vector+0x4c>)
   1529c:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   1529e:	1c3c      	adds	r4, r7, #0
   152a0:	340f      	adds	r4, #15
   152a2:	687b      	ldr	r3, [r7, #4]
   152a4:	1c18      	adds	r0, r3, #0
   152a6:	4b0a      	ldr	r3, [pc, #40]	; (152d0 <_sercom_get_interrupt_vector+0x50>)
   152a8:	4798      	blx	r3
   152aa:	1c03      	adds	r3, r0, #0
   152ac:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   152ae:	1c3b      	adds	r3, r7, #0
   152b0:	330f      	adds	r3, #15
   152b2:	781b      	ldrb	r3, [r3, #0]
   152b4:	1c3a      	adds	r2, r7, #0
   152b6:	3208      	adds	r2, #8
   152b8:	5cd3      	ldrb	r3, [r2, r3]
   152ba:	b2db      	uxtb	r3, r3
   152bc:	b25b      	sxtb	r3, r3
}
   152be:	1c18      	adds	r0, r3, #0
   152c0:	46bd      	mov	sp, r7
   152c2:	b005      	add	sp, #20
   152c4:	bd90      	pop	{r4, r7, pc}
   152c6:	46c0      	nop			; (mov r8, r8)
   152c8:	0002678c 	.word	0x0002678c
   152cc:	0001b375 	.word	0x0001b375
   152d0:	00015171 	.word	0x00015171

000152d4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   152d4:	b580      	push	{r7, lr}
   152d6:	af00      	add	r7, sp, #0
   152d8:	4b02      	ldr	r3, [pc, #8]	; (152e4 <SERCOM0_Handler+0x10>)
   152da:	681b      	ldr	r3, [r3, #0]
   152dc:	2000      	movs	r0, #0
   152de:	4798      	blx	r3
   152e0:	46bd      	mov	sp, r7
   152e2:	bd80      	pop	{r7, pc}
   152e4:	20000430 	.word	0x20000430

000152e8 <SERCOM1_Handler>:
   152e8:	b580      	push	{r7, lr}
   152ea:	af00      	add	r7, sp, #0
   152ec:	4b02      	ldr	r3, [pc, #8]	; (152f8 <SERCOM1_Handler+0x10>)
   152ee:	685b      	ldr	r3, [r3, #4]
   152f0:	2001      	movs	r0, #1
   152f2:	4798      	blx	r3
   152f4:	46bd      	mov	sp, r7
   152f6:	bd80      	pop	{r7, pc}
   152f8:	20000430 	.word	0x20000430

000152fc <SERCOM2_Handler>:
   152fc:	b580      	push	{r7, lr}
   152fe:	af00      	add	r7, sp, #0
   15300:	4b02      	ldr	r3, [pc, #8]	; (1530c <SERCOM2_Handler+0x10>)
   15302:	689b      	ldr	r3, [r3, #8]
   15304:	2002      	movs	r0, #2
   15306:	4798      	blx	r3
   15308:	46bd      	mov	sp, r7
   1530a:	bd80      	pop	{r7, pc}
   1530c:	20000430 	.word	0x20000430

00015310 <SERCOM3_Handler>:
   15310:	b580      	push	{r7, lr}
   15312:	af00      	add	r7, sp, #0
   15314:	4b02      	ldr	r3, [pc, #8]	; (15320 <SERCOM3_Handler+0x10>)
   15316:	68db      	ldr	r3, [r3, #12]
   15318:	2003      	movs	r0, #3
   1531a:	4798      	blx	r3
   1531c:	46bd      	mov	sp, r7
   1531e:	bd80      	pop	{r7, pc}
   15320:	20000430 	.word	0x20000430

00015324 <SERCOM4_Handler>:
   15324:	b580      	push	{r7, lr}
   15326:	af00      	add	r7, sp, #0
   15328:	4b02      	ldr	r3, [pc, #8]	; (15334 <SERCOM4_Handler+0x10>)
   1532a:	691b      	ldr	r3, [r3, #16]
   1532c:	2004      	movs	r0, #4
   1532e:	4798      	blx	r3
   15330:	46bd      	mov	sp, r7
   15332:	bd80      	pop	{r7, pc}
   15334:	20000430 	.word	0x20000430

00015338 <SERCOM5_Handler>:
   15338:	b580      	push	{r7, lr}
   1533a:	af00      	add	r7, sp, #0
   1533c:	4b02      	ldr	r3, [pc, #8]	; (15348 <SERCOM5_Handler+0x10>)
   1533e:	695b      	ldr	r3, [r3, #20]
   15340:	2005      	movs	r0, #5
   15342:	4798      	blx	r3
   15344:	46bd      	mov	sp, r7
   15346:	bd80      	pop	{r7, pc}
   15348:	20000430 	.word	0x20000430

0001534c <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
   1534c:	b580      	push	{r7, lr}
   1534e:	af00      	add	r7, sp, #0
	return test_case_ptr;
   15350:	4b02      	ldr	r3, [pc, #8]	; (1535c <test_get_case+0x10>)
   15352:	681b      	ldr	r3, [r3, #0]
}
   15354:	1c18      	adds	r0, r3, #0
   15356:	46bd      	mov	sp, r7
   15358:	bd80      	pop	{r7, pc}
   1535a:	46c0      	nop			; (mov r8, r8)
   1535c:	2000041c 	.word	0x2000041c

00015360 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   15360:	b590      	push	{r4, r7, lr}
   15362:	b085      	sub	sp, #20
   15364:	af02      	add	r7, sp, #8
   15366:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
   15368:	4b15      	ldr	r3, [pc, #84]	; (153c0 <system_gclk_chan_get_config_defaults+0x60>)
   1536a:	4798      	blx	r3
   1536c:	1c03      	adds	r3, r0, #0
   1536e:	2b00      	cmp	r3, #0
   15370:	d011      	beq.n	15396 <system_gclk_chan_get_config_defaults+0x36>
   15372:	687b      	ldr	r3, [r7, #4]
   15374:	2b00      	cmp	r3, #0
   15376:	d119      	bne.n	153ac <system_gclk_chan_get_config_defaults+0x4c>
   15378:	4b11      	ldr	r3, [pc, #68]	; (153c0 <system_gclk_chan_get_config_defaults+0x60>)
   1537a:	4798      	blx	r3
   1537c:	1c01      	adds	r1, r0, #0
   1537e:	4a11      	ldr	r2, [pc, #68]	; (153c4 <system_gclk_chan_get_config_defaults+0x64>)
   15380:	2314      	movs	r3, #20
   15382:	33ff      	adds	r3, #255	; 0xff
   15384:	4810      	ldr	r0, [pc, #64]	; (153c8 <system_gclk_chan_get_config_defaults+0x68>)
   15386:	9000      	str	r0, [sp, #0]
   15388:	4810      	ldr	r0, [pc, #64]	; (153cc <system_gclk_chan_get_config_defaults+0x6c>)
   1538a:	9001      	str	r0, [sp, #4]
   1538c:	1c08      	adds	r0, r1, #0
   1538e:	2101      	movs	r1, #1
   15390:	4c0f      	ldr	r4, [pc, #60]	; (153d0 <system_gclk_chan_get_config_defaults+0x70>)
   15392:	47a0      	blx	r4
   15394:	e00a      	b.n	153ac <system_gclk_chan_get_config_defaults+0x4c>
   15396:	687b      	ldr	r3, [r7, #4]
   15398:	2b00      	cmp	r3, #0
   1539a:	d107      	bne.n	153ac <system_gclk_chan_get_config_defaults+0x4c>
   1539c:	480d      	ldr	r0, [pc, #52]	; (153d4 <system_gclk_chan_get_config_defaults+0x74>)
   1539e:	490b      	ldr	r1, [pc, #44]	; (153cc <system_gclk_chan_get_config_defaults+0x6c>)
   153a0:	4a08      	ldr	r2, [pc, #32]	; (153c4 <system_gclk_chan_get_config_defaults+0x64>)
   153a2:	2314      	movs	r3, #20
   153a4:	33ff      	adds	r3, #255	; 0xff
   153a6:	4c0c      	ldr	r4, [pc, #48]	; (153d8 <system_gclk_chan_get_config_defaults+0x78>)
   153a8:	47a0      	blx	r4
   153aa:	e7fe      	b.n	153aa <system_gclk_chan_get_config_defaults+0x4a>

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   153ac:	687b      	ldr	r3, [r7, #4]
   153ae:	2200      	movs	r2, #0
   153b0:	701a      	strb	r2, [r3, #0]
	config->write_lock       = false;
   153b2:	687b      	ldr	r3, [r7, #4]
   153b4:	2200      	movs	r2, #0
   153b6:	705a      	strb	r2, [r3, #1]
}
   153b8:	46bd      	mov	sp, r7
   153ba:	b003      	add	sp, #12
   153bc:	bd90      	pop	{r4, r7, pc}
   153be:	46c0      	nop			; (mov r8, r8)
   153c0:	0001534d 	.word	0x0001534d
   153c4:	00026794 	.word	0x00026794
   153c8:	000267c0 	.word	0x000267c0
   153cc:	000267d8 	.word	0x000267d8
   153d0:	000106e9 	.word	0x000106e9
   153d4:	000267e0 	.word	0x000267e0
   153d8:	0001b62d 	.word	0x0001b62d

000153dc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   153dc:	b590      	push	{r4, r7, lr}
   153de:	b085      	sub	sp, #20
   153e0:	af02      	add	r7, sp, #8
   153e2:	1c02      	adds	r2, r0, #0
   153e4:	6039      	str	r1, [r7, #0]
   153e6:	1dfb      	adds	r3, r7, #7
   153e8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   153ea:	1dfb      	adds	r3, r7, #7
   153ec:	781b      	ldrb	r3, [r3, #0]
   153ee:	2b01      	cmp	r3, #1
   153f0:	d00a      	beq.n	15408 <system_apb_clock_set_mask+0x2c>
   153f2:	2b02      	cmp	r3, #2
   153f4:	d00f      	beq.n	15416 <system_apb_clock_set_mask+0x3a>
   153f6:	2b00      	cmp	r3, #0
   153f8:	d114      	bne.n	15424 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   153fa:	4b1a      	ldr	r3, [pc, #104]	; (15464 <system_apb_clock_set_mask+0x88>)
   153fc:	4a19      	ldr	r2, [pc, #100]	; (15464 <system_apb_clock_set_mask+0x88>)
   153fe:	6991      	ldr	r1, [r2, #24]
   15400:	683a      	ldr	r2, [r7, #0]
   15402:	430a      	orrs	r2, r1
   15404:	619a      	str	r2, [r3, #24]
			break;
   15406:	e028      	b.n	1545a <system_apb_clock_set_mask+0x7e>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   15408:	4b16      	ldr	r3, [pc, #88]	; (15464 <system_apb_clock_set_mask+0x88>)
   1540a:	4a16      	ldr	r2, [pc, #88]	; (15464 <system_apb_clock_set_mask+0x88>)
   1540c:	69d1      	ldr	r1, [r2, #28]
   1540e:	683a      	ldr	r2, [r7, #0]
   15410:	430a      	orrs	r2, r1
   15412:	61da      	str	r2, [r3, #28]
			break;
   15414:	e021      	b.n	1545a <system_apb_clock_set_mask+0x7e>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   15416:	4b13      	ldr	r3, [pc, #76]	; (15464 <system_apb_clock_set_mask+0x88>)
   15418:	4a12      	ldr	r2, [pc, #72]	; (15464 <system_apb_clock_set_mask+0x88>)
   1541a:	6a11      	ldr	r1, [r2, #32]
   1541c:	683a      	ldr	r2, [r7, #0]
   1541e:	430a      	orrs	r2, r1
   15420:	621a      	str	r2, [r3, #32]
			break;
   15422:	e01a      	b.n	1545a <system_apb_clock_set_mask+0x7e>

		default:
			Assert(false);
   15424:	4b10      	ldr	r3, [pc, #64]	; (15468 <system_apb_clock_set_mask+0x8c>)
   15426:	4798      	blx	r3
   15428:	1c03      	adds	r3, r0, #0
   1542a:	2b00      	cmp	r3, #0
   1542c:	d00e      	beq.n	1544c <system_apb_clock_set_mask+0x70>
   1542e:	4b0e      	ldr	r3, [pc, #56]	; (15468 <system_apb_clock_set_mask+0x8c>)
   15430:	4798      	blx	r3
   15432:	1c01      	adds	r1, r0, #0
   15434:	4a0d      	ldr	r2, [pc, #52]	; (1546c <system_apb_clock_set_mask+0x90>)
   15436:	4b0e      	ldr	r3, [pc, #56]	; (15470 <system_apb_clock_set_mask+0x94>)
   15438:	480e      	ldr	r0, [pc, #56]	; (15474 <system_apb_clock_set_mask+0x98>)
   1543a:	9000      	str	r0, [sp, #0]
   1543c:	480e      	ldr	r0, [pc, #56]	; (15478 <system_apb_clock_set_mask+0x9c>)
   1543e:	9001      	str	r0, [sp, #4]
   15440:	1c08      	adds	r0, r1, #0
   15442:	2101      	movs	r1, #1
   15444:	4c0d      	ldr	r4, [pc, #52]	; (1547c <system_apb_clock_set_mask+0xa0>)
   15446:	47a0      	blx	r4
			return STATUS_ERR_INVALID_ARG;
   15448:	2317      	movs	r3, #23
   1544a:	e007      	b.n	1545c <system_apb_clock_set_mask+0x80>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
			break;

		default:
			Assert(false);
   1544c:	480c      	ldr	r0, [pc, #48]	; (15480 <system_apb_clock_set_mask+0xa4>)
   1544e:	490a      	ldr	r1, [pc, #40]	; (15478 <system_apb_clock_set_mask+0x9c>)
   15450:	4a06      	ldr	r2, [pc, #24]	; (1546c <system_apb_clock_set_mask+0x90>)
   15452:	4b07      	ldr	r3, [pc, #28]	; (15470 <system_apb_clock_set_mask+0x94>)
   15454:	4c0b      	ldr	r4, [pc, #44]	; (15484 <system_apb_clock_set_mask+0xa8>)
   15456:	47a0      	blx	r4
   15458:	e7fe      	b.n	15458 <system_apb_clock_set_mask+0x7c>
			return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
   1545a:	2300      	movs	r3, #0
}
   1545c:	1c18      	adds	r0, r3, #0
   1545e:	46bd      	mov	sp, r7
   15460:	b003      	add	sp, #12
   15462:	bd90      	pop	{r4, r7, pc}
   15464:	40000400 	.word	0x40000400
   15468:	0001534d 	.word	0x0001534d
   1546c:	00026804 	.word	0x00026804
   15470:	00000409 	.word	0x00000409
   15474:	000267c0 	.word	0x000267c0
   15478:	00026834 	.word	0x00026834
   1547c:	000106e9 	.word	0x000106e9
   15480:	000267e0 	.word	0x000267e0
   15484:	0001b62d 	.word	0x0001b62d

00015488 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   15488:	b590      	push	{r4, r7, lr}
   1548a:	b085      	sub	sp, #20
   1548c:	af02      	add	r7, sp, #8
   1548e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
   15490:	4b16      	ldr	r3, [pc, #88]	; (154ec <system_pinmux_get_config_defaults+0x64>)
   15492:	4798      	blx	r3
   15494:	1c03      	adds	r3, r0, #0
   15496:	2b00      	cmp	r3, #0
   15498:	d011      	beq.n	154be <system_pinmux_get_config_defaults+0x36>
   1549a:	687b      	ldr	r3, [r7, #4]
   1549c:	2b00      	cmp	r3, #0
   1549e:	d119      	bne.n	154d4 <system_pinmux_get_config_defaults+0x4c>
   154a0:	4b12      	ldr	r3, [pc, #72]	; (154ec <system_pinmux_get_config_defaults+0x64>)
   154a2:	4798      	blx	r3
   154a4:	1c01      	adds	r1, r0, #0
   154a6:	4a12      	ldr	r2, [pc, #72]	; (154f0 <system_pinmux_get_config_defaults+0x68>)
   154a8:	239d      	movs	r3, #157	; 0x9d
   154aa:	005b      	lsls	r3, r3, #1
   154ac:	4811      	ldr	r0, [pc, #68]	; (154f4 <system_pinmux_get_config_defaults+0x6c>)
   154ae:	9000      	str	r0, [sp, #0]
   154b0:	4811      	ldr	r0, [pc, #68]	; (154f8 <system_pinmux_get_config_defaults+0x70>)
   154b2:	9001      	str	r0, [sp, #4]
   154b4:	1c08      	adds	r0, r1, #0
   154b6:	2101      	movs	r1, #1
   154b8:	4c10      	ldr	r4, [pc, #64]	; (154fc <system_pinmux_get_config_defaults+0x74>)
   154ba:	47a0      	blx	r4
   154bc:	e00a      	b.n	154d4 <system_pinmux_get_config_defaults+0x4c>
   154be:	687b      	ldr	r3, [r7, #4]
   154c0:	2b00      	cmp	r3, #0
   154c2:	d107      	bne.n	154d4 <system_pinmux_get_config_defaults+0x4c>
   154c4:	480e      	ldr	r0, [pc, #56]	; (15500 <system_pinmux_get_config_defaults+0x78>)
   154c6:	490c      	ldr	r1, [pc, #48]	; (154f8 <system_pinmux_get_config_defaults+0x70>)
   154c8:	4a09      	ldr	r2, [pc, #36]	; (154f0 <system_pinmux_get_config_defaults+0x68>)
   154ca:	239d      	movs	r3, #157	; 0x9d
   154cc:	005b      	lsls	r3, r3, #1
   154ce:	4c0d      	ldr	r4, [pc, #52]	; (15504 <system_pinmux_get_config_defaults+0x7c>)
   154d0:	47a0      	blx	r4
   154d2:	e7fe      	b.n	154d2 <system_pinmux_get_config_defaults+0x4a>

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   154d4:	687b      	ldr	r3, [r7, #4]
   154d6:	2280      	movs	r2, #128	; 0x80
   154d8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   154da:	687b      	ldr	r3, [r7, #4]
   154dc:	2200      	movs	r2, #0
   154de:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   154e0:	687b      	ldr	r3, [r7, #4]
   154e2:	2201      	movs	r2, #1
   154e4:	709a      	strb	r2, [r3, #2]
}
   154e6:	46bd      	mov	sp, r7
   154e8:	b003      	add	sp, #12
   154ea:	bd90      	pop	{r4, r7, pc}
   154ec:	0001534d 	.word	0x0001534d
   154f0:	0002683c 	.word	0x0002683c
   154f4:	000267c0 	.word	0x000267c0
   154f8:	000267d8 	.word	0x000267d8
   154fc:	000106e9 	.word	0x000106e9
   15500:	000267e0 	.word	0x000267e0
   15504:	0001b62d 	.word	0x0001b62d

00015508 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   15508:	b590      	push	{r4, r7, lr}
   1550a:	b087      	sub	sp, #28
   1550c:	af02      	add	r7, sp, #8
   1550e:	1c02      	adds	r2, r0, #0
   15510:	1dfb      	adds	r3, r7, #7
   15512:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   15514:	1c3b      	adds	r3, r7, #0
   15516:	330f      	adds	r3, #15
   15518:	1dfa      	adds	r2, r7, #7
   1551a:	7812      	ldrb	r2, [r2, #0]
   1551c:	09d2      	lsrs	r2, r2, #7
   1551e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   15520:	1c3b      	adds	r3, r7, #0
   15522:	330e      	adds	r3, #14
   15524:	1dfa      	adds	r2, r7, #7
   15526:	7812      	ldrb	r2, [r2, #0]
   15528:	0952      	lsrs	r2, r2, #5
   1552a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1552c:	4b1b      	ldr	r3, [pc, #108]	; (1559c <system_pinmux_get_group_from_gpio_pin+0x94>)
   1552e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   15530:	1c3b      	adds	r3, r7, #0
   15532:	330f      	adds	r3, #15
   15534:	781b      	ldrb	r3, [r3, #0]
   15536:	2b00      	cmp	r3, #0
   15538:	d10e      	bne.n	15558 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
   1553a:	1c3b      	adds	r3, r7, #0
   1553c:	330f      	adds	r3, #15
   1553e:	781b      	ldrb	r3, [r3, #0]
   15540:	009b      	lsls	r3, r3, #2
   15542:	2210      	movs	r2, #16
   15544:	19d2      	adds	r2, r2, r7
   15546:	18d3      	adds	r3, r2, r3
   15548:	3b08      	subs	r3, #8
   1554a:	681a      	ldr	r2, [r3, #0]
   1554c:	1c3b      	adds	r3, r7, #0
   1554e:	330e      	adds	r3, #14
   15550:	781b      	ldrb	r3, [r3, #0]
   15552:	01db      	lsls	r3, r3, #7
   15554:	18d3      	adds	r3, r2, r3
   15556:	e01c      	b.n	15592 <system_pinmux_get_group_from_gpio_pin+0x8a>
	} else {
		Assert(false);
   15558:	4b11      	ldr	r3, [pc, #68]	; (155a0 <system_pinmux_get_group_from_gpio_pin+0x98>)
   1555a:	4798      	blx	r3
   1555c:	1c03      	adds	r3, r0, #0
   1555e:	2b00      	cmp	r3, #0
   15560:	d00f      	beq.n	15582 <system_pinmux_get_group_from_gpio_pin+0x7a>
   15562:	4b0f      	ldr	r3, [pc, #60]	; (155a0 <system_pinmux_get_group_from_gpio_pin+0x98>)
   15564:	4798      	blx	r3
   15566:	1c01      	adds	r1, r0, #0
   15568:	4a0e      	ldr	r2, [pc, #56]	; (155a4 <system_pinmux_get_group_from_gpio_pin+0x9c>)
   1556a:	2368      	movs	r3, #104	; 0x68
   1556c:	33ff      	adds	r3, #255	; 0xff
   1556e:	480e      	ldr	r0, [pc, #56]	; (155a8 <system_pinmux_get_group_from_gpio_pin+0xa0>)
   15570:	9000      	str	r0, [sp, #0]
   15572:	480e      	ldr	r0, [pc, #56]	; (155ac <system_pinmux_get_group_from_gpio_pin+0xa4>)
   15574:	9001      	str	r0, [sp, #4]
   15576:	1c08      	adds	r0, r1, #0
   15578:	2101      	movs	r1, #1
   1557a:	4c0d      	ldr	r4, [pc, #52]	; (155b0 <system_pinmux_get_group_from_gpio_pin+0xa8>)
   1557c:	47a0      	blx	r4
		return NULL;
   1557e:	2300      	movs	r3, #0
   15580:	e007      	b.n	15592 <system_pinmux_get_group_from_gpio_pin+0x8a>
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
   15582:	480c      	ldr	r0, [pc, #48]	; (155b4 <system_pinmux_get_group_from_gpio_pin+0xac>)
   15584:	4909      	ldr	r1, [pc, #36]	; (155ac <system_pinmux_get_group_from_gpio_pin+0xa4>)
   15586:	4a07      	ldr	r2, [pc, #28]	; (155a4 <system_pinmux_get_group_from_gpio_pin+0x9c>)
   15588:	2368      	movs	r3, #104	; 0x68
   1558a:	33ff      	adds	r3, #255	; 0xff
   1558c:	4c0a      	ldr	r4, [pc, #40]	; (155b8 <system_pinmux_get_group_from_gpio_pin+0xb0>)
   1558e:	47a0      	blx	r4
   15590:	e7fe      	b.n	15590 <system_pinmux_get_group_from_gpio_pin+0x88>
		return NULL;
	}
}
   15592:	1c18      	adds	r0, r3, #0
   15594:	46bd      	mov	sp, r7
   15596:	b005      	add	sp, #20
   15598:	bd90      	pop	{r4, r7, pc}
   1559a:	46c0      	nop			; (mov r8, r8)
   1559c:	41004400 	.word	0x41004400
   155a0:	0001534d 	.word	0x0001534d
   155a4:	0002683c 	.word	0x0002683c
   155a8:	000267c0 	.word	0x000267c0
   155ac:	00026834 	.word	0x00026834
   155b0:	000106e9 	.word	0x000106e9
   155b4:	000267e0 	.word	0x000267e0
   155b8:	0001b62d 	.word	0x0001b62d

000155bc <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
   155bc:	b580      	push	{r7, lr}
   155be:	b086      	sub	sp, #24
   155c0:	af00      	add	r7, sp, #0
   155c2:	1c02      	adds	r2, r0, #0
   155c4:	1dfb      	adds	r3, r7, #7
   155c6:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   155c8:	1dfb      	adds	r3, r7, #7
   155ca:	781b      	ldrb	r3, [r3, #0]
   155cc:	1c18      	adds	r0, r3, #0
   155ce:	4b19      	ldr	r3, [pc, #100]	; (15634 <system_pinmux_pin_get_mux_position+0x78>)
   155d0:	4798      	blx	r3
   155d2:	1c03      	adds	r3, r0, #0
   155d4:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
   155d6:	1dfb      	adds	r3, r7, #7
   155d8:	781a      	ldrb	r2, [r3, #0]
   155da:	231f      	movs	r3, #31
   155dc:	4013      	ands	r3, r2
   155de:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   155e0:	6979      	ldr	r1, [r7, #20]
   155e2:	2340      	movs	r3, #64	; 0x40
   155e4:	693a      	ldr	r2, [r7, #16]
   155e6:	188a      	adds	r2, r1, r2
   155e8:	18d3      	adds	r3, r2, r3
   155ea:	781b      	ldrb	r3, [r3, #0]
   155ec:	b2db      	uxtb	r3, r3
   155ee:	1c1a      	adds	r2, r3, #0
   155f0:	2301      	movs	r3, #1
   155f2:	4013      	ands	r3, r2
   155f4:	d101      	bne.n	155fa <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
   155f6:	2380      	movs	r3, #128	; 0x80
   155f8:	e017      	b.n	1562a <system_pinmux_pin_get_mux_position+0x6e>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
   155fa:	693b      	ldr	r3, [r7, #16]
   155fc:	085a      	lsrs	r2, r3, #1
   155fe:	6979      	ldr	r1, [r7, #20]
   15600:	2330      	movs	r3, #48	; 0x30
   15602:	188a      	adds	r2, r1, r2
   15604:	18d3      	adds	r3, r2, r3
   15606:	781b      	ldrb	r3, [r3, #0]
   15608:	b2db      	uxtb	r3, r3
   1560a:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
   1560c:	693a      	ldr	r2, [r7, #16]
   1560e:	2301      	movs	r3, #1
   15610:	4013      	ands	r3, r2
   15612:	d005      	beq.n	15620 <system_pinmux_pin_get_mux_position+0x64>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
   15614:	68fa      	ldr	r2, [r7, #12]
   15616:	23f0      	movs	r3, #240	; 0xf0
   15618:	4013      	ands	r3, r2
   1561a:	091b      	lsrs	r3, r3, #4
   1561c:	b2db      	uxtb	r3, r3
   1561e:	e004      	b.n	1562a <system_pinmux_pin_get_mux_position+0x6e>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
   15620:	68fb      	ldr	r3, [r7, #12]
   15622:	b2da      	uxtb	r2, r3
   15624:	230f      	movs	r3, #15
   15626:	4013      	ands	r3, r2
   15628:	b2db      	uxtb	r3, r3
	}
}
   1562a:	1c18      	adds	r0, r3, #0
   1562c:	46bd      	mov	sp, r7
   1562e:	b006      	add	sp, #24
   15630:	bd80      	pop	{r7, pc}
   15632:	46c0      	nop			; (mov r8, r8)
   15634:	00015509 	.word	0x00015509

00015638 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   15638:	b580      	push	{r7, lr}
   1563a:	b084      	sub	sp, #16
   1563c:	af00      	add	r7, sp, #0
   1563e:	6078      	str	r0, [r7, #4]
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   15640:	687b      	ldr	r3, [r7, #4]
   15642:	681b      	ldr	r3, [r3, #0]
   15644:	60fb      	str	r3, [r7, #12]

	while (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY) {
   15646:	46c0      	nop			; (mov r8, r8)
   15648:	68fb      	ldr	r3, [r7, #12]
   1564a:	691b      	ldr	r3, [r3, #16]
   1564c:	b29b      	uxth	r3, r3
   1564e:	b29b      	uxth	r3, r3
   15650:	b21b      	sxth	r3, r3
   15652:	2b00      	cmp	r3, #0
   15654:	dbf8      	blt.n	15648 <_usart_wait_for_sync+0x10>
		/* Wait until the synchronization is complete */
	}
}
   15656:	46bd      	mov	sp, r7
   15658:	b004      	add	sp, #16
   1565a:	bd80      	pop	{r7, pc}

0001565c <_usart_check_config>:
 * \retval STATUS_OK                    If the configuration was written
 */
static enum status_code _usart_check_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   1565c:	b5b0      	push	{r4, r5, r7, lr}
   1565e:	b08e      	sub	sp, #56	; 0x38
   15660:	af02      	add	r7, sp, #8
   15662:	6078      	str	r0, [r7, #4]
   15664:	6039      	str	r1, [r7, #0]
		/* Sanity check arguments */
	Assert(module);
   15666:	4bc0      	ldr	r3, [pc, #768]	; (15968 <_usart_check_config+0x30c>)
   15668:	4798      	blx	r3
   1566a:	1c03      	adds	r3, r0, #0
   1566c:	2b00      	cmp	r3, #0
   1566e:	d011      	beq.n	15694 <_usart_check_config+0x38>
   15670:	687b      	ldr	r3, [r7, #4]
   15672:	2b00      	cmp	r3, #0
   15674:	d11b      	bne.n	156ae <_usart_check_config+0x52>
   15676:	4bbc      	ldr	r3, [pc, #752]	; (15968 <_usart_check_config+0x30c>)
   15678:	4798      	blx	r3
   1567a:	1c02      	adds	r2, r0, #0
   1567c:	4bbb      	ldr	r3, [pc, #748]	; (1596c <_usart_check_config+0x310>)
   1567e:	49bc      	ldr	r1, [pc, #752]	; (15970 <_usart_check_config+0x314>)
   15680:	9100      	str	r1, [sp, #0]
   15682:	49bc      	ldr	r1, [pc, #752]	; (15974 <_usart_check_config+0x318>)
   15684:	9101      	str	r1, [sp, #4]
   15686:	1c10      	adds	r0, r2, #0
   15688:	2101      	movs	r1, #1
   1568a:	1c1a      	adds	r2, r3, #0
   1568c:	2345      	movs	r3, #69	; 0x45
   1568e:	4cba      	ldr	r4, [pc, #744]	; (15978 <_usart_check_config+0x31c>)
   15690:	47a0      	blx	r4
   15692:	e00c      	b.n	156ae <_usart_check_config+0x52>
   15694:	687b      	ldr	r3, [r7, #4]
   15696:	2b00      	cmp	r3, #0
   15698:	d109      	bne.n	156ae <_usart_check_config+0x52>
   1569a:	49b8      	ldr	r1, [pc, #736]	; (1597c <_usart_check_config+0x320>)
   1569c:	4ab5      	ldr	r2, [pc, #724]	; (15974 <_usart_check_config+0x318>)
   1569e:	4bb3      	ldr	r3, [pc, #716]	; (1596c <_usart_check_config+0x310>)
   156a0:	1c08      	adds	r0, r1, #0
   156a2:	1c11      	adds	r1, r2, #0
   156a4:	1c1a      	adds	r2, r3, #0
   156a6:	2345      	movs	r3, #69	; 0x45
   156a8:	4cb5      	ldr	r4, [pc, #724]	; (15980 <_usart_check_config+0x324>)
   156aa:	47a0      	blx	r4
   156ac:	e7fe      	b.n	156ac <_usart_check_config+0x50>
	Assert(module->hw);
   156ae:	4bae      	ldr	r3, [pc, #696]	; (15968 <_usart_check_config+0x30c>)
   156b0:	4798      	blx	r3
   156b2:	1c03      	adds	r3, r0, #0
   156b4:	2b00      	cmp	r3, #0
   156b6:	d012      	beq.n	156de <_usart_check_config+0x82>
   156b8:	687b      	ldr	r3, [r7, #4]
   156ba:	681b      	ldr	r3, [r3, #0]
   156bc:	2b00      	cmp	r3, #0
   156be:	d11c      	bne.n	156fa <_usart_check_config+0x9e>
   156c0:	4ba9      	ldr	r3, [pc, #676]	; (15968 <_usart_check_config+0x30c>)
   156c2:	4798      	blx	r3
   156c4:	1c02      	adds	r2, r0, #0
   156c6:	4ba9      	ldr	r3, [pc, #676]	; (1596c <_usart_check_config+0x310>)
   156c8:	49a9      	ldr	r1, [pc, #676]	; (15970 <_usart_check_config+0x314>)
   156ca:	9100      	str	r1, [sp, #0]
   156cc:	49ad      	ldr	r1, [pc, #692]	; (15984 <_usart_check_config+0x328>)
   156ce:	9101      	str	r1, [sp, #4]
   156d0:	1c10      	adds	r0, r2, #0
   156d2:	2101      	movs	r1, #1
   156d4:	1c1a      	adds	r2, r3, #0
   156d6:	2346      	movs	r3, #70	; 0x46
   156d8:	4ca7      	ldr	r4, [pc, #668]	; (15978 <_usart_check_config+0x31c>)
   156da:	47a0      	blx	r4
   156dc:	e00d      	b.n	156fa <_usart_check_config+0x9e>
   156de:	687b      	ldr	r3, [r7, #4]
   156e0:	681b      	ldr	r3, [r3, #0]
   156e2:	2b00      	cmp	r3, #0
   156e4:	d109      	bne.n	156fa <_usart_check_config+0x9e>
   156e6:	49a5      	ldr	r1, [pc, #660]	; (1597c <_usart_check_config+0x320>)
   156e8:	4aa6      	ldr	r2, [pc, #664]	; (15984 <_usart_check_config+0x328>)
   156ea:	4ba0      	ldr	r3, [pc, #640]	; (1596c <_usart_check_config+0x310>)
   156ec:	1c08      	adds	r0, r1, #0
   156ee:	1c11      	adds	r1, r2, #0
   156f0:	1c1a      	adds	r2, r3, #0
   156f2:	2346      	movs	r3, #70	; 0x46
   156f4:	4ca2      	ldr	r4, [pc, #648]	; (15980 <_usart_check_config+0x324>)
   156f6:	47a0      	blx	r4
   156f8:	e7fe      	b.n	156f8 <_usart_check_config+0x9c>

	SercomUsart *const usart_hw = &(module->hw->USART);
   156fa:	687b      	ldr	r3, [r7, #4]
   156fc:	681b      	ldr	r3, [r3, #0]
   156fe:	613b      	str	r3, [r7, #16]
	Sercom *const hw = (module->hw);
   15700:	687b      	ldr	r3, [r7, #4]
   15702:	681b      	ldr	r3, [r3, #0]
   15704:	60fb      	str	r3, [r7, #12]

	uint32_t pad0 = config->pinmux_pad0;
   15706:	683b      	ldr	r3, [r7, #0]
   15708:	6a1b      	ldr	r3, [r3, #32]
   1570a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t pad1 = config->pinmux_pad1;
   1570c:	683b      	ldr	r3, [r7, #0]
   1570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15710:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t pad2 = config->pinmux_pad2;
   15712:	683b      	ldr	r3, [r7, #0]
   15714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15716:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t pad3 = config->pinmux_pad3;
   15718:	683b      	ldr	r3, [r7, #0]
   1571a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1571c:	623b      	str	r3, [r7, #32]

	/* SERCOM PAD0 */
	if (pad0 == PINMUX_DEFAULT) {
   1571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15720:	2b00      	cmp	r3, #0
   15722:	d106      	bne.n	15732 <_usart_check_config+0xd6>
		pad0 = _sercom_get_default_pad(hw, 0);
   15724:	68fb      	ldr	r3, [r7, #12]
   15726:	1c18      	adds	r0, r3, #0
   15728:	2100      	movs	r1, #0
   1572a:	4b97      	ldr	r3, [pc, #604]	; (15988 <_usart_check_config+0x32c>)
   1572c:	4798      	blx	r3
   1572e:	1c03      	adds	r3, r0, #0
   15730:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	if ((pad0 != PINMUX_UNUSED) && ((pad0 & 0xFFFF)!=
   15732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15734:	3301      	adds	r3, #1
   15736:	d00d      	beq.n	15754 <_usart_check_config+0xf8>
   15738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1573a:	041b      	lsls	r3, r3, #16
   1573c:	0c1c      	lsrs	r4, r3, #16
			system_pinmux_pin_get_mux_position(pad0 >> 16))) {
   1573e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15740:	0c1b      	lsrs	r3, r3, #16
   15742:	b2db      	uxtb	r3, r3
   15744:	1c18      	adds	r0, r3, #0
   15746:	4b91      	ldr	r3, [pc, #580]	; (1598c <_usart_check_config+0x330>)
   15748:	4798      	blx	r3
   1574a:	1c03      	adds	r3, r0, #0

	/* SERCOM PAD0 */
	if (pad0 == PINMUX_DEFAULT) {
		pad0 = _sercom_get_default_pad(hw, 0);
	}
	if ((pad0 != PINMUX_UNUSED) && ((pad0 & 0xFFFF)!=
   1574c:	429c      	cmp	r4, r3
   1574e:	d001      	beq.n	15754 <_usart_check_config+0xf8>
			system_pinmux_pin_get_mux_position(pad0 >> 16))) {
		return STATUS_ERR_DENIED;
   15750:	231c      	movs	r3, #28
   15752:	e104      	b.n	1595e <_usart_check_config+0x302>
	}

	/* SERCOM PAD1 */
	if (pad1 == PINMUX_DEFAULT) {
   15754:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15756:	2b00      	cmp	r3, #0
   15758:	d106      	bne.n	15768 <_usart_check_config+0x10c>
		pad1 = _sercom_get_default_pad(hw, 1);
   1575a:	68fb      	ldr	r3, [r7, #12]
   1575c:	1c18      	adds	r0, r3, #0
   1575e:	2101      	movs	r1, #1
   15760:	4b89      	ldr	r3, [pc, #548]	; (15988 <_usart_check_config+0x32c>)
   15762:	4798      	blx	r3
   15764:	1c03      	adds	r3, r0, #0
   15766:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	if ((pad1 != PINMUX_UNUSED) && ((pad1 & 0xFFFF) !=
   15768:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1576a:	3301      	adds	r3, #1
   1576c:	d00d      	beq.n	1578a <_usart_check_config+0x12e>
   1576e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15770:	041b      	lsls	r3, r3, #16
   15772:	0c1c      	lsrs	r4, r3, #16
			system_pinmux_pin_get_mux_position(pad1 >> 16))) {
   15774:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15776:	0c1b      	lsrs	r3, r3, #16
   15778:	b2db      	uxtb	r3, r3
   1577a:	1c18      	adds	r0, r3, #0
   1577c:	4b83      	ldr	r3, [pc, #524]	; (1598c <_usart_check_config+0x330>)
   1577e:	4798      	blx	r3
   15780:	1c03      	adds	r3, r0, #0

	/* SERCOM PAD1 */
	if (pad1 == PINMUX_DEFAULT) {
		pad1 = _sercom_get_default_pad(hw, 1);
	}
	if ((pad1 != PINMUX_UNUSED) && ((pad1 & 0xFFFF) !=
   15782:	429c      	cmp	r4, r3
   15784:	d001      	beq.n	1578a <_usart_check_config+0x12e>
			system_pinmux_pin_get_mux_position(pad1 >> 16))) {
		return STATUS_ERR_DENIED;
   15786:	231c      	movs	r3, #28
   15788:	e0e9      	b.n	1595e <_usart_check_config+0x302>
	}

	/* SERCOM PAD2 */
	if (pad2 == PINMUX_DEFAULT) {
   1578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1578c:	2b00      	cmp	r3, #0
   1578e:	d106      	bne.n	1579e <_usart_check_config+0x142>
		pad2 = _sercom_get_default_pad(hw, 2);
   15790:	68fb      	ldr	r3, [r7, #12]
   15792:	1c18      	adds	r0, r3, #0
   15794:	2102      	movs	r1, #2
   15796:	4b7c      	ldr	r3, [pc, #496]	; (15988 <_usart_check_config+0x32c>)
   15798:	4798      	blx	r3
   1579a:	1c03      	adds	r3, r0, #0
   1579c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if ((pad2 != PINMUX_UNUSED) && ((pad2 & 0xFFFF) !=
   1579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   157a0:	3301      	adds	r3, #1
   157a2:	d00d      	beq.n	157c0 <_usart_check_config+0x164>
   157a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   157a6:	041b      	lsls	r3, r3, #16
   157a8:	0c1c      	lsrs	r4, r3, #16
			system_pinmux_pin_get_mux_position(pad2 >> 16))) {
   157aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   157ac:	0c1b      	lsrs	r3, r3, #16
   157ae:	b2db      	uxtb	r3, r3
   157b0:	1c18      	adds	r0, r3, #0
   157b2:	4b76      	ldr	r3, [pc, #472]	; (1598c <_usart_check_config+0x330>)
   157b4:	4798      	blx	r3
   157b6:	1c03      	adds	r3, r0, #0

	/* SERCOM PAD2 */
	if (pad2 == PINMUX_DEFAULT) {
		pad2 = _sercom_get_default_pad(hw, 2);
	}
	if ((pad2 != PINMUX_UNUSED) && ((pad2 & 0xFFFF) !=
   157b8:	429c      	cmp	r4, r3
   157ba:	d001      	beq.n	157c0 <_usart_check_config+0x164>
			system_pinmux_pin_get_mux_position(pad2 >> 16))) {
		return STATUS_ERR_DENIED;
   157bc:	231c      	movs	r3, #28
   157be:	e0ce      	b.n	1595e <_usart_check_config+0x302>
	}

	/* SERCOM PAD3 */
	if (pad3 == PINMUX_DEFAULT) {
   157c0:	6a3b      	ldr	r3, [r7, #32]
   157c2:	2b00      	cmp	r3, #0
   157c4:	d106      	bne.n	157d4 <_usart_check_config+0x178>
		pad3 = _sercom_get_default_pad(hw, 3);
   157c6:	68fb      	ldr	r3, [r7, #12]
   157c8:	1c18      	adds	r0, r3, #0
   157ca:	2103      	movs	r1, #3
   157cc:	4b6e      	ldr	r3, [pc, #440]	; (15988 <_usart_check_config+0x32c>)
   157ce:	4798      	blx	r3
   157d0:	1c03      	adds	r3, r0, #0
   157d2:	623b      	str	r3, [r7, #32]
	}
	if ((pad3 != PINMUX_UNUSED) && ((pad3 & 0xFFFF) !=
   157d4:	6a3b      	ldr	r3, [r7, #32]
   157d6:	3301      	adds	r3, #1
   157d8:	d00d      	beq.n	157f6 <_usart_check_config+0x19a>
   157da:	6a3b      	ldr	r3, [r7, #32]
   157dc:	041b      	lsls	r3, r3, #16
   157de:	0c1c      	lsrs	r4, r3, #16
			system_pinmux_pin_get_mux_position(pad3 >> 16))) {
   157e0:	6a3b      	ldr	r3, [r7, #32]
   157e2:	0c1b      	lsrs	r3, r3, #16
   157e4:	b2db      	uxtb	r3, r3
   157e6:	1c18      	adds	r0, r3, #0
   157e8:	4b68      	ldr	r3, [pc, #416]	; (1598c <_usart_check_config+0x330>)
   157ea:	4798      	blx	r3
   157ec:	1c03      	adds	r3, r0, #0

	/* SERCOM PAD3 */
	if (pad3 == PINMUX_DEFAULT) {
		pad3 = _sercom_get_default_pad(hw, 3);
	}
	if ((pad3 != PINMUX_UNUSED) && ((pad3 & 0xFFFF) !=
   157ee:	429c      	cmp	r4, r3
   157f0:	d001      	beq.n	157f6 <_usart_check_config+0x19a>
			system_pinmux_pin_get_mux_position(pad3 >> 16))) {
		return STATUS_ERR_DENIED;
   157f2:	231c      	movs	r3, #28
   157f4:	e0b3      	b.n	1595e <_usart_check_config+0x302>
	}

	/* Find baud value and compare it */
	uint16_t baud  = 0;
   157f6:	1c3b      	adds	r3, r7, #0
   157f8:	330a      	adds	r3, #10
   157fa:	2200      	movs	r2, #0
   157fc:	801a      	strh	r2, [r3, #0]
	enum status_code status_code = STATUS_OK;
   157fe:	1c3b      	adds	r3, r7, #0
   15800:	331f      	adds	r3, #31
   15802:	2200      	movs	r2, #0
   15804:	701a      	strb	r2, [r3, #0]

	switch (config->transfer_mode)
   15806:	683b      	ldr	r3, [r7, #0]
   15808:	685b      	ldr	r3, [r3, #4]
   1580a:	2b00      	cmp	r3, #0
   1580c:	d01d      	beq.n	1584a <_usart_check_config+0x1ee>
   1580e:	2280      	movs	r2, #128	; 0x80
   15810:	0552      	lsls	r2, r2, #21
   15812:	4293      	cmp	r3, r2
   15814:	d13f      	bne.n	15896 <_usart_check_config+0x23a>
	{
	case USART_TRANSFER_SYNCHRONOUSLY:
		if (!config->use_external_clock) {
   15816:	683b      	ldr	r3, [r7, #0]
   15818:	7ddb      	ldrb	r3, [r3, #23]
   1581a:	2201      	movs	r2, #1
   1581c:	4053      	eors	r3, r2
   1581e:	b2db      	uxtb	r3, r3
   15820:	2b00      	cmp	r3, #0
   15822:	d011      	beq.n	15848 <_usart_check_config+0x1ec>
			status_code = _sercom_get_sync_baud_val(config->baudrate,
   15824:	683b      	ldr	r3, [r7, #0]
   15826:	691d      	ldr	r5, [r3, #16]
   15828:	200c      	movs	r0, #12
   1582a:	4b59      	ldr	r3, [pc, #356]	; (15990 <_usart_check_config+0x334>)
   1582c:	4798      	blx	r3
   1582e:	1c02      	adds	r2, r0, #0
   15830:	1c3c      	adds	r4, r7, #0
   15832:	341f      	adds	r4, #31
   15834:	1c3b      	adds	r3, r7, #0
   15836:	330a      	adds	r3, #10
   15838:	1c28      	adds	r0, r5, #0
   1583a:	1c11      	adds	r1, r2, #0
   1583c:	1c1a      	adds	r2, r3, #0
   1583e:	4b55      	ldr	r3, [pc, #340]	; (15994 <_usart_check_config+0x338>)
   15840:	4798      	blx	r3
   15842:	1c03      	adds	r3, r0, #0
   15844:	7023      	strb	r3, [r4, #0]
					system_gclk_chan_get_hz(SERCOM_GCLK_ID), &baud);
		}

		break;
   15846:	e026      	b.n	15896 <_usart_check_config+0x23a>
   15848:	e025      	b.n	15896 <_usart_check_config+0x23a>

	case USART_TRANSFER_ASYNCHRONOUSLY:
		if (config->use_external_clock) {
   1584a:	683b      	ldr	r3, [r7, #0]
   1584c:	7ddb      	ldrb	r3, [r3, #23]
   1584e:	2b00      	cmp	r3, #0
   15850:	d00f      	beq.n	15872 <_usart_check_config+0x216>
			status_code =
					_sercom_get_async_baud_val(config->baudrate,
   15852:	683b      	ldr	r3, [r7, #0]
   15854:	6919      	ldr	r1, [r3, #16]
   15856:	683b      	ldr	r3, [r7, #0]
   15858:	699a      	ldr	r2, [r3, #24]

		break;

	case USART_TRANSFER_ASYNCHRONOUSLY:
		if (config->use_external_clock) {
			status_code =
   1585a:	1c3c      	adds	r4, r7, #0
   1585c:	341f      	adds	r4, #31
   1585e:	1c3b      	adds	r3, r7, #0
   15860:	330a      	adds	r3, #10
   15862:	1c08      	adds	r0, r1, #0
   15864:	1c11      	adds	r1, r2, #0
   15866:	1c1a      	adds	r2, r3, #0
   15868:	4b4b      	ldr	r3, [pc, #300]	; (15998 <_usart_check_config+0x33c>)
   1586a:	4798      	blx	r3
   1586c:	1c03      	adds	r3, r0, #0
   1586e:	7023      	strb	r3, [r4, #0]
			status_code =
					_sercom_get_async_baud_val(config->baudrate,
						system_gclk_chan_get_hz(SERCOM_GCLK_ID), &baud);
		}

		break;
   15870:	e010      	b.n	15894 <_usart_check_config+0x238>
			status_code =
					_sercom_get_async_baud_val(config->baudrate,
						config->ext_clock_freq, &baud);
		} else {
			status_code =
					_sercom_get_async_baud_val(config->baudrate,
   15872:	683b      	ldr	r3, [r7, #0]
   15874:	691d      	ldr	r5, [r3, #16]
   15876:	200c      	movs	r0, #12
   15878:	4b45      	ldr	r3, [pc, #276]	; (15990 <_usart_check_config+0x334>)
   1587a:	4798      	blx	r3
   1587c:	1c02      	adds	r2, r0, #0
		if (config->use_external_clock) {
			status_code =
					_sercom_get_async_baud_val(config->baudrate,
						config->ext_clock_freq, &baud);
		} else {
			status_code =
   1587e:	1c3c      	adds	r4, r7, #0
   15880:	341f      	adds	r4, #31
   15882:	1c3b      	adds	r3, r7, #0
   15884:	330a      	adds	r3, #10
   15886:	1c28      	adds	r0, r5, #0
   15888:	1c11      	adds	r1, r2, #0
   1588a:	1c1a      	adds	r2, r3, #0
   1588c:	4b42      	ldr	r3, [pc, #264]	; (15998 <_usart_check_config+0x33c>)
   1588e:	4798      	blx	r3
   15890:	1c03      	adds	r3, r0, #0
   15892:	7023      	strb	r3, [r4, #0]
					_sercom_get_async_baud_val(config->baudrate,
						system_gclk_chan_get_hz(SERCOM_GCLK_ID), &baud);
		}

		break;
   15894:	46c0      	nop			; (mov r8, r8)
	}

	if (status_code != STATUS_OK) {
   15896:	1c3b      	adds	r3, r7, #0
   15898:	331f      	adds	r3, #31
   1589a:	781b      	ldrb	r3, [r3, #0]
   1589c:	2b00      	cmp	r3, #0
   1589e:	d001      	beq.n	158a4 <_usart_check_config+0x248>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_DENIED;
   158a0:	231c      	movs	r3, #28
   158a2:	e05c      	b.n	1595e <_usart_check_config+0x302>
	}

	if (usart_hw->BAUD.reg != baud) {
   158a4:	693b      	ldr	r3, [r7, #16]
   158a6:	689b      	ldr	r3, [r3, #8]
   158a8:	0c1b      	lsrs	r3, r3, #16
   158aa:	b29a      	uxth	r2, r3
   158ac:	1c3b      	adds	r3, r7, #0
   158ae:	330a      	adds	r3, #10
   158b0:	881b      	ldrh	r3, [r3, #0]
   158b2:	429a      	cmp	r2, r3
   158b4:	d001      	beq.n	158ba <_usart_check_config+0x25e>
		return STATUS_ERR_DENIED;
   158b6:	231c      	movs	r3, #28
   158b8:	e051      	b.n	1595e <_usart_check_config+0x302>
	}

	uint32_t ctrla = 0;
   158ba:	2300      	movs	r3, #0
   158bc:	61bb      	str	r3, [r7, #24]
	uint32_t ctrlb = 0;
   158be:	2300      	movs	r3, #0
   158c0:	617b      	str	r3, [r7, #20]

	/* Check sample mode, data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   158c2:	683b      	ldr	r3, [r7, #0]
   158c4:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   158c6:	683b      	ldr	r3, [r7, #0]
   158c8:	68db      	ldr	r3, [r3, #12]

	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;

	/* Check sample mode, data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   158ca:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
		(uint32_t)config->transfer_mode |
   158cc:	683b      	ldr	r3, [r7, #0]
   158ce:	685b      	ldr	r3, [r3, #4]
   158d0:	431a      	orrs	r2, r3
		SERCOM_USART_CTRLA_MODE(0) |
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   158d2:	683b      	ldr	r3, [r7, #0]
   158d4:	7d9b      	ldrb	r3, [r3, #22]
   158d6:	075b      	lsls	r3, r3, #29

	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;

	/* Check sample mode, data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   158d8:	4313      	orrs	r3, r2
   158da:	61bb      	str	r3, [r7, #24]
		(uint32_t)config->transfer_mode |
		SERCOM_USART_CTRLA_MODE(0) |
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	/* set enable bit */
	ctrla |= (SERCOM_USART_CTRLA_ENABLE);
   158dc:	69bb      	ldr	r3, [r7, #24]
   158de:	2202      	movs	r2, #2
   158e0:	4313      	orrs	r3, r2
   158e2:	61bb      	str	r3, [r7, #24]

	if (config->use_external_clock == false) {
   158e4:	683b      	ldr	r3, [r7, #0]
   158e6:	7ddb      	ldrb	r3, [r3, #23]
   158e8:	2201      	movs	r2, #1
   158ea:	4053      	eors	r3, r2
   158ec:	b2db      	uxtb	r3, r3
   158ee:	2b00      	cmp	r3, #0
   158f0:	d003      	beq.n	158fa <_usart_check_config+0x29e>
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
   158f2:	69bb      	ldr	r3, [r7, #24]
   158f4:	2204      	movs	r2, #4
   158f6:	4313      	orrs	r3, r2
   158f8:	61bb      	str	r3, [r7, #24]
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Check stopbits and character size */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
   158fa:	683b      	ldr	r3, [r7, #0]
   158fc:	7a9a      	ldrb	r2, [r3, #10]
   158fe:	683b      	ldr	r3, [r7, #0]
   15900:	7adb      	ldrb	r3, [r3, #11]
   15902:	4313      	orrs	r3, r2
   15904:	b2db      	uxtb	r3, r3
   15906:	1c1a      	adds	r2, r3, #0
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   15908:	683b      	ldr	r3, [r7, #0]
   1590a:	7d1b      	ldrb	r3, [r3, #20]
   1590c:	045b      	lsls	r3, r3, #17
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Check stopbits and character size */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
   1590e:	431a      	orrs	r2, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   15910:	683b      	ldr	r3, [r7, #0]
   15912:	7d5b      	ldrb	r3, [r3, #21]
   15914:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Check stopbits and character size */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
   15916:	4313      	orrs	r3, r2
   15918:	617b      	str	r3, [r7, #20]
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   1591a:	683b      	ldr	r3, [r7, #0]
   1591c:	891b      	ldrh	r3, [r3, #8]
   1591e:	2bff      	cmp	r3, #255	; 0xff
   15920:	d009      	beq.n	15936 <_usart_check_config+0x2da>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   15922:	69bb      	ldr	r3, [r7, #24]
   15924:	2280      	movs	r2, #128	; 0x80
   15926:	0452      	lsls	r2, r2, #17
   15928:	4313      	orrs	r3, r2
   1592a:	61bb      	str	r3, [r7, #24]
		ctrlb |= config->parity;
   1592c:	683b      	ldr	r3, [r7, #0]
   1592e:	891b      	ldrh	r3, [r3, #8]
   15930:	697a      	ldr	r2, [r7, #20]
   15932:	4313      	orrs	r3, r2
   15934:	617b      	str	r3, [r7, #20]
	} else {
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
	}

	if (usart_hw->CTRLA.reg == ctrla && usart_hw->CTRLB.reg == ctrlb) {
   15936:	693b      	ldr	r3, [r7, #16]
   15938:	681a      	ldr	r2, [r3, #0]
   1593a:	69bb      	ldr	r3, [r7, #24]
   1593c:	429a      	cmp	r2, r3
   1593e:	d10a      	bne.n	15956 <_usart_check_config+0x2fa>
   15940:	693b      	ldr	r3, [r7, #16]
   15942:	685a      	ldr	r2, [r3, #4]
   15944:	697b      	ldr	r3, [r7, #20]
   15946:	429a      	cmp	r2, r3
   15948:	d105      	bne.n	15956 <_usart_check_config+0x2fa>
		module->character_size = config->character_size;
   1594a:	683b      	ldr	r3, [r7, #0]
   1594c:	7ada      	ldrb	r2, [r3, #11]
   1594e:	687b      	ldr	r3, [r7, #4]
   15950:	711a      	strb	r2, [r3, #4]
		return STATUS_OK;
   15952:	2300      	movs	r3, #0
   15954:	e003      	b.n	1595e <_usart_check_config+0x302>
	} else {
		module->hw = NULL;
   15956:	687b      	ldr	r3, [r7, #4]
   15958:	2200      	movs	r2, #0
   1595a:	601a      	str	r2, [r3, #0]
		return STATUS_ERR_DENIED;
   1595c:	231c      	movs	r3, #28
	}
}
   1595e:	1c18      	adds	r0, r3, #0
   15960:	46bd      	mov	sp, r7
   15962:	b00c      	add	sp, #48	; 0x30
   15964:	bdb0      	pop	{r4, r5, r7, pc}
   15966:	46c0      	nop			; (mov r8, r8)
   15968:	0001534d 	.word	0x0001534d
   1596c:	0002686c 	.word	0x0002686c
   15970:	000267c0 	.word	0x000267c0
   15974:	0002689c 	.word	0x0002689c
   15978:	000106e9 	.word	0x000106e9
   1597c:	000267e0 	.word	0x000267e0
   15980:	0001b62d 	.word	0x0001b62d
   15984:	000268a4 	.word	0x000268a4
   15988:	00014ee5 	.word	0x00014ee5
   1598c:	000155bd 	.word	0x000155bd
   15990:	00017ac9 	.word	0x00017ac9
   15994:	00014d31 	.word	0x00014d31
   15998:	00014d91 	.word	0x00014d91

0001599c <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   1599c:	b5b0      	push	{r4, r5, r7, lr}
   1599e:	b08c      	sub	sp, #48	; 0x30
   159a0:	af02      	add	r7, sp, #8
   159a2:	6078      	str	r0, [r7, #4]
   159a4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
   159a6:	4b8a      	ldr	r3, [pc, #552]	; (15bd0 <_usart_set_config+0x234>)
   159a8:	4798      	blx	r3
   159aa:	1c03      	adds	r3, r0, #0
   159ac:	2b00      	cmp	r3, #0
   159ae:	d011      	beq.n	159d4 <_usart_set_config+0x38>
   159b0:	687b      	ldr	r3, [r7, #4]
   159b2:	2b00      	cmp	r3, #0
   159b4:	d11b      	bne.n	159ee <_usart_set_config+0x52>
   159b6:	4b86      	ldr	r3, [pc, #536]	; (15bd0 <_usart_set_config+0x234>)
   159b8:	4798      	blx	r3
   159ba:	1c02      	adds	r2, r0, #0
   159bc:	4b85      	ldr	r3, [pc, #532]	; (15bd4 <_usart_set_config+0x238>)
   159be:	4986      	ldr	r1, [pc, #536]	; (15bd8 <_usart_set_config+0x23c>)
   159c0:	9100      	str	r1, [sp, #0]
   159c2:	4986      	ldr	r1, [pc, #536]	; (15bdc <_usart_set_config+0x240>)
   159c4:	9101      	str	r1, [sp, #4]
   159c6:	1c10      	adds	r0, r2, #0
   159c8:	2101      	movs	r1, #1
   159ca:	1c1a      	adds	r2, r3, #0
   159cc:	23cc      	movs	r3, #204	; 0xcc
   159ce:	4c84      	ldr	r4, [pc, #528]	; (15be0 <_usart_set_config+0x244>)
   159d0:	47a0      	blx	r4
   159d2:	e00c      	b.n	159ee <_usart_set_config+0x52>
   159d4:	687b      	ldr	r3, [r7, #4]
   159d6:	2b00      	cmp	r3, #0
   159d8:	d109      	bne.n	159ee <_usart_set_config+0x52>
   159da:	4982      	ldr	r1, [pc, #520]	; (15be4 <_usart_set_config+0x248>)
   159dc:	4a7f      	ldr	r2, [pc, #508]	; (15bdc <_usart_set_config+0x240>)
   159de:	4b7d      	ldr	r3, [pc, #500]	; (15bd4 <_usart_set_config+0x238>)
   159e0:	1c08      	adds	r0, r1, #0
   159e2:	1c11      	adds	r1, r2, #0
   159e4:	1c1a      	adds	r2, r3, #0
   159e6:	23cc      	movs	r3, #204	; 0xcc
   159e8:	4c7f      	ldr	r4, [pc, #508]	; (15be8 <_usart_set_config+0x24c>)
   159ea:	47a0      	blx	r4
   159ec:	e7fe      	b.n	159ec <_usart_set_config+0x50>
	Assert(module->hw);
   159ee:	4b78      	ldr	r3, [pc, #480]	; (15bd0 <_usart_set_config+0x234>)
   159f0:	4798      	blx	r3
   159f2:	1c03      	adds	r3, r0, #0
   159f4:	2b00      	cmp	r3, #0
   159f6:	d012      	beq.n	15a1e <_usart_set_config+0x82>
   159f8:	687b      	ldr	r3, [r7, #4]
   159fa:	681b      	ldr	r3, [r3, #0]
   159fc:	2b00      	cmp	r3, #0
   159fe:	d11c      	bne.n	15a3a <_usart_set_config+0x9e>
   15a00:	4b73      	ldr	r3, [pc, #460]	; (15bd0 <_usart_set_config+0x234>)
   15a02:	4798      	blx	r3
   15a04:	1c02      	adds	r2, r0, #0
   15a06:	4b73      	ldr	r3, [pc, #460]	; (15bd4 <_usart_set_config+0x238>)
   15a08:	4973      	ldr	r1, [pc, #460]	; (15bd8 <_usart_set_config+0x23c>)
   15a0a:	9100      	str	r1, [sp, #0]
   15a0c:	4977      	ldr	r1, [pc, #476]	; (15bec <_usart_set_config+0x250>)
   15a0e:	9101      	str	r1, [sp, #4]
   15a10:	1c10      	adds	r0, r2, #0
   15a12:	2101      	movs	r1, #1
   15a14:	1c1a      	adds	r2, r3, #0
   15a16:	23cd      	movs	r3, #205	; 0xcd
   15a18:	4c71      	ldr	r4, [pc, #452]	; (15be0 <_usart_set_config+0x244>)
   15a1a:	47a0      	blx	r4
   15a1c:	e00d      	b.n	15a3a <_usart_set_config+0x9e>
   15a1e:	687b      	ldr	r3, [r7, #4]
   15a20:	681b      	ldr	r3, [r3, #0]
   15a22:	2b00      	cmp	r3, #0
   15a24:	d109      	bne.n	15a3a <_usart_set_config+0x9e>
   15a26:	496f      	ldr	r1, [pc, #444]	; (15be4 <_usart_set_config+0x248>)
   15a28:	4a70      	ldr	r2, [pc, #448]	; (15bec <_usart_set_config+0x250>)
   15a2a:	4b6a      	ldr	r3, [pc, #424]	; (15bd4 <_usart_set_config+0x238>)
   15a2c:	1c08      	adds	r0, r1, #0
   15a2e:	1c11      	adds	r1, r2, #0
   15a30:	1c1a      	adds	r2, r3, #0
   15a32:	23cd      	movs	r3, #205	; 0xcd
   15a34:	4c6c      	ldr	r4, [pc, #432]	; (15be8 <_usart_set_config+0x24c>)
   15a36:	47a0      	blx	r4
   15a38:	e7fe      	b.n	15a38 <_usart_set_config+0x9c>

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   15a3a:	687b      	ldr	r3, [r7, #4]
   15a3c:	681b      	ldr	r3, [r3, #0]
   15a3e:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   15a40:	687b      	ldr	r3, [r7, #4]
   15a42:	681b      	ldr	r3, [r3, #0]
   15a44:	1c18      	adds	r0, r3, #0
   15a46:	4b6a      	ldr	r3, [pc, #424]	; (15bf0 <_usart_set_config+0x254>)
   15a48:	4798      	blx	r3
   15a4a:	1c03      	adds	r3, r0, #0
   15a4c:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   15a4e:	697b      	ldr	r3, [r7, #20]
   15a50:	330d      	adds	r3, #13
   15a52:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   15a54:	2300      	movs	r3, #0
   15a56:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   15a58:	2300      	movs	r3, #0
   15a5a:	623b      	str	r3, [r7, #32]
	uint16_t baud  = 0;
   15a5c:	1c3b      	adds	r3, r7, #0
   15a5e:	330e      	adds	r3, #14
   15a60:	2200      	movs	r2, #0
   15a62:	801a      	strh	r2, [r3, #0]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   15a64:	683b      	ldr	r3, [r7, #0]
   15a66:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   15a68:	683b      	ldr	r3, [r7, #0]
   15a6a:	68db      	ldr	r3, [r3, #12]
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   15a6c:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   15a6e:	683b      	ldr	r3, [r7, #0]
   15a70:	7d9b      	ldrb	r3, [r3, #22]
   15a72:	075b      	lsls	r3, r3, #29
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   15a74:	4313      	orrs	r3, r2
   15a76:	627b      	str	r3, [r7, #36]	; 0x24
		(uint32_t)config->mux_setting |
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
   15a78:	1c3b      	adds	r3, r7, #0
   15a7a:	331f      	adds	r3, #31
   15a7c:	2200      	movs	r2, #0
   15a7e:	701a      	strb	r2, [r3, #0]

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
   15a80:	683b      	ldr	r3, [r7, #0]
   15a82:	685b      	ldr	r3, [r3, #4]
   15a84:	2b00      	cmp	r3, #0
   15a86:	d01f      	beq.n	15ac8 <_usart_set_config+0x12c>
   15a88:	2280      	movs	r2, #128	; 0x80
   15a8a:	0552      	lsls	r2, r2, #21
   15a8c:	4293      	cmp	r3, r2
   15a8e:	d143      	bne.n	15b18 <_usart_set_config+0x17c>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   15a90:	683b      	ldr	r3, [r7, #0]
   15a92:	7ddb      	ldrb	r3, [r3, #23]
   15a94:	2201      	movs	r2, #1
   15a96:	4053      	eors	r3, r2
   15a98:	b2db      	uxtb	r3, r3
   15a9a:	2b00      	cmp	r3, #0
   15a9c:	d013      	beq.n	15ac6 <_usart_set_config+0x12a>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   15a9e:	683b      	ldr	r3, [r7, #0]
   15aa0:	691d      	ldr	r5, [r3, #16]
   15aa2:	693b      	ldr	r3, [r7, #16]
   15aa4:	b2db      	uxtb	r3, r3
   15aa6:	1c18      	adds	r0, r3, #0
   15aa8:	4b52      	ldr	r3, [pc, #328]	; (15bf4 <_usart_set_config+0x258>)
   15aaa:	4798      	blx	r3
   15aac:	1c02      	adds	r2, r0, #0
   15aae:	1c3c      	adds	r4, r7, #0
   15ab0:	341f      	adds	r4, #31
   15ab2:	1c3b      	adds	r3, r7, #0
   15ab4:	330e      	adds	r3, #14
   15ab6:	1c28      	adds	r0, r5, #0
   15ab8:	1c11      	adds	r1, r2, #0
   15aba:	1c1a      	adds	r2, r3, #0
   15abc:	4b4e      	ldr	r3, [pc, #312]	; (15bf8 <_usart_set_config+0x25c>)
   15abe:	4798      	blx	r3
   15ac0:	1c03      	adds	r3, r0, #0
   15ac2:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   15ac4:	e028      	b.n	15b18 <_usart_set_config+0x17c>
   15ac6:	e027      	b.n	15b18 <_usart_set_config+0x17c>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   15ac8:	683b      	ldr	r3, [r7, #0]
   15aca:	7ddb      	ldrb	r3, [r3, #23]
   15acc:	2b00      	cmp	r3, #0
   15ace:	d00f      	beq.n	15af0 <_usart_set_config+0x154>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   15ad0:	683b      	ldr	r3, [r7, #0]
   15ad2:	6919      	ldr	r1, [r3, #16]
   15ad4:	683b      	ldr	r3, [r7, #0]
   15ad6:	699a      	ldr	r2, [r3, #24]

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
   15ad8:	1c3c      	adds	r4, r7, #0
   15ada:	341f      	adds	r4, #31
   15adc:	1c3b      	adds	r3, r7, #0
   15ade:	330e      	adds	r3, #14
   15ae0:	1c08      	adds	r0, r1, #0
   15ae2:	1c11      	adds	r1, r2, #0
   15ae4:	1c1a      	adds	r2, r3, #0
   15ae6:	4b45      	ldr	r3, [pc, #276]	; (15bfc <_usart_set_config+0x260>)
   15ae8:	4798      	blx	r3
   15aea:	1c03      	adds	r3, r0, #0
   15aec:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   15aee:	e012      	b.n	15b16 <_usart_set_config+0x17a>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   15af0:	683b      	ldr	r3, [r7, #0]
   15af2:	691d      	ldr	r5, [r3, #16]
   15af4:	693b      	ldr	r3, [r7, #16]
   15af6:	b2db      	uxtb	r3, r3
   15af8:	1c18      	adds	r0, r3, #0
   15afa:	4b3e      	ldr	r3, [pc, #248]	; (15bf4 <_usart_set_config+0x258>)
   15afc:	4798      	blx	r3
   15afe:	1c02      	adds	r2, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud);
			} else {
				status_code =
   15b00:	1c3c      	adds	r4, r7, #0
   15b02:	341f      	adds	r4, #31
   15b04:	1c3b      	adds	r3, r7, #0
   15b06:	330e      	adds	r3, #14
   15b08:	1c28      	adds	r0, r5, #0
   15b0a:	1c11      	adds	r1, r2, #0
   15b0c:	1c1a      	adds	r2, r3, #0
   15b0e:	4b3b      	ldr	r3, [pc, #236]	; (15bfc <_usart_set_config+0x260>)
   15b10:	4798      	blx	r3
   15b12:	1c03      	adds	r3, r0, #0
   15b14:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   15b16:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baud rate failed */
	if (status_code != STATUS_OK) {
   15b18:	1c3b      	adds	r3, r7, #0
   15b1a:	331f      	adds	r3, #31
   15b1c:	781b      	ldrb	r3, [r3, #0]
   15b1e:	2b00      	cmp	r3, #0
   15b20:	d003      	beq.n	15b2a <_usart_set_config+0x18e>
		/* Abort */
		return status_code;
   15b22:	1c3b      	adds	r3, r7, #0
   15b24:	331f      	adds	r3, #31
   15b26:	781b      	ldrb	r3, [r3, #0]
   15b28:	e04d      	b.n	15bc6 <_usart_set_config+0x22a>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   15b2a:	687b      	ldr	r3, [r7, #4]
   15b2c:	1c18      	adds	r0, r3, #0
   15b2e:	4b34      	ldr	r3, [pc, #208]	; (15c00 <_usart_set_config+0x264>)
   15b30:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   15b32:	1c3b      	adds	r3, r7, #0
   15b34:	330e      	adds	r3, #14
   15b36:	881a      	ldrh	r2, [r3, #0]
   15b38:	69bb      	ldr	r3, [r7, #24]
   15b3a:	815a      	strh	r2, [r3, #10]

	/* Set sample mode */
	ctrla |= config->transfer_mode;
   15b3c:	683b      	ldr	r3, [r7, #0]
   15b3e:	685b      	ldr	r3, [r3, #4]
   15b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   15b42:	4313      	orrs	r3, r2
   15b44:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   15b46:	683b      	ldr	r3, [r7, #0]
   15b48:	7ddb      	ldrb	r3, [r3, #23]
   15b4a:	2201      	movs	r2, #1
   15b4c:	4053      	eors	r3, r2
   15b4e:	b2db      	uxtb	r3, r3
   15b50:	2b00      	cmp	r3, #0
   15b52:	d003      	beq.n	15b5c <_usart_set_config+0x1c0>
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
   15b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15b56:	2204      	movs	r2, #4
   15b58:	4313      	orrs	r3, r2
   15b5a:	627b      	str	r3, [r7, #36]	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
   15b5c:	683b      	ldr	r3, [r7, #0]
   15b5e:	7a9a      	ldrb	r2, [r3, #10]
   15b60:	683b      	ldr	r3, [r7, #0]
   15b62:	7adb      	ldrb	r3, [r3, #11]
   15b64:	4313      	orrs	r3, r2
   15b66:	b2db      	uxtb	r3, r3
   15b68:	1c1a      	adds	r2, r3, #0
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   15b6a:	683b      	ldr	r3, [r7, #0]
   15b6c:	7d1b      	ldrb	r3, [r3, #20]
   15b6e:	045b      	lsls	r3, r3, #17
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
   15b70:	431a      	orrs	r2, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   15b72:	683b      	ldr	r3, [r7, #0]
   15b74:	7d5b      	ldrb	r3, [r3, #21]
   15b76:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
   15b78:	4313      	orrs	r3, r2
   15b7a:	623b      	str	r3, [r7, #32]
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Set parity mode */
	if (config->parity != USART_PARITY_NONE) {
   15b7c:	683b      	ldr	r3, [r7, #0]
   15b7e:	891b      	ldrh	r3, [r3, #8]
   15b80:	2bff      	cmp	r3, #255	; 0xff
   15b82:	d009      	beq.n	15b98 <_usart_set_config+0x1fc>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   15b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15b86:	2280      	movs	r2, #128	; 0x80
   15b88:	0452      	lsls	r2, r2, #17
   15b8a:	4313      	orrs	r3, r2
   15b8c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   15b8e:	683b      	ldr	r3, [r7, #0]
   15b90:	891b      	ldrh	r3, [r3, #8]
   15b92:	6a3a      	ldr	r2, [r7, #32]
   15b94:	4313      	orrs	r3, r2
   15b96:	623b      	str	r3, [r7, #32]
	} else {
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
	}

	/* Set run mode during device sleep */
	if (config->run_in_standby) {
   15b98:	683b      	ldr	r3, [r7, #0]
   15b9a:	7f1b      	ldrb	r3, [r3, #28]
   15b9c:	2b00      	cmp	r3, #0
   15b9e:	d003      	beq.n	15ba8 <_usart_set_config+0x20c>
		/* Enable in sleep mode */
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   15ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15ba2:	2280      	movs	r2, #128	; 0x80
   15ba4:	4313      	orrs	r3, r2
   15ba6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   15ba8:	687b      	ldr	r3, [r7, #4]
   15baa:	1c18      	adds	r0, r3, #0
   15bac:	4b14      	ldr	r3, [pc, #80]	; (15c00 <_usart_set_config+0x264>)
   15bae:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   15bb0:	69bb      	ldr	r3, [r7, #24]
   15bb2:	6a3a      	ldr	r2, [r7, #32]
   15bb4:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   15bb6:	687b      	ldr	r3, [r7, #4]
   15bb8:	1c18      	adds	r0, r3, #0
   15bba:	4b11      	ldr	r3, [pc, #68]	; (15c00 <_usart_set_config+0x264>)
   15bbc:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   15bbe:	69bb      	ldr	r3, [r7, #24]
   15bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   15bc2:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   15bc4:	2300      	movs	r3, #0
}
   15bc6:	1c18      	adds	r0, r3, #0
   15bc8:	46bd      	mov	sp, r7
   15bca:	b00a      	add	sp, #40	; 0x28
   15bcc:	bdb0      	pop	{r4, r5, r7, pc}
   15bce:	46c0      	nop			; (mov r8, r8)
   15bd0:	0001534d 	.word	0x0001534d
   15bd4:	0002686c 	.word	0x0002686c
   15bd8:	000267c0 	.word	0x000267c0
   15bdc:	0002689c 	.word	0x0002689c
   15be0:	000106e9 	.word	0x000106e9
   15be4:	000267e0 	.word	0x000267e0
   15be8:	0001b62d 	.word	0x0001b62d
   15bec:	000268a4 	.word	0x000268a4
   15bf0:	00015171 	.word	0x00015171
   15bf4:	00017ac9 	.word	0x00017ac9
   15bf8:	00014d31 	.word	0x00014d31
   15bfc:	00014d91 	.word	0x00014d91
   15c00:	00015639 	.word	0x00015639

00015c04 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   15c04:	b590      	push	{r4, r7, lr}
   15c06:	b093      	sub	sp, #76	; 0x4c
   15c08:	af02      	add	r7, sp, #8
   15c0a:	60f8      	str	r0, [r7, #12]
   15c0c:	60b9      	str	r1, [r7, #8]
   15c0e:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
   15c10:	4bd0      	ldr	r3, [pc, #832]	; (15f54 <usart_init+0x350>)
   15c12:	4798      	blx	r3
   15c14:	1c03      	adds	r3, r0, #0
   15c16:	2b00      	cmp	r3, #0
   15c18:	d011      	beq.n	15c3e <usart_init+0x3a>
   15c1a:	68fb      	ldr	r3, [r7, #12]
   15c1c:	2b00      	cmp	r3, #0
   15c1e:	d119      	bne.n	15c54 <usart_init+0x50>
   15c20:	4bcc      	ldr	r3, [pc, #816]	; (15f54 <usart_init+0x350>)
   15c22:	4798      	blx	r3
   15c24:	1c01      	adds	r1, r0, #0
   15c26:	4acc      	ldr	r2, [pc, #816]	; (15f58 <usart_init+0x354>)
   15c28:	23aa      	movs	r3, #170	; 0xaa
   15c2a:	005b      	lsls	r3, r3, #1
   15c2c:	48cb      	ldr	r0, [pc, #812]	; (15f5c <usart_init+0x358>)
   15c2e:	9000      	str	r0, [sp, #0]
   15c30:	48cb      	ldr	r0, [pc, #812]	; (15f60 <usart_init+0x35c>)
   15c32:	9001      	str	r0, [sp, #4]
   15c34:	1c08      	adds	r0, r1, #0
   15c36:	2101      	movs	r1, #1
   15c38:	4cca      	ldr	r4, [pc, #808]	; (15f64 <usart_init+0x360>)
   15c3a:	47a0      	blx	r4
   15c3c:	e00a      	b.n	15c54 <usart_init+0x50>
   15c3e:	68fb      	ldr	r3, [r7, #12]
   15c40:	2b00      	cmp	r3, #0
   15c42:	d107      	bne.n	15c54 <usart_init+0x50>
   15c44:	48c8      	ldr	r0, [pc, #800]	; (15f68 <usart_init+0x364>)
   15c46:	49c6      	ldr	r1, [pc, #792]	; (15f60 <usart_init+0x35c>)
   15c48:	4ac3      	ldr	r2, [pc, #780]	; (15f58 <usart_init+0x354>)
   15c4a:	23aa      	movs	r3, #170	; 0xaa
   15c4c:	005b      	lsls	r3, r3, #1
   15c4e:	4cc7      	ldr	r4, [pc, #796]	; (15f6c <usart_init+0x368>)
   15c50:	47a0      	blx	r4
   15c52:	e7fe      	b.n	15c52 <usart_init+0x4e>
	Assert(hw);
   15c54:	4bbf      	ldr	r3, [pc, #764]	; (15f54 <usart_init+0x350>)
   15c56:	4798      	blx	r3
   15c58:	1c03      	adds	r3, r0, #0
   15c5a:	2b00      	cmp	r3, #0
   15c5c:	d011      	beq.n	15c82 <usart_init+0x7e>
   15c5e:	68bb      	ldr	r3, [r7, #8]
   15c60:	2b00      	cmp	r3, #0
   15c62:	d119      	bne.n	15c98 <usart_init+0x94>
   15c64:	4bbb      	ldr	r3, [pc, #748]	; (15f54 <usart_init+0x350>)
   15c66:	4798      	blx	r3
   15c68:	1c01      	adds	r1, r0, #0
   15c6a:	4abb      	ldr	r2, [pc, #748]	; (15f58 <usart_init+0x354>)
   15c6c:	2356      	movs	r3, #86	; 0x56
   15c6e:	33ff      	adds	r3, #255	; 0xff
   15c70:	48ba      	ldr	r0, [pc, #744]	; (15f5c <usart_init+0x358>)
   15c72:	9000      	str	r0, [sp, #0]
   15c74:	48be      	ldr	r0, [pc, #760]	; (15f70 <usart_init+0x36c>)
   15c76:	9001      	str	r0, [sp, #4]
   15c78:	1c08      	adds	r0, r1, #0
   15c7a:	2101      	movs	r1, #1
   15c7c:	4cb9      	ldr	r4, [pc, #740]	; (15f64 <usart_init+0x360>)
   15c7e:	47a0      	blx	r4
   15c80:	e00a      	b.n	15c98 <usart_init+0x94>
   15c82:	68bb      	ldr	r3, [r7, #8]
   15c84:	2b00      	cmp	r3, #0
   15c86:	d107      	bne.n	15c98 <usart_init+0x94>
   15c88:	48b7      	ldr	r0, [pc, #732]	; (15f68 <usart_init+0x364>)
   15c8a:	49b9      	ldr	r1, [pc, #740]	; (15f70 <usart_init+0x36c>)
   15c8c:	4ab2      	ldr	r2, [pc, #712]	; (15f58 <usart_init+0x354>)
   15c8e:	2356      	movs	r3, #86	; 0x56
   15c90:	33ff      	adds	r3, #255	; 0xff
   15c92:	4cb6      	ldr	r4, [pc, #728]	; (15f6c <usart_init+0x368>)
   15c94:	47a0      	blx	r4
   15c96:	e7fe      	b.n	15c96 <usart_init+0x92>
	Assert(config);
   15c98:	4bae      	ldr	r3, [pc, #696]	; (15f54 <usart_init+0x350>)
   15c9a:	4798      	blx	r3
   15c9c:	1c03      	adds	r3, r0, #0
   15c9e:	2b00      	cmp	r3, #0
   15ca0:	d011      	beq.n	15cc6 <usart_init+0xc2>
   15ca2:	687b      	ldr	r3, [r7, #4]
   15ca4:	2b00      	cmp	r3, #0
   15ca6:	d119      	bne.n	15cdc <usart_init+0xd8>
   15ca8:	4baa      	ldr	r3, [pc, #680]	; (15f54 <usart_init+0x350>)
   15caa:	4798      	blx	r3
   15cac:	1c01      	adds	r1, r0, #0
   15cae:	4aaa      	ldr	r2, [pc, #680]	; (15f58 <usart_init+0x354>)
   15cb0:	23ab      	movs	r3, #171	; 0xab
   15cb2:	005b      	lsls	r3, r3, #1
   15cb4:	48a9      	ldr	r0, [pc, #676]	; (15f5c <usart_init+0x358>)
   15cb6:	9000      	str	r0, [sp, #0]
   15cb8:	48ae      	ldr	r0, [pc, #696]	; (15f74 <usart_init+0x370>)
   15cba:	9001      	str	r0, [sp, #4]
   15cbc:	1c08      	adds	r0, r1, #0
   15cbe:	2101      	movs	r1, #1
   15cc0:	4ca8      	ldr	r4, [pc, #672]	; (15f64 <usart_init+0x360>)
   15cc2:	47a0      	blx	r4
   15cc4:	e00a      	b.n	15cdc <usart_init+0xd8>
   15cc6:	687b      	ldr	r3, [r7, #4]
   15cc8:	2b00      	cmp	r3, #0
   15cca:	d107      	bne.n	15cdc <usart_init+0xd8>
   15ccc:	48a6      	ldr	r0, [pc, #664]	; (15f68 <usart_init+0x364>)
   15cce:	49a9      	ldr	r1, [pc, #676]	; (15f74 <usart_init+0x370>)
   15cd0:	4aa1      	ldr	r2, [pc, #644]	; (15f58 <usart_init+0x354>)
   15cd2:	23ab      	movs	r3, #171	; 0xab
   15cd4:	005b      	lsls	r3, r3, #1
   15cd6:	4ca5      	ldr	r4, [pc, #660]	; (15f6c <usart_init+0x368>)
   15cd8:	47a0      	blx	r4
   15cda:	e7fe      	b.n	15cda <usart_init+0xd6>

	enum status_code status_code = STATUS_OK;
   15cdc:	1c3b      	adds	r3, r7, #0
   15cde:	332b      	adds	r3, #43	; 0x2b
   15ce0:	2200      	movs	r2, #0
   15ce2:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   15ce4:	68fb      	ldr	r3, [r7, #12]
   15ce6:	68ba      	ldr	r2, [r7, #8]
   15ce8:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   15cea:	68fb      	ldr	r3, [r7, #12]
   15cec:	681b      	ldr	r3, [r3, #0]
   15cee:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   15cf0:	68fb      	ldr	r3, [r7, #12]
   15cf2:	681b      	ldr	r3, [r3, #0]
   15cf4:	1c18      	adds	r0, r3, #0
   15cf6:	4ba0      	ldr	r3, [pc, #640]	; (15f78 <usart_init+0x374>)
   15cf8:	4798      	blx	r3
   15cfa:	1c03      	adds	r3, r0, #0
   15cfc:	623b      	str	r3, [r7, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   15cfe:	6a3b      	ldr	r3, [r7, #32]
   15d00:	3302      	adds	r3, #2
   15d02:	61fb      	str	r3, [r7, #28]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   15d04:	6a3b      	ldr	r3, [r7, #32]
   15d06:	330d      	adds	r3, #13
   15d08:	61bb      	str	r3, [r7, #24]

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   15d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15d0c:	681a      	ldr	r2, [r3, #0]
   15d0e:	2301      	movs	r3, #1
   15d10:	4013      	ands	r3, r2
   15d12:	d001      	beq.n	15d18 <usart_init+0x114>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   15d14:	2305      	movs	r3, #5
   15d16:	e118      	b.n	15f4a <usart_init+0x346>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   15d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15d1a:	681a      	ldr	r2, [r3, #0]
   15d1c:	2302      	movs	r3, #2
   15d1e:	4013      	ands	r3, r2
   15d20:	d007      	beq.n	15d32 <usart_init+0x12e>
		/* Check if the new setting are the same as the old */
		return _usart_check_config(module, config);
   15d22:	68fa      	ldr	r2, [r7, #12]
   15d24:	687b      	ldr	r3, [r7, #4]
   15d26:	1c10      	adds	r0, r2, #0
   15d28:	1c19      	adds	r1, r3, #0
   15d2a:	4b94      	ldr	r3, [pc, #592]	; (15f7c <usart_init+0x378>)
   15d2c:	4798      	blx	r3
   15d2e:	1c03      	adds	r3, r0, #0
   15d30:	e10b      	b.n	15f4a <usart_init+0x346>
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   15d32:	69fb      	ldr	r3, [r7, #28]
   15d34:	2201      	movs	r2, #1
   15d36:	1c11      	adds	r1, r2, #0
   15d38:	4099      	lsls	r1, r3
   15d3a:	1c0b      	adds	r3, r1, #0
   15d3c:	2002      	movs	r0, #2
   15d3e:	1c19      	adds	r1, r3, #0
   15d40:	4b8f      	ldr	r3, [pc, #572]	; (15f80 <usart_init+0x37c>)
   15d42:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   15d44:	1c3b      	adds	r3, r7, #0
   15d46:	3314      	adds	r3, #20
   15d48:	1c18      	adds	r0, r3, #0
   15d4a:	4b8e      	ldr	r3, [pc, #568]	; (15f84 <usart_init+0x380>)
   15d4c:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   15d4e:	687b      	ldr	r3, [r7, #4]
   15d50:	7f5a      	ldrb	r2, [r3, #29]
   15d52:	1c3b      	adds	r3, r7, #0
   15d54:	3314      	adds	r3, #20
   15d56:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   15d58:	69bb      	ldr	r3, [r7, #24]
   15d5a:	b2da      	uxtb	r2, r3
   15d5c:	1c3b      	adds	r3, r7, #0
   15d5e:	3314      	adds	r3, #20
   15d60:	1c10      	adds	r0, r2, #0
   15d62:	1c19      	adds	r1, r3, #0
   15d64:	4b88      	ldr	r3, [pc, #544]	; (15f88 <usart_init+0x384>)
   15d66:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   15d68:	69bb      	ldr	r3, [r7, #24]
   15d6a:	b2db      	uxtb	r3, r3
   15d6c:	1c18      	adds	r0, r3, #0
   15d6e:	4b87      	ldr	r3, [pc, #540]	; (15f8c <usart_init+0x388>)
   15d70:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   15d72:	687b      	ldr	r3, [r7, #4]
   15d74:	7f5b      	ldrb	r3, [r3, #29]
   15d76:	1c18      	adds	r0, r3, #0
   15d78:	2100      	movs	r1, #0
   15d7a:	4b85      	ldr	r3, [pc, #532]	; (15f90 <usart_init+0x38c>)
   15d7c:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   15d7e:	687b      	ldr	r3, [r7, #4]
   15d80:	7ada      	ldrb	r2, [r3, #11]
   15d82:	68fb      	ldr	r3, [r7, #12]
   15d84:	711a      	strb	r2, [r3, #4]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   15d86:	687b      	ldr	r3, [r7, #4]
   15d88:	7d1a      	ldrb	r2, [r3, #20]
   15d8a:	68fb      	ldr	r3, [r7, #12]
   15d8c:	715a      	strb	r2, [r3, #5]
	module->transmitter_enabled = config->transmitter_enable;
   15d8e:	687b      	ldr	r3, [r7, #4]
   15d90:	7d5a      	ldrb	r2, [r3, #21]
   15d92:	68fb      	ldr	r3, [r7, #12]
   15d94:	719a      	strb	r2, [r3, #6]

	/* Configure Pins */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   15d96:	1c3b      	adds	r3, r7, #0
   15d98:	3310      	adds	r3, #16
   15d9a:	1c18      	adds	r0, r3, #0
   15d9c:	4b7d      	ldr	r3, [pc, #500]	; (15f94 <usart_init+0x390>)
   15d9e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   15da0:	1c3b      	adds	r3, r7, #0
   15da2:	3310      	adds	r3, #16
   15da4:	2200      	movs	r2, #0
   15da6:	705a      	strb	r2, [r3, #1]

	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   15da8:	1c3c      	adds	r4, r7, #0
   15daa:	342b      	adds	r4, #43	; 0x2b
   15dac:	68fa      	ldr	r2, [r7, #12]
   15dae:	687b      	ldr	r3, [r7, #4]
   15db0:	1c10      	adds	r0, r2, #0
   15db2:	1c19      	adds	r1, r3, #0
   15db4:	4b78      	ldr	r3, [pc, #480]	; (15f98 <usart_init+0x394>)
   15db6:	4798      	blx	r3
   15db8:	1c03      	adds	r3, r0, #0
   15dba:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   15dbc:	1c3b      	adds	r3, r7, #0
   15dbe:	332b      	adds	r3, #43	; 0x2b
   15dc0:	781b      	ldrb	r3, [r3, #0]
   15dc2:	2b00      	cmp	r3, #0
   15dc4:	d003      	beq.n	15dce <usart_init+0x1ca>
		return status_code;
   15dc6:	1c3b      	adds	r3, r7, #0
   15dc8:	332b      	adds	r3, #43	; 0x2b
   15dca:	781b      	ldrb	r3, [r3, #0]
   15dcc:	e0bd      	b.n	15f4a <usart_init+0x346>
	}

	uint32_t pad0 = config->pinmux_pad0;
   15dce:	687b      	ldr	r3, [r7, #4]
   15dd0:	6a1b      	ldr	r3, [r3, #32]
   15dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t pad1 = config->pinmux_pad1;
   15dd4:	687b      	ldr	r3, [r7, #4]
   15dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15dd8:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t pad2 = config->pinmux_pad2;
   15dda:	687b      	ldr	r3, [r7, #4]
   15ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15dde:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t pad3 = config->pinmux_pad3;
   15de0:	687b      	ldr	r3, [r7, #4]
   15de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15de4:	633b      	str	r3, [r7, #48]	; 0x30

	/* SERCOM PAD0 */
	if (pad0 == PINMUX_DEFAULT) {
   15de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15de8:	2b00      	cmp	r3, #0
   15dea:	d106      	bne.n	15dfa <usart_init+0x1f6>
		pad0 = _sercom_get_default_pad(hw, 0);
   15dec:	68bb      	ldr	r3, [r7, #8]
   15dee:	1c18      	adds	r0, r3, #0
   15df0:	2100      	movs	r1, #0
   15df2:	4b6a      	ldr	r3, [pc, #424]	; (15f9c <usart_init+0x398>)
   15df4:	4798      	blx	r3
   15df6:	1c03      	adds	r3, r0, #0
   15df8:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	if (pad0 != PINMUX_UNUSED) {
   15dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15dfc:	3301      	adds	r3, #1
   15dfe:	d00d      	beq.n	15e1c <usart_init+0x218>
		pin_conf.mux_position = pad0 & 0xFFFF;
   15e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15e02:	b2da      	uxtb	r2, r3
   15e04:	1c3b      	adds	r3, r7, #0
   15e06:	3310      	adds	r3, #16
   15e08:	701a      	strb	r2, [r3, #0]
		system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   15e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15e0c:	0c1b      	lsrs	r3, r3, #16
   15e0e:	b2da      	uxtb	r2, r3
   15e10:	1c3b      	adds	r3, r7, #0
   15e12:	3310      	adds	r3, #16
   15e14:	1c10      	adds	r0, r2, #0
   15e16:	1c19      	adds	r1, r3, #0
   15e18:	4b61      	ldr	r3, [pc, #388]	; (15fa0 <usart_init+0x39c>)
   15e1a:	4798      	blx	r3
	}

	/* SERCOM PAD1 */
	if (pad1 == PINMUX_DEFAULT) {
   15e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15e1e:	2b00      	cmp	r3, #0
   15e20:	d106      	bne.n	15e30 <usart_init+0x22c>
		pad1 = _sercom_get_default_pad(hw, 1);
   15e22:	68bb      	ldr	r3, [r7, #8]
   15e24:	1c18      	adds	r0, r3, #0
   15e26:	2101      	movs	r1, #1
   15e28:	4b5c      	ldr	r3, [pc, #368]	; (15f9c <usart_init+0x398>)
   15e2a:	4798      	blx	r3
   15e2c:	1c03      	adds	r3, r0, #0
   15e2e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	if (pad1 != PINMUX_UNUSED) {
   15e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15e32:	3301      	adds	r3, #1
   15e34:	d00d      	beq.n	15e52 <usart_init+0x24e>
		pin_conf.mux_position = pad1 & 0xFFFF;
   15e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15e38:	b2da      	uxtb	r2, r3
   15e3a:	1c3b      	adds	r3, r7, #0
   15e3c:	3310      	adds	r3, #16
   15e3e:	701a      	strb	r2, [r3, #0]
		system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   15e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15e42:	0c1b      	lsrs	r3, r3, #16
   15e44:	b2da      	uxtb	r2, r3
   15e46:	1c3b      	adds	r3, r7, #0
   15e48:	3310      	adds	r3, #16
   15e4a:	1c10      	adds	r0, r2, #0
   15e4c:	1c19      	adds	r1, r3, #0
   15e4e:	4b54      	ldr	r3, [pc, #336]	; (15fa0 <usart_init+0x39c>)
   15e50:	4798      	blx	r3
	}

	/* SERCOM PAD2 */
	if (pad2 == PINMUX_DEFAULT) {
   15e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15e54:	2b00      	cmp	r3, #0
   15e56:	d106      	bne.n	15e66 <usart_init+0x262>
		pad2 = _sercom_get_default_pad(hw, 2);
   15e58:	68bb      	ldr	r3, [r7, #8]
   15e5a:	1c18      	adds	r0, r3, #0
   15e5c:	2102      	movs	r1, #2
   15e5e:	4b4f      	ldr	r3, [pc, #316]	; (15f9c <usart_init+0x398>)
   15e60:	4798      	blx	r3
   15e62:	1c03      	adds	r3, r0, #0
   15e64:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (pad2 != PINMUX_UNUSED) {
   15e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15e68:	3301      	adds	r3, #1
   15e6a:	d00d      	beq.n	15e88 <usart_init+0x284>
		pin_conf.mux_position = pad2 & 0xFFFF;
   15e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15e6e:	b2da      	uxtb	r2, r3
   15e70:	1c3b      	adds	r3, r7, #0
   15e72:	3310      	adds	r3, #16
   15e74:	701a      	strb	r2, [r3, #0]
		system_pinmux_pin_set_config(pad2 >> 16, &pin_conf);
   15e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15e78:	0c1b      	lsrs	r3, r3, #16
   15e7a:	b2da      	uxtb	r2, r3
   15e7c:	1c3b      	adds	r3, r7, #0
   15e7e:	3310      	adds	r3, #16
   15e80:	1c10      	adds	r0, r2, #0
   15e82:	1c19      	adds	r1, r3, #0
   15e84:	4b46      	ldr	r3, [pc, #280]	; (15fa0 <usart_init+0x39c>)
   15e86:	4798      	blx	r3
	}

	/* SERCOM PAD3 */
	if (pad3 == PINMUX_DEFAULT) {
   15e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15e8a:	2b00      	cmp	r3, #0
   15e8c:	d106      	bne.n	15e9c <usart_init+0x298>
		pad3 = _sercom_get_default_pad(hw, 3);
   15e8e:	68bb      	ldr	r3, [r7, #8]
   15e90:	1c18      	adds	r0, r3, #0
   15e92:	2103      	movs	r1, #3
   15e94:	4b41      	ldr	r3, [pc, #260]	; (15f9c <usart_init+0x398>)
   15e96:	4798      	blx	r3
   15e98:	1c03      	adds	r3, r0, #0
   15e9a:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (pad3 != PINMUX_UNUSED) {
   15e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15e9e:	3301      	adds	r3, #1
   15ea0:	d00d      	beq.n	15ebe <usart_init+0x2ba>
		pin_conf.mux_position = pad3 & 0xFFFF;
   15ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15ea4:	b2da      	uxtb	r2, r3
   15ea6:	1c3b      	adds	r3, r7, #0
   15ea8:	3310      	adds	r3, #16
   15eaa:	701a      	strb	r2, [r3, #0]
		system_pinmux_pin_set_config(pad3 >> 16, &pin_conf);
   15eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15eae:	0c1b      	lsrs	r3, r3, #16
   15eb0:	b2da      	uxtb	r2, r3
   15eb2:	1c3b      	adds	r3, r7, #0
   15eb4:	3310      	adds	r3, #16
   15eb6:	1c10      	adds	r0, r2, #0
   15eb8:	1c19      	adds	r1, r3, #0
   15eba:	4b39      	ldr	r3, [pc, #228]	; (15fa0 <usart_init+0x39c>)
   15ebc:	4798      	blx	r3
	}
#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   15ebe:	2300      	movs	r3, #0
   15ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
   15ec2:	e008      	b.n	15ed6 <usart_init+0x2d2>
		module->callback[i]            = NULL;
   15ec4:	68fb      	ldr	r3, [r7, #12]
   15ec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   15ec8:	3202      	adds	r2, #2
   15eca:	0092      	lsls	r2, r2, #2
   15ecc:	2100      	movs	r1, #0
   15ece:	50d1      	str	r1, [r2, r3]
		pin_conf.mux_position = pad3 & 0xFFFF;
		system_pinmux_pin_set_config(pad3 >> 16, &pin_conf);
	}
#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   15ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15ed2:	3301      	adds	r3, #1
   15ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
   15ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15ed8:	2b02      	cmp	r3, #2
   15eda:	d9f3      	bls.n	15ec4 <usart_init+0x2c0>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
   15edc:	68fb      	ldr	r3, [r7, #12]
   15ede:	2200      	movs	r2, #0
   15ee0:	619a      	str	r2, [r3, #24]
	module->rx_buffer_ptr              = NULL;
   15ee2:	68fb      	ldr	r3, [r7, #12]
   15ee4:	2200      	movs	r2, #0
   15ee6:	615a      	str	r2, [r3, #20]
	module->remaining_tx_buffer_length = 0x0000;
   15ee8:	68fb      	ldr	r3, [r7, #12]
   15eea:	2200      	movs	r2, #0
   15eec:	83da      	strh	r2, [r3, #30]
	module->remaining_rx_buffer_length = 0x0000;
   15eee:	68fb      	ldr	r3, [r7, #12]
   15ef0:	2200      	movs	r2, #0
   15ef2:	839a      	strh	r2, [r3, #28]
	module->callback_reg_mask          = 0x00;
   15ef4:	68fa      	ldr	r2, [r7, #12]
   15ef6:	2320      	movs	r3, #32
   15ef8:	2100      	movs	r1, #0
   15efa:	54d1      	strb	r1, [r2, r3]
	module->callback_enable_mask       = 0x00;
   15efc:	68fa      	ldr	r2, [r7, #12]
   15efe:	2321      	movs	r3, #33	; 0x21
   15f00:	2100      	movs	r1, #0
   15f02:	54d1      	strb	r1, [r2, r3]
	module->rx_status                  = STATUS_OK;
   15f04:	68fa      	ldr	r2, [r7, #12]
   15f06:	2322      	movs	r3, #34	; 0x22
   15f08:	2100      	movs	r1, #0
   15f0a:	54d1      	strb	r1, [r2, r3]
	module->tx_status                  = STATUS_OK;
   15f0c:	68fa      	ldr	r2, [r7, #12]
   15f0e:	2323      	movs	r3, #35	; 0x23
   15f10:	2100      	movs	r1, #0
   15f12:	54d1      	strb	r1, [r2, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   15f14:	68fb      	ldr	r3, [r7, #12]
   15f16:	681b      	ldr	r3, [r3, #0]
   15f18:	1c3c      	adds	r4, r7, #0
   15f1a:	3417      	adds	r4, #23
   15f1c:	1c18      	adds	r0, r3, #0
   15f1e:	4b16      	ldr	r3, [pc, #88]	; (15f78 <usart_init+0x374>)
   15f20:	4798      	blx	r3
   15f22:	1c03      	adds	r3, r0, #0
   15f24:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   15f26:	1c3b      	adds	r3, r7, #0
   15f28:	3317      	adds	r3, #23
   15f2a:	781a      	ldrb	r2, [r3, #0]
   15f2c:	4b1d      	ldr	r3, [pc, #116]	; (15fa4 <usart_init+0x3a0>)
   15f2e:	1c10      	adds	r0, r2, #0
   15f30:	1c19      	adds	r1, r3, #0
   15f32:	4b1d      	ldr	r3, [pc, #116]	; (15fa8 <usart_init+0x3a4>)
   15f34:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   15f36:	1c3b      	adds	r3, r7, #0
   15f38:	3317      	adds	r3, #23
   15f3a:	781a      	ldrb	r2, [r3, #0]
   15f3c:	4b1b      	ldr	r3, [pc, #108]	; (15fac <usart_init+0x3a8>)
   15f3e:	0092      	lsls	r2, r2, #2
   15f40:	68f9      	ldr	r1, [r7, #12]
   15f42:	50d1      	str	r1, [r2, r3]
#endif
	return status_code;
   15f44:	1c3b      	adds	r3, r7, #0
   15f46:	332b      	adds	r3, #43	; 0x2b
   15f48:	781b      	ldrb	r3, [r3, #0]
}
   15f4a:	1c18      	adds	r0, r3, #0
   15f4c:	46bd      	mov	sp, r7
   15f4e:	b011      	add	sp, #68	; 0x44
   15f50:	bd90      	pop	{r4, r7, pc}
   15f52:	46c0      	nop			; (mov r8, r8)
   15f54:	0001534d 	.word	0x0001534d
   15f58:	0002686c 	.word	0x0002686c
   15f5c:	000267c0 	.word	0x000267c0
   15f60:	0002689c 	.word	0x0002689c
   15f64:	000106e9 	.word	0x000106e9
   15f68:	000267e0 	.word	0x000267e0
   15f6c:	0001b62d 	.word	0x0001b62d
   15f70:	000268b0 	.word	0x000268b0
   15f74:	000267d8 	.word	0x000267d8
   15f78:	00015171 	.word	0x00015171
   15f7c:	0001565d 	.word	0x0001565d
   15f80:	000153dd 	.word	0x000153dd
   15f84:	00015361 	.word	0x00015361
   15f88:	00017971 	.word	0x00017971
   15f8c:	00017a25 	.word	0x00017a25
   15f90:	00014e59 	.word	0x00014e59
   15f94:	00015489 	.word	0x00015489
   15f98:	0001599d 	.word	0x0001599d
   15f9c:	00014ee5 	.word	0x00014ee5
   15fa0:	00017d71 	.word	0x00017d71
   15fa4:	0001653d 	.word	0x0001653d
   15fa8:	00015215 	.word	0x00015215
   15fac:	20001200 	.word	0x20001200

00015fb0 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
   15fb0:	b590      	push	{r4, r7, lr}
   15fb2:	b087      	sub	sp, #28
   15fb4:	af02      	add	r7, sp, #8
   15fb6:	6078      	str	r0, [r7, #4]
   15fb8:	1c0a      	adds	r2, r1, #0
   15fba:	1cbb      	adds	r3, r7, #2
   15fbc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
   15fbe:	4b38      	ldr	r3, [pc, #224]	; (160a0 <usart_write_wait+0xf0>)
   15fc0:	4798      	blx	r3
   15fc2:	1c03      	adds	r3, r0, #0
   15fc4:	2b00      	cmp	r3, #0
   15fc6:	d011      	beq.n	15fec <usart_write_wait+0x3c>
   15fc8:	687b      	ldr	r3, [r7, #4]
   15fca:	2b00      	cmp	r3, #0
   15fcc:	d119      	bne.n	16002 <usart_write_wait+0x52>
   15fce:	4b34      	ldr	r3, [pc, #208]	; (160a0 <usart_write_wait+0xf0>)
   15fd0:	4798      	blx	r3
   15fd2:	1c01      	adds	r1, r0, #0
   15fd4:	4a33      	ldr	r2, [pc, #204]	; (160a4 <usart_write_wait+0xf4>)
   15fd6:	23e0      	movs	r3, #224	; 0xe0
   15fd8:	33ff      	adds	r3, #255	; 0xff
   15fda:	4833      	ldr	r0, [pc, #204]	; (160a8 <usart_write_wait+0xf8>)
   15fdc:	9000      	str	r0, [sp, #0]
   15fde:	4833      	ldr	r0, [pc, #204]	; (160ac <usart_write_wait+0xfc>)
   15fe0:	9001      	str	r0, [sp, #4]
   15fe2:	1c08      	adds	r0, r1, #0
   15fe4:	2101      	movs	r1, #1
   15fe6:	4c32      	ldr	r4, [pc, #200]	; (160b0 <usart_write_wait+0x100>)
   15fe8:	47a0      	blx	r4
   15fea:	e00a      	b.n	16002 <usart_write_wait+0x52>
   15fec:	687b      	ldr	r3, [r7, #4]
   15fee:	2b00      	cmp	r3, #0
   15ff0:	d107      	bne.n	16002 <usart_write_wait+0x52>
   15ff2:	4830      	ldr	r0, [pc, #192]	; (160b4 <usart_write_wait+0x104>)
   15ff4:	492d      	ldr	r1, [pc, #180]	; (160ac <usart_write_wait+0xfc>)
   15ff6:	4a2b      	ldr	r2, [pc, #172]	; (160a4 <usart_write_wait+0xf4>)
   15ff8:	23e0      	movs	r3, #224	; 0xe0
   15ffa:	33ff      	adds	r3, #255	; 0xff
   15ffc:	4c2e      	ldr	r4, [pc, #184]	; (160b8 <usart_write_wait+0x108>)
   15ffe:	47a0      	blx	r4
   16000:	e7fe      	b.n	16000 <usart_write_wait+0x50>
	Assert(module->hw);
   16002:	4b27      	ldr	r3, [pc, #156]	; (160a0 <usart_write_wait+0xf0>)
   16004:	4798      	blx	r3
   16006:	1c03      	adds	r3, r0, #0
   16008:	2b00      	cmp	r3, #0
   1600a:	d012      	beq.n	16032 <usart_write_wait+0x82>
   1600c:	687b      	ldr	r3, [r7, #4]
   1600e:	681b      	ldr	r3, [r3, #0]
   16010:	2b00      	cmp	r3, #0
   16012:	d11a      	bne.n	1604a <usart_write_wait+0x9a>
   16014:	4b22      	ldr	r3, [pc, #136]	; (160a0 <usart_write_wait+0xf0>)
   16016:	4798      	blx	r3
   16018:	1c01      	adds	r1, r0, #0
   1601a:	4a22      	ldr	r2, [pc, #136]	; (160a4 <usart_write_wait+0xf4>)
   1601c:	23f0      	movs	r3, #240	; 0xf0
   1601e:	005b      	lsls	r3, r3, #1
   16020:	4821      	ldr	r0, [pc, #132]	; (160a8 <usart_write_wait+0xf8>)
   16022:	9000      	str	r0, [sp, #0]
   16024:	4825      	ldr	r0, [pc, #148]	; (160bc <usart_write_wait+0x10c>)
   16026:	9001      	str	r0, [sp, #4]
   16028:	1c08      	adds	r0, r1, #0
   1602a:	2101      	movs	r1, #1
   1602c:	4c20      	ldr	r4, [pc, #128]	; (160b0 <usart_write_wait+0x100>)
   1602e:	47a0      	blx	r4
   16030:	e00b      	b.n	1604a <usart_write_wait+0x9a>
   16032:	687b      	ldr	r3, [r7, #4]
   16034:	681b      	ldr	r3, [r3, #0]
   16036:	2b00      	cmp	r3, #0
   16038:	d107      	bne.n	1604a <usart_write_wait+0x9a>
   1603a:	481e      	ldr	r0, [pc, #120]	; (160b4 <usart_write_wait+0x104>)
   1603c:	491f      	ldr	r1, [pc, #124]	; (160bc <usart_write_wait+0x10c>)
   1603e:	4a19      	ldr	r2, [pc, #100]	; (160a4 <usart_write_wait+0xf4>)
   16040:	23f0      	movs	r3, #240	; 0xf0
   16042:	005b      	lsls	r3, r3, #1
   16044:	4c1c      	ldr	r4, [pc, #112]	; (160b8 <usart_write_wait+0x108>)
   16046:	47a0      	blx	r4
   16048:	e7fe      	b.n	16048 <usart_write_wait+0x98>

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1604a:	687b      	ldr	r3, [r7, #4]
   1604c:	681b      	ldr	r3, [r3, #0]
   1604e:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   16050:	687b      	ldr	r3, [r7, #4]
   16052:	799b      	ldrb	r3, [r3, #6]
   16054:	2201      	movs	r2, #1
   16056:	4053      	eors	r3, r2
   16058:	b2db      	uxtb	r3, r3
   1605a:	2b00      	cmp	r3, #0
   1605c:	d001      	beq.n	16062 <usart_write_wait+0xb2>
		return STATUS_ERR_DENIED;
   1605e:	231c      	movs	r3, #28
   16060:	e01a      	b.n	16098 <usart_write_wait+0xe8>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
   16062:	687b      	ldr	r3, [r7, #4]
   16064:	69db      	ldr	r3, [r3, #28]
   16066:	0c1b      	lsrs	r3, r3, #16
   16068:	b29b      	uxth	r3, r3
   1606a:	2b00      	cmp	r3, #0
   1606c:	d001      	beq.n	16072 <usart_write_wait+0xc2>
		return STATUS_BUSY;
   1606e:	2305      	movs	r3, #5
   16070:	e012      	b.n	16098 <usart_write_wait+0xe8>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   16072:	687b      	ldr	r3, [r7, #4]
   16074:	1c18      	adds	r0, r3, #0
   16076:	4b12      	ldr	r3, [pc, #72]	; (160c0 <usart_write_wait+0x110>)
   16078:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
   1607a:	68fb      	ldr	r3, [r7, #12]
   1607c:	1cba      	adds	r2, r7, #2
   1607e:	8812      	ldrh	r2, [r2, #0]
   16080:	831a      	strh	r2, [r3, #24]

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
   16082:	46c0      	nop			; (mov r8, r8)
   16084:	68fb      	ldr	r3, [r7, #12]
   16086:	68db      	ldr	r3, [r3, #12]
   16088:	021b      	lsls	r3, r3, #8
   1608a:	0e1b      	lsrs	r3, r3, #24
   1608c:	b2db      	uxtb	r3, r3
   1608e:	1c1a      	adds	r2, r3, #0
   16090:	2302      	movs	r3, #2
   16092:	4013      	ands	r3, r2
   16094:	d0f6      	beq.n	16084 <usart_write_wait+0xd4>
		/* Wait until data is sent */
	}

	return STATUS_OK;
   16096:	2300      	movs	r3, #0
}
   16098:	1c18      	adds	r0, r3, #0
   1609a:	46bd      	mov	sp, r7
   1609c:	b005      	add	sp, #20
   1609e:	bd90      	pop	{r4, r7, pc}
   160a0:	0001534d 	.word	0x0001534d
   160a4:	0002686c 	.word	0x0002686c
   160a8:	000267c0 	.word	0x000267c0
   160ac:	0002689c 	.word	0x0002689c
   160b0:	000106e9 	.word	0x000106e9
   160b4:	000267e0 	.word	0x000267e0
   160b8:	0001b62d 	.word	0x0001b62d
   160bc:	000268a4 	.word	0x000268a4
   160c0:	00015639 	.word	0x00015639

000160c4 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
   160c4:	b590      	push	{r4, r7, lr}
   160c6:	b087      	sub	sp, #28
   160c8:	af02      	add	r7, sp, #8
   160ca:	6078      	str	r0, [r7, #4]
   160cc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
   160ce:	4b4a      	ldr	r3, [pc, #296]	; (161f8 <usart_read_wait+0x134>)
   160d0:	4798      	blx	r3
   160d2:	1c03      	adds	r3, r0, #0
   160d4:	2b00      	cmp	r3, #0
   160d6:	d011      	beq.n	160fc <usart_read_wait+0x38>
   160d8:	687b      	ldr	r3, [r7, #4]
   160da:	2b00      	cmp	r3, #0
   160dc:	d119      	bne.n	16112 <usart_read_wait+0x4e>
   160de:	4b46      	ldr	r3, [pc, #280]	; (161f8 <usart_read_wait+0x134>)
   160e0:	4798      	blx	r3
   160e2:	1c01      	adds	r1, r0, #0
   160e4:	4a45      	ldr	r2, [pc, #276]	; (161fc <usart_read_wait+0x138>)
   160e6:	2388      	movs	r3, #136	; 0x88
   160e8:	009b      	lsls	r3, r3, #2
   160ea:	4845      	ldr	r0, [pc, #276]	; (16200 <usart_read_wait+0x13c>)
   160ec:	9000      	str	r0, [sp, #0]
   160ee:	4845      	ldr	r0, [pc, #276]	; (16204 <usart_read_wait+0x140>)
   160f0:	9001      	str	r0, [sp, #4]
   160f2:	1c08      	adds	r0, r1, #0
   160f4:	2101      	movs	r1, #1
   160f6:	4c44      	ldr	r4, [pc, #272]	; (16208 <usart_read_wait+0x144>)
   160f8:	47a0      	blx	r4
   160fa:	e00a      	b.n	16112 <usart_read_wait+0x4e>
   160fc:	687b      	ldr	r3, [r7, #4]
   160fe:	2b00      	cmp	r3, #0
   16100:	d107      	bne.n	16112 <usart_read_wait+0x4e>
   16102:	4842      	ldr	r0, [pc, #264]	; (1620c <usart_read_wait+0x148>)
   16104:	493f      	ldr	r1, [pc, #252]	; (16204 <usart_read_wait+0x140>)
   16106:	4a3d      	ldr	r2, [pc, #244]	; (161fc <usart_read_wait+0x138>)
   16108:	2388      	movs	r3, #136	; 0x88
   1610a:	009b      	lsls	r3, r3, #2
   1610c:	4c40      	ldr	r4, [pc, #256]	; (16210 <usart_read_wait+0x14c>)
   1610e:	47a0      	blx	r4
   16110:	e7fe      	b.n	16110 <usart_read_wait+0x4c>
	Assert(module->hw);
   16112:	4b39      	ldr	r3, [pc, #228]	; (161f8 <usart_read_wait+0x134>)
   16114:	4798      	blx	r3
   16116:	1c03      	adds	r3, r0, #0
   16118:	2b00      	cmp	r3, #0
   1611a:	d011      	beq.n	16140 <usart_read_wait+0x7c>
   1611c:	687b      	ldr	r3, [r7, #4]
   1611e:	681b      	ldr	r3, [r3, #0]
   16120:	2b00      	cmp	r3, #0
   16122:	d118      	bne.n	16156 <usart_read_wait+0x92>
   16124:	4b34      	ldr	r3, [pc, #208]	; (161f8 <usart_read_wait+0x134>)
   16126:	4798      	blx	r3
   16128:	1c01      	adds	r1, r0, #0
   1612a:	4a34      	ldr	r2, [pc, #208]	; (161fc <usart_read_wait+0x138>)
   1612c:	4b39      	ldr	r3, [pc, #228]	; (16214 <usart_read_wait+0x150>)
   1612e:	4834      	ldr	r0, [pc, #208]	; (16200 <usart_read_wait+0x13c>)
   16130:	9000      	str	r0, [sp, #0]
   16132:	4839      	ldr	r0, [pc, #228]	; (16218 <usart_read_wait+0x154>)
   16134:	9001      	str	r0, [sp, #4]
   16136:	1c08      	adds	r0, r1, #0
   16138:	2101      	movs	r1, #1
   1613a:	4c33      	ldr	r4, [pc, #204]	; (16208 <usart_read_wait+0x144>)
   1613c:	47a0      	blx	r4
   1613e:	e00a      	b.n	16156 <usart_read_wait+0x92>
   16140:	687b      	ldr	r3, [r7, #4]
   16142:	681b      	ldr	r3, [r3, #0]
   16144:	2b00      	cmp	r3, #0
   16146:	d106      	bne.n	16156 <usart_read_wait+0x92>
   16148:	4830      	ldr	r0, [pc, #192]	; (1620c <usart_read_wait+0x148>)
   1614a:	4933      	ldr	r1, [pc, #204]	; (16218 <usart_read_wait+0x154>)
   1614c:	4a2b      	ldr	r2, [pc, #172]	; (161fc <usart_read_wait+0x138>)
   1614e:	4b31      	ldr	r3, [pc, #196]	; (16214 <usart_read_wait+0x150>)
   16150:	4c2f      	ldr	r4, [pc, #188]	; (16210 <usart_read_wait+0x14c>)
   16152:	47a0      	blx	r4
   16154:	e7fe      	b.n	16154 <usart_read_wait+0x90>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   16156:	687b      	ldr	r3, [r7, #4]
   16158:	681b      	ldr	r3, [r3, #0]
   1615a:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   1615c:	687b      	ldr	r3, [r7, #4]
   1615e:	795b      	ldrb	r3, [r3, #5]
   16160:	2201      	movs	r2, #1
   16162:	4053      	eors	r3, r2
   16164:	b2db      	uxtb	r3, r3
   16166:	2b00      	cmp	r3, #0
   16168:	d001      	beq.n	1616e <usart_read_wait+0xaa>
		return STATUS_ERR_DENIED;
   1616a:	231c      	movs	r3, #28
   1616c:	e03f      	b.n	161ee <usart_read_wait+0x12a>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
   1616e:	687b      	ldr	r3, [r7, #4]
   16170:	69db      	ldr	r3, [r3, #28]
   16172:	b29b      	uxth	r3, r3
   16174:	2b00      	cmp	r3, #0
   16176:	d001      	beq.n	1617c <usart_read_wait+0xb8>
		return STATUS_BUSY;
   16178:	2305      	movs	r3, #5
   1617a:	e038      	b.n	161ee <usart_read_wait+0x12a>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1617c:	687b      	ldr	r3, [r7, #4]
   1617e:	1c18      	adds	r0, r3, #0
   16180:	4b26      	ldr	r3, [pc, #152]	; (1621c <usart_read_wait+0x158>)
   16182:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   16184:	68fb      	ldr	r3, [r7, #12]
   16186:	691b      	ldr	r3, [r3, #16]
   16188:	b29b      	uxth	r3, r3
   1618a:	b2d9      	uxtb	r1, r3
   1618c:	1c3b      	adds	r3, r7, #0
   1618e:	330b      	adds	r3, #11
   16190:	2207      	movs	r2, #7
   16192:	400a      	ands	r2, r1
   16194:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
   16196:	1c3b      	adds	r3, r7, #0
   16198:	330b      	adds	r3, #11
   1619a:	781b      	ldrb	r3, [r3, #0]
   1619c:	2b00      	cmp	r3, #0
   1619e:	d020      	beq.n	161e2 <usart_read_wait+0x11e>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
   161a0:	1c3b      	adds	r3, r7, #0
   161a2:	330b      	adds	r3, #11
   161a4:	781a      	ldrb	r2, [r3, #0]
   161a6:	2302      	movs	r3, #2
   161a8:	4013      	ands	r3, r2
   161aa:	d004      	beq.n	161b6 <usart_read_wait+0xf2>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   161ac:	68fb      	ldr	r3, [r7, #12]
   161ae:	2202      	movs	r2, #2
   161b0:	821a      	strh	r2, [r3, #16]

			return STATUS_ERR_BAD_FORMAT;
   161b2:	231a      	movs	r3, #26
   161b4:	e01b      	b.n	161ee <usart_read_wait+0x12a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   161b6:	1c3b      	adds	r3, r7, #0
   161b8:	330b      	adds	r3, #11
   161ba:	781a      	ldrb	r2, [r3, #0]
   161bc:	2304      	movs	r3, #4
   161be:	4013      	ands	r3, r2
   161c0:	d004      	beq.n	161cc <usart_read_wait+0x108>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   161c2:	68fb      	ldr	r3, [r7, #12]
   161c4:	2204      	movs	r2, #4
   161c6:	821a      	strh	r2, [r3, #16]

			return STATUS_ERR_OVERFLOW;
   161c8:	231e      	movs	r3, #30
   161ca:	e010      	b.n	161ee <usart_read_wait+0x12a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
   161cc:	1c3b      	adds	r3, r7, #0
   161ce:	330b      	adds	r3, #11
   161d0:	781a      	ldrb	r2, [r3, #0]
   161d2:	2301      	movs	r3, #1
   161d4:	4013      	ands	r3, r2
   161d6:	d004      	beq.n	161e2 <usart_read_wait+0x11e>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   161d8:	68fb      	ldr	r3, [r7, #12]
   161da:	2201      	movs	r2, #1
   161dc:	821a      	strh	r2, [r3, #16]

			return STATUS_ERR_BAD_DATA;
   161de:	2313      	movs	r3, #19
   161e0:	e005      	b.n	161ee <usart_read_wait+0x12a>
		}
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
   161e2:	68fb      	ldr	r3, [r7, #12]
   161e4:	699b      	ldr	r3, [r3, #24]
   161e6:	b29a      	uxth	r2, r3
   161e8:	683b      	ldr	r3, [r7, #0]
   161ea:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
   161ec:	2300      	movs	r3, #0
}
   161ee:	1c18      	adds	r0, r3, #0
   161f0:	46bd      	mov	sp, r7
   161f2:	b005      	add	sp, #20
   161f4:	bd90      	pop	{r4, r7, pc}
   161f6:	46c0      	nop			; (mov r8, r8)
   161f8:	0001534d 	.word	0x0001534d
   161fc:	0002686c 	.word	0x0002686c
   16200:	000267c0 	.word	0x000267c0
   16204:	0002689c 	.word	0x0002689c
   16208:	000106e9 	.word	0x000106e9
   1620c:	000267e0 	.word	0x000267e0
   16210:	0001b62d 	.word	0x0001b62d
   16214:	00000221 	.word	0x00000221
   16218:	000268a4 	.word	0x000268a4
   1621c:	00015639 	.word	0x00015639

00016220 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
   16220:	b580      	push	{r7, lr}
   16222:	af00      	add	r7, sp, #0
	return test_case_ptr;
   16224:	4b02      	ldr	r3, [pc, #8]	; (16230 <test_get_case+0x10>)
   16226:	681b      	ldr	r3, [r3, #0]
}
   16228:	1c18      	adds	r0, r3, #0
   1622a:	46bd      	mov	sp, r7
   1622c:	bd80      	pop	{r7, pc}
   1622e:	46c0      	nop			; (mov r8, r8)
   16230:	2000041c 	.word	0x2000041c

00016234 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   16234:	b580      	push	{r7, lr}
   16236:	b084      	sub	sp, #16
   16238:	af00      	add	r7, sp, #0
   1623a:	6078      	str	r0, [r7, #4]
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1623c:	687b      	ldr	r3, [r7, #4]
   1623e:	681b      	ldr	r3, [r3, #0]
   16240:	60fb      	str	r3, [r7, #12]

	while (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY) {
   16242:	46c0      	nop			; (mov r8, r8)
   16244:	68fb      	ldr	r3, [r7, #12]
   16246:	691b      	ldr	r3, [r3, #16]
   16248:	b29b      	uxth	r3, r3
   1624a:	b29b      	uxth	r3, r3
   1624c:	b21b      	sxth	r3, r3
   1624e:	2b00      	cmp	r3, #0
   16250:	dbf8      	blt.n	16244 <_usart_wait_for_sync+0x10>
		/* Wait until the synchronization is complete */
	}
}
   16252:	46bd      	mov	sp, r7
   16254:	b004      	add	sp, #16
   16256:	bd80      	pop	{r7, pc}

00016258 <_usart_read_buffer>:
 */
void _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   16258:	b590      	push	{r4, r7, lr}
   1625a:	b089      	sub	sp, #36	; 0x24
   1625c:	af02      	add	r7, sp, #8
   1625e:	60f8      	str	r0, [r7, #12]
   16260:	60b9      	str	r1, [r7, #8]
   16262:	1dbb      	adds	r3, r7, #6
   16264:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
   16266:	4b2f      	ldr	r3, [pc, #188]	; (16324 <_usart_read_buffer+0xcc>)
   16268:	4798      	blx	r3
   1626a:	1c03      	adds	r3, r0, #0
   1626c:	2b00      	cmp	r3, #0
   1626e:	d011      	beq.n	16294 <_usart_read_buffer+0x3c>
   16270:	68fb      	ldr	r3, [r7, #12]
   16272:	2b00      	cmp	r3, #0
   16274:	d11b      	bne.n	162ae <_usart_read_buffer+0x56>
   16276:	4b2b      	ldr	r3, [pc, #172]	; (16324 <_usart_read_buffer+0xcc>)
   16278:	4798      	blx	r3
   1627a:	1c02      	adds	r2, r0, #0
   1627c:	4b2a      	ldr	r3, [pc, #168]	; (16328 <_usart_read_buffer+0xd0>)
   1627e:	492b      	ldr	r1, [pc, #172]	; (1632c <_usart_read_buffer+0xd4>)
   16280:	9100      	str	r1, [sp, #0]
   16282:	492b      	ldr	r1, [pc, #172]	; (16330 <_usart_read_buffer+0xd8>)
   16284:	9101      	str	r1, [sp, #4]
   16286:	1c10      	adds	r0, r2, #0
   16288:	2101      	movs	r1, #1
   1628a:	1c1a      	adds	r2, r3, #0
   1628c:	235b      	movs	r3, #91	; 0x5b
   1628e:	4c29      	ldr	r4, [pc, #164]	; (16334 <_usart_read_buffer+0xdc>)
   16290:	47a0      	blx	r4
   16292:	e00c      	b.n	162ae <_usart_read_buffer+0x56>
   16294:	68fb      	ldr	r3, [r7, #12]
   16296:	2b00      	cmp	r3, #0
   16298:	d109      	bne.n	162ae <_usart_read_buffer+0x56>
   1629a:	4927      	ldr	r1, [pc, #156]	; (16338 <_usart_read_buffer+0xe0>)
   1629c:	4a24      	ldr	r2, [pc, #144]	; (16330 <_usart_read_buffer+0xd8>)
   1629e:	4b22      	ldr	r3, [pc, #136]	; (16328 <_usart_read_buffer+0xd0>)
   162a0:	1c08      	adds	r0, r1, #0
   162a2:	1c11      	adds	r1, r2, #0
   162a4:	1c1a      	adds	r2, r3, #0
   162a6:	235b      	movs	r3, #91	; 0x5b
   162a8:	4c24      	ldr	r4, [pc, #144]	; (1633c <_usart_read_buffer+0xe4>)
   162aa:	47a0      	blx	r4
   162ac:	e7fe      	b.n	162ac <_usart_read_buffer+0x54>
	Assert(module->hw);
   162ae:	4b1d      	ldr	r3, [pc, #116]	; (16324 <_usart_read_buffer+0xcc>)
   162b0:	4798      	blx	r3
   162b2:	1c03      	adds	r3, r0, #0
   162b4:	2b00      	cmp	r3, #0
   162b6:	d012      	beq.n	162de <_usart_read_buffer+0x86>
   162b8:	68fb      	ldr	r3, [r7, #12]
   162ba:	681b      	ldr	r3, [r3, #0]
   162bc:	2b00      	cmp	r3, #0
   162be:	d11c      	bne.n	162fa <_usart_read_buffer+0xa2>
   162c0:	4b18      	ldr	r3, [pc, #96]	; (16324 <_usart_read_buffer+0xcc>)
   162c2:	4798      	blx	r3
   162c4:	1c02      	adds	r2, r0, #0
   162c6:	4b18      	ldr	r3, [pc, #96]	; (16328 <_usart_read_buffer+0xd0>)
   162c8:	4918      	ldr	r1, [pc, #96]	; (1632c <_usart_read_buffer+0xd4>)
   162ca:	9100      	str	r1, [sp, #0]
   162cc:	491c      	ldr	r1, [pc, #112]	; (16340 <_usart_read_buffer+0xe8>)
   162ce:	9101      	str	r1, [sp, #4]
   162d0:	1c10      	adds	r0, r2, #0
   162d2:	2101      	movs	r1, #1
   162d4:	1c1a      	adds	r2, r3, #0
   162d6:	235c      	movs	r3, #92	; 0x5c
   162d8:	4c16      	ldr	r4, [pc, #88]	; (16334 <_usart_read_buffer+0xdc>)
   162da:	47a0      	blx	r4
   162dc:	e00d      	b.n	162fa <_usart_read_buffer+0xa2>
   162de:	68fb      	ldr	r3, [r7, #12]
   162e0:	681b      	ldr	r3, [r3, #0]
   162e2:	2b00      	cmp	r3, #0
   162e4:	d109      	bne.n	162fa <_usart_read_buffer+0xa2>
   162e6:	4914      	ldr	r1, [pc, #80]	; (16338 <_usart_read_buffer+0xe0>)
   162e8:	4a15      	ldr	r2, [pc, #84]	; (16340 <_usart_read_buffer+0xe8>)
   162ea:	4b0f      	ldr	r3, [pc, #60]	; (16328 <_usart_read_buffer+0xd0>)
   162ec:	1c08      	adds	r0, r1, #0
   162ee:	1c11      	adds	r1, r2, #0
   162f0:	1c1a      	adds	r2, r3, #0
   162f2:	235c      	movs	r3, #92	; 0x5c
   162f4:	4c11      	ldr	r4, [pc, #68]	; (1633c <_usart_read_buffer+0xe4>)
   162f6:	47a0      	blx	r4
   162f8:	e7fe      	b.n	162f8 <_usart_read_buffer+0xa0>

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   162fa:	68fb      	ldr	r3, [r7, #12]
   162fc:	681b      	ldr	r3, [r3, #0]
   162fe:	617b      	str	r3, [r7, #20]

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   16300:	68fb      	ldr	r3, [r7, #12]
   16302:	1dba      	adds	r2, r7, #6
   16304:	8812      	ldrh	r2, [r2, #0]
   16306:	839a      	strh	r2, [r3, #28]
	module->rx_buffer_ptr              = rx_data;
   16308:	68fb      	ldr	r3, [r7, #12]
   1630a:	68ba      	ldr	r2, [r7, #8]
   1630c:	615a      	str	r2, [r3, #20]
	module->rx_status                  = STATUS_BUSY;
   1630e:	68fa      	ldr	r2, [r7, #12]
   16310:	2322      	movs	r3, #34	; 0x22
   16312:	2105      	movs	r1, #5
   16314:	54d1      	strb	r1, [r2, r3]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   16316:	697b      	ldr	r3, [r7, #20]
   16318:	2204      	movs	r2, #4
   1631a:	735a      	strb	r2, [r3, #13]
}
   1631c:	46bd      	mov	sp, r7
   1631e:	b007      	add	sp, #28
   16320:	bd90      	pop	{r4, r7, pc}
   16322:	46c0      	nop			; (mov r8, r8)
   16324:	00016221 	.word	0x00016221
   16328:	000268b4 	.word	0x000268b4
   1632c:	000268ec 	.word	0x000268ec
   16330:	00026904 	.word	0x00026904
   16334:	000106e9 	.word	0x000106e9
   16338:	0002690c 	.word	0x0002690c
   1633c:	0001b62d 	.word	0x0001b62d
   16340:	00026930 	.word	0x00026930

00016344 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   16344:	b590      	push	{r4, r7, lr}
   16346:	b087      	sub	sp, #28
   16348:	af02      	add	r7, sp, #8
   1634a:	60f8      	str	r0, [r7, #12]
   1634c:	60b9      	str	r1, [r7, #8]
   1634e:	1dfb      	adds	r3, r7, #7
   16350:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
   16352:	4b31      	ldr	r3, [pc, #196]	; (16418 <usart_register_callback+0xd4>)
   16354:	4798      	blx	r3
   16356:	1c03      	adds	r3, r0, #0
   16358:	2b00      	cmp	r3, #0
   1635a:	d011      	beq.n	16380 <usart_register_callback+0x3c>
   1635c:	68fb      	ldr	r3, [r7, #12]
   1635e:	2b00      	cmp	r3, #0
   16360:	d11b      	bne.n	1639a <usart_register_callback+0x56>
   16362:	4b2d      	ldr	r3, [pc, #180]	; (16418 <usart_register_callback+0xd4>)
   16364:	4798      	blx	r3
   16366:	1c02      	adds	r2, r0, #0
   16368:	4b2c      	ldr	r3, [pc, #176]	; (1641c <usart_register_callback+0xd8>)
   1636a:	492d      	ldr	r1, [pc, #180]	; (16420 <usart_register_callback+0xdc>)
   1636c:	9100      	str	r1, [sp, #0]
   1636e:	492d      	ldr	r1, [pc, #180]	; (16424 <usart_register_callback+0xe0>)
   16370:	9101      	str	r1, [sp, #4]
   16372:	1c10      	adds	r0, r2, #0
   16374:	2101      	movs	r1, #1
   16376:	1c1a      	adds	r2, r3, #0
   16378:	237f      	movs	r3, #127	; 0x7f
   1637a:	4c2b      	ldr	r4, [pc, #172]	; (16428 <usart_register_callback+0xe4>)
   1637c:	47a0      	blx	r4
   1637e:	e00c      	b.n	1639a <usart_register_callback+0x56>
   16380:	68fb      	ldr	r3, [r7, #12]
   16382:	2b00      	cmp	r3, #0
   16384:	d109      	bne.n	1639a <usart_register_callback+0x56>
   16386:	4929      	ldr	r1, [pc, #164]	; (1642c <usart_register_callback+0xe8>)
   16388:	4a26      	ldr	r2, [pc, #152]	; (16424 <usart_register_callback+0xe0>)
   1638a:	4b24      	ldr	r3, [pc, #144]	; (1641c <usart_register_callback+0xd8>)
   1638c:	1c08      	adds	r0, r1, #0
   1638e:	1c11      	adds	r1, r2, #0
   16390:	1c1a      	adds	r2, r3, #0
   16392:	237f      	movs	r3, #127	; 0x7f
   16394:	4c26      	ldr	r4, [pc, #152]	; (16430 <usart_register_callback+0xec>)
   16396:	47a0      	blx	r4
   16398:	e7fe      	b.n	16398 <usart_register_callback+0x54>
	Assert(callback_func);
   1639a:	4b1f      	ldr	r3, [pc, #124]	; (16418 <usart_register_callback+0xd4>)
   1639c:	4798      	blx	r3
   1639e:	1c03      	adds	r3, r0, #0
   163a0:	2b00      	cmp	r3, #0
   163a2:	d011      	beq.n	163c8 <usart_register_callback+0x84>
   163a4:	68bb      	ldr	r3, [r7, #8]
   163a6:	2b00      	cmp	r3, #0
   163a8:	d11b      	bne.n	163e2 <usart_register_callback+0x9e>
   163aa:	4b1b      	ldr	r3, [pc, #108]	; (16418 <usart_register_callback+0xd4>)
   163ac:	4798      	blx	r3
   163ae:	1c02      	adds	r2, r0, #0
   163b0:	4b1a      	ldr	r3, [pc, #104]	; (1641c <usart_register_callback+0xd8>)
   163b2:	491b      	ldr	r1, [pc, #108]	; (16420 <usart_register_callback+0xdc>)
   163b4:	9100      	str	r1, [sp, #0]
   163b6:	491f      	ldr	r1, [pc, #124]	; (16434 <usart_register_callback+0xf0>)
   163b8:	9101      	str	r1, [sp, #4]
   163ba:	1c10      	adds	r0, r2, #0
   163bc:	2101      	movs	r1, #1
   163be:	1c1a      	adds	r2, r3, #0
   163c0:	2380      	movs	r3, #128	; 0x80
   163c2:	4c19      	ldr	r4, [pc, #100]	; (16428 <usart_register_callback+0xe4>)
   163c4:	47a0      	blx	r4
   163c6:	e00c      	b.n	163e2 <usart_register_callback+0x9e>
   163c8:	68bb      	ldr	r3, [r7, #8]
   163ca:	2b00      	cmp	r3, #0
   163cc:	d109      	bne.n	163e2 <usart_register_callback+0x9e>
   163ce:	4917      	ldr	r1, [pc, #92]	; (1642c <usart_register_callback+0xe8>)
   163d0:	4a18      	ldr	r2, [pc, #96]	; (16434 <usart_register_callback+0xf0>)
   163d2:	4b12      	ldr	r3, [pc, #72]	; (1641c <usart_register_callback+0xd8>)
   163d4:	1c08      	adds	r0, r1, #0
   163d6:	1c11      	adds	r1, r2, #0
   163d8:	1c1a      	adds	r2, r3, #0
   163da:	2380      	movs	r3, #128	; 0x80
   163dc:	4c14      	ldr	r4, [pc, #80]	; (16430 <usart_register_callback+0xec>)
   163de:	47a0      	blx	r4
   163e0:	e7fe      	b.n	163e0 <usart_register_callback+0x9c>

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   163e2:	1dfb      	adds	r3, r7, #7
   163e4:	781a      	ldrb	r2, [r3, #0]
   163e6:	68fb      	ldr	r3, [r7, #12]
   163e8:	3202      	adds	r2, #2
   163ea:	0092      	lsls	r2, r2, #2
   163ec:	68b9      	ldr	r1, [r7, #8]
   163ee:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   163f0:	68fa      	ldr	r2, [r7, #12]
   163f2:	2320      	movs	r3, #32
   163f4:	5cd3      	ldrb	r3, [r2, r3]
   163f6:	b2da      	uxtb	r2, r3
   163f8:	1dfb      	adds	r3, r7, #7
   163fa:	781b      	ldrb	r3, [r3, #0]
   163fc:	2101      	movs	r1, #1
   163fe:	1c08      	adds	r0, r1, #0
   16400:	4098      	lsls	r0, r3
   16402:	1c03      	adds	r3, r0, #0
   16404:	b2db      	uxtb	r3, r3
   16406:	4313      	orrs	r3, r2
   16408:	b2db      	uxtb	r3, r3
   1640a:	b2d9      	uxtb	r1, r3
   1640c:	68fa      	ldr	r2, [r7, #12]
   1640e:	2320      	movs	r3, #32
   16410:	54d1      	strb	r1, [r2, r3]
}
   16412:	46bd      	mov	sp, r7
   16414:	b005      	add	sp, #20
   16416:	bd90      	pop	{r4, r7, pc}
   16418:	00016221 	.word	0x00016221
   1641c:	000268b4 	.word	0x000268b4
   16420:	000268ec 	.word	0x000268ec
   16424:	00026904 	.word	0x00026904
   16428:	000106e9 	.word	0x000106e9
   1642c:	0002690c 	.word	0x0002690c
   16430:	0001b62d 	.word	0x0001b62d
   16434:	0002693c 	.word	0x0002693c

00016438 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   16438:	b590      	push	{r4, r7, lr}
   1643a:	b087      	sub	sp, #28
   1643c:	af02      	add	r7, sp, #8
   1643e:	60f8      	str	r0, [r7, #12]
   16440:	60b9      	str	r1, [r7, #8]
   16442:	1dbb      	adds	r3, r7, #6
   16444:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
   16446:	4b34      	ldr	r3, [pc, #208]	; (16518 <usart_read_buffer_job+0xe0>)
   16448:	4798      	blx	r3
   1644a:	1c03      	adds	r3, r0, #0
   1644c:	2b00      	cmp	r3, #0
   1644e:	d011      	beq.n	16474 <usart_read_buffer_job+0x3c>
   16450:	68fb      	ldr	r3, [r7, #12]
   16452:	2b00      	cmp	r3, #0
   16454:	d119      	bne.n	1648a <usart_read_buffer_job+0x52>
   16456:	4b30      	ldr	r3, [pc, #192]	; (16518 <usart_read_buffer_job+0xe0>)
   16458:	4798      	blx	r3
   1645a:	1c01      	adds	r1, r0, #0
   1645c:	4a2f      	ldr	r2, [pc, #188]	; (1651c <usart_read_buffer_job+0xe4>)
   1645e:	2396      	movs	r3, #150	; 0x96
   16460:	005b      	lsls	r3, r3, #1
   16462:	482f      	ldr	r0, [pc, #188]	; (16520 <usart_read_buffer_job+0xe8>)
   16464:	9000      	str	r0, [sp, #0]
   16466:	482f      	ldr	r0, [pc, #188]	; (16524 <usart_read_buffer_job+0xec>)
   16468:	9001      	str	r0, [sp, #4]
   1646a:	1c08      	adds	r0, r1, #0
   1646c:	2101      	movs	r1, #1
   1646e:	4c2e      	ldr	r4, [pc, #184]	; (16528 <usart_read_buffer_job+0xf0>)
   16470:	47a0      	blx	r4
   16472:	e00a      	b.n	1648a <usart_read_buffer_job+0x52>
   16474:	68fb      	ldr	r3, [r7, #12]
   16476:	2b00      	cmp	r3, #0
   16478:	d107      	bne.n	1648a <usart_read_buffer_job+0x52>
   1647a:	482c      	ldr	r0, [pc, #176]	; (1652c <usart_read_buffer_job+0xf4>)
   1647c:	4929      	ldr	r1, [pc, #164]	; (16524 <usart_read_buffer_job+0xec>)
   1647e:	4a27      	ldr	r2, [pc, #156]	; (1651c <usart_read_buffer_job+0xe4>)
   16480:	2396      	movs	r3, #150	; 0x96
   16482:	005b      	lsls	r3, r3, #1
   16484:	4c2a      	ldr	r4, [pc, #168]	; (16530 <usart_read_buffer_job+0xf8>)
   16486:	47a0      	blx	r4
   16488:	e7fe      	b.n	16488 <usart_read_buffer_job+0x50>
	Assert(rx_data);
   1648a:	4b23      	ldr	r3, [pc, #140]	; (16518 <usart_read_buffer_job+0xe0>)
   1648c:	4798      	blx	r3
   1648e:	1c03      	adds	r3, r0, #0
   16490:	2b00      	cmp	r3, #0
   16492:	d011      	beq.n	164b8 <usart_read_buffer_job+0x80>
   16494:	68bb      	ldr	r3, [r7, #8]
   16496:	2b00      	cmp	r3, #0
   16498:	d119      	bne.n	164ce <usart_read_buffer_job+0x96>
   1649a:	4b1f      	ldr	r3, [pc, #124]	; (16518 <usart_read_buffer_job+0xe0>)
   1649c:	4798      	blx	r3
   1649e:	1c01      	adds	r1, r0, #0
   164a0:	4a1e      	ldr	r2, [pc, #120]	; (1651c <usart_read_buffer_job+0xe4>)
   164a2:	232e      	movs	r3, #46	; 0x2e
   164a4:	33ff      	adds	r3, #255	; 0xff
   164a6:	481e      	ldr	r0, [pc, #120]	; (16520 <usart_read_buffer_job+0xe8>)
   164a8:	9000      	str	r0, [sp, #0]
   164aa:	4822      	ldr	r0, [pc, #136]	; (16534 <usart_read_buffer_job+0xfc>)
   164ac:	9001      	str	r0, [sp, #4]
   164ae:	1c08      	adds	r0, r1, #0
   164b0:	2101      	movs	r1, #1
   164b2:	4c1d      	ldr	r4, [pc, #116]	; (16528 <usart_read_buffer_job+0xf0>)
   164b4:	47a0      	blx	r4
   164b6:	e00a      	b.n	164ce <usart_read_buffer_job+0x96>
   164b8:	68bb      	ldr	r3, [r7, #8]
   164ba:	2b00      	cmp	r3, #0
   164bc:	d107      	bne.n	164ce <usart_read_buffer_job+0x96>
   164be:	481b      	ldr	r0, [pc, #108]	; (1652c <usart_read_buffer_job+0xf4>)
   164c0:	491c      	ldr	r1, [pc, #112]	; (16534 <usart_read_buffer_job+0xfc>)
   164c2:	4a16      	ldr	r2, [pc, #88]	; (1651c <usart_read_buffer_job+0xe4>)
   164c4:	232e      	movs	r3, #46	; 0x2e
   164c6:	33ff      	adds	r3, #255	; 0xff
   164c8:	4c19      	ldr	r4, [pc, #100]	; (16530 <usart_read_buffer_job+0xf8>)
   164ca:	47a0      	blx	r4
   164cc:	e7fe      	b.n	164cc <usart_read_buffer_job+0x94>

	if (length == 0) {
   164ce:	1dbb      	adds	r3, r7, #6
   164d0:	881b      	ldrh	r3, [r3, #0]
   164d2:	2b00      	cmp	r3, #0
   164d4:	d101      	bne.n	164da <usart_read_buffer_job+0xa2>
		return STATUS_ERR_INVALID_ARG;
   164d6:	2317      	movs	r3, #23
   164d8:	e019      	b.n	1650e <usart_read_buffer_job+0xd6>
	}
	
	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   164da:	68fb      	ldr	r3, [r7, #12]
   164dc:	795b      	ldrb	r3, [r3, #5]
   164de:	2201      	movs	r2, #1
   164e0:	4053      	eors	r3, r2
   164e2:	b2db      	uxtb	r3, r3
   164e4:	2b00      	cmp	r3, #0
   164e6:	d001      	beq.n	164ec <usart_read_buffer_job+0xb4>
		return STATUS_ERR_DENIED;
   164e8:	231c      	movs	r3, #28
   164ea:	e010      	b.n	1650e <usart_read_buffer_job+0xd6>
	}

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   164ec:	68fb      	ldr	r3, [r7, #12]
   164ee:	69db      	ldr	r3, [r3, #28]
   164f0:	b29b      	uxth	r3, r3
   164f2:	2b00      	cmp	r3, #0
   164f4:	d001      	beq.n	164fa <usart_read_buffer_job+0xc2>
		return STATUS_BUSY;
   164f6:	2305      	movs	r3, #5
   164f8:	e009      	b.n	1650e <usart_read_buffer_job+0xd6>
	}

	/* Issue internal asynchronous read */
	_usart_read_buffer(module, rx_data, length);
   164fa:	68f9      	ldr	r1, [r7, #12]
   164fc:	68ba      	ldr	r2, [r7, #8]
   164fe:	1dbb      	adds	r3, r7, #6
   16500:	881b      	ldrh	r3, [r3, #0]
   16502:	1c08      	adds	r0, r1, #0
   16504:	1c11      	adds	r1, r2, #0
   16506:	1c1a      	adds	r2, r3, #0
   16508:	4b0b      	ldr	r3, [pc, #44]	; (16538 <usart_read_buffer_job+0x100>)
   1650a:	4798      	blx	r3

	return STATUS_OK;
   1650c:	2300      	movs	r3, #0
}
   1650e:	1c18      	adds	r0, r3, #0
   16510:	46bd      	mov	sp, r7
   16512:	b005      	add	sp, #20
   16514:	bd90      	pop	{r4, r7, pc}
   16516:	46c0      	nop			; (mov r8, r8)
   16518:	00016221 	.word	0x00016221
   1651c:	000268b4 	.word	0x000268b4
   16520:	000268ec 	.word	0x000268ec
   16524:	00026904 	.word	0x00026904
   16528:	000106e9 	.word	0x000106e9
   1652c:	0002690c 	.word	0x0002690c
   16530:	0001b62d 	.word	0x0001b62d
   16534:	0002694c 	.word	0x0002694c
   16538:	00016259 	.word	0x00016259

0001653c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   1653c:	b580      	push	{r7, lr}
   1653e:	b088      	sub	sp, #32
   16540:	af00      	add	r7, sp, #0
   16542:	1c02      	adds	r2, r0, #0
   16544:	1dfb      	adds	r3, r7, #7
   16546:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   16548:	1dfb      	adds	r3, r7, #7
   1654a:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
   1654c:	4b97      	ldr	r3, [pc, #604]	; (167ac <_usart_interrupt_handler+0x270>)
   1654e:	0092      	lsls	r2, r2, #2
   16550:	58d3      	ldr	r3, [r2, r3]
   16552:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   16554:	69bb      	ldr	r3, [r7, #24]
   16556:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
   16558:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   1655a:	69bb      	ldr	r3, [r7, #24]
   1655c:	1c18      	adds	r0, r3, #0
   1655e:	4b94      	ldr	r3, [pc, #592]	; (167b0 <_usart_interrupt_handler+0x274>)
   16560:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   16562:	697b      	ldr	r3, [r7, #20]
   16564:	68db      	ldr	r3, [r3, #12]
   16566:	021b      	lsls	r3, r3, #8
   16568:	0e1b      	lsrs	r3, r3, #24
   1656a:	b2da      	uxtb	r2, r3
   1656c:	1c3b      	adds	r3, r7, #0
   1656e:	3312      	adds	r3, #18
   16570:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask
   16572:	69ba      	ldr	r2, [r7, #24]
   16574:	2320      	movs	r3, #32
   16576:	5cd3      	ldrb	r3, [r2, r3]
			&module->callback_enable_mask;
   16578:	69b9      	ldr	r1, [r7, #24]
   1657a:	2221      	movs	r2, #33	; 0x21
   1657c:	5c8a      	ldrb	r2, [r1, r2]
	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	callback_status = module->callback_reg_mask
   1657e:	4013      	ands	r3, r2
   16580:	b2da      	uxtb	r2, r3
   16582:	1c3b      	adds	r3, r7, #0
   16584:	3310      	adds	r3, #16
   16586:	801a      	strh	r2, [r3, #0]
			&module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   16588:	1c3b      	adds	r3, r7, #0
   1658a:	3312      	adds	r3, #18
   1658c:	881a      	ldrh	r2, [r3, #0]
   1658e:	2301      	movs	r3, #1
   16590:	4013      	ands	r3, r2
   16592:	d041      	beq.n	16618 <_usart_interrupt_handler+0xdc>
		if (module->remaining_tx_buffer_length) {
   16594:	69bb      	ldr	r3, [r7, #24]
   16596:	69db      	ldr	r3, [r3, #28]
   16598:	0c1b      	lsrs	r3, r3, #16
   1659a:	b29b      	uxth	r3, r3
   1659c:	2b00      	cmp	r3, #0
   1659e:	d038      	beq.n	16612 <_usart_interrupt_handler+0xd6>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   165a0:	69bb      	ldr	r3, [r7, #24]
   165a2:	699b      	ldr	r3, [r3, #24]
   165a4:	781b      	ldrb	r3, [r3, #0]
   165a6:	b2da      	uxtb	r2, r3
   165a8:	1c3b      	adds	r3, r7, #0
   165aa:	331e      	adds	r3, #30
   165ac:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   165ae:	69bb      	ldr	r3, [r7, #24]
   165b0:	699b      	ldr	r3, [r3, #24]
   165b2:	1c5a      	adds	r2, r3, #1
   165b4:	69bb      	ldr	r3, [r7, #24]
   165b6:	619a      	str	r2, [r3, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   165b8:	69bb      	ldr	r3, [r7, #24]
   165ba:	791b      	ldrb	r3, [r3, #4]
   165bc:	2b01      	cmp	r3, #1
   165be:	d10d      	bne.n	165dc <_usart_interrupt_handler+0xa0>
				data_to_send = (*(module->tx_buffer_ptr) << 8);
   165c0:	69bb      	ldr	r3, [r7, #24]
   165c2:	699b      	ldr	r3, [r3, #24]
   165c4:	781b      	ldrb	r3, [r3, #0]
   165c6:	b2db      	uxtb	r3, r3
   165c8:	1c1a      	adds	r2, r3, #0
   165ca:	1c3b      	adds	r3, r7, #0
   165cc:	331e      	adds	r3, #30
   165ce:	0212      	lsls	r2, r2, #8
   165d0:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   165d2:	69bb      	ldr	r3, [r7, #24]
   165d4:	699b      	ldr	r3, [r3, #24]
   165d6:	1c5a      	adds	r2, r3, #1
   165d8:	69bb      	ldr	r3, [r7, #24]
   165da:	619a      	str	r2, [r3, #24]
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   165dc:	1c3b      	adds	r3, r7, #0
   165de:	331e      	adds	r3, #30
   165e0:	881b      	ldrh	r3, [r3, #0]
   165e2:	05db      	lsls	r3, r3, #23
   165e4:	0ddb      	lsrs	r3, r3, #23
   165e6:	b29a      	uxth	r2, r3
   165e8:	697b      	ldr	r3, [r7, #20]
   165ea:	831a      	strh	r2, [r3, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
   165ec:	69bb      	ldr	r3, [r7, #24]
   165ee:	69db      	ldr	r3, [r3, #28]
   165f0:	0c1b      	lsrs	r3, r3, #16
   165f2:	b29b      	uxth	r3, r3
   165f4:	3b01      	subs	r3, #1
   165f6:	b29b      	uxth	r3, r3
   165f8:	69ba      	ldr	r2, [r7, #24]
   165fa:	1c19      	adds	r1, r3, #0
   165fc:	83d1      	strh	r1, [r2, #30]
   165fe:	2b00      	cmp	r3, #0
   16600:	d106      	bne.n	16610 <_usart_interrupt_handler+0xd4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   16602:	697b      	ldr	r3, [r7, #20]
   16604:	2201      	movs	r2, #1
   16606:	731a      	strb	r2, [r3, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   16608:	697b      	ldr	r3, [r7, #20]
   1660a:	2202      	movs	r2, #2
   1660c:	735a      	strb	r2, [r3, #13]
   1660e:	e003      	b.n	16618 <_usart_interrupt_handler+0xdc>
   16610:	e002      	b.n	16618 <_usart_interrupt_handler+0xdc>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   16612:	697b      	ldr	r3, [r7, #20]
   16614:	2201      	movs	r2, #1
   16616:	731a      	strb	r2, [r3, #12]
		}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   16618:	1c3b      	adds	r3, r7, #0
   1661a:	3312      	adds	r3, #18
   1661c:	881a      	ldrh	r2, [r3, #0]
   1661e:	2302      	movs	r3, #2
   16620:	4013      	ands	r3, r2
   16622:	d011      	beq.n	16648 <_usart_interrupt_handler+0x10c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   16624:	697b      	ldr	r3, [r7, #20]
   16626:	2202      	movs	r2, #2
   16628:	731a      	strb	r2, [r3, #12]
		module->tx_status = STATUS_OK;
   1662a:	69ba      	ldr	r2, [r7, #24]
   1662c:	2323      	movs	r3, #35	; 0x23
   1662e:	2100      	movs	r1, #0
   16630:	54d1      	strb	r1, [r2, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   16632:	1c3b      	adds	r3, r7, #0
   16634:	3310      	adds	r3, #16
   16636:	881a      	ldrh	r2, [r3, #0]
   16638:	2301      	movs	r3, #1
   1663a:	4013      	ands	r3, r2
   1663c:	d004      	beq.n	16648 <_usart_interrupt_handler+0x10c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   1663e:	69bb      	ldr	r3, [r7, #24]
   16640:	689b      	ldr	r3, [r3, #8]
   16642:	69ba      	ldr	r2, [r7, #24]
   16644:	1c10      	adds	r0, r2, #0
   16646:	4798      	blx	r3
		}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   16648:	1c3b      	adds	r3, r7, #0
   1664a:	3312      	adds	r3, #18
   1664c:	881a      	ldrh	r2, [r3, #0]
   1664e:	2304      	movs	r3, #4
   16650:	4013      	ands	r3, r2
   16652:	d100      	bne.n	16656 <_usart_interrupt_handler+0x11a>
   16654:	e0a6      	b.n	167a4 <_usart_interrupt_handler+0x268>

		if (module->remaining_rx_buffer_length) {
   16656:	69bb      	ldr	r3, [r7, #24]
   16658:	69db      	ldr	r3, [r3, #28]
   1665a:	b29b      	uxth	r3, r3
   1665c:	2b00      	cmp	r3, #0
   1665e:	d100      	bne.n	16662 <_usart_interrupt_handler+0x126>
   16660:	e09d      	b.n	1679e <_usart_interrupt_handler+0x262>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   16662:	697b      	ldr	r3, [r7, #20]
   16664:	691b      	ldr	r3, [r3, #16]
   16666:	b29b      	uxth	r3, r3
   16668:	b2d9      	uxtb	r1, r3
   1666a:	1c3b      	adds	r3, r7, #0
   1666c:	330f      	adds	r3, #15
   1666e:	2207      	movs	r2, #7
   16670:	400a      	ands	r2, r1
   16672:	701a      	strb	r2, [r3, #0]

			/* Check if an error has occurred during the receiving */
			if (error_code) {
   16674:	1c3b      	adds	r3, r7, #0
   16676:	330f      	adds	r3, #15
   16678:	781b      	ldrb	r3, [r3, #0]
   1667a:	2b00      	cmp	r3, #0
   1667c:	d043      	beq.n	16706 <_usart_interrupt_handler+0x1ca>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   1667e:	1c3b      	adds	r3, r7, #0
   16680:	330f      	adds	r3, #15
   16682:	781a      	ldrb	r2, [r3, #0]
   16684:	2302      	movs	r3, #2
   16686:	4013      	ands	r3, r2
   16688:	d00c      	beq.n	166a4 <_usart_interrupt_handler+0x168>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   1668a:	69ba      	ldr	r2, [r7, #24]
   1668c:	2322      	movs	r3, #34	; 0x22
   1668e:	211a      	movs	r1, #26
   16690:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
   16692:	697b      	ldr	r3, [r7, #20]
   16694:	691b      	ldr	r3, [r3, #16]
   16696:	b29b      	uxth	r3, r3
   16698:	2202      	movs	r2, #2
   1669a:	4313      	orrs	r3, r2
   1669c:	b29a      	uxth	r2, r3
   1669e:	697b      	ldr	r3, [r7, #20]
   166a0:	821a      	strh	r2, [r3, #16]
   166a2:	e024      	b.n	166ee <_usart_interrupt_handler+0x1b2>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   166a4:	1c3b      	adds	r3, r7, #0
   166a6:	330f      	adds	r3, #15
   166a8:	781a      	ldrb	r2, [r3, #0]
   166aa:	2304      	movs	r3, #4
   166ac:	4013      	ands	r3, r2
   166ae:	d00c      	beq.n	166ca <_usart_interrupt_handler+0x18e>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   166b0:	69ba      	ldr	r2, [r7, #24]
   166b2:	2322      	movs	r3, #34	; 0x22
   166b4:	211e      	movs	r1, #30
   166b6:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
   166b8:	697b      	ldr	r3, [r7, #20]
   166ba:	691b      	ldr	r3, [r3, #16]
   166bc:	b29b      	uxth	r3, r3
   166be:	2204      	movs	r2, #4
   166c0:	4313      	orrs	r3, r2
   166c2:	b29a      	uxth	r2, r3
   166c4:	697b      	ldr	r3, [r7, #20]
   166c6:	821a      	strh	r2, [r3, #16]
   166c8:	e011      	b.n	166ee <_usart_interrupt_handler+0x1b2>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   166ca:	1c3b      	adds	r3, r7, #0
   166cc:	330f      	adds	r3, #15
   166ce:	781a      	ldrb	r2, [r3, #0]
   166d0:	2301      	movs	r3, #1
   166d2:	4013      	ands	r3, r2
   166d4:	d00b      	beq.n	166ee <_usart_interrupt_handler+0x1b2>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   166d6:	69ba      	ldr	r2, [r7, #24]
   166d8:	2322      	movs	r3, #34	; 0x22
   166da:	2113      	movs	r1, #19
   166dc:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
   166de:	697b      	ldr	r3, [r7, #20]
   166e0:	691b      	ldr	r3, [r3, #16]
   166e2:	b29b      	uxth	r3, r3
   166e4:	2201      	movs	r2, #1
   166e6:	4313      	orrs	r3, r2
   166e8:	b29a      	uxth	r2, r3
   166ea:	697b      	ldr	r3, [r7, #20]
   166ec:	821a      	strh	r2, [r3, #16]
				}

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   166ee:	1c3b      	adds	r3, r7, #0
   166f0:	3310      	adds	r3, #16
   166f2:	881a      	ldrh	r2, [r3, #0]
   166f4:	2304      	movs	r3, #4
   166f6:	4013      	ands	r3, r2
					module->rx_status = STATUS_ERR_BAD_DATA;
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
				}

				/* Run callback if registered and enabled */
				if (callback_status
   166f8:	d054      	beq.n	167a4 <_usart_interrupt_handler+0x268>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   166fa:	69bb      	ldr	r3, [r7, #24]
   166fc:	691b      	ldr	r3, [r3, #16]
   166fe:	69ba      	ldr	r2, [r7, #24]
   16700:	1c10      	adds	r0, r2, #0
   16702:	4798      	blx	r3
   16704:	e04e      	b.n	167a4 <_usart_interrupt_handler+0x268>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   16706:	697b      	ldr	r3, [r7, #20]
   16708:	699b      	ldr	r3, [r3, #24]
   1670a:	b29a      	uxth	r2, r3
   1670c:	1c3b      	adds	r3, r7, #0
   1670e:	330c      	adds	r3, #12
   16710:	05d2      	lsls	r2, r2, #23
   16712:	0dd2      	lsrs	r2, r2, #23
   16714:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   16716:	69bb      	ldr	r3, [r7, #24]
   16718:	695b      	ldr	r3, [r3, #20]
   1671a:	1c3a      	adds	r2, r7, #0
   1671c:	320c      	adds	r2, #12
   1671e:	8812      	ldrh	r2, [r2, #0]
   16720:	b2d2      	uxtb	r2, r2
   16722:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   16724:	69bb      	ldr	r3, [r7, #24]
   16726:	695b      	ldr	r3, [r3, #20]
   16728:	1c5a      	adds	r2, r3, #1
   1672a:	69bb      	ldr	r3, [r7, #24]
   1672c:	615a      	str	r2, [r3, #20]

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   1672e:	69bb      	ldr	r3, [r7, #24]
   16730:	791b      	ldrb	r3, [r3, #4]
   16732:	2b01      	cmp	r3, #1
   16734:	d10d      	bne.n	16752 <_usart_interrupt_handler+0x216>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   16736:	69bb      	ldr	r3, [r7, #24]
   16738:	695b      	ldr	r3, [r3, #20]
   1673a:	1c3a      	adds	r2, r7, #0
   1673c:	320c      	adds	r2, #12
   1673e:	8812      	ldrh	r2, [r2, #0]
   16740:	0a12      	lsrs	r2, r2, #8
   16742:	b292      	uxth	r2, r2
   16744:	b2d2      	uxtb	r2, r2
   16746:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   16748:	69bb      	ldr	r3, [r7, #24]
   1674a:	695b      	ldr	r3, [r3, #20]
   1674c:	1c5a      	adds	r2, r3, #1
   1674e:	69bb      	ldr	r3, [r7, #24]
   16750:	615a      	str	r2, [r3, #20]
				}

				/* Check if the last character have been received */
				//if(--(module->remaining_rx_buffer_length) == 0) {
				if ((received_data == 0x0A) || (--(module->remaining_rx_buffer_length) == 0)) {
   16752:	1c3b      	adds	r3, r7, #0
   16754:	330c      	adds	r3, #12
   16756:	881b      	ldrh	r3, [r3, #0]
   16758:	2b0a      	cmp	r3, #10
   1675a:	d009      	beq.n	16770 <_usart_interrupt_handler+0x234>
   1675c:	69bb      	ldr	r3, [r7, #24]
   1675e:	69db      	ldr	r3, [r3, #28]
   16760:	b29b      	uxth	r3, r3
   16762:	3b01      	subs	r3, #1
   16764:	b29b      	uxth	r3, r3
   16766:	69ba      	ldr	r2, [r7, #24]
   16768:	1c19      	adds	r1, r3, #0
   1676a:	8391      	strh	r1, [r2, #28]
   1676c:	2b00      	cmp	r3, #0
   1676e:	d115      	bne.n	1679c <_usart_interrupt_handler+0x260>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					module->remaining_rx_buffer_length = 0; //RER
   16770:	69bb      	ldr	r3, [r7, #24]
   16772:	2200      	movs	r2, #0
   16774:	839a      	strh	r2, [r3, #28]
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   16776:	697b      	ldr	r3, [r7, #20]
   16778:	2204      	movs	r2, #4
   1677a:	731a      	strb	r2, [r3, #12]
					module->rx_status = STATUS_OK;
   1677c:	69ba      	ldr	r2, [r7, #24]
   1677e:	2322      	movs	r3, #34	; 0x22
   16780:	2100      	movs	r1, #0
   16782:	54d1      	strb	r1, [r2, r3]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   16784:	1c3b      	adds	r3, r7, #0
   16786:	3310      	adds	r3, #16
   16788:	881a      	ldrh	r2, [r3, #0]
   1678a:	2302      	movs	r3, #2
   1678c:	4013      	ands	r3, r2
					module->remaining_rx_buffer_length = 0; //RER
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
   1678e:	d005      	beq.n	1679c <_usart_interrupt_handler+0x260>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   16790:	69bb      	ldr	r3, [r7, #24]
   16792:	68db      	ldr	r3, [r3, #12]
   16794:	69ba      	ldr	r2, [r7, #24]
   16796:	1c10      	adds	r0, r2, #0
   16798:	4798      	blx	r3
   1679a:	e003      	b.n	167a4 <_usart_interrupt_handler+0x268>
   1679c:	e002      	b.n	167a4 <_usart_interrupt_handler+0x268>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   1679e:	697b      	ldr	r3, [r7, #20]
   167a0:	2204      	movs	r2, #4
   167a2:	731a      	strb	r2, [r3, #12]
		}
	}
}
   167a4:	46bd      	mov	sp, r7
   167a6:	b008      	add	sp, #32
   167a8:	bd80      	pop	{r7, pc}
   167aa:	46c0      	nop			; (mov r8, r8)
   167ac:	20001200 	.word	0x20001200
   167b0:	00016235 	.word	0x00016235

000167b4 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
   167b4:	b580      	push	{r7, lr}
   167b6:	af00      	add	r7, sp, #0
	return test_case_ptr;
   167b8:	4b02      	ldr	r3, [pc, #8]	; (167c4 <test_get_case+0x10>)
   167ba:	681b      	ldr	r3, [r3, #0]
}
   167bc:	1c18      	adds	r0, r3, #0
   167be:	46bd      	mov	sp, r7
   167c0:	bd80      	pop	{r7, pc}
   167c2:	46c0      	nop			; (mov r8, r8)
   167c4:	2000041c 	.word	0x2000041c

000167c8 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
   167c8:	b590      	push	{r4, r7, lr}
   167ca:	b085      	sub	sp, #20
   167cc:	af02      	add	r7, sp, #8
   167ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
   167d0:	4b1a      	ldr	r3, [pc, #104]	; (1683c <system_gclk_gen_get_config_defaults+0x74>)
   167d2:	4798      	blx	r3
   167d4:	1c03      	adds	r3, r0, #0
   167d6:	2b00      	cmp	r3, #0
   167d8:	d011      	beq.n	167fe <system_gclk_gen_get_config_defaults+0x36>
   167da:	687b      	ldr	r3, [r7, #4]
   167dc:	2b00      	cmp	r3, #0
   167de:	d11b      	bne.n	16818 <system_gclk_gen_get_config_defaults+0x50>
   167e0:	4b16      	ldr	r3, [pc, #88]	; (1683c <system_gclk_gen_get_config_defaults+0x74>)
   167e2:	4798      	blx	r3
   167e4:	1c02      	adds	r2, r0, #0
   167e6:	4b16      	ldr	r3, [pc, #88]	; (16840 <system_gclk_gen_get_config_defaults+0x78>)
   167e8:	4916      	ldr	r1, [pc, #88]	; (16844 <system_gclk_gen_get_config_defaults+0x7c>)
   167ea:	9100      	str	r1, [sp, #0]
   167ec:	4916      	ldr	r1, [pc, #88]	; (16848 <system_gclk_gen_get_config_defaults+0x80>)
   167ee:	9101      	str	r1, [sp, #4]
   167f0:	1c10      	adds	r0, r2, #0
   167f2:	2101      	movs	r1, #1
   167f4:	1c1a      	adds	r2, r3, #0
   167f6:	23e5      	movs	r3, #229	; 0xe5
   167f8:	4c14      	ldr	r4, [pc, #80]	; (1684c <system_gclk_gen_get_config_defaults+0x84>)
   167fa:	47a0      	blx	r4
   167fc:	e00c      	b.n	16818 <system_gclk_gen_get_config_defaults+0x50>
   167fe:	687b      	ldr	r3, [r7, #4]
   16800:	2b00      	cmp	r3, #0
   16802:	d109      	bne.n	16818 <system_gclk_gen_get_config_defaults+0x50>
   16804:	4912      	ldr	r1, [pc, #72]	; (16850 <system_gclk_gen_get_config_defaults+0x88>)
   16806:	4a10      	ldr	r2, [pc, #64]	; (16848 <system_gclk_gen_get_config_defaults+0x80>)
   16808:	4b0d      	ldr	r3, [pc, #52]	; (16840 <system_gclk_gen_get_config_defaults+0x78>)
   1680a:	1c08      	adds	r0, r1, #0
   1680c:	1c11      	adds	r1, r2, #0
   1680e:	1c1a      	adds	r2, r3, #0
   16810:	23e5      	movs	r3, #229	; 0xe5
   16812:	4c10      	ldr	r4, [pc, #64]	; (16854 <system_gclk_gen_get_config_defaults+0x8c>)
   16814:	47a0      	blx	r4
   16816:	e7fe      	b.n	16816 <system_gclk_gen_get_config_defaults+0x4e>

	/* Default configuration values */
	config->division_factor    = 1;
   16818:	687b      	ldr	r3, [r7, #4]
   1681a:	2201      	movs	r2, #1
   1681c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   1681e:	687b      	ldr	r3, [r7, #4]
   16820:	2200      	movs	r2, #0
   16822:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   16824:	687b      	ldr	r3, [r7, #4]
   16826:	2206      	movs	r2, #6
   16828:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   1682a:	687b      	ldr	r3, [r7, #4]
   1682c:	2200      	movs	r2, #0
   1682e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   16830:	687b      	ldr	r3, [r7, #4]
   16832:	2200      	movs	r2, #0
   16834:	725a      	strb	r2, [r3, #9]
}
   16836:	46bd      	mov	sp, r7
   16838:	b003      	add	sp, #12
   1683a:	bd90      	pop	{r4, r7, pc}
   1683c:	000167b5 	.word	0x000167b5
   16840:	00026954 	.word	0x00026954
   16844:	00026980 	.word	0x00026980
   16848:	00026998 	.word	0x00026998
   1684c:	000106e9 	.word	0x000106e9
   16850:	000269a0 	.word	0x000269a0
   16854:	0001b62d 	.word	0x0001b62d

00016858 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   16858:	b590      	push	{r4, r7, lr}
   1685a:	b085      	sub	sp, #20
   1685c:	af02      	add	r7, sp, #8
   1685e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
   16860:	4b15      	ldr	r3, [pc, #84]	; (168b8 <system_gclk_chan_get_config_defaults+0x60>)
   16862:	4798      	blx	r3
   16864:	1c03      	adds	r3, r0, #0
   16866:	2b00      	cmp	r3, #0
   16868:	d011      	beq.n	1688e <system_gclk_chan_get_config_defaults+0x36>
   1686a:	687b      	ldr	r3, [r7, #4]
   1686c:	2b00      	cmp	r3, #0
   1686e:	d119      	bne.n	168a4 <system_gclk_chan_get_config_defaults+0x4c>
   16870:	4b11      	ldr	r3, [pc, #68]	; (168b8 <system_gclk_chan_get_config_defaults+0x60>)
   16872:	4798      	blx	r3
   16874:	1c01      	adds	r1, r0, #0
   16876:	4a11      	ldr	r2, [pc, #68]	; (168bc <system_gclk_chan_get_config_defaults+0x64>)
   16878:	2314      	movs	r3, #20
   1687a:	33ff      	adds	r3, #255	; 0xff
   1687c:	4810      	ldr	r0, [pc, #64]	; (168c0 <system_gclk_chan_get_config_defaults+0x68>)
   1687e:	9000      	str	r0, [sp, #0]
   16880:	4810      	ldr	r0, [pc, #64]	; (168c4 <system_gclk_chan_get_config_defaults+0x6c>)
   16882:	9001      	str	r0, [sp, #4]
   16884:	1c08      	adds	r0, r1, #0
   16886:	2101      	movs	r1, #1
   16888:	4c0f      	ldr	r4, [pc, #60]	; (168c8 <system_gclk_chan_get_config_defaults+0x70>)
   1688a:	47a0      	blx	r4
   1688c:	e00a      	b.n	168a4 <system_gclk_chan_get_config_defaults+0x4c>
   1688e:	687b      	ldr	r3, [r7, #4]
   16890:	2b00      	cmp	r3, #0
   16892:	d107      	bne.n	168a4 <system_gclk_chan_get_config_defaults+0x4c>
   16894:	480d      	ldr	r0, [pc, #52]	; (168cc <system_gclk_chan_get_config_defaults+0x74>)
   16896:	490b      	ldr	r1, [pc, #44]	; (168c4 <system_gclk_chan_get_config_defaults+0x6c>)
   16898:	4a08      	ldr	r2, [pc, #32]	; (168bc <system_gclk_chan_get_config_defaults+0x64>)
   1689a:	2314      	movs	r3, #20
   1689c:	33ff      	adds	r3, #255	; 0xff
   1689e:	4c0c      	ldr	r4, [pc, #48]	; (168d0 <system_gclk_chan_get_config_defaults+0x78>)
   168a0:	47a0      	blx	r4
   168a2:	e7fe      	b.n	168a2 <system_gclk_chan_get_config_defaults+0x4a>

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   168a4:	687b      	ldr	r3, [r7, #4]
   168a6:	2200      	movs	r2, #0
   168a8:	701a      	strb	r2, [r3, #0]
	config->write_lock       = false;
   168aa:	687b      	ldr	r3, [r7, #4]
   168ac:	2200      	movs	r2, #0
   168ae:	705a      	strb	r2, [r3, #1]
}
   168b0:	46bd      	mov	sp, r7
   168b2:	b003      	add	sp, #12
   168b4:	bd90      	pop	{r4, r7, pc}
   168b6:	46c0      	nop			; (mov r8, r8)
   168b8:	000167b5 	.word	0x000167b5
   168bc:	00026954 	.word	0x00026954
   168c0:	00026980 	.word	0x00026980
   168c4:	00026998 	.word	0x00026998
   168c8:	000106e9 	.word	0x000106e9
   168cc:	000269a0 	.word	0x000269a0
   168d0:	0001b62d 	.word	0x0001b62d

000168d4 <system_clock_source_xosc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
   168d4:	b590      	push	{r4, r7, lr}
   168d6:	b085      	sub	sp, #20
   168d8:	af02      	add	r7, sp, #8
   168da:	6078      	str	r0, [r7, #4]
	Assert(config);
   168dc:	4b1d      	ldr	r3, [pc, #116]	; (16954 <system_clock_source_xosc32k_get_config_defaults+0x80>)
   168de:	4798      	blx	r3
   168e0:	1c03      	adds	r3, r0, #0
   168e2:	2b00      	cmp	r3, #0
   168e4:	d010      	beq.n	16908 <system_clock_source_xosc32k_get_config_defaults+0x34>
   168e6:	687b      	ldr	r3, [r7, #4]
   168e8:	2b00      	cmp	r3, #0
   168ea:	d117      	bne.n	1691c <system_clock_source_xosc32k_get_config_defaults+0x48>
   168ec:	4b19      	ldr	r3, [pc, #100]	; (16954 <system_clock_source_xosc32k_get_config_defaults+0x80>)
   168ee:	4798      	blx	r3
   168f0:	1c01      	adds	r1, r0, #0
   168f2:	4a19      	ldr	r2, [pc, #100]	; (16958 <system_clock_source_xosc32k_get_config_defaults+0x84>)
   168f4:	4b19      	ldr	r3, [pc, #100]	; (1695c <system_clock_source_xosc32k_get_config_defaults+0x88>)
   168f6:	481a      	ldr	r0, [pc, #104]	; (16960 <system_clock_source_xosc32k_get_config_defaults+0x8c>)
   168f8:	9000      	str	r0, [sp, #0]
   168fa:	481a      	ldr	r0, [pc, #104]	; (16964 <system_clock_source_xosc32k_get_config_defaults+0x90>)
   168fc:	9001      	str	r0, [sp, #4]
   168fe:	1c08      	adds	r0, r1, #0
   16900:	2101      	movs	r1, #1
   16902:	4c19      	ldr	r4, [pc, #100]	; (16968 <system_clock_source_xosc32k_get_config_defaults+0x94>)
   16904:	47a0      	blx	r4
   16906:	e009      	b.n	1691c <system_clock_source_xosc32k_get_config_defaults+0x48>
   16908:	687b      	ldr	r3, [r7, #4]
   1690a:	2b00      	cmp	r3, #0
   1690c:	d106      	bne.n	1691c <system_clock_source_xosc32k_get_config_defaults+0x48>
   1690e:	4817      	ldr	r0, [pc, #92]	; (1696c <system_clock_source_xosc32k_get_config_defaults+0x98>)
   16910:	4914      	ldr	r1, [pc, #80]	; (16964 <system_clock_source_xosc32k_get_config_defaults+0x90>)
   16912:	4a11      	ldr	r2, [pc, #68]	; (16958 <system_clock_source_xosc32k_get_config_defaults+0x84>)
   16914:	4b11      	ldr	r3, [pc, #68]	; (1695c <system_clock_source_xosc32k_get_config_defaults+0x88>)
   16916:	4c16      	ldr	r4, [pc, #88]	; (16970 <system_clock_source_xosc32k_get_config_defaults+0x9c>)
   16918:	47a0      	blx	r4
   1691a:	e7fe      	b.n	1691a <system_clock_source_xosc32k_get_config_defaults+0x46>

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   1691c:	687b      	ldr	r3, [r7, #4]
   1691e:	2200      	movs	r2, #0
   16920:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
   16922:	687b      	ldr	r3, [r7, #4]
   16924:	2204      	movs	r2, #4
   16926:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = true;
   16928:	687b      	ldr	r3, [r7, #4]
   1692a:	2201      	movs	r2, #1
   1692c:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
   1692e:	687b      	ldr	r3, [r7, #4]
   16930:	2280      	movs	r2, #128	; 0x80
   16932:	0212      	lsls	r2, r2, #8
   16934:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
   16936:	687b      	ldr	r3, [r7, #4]
   16938:	2200      	movs	r2, #0
   1693a:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
   1693c:	687b      	ldr	r3, [r7, #4]
   1693e:	2201      	movs	r2, #1
   16940:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
   16942:	687b      	ldr	r3, [r7, #4]
   16944:	2200      	movs	r2, #0
   16946:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
   16948:	687b      	ldr	r3, [r7, #4]
   1694a:	2201      	movs	r2, #1
   1694c:	735a      	strb	r2, [r3, #13]
}
   1694e:	46bd      	mov	sp, r7
   16950:	b003      	add	sp, #12
   16952:	bd90      	pop	{r4, r7, pc}
   16954:	000167b5 	.word	0x000167b5
   16958:	000269c4 	.word	0x000269c4
   1695c:	00000296 	.word	0x00000296
   16960:	00026980 	.word	0x00026980
   16964:	00026998 	.word	0x00026998
   16968:	000106e9 	.word	0x000106e9
   1696c:	000269a0 	.word	0x000269a0
   16970:	0001b62d 	.word	0x0001b62d

00016974 <system_clock_source_osc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
   16974:	b590      	push	{r4, r7, lr}
   16976:	b085      	sub	sp, #20
   16978:	af02      	add	r7, sp, #8
   1697a:	6078      	str	r0, [r7, #4]
	Assert(config);
   1697c:	4b17      	ldr	r3, [pc, #92]	; (169dc <system_clock_source_osc32k_get_config_defaults+0x68>)
   1697e:	4798      	blx	r3
   16980:	1c03      	adds	r3, r0, #0
   16982:	2b00      	cmp	r3, #0
   16984:	d010      	beq.n	169a8 <system_clock_source_osc32k_get_config_defaults+0x34>
   16986:	687b      	ldr	r3, [r7, #4]
   16988:	2b00      	cmp	r3, #0
   1698a:	d117      	bne.n	169bc <system_clock_source_osc32k_get_config_defaults+0x48>
   1698c:	4b13      	ldr	r3, [pc, #76]	; (169dc <system_clock_source_osc32k_get_config_defaults+0x68>)
   1698e:	4798      	blx	r3
   16990:	1c01      	adds	r1, r0, #0
   16992:	4a13      	ldr	r2, [pc, #76]	; (169e0 <system_clock_source_osc32k_get_config_defaults+0x6c>)
   16994:	4b13      	ldr	r3, [pc, #76]	; (169e4 <system_clock_source_osc32k_get_config_defaults+0x70>)
   16996:	4814      	ldr	r0, [pc, #80]	; (169e8 <system_clock_source_osc32k_get_config_defaults+0x74>)
   16998:	9000      	str	r0, [sp, #0]
   1699a:	4814      	ldr	r0, [pc, #80]	; (169ec <system_clock_source_osc32k_get_config_defaults+0x78>)
   1699c:	9001      	str	r0, [sp, #4]
   1699e:	1c08      	adds	r0, r1, #0
   169a0:	2101      	movs	r1, #1
   169a2:	4c13      	ldr	r4, [pc, #76]	; (169f0 <system_clock_source_osc32k_get_config_defaults+0x7c>)
   169a4:	47a0      	blx	r4
   169a6:	e009      	b.n	169bc <system_clock_source_osc32k_get_config_defaults+0x48>
   169a8:	687b      	ldr	r3, [r7, #4]
   169aa:	2b00      	cmp	r3, #0
   169ac:	d106      	bne.n	169bc <system_clock_source_osc32k_get_config_defaults+0x48>
   169ae:	4811      	ldr	r0, [pc, #68]	; (169f4 <system_clock_source_osc32k_get_config_defaults+0x80>)
   169b0:	490e      	ldr	r1, [pc, #56]	; (169ec <system_clock_source_osc32k_get_config_defaults+0x78>)
   169b2:	4a0b      	ldr	r2, [pc, #44]	; (169e0 <system_clock_source_osc32k_get_config_defaults+0x6c>)
   169b4:	4b0b      	ldr	r3, [pc, #44]	; (169e4 <system_clock_source_osc32k_get_config_defaults+0x70>)
   169b6:	4c10      	ldr	r4, [pc, #64]	; (169f8 <system_clock_source_osc32k_get_config_defaults+0x84>)
   169b8:	47a0      	blx	r4
   169ba:	e7fe      	b.n	169ba <system_clock_source_osc32k_get_config_defaults+0x46>

	config->enable_1khz_output  = true;
   169bc:	687b      	ldr	r3, [r7, #4]
   169be:	2201      	movs	r2, #1
   169c0:	705a      	strb	r2, [r3, #1]
	config->enable_32khz_output = true;
   169c2:	687b      	ldr	r3, [r7, #4]
   169c4:	2201      	movs	r2, #1
   169c6:	709a      	strb	r2, [r3, #2]
	config->run_in_standby      = false;
   169c8:	687b      	ldr	r3, [r7, #4]
   169ca:	2200      	movs	r2, #0
   169cc:	70da      	strb	r2, [r3, #3]
	config->on_demand           = true;
   169ce:	687b      	ldr	r3, [r7, #4]
   169d0:	2201      	movs	r2, #1
   169d2:	711a      	strb	r2, [r3, #4]
}
   169d4:	46bd      	mov	sp, r7
   169d6:	b003      	add	sp, #12
   169d8:	bd90      	pop	{r4, r7, pc}
   169da:	46c0      	nop			; (mov r8, r8)
   169dc:	000167b5 	.word	0x000167b5
   169e0:	000269c4 	.word	0x000269c4
   169e4:	000002bd 	.word	0x000002bd
   169e8:	00026980 	.word	0x00026980
   169ec:	00026998 	.word	0x00026998
   169f0:	000106e9 	.word	0x000106e9
   169f4:	000269a0 	.word	0x000269a0
   169f8:	0001b62d 	.word	0x0001b62d

000169fc <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
   169fc:	b590      	push	{r4, r7, lr}
   169fe:	b085      	sub	sp, #20
   16a00:	af02      	add	r7, sp, #8
   16a02:	6078      	str	r0, [r7, #4]
	Assert(config);
   16a04:	4b16      	ldr	r3, [pc, #88]	; (16a60 <system_clock_source_osc8m_get_config_defaults+0x64>)
   16a06:	4798      	blx	r3
   16a08:	1c03      	adds	r3, r0, #0
   16a0a:	2b00      	cmp	r3, #0
   16a0c:	d011      	beq.n	16a32 <system_clock_source_osc8m_get_config_defaults+0x36>
   16a0e:	687b      	ldr	r3, [r7, #4]
   16a10:	2b00      	cmp	r3, #0
   16a12:	d119      	bne.n	16a48 <system_clock_source_osc8m_get_config_defaults+0x4c>
   16a14:	4b12      	ldr	r3, [pc, #72]	; (16a60 <system_clock_source_osc8m_get_config_defaults+0x64>)
   16a16:	4798      	blx	r3
   16a18:	1c01      	adds	r1, r0, #0
   16a1a:	4a12      	ldr	r2, [pc, #72]	; (16a64 <system_clock_source_osc8m_get_config_defaults+0x68>)
   16a1c:	23b8      	movs	r3, #184	; 0xb8
   16a1e:	009b      	lsls	r3, r3, #2
   16a20:	4811      	ldr	r0, [pc, #68]	; (16a68 <system_clock_source_osc8m_get_config_defaults+0x6c>)
   16a22:	9000      	str	r0, [sp, #0]
   16a24:	4811      	ldr	r0, [pc, #68]	; (16a6c <system_clock_source_osc8m_get_config_defaults+0x70>)
   16a26:	9001      	str	r0, [sp, #4]
   16a28:	1c08      	adds	r0, r1, #0
   16a2a:	2101      	movs	r1, #1
   16a2c:	4c10      	ldr	r4, [pc, #64]	; (16a70 <system_clock_source_osc8m_get_config_defaults+0x74>)
   16a2e:	47a0      	blx	r4
   16a30:	e00a      	b.n	16a48 <system_clock_source_osc8m_get_config_defaults+0x4c>
   16a32:	687b      	ldr	r3, [r7, #4]
   16a34:	2b00      	cmp	r3, #0
   16a36:	d107      	bne.n	16a48 <system_clock_source_osc8m_get_config_defaults+0x4c>
   16a38:	480e      	ldr	r0, [pc, #56]	; (16a74 <system_clock_source_osc8m_get_config_defaults+0x78>)
   16a3a:	490c      	ldr	r1, [pc, #48]	; (16a6c <system_clock_source_osc8m_get_config_defaults+0x70>)
   16a3c:	4a09      	ldr	r2, [pc, #36]	; (16a64 <system_clock_source_osc8m_get_config_defaults+0x68>)
   16a3e:	23b8      	movs	r3, #184	; 0xb8
   16a40:	009b      	lsls	r3, r3, #2
   16a42:	4c0d      	ldr	r4, [pc, #52]	; (16a78 <system_clock_source_osc8m_get_config_defaults+0x7c>)
   16a44:	47a0      	blx	r4
   16a46:	e7fe      	b.n	16a46 <system_clock_source_osc8m_get_config_defaults+0x4a>

	config->prescaler      = SYSTEM_OSC8M_DIV_8;
   16a48:	687b      	ldr	r3, [r7, #4]
   16a4a:	2203      	movs	r2, #3
   16a4c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby = false;
   16a4e:	687b      	ldr	r3, [r7, #4]
   16a50:	2200      	movs	r2, #0
   16a52:	705a      	strb	r2, [r3, #1]
	config->on_demand      = true;
   16a54:	687b      	ldr	r3, [r7, #4]
   16a56:	2201      	movs	r2, #1
   16a58:	709a      	strb	r2, [r3, #2]
}
   16a5a:	46bd      	mov	sp, r7
   16a5c:	b003      	add	sp, #12
   16a5e:	bd90      	pop	{r4, r7, pc}
   16a60:	000167b5 	.word	0x000167b5
   16a64:	000269c4 	.word	0x000269c4
   16a68:	00026980 	.word	0x00026980
   16a6c:	00026998 	.word	0x00026998
   16a70:	000106e9 	.word	0x000106e9
   16a74:	000269a0 	.word	0x000269a0
   16a78:	0001b62d 	.word	0x0001b62d

00016a7c <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
   16a7c:	b590      	push	{r4, r7, lr}
   16a7e:	b085      	sub	sp, #20
   16a80:	af02      	add	r7, sp, #8
   16a82:	6078      	str	r0, [r7, #4]
	Assert(config);
   16a84:	4b24      	ldr	r3, [pc, #144]	; (16b18 <system_clock_source_dfll_get_config_defaults+0x9c>)
   16a86:	4798      	blx	r3
   16a88:	1c03      	adds	r3, r0, #0
   16a8a:	2b00      	cmp	r3, #0
   16a8c:	d011      	beq.n	16ab2 <system_clock_source_dfll_get_config_defaults+0x36>
   16a8e:	687b      	ldr	r3, [r7, #4]
   16a90:	2b00      	cmp	r3, #0
   16a92:	d119      	bne.n	16ac8 <system_clock_source_dfll_get_config_defaults+0x4c>
   16a94:	4b20      	ldr	r3, [pc, #128]	; (16b18 <system_clock_source_dfll_get_config_defaults+0x9c>)
   16a96:	4798      	blx	r3
   16a98:	1c01      	adds	r1, r0, #0
   16a9a:	4a20      	ldr	r2, [pc, #128]	; (16b1c <system_clock_source_dfll_get_config_defaults+0xa0>)
   16a9c:	23c2      	movs	r3, #194	; 0xc2
   16a9e:	009b      	lsls	r3, r3, #2
   16aa0:	481f      	ldr	r0, [pc, #124]	; (16b20 <system_clock_source_dfll_get_config_defaults+0xa4>)
   16aa2:	9000      	str	r0, [sp, #0]
   16aa4:	481f      	ldr	r0, [pc, #124]	; (16b24 <system_clock_source_dfll_get_config_defaults+0xa8>)
   16aa6:	9001      	str	r0, [sp, #4]
   16aa8:	1c08      	adds	r0, r1, #0
   16aaa:	2101      	movs	r1, #1
   16aac:	4c1e      	ldr	r4, [pc, #120]	; (16b28 <system_clock_source_dfll_get_config_defaults+0xac>)
   16aae:	47a0      	blx	r4
   16ab0:	e00a      	b.n	16ac8 <system_clock_source_dfll_get_config_defaults+0x4c>
   16ab2:	687b      	ldr	r3, [r7, #4]
   16ab4:	2b00      	cmp	r3, #0
   16ab6:	d107      	bne.n	16ac8 <system_clock_source_dfll_get_config_defaults+0x4c>
   16ab8:	481c      	ldr	r0, [pc, #112]	; (16b2c <system_clock_source_dfll_get_config_defaults+0xb0>)
   16aba:	491a      	ldr	r1, [pc, #104]	; (16b24 <system_clock_source_dfll_get_config_defaults+0xa8>)
   16abc:	4a17      	ldr	r2, [pc, #92]	; (16b1c <system_clock_source_dfll_get_config_defaults+0xa0>)
   16abe:	23c2      	movs	r3, #194	; 0xc2
   16ac0:	009b      	lsls	r3, r3, #2
   16ac2:	4c1b      	ldr	r4, [pc, #108]	; (16b30 <system_clock_source_dfll_get_config_defaults+0xb4>)
   16ac4:	47a0      	blx	r4
   16ac6:	e7fe      	b.n	16ac6 <system_clock_source_dfll_get_config_defaults+0x4a>

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
   16ac8:	687b      	ldr	r3, [r7, #4]
   16aca:	2200      	movs	r2, #0
   16acc:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   16ace:	687b      	ldr	r3, [r7, #4]
   16ad0:	2200      	movs	r2, #0
   16ad2:	809a      	strh	r2, [r3, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   16ad4:	687b      	ldr	r3, [r7, #4]
   16ad6:	2200      	movs	r2, #0
   16ad8:	80da      	strh	r2, [r3, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   16ada:	687b      	ldr	r3, [r7, #4]
   16adc:	2200      	movs	r2, #0
   16ade:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   16ae0:	687b      	ldr	r3, [r7, #4]
   16ae2:	2200      	movs	r2, #0
   16ae4:	725a      	strb	r2, [r3, #9]
	config->run_in_standby  = false;
   16ae6:	687b      	ldr	r3, [r7, #4]
   16ae8:	2200      	movs	r2, #0
   16aea:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   16aec:	687b      	ldr	r3, [r7, #4]
   16aee:	2201      	movs	r2, #1
   16af0:	709a      	strb	r2, [r3, #2]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
   16af2:	687b      	ldr	r3, [r7, #4]
   16af4:	2207      	movs	r2, #7
   16af6:	729a      	strb	r2, [r3, #10]
	config->fine_value      = 0xff / 4; /* Midpoint */
   16af8:	687b      	ldr	r3, [r7, #4]
   16afa:	223f      	movs	r2, #63	; 0x3f
   16afc:	72da      	strb	r2, [r3, #11]

	/* Closed loop mode */
	config->coarse_max_step = 1;
   16afe:	687b      	ldr	r3, [r7, #4]
   16b00:	2201      	movs	r2, #1
   16b02:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
   16b04:	687b      	ldr	r3, [r7, #4]
   16b06:	2201      	movs	r2, #1
   16b08:	735a      	strb	r2, [r3, #13]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
   16b0a:	687b      	ldr	r3, [r7, #4]
   16b0c:	2206      	movs	r2, #6
   16b0e:	81da      	strh	r2, [r3, #14]
}
   16b10:	46bd      	mov	sp, r7
   16b12:	b003      	add	sp, #12
   16b14:	bd90      	pop	{r4, r7, pc}
   16b16:	46c0      	nop			; (mov r8, r8)
   16b18:	000167b5 	.word	0x000167b5
   16b1c:	000269c4 	.word	0x000269c4
   16b20:	00026980 	.word	0x00026980
   16b24:	00026998 	.word	0x00026998
   16b28:	000106e9 	.word	0x000106e9
   16b2c:	000269a0 	.word	0x000269a0
   16b30:	0001b62d 	.word	0x0001b62d

00016b34 <system_main_clock_set_failure_detect>:
 *
 * \param[in] enable  Boolean \c true to enable, \c false to disable detection
 */
static inline void system_main_clock_set_failure_detect(
		const bool enable)
{
   16b34:	b580      	push	{r7, lr}
   16b36:	b082      	sub	sp, #8
   16b38:	af00      	add	r7, sp, #0
   16b3a:	1c02      	adds	r2, r0, #0
   16b3c:	1dfb      	adds	r3, r7, #7
   16b3e:	701a      	strb	r2, [r3, #0]
	if (enable) {
   16b40:	1dfb      	adds	r3, r7, #7
   16b42:	781b      	ldrb	r3, [r3, #0]
   16b44:	2b00      	cmp	r3, #0
   16b46:	d008      	beq.n	16b5a <system_main_clock_set_failure_detect+0x26>
		PM->CTRL.reg |=  PM_CTRL_CFDEN;
   16b48:	4a09      	ldr	r2, [pc, #36]	; (16b70 <system_main_clock_set_failure_detect+0x3c>)
   16b4a:	4b09      	ldr	r3, [pc, #36]	; (16b70 <system_main_clock_set_failure_detect+0x3c>)
   16b4c:	681b      	ldr	r3, [r3, #0]
   16b4e:	b2db      	uxtb	r3, r3
   16b50:	2104      	movs	r1, #4
   16b52:	430b      	orrs	r3, r1
   16b54:	b2db      	uxtb	r3, r3
   16b56:	7013      	strb	r3, [r2, #0]
   16b58:	e007      	b.n	16b6a <system_main_clock_set_failure_detect+0x36>
	} else {
		PM->CTRL.reg &= ~PM_CTRL_CFDEN;
   16b5a:	4a05      	ldr	r2, [pc, #20]	; (16b70 <system_main_clock_set_failure_detect+0x3c>)
   16b5c:	4b04      	ldr	r3, [pc, #16]	; (16b70 <system_main_clock_set_failure_detect+0x3c>)
   16b5e:	681b      	ldr	r3, [r3, #0]
   16b60:	b2db      	uxtb	r3, r3
   16b62:	2104      	movs	r1, #4
   16b64:	438b      	bics	r3, r1
   16b66:	b2db      	uxtb	r3, r3
   16b68:	7013      	strb	r3, [r2, #0]
	}
}
   16b6a:	46bd      	mov	sp, r7
   16b6c:	b002      	add	sp, #8
   16b6e:	bd80      	pop	{r7, pc}
   16b70:	40000400 	.word	0x40000400

00016b74 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
   16b74:	b590      	push	{r4, r7, lr}
   16b76:	b085      	sub	sp, #20
   16b78:	af02      	add	r7, sp, #8
   16b7a:	1c02      	adds	r2, r0, #0
   16b7c:	1dfb      	adds	r3, r7, #7
   16b7e:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
   16b80:	4b18      	ldr	r3, [pc, #96]	; (16be4 <system_cpu_clock_set_divider+0x70>)
   16b82:	4798      	blx	r3
   16b84:	1c03      	adds	r3, r0, #0
   16b86:	2b00      	cmp	r3, #0
   16b88:	d015      	beq.n	16bb6 <system_cpu_clock_set_divider+0x42>
   16b8a:	1dfb      	adds	r3, r7, #7
   16b8c:	781a      	ldrb	r2, [r3, #0]
   16b8e:	2307      	movs	r3, #7
   16b90:	401a      	ands	r2, r3
   16b92:	1dfb      	adds	r3, r7, #7
   16b94:	781b      	ldrb	r3, [r3, #0]
   16b96:	429a      	cmp	r2, r3
   16b98:	d01c      	beq.n	16bd4 <system_cpu_clock_set_divider+0x60>
   16b9a:	4b12      	ldr	r3, [pc, #72]	; (16be4 <system_cpu_clock_set_divider+0x70>)
   16b9c:	4798      	blx	r3
   16b9e:	1c01      	adds	r1, r0, #0
   16ba0:	4a11      	ldr	r2, [pc, #68]	; (16be8 <system_cpu_clock_set_divider+0x74>)
   16ba2:	4b12      	ldr	r3, [pc, #72]	; (16bec <system_cpu_clock_set_divider+0x78>)
   16ba4:	4812      	ldr	r0, [pc, #72]	; (16bf0 <system_cpu_clock_set_divider+0x7c>)
   16ba6:	9000      	str	r0, [sp, #0]
   16ba8:	4812      	ldr	r0, [pc, #72]	; (16bf4 <system_cpu_clock_set_divider+0x80>)
   16baa:	9001      	str	r0, [sp, #4]
   16bac:	1c08      	adds	r0, r1, #0
   16bae:	2101      	movs	r1, #1
   16bb0:	4c11      	ldr	r4, [pc, #68]	; (16bf8 <system_cpu_clock_set_divider+0x84>)
   16bb2:	47a0      	blx	r4
   16bb4:	e00e      	b.n	16bd4 <system_cpu_clock_set_divider+0x60>
   16bb6:	1dfb      	adds	r3, r7, #7
   16bb8:	781a      	ldrb	r2, [r3, #0]
   16bba:	2307      	movs	r3, #7
   16bbc:	401a      	ands	r2, r3
   16bbe:	1dfb      	adds	r3, r7, #7
   16bc0:	781b      	ldrb	r3, [r3, #0]
   16bc2:	429a      	cmp	r2, r3
   16bc4:	d006      	beq.n	16bd4 <system_cpu_clock_set_divider+0x60>
   16bc6:	480d      	ldr	r0, [pc, #52]	; (16bfc <system_cpu_clock_set_divider+0x88>)
   16bc8:	490a      	ldr	r1, [pc, #40]	; (16bf4 <system_cpu_clock_set_divider+0x80>)
   16bca:	4a07      	ldr	r2, [pc, #28]	; (16be8 <system_cpu_clock_set_divider+0x74>)
   16bcc:	4b07      	ldr	r3, [pc, #28]	; (16bec <system_cpu_clock_set_divider+0x78>)
   16bce:	4c0c      	ldr	r4, [pc, #48]	; (16c00 <system_cpu_clock_set_divider+0x8c>)
   16bd0:	47a0      	blx	r4
   16bd2:	e7fe      	b.n	16bd2 <system_cpu_clock_set_divider+0x5e>
	PM->CPUSEL.reg = (uint32_t)divider;
   16bd4:	4b0b      	ldr	r3, [pc, #44]	; (16c04 <system_cpu_clock_set_divider+0x90>)
   16bd6:	1dfa      	adds	r2, r7, #7
   16bd8:	7812      	ldrb	r2, [r2, #0]
   16bda:	721a      	strb	r2, [r3, #8]
}
   16bdc:	46bd      	mov	sp, r7
   16bde:	b003      	add	sp, #12
   16be0:	bd90      	pop	{r4, r7, pc}
   16be2:	46c0      	nop			; (mov r8, r8)
   16be4:	000167b5 	.word	0x000167b5
   16be8:	000269c4 	.word	0x000269c4
   16bec:	0000036a 	.word	0x0000036a
   16bf0:	00026980 	.word	0x00026980
   16bf4:	000269f4 	.word	0x000269f4
   16bf8:	000106e9 	.word	0x000106e9
   16bfc:	000269a0 	.word	0x000269a0
   16c00:	0001b62d 	.word	0x0001b62d
   16c04:	40000400 	.word	0x40000400

00016c08 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
   16c08:	b590      	push	{r4, r7, lr}
   16c0a:	b085      	sub	sp, #20
   16c0c:	af02      	add	r7, sp, #8
   16c0e:	1c0a      	adds	r2, r1, #0
   16c10:	1dfb      	adds	r3, r7, #7
   16c12:	1c01      	adds	r1, r0, #0
   16c14:	7019      	strb	r1, [r3, #0]
   16c16:	1dbb      	adds	r3, r7, #6
   16c18:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   16c1a:	1dfb      	adds	r3, r7, #7
   16c1c:	781b      	ldrb	r3, [r3, #0]
   16c1e:	2b01      	cmp	r3, #1
   16c20:	d008      	beq.n	16c34 <system_apb_clock_set_divider+0x2c>
   16c22:	2b02      	cmp	r3, #2
   16c24:	d00b      	beq.n	16c3e <system_apb_clock_set_divider+0x36>
   16c26:	2b00      	cmp	r3, #0
   16c28:	d10e      	bne.n	16c48 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
   16c2a:	4b18      	ldr	r3, [pc, #96]	; (16c8c <system_apb_clock_set_divider+0x84>)
   16c2c:	1dba      	adds	r2, r7, #6
   16c2e:	7812      	ldrb	r2, [r2, #0]
   16c30:	725a      	strb	r2, [r3, #9]
			break;
   16c32:	e026      	b.n	16c82 <system_apb_clock_set_divider+0x7a>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
   16c34:	4b15      	ldr	r3, [pc, #84]	; (16c8c <system_apb_clock_set_divider+0x84>)
   16c36:	1dba      	adds	r2, r7, #6
   16c38:	7812      	ldrb	r2, [r2, #0]
   16c3a:	729a      	strb	r2, [r3, #10]
			break;
   16c3c:	e021      	b.n	16c82 <system_apb_clock_set_divider+0x7a>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
   16c3e:	4b13      	ldr	r3, [pc, #76]	; (16c8c <system_apb_clock_set_divider+0x84>)
   16c40:	1dba      	adds	r2, r7, #6
   16c42:	7812      	ldrb	r2, [r2, #0]
   16c44:	72da      	strb	r2, [r3, #11]
			break;
   16c46:	e01c      	b.n	16c82 <system_apb_clock_set_divider+0x7a>
		default:
			Assert(false);
   16c48:	4b11      	ldr	r3, [pc, #68]	; (16c90 <system_apb_clock_set_divider+0x88>)
   16c4a:	4798      	blx	r3
   16c4c:	1c03      	adds	r3, r0, #0
   16c4e:	2b00      	cmp	r3, #0
   16c50:	d00f      	beq.n	16c72 <system_apb_clock_set_divider+0x6a>
   16c52:	4b0f      	ldr	r3, [pc, #60]	; (16c90 <system_apb_clock_set_divider+0x88>)
   16c54:	4798      	blx	r3
   16c56:	1c01      	adds	r1, r0, #0
   16c58:	4a0e      	ldr	r2, [pc, #56]	; (16c94 <system_apb_clock_set_divider+0x8c>)
   16c5a:	23e6      	movs	r3, #230	; 0xe6
   16c5c:	009b      	lsls	r3, r3, #2
   16c5e:	480e      	ldr	r0, [pc, #56]	; (16c98 <system_apb_clock_set_divider+0x90>)
   16c60:	9000      	str	r0, [sp, #0]
   16c62:	480e      	ldr	r0, [pc, #56]	; (16c9c <system_apb_clock_set_divider+0x94>)
   16c64:	9001      	str	r0, [sp, #4]
   16c66:	1c08      	adds	r0, r1, #0
   16c68:	2101      	movs	r1, #1
   16c6a:	4c0d      	ldr	r4, [pc, #52]	; (16ca0 <system_apb_clock_set_divider+0x98>)
   16c6c:	47a0      	blx	r4
			return STATUS_ERR_INVALID_ARG;
   16c6e:	2317      	movs	r3, #23
   16c70:	e008      	b.n	16c84 <system_apb_clock_set_divider+0x7c>
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
			break;
		default:
			Assert(false);
   16c72:	480c      	ldr	r0, [pc, #48]	; (16ca4 <system_apb_clock_set_divider+0x9c>)
   16c74:	4909      	ldr	r1, [pc, #36]	; (16c9c <system_apb_clock_set_divider+0x94>)
   16c76:	4a07      	ldr	r2, [pc, #28]	; (16c94 <system_apb_clock_set_divider+0x8c>)
   16c78:	23e6      	movs	r3, #230	; 0xe6
   16c7a:	009b      	lsls	r3, r3, #2
   16c7c:	4c0a      	ldr	r4, [pc, #40]	; (16ca8 <system_apb_clock_set_divider+0xa0>)
   16c7e:	47a0      	blx	r4
   16c80:	e7fe      	b.n	16c80 <system_apb_clock_set_divider+0x78>
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   16c82:	2300      	movs	r3, #0
}
   16c84:	1c18      	adds	r0, r3, #0
   16c86:	46bd      	mov	sp, r7
   16c88:	b003      	add	sp, #12
   16c8a:	bd90      	pop	{r4, r7, pc}
   16c8c:	40000400 	.word	0x40000400
   16c90:	000167b5 	.word	0x000167b5
   16c94:	000269c4 	.word	0x000269c4
   16c98:	00026980 	.word	0x00026980
   16c9c:	00026a2c 	.word	0x00026a2c
   16ca0:	000106e9 	.word	0x000106e9
   16ca4:	000269a0 	.word	0x000269a0
   16ca8:	0001b62d 	.word	0x0001b62d

00016cac <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   16cac:	b590      	push	{r4, r7, lr}
   16cae:	b085      	sub	sp, #20
   16cb0:	af02      	add	r7, sp, #8
   16cb2:	1c02      	adds	r2, r0, #0
   16cb4:	1dfb      	adds	r3, r7, #7
   16cb6:	701a      	strb	r2, [r3, #0]
	Assert((wait_states & NVMCTRL_CTRLB_RWS_Msk) == wait_states);
   16cb8:	4b1d      	ldr	r3, [pc, #116]	; (16d30 <system_flash_set_waitstates+0x84>)
   16cba:	4798      	blx	r3
   16cbc:	1c03      	adds	r3, r0, #0
   16cbe:	2b00      	cmp	r3, #0
   16cc0:	d015      	beq.n	16cee <system_flash_set_waitstates+0x42>
   16cc2:	1dfb      	adds	r3, r7, #7
   16cc4:	781a      	ldrb	r2, [r3, #0]
   16cc6:	231e      	movs	r3, #30
   16cc8:	401a      	ands	r2, r3
   16cca:	1dfb      	adds	r3, r7, #7
   16ccc:	781b      	ldrb	r3, [r3, #0]
   16cce:	429a      	cmp	r2, r3
   16cd0:	d01c      	beq.n	16d0c <system_flash_set_waitstates+0x60>
   16cd2:	4b17      	ldr	r3, [pc, #92]	; (16d30 <system_flash_set_waitstates+0x84>)
   16cd4:	4798      	blx	r3
   16cd6:	1c01      	adds	r1, r0, #0
   16cd8:	4a16      	ldr	r2, [pc, #88]	; (16d34 <system_flash_set_waitstates+0x88>)
   16cda:	4b17      	ldr	r3, [pc, #92]	; (16d38 <system_flash_set_waitstates+0x8c>)
   16cdc:	4817      	ldr	r0, [pc, #92]	; (16d3c <system_flash_set_waitstates+0x90>)
   16cde:	9000      	str	r0, [sp, #0]
   16ce0:	4817      	ldr	r0, [pc, #92]	; (16d40 <system_flash_set_waitstates+0x94>)
   16ce2:	9001      	str	r0, [sp, #4]
   16ce4:	1c08      	adds	r0, r1, #0
   16ce6:	2101      	movs	r1, #1
   16ce8:	4c16      	ldr	r4, [pc, #88]	; (16d44 <system_flash_set_waitstates+0x98>)
   16cea:	47a0      	blx	r4
   16cec:	e00e      	b.n	16d0c <system_flash_set_waitstates+0x60>
   16cee:	1dfb      	adds	r3, r7, #7
   16cf0:	781a      	ldrb	r2, [r3, #0]
   16cf2:	231e      	movs	r3, #30
   16cf4:	401a      	ands	r2, r3
   16cf6:	1dfb      	adds	r3, r7, #7
   16cf8:	781b      	ldrb	r3, [r3, #0]
   16cfa:	429a      	cmp	r2, r3
   16cfc:	d006      	beq.n	16d0c <system_flash_set_waitstates+0x60>
   16cfe:	4812      	ldr	r0, [pc, #72]	; (16d48 <system_flash_set_waitstates+0x9c>)
   16d00:	490f      	ldr	r1, [pc, #60]	; (16d40 <system_flash_set_waitstates+0x94>)
   16d02:	4a0c      	ldr	r2, [pc, #48]	; (16d34 <system_flash_set_waitstates+0x88>)
   16d04:	4b0c      	ldr	r3, [pc, #48]	; (16d38 <system_flash_set_waitstates+0x8c>)
   16d06:	4c11      	ldr	r4, [pc, #68]	; (16d4c <system_flash_set_waitstates+0xa0>)
   16d08:	47a0      	blx	r4
   16d0a:	e7fe      	b.n	16d0a <system_flash_set_waitstates+0x5e>
	NVMCTRL->CTRLB.bit.RWS = wait_states;
   16d0c:	4b10      	ldr	r3, [pc, #64]	; (16d50 <system_flash_set_waitstates+0xa4>)
   16d0e:	1dfa      	adds	r2, r7, #7
   16d10:	7811      	ldrb	r1, [r2, #0]
   16d12:	220f      	movs	r2, #15
   16d14:	400a      	ands	r2, r1
   16d16:	b2d1      	uxtb	r1, r2
   16d18:	220f      	movs	r2, #15
   16d1a:	400a      	ands	r2, r1
   16d1c:	0052      	lsls	r2, r2, #1
   16d1e:	6859      	ldr	r1, [r3, #4]
   16d20:	201e      	movs	r0, #30
   16d22:	4381      	bics	r1, r0
   16d24:	430a      	orrs	r2, r1
   16d26:	605a      	str	r2, [r3, #4]
}
   16d28:	46bd      	mov	sp, r7
   16d2a:	b003      	add	sp, #12
   16d2c:	bd90      	pop	{r4, r7, pc}
   16d2e:	46c0      	nop			; (mov r8, r8)
   16d30:	000167b5 	.word	0x000167b5
   16d34:	000269c4 	.word	0x000269c4
   16d38:	0000045a 	.word	0x0000045a
   16d3c:	00026980 	.word	0x00026980
   16d40:	00026a34 	.word	0x00026a34
   16d44:	000106e9 	.word	0x000106e9
   16d48:	000269a0 	.word	0x000269a0
   16d4c:	0001b62d 	.word	0x0001b62d
   16d50:	41004000 	.word	0x41004000

00016d54 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
   16d54:	b580      	push	{r7, lr}
   16d56:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   16d58:	46c0      	nop			; (mov r8, r8)
   16d5a:	4b03      	ldr	r3, [pc, #12]	; (16d68 <_system_dfll_wait_for_sync+0x14>)
   16d5c:	68da      	ldr	r2, [r3, #12]
   16d5e:	2310      	movs	r3, #16
   16d60:	4013      	ands	r3, r2
   16d62:	d0fa      	beq.n	16d5a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   16d64:	46bd      	mov	sp, r7
   16d66:	bd80      	pop	{r7, pc}
   16d68:	40000800 	.word	0x40000800

00016d6c <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   16d6c:	b580      	push	{r7, lr}
   16d6e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
   16d70:	4a0c      	ldr	r2, [pc, #48]	; (16da4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   16d72:	4b0d      	ldr	r3, [pc, #52]	; (16da8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   16d74:	681b      	ldr	r3, [r3, #0]
   16d76:	b29b      	uxth	r3, r3
   16d78:	2180      	movs	r1, #128	; 0x80
   16d7a:	438b      	bics	r3, r1
   16d7c:	b29b      	uxth	r3, r3
   16d7e:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
   16d80:	4b0a      	ldr	r3, [pc, #40]	; (16dac <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   16d82:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   16d84:	4b07      	ldr	r3, [pc, #28]	; (16da4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   16d86:	4a08      	ldr	r2, [pc, #32]	; (16da8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   16d88:	6892      	ldr	r2, [r2, #8]
   16d8a:	62da      	str	r2, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   16d8c:	4b05      	ldr	r3, [pc, #20]	; (16da4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   16d8e:	4a06      	ldr	r2, [pc, #24]	; (16da8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   16d90:	6852      	ldr	r2, [r2, #4]
   16d92:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   16d94:	4a03      	ldr	r2, [pc, #12]	; (16da4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   16d96:	4b04      	ldr	r3, [pc, #16]	; (16da8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   16d98:	681b      	ldr	r3, [r3, #0]
   16d9a:	b29b      	uxth	r3, r3
   16d9c:	8493      	strh	r3, [r2, #36]	; 0x24
}
   16d9e:	46bd      	mov	sp, r7
   16da0:	bd80      	pop	{r7, pc}
   16da2:	46c0      	nop			; (mov r8, r8)
   16da4:	40000800 	.word	0x40000800
   16da8:	20000448 	.word	0x20000448
   16dac:	00016d55 	.word	0x00016d55

00016db0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   16db0:	b580      	push	{r7, lr}
   16db2:	b082      	sub	sp, #8
   16db4:	af00      	add	r7, sp, #0
   16db6:	1c02      	adds	r2, r0, #0
   16db8:	1dfb      	adds	r3, r7, #7
   16dba:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   16dbc:	1dfb      	adds	r3, r7, #7
   16dbe:	781b      	ldrb	r3, [r3, #0]
   16dc0:	2b07      	cmp	r3, #7
   16dc2:	d834      	bhi.n	16e2e <system_clock_source_get_hz+0x7e>
   16dc4:	009a      	lsls	r2, r3, #2
   16dc6:	4b1c      	ldr	r3, [pc, #112]	; (16e38 <system_clock_source_get_hz+0x88>)
   16dc8:	18d3      	adds	r3, r2, r3
   16dca:	681b      	ldr	r3, [r3, #0]
   16dcc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   16dce:	4b1b      	ldr	r3, [pc, #108]	; (16e3c <system_clock_source_get_hz+0x8c>)
   16dd0:	68db      	ldr	r3, [r3, #12]
   16dd2:	e02d      	b.n	16e30 <system_clock_source_get_hz+0x80>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   16dd4:	4b1a      	ldr	r3, [pc, #104]	; (16e40 <system_clock_source_get_hz+0x90>)
   16dd6:	6a1b      	ldr	r3, [r3, #32]
   16dd8:	059b      	lsls	r3, r3, #22
   16dda:	0f9b      	lsrs	r3, r3, #30
   16ddc:	b2db      	uxtb	r3, r3
   16dde:	4a19      	ldr	r2, [pc, #100]	; (16e44 <system_clock_source_get_hz+0x94>)
   16de0:	1c11      	adds	r1, r2, #0
   16de2:	40d9      	lsrs	r1, r3
   16de4:	1c0b      	adds	r3, r1, #0
   16de6:	e023      	b.n	16e30 <system_clock_source_get_hz+0x80>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   16de8:	2380      	movs	r3, #128	; 0x80
   16dea:	021b      	lsls	r3, r3, #8
   16dec:	e020      	b.n	16e30 <system_clock_source_get_hz+0x80>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   16dee:	2380      	movs	r3, #128	; 0x80
   16df0:	021b      	lsls	r3, r3, #8
   16df2:	e01d      	b.n	16e30 <system_clock_source_get_hz+0x80>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   16df4:	4b11      	ldr	r3, [pc, #68]	; (16e3c <system_clock_source_get_hz+0x8c>)
   16df6:	691b      	ldr	r3, [r3, #16]
   16df8:	e01a      	b.n	16e30 <system_clock_source_get_hz+0x80>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   16dfa:	4b10      	ldr	r3, [pc, #64]	; (16e3c <system_clock_source_get_hz+0x8c>)
   16dfc:	681a      	ldr	r2, [r3, #0]
   16dfe:	2302      	movs	r3, #2
   16e00:	4013      	ands	r3, r2
   16e02:	d101      	bne.n	16e08 <system_clock_source_get_hz+0x58>
			return 0;
   16e04:	2300      	movs	r3, #0
   16e06:	e013      	b.n	16e30 <system_clock_source_get_hz+0x80>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   16e08:	4b0f      	ldr	r3, [pc, #60]	; (16e48 <system_clock_source_get_hz+0x98>)
   16e0a:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
   16e0c:	4b0b      	ldr	r3, [pc, #44]	; (16e3c <system_clock_source_get_hz+0x8c>)
   16e0e:	681a      	ldr	r2, [r3, #0]
   16e10:	2304      	movs	r3, #4
   16e12:	4013      	ands	r3, r2
   16e14:	d009      	beq.n	16e2a <system_clock_source_get_hz+0x7a>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   16e16:	2000      	movs	r0, #0
   16e18:	4b0c      	ldr	r3, [pc, #48]	; (16e4c <system_clock_source_get_hz+0x9c>)
   16e1a:	4798      	blx	r3
   16e1c:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
   16e1e:	4b07      	ldr	r3, [pc, #28]	; (16e3c <system_clock_source_get_hz+0x8c>)
   16e20:	689b      	ldr	r3, [r3, #8]
   16e22:	041b      	lsls	r3, r3, #16
   16e24:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   16e26:	4353      	muls	r3, r2
   16e28:	e002      	b.n	16e30 <system_clock_source_get_hz+0x80>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
   16e2a:	4b09      	ldr	r3, [pc, #36]	; (16e50 <system_clock_source_get_hz+0xa0>)
   16e2c:	e000      	b.n	16e30 <system_clock_source_get_hz+0x80>

	default:
		return 0;
   16e2e:	2300      	movs	r3, #0
	}
}
   16e30:	1c18      	adds	r0, r3, #0
   16e32:	46bd      	mov	sp, r7
   16e34:	b002      	add	sp, #8
   16e36:	bd80      	pop	{r7, pc}
   16e38:	00026a9c 	.word	0x00026a9c
   16e3c:	20000448 	.word	0x20000448
   16e40:	40000800 	.word	0x40000800
   16e44:	007a1200 	.word	0x007a1200
   16e48:	00016d55 	.word	0x00016d55
   16e4c:	00017ac9 	.word	0x00017ac9
   16e50:	02dc6c00 	.word	0x02dc6c00

00016e54 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   16e54:	b580      	push	{r7, lr}
   16e56:	b084      	sub	sp, #16
   16e58:	af00      	add	r7, sp, #0
   16e5a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   16e5c:	4b16      	ldr	r3, [pc, #88]	; (16eb8 <system_clock_source_osc8m_set_config+0x64>)
   16e5e:	6a1b      	ldr	r3, [r3, #32]
   16e60:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC = config->prescaler;
   16e62:	687b      	ldr	r3, [r7, #4]
   16e64:	781b      	ldrb	r3, [r3, #0]
   16e66:	1c1a      	adds	r2, r3, #0
   16e68:	2303      	movs	r3, #3
   16e6a:	4013      	ands	r3, r2
   16e6c:	b2d9      	uxtb	r1, r3
   16e6e:	1c3b      	adds	r3, r7, #0
   16e70:	330d      	adds	r3, #13
   16e72:	2203      	movs	r2, #3
   16e74:	400a      	ands	r2, r1
   16e76:	7819      	ldrb	r1, [r3, #0]
   16e78:	2003      	movs	r0, #3
   16e7a:	4381      	bics	r1, r0
   16e7c:	430a      	orrs	r2, r1
   16e7e:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   16e80:	687b      	ldr	r3, [r7, #4]
   16e82:	789a      	ldrb	r2, [r3, #2]
   16e84:	1c3b      	adds	r3, r7, #0
   16e86:	330c      	adds	r3, #12
   16e88:	01d2      	lsls	r2, r2, #7
   16e8a:	7818      	ldrb	r0, [r3, #0]
   16e8c:	217f      	movs	r1, #127	; 0x7f
   16e8e:	4001      	ands	r1, r0
   16e90:	430a      	orrs	r2, r1
   16e92:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   16e94:	687b      	ldr	r3, [r7, #4]
   16e96:	7859      	ldrb	r1, [r3, #1]
   16e98:	1c3b      	adds	r3, r7, #0
   16e9a:	330c      	adds	r3, #12
   16e9c:	2201      	movs	r2, #1
   16e9e:	400a      	ands	r2, r1
   16ea0:	0192      	lsls	r2, r2, #6
   16ea2:	7819      	ldrb	r1, [r3, #0]
   16ea4:	2040      	movs	r0, #64	; 0x40
   16ea6:	4381      	bics	r1, r0
   16ea8:	430a      	orrs	r2, r1
   16eaa:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   16eac:	4b02      	ldr	r3, [pc, #8]	; (16eb8 <system_clock_source_osc8m_set_config+0x64>)
   16eae:	68fa      	ldr	r2, [r7, #12]
   16eb0:	621a      	str	r2, [r3, #32]
}
   16eb2:	46bd      	mov	sp, r7
   16eb4:	b004      	add	sp, #16
   16eb6:	bd80      	pop	{r7, pc}
   16eb8:	40000800 	.word	0x40000800

00016ebc <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
   16ebc:	b580      	push	{r7, lr}
   16ebe:	b084      	sub	sp, #16
   16ec0:	af00      	add	r7, sp, #0
   16ec2:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
   16ec4:	4b22      	ldr	r3, [pc, #136]	; (16f50 <system_clock_source_osc32k_set_config+0x94>)
   16ec6:	699b      	ldr	r3, [r3, #24]
   16ec8:	60fb      	str	r3, [r7, #12]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
   16eca:	687b      	ldr	r3, [r7, #4]
   16ecc:	7859      	ldrb	r1, [r3, #1]
   16ece:	1c3b      	adds	r3, r7, #0
   16ed0:	330c      	adds	r3, #12
   16ed2:	2201      	movs	r2, #1
   16ed4:	400a      	ands	r2, r1
   16ed6:	00d2      	lsls	r2, r2, #3
   16ed8:	7819      	ldrb	r1, [r3, #0]
   16eda:	2008      	movs	r0, #8
   16edc:	4381      	bics	r1, r0
   16ede:	430a      	orrs	r2, r1
   16ee0:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K    = config->enable_32khz_output;
   16ee2:	687b      	ldr	r3, [r7, #4]
   16ee4:	7899      	ldrb	r1, [r3, #2]
   16ee6:	1c3b      	adds	r3, r7, #0
   16ee8:	330c      	adds	r3, #12
   16eea:	2201      	movs	r2, #1
   16eec:	400a      	ands	r2, r1
   16eee:	0092      	lsls	r2, r2, #2
   16ef0:	7819      	ldrb	r1, [r3, #0]
   16ef2:	2004      	movs	r0, #4
   16ef4:	4381      	bics	r1, r0
   16ef6:	430a      	orrs	r2, r1
   16ef8:	701a      	strb	r2, [r3, #0]
	temp.bit.STARTUP  = config->startup_time;
   16efa:	687b      	ldr	r3, [r7, #4]
   16efc:	781b      	ldrb	r3, [r3, #0]
   16efe:	1c1a      	adds	r2, r3, #0
   16f00:	2307      	movs	r3, #7
   16f02:	4013      	ands	r3, r2
   16f04:	b2d9      	uxtb	r1, r3
   16f06:	1c3b      	adds	r3, r7, #0
   16f08:	330d      	adds	r3, #13
   16f0a:	2207      	movs	r2, #7
   16f0c:	400a      	ands	r2, r1
   16f0e:	7819      	ldrb	r1, [r3, #0]
   16f10:	2007      	movs	r0, #7
   16f12:	4381      	bics	r1, r0
   16f14:	430a      	orrs	r2, r1
   16f16:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   16f18:	687b      	ldr	r3, [r7, #4]
   16f1a:	791a      	ldrb	r2, [r3, #4]
   16f1c:	1c3b      	adds	r3, r7, #0
   16f1e:	330c      	adds	r3, #12
   16f20:	01d2      	lsls	r2, r2, #7
   16f22:	7818      	ldrb	r0, [r3, #0]
   16f24:	217f      	movs	r1, #127	; 0x7f
   16f26:	4001      	ands	r1, r0
   16f28:	430a      	orrs	r2, r1
   16f2a:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   16f2c:	687b      	ldr	r3, [r7, #4]
   16f2e:	78d9      	ldrb	r1, [r3, #3]
   16f30:	1c3b      	adds	r3, r7, #0
   16f32:	330c      	adds	r3, #12
   16f34:	2201      	movs	r2, #1
   16f36:	400a      	ands	r2, r1
   16f38:	0192      	lsls	r2, r2, #6
   16f3a:	7819      	ldrb	r1, [r3, #0]
   16f3c:	2040      	movs	r0, #64	; 0x40
   16f3e:	4381      	bics	r1, r0
   16f40:	430a      	orrs	r2, r1
   16f42:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC32K  = temp;
   16f44:	4b02      	ldr	r3, [pc, #8]	; (16f50 <system_clock_source_osc32k_set_config+0x94>)
   16f46:	68fa      	ldr	r2, [r7, #12]
   16f48:	619a      	str	r2, [r3, #24]
}
   16f4a:	46bd      	mov	sp, r7
   16f4c:	b004      	add	sp, #16
   16f4e:	bd80      	pop	{r7, pc}
   16f50:	40000800 	.word	0x40000800

00016f54 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   16f54:	b580      	push	{r7, lr}
   16f56:	b084      	sub	sp, #16
   16f58:	af00      	add	r7, sp, #0
   16f5a:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   16f5c:	4b35      	ldr	r3, [pc, #212]	; (17034 <system_clock_source_xosc32k_set_config+0xe0>)
   16f5e:	1c3a      	adds	r2, r7, #0
   16f60:	320c      	adds	r2, #12
   16f62:	695b      	ldr	r3, [r3, #20]
   16f64:	8013      	strh	r3, [r2, #0]

	temp.bit.STARTUP = config->startup_time;
   16f66:	687b      	ldr	r3, [r7, #4]
   16f68:	785b      	ldrb	r3, [r3, #1]
   16f6a:	1c1a      	adds	r2, r3, #0
   16f6c:	2307      	movs	r3, #7
   16f6e:	4013      	ands	r3, r2
   16f70:	b2d9      	uxtb	r1, r3
   16f72:	1c3b      	adds	r3, r7, #0
   16f74:	330c      	adds	r3, #12
   16f76:	2207      	movs	r2, #7
   16f78:	400a      	ands	r2, r1
   16f7a:	7859      	ldrb	r1, [r3, #1]
   16f7c:	2007      	movs	r0, #7
   16f7e:	4381      	bics	r1, r0
   16f80:	430a      	orrs	r2, r1
   16f82:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   16f84:	687b      	ldr	r3, [r7, #4]
   16f86:	781b      	ldrb	r3, [r3, #0]
   16f88:	2b00      	cmp	r3, #0
   16f8a:	d106      	bne.n	16f9a <system_clock_source_xosc32k_set_config+0x46>
		temp.bit.XTALEN = 1;
   16f8c:	1c3b      	adds	r3, r7, #0
   16f8e:	330c      	adds	r3, #12
   16f90:	781a      	ldrb	r2, [r3, #0]
   16f92:	2104      	movs	r1, #4
   16f94:	430a      	orrs	r2, r1
   16f96:	701a      	strb	r2, [r3, #0]
   16f98:	e005      	b.n	16fa6 <system_clock_source_xosc32k_set_config+0x52>
	} else {
		temp.bit.XTALEN = 0;
   16f9a:	1c3b      	adds	r3, r7, #0
   16f9c:	330c      	adds	r3, #12
   16f9e:	781a      	ldrb	r2, [r3, #0]
   16fa0:	2104      	movs	r1, #4
   16fa2:	438a      	bics	r2, r1
   16fa4:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
   16fa6:	687b      	ldr	r3, [r7, #4]
   16fa8:	7899      	ldrb	r1, [r3, #2]
   16faa:	1c3b      	adds	r3, r7, #0
   16fac:	330c      	adds	r3, #12
   16fae:	2201      	movs	r2, #1
   16fb0:	400a      	ands	r2, r1
   16fb2:	0152      	lsls	r2, r2, #5
   16fb4:	7819      	ldrb	r1, [r3, #0]
   16fb6:	2020      	movs	r0, #32
   16fb8:	4381      	bics	r1, r0
   16fba:	430a      	orrs	r2, r1
   16fbc:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
   16fbe:	687b      	ldr	r3, [r7, #4]
   16fc0:	78d9      	ldrb	r1, [r3, #3]
   16fc2:	1c3b      	adds	r3, r7, #0
   16fc4:	330c      	adds	r3, #12
   16fc6:	2201      	movs	r2, #1
   16fc8:	400a      	ands	r2, r1
   16fca:	0112      	lsls	r2, r2, #4
   16fcc:	7819      	ldrb	r1, [r3, #0]
   16fce:	2010      	movs	r0, #16
   16fd0:	4381      	bics	r1, r0
   16fd2:	430a      	orrs	r2, r1
   16fd4:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
   16fd6:	687b      	ldr	r3, [r7, #4]
   16fd8:	7919      	ldrb	r1, [r3, #4]
   16fda:	1c3b      	adds	r3, r7, #0
   16fdc:	330c      	adds	r3, #12
   16fde:	2201      	movs	r2, #1
   16fe0:	400a      	ands	r2, r1
   16fe2:	00d2      	lsls	r2, r2, #3
   16fe4:	7819      	ldrb	r1, [r3, #0]
   16fe6:	2008      	movs	r0, #8
   16fe8:	4381      	bics	r1, r0
   16fea:	430a      	orrs	r2, r1
   16fec:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
   16fee:	687b      	ldr	r3, [r7, #4]
   16ff0:	7b5a      	ldrb	r2, [r3, #13]
   16ff2:	1c3b      	adds	r3, r7, #0
   16ff4:	330c      	adds	r3, #12
   16ff6:	01d2      	lsls	r2, r2, #7
   16ff8:	7818      	ldrb	r0, [r3, #0]
   16ffa:	217f      	movs	r1, #127	; 0x7f
   16ffc:	4001      	ands	r1, r0
   16ffe:	430a      	orrs	r2, r1
   17000:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   17002:	687b      	ldr	r3, [r7, #4]
   17004:	7b19      	ldrb	r1, [r3, #12]
   17006:	1c3b      	adds	r3, r7, #0
   17008:	330c      	adds	r3, #12
   1700a:	2201      	movs	r2, #1
   1700c:	400a      	ands	r2, r1
   1700e:	0192      	lsls	r2, r2, #6
   17010:	7819      	ldrb	r1, [r3, #0]
   17012:	2040      	movs	r0, #64	; 0x40
   17014:	4381      	bics	r1, r0
   17016:	430a      	orrs	r2, r1
   17018:	701a      	strb	r2, [r3, #0]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   1701a:	687b      	ldr	r3, [r7, #4]
   1701c:	689a      	ldr	r2, [r3, #8]
   1701e:	4b06      	ldr	r3, [pc, #24]	; (17038 <system_clock_source_xosc32k_set_config+0xe4>)
   17020:	611a      	str	r2, [r3, #16]

	SYSCTRL->XOSC32K = temp;
   17022:	4b04      	ldr	r3, [pc, #16]	; (17034 <system_clock_source_xosc32k_set_config+0xe0>)
   17024:	1c3a      	adds	r2, r7, #0
   17026:	320c      	adds	r2, #12
   17028:	8812      	ldrh	r2, [r2, #0]
   1702a:	829a      	strh	r2, [r3, #20]
}
   1702c:	46bd      	mov	sp, r7
   1702e:	b004      	add	sp, #16
   17030:	bd80      	pop	{r7, pc}
   17032:	46c0      	nop			; (mov r8, r8)
   17034:	40000800 	.word	0x40000800
   17038:	20000448 	.word	0x20000448

0001703c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   1703c:	b580      	push	{r7, lr}
   1703e:	b082      	sub	sp, #8
   17040:	af00      	add	r7, sp, #0
   17042:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   17044:	687b      	ldr	r3, [r7, #4]
   17046:	7a9b      	ldrb	r3, [r3, #10]
   17048:	021b      	lsls	r3, r3, #8
   1704a:	1c1a      	adds	r2, r3, #0
   1704c:	23f8      	movs	r3, #248	; 0xf8
   1704e:	015b      	lsls	r3, r3, #5
   17050:	401a      	ands	r2, r3
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   17052:	687b      	ldr	r3, [r7, #4]
   17054:	7adb      	ldrb	r3, [r3, #11]
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   17056:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
   17058:	4b1d      	ldr	r3, [pc, #116]	; (170d0 <system_clock_source_dfll_set_config+0x94>)
   1705a:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   1705c:	687b      	ldr	r3, [r7, #4]
   1705e:	7a1a      	ldrb	r2, [r3, #8]
			(uint32_t)config->stable_tracking |
   17060:	687b      	ldr	r3, [r7, #4]
   17062:	7a5b      	ldrb	r3, [r3, #9]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   17064:	4313      	orrs	r3, r2
   17066:	b2db      	uxtb	r3, r3
   17068:	1c1a      	adds	r2, r3, #0
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
   1706a:	687b      	ldr	r3, [r7, #4]
   1706c:	889b      	ldrh	r3, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
   1706e:	431a      	orrs	r2, r3
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
   17070:	687b      	ldr	r3, [r7, #4]
   17072:	88db      	ldrh	r3, [r3, #6]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
   17074:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			(uint32_t)config->run_in_standby << SYSCTRL_DFLLCTRL_RUNSTDBY_Pos |
   17076:	687b      	ldr	r3, [r7, #4]
   17078:	785b      	ldrb	r3, [r3, #1]
   1707a:	019b      	lsls	r3, r3, #6

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
   1707c:	431a      	orrs	r2, r3
			(uint32_t)config->run_in_standby << SYSCTRL_DFLLCTRL_RUNSTDBY_Pos |
			(uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos;
   1707e:	687b      	ldr	r3, [r7, #4]
   17080:	789b      	ldrb	r3, [r3, #2]
   17082:	01db      	lsls	r3, r3, #7
	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			(uint32_t)config->run_in_standby << SYSCTRL_DFLLCTRL_RUNSTDBY_Pos |
   17084:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
   17086:	4b12      	ldr	r3, [pc, #72]	; (170d0 <system_clock_source_dfll_set_config+0x94>)
   17088:	601a      	str	r2, [r3, #0]
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			(uint32_t)config->run_in_standby << SYSCTRL_DFLLCTRL_RUNSTDBY_Pos |
			(uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos;

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   1708a:	687b      	ldr	r3, [r7, #4]
   1708c:	781b      	ldrb	r3, [r3, #0]
   1708e:	2b04      	cmp	r3, #4
   17090:	d11a      	bne.n	170c8 <system_clock_source_dfll_set_config+0x8c>
		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   17092:	687b      	ldr	r3, [r7, #4]
   17094:	7b1b      	ldrb	r3, [r3, #12]
   17096:	061b      	lsls	r3, r3, #24
   17098:	1c1a      	adds	r2, r3, #0
   1709a:	23f8      	movs	r3, #248	; 0xf8
   1709c:	055b      	lsls	r3, r3, #21
   1709e:	401a      	ands	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   170a0:	687b      	ldr	r3, [r7, #4]
   170a2:	7b5b      	ldrb	r3, [r3, #13]
   170a4:	041b      	lsls	r3, r3, #16
   170a6:	1c19      	adds	r1, r3, #0
   170a8:	23ff      	movs	r3, #255	; 0xff
   170aa:	041b      	lsls	r3, r3, #16
   170ac:	400b      	ands	r3, r1
			(uint32_t)config->run_in_standby << SYSCTRL_DFLLCTRL_RUNSTDBY_Pos |
			(uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos;

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   170ae:	431a      	orrs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   170b0:	687b      	ldr	r3, [r7, #4]
   170b2:	89db      	ldrh	r3, [r3, #14]
			(uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos;

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   170b4:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			(uint32_t)config->run_in_standby << SYSCTRL_DFLLCTRL_RUNSTDBY_Pos |
			(uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos;

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		_system_clock_inst.dfll.mul =
   170b6:	4b06      	ldr	r3, [pc, #24]	; (170d0 <system_clock_source_dfll_set_config+0x94>)
   170b8:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
   170ba:	4b05      	ldr	r3, [pc, #20]	; (170d0 <system_clock_source_dfll_set_config+0x94>)
   170bc:	681a      	ldr	r2, [r3, #0]
   170be:	687b      	ldr	r3, [r7, #4]
   170c0:	781b      	ldrb	r3, [r3, #0]
   170c2:	431a      	orrs	r2, r3
   170c4:	4b02      	ldr	r3, [pc, #8]	; (170d0 <system_clock_source_dfll_set_config+0x94>)
   170c6:	601a      	str	r2, [r3, #0]
	}
}
   170c8:	46bd      	mov	sp, r7
   170ca:	b002      	add	sp, #8
   170cc:	bd80      	pop	{r7, pc}
   170ce:	46c0      	nop			; (mov r8, r8)
   170d0:	20000448 	.word	0x20000448

000170d4 <system_clock_source_enable>:
 *
 * \retval STATUS_ERR_NOT_INITIALIZED DFLL configuration is not initialized
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   170d4:	b590      	push	{r4, r7, lr}
   170d6:	b085      	sub	sp, #20
   170d8:	af02      	add	r7, sp, #8
   170da:	1c02      	adds	r2, r0, #0
   170dc:	1dfb      	adds	r3, r7, #7
   170de:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   170e0:	1dfb      	adds	r3, r7, #7
   170e2:	781b      	ldrb	r3, [r3, #0]
   170e4:	2b07      	cmp	r3, #7
   170e6:	d830      	bhi.n	1714a <system_clock_source_enable+0x76>
   170e8:	009a      	lsls	r2, r3, #2
   170ea:	4b29      	ldr	r3, [pc, #164]	; (17190 <system_clock_source_enable+0xbc>)
   170ec:	18d3      	adds	r3, r2, r3
   170ee:	681b      	ldr	r3, [r3, #0]
   170f0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   170f2:	4b28      	ldr	r3, [pc, #160]	; (17194 <system_clock_source_enable+0xc0>)
   170f4:	4a27      	ldr	r2, [pc, #156]	; (17194 <system_clock_source_enable+0xc0>)
   170f6:	6a12      	ldr	r2, [r2, #32]
   170f8:	2102      	movs	r1, #2
   170fa:	430a      	orrs	r2, r1
   170fc:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   170fe:	2300      	movs	r3, #0
   17100:	e041      	b.n	17186 <system_clock_source_enable+0xb2>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   17102:	4b24      	ldr	r3, [pc, #144]	; (17194 <system_clock_source_enable+0xc0>)
   17104:	4a23      	ldr	r2, [pc, #140]	; (17194 <system_clock_source_enable+0xc0>)
   17106:	6992      	ldr	r2, [r2, #24]
   17108:	2102      	movs	r1, #2
   1710a:	430a      	orrs	r2, r1
   1710c:	619a      	str	r2, [r3, #24]
		break;
   1710e:	e039      	b.n	17184 <system_clock_source_enable+0xb0>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   17110:	4a20      	ldr	r2, [pc, #128]	; (17194 <system_clock_source_enable+0xc0>)
   17112:	4b20      	ldr	r3, [pc, #128]	; (17194 <system_clock_source_enable+0xc0>)
   17114:	691b      	ldr	r3, [r3, #16]
   17116:	b29b      	uxth	r3, r3
   17118:	2102      	movs	r1, #2
   1711a:	430b      	orrs	r3, r1
   1711c:	b29b      	uxth	r3, r3
   1711e:	8213      	strh	r3, [r2, #16]
		break;
   17120:	e030      	b.n	17184 <system_clock_source_enable+0xb0>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   17122:	4a1c      	ldr	r2, [pc, #112]	; (17194 <system_clock_source_enable+0xc0>)
   17124:	4b1b      	ldr	r3, [pc, #108]	; (17194 <system_clock_source_enable+0xc0>)
   17126:	695b      	ldr	r3, [r3, #20]
   17128:	b29b      	uxth	r3, r3
   1712a:	2102      	movs	r1, #2
   1712c:	430b      	orrs	r3, r1
   1712e:	b29b      	uxth	r3, r3
   17130:	8293      	strh	r3, [r2, #20]
		break;
   17132:	e027      	b.n	17184 <system_clock_source_enable+0xb0>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   17134:	4b18      	ldr	r3, [pc, #96]	; (17198 <system_clock_source_enable+0xc4>)
   17136:	681b      	ldr	r3, [r3, #0]
   17138:	2202      	movs	r2, #2
   1713a:	431a      	orrs	r2, r3
   1713c:	4b16      	ldr	r3, [pc, #88]	; (17198 <system_clock_source_enable+0xc4>)
   1713e:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   17140:	4b16      	ldr	r3, [pc, #88]	; (1719c <system_clock_source_enable+0xc8>)
   17142:	4798      	blx	r3
		break;
   17144:	e01e      	b.n	17184 <system_clock_source_enable+0xb0>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   17146:	2300      	movs	r3, #0
   17148:	e01d      	b.n	17186 <system_clock_source_enable+0xb2>

	default:
		Assert(false);
   1714a:	4b15      	ldr	r3, [pc, #84]	; (171a0 <system_clock_source_enable+0xcc>)
   1714c:	4798      	blx	r3
   1714e:	1c03      	adds	r3, r0, #0
   17150:	2b00      	cmp	r3, #0
   17152:	d00f      	beq.n	17174 <system_clock_source_enable+0xa0>
   17154:	4b12      	ldr	r3, [pc, #72]	; (171a0 <system_clock_source_enable+0xcc>)
   17156:	4798      	blx	r3
   17158:	1c01      	adds	r1, r0, #0
   1715a:	4a12      	ldr	r2, [pc, #72]	; (171a4 <system_clock_source_enable+0xd0>)
   1715c:	23c6      	movs	r3, #198	; 0xc6
   1715e:	33ff      	adds	r3, #255	; 0xff
   17160:	4811      	ldr	r0, [pc, #68]	; (171a8 <system_clock_source_enable+0xd4>)
   17162:	9000      	str	r0, [sp, #0]
   17164:	4811      	ldr	r0, [pc, #68]	; (171ac <system_clock_source_enable+0xd8>)
   17166:	9001      	str	r0, [sp, #4]
   17168:	1c08      	adds	r0, r1, #0
   1716a:	2101      	movs	r1, #1
   1716c:	4c10      	ldr	r4, [pc, #64]	; (171b0 <system_clock_source_enable+0xdc>)
   1716e:	47a0      	blx	r4
		return STATUS_ERR_INVALID_ARG;
   17170:	2317      	movs	r3, #23
   17172:	e008      	b.n	17186 <system_clock_source_enable+0xb2>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
   17174:	480f      	ldr	r0, [pc, #60]	; (171b4 <system_clock_source_enable+0xe0>)
   17176:	490d      	ldr	r1, [pc, #52]	; (171ac <system_clock_source_enable+0xd8>)
   17178:	4a0a      	ldr	r2, [pc, #40]	; (171a4 <system_clock_source_enable+0xd0>)
   1717a:	23c6      	movs	r3, #198	; 0xc6
   1717c:	33ff      	adds	r3, #255	; 0xff
   1717e:	4c0e      	ldr	r4, [pc, #56]	; (171b8 <system_clock_source_enable+0xe4>)
   17180:	47a0      	blx	r4
   17182:	e7fe      	b.n	17182 <system_clock_source_enable+0xae>
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   17184:	2300      	movs	r3, #0
}
   17186:	1c18      	adds	r0, r3, #0
   17188:	46bd      	mov	sp, r7
   1718a:	b003      	add	sp, #12
   1718c:	bd90      	pop	{r4, r7, pc}
   1718e:	46c0      	nop			; (mov r8, r8)
   17190:	00026abc 	.word	0x00026abc
   17194:	40000800 	.word	0x40000800
   17198:	20000448 	.word	0x20000448
   1719c:	00016d6d 	.word	0x00016d6d
   171a0:	000167b5 	.word	0x000167b5
   171a4:	00026a6c 	.word	0x00026a6c
   171a8:	00026980 	.word	0x00026980
   171ac:	00026a2c 	.word	0x00026a2c
   171b0:	000106e9 	.word	0x000106e9
   171b4:	000269a0 	.word	0x000269a0
   171b8:	0001b62d 	.word	0x0001b62d

000171bc <system_clock_init>:
 * This function will apply the settings in conf_clocks.h when run from the user
 * application. All clock sources and GCLK generators are running when this function
 * returns.
 */
void system_clock_init(void)
{
   171bc:	b580      	push	{r7, lr}
   171be:	b0a4      	sub	sp, #144	; 0x90
   171c0:	af00      	add	r7, sp, #0
        /* Workaround for errata 10558 */
        SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD12RDY | SYSCTRL_INTFLAG_BOD33RDY |
   171c2:	4bd3      	ldr	r3, [pc, #844]	; (17510 <system_clock_init+0x354>)
   171c4:	4ad3      	ldr	r2, [pc, #844]	; (17514 <system_clock_init+0x358>)
   171c6:	609a      	str	r2, [r3, #8]
                        SYSCTRL_INTFLAG_BOD12DET | SYSCTRL_INTFLAG_BOD33DET |
                        SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   171c8:	2000      	movs	r0, #0
   171ca:	4bd3      	ldr	r3, [pc, #844]	; (17518 <system_clock_init+0x35c>)
   171cc:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
   171ce:	1c3b      	adds	r3, r7, #0
   171d0:	3380      	adds	r3, #128	; 0x80
   171d2:	1c18      	adds	r0, r3, #0
   171d4:	4bd1      	ldr	r3, [pc, #836]	; (1751c <system_clock_init+0x360>)
   171d6:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
   171d8:	1c3b      	adds	r3, r7, #0
   171da:	3380      	adds	r3, #128	; 0x80
   171dc:	2280      	movs	r2, #128	; 0x80
   171de:	0212      	lsls	r2, r2, #8
   171e0:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
   171e2:	1c3b      	adds	r3, r7, #0
   171e4:	3380      	adds	r3, #128	; 0x80
   171e6:	2200      	movs	r2, #0
   171e8:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   171ea:	1c3b      	adds	r3, r7, #0
   171ec:	3380      	adds	r3, #128	; 0x80
   171ee:	2206      	movs	r2, #6
   171f0:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
   171f2:	1c3b      	adds	r3, r7, #0
   171f4:	3380      	adds	r3, #128	; 0x80
   171f6:	2201      	movs	r2, #1
   171f8:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
   171fa:	1c3b      	adds	r3, r7, #0
   171fc:	3380      	adds	r3, #128	; 0x80
   171fe:	2201      	movs	r2, #1
   17200:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
   17202:	1c3b      	adds	r3, r7, #0
   17204:	3380      	adds	r3, #128	; 0x80
   17206:	2201      	movs	r2, #1
   17208:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = CONF_CLOCK_XOSC32K_ON_DEMAND;
   1720a:	1c3b      	adds	r3, r7, #0
   1720c:	3380      	adds	r3, #128	; 0x80
   1720e:	2201      	movs	r2, #1
   17210:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
   17212:	1c3b      	adds	r3, r7, #0
   17214:	3380      	adds	r3, #128	; 0x80
   17216:	2201      	movs	r2, #1
   17218:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   1721a:	1c3b      	adds	r3, r7, #0
   1721c:	3380      	adds	r3, #128	; 0x80
   1721e:	1c18      	adds	r0, r3, #0
   17220:	4bbf      	ldr	r3, [pc, #764]	; (17520 <system_clock_init+0x364>)
   17222:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   17224:	2005      	movs	r0, #5
   17226:	4bbf      	ldr	r3, [pc, #764]	; (17524 <system_clock_init+0x368>)
   17228:	4798      	blx	r3
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
   1722a:	4bb9      	ldr	r3, [pc, #740]	; (17510 <system_clock_init+0x354>)
			(*(uint32_t *)SYSCTRL_FUSES_OSC32KCAL_ADDR >> SYSCTRL_FUSES_OSC32KCAL_Pos);
   1722c:	4abe      	ldr	r2, [pc, #760]	; (17528 <system_clock_init+0x36c>)
   1722e:	6812      	ldr	r2, [r2, #0]
   17230:	0992      	lsrs	r2, r2, #6
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
   17232:	b2d2      	uxtb	r2, r2
   17234:	1c11      	adds	r1, r2, #0
   17236:	227f      	movs	r2, #127	; 0x7f
   17238:	400a      	ands	r2, r1
   1723a:	b2d1      	uxtb	r1, r2
   1723c:	227f      	movs	r2, #127	; 0x7f
   1723e:	400a      	ands	r2, r1
   17240:	0412      	lsls	r2, r2, #16
   17242:	6998      	ldr	r0, [r3, #24]
   17244:	49b9      	ldr	r1, [pc, #740]	; (1752c <system_clock_init+0x370>)
   17246:	4001      	ands	r1, r0
   17248:	430a      	orrs	r2, r1
   1724a:	619a      	str	r2, [r3, #24]
			(*(uint32_t *)SYSCTRL_FUSES_OSC32KCAL_ADDR >> SYSCTRL_FUSES_OSC32KCAL_Pos);

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);
   1724c:	1c3b      	adds	r3, r7, #0
   1724e:	3378      	adds	r3, #120	; 0x78
   17250:	1c18      	adds	r0, r3, #0
   17252:	4bb7      	ldr	r3, [pc, #732]	; (17530 <system_clock_init+0x374>)
   17254:	4798      	blx	r3

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
   17256:	1c3b      	adds	r3, r7, #0
   17258:	3378      	adds	r3, #120	; 0x78
   1725a:	2207      	movs	r2, #7
   1725c:	701a      	strb	r2, [r3, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
   1725e:	1c3b      	adds	r3, r7, #0
   17260:	3378      	adds	r3, #120	; 0x78
   17262:	2201      	movs	r2, #1
   17264:	705a      	strb	r2, [r3, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
   17266:	1c3b      	adds	r3, r7, #0
   17268:	3378      	adds	r3, #120	; 0x78
   1726a:	2201      	movs	r2, #1
   1726c:	709a      	strb	r2, [r3, #2]
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
   1726e:	1c3b      	adds	r3, r7, #0
   17270:	3378      	adds	r3, #120	; 0x78
   17272:	2201      	movs	r2, #1
   17274:	711a      	strb	r2, [r3, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
   17276:	1c3b      	adds	r3, r7, #0
   17278:	3378      	adds	r3, #120	; 0x78
   1727a:	2200      	movs	r2, #0
   1727c:	70da      	strb	r2, [r3, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
   1727e:	1c3b      	adds	r3, r7, #0
   17280:	3378      	adds	r3, #120	; 0x78
   17282:	1c18      	adds	r0, r3, #0
   17284:	4bab      	ldr	r3, [pc, #684]	; (17534 <system_clock_init+0x378>)
   17286:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
   17288:	2004      	movs	r0, #4
   1728a:	4ba6      	ldr	r3, [pc, #664]	; (17524 <system_clock_init+0x368>)
   1728c:	4798      	blx	r3


	/* DFLL (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
   1728e:	1c3b      	adds	r3, r7, #0
   17290:	3368      	adds	r3, #104	; 0x68
   17292:	1c18      	adds	r0, r3, #0
   17294:	4ba8      	ldr	r3, [pc, #672]	; (17538 <system_clock_init+0x37c>)
   17296:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   17298:	1c3b      	adds	r3, r7, #0
   1729a:	3368      	adds	r3, #104	; 0x68
   1729c:	2204      	movs	r2, #4
   1729e:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = CONF_CLOCK_DFLL_ON_DEMAND;
   172a0:	1c3b      	adds	r3, r7, #0
   172a2:	3368      	adds	r3, #104	; 0x68
   172a4:	2201      	movs	r2, #1
   172a6:	709a      	strb	r2, [r3, #2]
	dfll_conf.run_in_standby = CONF_CLOCK_DFLL_RUN_IN_STANDBY;
   172a8:	1c3b      	adds	r3, r7, #0
   172aa:	3368      	adds	r3, #104	; 0x68
   172ac:	2200      	movs	r2, #0
   172ae:	705a      	strb	r2, [r3, #1]
		dfll_conf.coarse_value = CONF_CLOCK_DFLL_COARSE_VALUE;
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   172b0:	1c3b      	adds	r3, r7, #0
   172b2:	3368      	adds	r3, #104	; 0x68
   172b4:	2200      	movs	r2, #0
   172b6:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   172b8:	1c3b      	adds	r3, r7, #0
   172ba:	3368      	adds	r3, #104	; 0x68
   172bc:	2200      	movs	r2, #0
   172be:	725a      	strb	r2, [r3, #9]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   172c0:	1c3b      	adds	r3, r7, #0
   172c2:	3368      	adds	r3, #104	; 0x68
   172c4:	2200      	movs	r2, #0
   172c6:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
   172c8:	1c3b      	adds	r3, r7, #0
   172ca:	3368      	adds	r3, #104	; 0x68
   172cc:	2280      	movs	r2, #128	; 0x80
   172ce:	0052      	lsls	r2, r2, #1
   172d0:	80da      	strh	r2, [r3, #6]
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   172d2:	1c3b      	adds	r3, r7, #0
   172d4:	3368      	adds	r3, #104	; 0x68
   172d6:	220c      	movs	r2, #12
   172d8:	81da      	strh	r2, [r3, #14]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   172da:	1c3b      	adds	r3, r7, #0
   172dc:	3368      	adds	r3, #104	; 0x68
   172de:	2207      	movs	r2, #7
   172e0:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   172e2:	1c3b      	adds	r3, r7, #0
   172e4:	3368      	adds	r3, #104	; 0x68
   172e6:	223f      	movs	r2, #63	; 0x3f
   172e8:	735a      	strb	r2, [r3, #13]

	system_clock_source_dfll_set_config(&dfll_conf);
   172ea:	1c3b      	adds	r3, r7, #0
   172ec:	3368      	adds	r3, #104	; 0x68
   172ee:	1c18      	adds	r0, r3, #0
   172f0:	4b92      	ldr	r3, [pc, #584]	; (1753c <system_clock_init+0x380>)
   172f2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   172f4:	2007      	movs	r0, #7
   172f6:	4b8b      	ldr	r3, [pc, #556]	; (17524 <system_clock_init+0x368>)
   172f8:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   172fa:	1c3b      	adds	r3, r7, #0
   172fc:	3364      	adds	r3, #100	; 0x64
   172fe:	1c18      	adds	r0, r3, #0
   17300:	4b8f      	ldr	r3, [pc, #572]	; (17540 <system_clock_init+0x384>)
   17302:	4798      	blx	r3

	osc8m_conf.prescaler      = CONF_CLOCK_OSC8M_PRESCALER;
   17304:	1c3b      	adds	r3, r7, #0
   17306:	3364      	adds	r3, #100	; 0x64
   17308:	2200      	movs	r2, #0
   1730a:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand      = CONF_CLOCK_OSC8M_ON_DEMAND;
   1730c:	1c3b      	adds	r3, r7, #0
   1730e:	3364      	adds	r3, #100	; 0x64
   17310:	2201      	movs	r2, #1
   17312:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   17314:	1c3b      	adds	r3, r7, #0
   17316:	3364      	adds	r3, #100	; 0x64
   17318:	2200      	movs	r2, #0
   1731a:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   1731c:	1c3b      	adds	r3, r7, #0
   1731e:	3364      	adds	r3, #100	; 0x64
   17320:	1c18      	adds	r0, r3, #0
   17322:	4b88      	ldr	r3, [pc, #544]	; (17544 <system_clock_init+0x388>)
   17324:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   17326:	2006      	movs	r0, #6
   17328:	4b7e      	ldr	r3, [pc, #504]	; (17524 <system_clock_init+0x368>)
   1732a:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   1732c:	4b86      	ldr	r3, [pc, #536]	; (17548 <system_clock_init+0x38c>)
   1732e:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM_MSB, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   17330:	1c3b      	adds	r3, r7, #0
   17332:	334c      	adds	r3, #76	; 0x4c
   17334:	1c18      	adds	r0, r3, #0
   17336:	4b85      	ldr	r3, [pc, #532]	; (1754c <system_clock_init+0x390>)
   17338:	4798      	blx	r3
   1733a:	1c3b      	adds	r3, r7, #0
   1733c:	334c      	adds	r3, #76	; 0x4c
   1733e:	2207      	movs	r2, #7
   17340:	701a      	strb	r2, [r3, #0]
   17342:	1c3b      	adds	r3, r7, #0
   17344:	334c      	adds	r3, #76	; 0x4c
   17346:	2201      	movs	r2, #1
   17348:	605a      	str	r2, [r3, #4]
   1734a:	1c3b      	adds	r3, r7, #0
   1734c:	334c      	adds	r3, #76	; 0x4c
   1734e:	2200      	movs	r2, #0
   17350:	721a      	strb	r2, [r3, #8]
   17352:	1c3b      	adds	r3, r7, #0
   17354:	334c      	adds	r3, #76	; 0x4c
   17356:	2201      	movs	r2, #1
   17358:	725a      	strb	r2, [r3, #9]
   1735a:	1c3b      	adds	r3, r7, #0
   1735c:	334c      	adds	r3, #76	; 0x4c
   1735e:	2001      	movs	r0, #1
   17360:	1c19      	adds	r1, r3, #0
   17362:	4b7b      	ldr	r3, [pc, #492]	; (17550 <system_clock_init+0x394>)
   17364:	4798      	blx	r3
   17366:	2001      	movs	r0, #1
   17368:	4b7a      	ldr	r3, [pc, #488]	; (17554 <system_clock_init+0x398>)
   1736a:	4798      	blx	r3
   1736c:	1c3b      	adds	r3, r7, #0
   1736e:	3340      	adds	r3, #64	; 0x40
   17370:	1c18      	adds	r0, r3, #0
   17372:	4b76      	ldr	r3, [pc, #472]	; (1754c <system_clock_init+0x390>)
   17374:	4798      	blx	r3
   17376:	1c3b      	adds	r3, r7, #0
   17378:	3340      	adds	r3, #64	; 0x40
   1737a:	2204      	movs	r2, #4
   1737c:	701a      	strb	r2, [r3, #0]
   1737e:	1c3b      	adds	r3, r7, #0
   17380:	3340      	adds	r3, #64	; 0x40
   17382:	2220      	movs	r2, #32
   17384:	605a      	str	r2, [r3, #4]
   17386:	1c3b      	adds	r3, r7, #0
   17388:	3340      	adds	r3, #64	; 0x40
   1738a:	2201      	movs	r2, #1
   1738c:	721a      	strb	r2, [r3, #8]
   1738e:	1c3b      	adds	r3, r7, #0
   17390:	3340      	adds	r3, #64	; 0x40
   17392:	2201      	movs	r2, #1
   17394:	725a      	strb	r2, [r3, #9]
   17396:	1c3b      	adds	r3, r7, #0
   17398:	3340      	adds	r3, #64	; 0x40
   1739a:	2002      	movs	r0, #2
   1739c:	1c19      	adds	r1, r3, #0
   1739e:	4b6c      	ldr	r3, [pc, #432]	; (17550 <system_clock_init+0x394>)
   173a0:	4798      	blx	r3
   173a2:	2002      	movs	r0, #2
   173a4:	4b6b      	ldr	r3, [pc, #428]	; (17554 <system_clock_init+0x398>)
   173a6:	4798      	blx	r3
   173a8:	1c3b      	adds	r3, r7, #0
   173aa:	3334      	adds	r3, #52	; 0x34
   173ac:	1c18      	adds	r0, r3, #0
   173ae:	4b67      	ldr	r3, [pc, #412]	; (1754c <system_clock_init+0x390>)
   173b0:	4798      	blx	r3
   173b2:	1c3b      	adds	r3, r7, #0
   173b4:	3334      	adds	r3, #52	; 0x34
   173b6:	2206      	movs	r2, #6
   173b8:	701a      	strb	r2, [r3, #0]
   173ba:	1c3b      	adds	r3, r7, #0
   173bc:	3334      	adds	r3, #52	; 0x34
   173be:	2210      	movs	r2, #16
   173c0:	605a      	str	r2, [r3, #4]
   173c2:	1c3b      	adds	r3, r7, #0
   173c4:	3334      	adds	r3, #52	; 0x34
   173c6:	2200      	movs	r2, #0
   173c8:	721a      	strb	r2, [r3, #8]
   173ca:	1c3b      	adds	r3, r7, #0
   173cc:	3334      	adds	r3, #52	; 0x34
   173ce:	2201      	movs	r2, #1
   173d0:	725a      	strb	r2, [r3, #9]
   173d2:	1c3b      	adds	r3, r7, #0
   173d4:	3334      	adds	r3, #52	; 0x34
   173d6:	2003      	movs	r0, #3
   173d8:	1c19      	adds	r1, r3, #0
   173da:	4b5d      	ldr	r3, [pc, #372]	; (17550 <system_clock_init+0x394>)
   173dc:	4798      	blx	r3
   173de:	2003      	movs	r0, #3
   173e0:	4b5c      	ldr	r3, [pc, #368]	; (17554 <system_clock_init+0x398>)
   173e2:	4798      	blx	r3
   173e4:	1c3b      	adds	r3, r7, #0
   173e6:	3328      	adds	r3, #40	; 0x28
   173e8:	1c18      	adds	r0, r3, #0
   173ea:	4b58      	ldr	r3, [pc, #352]	; (1754c <system_clock_init+0x390>)
   173ec:	4798      	blx	r3
   173ee:	1c3b      	adds	r3, r7, #0
   173f0:	3328      	adds	r3, #40	; 0x28
   173f2:	2206      	movs	r2, #6
   173f4:	701a      	strb	r2, [r3, #0]
   173f6:	1c3b      	adds	r3, r7, #0
   173f8:	3328      	adds	r3, #40	; 0x28
   173fa:	2204      	movs	r2, #4
   173fc:	605a      	str	r2, [r3, #4]
   173fe:	1c3b      	adds	r3, r7, #0
   17400:	3328      	adds	r3, #40	; 0x28
   17402:	2200      	movs	r2, #0
   17404:	721a      	strb	r2, [r3, #8]
   17406:	1c3b      	adds	r3, r7, #0
   17408:	3328      	adds	r3, #40	; 0x28
   1740a:	2201      	movs	r2, #1
   1740c:	725a      	strb	r2, [r3, #9]
   1740e:	1c3b      	adds	r3, r7, #0
   17410:	3328      	adds	r3, #40	; 0x28
   17412:	2004      	movs	r0, #4
   17414:	1c19      	adds	r1, r3, #0
   17416:	4b4e      	ldr	r3, [pc, #312]	; (17550 <system_clock_init+0x394>)
   17418:	4798      	blx	r3
   1741a:	2004      	movs	r0, #4
   1741c:	4b4d      	ldr	r3, [pc, #308]	; (17554 <system_clock_init+0x398>)
   1741e:	4798      	blx	r3
   17420:	1c3b      	adds	r3, r7, #0
   17422:	331c      	adds	r3, #28
   17424:	1c18      	adds	r0, r3, #0
   17426:	4b49      	ldr	r3, [pc, #292]	; (1754c <system_clock_init+0x390>)
   17428:	4798      	blx	r3
   1742a:	1c3b      	adds	r3, r7, #0
   1742c:	331c      	adds	r3, #28
   1742e:	2207      	movs	r2, #7
   17430:	701a      	strb	r2, [r3, #0]
   17432:	1c3b      	adds	r3, r7, #0
   17434:	331c      	adds	r3, #28
   17436:	2202      	movs	r2, #2
   17438:	605a      	str	r2, [r3, #4]
   1743a:	1c3b      	adds	r3, r7, #0
   1743c:	331c      	adds	r3, #28
   1743e:	2201      	movs	r2, #1
   17440:	721a      	strb	r2, [r3, #8]
   17442:	1c3b      	adds	r3, r7, #0
   17444:	331c      	adds	r3, #28
   17446:	2201      	movs	r2, #1
   17448:	725a      	strb	r2, [r3, #9]
   1744a:	1c3b      	adds	r3, r7, #0
   1744c:	331c      	adds	r3, #28
   1744e:	2005      	movs	r0, #5
   17450:	1c19      	adds	r1, r3, #0
   17452:	4b3f      	ldr	r3, [pc, #252]	; (17550 <system_clock_init+0x394>)
   17454:	4798      	blx	r3
   17456:	2005      	movs	r0, #5
   17458:	4b3e      	ldr	r3, [pc, #248]	; (17554 <system_clock_init+0x398>)
   1745a:	4798      	blx	r3
   1745c:	1c3b      	adds	r3, r7, #0
   1745e:	3310      	adds	r3, #16
   17460:	1c18      	adds	r0, r3, #0
   17462:	4b3a      	ldr	r3, [pc, #232]	; (1754c <system_clock_init+0x390>)
   17464:	4798      	blx	r3
   17466:	1c3b      	adds	r3, r7, #0
   17468:	3310      	adds	r3, #16
   1746a:	2206      	movs	r2, #6
   1746c:	701a      	strb	r2, [r3, #0]
   1746e:	1c3b      	adds	r3, r7, #0
   17470:	3310      	adds	r3, #16
   17472:	2250      	movs	r2, #80	; 0x50
   17474:	605a      	str	r2, [r3, #4]
   17476:	1c3b      	adds	r3, r7, #0
   17478:	3310      	adds	r3, #16
   1747a:	2200      	movs	r2, #0
   1747c:	721a      	strb	r2, [r3, #8]
   1747e:	1c3b      	adds	r3, r7, #0
   17480:	3310      	adds	r3, #16
   17482:	2201      	movs	r2, #1
   17484:	725a      	strb	r2, [r3, #9]
   17486:	1c3b      	adds	r3, r7, #0
   17488:	3310      	adds	r3, #16
   1748a:	2006      	movs	r0, #6
   1748c:	1c19      	adds	r1, r3, #0
   1748e:	4b30      	ldr	r3, [pc, #192]	; (17550 <system_clock_init+0x394>)
   17490:	4798      	blx	r3
   17492:	2006      	movs	r0, #6
   17494:	4b2f      	ldr	r3, [pc, #188]	; (17554 <system_clock_init+0x398>)
   17496:	4798      	blx	r3
#  if (CONF_CLOCK_DFLL_ENABLE)
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
   17498:	1c3b      	adds	r3, r7, #0
   1749a:	330c      	adds	r3, #12
   1749c:	1c18      	adds	r0, r3, #0
   1749e:	4b2e      	ldr	r3, [pc, #184]	; (17558 <system_clock_init+0x39c>)
   174a0:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   174a2:	1c3b      	adds	r3, r7, #0
   174a4:	330c      	adds	r3, #12
   174a6:	2200      	movs	r2, #0
   174a8:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   174aa:	1c3b      	adds	r3, r7, #0
   174ac:	330c      	adds	r3, #12
   174ae:	2000      	movs	r0, #0
   174b0:	1c19      	adds	r1, r3, #0
   174b2:	4b2a      	ldr	r3, [pc, #168]	; (1755c <system_clock_init+0x3a0>)
   174b4:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   174b6:	2000      	movs	r0, #0
   174b8:	4b29      	ldr	r3, [pc, #164]	; (17560 <system_clock_init+0x3a4>)
   174ba:	4798      	blx	r3
	}
#  endif

	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   174bc:	1c3b      	adds	r3, r7, #0
   174be:	1c18      	adds	r0, r3, #0
   174c0:	4b22      	ldr	r3, [pc, #136]	; (1754c <system_clock_init+0x390>)
   174c2:	4798      	blx	r3
   174c4:	1c3b      	adds	r3, r7, #0
   174c6:	2206      	movs	r2, #6
   174c8:	701a      	strb	r2, [r3, #0]
   174ca:	1c3b      	adds	r3, r7, #0
   174cc:	2201      	movs	r2, #1
   174ce:	605a      	str	r2, [r3, #4]
   174d0:	1c3b      	adds	r3, r7, #0
   174d2:	2200      	movs	r2, #0
   174d4:	721a      	strb	r2, [r3, #8]
   174d6:	1c3b      	adds	r3, r7, #0
   174d8:	2201      	movs	r2, #1
   174da:	725a      	strb	r2, [r3, #9]
   174dc:	1c3b      	adds	r3, r7, #0
   174de:	2000      	movs	r0, #0
   174e0:	1c19      	adds	r1, r3, #0
   174e2:	4b1b      	ldr	r3, [pc, #108]	; (17550 <system_clock_init+0x394>)
   174e4:	4798      	blx	r3
   174e6:	2000      	movs	r0, #0
   174e8:	4b1a      	ldr	r3, [pc, #104]	; (17554 <system_clock_init+0x398>)
   174ea:	4798      	blx	r3
#endif


	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   174ec:	2000      	movs	r0, #0
   174ee:	4b1d      	ldr	r3, [pc, #116]	; (17564 <system_clock_init+0x3a8>)
   174f0:	4798      	blx	r3
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);
   174f2:	2001      	movs	r0, #1
   174f4:	4b1c      	ldr	r3, [pc, #112]	; (17568 <system_clock_init+0x3ac>)
   174f6:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   174f8:	2000      	movs	r0, #0
   174fa:	2100      	movs	r1, #0
   174fc:	4b1b      	ldr	r3, [pc, #108]	; (1756c <system_clock_init+0x3b0>)
   174fe:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   17500:	2001      	movs	r0, #1
   17502:	2100      	movs	r1, #0
   17504:	4b19      	ldr	r3, [pc, #100]	; (1756c <system_clock_init+0x3b0>)
   17506:	4798      	blx	r3
}
   17508:	46bd      	mov	sp, r7
   1750a:	b024      	add	sp, #144	; 0x90
   1750c:	bd80      	pop	{r7, pc}
   1750e:	46c0      	nop			; (mov r8, r8)
   17510:	40000800 	.word	0x40000800
   17514:	00003610 	.word	0x00003610
   17518:	00016cad 	.word	0x00016cad
   1751c:	000168d5 	.word	0x000168d5
   17520:	00016f55 	.word	0x00016f55
   17524:	000170d5 	.word	0x000170d5
   17528:	00806024 	.word	0x00806024
   1752c:	ff80ffff 	.word	0xff80ffff
   17530:	00016975 	.word	0x00016975
   17534:	00016ebd 	.word	0x00016ebd
   17538:	00016a7d 	.word	0x00016a7d
   1753c:	0001703d 	.word	0x0001703d
   17540:	000169fd 	.word	0x000169fd
   17544:	00016e55 	.word	0x00016e55
   17548:	00017679 	.word	0x00017679
   1754c:	000167c9 	.word	0x000167c9
   17550:	000176a9 	.word	0x000176a9
   17554:	00017835 	.word	0x00017835
   17558:	00016859 	.word	0x00016859
   1755c:	00017971 	.word	0x00017971
   17560:	00017a25 	.word	0x00017a25
   17564:	00016b75 	.word	0x00016b75
   17568:	00016b35 	.word	0x00016b35
   1756c:	00016c09 	.word	0x00016c09

00017570 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
   17570:	b580      	push	{r7, lr}
   17572:	af00      	add	r7, sp, #0
	return test_case_ptr;
   17574:	4b02      	ldr	r3, [pc, #8]	; (17580 <test_get_case+0x10>)
   17576:	681b      	ldr	r3, [r3, #0]
}
   17578:	1c18      	adds	r0, r3, #0
   1757a:	46bd      	mov	sp, r7
   1757c:	bd80      	pop	{r7, pc}
   1757e:	46c0      	nop			; (mov r8, r8)
   17580:	2000041c 	.word	0x2000041c

00017584 <system_gclk_is_syncing>:
 *
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   17584:	b580      	push	{r7, lr}
   17586:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) {
   17588:	4b07      	ldr	r3, [pc, #28]	; (175a8 <system_gclk_is_syncing+0x24>)
   1758a:	681b      	ldr	r3, [r3, #0]
   1758c:	041b      	lsls	r3, r3, #16
   1758e:	0e1b      	lsrs	r3, r3, #24
   17590:	b2db      	uxtb	r3, r3
   17592:	b2db      	uxtb	r3, r3
   17594:	b25b      	sxtb	r3, r3
   17596:	2b00      	cmp	r3, #0
   17598:	da01      	bge.n	1759e <system_gclk_is_syncing+0x1a>
		return true;
   1759a:	2301      	movs	r3, #1
   1759c:	e000      	b.n	175a0 <system_gclk_is_syncing+0x1c>
	}

	return false;
   1759e:	2300      	movs	r3, #0
}
   175a0:	1c18      	adds	r0, r3, #0
   175a2:	46bd      	mov	sp, r7
   175a4:	bd80      	pop	{r7, pc}
   175a6:	46c0      	nop			; (mov r8, r8)
   175a8:	40000c00 	.word	0x40000c00

000175ac <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   175ac:	b590      	push	{r4, r7, lr}
   175ae:	b085      	sub	sp, #20
   175b0:	af02      	add	r7, sp, #8
   175b2:	1c02      	adds	r2, r0, #0
   175b4:	6039      	str	r1, [r7, #0]
   175b6:	1dfb      	adds	r3, r7, #7
   175b8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   175ba:	1dfb      	adds	r3, r7, #7
   175bc:	781b      	ldrb	r3, [r3, #0]
   175be:	2b01      	cmp	r3, #1
   175c0:	d00a      	beq.n	175d8 <system_apb_clock_set_mask+0x2c>
   175c2:	2b02      	cmp	r3, #2
   175c4:	d00f      	beq.n	175e6 <system_apb_clock_set_mask+0x3a>
   175c6:	2b00      	cmp	r3, #0
   175c8:	d114      	bne.n	175f4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   175ca:	4b1a      	ldr	r3, [pc, #104]	; (17634 <system_apb_clock_set_mask+0x88>)
   175cc:	4a19      	ldr	r2, [pc, #100]	; (17634 <system_apb_clock_set_mask+0x88>)
   175ce:	6991      	ldr	r1, [r2, #24]
   175d0:	683a      	ldr	r2, [r7, #0]
   175d2:	430a      	orrs	r2, r1
   175d4:	619a      	str	r2, [r3, #24]
			break;
   175d6:	e028      	b.n	1762a <system_apb_clock_set_mask+0x7e>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   175d8:	4b16      	ldr	r3, [pc, #88]	; (17634 <system_apb_clock_set_mask+0x88>)
   175da:	4a16      	ldr	r2, [pc, #88]	; (17634 <system_apb_clock_set_mask+0x88>)
   175dc:	69d1      	ldr	r1, [r2, #28]
   175de:	683a      	ldr	r2, [r7, #0]
   175e0:	430a      	orrs	r2, r1
   175e2:	61da      	str	r2, [r3, #28]
			break;
   175e4:	e021      	b.n	1762a <system_apb_clock_set_mask+0x7e>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   175e6:	4b13      	ldr	r3, [pc, #76]	; (17634 <system_apb_clock_set_mask+0x88>)
   175e8:	4a12      	ldr	r2, [pc, #72]	; (17634 <system_apb_clock_set_mask+0x88>)
   175ea:	6a11      	ldr	r1, [r2, #32]
   175ec:	683a      	ldr	r2, [r7, #0]
   175ee:	430a      	orrs	r2, r1
   175f0:	621a      	str	r2, [r3, #32]
			break;
   175f2:	e01a      	b.n	1762a <system_apb_clock_set_mask+0x7e>

		default:
			Assert(false);
   175f4:	4b10      	ldr	r3, [pc, #64]	; (17638 <system_apb_clock_set_mask+0x8c>)
   175f6:	4798      	blx	r3
   175f8:	1c03      	adds	r3, r0, #0
   175fa:	2b00      	cmp	r3, #0
   175fc:	d00e      	beq.n	1761c <system_apb_clock_set_mask+0x70>
   175fe:	4b0e      	ldr	r3, [pc, #56]	; (17638 <system_apb_clock_set_mask+0x8c>)
   17600:	4798      	blx	r3
   17602:	1c01      	adds	r1, r0, #0
   17604:	4a0d      	ldr	r2, [pc, #52]	; (1763c <system_apb_clock_set_mask+0x90>)
   17606:	4b0e      	ldr	r3, [pc, #56]	; (17640 <system_apb_clock_set_mask+0x94>)
   17608:	480e      	ldr	r0, [pc, #56]	; (17644 <system_apb_clock_set_mask+0x98>)
   1760a:	9000      	str	r0, [sp, #0]
   1760c:	480e      	ldr	r0, [pc, #56]	; (17648 <system_apb_clock_set_mask+0x9c>)
   1760e:	9001      	str	r0, [sp, #4]
   17610:	1c08      	adds	r0, r1, #0
   17612:	2101      	movs	r1, #1
   17614:	4c0d      	ldr	r4, [pc, #52]	; (1764c <system_apb_clock_set_mask+0xa0>)
   17616:	47a0      	blx	r4
			return STATUS_ERR_INVALID_ARG;
   17618:	2317      	movs	r3, #23
   1761a:	e007      	b.n	1762c <system_apb_clock_set_mask+0x80>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
			break;

		default:
			Assert(false);
   1761c:	480c      	ldr	r0, [pc, #48]	; (17650 <system_apb_clock_set_mask+0xa4>)
   1761e:	490a      	ldr	r1, [pc, #40]	; (17648 <system_apb_clock_set_mask+0x9c>)
   17620:	4a06      	ldr	r2, [pc, #24]	; (1763c <system_apb_clock_set_mask+0x90>)
   17622:	4b07      	ldr	r3, [pc, #28]	; (17640 <system_apb_clock_set_mask+0x94>)
   17624:	4c0b      	ldr	r4, [pc, #44]	; (17654 <system_apb_clock_set_mask+0xa8>)
   17626:	47a0      	blx	r4
   17628:	e7fe      	b.n	17628 <system_apb_clock_set_mask+0x7c>
			return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
   1762a:	2300      	movs	r3, #0
}
   1762c:	1c18      	adds	r0, r3, #0
   1762e:	46bd      	mov	sp, r7
   17630:	b003      	add	sp, #12
   17632:	bd90      	pop	{r4, r7, pc}
   17634:	40000400 	.word	0x40000400
   17638:	00017571 	.word	0x00017571
   1763c:	00026adc 	.word	0x00026adc
   17640:	00000409 	.word	0x00000409
   17644:	00026b0c 	.word	0x00026b0c
   17648:	00026b24 	.word	0x00026b24
   1764c:	000106e9 	.word	0x000106e9
   17650:	00026b2c 	.word	0x00026b2c
   17654:	0001b62d 	.word	0x0001b62d

00017658 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
   17658:	b580      	push	{r7, lr}
   1765a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1765c:	4b01      	ldr	r3, [pc, #4]	; (17664 <system_interrupt_enter_critical_section+0xc>)
   1765e:	4798      	blx	r3
}
   17660:	46bd      	mov	sp, r7
   17662:	bd80      	pop	{r7, pc}
   17664:	000105f1 	.word	0x000105f1

00017668 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
   17668:	b580      	push	{r7, lr}
   1766a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   1766c:	4b01      	ldr	r3, [pc, #4]	; (17674 <system_interrupt_leave_critical_section+0xc>)
   1766e:	4798      	blx	r3
}
   17670:	46bd      	mov	sp, r7
   17672:	bd80      	pop	{r7, pc}
   17674:	00010641 	.word	0x00010641

00017678 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   17678:	b580      	push	{r7, lr}
   1767a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   1767c:	2000      	movs	r0, #0
   1767e:	2108      	movs	r1, #8
   17680:	4b07      	ldr	r3, [pc, #28]	; (176a0 <system_gclk_init+0x28>)
   17682:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   17684:	4b07      	ldr	r3, [pc, #28]	; (176a4 <system_gclk_init+0x2c>)
   17686:	2201      	movs	r2, #1
   17688:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   1768a:	46c0      	nop			; (mov r8, r8)
   1768c:	4b05      	ldr	r3, [pc, #20]	; (176a4 <system_gclk_init+0x2c>)
   1768e:	681b      	ldr	r3, [r3, #0]
   17690:	b2db      	uxtb	r3, r3
   17692:	1c1a      	adds	r2, r3, #0
   17694:	2301      	movs	r3, #1
   17696:	4013      	ands	r3, r2
   17698:	d1f8      	bne.n	1768c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   1769a:	46bd      	mov	sp, r7
   1769c:	bd80      	pop	{r7, pc}
   1769e:	46c0      	nop			; (mov r8, r8)
   176a0:	000175ad 	.word	0x000175ad
   176a4:	40000c00 	.word	0x40000c00

000176a8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   176a8:	b590      	push	{r4, r7, lr}
   176aa:	b089      	sub	sp, #36	; 0x24
   176ac:	af02      	add	r7, sp, #8
   176ae:	1c02      	adds	r2, r0, #0
   176b0:	6039      	str	r1, [r7, #0]
   176b2:	1dfb      	adds	r3, r7, #7
   176b4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);
   176b6:	4b53      	ldr	r3, [pc, #332]	; (17804 <system_gclk_gen_set_config+0x15c>)
   176b8:	4798      	blx	r3
   176ba:	1c03      	adds	r3, r0, #0
   176bc:	2b00      	cmp	r3, #0
   176be:	d011      	beq.n	176e4 <system_gclk_gen_set_config+0x3c>
   176c0:	683b      	ldr	r3, [r7, #0]
   176c2:	2b00      	cmp	r3, #0
   176c4:	d11b      	bne.n	176fe <system_gclk_gen_set_config+0x56>
   176c6:	4b4f      	ldr	r3, [pc, #316]	; (17804 <system_gclk_gen_set_config+0x15c>)
   176c8:	4798      	blx	r3
   176ca:	1c02      	adds	r2, r0, #0
   176cc:	4b4e      	ldr	r3, [pc, #312]	; (17808 <system_gclk_gen_set_config+0x160>)
   176ce:	494f      	ldr	r1, [pc, #316]	; (1780c <system_gclk_gen_set_config+0x164>)
   176d0:	9100      	str	r1, [sp, #0]
   176d2:	494f      	ldr	r1, [pc, #316]	; (17810 <system_gclk_gen_set_config+0x168>)
   176d4:	9101      	str	r1, [sp, #4]
   176d6:	1c10      	adds	r0, r2, #0
   176d8:	2101      	movs	r1, #1
   176da:	1c1a      	adds	r2, r3, #0
   176dc:	235b      	movs	r3, #91	; 0x5b
   176de:	4c4d      	ldr	r4, [pc, #308]	; (17814 <system_gclk_gen_set_config+0x16c>)
   176e0:	47a0      	blx	r4
   176e2:	e00c      	b.n	176fe <system_gclk_gen_set_config+0x56>
   176e4:	683b      	ldr	r3, [r7, #0]
   176e6:	2b00      	cmp	r3, #0
   176e8:	d109      	bne.n	176fe <system_gclk_gen_set_config+0x56>
   176ea:	494b      	ldr	r1, [pc, #300]	; (17818 <system_gclk_gen_set_config+0x170>)
   176ec:	4a48      	ldr	r2, [pc, #288]	; (17810 <system_gclk_gen_set_config+0x168>)
   176ee:	4b46      	ldr	r3, [pc, #280]	; (17808 <system_gclk_gen_set_config+0x160>)
   176f0:	1c08      	adds	r0, r1, #0
   176f2:	1c11      	adds	r1, r2, #0
   176f4:	1c1a      	adds	r2, r3, #0
   176f6:	235b      	movs	r3, #91	; 0x5b
   176f8:	4c48      	ldr	r4, [pc, #288]	; (1781c <system_gclk_gen_set_config+0x174>)
   176fa:	47a0      	blx	r4
   176fc:	e7fe      	b.n	176fc <system_gclk_gen_set_config+0x54>

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   176fe:	1dfb      	adds	r3, r7, #7
   17700:	781b      	ldrb	r3, [r3, #0]
   17702:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   17704:	1dfb      	adds	r3, r7, #7
   17706:	781b      	ldrb	r3, [r3, #0]
   17708:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   1770a:	683b      	ldr	r3, [r7, #0]
   1770c:	781b      	ldrb	r3, [r3, #0]
   1770e:	021b      	lsls	r3, r3, #8
   17710:	697a      	ldr	r2, [r7, #20]
   17712:	4313      	orrs	r3, r2
   17714:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   17716:	683b      	ldr	r3, [r7, #0]
   17718:	785b      	ldrb	r3, [r3, #1]
   1771a:	2b00      	cmp	r3, #0
   1771c:	d004      	beq.n	17728 <system_gclk_gen_set_config+0x80>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   1771e:	697b      	ldr	r3, [r7, #20]
   17720:	2280      	movs	r2, #128	; 0x80
   17722:	02d2      	lsls	r2, r2, #11
   17724:	4313      	orrs	r3, r2
   17726:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   17728:	683b      	ldr	r3, [r7, #0]
   1772a:	7a5b      	ldrb	r3, [r3, #9]
   1772c:	2b00      	cmp	r3, #0
   1772e:	d004      	beq.n	1773a <system_gclk_gen_set_config+0x92>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   17730:	697b      	ldr	r3, [r7, #20]
   17732:	2280      	movs	r2, #128	; 0x80
   17734:	0312      	lsls	r2, r2, #12
   17736:	4313      	orrs	r3, r2
   17738:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   1773a:	683b      	ldr	r3, [r7, #0]
   1773c:	685b      	ldr	r3, [r3, #4]
   1773e:	2b01      	cmp	r3, #1
   17740:	d92c      	bls.n	1779c <system_gclk_gen_set_config+0xf4>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   17742:	683b      	ldr	r3, [r7, #0]
   17744:	685a      	ldr	r2, [r3, #4]
   17746:	683b      	ldr	r3, [r7, #0]
   17748:	685b      	ldr	r3, [r3, #4]
   1774a:	3b01      	subs	r3, #1
   1774c:	4013      	ands	r3, r2
   1774e:	d11a      	bne.n	17786 <system_gclk_gen_set_config+0xde>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   17750:	2300      	movs	r3, #0
   17752:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   17754:	2302      	movs	r3, #2
   17756:	60bb      	str	r3, [r7, #8]
   17758:	e005      	b.n	17766 <system_gclk_gen_set_config+0xbe>
						mask <<= 1) {
				div2_count++;
   1775a:	68fb      	ldr	r3, [r7, #12]
   1775c:	3301      	adds	r3, #1
   1775e:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
   17760:	68bb      	ldr	r3, [r7, #8]
   17762:	005b      	lsls	r3, r3, #1
   17764:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   17766:	683b      	ldr	r3, [r7, #0]
   17768:	685a      	ldr	r2, [r3, #4]
   1776a:	68bb      	ldr	r3, [r7, #8]
   1776c:	429a      	cmp	r2, r3
   1776e:	d8f4      	bhi.n	1775a <system_gclk_gen_set_config+0xb2>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   17770:	68fb      	ldr	r3, [r7, #12]
   17772:	021b      	lsls	r3, r3, #8
   17774:	693a      	ldr	r2, [r7, #16]
   17776:	4313      	orrs	r3, r2
   17778:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   1777a:	697b      	ldr	r3, [r7, #20]
   1777c:	2280      	movs	r2, #128	; 0x80
   1777e:	0352      	lsls	r2, r2, #13
   17780:	4313      	orrs	r3, r2
   17782:	617b      	str	r3, [r7, #20]
   17784:	e00a      	b.n	1779c <system_gclk_gen_set_config+0xf4>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   17786:	683b      	ldr	r3, [r7, #0]
   17788:	685b      	ldr	r3, [r3, #4]
   1778a:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
   1778c:	693a      	ldr	r2, [r7, #16]
   1778e:	4313      	orrs	r3, r2
   17790:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   17792:	697b      	ldr	r3, [r7, #20]
   17794:	2280      	movs	r2, #128	; 0x80
   17796:	0292      	lsls	r2, r2, #10
   17798:	4313      	orrs	r3, r2
   1779a:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   1779c:	683b      	ldr	r3, [r7, #0]
   1779e:	7a1b      	ldrb	r3, [r3, #8]
   177a0:	2b00      	cmp	r3, #0
   177a2:	d005      	beq.n	177b0 <system_gclk_gen_set_config+0x108>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   177a4:	697b      	ldr	r3, [r7, #20]
   177a6:	2280      	movs	r2, #128	; 0x80
   177a8:	0392      	lsls	r2, r2, #14
   177aa:	4313      	orrs	r3, r2
   177ac:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   177ae:	e7ff      	b.n	177b0 <system_gclk_gen_set_config+0x108>
   177b0:	46c0      	nop			; (mov r8, r8)
   177b2:	4b1b      	ldr	r3, [pc, #108]	; (17820 <system_gclk_gen_set_config+0x178>)
   177b4:	4798      	blx	r3
   177b6:	1c03      	adds	r3, r0, #0
   177b8:	2b00      	cmp	r3, #0
   177ba:	d1fa      	bne.n	177b2 <system_gclk_gen_set_config+0x10a>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   177bc:	4b19      	ldr	r3, [pc, #100]	; (17824 <system_gclk_gen_set_config+0x17c>)
   177be:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   177c0:	4b19      	ldr	r3, [pc, #100]	; (17828 <system_gclk_gen_set_config+0x180>)
   177c2:	1dfa      	adds	r2, r7, #7
   177c4:	7812      	ldrb	r2, [r2, #0]
   177c6:	701a      	strb	r2, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   177c8:	46c0      	nop			; (mov r8, r8)
   177ca:	4b15      	ldr	r3, [pc, #84]	; (17820 <system_gclk_gen_set_config+0x178>)
   177cc:	4798      	blx	r3
   177ce:	1c03      	adds	r3, r0, #0
   177d0:	2b00      	cmp	r3, #0
   177d2:	d1fa      	bne.n	177ca <system_gclk_gen_set_config+0x122>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   177d4:	4b15      	ldr	r3, [pc, #84]	; (1782c <system_gclk_gen_set_config+0x184>)
   177d6:	693a      	ldr	r2, [r7, #16]
   177d8:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   177da:	46c0      	nop			; (mov r8, r8)
   177dc:	4b10      	ldr	r3, [pc, #64]	; (17820 <system_gclk_gen_set_config+0x178>)
   177de:	4798      	blx	r3
   177e0:	1c03      	adds	r3, r0, #0
   177e2:	2b00      	cmp	r3, #0
   177e4:	d1fa      	bne.n	177dc <system_gclk_gen_set_config+0x134>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   177e6:	4b11      	ldr	r3, [pc, #68]	; (1782c <system_gclk_gen_set_config+0x184>)
   177e8:	4a10      	ldr	r2, [pc, #64]	; (1782c <system_gclk_gen_set_config+0x184>)
   177ea:	6851      	ldr	r1, [r2, #4]
   177ec:	2280      	movs	r2, #128	; 0x80
   177ee:	0252      	lsls	r2, r2, #9
   177f0:	4011      	ands	r1, r2
   177f2:	697a      	ldr	r2, [r7, #20]
   177f4:	430a      	orrs	r2, r1
   177f6:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   177f8:	4b0d      	ldr	r3, [pc, #52]	; (17830 <system_gclk_gen_set_config+0x188>)
   177fa:	4798      	blx	r3
}
   177fc:	46bd      	mov	sp, r7
   177fe:	b007      	add	sp, #28
   17800:	bd90      	pop	{r4, r7, pc}
   17802:	46c0      	nop			; (mov r8, r8)
   17804:	00017571 	.word	0x00017571
   17808:	00026b50 	.word	0x00026b50
   1780c:	00026b0c 	.word	0x00026b0c
   17810:	00026b7c 	.word	0x00026b7c
   17814:	000106e9 	.word	0x000106e9
   17818:	00026b2c 	.word	0x00026b2c
   1781c:	0001b62d 	.word	0x0001b62d
   17820:	00017585 	.word	0x00017585
   17824:	00017659 	.word	0x00017659
   17828:	40000c08 	.word	0x40000c08
   1782c:	40000c00 	.word	0x40000c00
   17830:	00017669 	.word	0x00017669

00017834 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   17834:	b580      	push	{r7, lr}
   17836:	b082      	sub	sp, #8
   17838:	af00      	add	r7, sp, #0
   1783a:	1c02      	adds	r2, r0, #0
   1783c:	1dfb      	adds	r3, r7, #7
   1783e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   17840:	46c0      	nop			; (mov r8, r8)
   17842:	4b0e      	ldr	r3, [pc, #56]	; (1787c <system_gclk_gen_enable+0x48>)
   17844:	4798      	blx	r3
   17846:	1c03      	adds	r3, r0, #0
   17848:	2b00      	cmp	r3, #0
   1784a:	d1fa      	bne.n	17842 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1784c:	4b0c      	ldr	r3, [pc, #48]	; (17880 <system_gclk_gen_enable+0x4c>)
   1784e:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   17850:	4b0c      	ldr	r3, [pc, #48]	; (17884 <system_gclk_gen_enable+0x50>)
   17852:	1dfa      	adds	r2, r7, #7
   17854:	7812      	ldrb	r2, [r2, #0]
   17856:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   17858:	46c0      	nop			; (mov r8, r8)
   1785a:	4b08      	ldr	r3, [pc, #32]	; (1787c <system_gclk_gen_enable+0x48>)
   1785c:	4798      	blx	r3
   1785e:	1c03      	adds	r3, r0, #0
   17860:	2b00      	cmp	r3, #0
   17862:	d1fa      	bne.n	1785a <system_gclk_gen_enable+0x26>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   17864:	4b08      	ldr	r3, [pc, #32]	; (17888 <system_gclk_gen_enable+0x54>)
   17866:	4a08      	ldr	r2, [pc, #32]	; (17888 <system_gclk_gen_enable+0x54>)
   17868:	6852      	ldr	r2, [r2, #4]
   1786a:	2180      	movs	r1, #128	; 0x80
   1786c:	0249      	lsls	r1, r1, #9
   1786e:	430a      	orrs	r2, r1
   17870:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   17872:	4b06      	ldr	r3, [pc, #24]	; (1788c <system_gclk_gen_enable+0x58>)
   17874:	4798      	blx	r3
}
   17876:	46bd      	mov	sp, r7
   17878:	b002      	add	sp, #8
   1787a:	bd80      	pop	{r7, pc}
   1787c:	00017585 	.word	0x00017585
   17880:	00017659 	.word	0x00017659
   17884:	40000c04 	.word	0x40000c04
   17888:	40000c00 	.word	0x40000c00
   1788c:	00017669 	.word	0x00017669

00017890 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   17890:	b580      	push	{r7, lr}
   17892:	b086      	sub	sp, #24
   17894:	af00      	add	r7, sp, #0
   17896:	1c02      	adds	r2, r0, #0
   17898:	1dfb      	adds	r3, r7, #7
   1789a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   1789c:	46c0      	nop			; (mov r8, r8)
   1789e:	4b2c      	ldr	r3, [pc, #176]	; (17950 <system_gclk_gen_get_hz+0xc0>)
   178a0:	4798      	blx	r3
   178a2:	1c03      	adds	r3, r0, #0
   178a4:	2b00      	cmp	r3, #0
   178a6:	d1fa      	bne.n	1789e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   178a8:	4b2a      	ldr	r3, [pc, #168]	; (17954 <system_gclk_gen_get_hz+0xc4>)
   178aa:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   178ac:	4b2a      	ldr	r3, [pc, #168]	; (17958 <system_gclk_gen_get_hz+0xc8>)
   178ae:	1dfa      	adds	r2, r7, #7
   178b0:	7812      	ldrb	r2, [r2, #0]
   178b2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   178b4:	46c0      	nop			; (mov r8, r8)
   178b6:	4b26      	ldr	r3, [pc, #152]	; (17950 <system_gclk_gen_get_hz+0xc0>)
   178b8:	4798      	blx	r3
   178ba:	1c03      	adds	r3, r0, #0
   178bc:	2b00      	cmp	r3, #0
   178be:	d1fa      	bne.n	178b6 <system_gclk_gen_get_hz+0x26>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   178c0:	4b26      	ldr	r3, [pc, #152]	; (1795c <system_gclk_gen_get_hz+0xcc>)
   178c2:	685b      	ldr	r3, [r3, #4]
   178c4:	04db      	lsls	r3, r3, #19
   178c6:	0edb      	lsrs	r3, r3, #27
   178c8:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
   178ca:	1c18      	adds	r0, r3, #0
   178cc:	4b24      	ldr	r3, [pc, #144]	; (17960 <system_gclk_gen_get_hz+0xd0>)
   178ce:	4798      	blx	r3
   178d0:	1c03      	adds	r3, r0, #0
   178d2:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   178d4:	4b20      	ldr	r3, [pc, #128]	; (17958 <system_gclk_gen_get_hz+0xc8>)
   178d6:	1dfa      	adds	r2, r7, #7
   178d8:	7812      	ldrb	r2, [r2, #0]
   178da:	701a      	strb	r2, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   178dc:	4b1f      	ldr	r3, [pc, #124]	; (1795c <system_gclk_gen_get_hz+0xcc>)
   178de:	685b      	ldr	r3, [r3, #4]
   178e0:	02db      	lsls	r3, r3, #11
   178e2:	0fdb      	lsrs	r3, r3, #31
   178e4:	b2da      	uxtb	r2, r3
   178e6:	1c3b      	adds	r3, r7, #0
   178e8:	3313      	adds	r3, #19
   178ea:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   178ec:	4b1d      	ldr	r3, [pc, #116]	; (17964 <system_gclk_gen_get_hz+0xd4>)
   178ee:	1dfa      	adds	r2, r7, #7
   178f0:	7812      	ldrb	r2, [r2, #0]
   178f2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   178f4:	46c0      	nop			; (mov r8, r8)
   178f6:	4b16      	ldr	r3, [pc, #88]	; (17950 <system_gclk_gen_get_hz+0xc0>)
   178f8:	4798      	blx	r3
   178fa:	1c03      	adds	r3, r0, #0
   178fc:	2b00      	cmp	r3, #0
   178fe:	d1fa      	bne.n	178f6 <system_gclk_gen_get_hz+0x66>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   17900:	4b16      	ldr	r3, [pc, #88]	; (1795c <system_gclk_gen_get_hz+0xcc>)
   17902:	689b      	ldr	r3, [r3, #8]
   17904:	021b      	lsls	r3, r3, #8
   17906:	0c1b      	lsrs	r3, r3, #16
   17908:	b29b      	uxth	r3, r3
   1790a:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   1790c:	4b16      	ldr	r3, [pc, #88]	; (17968 <system_gclk_gen_get_hz+0xd8>)
   1790e:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   17910:	1c3b      	adds	r3, r7, #0
   17912:	3313      	adds	r3, #19
   17914:	781b      	ldrb	r3, [r3, #0]
   17916:	2b00      	cmp	r3, #0
   17918:	d109      	bne.n	1792e <system_gclk_gen_get_hz+0x9e>
   1791a:	68fb      	ldr	r3, [r7, #12]
   1791c:	2b01      	cmp	r3, #1
   1791e:	d906      	bls.n	1792e <system_gclk_gen_get_hz+0x9e>
		gen_input_hz /= divider;
   17920:	4b12      	ldr	r3, [pc, #72]	; (1796c <system_gclk_gen_get_hz+0xdc>)
   17922:	6978      	ldr	r0, [r7, #20]
   17924:	68f9      	ldr	r1, [r7, #12]
   17926:	4798      	blx	r3
   17928:	1c03      	adds	r3, r0, #0
   1792a:	617b      	str	r3, [r7, #20]
   1792c:	e00b      	b.n	17946 <system_gclk_gen_get_hz+0xb6>
	} else if (divsel) {
   1792e:	1c3b      	adds	r3, r7, #0
   17930:	3313      	adds	r3, #19
   17932:	781b      	ldrb	r3, [r3, #0]
   17934:	2b00      	cmp	r3, #0
   17936:	d006      	beq.n	17946 <system_gclk_gen_get_hz+0xb6>
		gen_input_hz >>= (divider+1);
   17938:	68fb      	ldr	r3, [r7, #12]
   1793a:	3301      	adds	r3, #1
   1793c:	697a      	ldr	r2, [r7, #20]
   1793e:	1c11      	adds	r1, r2, #0
   17940:	40d9      	lsrs	r1, r3
   17942:	1c0b      	adds	r3, r1, #0
   17944:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   17946:	697b      	ldr	r3, [r7, #20]
}
   17948:	1c18      	adds	r0, r3, #0
   1794a:	46bd      	mov	sp, r7
   1794c:	b006      	add	sp, #24
   1794e:	bd80      	pop	{r7, pc}
   17950:	00017585 	.word	0x00017585
   17954:	00017659 	.word	0x00017659
   17958:	40000c04 	.word	0x40000c04
   1795c:	40000c00 	.word	0x40000c00
   17960:	00016db1 	.word	0x00016db1
   17964:	40000c08 	.word	0x40000c08
   17968:	00017669 	.word	0x00017669
   1796c:	0001f42d 	.word	0x0001f42d

00017970 <system_gclk_chan_set_config>:
 * \param[in] config    Configuration settings for the clock
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   17970:	b590      	push	{r4, r7, lr}
   17972:	b087      	sub	sp, #28
   17974:	af02      	add	r7, sp, #8
   17976:	1c02      	adds	r2, r0, #0
   17978:	6039      	str	r1, [r7, #0]
   1797a:	1dfb      	adds	r3, r7, #7
   1797c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);
   1797e:	4b20      	ldr	r3, [pc, #128]	; (17a00 <system_gclk_chan_set_config+0x90>)
   17980:	4798      	blx	r3
   17982:	1c03      	adds	r3, r0, #0
   17984:	2b00      	cmp	r3, #0
   17986:	d011      	beq.n	179ac <system_gclk_chan_set_config+0x3c>
   17988:	683b      	ldr	r3, [r7, #0]
   1798a:	2b00      	cmp	r3, #0
   1798c:	d119      	bne.n	179c2 <system_gclk_chan_set_config+0x52>
   1798e:	4b1c      	ldr	r3, [pc, #112]	; (17a00 <system_gclk_chan_set_config+0x90>)
   17990:	4798      	blx	r3
   17992:	1c01      	adds	r1, r0, #0
   17994:	4a1b      	ldr	r2, [pc, #108]	; (17a04 <system_gclk_chan_set_config+0x94>)
   17996:	2396      	movs	r3, #150	; 0x96
   17998:	005b      	lsls	r3, r3, #1
   1799a:	481b      	ldr	r0, [pc, #108]	; (17a08 <system_gclk_chan_set_config+0x98>)
   1799c:	9000      	str	r0, [sp, #0]
   1799e:	481b      	ldr	r0, [pc, #108]	; (17a0c <system_gclk_chan_set_config+0x9c>)
   179a0:	9001      	str	r0, [sp, #4]
   179a2:	1c08      	adds	r0, r1, #0
   179a4:	2101      	movs	r1, #1
   179a6:	4c1a      	ldr	r4, [pc, #104]	; (17a10 <system_gclk_chan_set_config+0xa0>)
   179a8:	47a0      	blx	r4
   179aa:	e00a      	b.n	179c2 <system_gclk_chan_set_config+0x52>
   179ac:	683b      	ldr	r3, [r7, #0]
   179ae:	2b00      	cmp	r3, #0
   179b0:	d107      	bne.n	179c2 <system_gclk_chan_set_config+0x52>
   179b2:	4818      	ldr	r0, [pc, #96]	; (17a14 <system_gclk_chan_set_config+0xa4>)
   179b4:	4915      	ldr	r1, [pc, #84]	; (17a0c <system_gclk_chan_set_config+0x9c>)
   179b6:	4a13      	ldr	r2, [pc, #76]	; (17a04 <system_gclk_chan_set_config+0x94>)
   179b8:	2396      	movs	r3, #150	; 0x96
   179ba:	005b      	lsls	r3, r3, #1
   179bc:	4c16      	ldr	r4, [pc, #88]	; (17a18 <system_gclk_chan_set_config+0xa8>)
   179be:	47a0      	blx	r4
   179c0:	e7fe      	b.n	179c0 <system_gclk_chan_set_config+0x50>

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   179c2:	1dfb      	adds	r3, r7, #7
   179c4:	781b      	ldrb	r3, [r3, #0]
   179c6:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   179c8:	683b      	ldr	r3, [r7, #0]
   179ca:	781b      	ldrb	r3, [r3, #0]
   179cc:	021b      	lsls	r3, r3, #8
   179ce:	68fa      	ldr	r2, [r7, #12]
   179d0:	4313      	orrs	r3, r2
   179d2:	60fb      	str	r3, [r7, #12]

	/* Enable write lock if requested to prevent further modification */
	if (config->write_lock) {
   179d4:	683b      	ldr	r3, [r7, #0]
   179d6:	785b      	ldrb	r3, [r3, #1]
   179d8:	2b00      	cmp	r3, #0
   179da:	d004      	beq.n	179e6 <system_gclk_chan_set_config+0x76>
		new_clkctrl_config |= GCLK_CLKCTRL_WRTLOCK;
   179dc:	68fb      	ldr	r3, [r7, #12]
   179de:	2280      	movs	r2, #128	; 0x80
   179e0:	0212      	lsls	r2, r2, #8
   179e2:	4313      	orrs	r3, r2
   179e4:	60fb      	str	r3, [r7, #12]
	}

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   179e6:	1dfb      	adds	r3, r7, #7
   179e8:	781b      	ldrb	r3, [r3, #0]
   179ea:	1c18      	adds	r0, r3, #0
   179ec:	4b0b      	ldr	r3, [pc, #44]	; (17a1c <system_gclk_chan_set_config+0xac>)
   179ee:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   179f0:	4b0b      	ldr	r3, [pc, #44]	; (17a20 <system_gclk_chan_set_config+0xb0>)
   179f2:	68fa      	ldr	r2, [r7, #12]
   179f4:	b292      	uxth	r2, r2
   179f6:	805a      	strh	r2, [r3, #2]
}
   179f8:	46bd      	mov	sp, r7
   179fa:	b005      	add	sp, #20
   179fc:	bd90      	pop	{r4, r7, pc}
   179fe:	46c0      	nop			; (mov r8, r8)
   17a00:	00017571 	.word	0x00017571
   17a04:	00026b50 	.word	0x00026b50
   17a08:	00026b0c 	.word	0x00026b0c
   17a0c:	00026b7c 	.word	0x00026b7c
   17a10:	000106e9 	.word	0x000106e9
   17a14:	00026b2c 	.word	0x00026b2c
   17a18:	0001b62d 	.word	0x0001b62d
   17a1c:	00017a6d 	.word	0x00017a6d
   17a20:	40000c00 	.word	0x40000c00

00017a24 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   17a24:	b580      	push	{r7, lr}
   17a26:	b082      	sub	sp, #8
   17a28:	af00      	add	r7, sp, #0
   17a2a:	1c02      	adds	r2, r0, #0
   17a2c:	1dfb      	adds	r3, r7, #7
   17a2e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   17a30:	4b0a      	ldr	r3, [pc, #40]	; (17a5c <system_gclk_chan_enable+0x38>)
   17a32:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   17a34:	4b0a      	ldr	r3, [pc, #40]	; (17a60 <system_gclk_chan_enable+0x3c>)
   17a36:	1dfa      	adds	r2, r7, #7
   17a38:	7812      	ldrb	r2, [r2, #0]
   17a3a:	701a      	strb	r2, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   17a3c:	4a09      	ldr	r2, [pc, #36]	; (17a64 <system_gclk_chan_enable+0x40>)
   17a3e:	4b09      	ldr	r3, [pc, #36]	; (17a64 <system_gclk_chan_enable+0x40>)
   17a40:	681b      	ldr	r3, [r3, #0]
   17a42:	0c1b      	lsrs	r3, r3, #16
   17a44:	b29b      	uxth	r3, r3
   17a46:	2180      	movs	r1, #128	; 0x80
   17a48:	01c9      	lsls	r1, r1, #7
   17a4a:	430b      	orrs	r3, r1
   17a4c:	b29b      	uxth	r3, r3
   17a4e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   17a50:	4b05      	ldr	r3, [pc, #20]	; (17a68 <system_gclk_chan_enable+0x44>)
   17a52:	4798      	blx	r3
}
   17a54:	46bd      	mov	sp, r7
   17a56:	b002      	add	sp, #8
   17a58:	bd80      	pop	{r7, pc}
   17a5a:	46c0      	nop			; (mov r8, r8)
   17a5c:	00017659 	.word	0x00017659
   17a60:	40000c02 	.word	0x40000c02
   17a64:	40000c00 	.word	0x40000c00
   17a68:	00017669 	.word	0x00017669

00017a6c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   17a6c:	b580      	push	{r7, lr}
   17a6e:	b082      	sub	sp, #8
   17a70:	af00      	add	r7, sp, #0
   17a72:	1c02      	adds	r2, r0, #0
   17a74:	1dfb      	adds	r3, r7, #7
   17a76:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   17a78:	4b0e      	ldr	r3, [pc, #56]	; (17ab4 <system_gclk_chan_disable+0x48>)
   17a7a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   17a7c:	4b0e      	ldr	r3, [pc, #56]	; (17ab8 <system_gclk_chan_disable+0x4c>)
   17a7e:	1dfa      	adds	r2, r7, #7
   17a80:	7812      	ldrb	r2, [r2, #0]
   17a82:	701a      	strb	r2, [r3, #0]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   17a84:	4a0d      	ldr	r2, [pc, #52]	; (17abc <system_gclk_chan_disable+0x50>)
   17a86:	4b0d      	ldr	r3, [pc, #52]	; (17abc <system_gclk_chan_disable+0x50>)
   17a88:	681b      	ldr	r3, [r3, #0]
   17a8a:	0c1b      	lsrs	r3, r3, #16
   17a8c:	b299      	uxth	r1, r3
   17a8e:	4b0c      	ldr	r3, [pc, #48]	; (17ac0 <system_gclk_chan_disable+0x54>)
   17a90:	400b      	ands	r3, r1
   17a92:	b29b      	uxth	r3, r3
   17a94:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   17a96:	46c0      	nop			; (mov r8, r8)
   17a98:	4b08      	ldr	r3, [pc, #32]	; (17abc <system_gclk_chan_disable+0x50>)
   17a9a:	681b      	ldr	r3, [r3, #0]
   17a9c:	0c1b      	lsrs	r3, r3, #16
   17a9e:	b29b      	uxth	r3, r3
   17aa0:	1c1a      	adds	r2, r3, #0
   17aa2:	2380      	movs	r3, #128	; 0x80
   17aa4:	01db      	lsls	r3, r3, #7
   17aa6:	4013      	ands	r3, r2
   17aa8:	d1f6      	bne.n	17a98 <system_gclk_chan_disable+0x2c>
		/* Wait for clock to become disabled */
	}

	system_interrupt_leave_critical_section();
   17aaa:	4b06      	ldr	r3, [pc, #24]	; (17ac4 <system_gclk_chan_disable+0x58>)
   17aac:	4798      	blx	r3
}
   17aae:	46bd      	mov	sp, r7
   17ab0:	b002      	add	sp, #8
   17ab2:	bd80      	pop	{r7, pc}
   17ab4:	00017659 	.word	0x00017659
   17ab8:	40000c02 	.word	0x40000c02
   17abc:	40000c00 	.word	0x40000c00
   17ac0:	ffffbfff 	.word	0xffffbfff
   17ac4:	00017669 	.word	0x00017669

00017ac8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   17ac8:	b580      	push	{r7, lr}
   17aca:	b084      	sub	sp, #16
   17acc:	af00      	add	r7, sp, #0
   17ace:	1c02      	adds	r2, r0, #0
   17ad0:	1dfb      	adds	r3, r7, #7
   17ad2:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   17ad4:	4b0d      	ldr	r3, [pc, #52]	; (17b0c <system_gclk_chan_get_hz+0x44>)
   17ad6:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   17ad8:	4b0d      	ldr	r3, [pc, #52]	; (17b10 <system_gclk_chan_get_hz+0x48>)
   17ada:	1dfa      	adds	r2, r7, #7
   17adc:	7812      	ldrb	r2, [r2, #0]
   17ade:	701a      	strb	r2, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   17ae0:	4b0c      	ldr	r3, [pc, #48]	; (17b14 <system_gclk_chan_get_hz+0x4c>)
   17ae2:	681b      	ldr	r3, [r3, #0]
   17ae4:	011b      	lsls	r3, r3, #4
   17ae6:	0f1b      	lsrs	r3, r3, #28
   17ae8:	b2da      	uxtb	r2, r3
   17aea:	1c3b      	adds	r3, r7, #0
   17aec:	330f      	adds	r3, #15
   17aee:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   17af0:	4b09      	ldr	r3, [pc, #36]	; (17b18 <system_gclk_chan_get_hz+0x50>)
   17af2:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   17af4:	1c3b      	adds	r3, r7, #0
   17af6:	330f      	adds	r3, #15
   17af8:	781b      	ldrb	r3, [r3, #0]
   17afa:	1c18      	adds	r0, r3, #0
   17afc:	4b07      	ldr	r3, [pc, #28]	; (17b1c <system_gclk_chan_get_hz+0x54>)
   17afe:	4798      	blx	r3
   17b00:	1c03      	adds	r3, r0, #0
}
   17b02:	1c18      	adds	r0, r3, #0
   17b04:	46bd      	mov	sp, r7
   17b06:	b004      	add	sp, #16
   17b08:	bd80      	pop	{r7, pc}
   17b0a:	46c0      	nop			; (mov r8, r8)
   17b0c:	00017659 	.word	0x00017659
   17b10:	40000c02 	.word	0x40000c02
   17b14:	40000c00 	.word	0x40000c00
   17b18:	00017669 	.word	0x00017669
   17b1c:	00017891 	.word	0x00017891

00017b20 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
   17b20:	b580      	push	{r7, lr}
   17b22:	af00      	add	r7, sp, #0
	return test_case_ptr;
   17b24:	4b02      	ldr	r3, [pc, #8]	; (17b30 <test_get_case+0x10>)
   17b26:	681b      	ldr	r3, [r3, #0]
}
   17b28:	1c18      	adds	r0, r3, #0
   17b2a:	46bd      	mov	sp, r7
   17b2c:	bd80      	pop	{r7, pc}
   17b2e:	46c0      	nop			; (mov r8, r8)
   17b30:	2000041c 	.word	0x2000041c

00017b34 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   17b34:	b590      	push	{r4, r7, lr}
   17b36:	b087      	sub	sp, #28
   17b38:	af02      	add	r7, sp, #8
   17b3a:	1c02      	adds	r2, r0, #0
   17b3c:	1dfb      	adds	r3, r7, #7
   17b3e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   17b40:	1c3b      	adds	r3, r7, #0
   17b42:	330f      	adds	r3, #15
   17b44:	1dfa      	adds	r2, r7, #7
   17b46:	7812      	ldrb	r2, [r2, #0]
   17b48:	09d2      	lsrs	r2, r2, #7
   17b4a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   17b4c:	1c3b      	adds	r3, r7, #0
   17b4e:	330e      	adds	r3, #14
   17b50:	1dfa      	adds	r2, r7, #7
   17b52:	7812      	ldrb	r2, [r2, #0]
   17b54:	0952      	lsrs	r2, r2, #5
   17b56:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   17b58:	4b1b      	ldr	r3, [pc, #108]	; (17bc8 <system_pinmux_get_group_from_gpio_pin+0x94>)
   17b5a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   17b5c:	1c3b      	adds	r3, r7, #0
   17b5e:	330f      	adds	r3, #15
   17b60:	781b      	ldrb	r3, [r3, #0]
   17b62:	2b00      	cmp	r3, #0
   17b64:	d10e      	bne.n	17b84 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
   17b66:	1c3b      	adds	r3, r7, #0
   17b68:	330f      	adds	r3, #15
   17b6a:	781b      	ldrb	r3, [r3, #0]
   17b6c:	009b      	lsls	r3, r3, #2
   17b6e:	2210      	movs	r2, #16
   17b70:	19d2      	adds	r2, r2, r7
   17b72:	18d3      	adds	r3, r2, r3
   17b74:	3b08      	subs	r3, #8
   17b76:	681a      	ldr	r2, [r3, #0]
   17b78:	1c3b      	adds	r3, r7, #0
   17b7a:	330e      	adds	r3, #14
   17b7c:	781b      	ldrb	r3, [r3, #0]
   17b7e:	01db      	lsls	r3, r3, #7
   17b80:	18d3      	adds	r3, r2, r3
   17b82:	e01c      	b.n	17bbe <system_pinmux_get_group_from_gpio_pin+0x8a>
	} else {
		Assert(false);
   17b84:	4b11      	ldr	r3, [pc, #68]	; (17bcc <system_pinmux_get_group_from_gpio_pin+0x98>)
   17b86:	4798      	blx	r3
   17b88:	1c03      	adds	r3, r0, #0
   17b8a:	2b00      	cmp	r3, #0
   17b8c:	d00f      	beq.n	17bae <system_pinmux_get_group_from_gpio_pin+0x7a>
   17b8e:	4b0f      	ldr	r3, [pc, #60]	; (17bcc <system_pinmux_get_group_from_gpio_pin+0x98>)
   17b90:	4798      	blx	r3
   17b92:	1c01      	adds	r1, r0, #0
   17b94:	4a0e      	ldr	r2, [pc, #56]	; (17bd0 <system_pinmux_get_group_from_gpio_pin+0x9c>)
   17b96:	2368      	movs	r3, #104	; 0x68
   17b98:	33ff      	adds	r3, #255	; 0xff
   17b9a:	480e      	ldr	r0, [pc, #56]	; (17bd4 <system_pinmux_get_group_from_gpio_pin+0xa0>)
   17b9c:	9000      	str	r0, [sp, #0]
   17b9e:	480e      	ldr	r0, [pc, #56]	; (17bd8 <system_pinmux_get_group_from_gpio_pin+0xa4>)
   17ba0:	9001      	str	r0, [sp, #4]
   17ba2:	1c08      	adds	r0, r1, #0
   17ba4:	2101      	movs	r1, #1
   17ba6:	4c0d      	ldr	r4, [pc, #52]	; (17bdc <system_pinmux_get_group_from_gpio_pin+0xa8>)
   17ba8:	47a0      	blx	r4
		return NULL;
   17baa:	2300      	movs	r3, #0
   17bac:	e007      	b.n	17bbe <system_pinmux_get_group_from_gpio_pin+0x8a>
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
   17bae:	480c      	ldr	r0, [pc, #48]	; (17be0 <system_pinmux_get_group_from_gpio_pin+0xac>)
   17bb0:	4909      	ldr	r1, [pc, #36]	; (17bd8 <system_pinmux_get_group_from_gpio_pin+0xa4>)
   17bb2:	4a07      	ldr	r2, [pc, #28]	; (17bd0 <system_pinmux_get_group_from_gpio_pin+0x9c>)
   17bb4:	2368      	movs	r3, #104	; 0x68
   17bb6:	33ff      	adds	r3, #255	; 0xff
   17bb8:	4c0a      	ldr	r4, [pc, #40]	; (17be4 <system_pinmux_get_group_from_gpio_pin+0xb0>)
   17bba:	47a0      	blx	r4
   17bbc:	e7fe      	b.n	17bbc <system_pinmux_get_group_from_gpio_pin+0x88>
		return NULL;
	}
}
   17bbe:	1c18      	adds	r0, r3, #0
   17bc0:	46bd      	mov	sp, r7
   17bc2:	b005      	add	sp, #20
   17bc4:	bd90      	pop	{r4, r7, pc}
   17bc6:	46c0      	nop			; (mov r8, r8)
   17bc8:	41004400 	.word	0x41004400
   17bcc:	00017b21 	.word	0x00017b21
   17bd0:	00026b84 	.word	0x00026b84
   17bd4:	00026bb4 	.word	0x00026bb4
   17bd8:	00026bcc 	.word	0x00026bcc
   17bdc:	000106e9 	.word	0x000106e9
   17be0:	00026bd4 	.word	0x00026bd4
   17be4:	0001b62d 	.word	0x0001b62d

00017be8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   17be8:	b590      	push	{r4, r7, lr}
   17bea:	b08b      	sub	sp, #44	; 0x2c
   17bec:	af02      	add	r7, sp, #8
   17bee:	60f8      	str	r0, [r7, #12]
   17bf0:	60b9      	str	r1, [r7, #8]
   17bf2:	607a      	str	r2, [r7, #4]
	Assert(port);
   17bf4:	4b55      	ldr	r3, [pc, #340]	; (17d4c <_system_pinmux_config+0x164>)
   17bf6:	4798      	blx	r3
   17bf8:	1c03      	adds	r3, r0, #0
   17bfa:	2b00      	cmp	r3, #0
   17bfc:	d011      	beq.n	17c22 <_system_pinmux_config+0x3a>
   17bfe:	68fb      	ldr	r3, [r7, #12]
   17c00:	2b00      	cmp	r3, #0
   17c02:	d11b      	bne.n	17c3c <_system_pinmux_config+0x54>
   17c04:	4b51      	ldr	r3, [pc, #324]	; (17d4c <_system_pinmux_config+0x164>)
   17c06:	4798      	blx	r3
   17c08:	1c02      	adds	r2, r0, #0
   17c0a:	4b51      	ldr	r3, [pc, #324]	; (17d50 <_system_pinmux_config+0x168>)
   17c0c:	4951      	ldr	r1, [pc, #324]	; (17d54 <_system_pinmux_config+0x16c>)
   17c0e:	9100      	str	r1, [sp, #0]
   17c10:	4951      	ldr	r1, [pc, #324]	; (17d58 <_system_pinmux_config+0x170>)
   17c12:	9101      	str	r1, [sp, #4]
   17c14:	1c10      	adds	r0, r2, #0
   17c16:	2101      	movs	r1, #1
   17c18:	1c1a      	adds	r2, r3, #0
   17c1a:	233e      	movs	r3, #62	; 0x3e
   17c1c:	4c4f      	ldr	r4, [pc, #316]	; (17d5c <_system_pinmux_config+0x174>)
   17c1e:	47a0      	blx	r4
   17c20:	e00c      	b.n	17c3c <_system_pinmux_config+0x54>
   17c22:	68fb      	ldr	r3, [r7, #12]
   17c24:	2b00      	cmp	r3, #0
   17c26:	d109      	bne.n	17c3c <_system_pinmux_config+0x54>
   17c28:	494d      	ldr	r1, [pc, #308]	; (17d60 <_system_pinmux_config+0x178>)
   17c2a:	4a4b      	ldr	r2, [pc, #300]	; (17d58 <_system_pinmux_config+0x170>)
   17c2c:	4b48      	ldr	r3, [pc, #288]	; (17d50 <_system_pinmux_config+0x168>)
   17c2e:	1c08      	adds	r0, r1, #0
   17c30:	1c11      	adds	r1, r2, #0
   17c32:	1c1a      	adds	r2, r3, #0
   17c34:	233e      	movs	r3, #62	; 0x3e
   17c36:	4c4b      	ldr	r4, [pc, #300]	; (17d64 <_system_pinmux_config+0x17c>)
   17c38:	47a0      	blx	r4
   17c3a:	e7fe      	b.n	17c3a <_system_pinmux_config+0x52>
	Assert(config);
   17c3c:	4b43      	ldr	r3, [pc, #268]	; (17d4c <_system_pinmux_config+0x164>)
   17c3e:	4798      	blx	r3
   17c40:	1c03      	adds	r3, r0, #0
   17c42:	2b00      	cmp	r3, #0
   17c44:	d011      	beq.n	17c6a <_system_pinmux_config+0x82>
   17c46:	687b      	ldr	r3, [r7, #4]
   17c48:	2b00      	cmp	r3, #0
   17c4a:	d11b      	bne.n	17c84 <_system_pinmux_config+0x9c>
   17c4c:	4b3f      	ldr	r3, [pc, #252]	; (17d4c <_system_pinmux_config+0x164>)
   17c4e:	4798      	blx	r3
   17c50:	1c02      	adds	r2, r0, #0
   17c52:	4b3f      	ldr	r3, [pc, #252]	; (17d50 <_system_pinmux_config+0x168>)
   17c54:	493f      	ldr	r1, [pc, #252]	; (17d54 <_system_pinmux_config+0x16c>)
   17c56:	9100      	str	r1, [sp, #0]
   17c58:	4943      	ldr	r1, [pc, #268]	; (17d68 <_system_pinmux_config+0x180>)
   17c5a:	9101      	str	r1, [sp, #4]
   17c5c:	1c10      	adds	r0, r2, #0
   17c5e:	2101      	movs	r1, #1
   17c60:	1c1a      	adds	r2, r3, #0
   17c62:	233f      	movs	r3, #63	; 0x3f
   17c64:	4c3d      	ldr	r4, [pc, #244]	; (17d5c <_system_pinmux_config+0x174>)
   17c66:	47a0      	blx	r4
   17c68:	e00c      	b.n	17c84 <_system_pinmux_config+0x9c>
   17c6a:	687b      	ldr	r3, [r7, #4]
   17c6c:	2b00      	cmp	r3, #0
   17c6e:	d109      	bne.n	17c84 <_system_pinmux_config+0x9c>
   17c70:	493b      	ldr	r1, [pc, #236]	; (17d60 <_system_pinmux_config+0x178>)
   17c72:	4a3d      	ldr	r2, [pc, #244]	; (17d68 <_system_pinmux_config+0x180>)
   17c74:	4b36      	ldr	r3, [pc, #216]	; (17d50 <_system_pinmux_config+0x168>)
   17c76:	1c08      	adds	r0, r1, #0
   17c78:	1c11      	adds	r1, r2, #0
   17c7a:	1c1a      	adds	r2, r3, #0
   17c7c:	233f      	movs	r3, #63	; 0x3f
   17c7e:	4c39      	ldr	r4, [pc, #228]	; (17d64 <_system_pinmux_config+0x17c>)
   17c80:	47a0      	blx	r4
   17c82:	e7fe      	b.n	17c82 <_system_pinmux_config+0x9a>

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   17c84:	2300      	movs	r3, #0
   17c86:	61fb      	str	r3, [r7, #28]

	/* Enable the pin peripheral mux flag if non-GPIO selected (pin mux will
	 * be written later) and store the new mux mask */
	if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   17c88:	687b      	ldr	r3, [r7, #4]
   17c8a:	781b      	ldrb	r3, [r3, #0]
   17c8c:	2b80      	cmp	r3, #128	; 0x80
   17c8e:	d00a      	beq.n	17ca6 <_system_pinmux_config+0xbe>
		pin_cfg |= PORT_WRCONFIG_PMUXEN;
   17c90:	69fb      	ldr	r3, [r7, #28]
   17c92:	2280      	movs	r2, #128	; 0x80
   17c94:	0252      	lsls	r2, r2, #9
   17c96:	4313      	orrs	r3, r2
   17c98:	61fb      	str	r3, [r7, #28]
		pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   17c9a:	687b      	ldr	r3, [r7, #4]
   17c9c:	781b      	ldrb	r3, [r3, #0]
   17c9e:	061b      	lsls	r3, r3, #24
   17ca0:	69fa      	ldr	r2, [r7, #28]
   17ca2:	4313      	orrs	r3, r2
   17ca4:	61fb      	str	r3, [r7, #28]
	}

	/* Check if the user has requested that the input buffer be enabled */
	if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   17ca6:	687b      	ldr	r3, [r7, #4]
   17ca8:	785b      	ldrb	r3, [r3, #1]
   17caa:	2b00      	cmp	r3, #0
   17cac:	d003      	beq.n	17cb6 <_system_pinmux_config+0xce>
			(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   17cae:	687b      	ldr	r3, [r7, #4]
   17cb0:	785b      	ldrb	r3, [r3, #1]
		pin_cfg |= PORT_WRCONFIG_PMUXEN;
		pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
	}

	/* Check if the user has requested that the input buffer be enabled */
	if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   17cb2:	2b02      	cmp	r3, #2
   17cb4:	d110      	bne.n	17cd8 <_system_pinmux_config+0xf0>
			(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
		/* Enable input buffer flag */
		pin_cfg |= PORT_WRCONFIG_INEN;
   17cb6:	69fb      	ldr	r3, [r7, #28]
   17cb8:	2280      	movs	r2, #128	; 0x80
   17cba:	0292      	lsls	r2, r2, #10
   17cbc:	4313      	orrs	r3, r2
   17cbe:	61fb      	str	r3, [r7, #28]

		/* Enable pull-up/pull-down control flag if requested */
		if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   17cc0:	687b      	ldr	r3, [r7, #4]
   17cc2:	789b      	ldrb	r3, [r3, #2]
   17cc4:	2b00      	cmp	r3, #0
   17cc6:	d004      	beq.n	17cd2 <_system_pinmux_config+0xea>
			pin_cfg |= PORT_WRCONFIG_PULLEN;
   17cc8:	69fb      	ldr	r3, [r7, #28]
   17cca:	2280      	movs	r2, #128	; 0x80
   17ccc:	02d2      	lsls	r2, r2, #11
   17cce:	4313      	orrs	r3, r2
   17cd0:	61fb      	str	r3, [r7, #28]
		}

		/* Clear the port DIR bits to disable the output buffer */
		port->DIRCLR.reg = pin_mask;
   17cd2:	68fb      	ldr	r3, [r7, #12]
   17cd4:	68ba      	ldr	r2, [r7, #8]
   17cd6:	605a      	str	r2, [r3, #4]
	}

	/* Check if the user has requested that the output buffer be enabled */
	if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   17cd8:	687b      	ldr	r3, [r7, #4]
   17cda:	785b      	ldrb	r3, [r3, #1]
   17cdc:	2b01      	cmp	r3, #1
   17cde:	d003      	beq.n	17ce8 <_system_pinmux_config+0x100>
			(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   17ce0:	687b      	ldr	r3, [r7, #4]
   17ce2:	785b      	ldrb	r3, [r3, #1]
		/* Clear the port DIR bits to disable the output buffer */
		port->DIRCLR.reg = pin_mask;
	}

	/* Check if the user has requested that the output buffer be enabled */
	if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   17ce4:	2b02      	cmp	r3, #2
   17ce6:	d106      	bne.n	17cf6 <_system_pinmux_config+0x10e>
			(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
		/* Cannot use a pullup if the output driver is enabled,
		 * if requested the input buffer can only sample the current
		 * output state */
		pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   17ce8:	69fa      	ldr	r2, [r7, #28]
   17cea:	4b20      	ldr	r3, [pc, #128]	; (17d6c <_system_pinmux_config+0x184>)
   17cec:	4013      	ands	r3, r2
   17cee:	61fb      	str	r3, [r7, #28]

		/* Set the port DIR bits to enable the output buffer */
		port->DIRSET.reg = pin_mask;
   17cf0:	68fb      	ldr	r3, [r7, #12]
   17cf2:	68ba      	ldr	r2, [r7, #8]
   17cf4:	609a      	str	r2, [r3, #8]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   17cf6:	68bb      	ldr	r3, [r7, #8]
   17cf8:	041b      	lsls	r3, r3, #16
   17cfa:	0c1b      	lsrs	r3, r3, #16
   17cfc:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   17cfe:	68bb      	ldr	r3, [r7, #8]
   17d00:	0c1b      	lsrs	r3, r3, #16
   17d02:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   17d04:	69ba      	ldr	r2, [r7, #24]
   17d06:	69fb      	ldr	r3, [r7, #28]
   17d08:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   17d0a:	22a0      	movs	r2, #160	; 0xa0
   17d0c:	05d2      	lsls	r2, r2, #23
   17d0e:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   17d10:	68fb      	ldr	r3, [r7, #12]
   17d12:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   17d14:	697a      	ldr	r2, [r7, #20]
   17d16:	69fb      	ldr	r3, [r7, #28]
   17d18:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   17d1a:	22d0      	movs	r2, #208	; 0xd0
   17d1c:	0612      	lsls	r2, r2, #24
   17d1e:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   17d20:	68fb      	ldr	r3, [r7, #12]
   17d22:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	/* Set the pull-up state once the port pins are configured if one was
	 * requested and it does not violate the valid set of port
	 * configurations */
	if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   17d24:	69fa      	ldr	r2, [r7, #28]
   17d26:	2380      	movs	r3, #128	; 0x80
   17d28:	02db      	lsls	r3, r3, #11
   17d2a:	4013      	ands	r3, r2
   17d2c:	d00a      	beq.n	17d44 <_system_pinmux_config+0x15c>
		/* Set the OUT register bits to enable the pullup if requested,
		 * clear to enable pull-down */
		if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   17d2e:	687b      	ldr	r3, [r7, #4]
   17d30:	789b      	ldrb	r3, [r3, #2]
   17d32:	2b01      	cmp	r3, #1
   17d34:	d103      	bne.n	17d3e <_system_pinmux_config+0x156>
			port->OUTSET.reg = pin_mask;
   17d36:	68fb      	ldr	r3, [r7, #12]
   17d38:	68ba      	ldr	r2, [r7, #8]
   17d3a:	619a      	str	r2, [r3, #24]
   17d3c:	e002      	b.n	17d44 <_system_pinmux_config+0x15c>
		} else {
			port->OUTCLR.reg = pin_mask;
   17d3e:	68fb      	ldr	r3, [r7, #12]
   17d40:	68ba      	ldr	r2, [r7, #8]
   17d42:	615a      	str	r2, [r3, #20]
		}
	}
}
   17d44:	46bd      	mov	sp, r7
   17d46:	b009      	add	sp, #36	; 0x24
   17d48:	bd90      	pop	{r4, r7, pc}
   17d4a:	46c0      	nop			; (mov r8, r8)
   17d4c:	00017b21 	.word	0x00017b21
   17d50:	00026bf8 	.word	0x00026bf8
   17d54:	00026bb4 	.word	0x00026bb4
   17d58:	00026c28 	.word	0x00026c28
   17d5c:	000106e9 	.word	0x000106e9
   17d60:	00026bd4 	.word	0x00026bd4
   17d64:	0001b62d 	.word	0x0001b62d
   17d68:	00026c30 	.word	0x00026c30
   17d6c:	fffbffff 	.word	0xfffbffff

00017d70 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin.
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   17d70:	b580      	push	{r7, lr}
   17d72:	b084      	sub	sp, #16
   17d74:	af00      	add	r7, sp, #0
   17d76:	1c02      	adds	r2, r0, #0
   17d78:	6039      	str	r1, [r7, #0]
   17d7a:	1dfb      	adds	r3, r7, #7
   17d7c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   17d7e:	1dfb      	adds	r3, r7, #7
   17d80:	781b      	ldrb	r3, [r3, #0]
   17d82:	1c18      	adds	r0, r3, #0
   17d84:	4b0b      	ldr	r3, [pc, #44]	; (17db4 <system_pinmux_pin_set_config+0x44>)
   17d86:	4798      	blx	r3
   17d88:	1c03      	adds	r3, r0, #0
   17d8a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   17d8c:	1dfb      	adds	r3, r7, #7
   17d8e:	781a      	ldrb	r2, [r3, #0]
   17d90:	231f      	movs	r3, #31
   17d92:	4013      	ands	r3, r2
   17d94:	2201      	movs	r2, #1
   17d96:	1c11      	adds	r1, r2, #0
   17d98:	4099      	lsls	r1, r3
   17d9a:	1c0b      	adds	r3, r1, #0
   17d9c:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   17d9e:	68f9      	ldr	r1, [r7, #12]
   17da0:	68ba      	ldr	r2, [r7, #8]
   17da2:	683b      	ldr	r3, [r7, #0]
   17da4:	1c08      	adds	r0, r1, #0
   17da6:	1c11      	adds	r1, r2, #0
   17da8:	1c1a      	adds	r2, r3, #0
   17daa:	4b03      	ldr	r3, [pc, #12]	; (17db8 <system_pinmux_pin_set_config+0x48>)
   17dac:	4798      	blx	r3
}
   17dae:	46bd      	mov	sp, r7
   17db0:	b004      	add	sp, #16
   17db2:	bd80      	pop	{r7, pc}
   17db4:	00017b35 	.word	0x00017b35
   17db8:	00017be9 	.word	0x00017be9

00017dbc <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
   17dbc:	b580      	push	{r7, lr}
   17dbe:	af00      	add	r7, sp, #0
	return test_case_ptr;
   17dc0:	4b02      	ldr	r3, [pc, #8]	; (17dcc <test_get_case+0x10>)
   17dc2:	681b      	ldr	r3, [r3, #0]
}
   17dc4:	1c18      	adds	r0, r3, #0
   17dc6:	46bd      	mov	sp, r7
   17dc8:	bd80      	pop	{r7, pc}
   17dca:	46c0      	nop			; (mov r8, r8)
   17dcc:	2000041c 	.word	0x2000041c

00017dd0 <HardFault_Handler>:
/**
 * Handler for the CPU Hard Fault interrupt, fired if an illegal access was
 * attempted to a memory address.
 */
void HardFault_Handler(void)
{
   17dd0:	b590      	push	{r4, r7, lr}
   17dd2:	b083      	sub	sp, #12
   17dd4:	af02      	add	r7, sp, #8
	while (1) {
		/* Infinite loop if CPU exception is detected */
		Assert(false);
   17dd6:	4b0f      	ldr	r3, [pc, #60]	; (17e14 <HardFault_Handler+0x44>)
   17dd8:	4798      	blx	r3
   17dda:	1c03      	adds	r3, r0, #0
   17ddc:	2b00      	cmp	r3, #0
   17dde:	d00e      	beq.n	17dfe <HardFault_Handler+0x2e>
   17de0:	4b0c      	ldr	r3, [pc, #48]	; (17e14 <HardFault_Handler+0x44>)
   17de2:	4798      	blx	r3
   17de4:	1c02      	adds	r2, r0, #0
   17de6:	4b0c      	ldr	r3, [pc, #48]	; (17e18 <HardFault_Handler+0x48>)
   17de8:	490c      	ldr	r1, [pc, #48]	; (17e1c <HardFault_Handler+0x4c>)
   17dea:	9100      	str	r1, [sp, #0]
   17dec:	490c      	ldr	r1, [pc, #48]	; (17e20 <HardFault_Handler+0x50>)
   17dee:	9101      	str	r1, [sp, #4]
   17df0:	1c10      	adds	r0, r2, #0
   17df2:	2101      	movs	r1, #1
   17df4:	1c1a      	adds	r2, r3, #0
   17df6:	234e      	movs	r3, #78	; 0x4e
   17df8:	4c0a      	ldr	r4, [pc, #40]	; (17e24 <HardFault_Handler+0x54>)
   17dfa:	47a0      	blx	r4
	}
   17dfc:	e7eb      	b.n	17dd6 <HardFault_Handler+0x6>
 */
void HardFault_Handler(void)
{
	while (1) {
		/* Infinite loop if CPU exception is detected */
		Assert(false);
   17dfe:	490a      	ldr	r1, [pc, #40]	; (17e28 <HardFault_Handler+0x58>)
   17e00:	4a07      	ldr	r2, [pc, #28]	; (17e20 <HardFault_Handler+0x50>)
   17e02:	4b05      	ldr	r3, [pc, #20]	; (17e18 <HardFault_Handler+0x48>)
   17e04:	1c08      	adds	r0, r1, #0
   17e06:	1c11      	adds	r1, r2, #0
   17e08:	1c1a      	adds	r2, r3, #0
   17e0a:	234e      	movs	r3, #78	; 0x4e
   17e0c:	4c07      	ldr	r4, [pc, #28]	; (17e2c <HardFault_Handler+0x5c>)
   17e0e:	47a0      	blx	r4
   17e10:	e7fe      	b.n	17e10 <HardFault_Handler+0x40>
   17e12:	46c0      	nop			; (mov r8, r8)
   17e14:	00017dbd 	.word	0x00017dbd
   17e18:	00026c38 	.word	0x00026c38
   17e1c:	00026c60 	.word	0x00026c60
   17e20:	00026c78 	.word	0x00026c78
   17e24:	000106e9 	.word	0x000106e9
   17e28:	00026c80 	.word	0x00026c80
   17e2c:	0001b62d 	.word	0x0001b62d

00017e30 <system_init>:
 * Currently the following initialization functions are supported:
 *  - System clock initialization (via the SYSTEM CLOCK sub-module)
 *  - Board hardware initialization (via the Board module)
 */
void system_init(void)
{
   17e30:	b580      	push	{r7, lr}
   17e32:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   17e34:	4b02      	ldr	r3, [pc, #8]	; (17e40 <system_init+0x10>)
   17e36:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   17e38:	4b02      	ldr	r3, [pc, #8]	; (17e44 <system_init+0x14>)
   17e3a:	4798      	blx	r3
}
   17e3c:	46bd      	mov	sp, r7
   17e3e:	bd80      	pop	{r7, pc}
   17e40:	000171bd 	.word	0x000171bd
   17e44:	000108fd 	.word	0x000108fd

00017e48 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
   17e48:	b580      	push	{r7, lr}
   17e4a:	af00      	add	r7, sp, #0
	return test_case_ptr;
   17e4c:	4b02      	ldr	r3, [pc, #8]	; (17e58 <test_get_case+0x10>)
   17e4e:	681b      	ldr	r3, [r3, #0]
}
   17e50:	1c18      	adds	r0, r3, #0
   17e52:	46bd      	mov	sp, r7
   17e54:	bd80      	pop	{r7, pc}
   17e56:	46c0      	nop			; (mov r8, r8)
   17e58:	2000041c 	.word	0x2000041c

00017e5c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   17e5c:	b590      	push	{r4, r7, lr}
   17e5e:	b085      	sub	sp, #20
   17e60:	af02      	add	r7, sp, #8
   17e62:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
   17e64:	4b15      	ldr	r3, [pc, #84]	; (17ebc <system_gclk_chan_get_config_defaults+0x60>)
   17e66:	4798      	blx	r3
   17e68:	1c03      	adds	r3, r0, #0
   17e6a:	2b00      	cmp	r3, #0
   17e6c:	d011      	beq.n	17e92 <system_gclk_chan_get_config_defaults+0x36>
   17e6e:	687b      	ldr	r3, [r7, #4]
   17e70:	2b00      	cmp	r3, #0
   17e72:	d119      	bne.n	17ea8 <system_gclk_chan_get_config_defaults+0x4c>
   17e74:	4b11      	ldr	r3, [pc, #68]	; (17ebc <system_gclk_chan_get_config_defaults+0x60>)
   17e76:	4798      	blx	r3
   17e78:	1c01      	adds	r1, r0, #0
   17e7a:	4a11      	ldr	r2, [pc, #68]	; (17ec0 <system_gclk_chan_get_config_defaults+0x64>)
   17e7c:	2314      	movs	r3, #20
   17e7e:	33ff      	adds	r3, #255	; 0xff
   17e80:	4810      	ldr	r0, [pc, #64]	; (17ec4 <system_gclk_chan_get_config_defaults+0x68>)
   17e82:	9000      	str	r0, [sp, #0]
   17e84:	4810      	ldr	r0, [pc, #64]	; (17ec8 <system_gclk_chan_get_config_defaults+0x6c>)
   17e86:	9001      	str	r0, [sp, #4]
   17e88:	1c08      	adds	r0, r1, #0
   17e8a:	2101      	movs	r1, #1
   17e8c:	4c0f      	ldr	r4, [pc, #60]	; (17ecc <system_gclk_chan_get_config_defaults+0x70>)
   17e8e:	47a0      	blx	r4
   17e90:	e00a      	b.n	17ea8 <system_gclk_chan_get_config_defaults+0x4c>
   17e92:	687b      	ldr	r3, [r7, #4]
   17e94:	2b00      	cmp	r3, #0
   17e96:	d107      	bne.n	17ea8 <system_gclk_chan_get_config_defaults+0x4c>
   17e98:	480d      	ldr	r0, [pc, #52]	; (17ed0 <system_gclk_chan_get_config_defaults+0x74>)
   17e9a:	490b      	ldr	r1, [pc, #44]	; (17ec8 <system_gclk_chan_get_config_defaults+0x6c>)
   17e9c:	4a08      	ldr	r2, [pc, #32]	; (17ec0 <system_gclk_chan_get_config_defaults+0x64>)
   17e9e:	2314      	movs	r3, #20
   17ea0:	33ff      	adds	r3, #255	; 0xff
   17ea2:	4c0c      	ldr	r4, [pc, #48]	; (17ed4 <system_gclk_chan_get_config_defaults+0x78>)
   17ea4:	47a0      	blx	r4
   17ea6:	e7fe      	b.n	17ea6 <system_gclk_chan_get_config_defaults+0x4a>

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   17ea8:	687b      	ldr	r3, [r7, #4]
   17eaa:	2200      	movs	r2, #0
   17eac:	701a      	strb	r2, [r3, #0]
	config->write_lock       = false;
   17eae:	687b      	ldr	r3, [r7, #4]
   17eb0:	2200      	movs	r2, #0
   17eb2:	705a      	strb	r2, [r3, #1]
}
   17eb4:	46bd      	mov	sp, r7
   17eb6:	b003      	add	sp, #12
   17eb8:	bd90      	pop	{r4, r7, pc}
   17eba:	46c0      	nop			; (mov r8, r8)
   17ebc:	00017e49 	.word	0x00017e49
   17ec0:	00026ca4 	.word	0x00026ca4
   17ec4:	00026cd0 	.word	0x00026cd0
   17ec8:	00026ce8 	.word	0x00026ce8
   17ecc:	000106e9 	.word	0x000106e9
   17ed0:	00026cf0 	.word	0x00026cf0
   17ed4:	0001b62d 	.word	0x0001b62d

00017ed8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   17ed8:	b590      	push	{r4, r7, lr}
   17eda:	b085      	sub	sp, #20
   17edc:	af02      	add	r7, sp, #8
   17ede:	1c02      	adds	r2, r0, #0
   17ee0:	6039      	str	r1, [r7, #0]
   17ee2:	1dfb      	adds	r3, r7, #7
   17ee4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   17ee6:	1dfb      	adds	r3, r7, #7
   17ee8:	781b      	ldrb	r3, [r3, #0]
   17eea:	2b01      	cmp	r3, #1
   17eec:	d00a      	beq.n	17f04 <system_apb_clock_set_mask+0x2c>
   17eee:	2b02      	cmp	r3, #2
   17ef0:	d00f      	beq.n	17f12 <system_apb_clock_set_mask+0x3a>
   17ef2:	2b00      	cmp	r3, #0
   17ef4:	d114      	bne.n	17f20 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   17ef6:	4b1a      	ldr	r3, [pc, #104]	; (17f60 <system_apb_clock_set_mask+0x88>)
   17ef8:	4a19      	ldr	r2, [pc, #100]	; (17f60 <system_apb_clock_set_mask+0x88>)
   17efa:	6991      	ldr	r1, [r2, #24]
   17efc:	683a      	ldr	r2, [r7, #0]
   17efe:	430a      	orrs	r2, r1
   17f00:	619a      	str	r2, [r3, #24]
			break;
   17f02:	e028      	b.n	17f56 <system_apb_clock_set_mask+0x7e>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   17f04:	4b16      	ldr	r3, [pc, #88]	; (17f60 <system_apb_clock_set_mask+0x88>)
   17f06:	4a16      	ldr	r2, [pc, #88]	; (17f60 <system_apb_clock_set_mask+0x88>)
   17f08:	69d1      	ldr	r1, [r2, #28]
   17f0a:	683a      	ldr	r2, [r7, #0]
   17f0c:	430a      	orrs	r2, r1
   17f0e:	61da      	str	r2, [r3, #28]
			break;
   17f10:	e021      	b.n	17f56 <system_apb_clock_set_mask+0x7e>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   17f12:	4b13      	ldr	r3, [pc, #76]	; (17f60 <system_apb_clock_set_mask+0x88>)
   17f14:	4a12      	ldr	r2, [pc, #72]	; (17f60 <system_apb_clock_set_mask+0x88>)
   17f16:	6a11      	ldr	r1, [r2, #32]
   17f18:	683a      	ldr	r2, [r7, #0]
   17f1a:	430a      	orrs	r2, r1
   17f1c:	621a      	str	r2, [r3, #32]
			break;
   17f1e:	e01a      	b.n	17f56 <system_apb_clock_set_mask+0x7e>

		default:
			Assert(false);
   17f20:	4b10      	ldr	r3, [pc, #64]	; (17f64 <system_apb_clock_set_mask+0x8c>)
   17f22:	4798      	blx	r3
   17f24:	1c03      	adds	r3, r0, #0
   17f26:	2b00      	cmp	r3, #0
   17f28:	d00e      	beq.n	17f48 <system_apb_clock_set_mask+0x70>
   17f2a:	4b0e      	ldr	r3, [pc, #56]	; (17f64 <system_apb_clock_set_mask+0x8c>)
   17f2c:	4798      	blx	r3
   17f2e:	1c01      	adds	r1, r0, #0
   17f30:	4a0d      	ldr	r2, [pc, #52]	; (17f68 <system_apb_clock_set_mask+0x90>)
   17f32:	4b0e      	ldr	r3, [pc, #56]	; (17f6c <system_apb_clock_set_mask+0x94>)
   17f34:	480e      	ldr	r0, [pc, #56]	; (17f70 <system_apb_clock_set_mask+0x98>)
   17f36:	9000      	str	r0, [sp, #0]
   17f38:	480e      	ldr	r0, [pc, #56]	; (17f74 <system_apb_clock_set_mask+0x9c>)
   17f3a:	9001      	str	r0, [sp, #4]
   17f3c:	1c08      	adds	r0, r1, #0
   17f3e:	2101      	movs	r1, #1
   17f40:	4c0d      	ldr	r4, [pc, #52]	; (17f78 <system_apb_clock_set_mask+0xa0>)
   17f42:	47a0      	blx	r4
			return STATUS_ERR_INVALID_ARG;
   17f44:	2317      	movs	r3, #23
   17f46:	e007      	b.n	17f58 <system_apb_clock_set_mask+0x80>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
			break;

		default:
			Assert(false);
   17f48:	480c      	ldr	r0, [pc, #48]	; (17f7c <system_apb_clock_set_mask+0xa4>)
   17f4a:	490a      	ldr	r1, [pc, #40]	; (17f74 <system_apb_clock_set_mask+0x9c>)
   17f4c:	4a06      	ldr	r2, [pc, #24]	; (17f68 <system_apb_clock_set_mask+0x90>)
   17f4e:	4b07      	ldr	r3, [pc, #28]	; (17f6c <system_apb_clock_set_mask+0x94>)
   17f50:	4c0b      	ldr	r4, [pc, #44]	; (17f80 <system_apb_clock_set_mask+0xa8>)
   17f52:	47a0      	blx	r4
   17f54:	e7fe      	b.n	17f54 <system_apb_clock_set_mask+0x7c>
			return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
   17f56:	2300      	movs	r3, #0
}
   17f58:	1c18      	adds	r0, r3, #0
   17f5a:	46bd      	mov	sp, r7
   17f5c:	b003      	add	sp, #12
   17f5e:	bd90      	pop	{r4, r7, pc}
   17f60:	40000400 	.word	0x40000400
   17f64:	00017e49 	.word	0x00017e49
   17f68:	00026d14 	.word	0x00026d14
   17f6c:	00000409 	.word	0x00000409
   17f70:	00026cd0 	.word	0x00026cd0
   17f74:	00026d44 	.word	0x00026d44
   17f78:	000106e9 	.word	0x000106e9
   17f7c:	00026cf0 	.word	0x00026cf0
   17f80:	0001b62d 	.word	0x0001b62d

00017f84 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   17f84:	b590      	push	{r4, r7, lr}
   17f86:	b085      	sub	sp, #20
   17f88:	af02      	add	r7, sp, #8
   17f8a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
   17f8c:	4b16      	ldr	r3, [pc, #88]	; (17fe8 <system_pinmux_get_config_defaults+0x64>)
   17f8e:	4798      	blx	r3
   17f90:	1c03      	adds	r3, r0, #0
   17f92:	2b00      	cmp	r3, #0
   17f94:	d011      	beq.n	17fba <system_pinmux_get_config_defaults+0x36>
   17f96:	687b      	ldr	r3, [r7, #4]
   17f98:	2b00      	cmp	r3, #0
   17f9a:	d119      	bne.n	17fd0 <system_pinmux_get_config_defaults+0x4c>
   17f9c:	4b12      	ldr	r3, [pc, #72]	; (17fe8 <system_pinmux_get_config_defaults+0x64>)
   17f9e:	4798      	blx	r3
   17fa0:	1c01      	adds	r1, r0, #0
   17fa2:	4a12      	ldr	r2, [pc, #72]	; (17fec <system_pinmux_get_config_defaults+0x68>)
   17fa4:	239d      	movs	r3, #157	; 0x9d
   17fa6:	005b      	lsls	r3, r3, #1
   17fa8:	4811      	ldr	r0, [pc, #68]	; (17ff0 <system_pinmux_get_config_defaults+0x6c>)
   17faa:	9000      	str	r0, [sp, #0]
   17fac:	4811      	ldr	r0, [pc, #68]	; (17ff4 <system_pinmux_get_config_defaults+0x70>)
   17fae:	9001      	str	r0, [sp, #4]
   17fb0:	1c08      	adds	r0, r1, #0
   17fb2:	2101      	movs	r1, #1
   17fb4:	4c10      	ldr	r4, [pc, #64]	; (17ff8 <system_pinmux_get_config_defaults+0x74>)
   17fb6:	47a0      	blx	r4
   17fb8:	e00a      	b.n	17fd0 <system_pinmux_get_config_defaults+0x4c>
   17fba:	687b      	ldr	r3, [r7, #4]
   17fbc:	2b00      	cmp	r3, #0
   17fbe:	d107      	bne.n	17fd0 <system_pinmux_get_config_defaults+0x4c>
   17fc0:	480e      	ldr	r0, [pc, #56]	; (17ffc <system_pinmux_get_config_defaults+0x78>)
   17fc2:	490c      	ldr	r1, [pc, #48]	; (17ff4 <system_pinmux_get_config_defaults+0x70>)
   17fc4:	4a09      	ldr	r2, [pc, #36]	; (17fec <system_pinmux_get_config_defaults+0x68>)
   17fc6:	239d      	movs	r3, #157	; 0x9d
   17fc8:	005b      	lsls	r3, r3, #1
   17fca:	4c0d      	ldr	r4, [pc, #52]	; (18000 <system_pinmux_get_config_defaults+0x7c>)
   17fcc:	47a0      	blx	r4
   17fce:	e7fe      	b.n	17fce <system_pinmux_get_config_defaults+0x4a>

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   17fd0:	687b      	ldr	r3, [r7, #4]
   17fd2:	2280      	movs	r2, #128	; 0x80
   17fd4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   17fd6:	687b      	ldr	r3, [r7, #4]
   17fd8:	2200      	movs	r2, #0
   17fda:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   17fdc:	687b      	ldr	r3, [r7, #4]
   17fde:	2201      	movs	r2, #1
   17fe0:	709a      	strb	r2, [r3, #2]
}
   17fe2:	46bd      	mov	sp, r7
   17fe4:	b003      	add	sp, #12
   17fe6:	bd90      	pop	{r4, r7, pc}
   17fe8:	00017e49 	.word	0x00017e49
   17fec:	00026d4c 	.word	0x00026d4c
   17ff0:	00026cd0 	.word	0x00026cd0
   17ff4:	00026ce8 	.word	0x00026ce8
   17ff8:	000106e9 	.word	0x000106e9
   17ffc:	00026cf0 	.word	0x00026cf0
   18000:	0001b62d 	.word	0x0001b62d

00018004 <tc_is_syncing>:
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
   18004:	b590      	push	{r4, r7, lr}
   18006:	b087      	sub	sp, #28
   18008:	af02      	add	r7, sp, #8
   1800a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
   1800c:	4b29      	ldr	r3, [pc, #164]	; (180b4 <tc_is_syncing+0xb0>)
   1800e:	4798      	blx	r3
   18010:	1c03      	adds	r3, r0, #0
   18012:	2b00      	cmp	r3, #0
   18014:	d010      	beq.n	18038 <tc_is_syncing+0x34>
   18016:	687b      	ldr	r3, [r7, #4]
   18018:	2b00      	cmp	r3, #0
   1801a:	d117      	bne.n	1804c <tc_is_syncing+0x48>
   1801c:	4b25      	ldr	r3, [pc, #148]	; (180b4 <tc_is_syncing+0xb0>)
   1801e:	4798      	blx	r3
   18020:	1c01      	adds	r1, r0, #0
   18022:	4a25      	ldr	r2, [pc, #148]	; (180b8 <tc_is_syncing+0xb4>)
   18024:	4b25      	ldr	r3, [pc, #148]	; (180bc <tc_is_syncing+0xb8>)
   18026:	4826      	ldr	r0, [pc, #152]	; (180c0 <tc_is_syncing+0xbc>)
   18028:	9000      	str	r0, [sp, #0]
   1802a:	4826      	ldr	r0, [pc, #152]	; (180c4 <tc_is_syncing+0xc0>)
   1802c:	9001      	str	r0, [sp, #4]
   1802e:	1c08      	adds	r0, r1, #0
   18030:	2101      	movs	r1, #1
   18032:	4c25      	ldr	r4, [pc, #148]	; (180c8 <tc_is_syncing+0xc4>)
   18034:	47a0      	blx	r4
   18036:	e009      	b.n	1804c <tc_is_syncing+0x48>
   18038:	687b      	ldr	r3, [r7, #4]
   1803a:	2b00      	cmp	r3, #0
   1803c:	d106      	bne.n	1804c <tc_is_syncing+0x48>
   1803e:	4823      	ldr	r0, [pc, #140]	; (180cc <tc_is_syncing+0xc8>)
   18040:	4920      	ldr	r1, [pc, #128]	; (180c4 <tc_is_syncing+0xc0>)
   18042:	4a1d      	ldr	r2, [pc, #116]	; (180b8 <tc_is_syncing+0xb4>)
   18044:	4b1d      	ldr	r3, [pc, #116]	; (180bc <tc_is_syncing+0xb8>)
   18046:	4c22      	ldr	r4, [pc, #136]	; (180d0 <tc_is_syncing+0xcc>)
   18048:	47a0      	blx	r4
   1804a:	e7fe      	b.n	1804a <tc_is_syncing+0x46>
	Assert(module_inst->hw);
   1804c:	4b19      	ldr	r3, [pc, #100]	; (180b4 <tc_is_syncing+0xb0>)
   1804e:	4798      	blx	r3
   18050:	1c03      	adds	r3, r0, #0
   18052:	2b00      	cmp	r3, #0
   18054:	d011      	beq.n	1807a <tc_is_syncing+0x76>
   18056:	687b      	ldr	r3, [r7, #4]
   18058:	681b      	ldr	r3, [r3, #0]
   1805a:	2b00      	cmp	r3, #0
   1805c:	d118      	bne.n	18090 <tc_is_syncing+0x8c>
   1805e:	4b15      	ldr	r3, [pc, #84]	; (180b4 <tc_is_syncing+0xb0>)
   18060:	4798      	blx	r3
   18062:	1c01      	adds	r1, r0, #0
   18064:	4a14      	ldr	r2, [pc, #80]	; (180b8 <tc_is_syncing+0xb4>)
   18066:	4b1b      	ldr	r3, [pc, #108]	; (180d4 <tc_is_syncing+0xd0>)
   18068:	4815      	ldr	r0, [pc, #84]	; (180c0 <tc_is_syncing+0xbc>)
   1806a:	9000      	str	r0, [sp, #0]
   1806c:	481a      	ldr	r0, [pc, #104]	; (180d8 <tc_is_syncing+0xd4>)
   1806e:	9001      	str	r0, [sp, #4]
   18070:	1c08      	adds	r0, r1, #0
   18072:	2101      	movs	r1, #1
   18074:	4c14      	ldr	r4, [pc, #80]	; (180c8 <tc_is_syncing+0xc4>)
   18076:	47a0      	blx	r4
   18078:	e00a      	b.n	18090 <tc_is_syncing+0x8c>
   1807a:	687b      	ldr	r3, [r7, #4]
   1807c:	681b      	ldr	r3, [r3, #0]
   1807e:	2b00      	cmp	r3, #0
   18080:	d106      	bne.n	18090 <tc_is_syncing+0x8c>
   18082:	4812      	ldr	r0, [pc, #72]	; (180cc <tc_is_syncing+0xc8>)
   18084:	4914      	ldr	r1, [pc, #80]	; (180d8 <tc_is_syncing+0xd4>)
   18086:	4a0c      	ldr	r2, [pc, #48]	; (180b8 <tc_is_syncing+0xb4>)
   18088:	4b12      	ldr	r3, [pc, #72]	; (180d4 <tc_is_syncing+0xd0>)
   1808a:	4c11      	ldr	r4, [pc, #68]	; (180d0 <tc_is_syncing+0xcc>)
   1808c:	47a0      	blx	r4
   1808e:	e7fe      	b.n	1808e <tc_is_syncing+0x8a>

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   18090:	687b      	ldr	r3, [r7, #4]
   18092:	681b      	ldr	r3, [r3, #0]
   18094:	60fb      	str	r3, [r7, #12]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
   18096:	68fb      	ldr	r3, [r7, #12]
   18098:	89db      	ldrh	r3, [r3, #14]
   1809a:	041b      	lsls	r3, r3, #16
   1809c:	0e1b      	lsrs	r3, r3, #24
   1809e:	b2db      	uxtb	r3, r3
   180a0:	1c1a      	adds	r2, r3, #0
   180a2:	2380      	movs	r3, #128	; 0x80
   180a4:	4013      	ands	r3, r2
   180a6:	1e5a      	subs	r2, r3, #1
   180a8:	4193      	sbcs	r3, r2
   180aa:	b2db      	uxtb	r3, r3
}
   180ac:	1c18      	adds	r0, r3, #0
   180ae:	46bd      	mov	sp, r7
   180b0:	b005      	add	sp, #20
   180b2:	bd90      	pop	{r4, r7, pc}
   180b4:	00017e49 	.word	0x00017e49
   180b8:	00026d7c 	.word	0x00026d7c
   180bc:	0000033e 	.word	0x0000033e
   180c0:	00026cd0 	.word	0x00026cd0
   180c4:	00026d9c 	.word	0x00026d9c
   180c8:	000106e9 	.word	0x000106e9
   180cc:	00026cf0 	.word	0x00026cf0
   180d0:	0001b62d 	.word	0x0001b62d
   180d4:	0000033f 	.word	0x0000033f
   180d8:	00026da8 	.word	0x00026da8

000180dc <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
   180dc:	b590      	push	{r4, r7, lr}
   180de:	b08f      	sub	sp, #60	; 0x3c
   180e0:	af02      	add	r7, sp, #8
   180e2:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
   180e4:	1c3b      	adds	r3, r7, #0
   180e6:	330c      	adds	r3, #12
   180e8:	4a1e      	ldr	r2, [pc, #120]	; (18164 <_tc_get_inst_index+0x88>)
   180ea:	ca13      	ldmia	r2!, {r0, r1, r4}
   180ec:	c313      	stmia	r3!, {r0, r1, r4}
   180ee:	ca13      	ldmia	r2!, {r0, r1, r4}
   180f0:	c313      	stmia	r3!, {r0, r1, r4}
   180f2:	ca03      	ldmia	r2!, {r0, r1}
   180f4:	c303      	stmia	r3!, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
   180f6:	2300      	movs	r3, #0
   180f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   180fa:	e00d      	b.n	18118 <_tc_get_inst_index+0x3c>
		if (hw == tc_modules[i]) {
   180fc:	1c3b      	adds	r3, r7, #0
   180fe:	330c      	adds	r3, #12
   18100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   18102:	0092      	lsls	r2, r2, #2
   18104:	58d2      	ldr	r2, [r2, r3]
   18106:	687b      	ldr	r3, [r7, #4]
   18108:	429a      	cmp	r2, r3
   1810a:	d102      	bne.n	18112 <_tc_get_inst_index+0x36>
			return i;
   1810c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1810e:	b2db      	uxtb	r3, r3
   18110:	e024      	b.n	1815c <_tc_get_inst_index+0x80>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
   18112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18114:	3301      	adds	r3, #1
   18116:	62fb      	str	r3, [r7, #44]	; 0x2c
   18118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1811a:	2b07      	cmp	r3, #7
   1811c:	d9ee      	bls.n	180fc <_tc_get_inst_index+0x20>
			return i;
		}
	}

	/* Invalid data given. */
	Assert(false);
   1811e:	4b12      	ldr	r3, [pc, #72]	; (18168 <_tc_get_inst_index+0x8c>)
   18120:	4798      	blx	r3
   18122:	1c03      	adds	r3, r0, #0
   18124:	2b00      	cmp	r3, #0
   18126:	d00f      	beq.n	18148 <_tc_get_inst_index+0x6c>
   18128:	4b0f      	ldr	r3, [pc, #60]	; (18168 <_tc_get_inst_index+0x8c>)
   1812a:	4798      	blx	r3
   1812c:	1c02      	adds	r2, r0, #0
   1812e:	4b0f      	ldr	r3, [pc, #60]	; (1816c <_tc_get_inst_index+0x90>)
   18130:	490f      	ldr	r1, [pc, #60]	; (18170 <_tc_get_inst_index+0x94>)
   18132:	9100      	str	r1, [sp, #0]
   18134:	490f      	ldr	r1, [pc, #60]	; (18174 <_tc_get_inst_index+0x98>)
   18136:	9101      	str	r1, [sp, #4]
   18138:	1c10      	adds	r0, r2, #0
   1813a:	2101      	movs	r1, #1
   1813c:	1c1a      	adds	r2, r3, #0
   1813e:	2356      	movs	r3, #86	; 0x56
   18140:	4c0d      	ldr	r4, [pc, #52]	; (18178 <_tc_get_inst_index+0x9c>)
   18142:	47a0      	blx	r4
	return 0;
   18144:	2300      	movs	r3, #0
   18146:	e009      	b.n	1815c <_tc_get_inst_index+0x80>
			return i;
		}
	}

	/* Invalid data given. */
	Assert(false);
   18148:	490c      	ldr	r1, [pc, #48]	; (1817c <_tc_get_inst_index+0xa0>)
   1814a:	4a0a      	ldr	r2, [pc, #40]	; (18174 <_tc_get_inst_index+0x98>)
   1814c:	4b07      	ldr	r3, [pc, #28]	; (1816c <_tc_get_inst_index+0x90>)
   1814e:	1c08      	adds	r0, r1, #0
   18150:	1c11      	adds	r1, r2, #0
   18152:	1c1a      	adds	r2, r3, #0
   18154:	2356      	movs	r3, #86	; 0x56
   18156:	4c0a      	ldr	r4, [pc, #40]	; (18180 <_tc_get_inst_index+0xa4>)
   18158:	47a0      	blx	r4
   1815a:	e7fe      	b.n	1815a <_tc_get_inst_index+0x7e>
	return 0;
}
   1815c:	1c18      	adds	r0, r3, #0
   1815e:	46bd      	mov	sp, r7
   18160:	b00d      	add	sp, #52	; 0x34
   18162:	bd90      	pop	{r4, r7, pc}
   18164:	00026dd8 	.word	0x00026dd8
   18168:	00017e49 	.word	0x00017e49
   1816c:	00026db8 	.word	0x00026db8
   18170:	00026cd0 	.word	0x00026cd0
   18174:	00026d44 	.word	0x00026d44
   18178:	000106e9 	.word	0x000106e9
   1817c:	00026cf0 	.word	0x00026cf0
   18180:	0001b62d 	.word	0x0001b62d

00018184 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
   18184:	b590      	push	{r4, r7, lr}
   18186:	b091      	sub	sp, #68	; 0x44
   18188:	af02      	add	r7, sp, #8
   1818a:	60f8      	str	r0, [r7, #12]
   1818c:	60b9      	str	r1, [r7, #8]
   1818e:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(hw);
   18190:	4bce      	ldr	r3, [pc, #824]	; (184cc <tc_init+0x348>)
   18192:	4798      	blx	r3
   18194:	1c03      	adds	r3, r0, #0
   18196:	2b00      	cmp	r3, #0
   18198:	d011      	beq.n	181be <tc_init+0x3a>
   1819a:	68bb      	ldr	r3, [r7, #8]
   1819c:	2b00      	cmp	r3, #0
   1819e:	d11b      	bne.n	181d8 <tc_init+0x54>
   181a0:	4bca      	ldr	r3, [pc, #808]	; (184cc <tc_init+0x348>)
   181a2:	4798      	blx	r3
   181a4:	1c02      	adds	r2, r0, #0
   181a6:	4bca      	ldr	r3, [pc, #808]	; (184d0 <tc_init+0x34c>)
   181a8:	49ca      	ldr	r1, [pc, #808]	; (184d4 <tc_init+0x350>)
   181aa:	9100      	str	r1, [sp, #0]
   181ac:	49ca      	ldr	r1, [pc, #808]	; (184d8 <tc_init+0x354>)
   181ae:	9101      	str	r1, [sp, #4]
   181b0:	1c10      	adds	r0, r2, #0
   181b2:	2101      	movs	r1, #1
   181b4:	1c1a      	adds	r2, r3, #0
   181b6:	2376      	movs	r3, #118	; 0x76
   181b8:	4cc8      	ldr	r4, [pc, #800]	; (184dc <tc_init+0x358>)
   181ba:	47a0      	blx	r4
   181bc:	e00c      	b.n	181d8 <tc_init+0x54>
   181be:	68bb      	ldr	r3, [r7, #8]
   181c0:	2b00      	cmp	r3, #0
   181c2:	d109      	bne.n	181d8 <tc_init+0x54>
   181c4:	49c6      	ldr	r1, [pc, #792]	; (184e0 <tc_init+0x35c>)
   181c6:	4ac4      	ldr	r2, [pc, #784]	; (184d8 <tc_init+0x354>)
   181c8:	4bc1      	ldr	r3, [pc, #772]	; (184d0 <tc_init+0x34c>)
   181ca:	1c08      	adds	r0, r1, #0
   181cc:	1c11      	adds	r1, r2, #0
   181ce:	1c1a      	adds	r2, r3, #0
   181d0:	2376      	movs	r3, #118	; 0x76
   181d2:	4cc4      	ldr	r4, [pc, #784]	; (184e4 <tc_init+0x360>)
   181d4:	47a0      	blx	r4
   181d6:	e7fe      	b.n	181d6 <tc_init+0x52>
	Assert(module_inst);
   181d8:	4bbc      	ldr	r3, [pc, #752]	; (184cc <tc_init+0x348>)
   181da:	4798      	blx	r3
   181dc:	1c03      	adds	r3, r0, #0
   181de:	2b00      	cmp	r3, #0
   181e0:	d011      	beq.n	18206 <tc_init+0x82>
   181e2:	68fb      	ldr	r3, [r7, #12]
   181e4:	2b00      	cmp	r3, #0
   181e6:	d11b      	bne.n	18220 <tc_init+0x9c>
   181e8:	4bb8      	ldr	r3, [pc, #736]	; (184cc <tc_init+0x348>)
   181ea:	4798      	blx	r3
   181ec:	1c02      	adds	r2, r0, #0
   181ee:	4bb8      	ldr	r3, [pc, #736]	; (184d0 <tc_init+0x34c>)
   181f0:	49b8      	ldr	r1, [pc, #736]	; (184d4 <tc_init+0x350>)
   181f2:	9100      	str	r1, [sp, #0]
   181f4:	49bc      	ldr	r1, [pc, #752]	; (184e8 <tc_init+0x364>)
   181f6:	9101      	str	r1, [sp, #4]
   181f8:	1c10      	adds	r0, r2, #0
   181fa:	2101      	movs	r1, #1
   181fc:	1c1a      	adds	r2, r3, #0
   181fe:	2377      	movs	r3, #119	; 0x77
   18200:	4cb6      	ldr	r4, [pc, #728]	; (184dc <tc_init+0x358>)
   18202:	47a0      	blx	r4
   18204:	e00c      	b.n	18220 <tc_init+0x9c>
   18206:	68fb      	ldr	r3, [r7, #12]
   18208:	2b00      	cmp	r3, #0
   1820a:	d109      	bne.n	18220 <tc_init+0x9c>
   1820c:	49b4      	ldr	r1, [pc, #720]	; (184e0 <tc_init+0x35c>)
   1820e:	4ab6      	ldr	r2, [pc, #728]	; (184e8 <tc_init+0x364>)
   18210:	4baf      	ldr	r3, [pc, #700]	; (184d0 <tc_init+0x34c>)
   18212:	1c08      	adds	r0, r1, #0
   18214:	1c11      	adds	r1, r2, #0
   18216:	1c1a      	adds	r2, r3, #0
   18218:	2377      	movs	r3, #119	; 0x77
   1821a:	4cb2      	ldr	r4, [pc, #712]	; (184e4 <tc_init+0x360>)
   1821c:	47a0      	blx	r4
   1821e:	e7fe      	b.n	1821e <tc_init+0x9a>
	Assert(config);
   18220:	4baa      	ldr	r3, [pc, #680]	; (184cc <tc_init+0x348>)
   18222:	4798      	blx	r3
   18224:	1c03      	adds	r3, r0, #0
   18226:	2b00      	cmp	r3, #0
   18228:	d011      	beq.n	1824e <tc_init+0xca>
   1822a:	687b      	ldr	r3, [r7, #4]
   1822c:	2b00      	cmp	r3, #0
   1822e:	d11b      	bne.n	18268 <tc_init+0xe4>
   18230:	4ba6      	ldr	r3, [pc, #664]	; (184cc <tc_init+0x348>)
   18232:	4798      	blx	r3
   18234:	1c02      	adds	r2, r0, #0
   18236:	4ba6      	ldr	r3, [pc, #664]	; (184d0 <tc_init+0x34c>)
   18238:	49a6      	ldr	r1, [pc, #664]	; (184d4 <tc_init+0x350>)
   1823a:	9100      	str	r1, [sp, #0]
   1823c:	49ab      	ldr	r1, [pc, #684]	; (184ec <tc_init+0x368>)
   1823e:	9101      	str	r1, [sp, #4]
   18240:	1c10      	adds	r0, r2, #0
   18242:	2101      	movs	r1, #1
   18244:	1c1a      	adds	r2, r3, #0
   18246:	2378      	movs	r3, #120	; 0x78
   18248:	4ca4      	ldr	r4, [pc, #656]	; (184dc <tc_init+0x358>)
   1824a:	47a0      	blx	r4
   1824c:	e00c      	b.n	18268 <tc_init+0xe4>
   1824e:	687b      	ldr	r3, [r7, #4]
   18250:	2b00      	cmp	r3, #0
   18252:	d109      	bne.n	18268 <tc_init+0xe4>
   18254:	49a2      	ldr	r1, [pc, #648]	; (184e0 <tc_init+0x35c>)
   18256:	4aa5      	ldr	r2, [pc, #660]	; (184ec <tc_init+0x368>)
   18258:	4b9d      	ldr	r3, [pc, #628]	; (184d0 <tc_init+0x34c>)
   1825a:	1c08      	adds	r0, r1, #0
   1825c:	1c11      	adds	r1, r2, #0
   1825e:	1c1a      	adds	r2, r3, #0
   18260:	2378      	movs	r3, #120	; 0x78
   18262:	4ca0      	ldr	r4, [pc, #640]	; (184e4 <tc_init+0x360>)
   18264:	47a0      	blx	r4
   18266:	e7fe      	b.n	18266 <tc_init+0xe2>

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
   18268:	1c3b      	adds	r3, r7, #0
   1826a:	3336      	adds	r3, #54	; 0x36
   1826c:	2200      	movs	r2, #0
   1826e:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
   18270:	1c3b      	adds	r3, r7, #0
   18272:	3335      	adds	r3, #53	; 0x35
   18274:	2200      	movs	r2, #0
   18276:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the EVCTRL
	 * register before they are written to it */
	uint8_t evctrl_tmp = 0;
   18278:	1c3b      	adds	r3, r7, #0
   1827a:	3334      	adds	r3, #52	; 0x34
   1827c:	2200      	movs	r2, #0
   1827e:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
   18280:	1c3b      	adds	r3, r7, #0
   18282:	3333      	adds	r3, #51	; 0x33
   18284:	2200      	movs	r2, #0
   18286:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
   18288:	1c3c      	adds	r4, r7, #0
   1828a:	3430      	adds	r4, #48	; 0x30
   1828c:	68bb      	ldr	r3, [r7, #8]
   1828e:	1c18      	adds	r0, r3, #0
   18290:	4b97      	ldr	r3, [pc, #604]	; (184f0 <tc_init+0x36c>)
   18292:	4798      	blx	r3
   18294:	1c03      	adds	r3, r0, #0
   18296:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
   18298:	1c3a      	adds	r2, r7, #0
   1829a:	3228      	adds	r2, #40	; 0x28
   1829c:	4b95      	ldr	r3, [pc, #596]	; (184f4 <tc_init+0x370>)
   1829e:	1c11      	adds	r1, r2, #0
   182a0:	1c1a      	adds	r2, r3, #0
   182a2:	2308      	movs	r3, #8
   182a4:	1c08      	adds	r0, r1, #0
   182a6:	1c11      	adds	r1, r2, #0
   182a8:	1c1a      	adds	r2, r3, #0
   182aa:	4b93      	ldr	r3, [pc, #588]	; (184f8 <tc_init+0x374>)
   182ac:	4798      	blx	r3
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
   182ae:	1c3a      	adds	r2, r7, #0
   182b0:	3218      	adds	r2, #24
   182b2:	4b92      	ldr	r3, [pc, #584]	; (184fc <tc_init+0x378>)
   182b4:	1c11      	adds	r1, r2, #0
   182b6:	1c1a      	adds	r2, r3, #0
   182b8:	2310      	movs	r3, #16
   182ba:	1c08      	adds	r0, r1, #0
   182bc:	1c11      	adds	r1, r2, #0
   182be:	1c1a      	adds	r2, r3, #0
   182c0:	4b8d      	ldr	r3, [pc, #564]	; (184f8 <tc_init+0x374>)
   182c2:	4798      	blx	r3
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
   182c4:	1c3b      	adds	r3, r7, #0
   182c6:	3332      	adds	r3, #50	; 0x32
   182c8:	2200      	movs	r2, #0
   182ca:	701a      	strb	r2, [r3, #0]
   182cc:	e00e      	b.n	182ec <tc_init+0x168>
		module_inst->callback[i]        = NULL;
   182ce:	1c3b      	adds	r3, r7, #0
   182d0:	3332      	adds	r3, #50	; 0x32
   182d2:	781a      	ldrb	r2, [r3, #0]
   182d4:	68fb      	ldr	r3, [r7, #12]
   182d6:	3202      	adds	r2, #2
   182d8:	0092      	lsls	r2, r2, #2
   182da:	2100      	movs	r1, #0
   182dc:	50d1      	str	r1, [r2, r3]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
   182de:	1c3b      	adds	r3, r7, #0
   182e0:	3332      	adds	r3, #50	; 0x32
   182e2:	781a      	ldrb	r2, [r3, #0]
   182e4:	1c3b      	adds	r3, r7, #0
   182e6:	3332      	adds	r3, #50	; 0x32
   182e8:	3201      	adds	r2, #1
   182ea:	701a      	strb	r2, [r3, #0]
   182ec:	1c3b      	adds	r3, r7, #0
   182ee:	3332      	adds	r3, #50	; 0x32
   182f0:	781b      	ldrb	r3, [r3, #0]
   182f2:	2b03      	cmp	r3, #3
   182f4:	d9eb      	bls.n	182ce <tc_init+0x14a>
		module_inst->callback[i]        = NULL;
	}
	module_inst->register_callback_mask     = 0x00;
   182f6:	68fb      	ldr	r3, [r7, #12]
   182f8:	2200      	movs	r2, #0
   182fa:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
   182fc:	68fb      	ldr	r3, [r7, #12]
   182fe:	2200      	movs	r2, #0
   18300:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
   18302:	1c3b      	adds	r3, r7, #0
   18304:	3330      	adds	r3, #48	; 0x30
   18306:	781a      	ldrb	r2, [r3, #0]
   18308:	4b7d      	ldr	r3, [pc, #500]	; (18500 <tc_init+0x37c>)
   1830a:	0092      	lsls	r2, r2, #2
   1830c:	68f9      	ldr	r1, [r7, #12]
   1830e:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
   18310:	68fb      	ldr	r3, [r7, #12]
   18312:	68ba      	ldr	r2, [r7, #8]
   18314:	601a      	str	r2, [r3, #0]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
   18316:	687b      	ldr	r3, [r7, #4]
   18318:	789b      	ldrb	r3, [r3, #2]
   1831a:	2b08      	cmp	r3, #8
   1831c:	d124      	bne.n	18368 <tc_init+0x1e4>
			(instance & 0x01)) {
   1831e:	1c3b      	adds	r3, r7, #0
   18320:	3330      	adds	r3, #48	; 0x30
   18322:	781a      	ldrb	r2, [r3, #0]
   18324:	2301      	movs	r3, #1
   18326:	4013      	ands	r3, r2

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
   18328:	d01e      	beq.n	18368 <tc_init+0x1e4>
			(instance & 0x01)) {
		Assert(false);
   1832a:	4b68      	ldr	r3, [pc, #416]	; (184cc <tc_init+0x348>)
   1832c:	4798      	blx	r3
   1832e:	1c03      	adds	r3, r0, #0
   18330:	2b00      	cmp	r3, #0
   18332:	d00f      	beq.n	18354 <tc_init+0x1d0>
   18334:	4b65      	ldr	r3, [pc, #404]	; (184cc <tc_init+0x348>)
   18336:	4798      	blx	r3
   18338:	1c02      	adds	r2, r0, #0
   1833a:	4b65      	ldr	r3, [pc, #404]	; (184d0 <tc_init+0x34c>)
   1833c:	4965      	ldr	r1, [pc, #404]	; (184d4 <tc_init+0x350>)
   1833e:	9100      	str	r1, [sp, #0]
   18340:	4970      	ldr	r1, [pc, #448]	; (18504 <tc_init+0x380>)
   18342:	9101      	str	r1, [sp, #4]
   18344:	1c10      	adds	r0, r2, #0
   18346:	2101      	movs	r1, #1
   18348:	1c1a      	adds	r2, r3, #0
   1834a:	23a6      	movs	r3, #166	; 0xa6
   1834c:	4c63      	ldr	r4, [pc, #396]	; (184dc <tc_init+0x358>)
   1834e:	47a0      	blx	r4
		return STATUS_ERR_INVALID_ARG;
   18350:	2317      	movs	r3, #23
   18352:	e227      	b.n	187a4 <tc_init+0x620>
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
			(instance & 0x01)) {
		Assert(false);
   18354:	4962      	ldr	r1, [pc, #392]	; (184e0 <tc_init+0x35c>)
   18356:	4a6b      	ldr	r2, [pc, #428]	; (18504 <tc_init+0x380>)
   18358:	4b5d      	ldr	r3, [pc, #372]	; (184d0 <tc_init+0x34c>)
   1835a:	1c08      	adds	r0, r1, #0
   1835c:	1c11      	adds	r1, r2, #0
   1835e:	1c1a      	adds	r2, r3, #0
   18360:	23a6      	movs	r3, #166	; 0xa6
   18362:	4c60      	ldr	r4, [pc, #384]	; (184e4 <tc_init+0x360>)
   18364:	47a0      	blx	r4
   18366:	e7fe      	b.n	18366 <tc_init+0x1e2>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
   18368:	687b      	ldr	r3, [r7, #4]
   1836a:	789a      	ldrb	r2, [r3, #2]
   1836c:	68fb      	ldr	r3, [r7, #12]
   1836e:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
   18370:	68bb      	ldr	r3, [r7, #8]
   18372:	681b      	ldr	r3, [r3, #0]
   18374:	b29b      	uxth	r3, r3
   18376:	1c1a      	adds	r2, r3, #0
   18378:	2301      	movs	r3, #1
   1837a:	4013      	ands	r3, r2
   1837c:	d001      	beq.n	18382 <tc_init+0x1fe>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
   1837e:	2305      	movs	r3, #5
   18380:	e210      	b.n	187a4 <tc_init+0x620>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
   18382:	68bb      	ldr	r3, [r7, #8]
   18384:	68db      	ldr	r3, [r3, #12]
   18386:	0e1b      	lsrs	r3, r3, #24
   18388:	b2db      	uxtb	r3, r3
   1838a:	1c1a      	adds	r2, r3, #0
   1838c:	2310      	movs	r3, #16
   1838e:	4013      	ands	r3, r2
   18390:	d001      	beq.n	18396 <tc_init+0x212>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
   18392:	231c      	movs	r3, #28
   18394:	e206      	b.n	187a4 <tc_init+0x620>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
   18396:	68bb      	ldr	r3, [r7, #8]
   18398:	681b      	ldr	r3, [r3, #0]
   1839a:	b29b      	uxth	r3, r3
   1839c:	1c1a      	adds	r2, r3, #0
   1839e:	2302      	movs	r3, #2
   183a0:	4013      	ands	r3, r2
   183a2:	d001      	beq.n	183a8 <tc_init+0x224>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
   183a4:	231c      	movs	r3, #28
   183a6:	e1fd      	b.n	187a4 <tc_init+0x620>
	}


	/* Set up the TC PWM out pin for channel 0 */
	if (config->channel_pwm_out_enabled[0]) {
   183a8:	687b      	ldr	r3, [r7, #4]
   183aa:	7c5b      	ldrb	r3, [r3, #17]
   183ac:	2b00      	cmp	r3, #0
   183ae:	d017      	beq.n	183e0 <tc_init+0x25c>
		system_pinmux_get_config_defaults(&pin_config);
   183b0:	1c3b      	adds	r3, r7, #0
   183b2:	3314      	adds	r3, #20
   183b4:	1c18      	adds	r0, r3, #0
   183b6:	4b54      	ldr	r3, [pc, #336]	; (18508 <tc_init+0x384>)
   183b8:	4798      	blx	r3
		pin_config.mux_position = config->channel_pwm_out_mux[0];
   183ba:	687b      	ldr	r3, [r7, #4]
   183bc:	69db      	ldr	r3, [r3, #28]
   183be:	b2da      	uxtb	r2, r3
   183c0:	1c3b      	adds	r3, r7, #0
   183c2:	3314      	adds	r3, #20
   183c4:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   183c6:	1c3b      	adds	r3, r7, #0
   183c8:	3314      	adds	r3, #20
   183ca:	2201      	movs	r2, #1
   183cc:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->channel_pwm_out_pin[0], &pin_config);
   183ce:	687b      	ldr	r3, [r7, #4]
   183d0:	695b      	ldr	r3, [r3, #20]
	/* Set up the TC PWM out pin for channel 0 */
	if (config->channel_pwm_out_enabled[0]) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->channel_pwm_out_mux[0];
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
   183d2:	b2da      	uxtb	r2, r3
   183d4:	1c3b      	adds	r3, r7, #0
   183d6:	3314      	adds	r3, #20
   183d8:	1c10      	adds	r0, r2, #0
   183da:	1c19      	adds	r1, r3, #0
   183dc:	4b4b      	ldr	r3, [pc, #300]	; (1850c <tc_init+0x388>)
   183de:	4798      	blx	r3
				config->channel_pwm_out_pin[0], &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->channel_pwm_out_enabled[1]) {
   183e0:	687b      	ldr	r3, [r7, #4]
   183e2:	7c9b      	ldrb	r3, [r3, #18]
   183e4:	2b00      	cmp	r3, #0
   183e6:	d017      	beq.n	18418 <tc_init+0x294>
		system_pinmux_get_config_defaults(&pin_config);
   183e8:	1c3b      	adds	r3, r7, #0
   183ea:	3314      	adds	r3, #20
   183ec:	1c18      	adds	r0, r3, #0
   183ee:	4b46      	ldr	r3, [pc, #280]	; (18508 <tc_init+0x384>)
   183f0:	4798      	blx	r3
		pin_config.mux_position = config->channel_pwm_out_mux[1];
   183f2:	687b      	ldr	r3, [r7, #4]
   183f4:	6a1b      	ldr	r3, [r3, #32]
   183f6:	b2da      	uxtb	r2, r3
   183f8:	1c3b      	adds	r3, r7, #0
   183fa:	3314      	adds	r3, #20
   183fc:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   183fe:	1c3b      	adds	r3, r7, #0
   18400:	3314      	adds	r3, #20
   18402:	2201      	movs	r2, #1
   18404:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->channel_pwm_out_pin[1], &pin_config);
   18406:	687b      	ldr	r3, [r7, #4]
   18408:	699b      	ldr	r3, [r3, #24]
	/* Set up the TC PWM out pin for channel 1 */
	if (config->channel_pwm_out_enabled[1]) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->channel_pwm_out_mux[1];
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
   1840a:	b2da      	uxtb	r2, r3
   1840c:	1c3b      	adds	r3, r7, #0
   1840e:	3314      	adds	r3, #20
   18410:	1c10      	adds	r0, r2, #0
   18412:	1c19      	adds	r1, r3, #0
   18414:	4b3d      	ldr	r3, [pc, #244]	; (1850c <tc_init+0x388>)
   18416:	4798      	blx	r3
				config->channel_pwm_out_pin[1], &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
   18418:	1c3b      	adds	r3, r7, #0
   1841a:	3330      	adds	r3, #48	; 0x30
   1841c:	781a      	ldrb	r2, [r3, #0]
   1841e:	1c3b      	adds	r3, r7, #0
   18420:	3318      	adds	r3, #24
   18422:	0052      	lsls	r2, r2, #1
   18424:	5ad3      	ldrh	r3, [r2, r3]
		system_pinmux_pin_set_config(
				config->channel_pwm_out_pin[1], &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   18426:	2002      	movs	r0, #2
   18428:	1c19      	adds	r1, r3, #0
   1842a:	4b39      	ldr	r3, [pc, #228]	; (18510 <tc_init+0x38c>)
   1842c:	4798      	blx	r3
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32 bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
   1842e:	687b      	ldr	r3, [r7, #4]
   18430:	789b      	ldrb	r3, [r3, #2]
   18432:	2b08      	cmp	r3, #8
   18434:	d10b      	bne.n	1844e <tc_init+0x2ca>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
   18436:	1c3b      	adds	r3, r7, #0
   18438:	3330      	adds	r3, #48	; 0x30
   1843a:	781b      	ldrb	r3, [r3, #0]
   1843c:	1c5a      	adds	r2, r3, #1
   1843e:	1c3b      	adds	r3, r7, #0
   18440:	3318      	adds	r3, #24
   18442:	0052      	lsls	r2, r2, #1
   18444:	5ad3      	ldrh	r3, [r2, r3]

	/* Enable the slave counter if counter_size is 32 bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   18446:	2002      	movs	r0, #2
   18448:	1c19      	adds	r1, r3, #0
   1844a:	4b31      	ldr	r3, [pc, #196]	; (18510 <tc_init+0x38c>)
   1844c:	4798      	blx	r3
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   1844e:	1c3b      	adds	r3, r7, #0
   18450:	3310      	adds	r3, #16
   18452:	1c18      	adds	r0, r3, #0
   18454:	4b2f      	ldr	r3, [pc, #188]	; (18514 <tc_init+0x390>)
   18456:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
   18458:	687b      	ldr	r3, [r7, #4]
   1845a:	781a      	ldrb	r2, [r3, #0]
   1845c:	1c3b      	adds	r3, r7, #0
   1845e:	3310      	adds	r3, #16
   18460:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
   18462:	1c3b      	adds	r3, r7, #0
   18464:	3330      	adds	r3, #48	; 0x30
   18466:	781b      	ldrb	r3, [r3, #0]
   18468:	1c3a      	adds	r2, r7, #0
   1846a:	3228      	adds	r2, #40	; 0x28
   1846c:	5cd2      	ldrb	r2, [r2, r3]
   1846e:	1c3b      	adds	r3, r7, #0
   18470:	3310      	adds	r3, #16
   18472:	1c10      	adds	r0, r2, #0
   18474:	1c19      	adds	r1, r3, #0
   18476:	4b28      	ldr	r3, [pc, #160]	; (18518 <tc_init+0x394>)
   18478:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
   1847a:	1c3b      	adds	r3, r7, #0
   1847c:	3330      	adds	r3, #48	; 0x30
   1847e:	781b      	ldrb	r3, [r3, #0]
   18480:	1c3a      	adds	r2, r7, #0
   18482:	3228      	adds	r2, #40	; 0x28
   18484:	5cd3      	ldrb	r3, [r2, r3]
   18486:	1c18      	adds	r0, r3, #0
   18488:	4b24      	ldr	r3, [pc, #144]	; (1851c <tc_init+0x398>)
   1848a:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
   1848c:	687b      	ldr	r3, [r7, #4]
   1848e:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
   18490:	687b      	ldr	r3, [r7, #4]
   18492:	799b      	ldrb	r3, [r3, #6]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
   18494:	4313      	orrs	r3, r2
   18496:	b2db      	uxtb	r3, r3
   18498:	1c1a      	adds	r2, r3, #0
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
   1849a:	687b      	ldr	r3, [r7, #4]
   1849c:	891b      	ldrh	r3, [r3, #8]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
   1849e:	4313      	orrs	r3, r2
   184a0:	b299      	uxth	r1, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;
   184a2:	687b      	ldr	r3, [r7, #4]
   184a4:	889a      	ldrh	r2, [r3, #4]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
   184a6:	1c3b      	adds	r3, r7, #0
   184a8:	3336      	adds	r3, #54	; 0x36
   184aa:	430a      	orrs	r2, r1
   184ac:	801a      	strh	r2, [r3, #0]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
   184ae:	687b      	ldr	r3, [r7, #4]
   184b0:	785b      	ldrb	r3, [r3, #1]
   184b2:	2b00      	cmp	r3, #0
   184b4:	d034      	beq.n	18520 <tc_init+0x39c>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
   184b6:	1c3b      	adds	r3, r7, #0
   184b8:	3336      	adds	r3, #54	; 0x36
   184ba:	1c3a      	adds	r2, r7, #0
   184bc:	3236      	adds	r2, #54	; 0x36
   184be:	8812      	ldrh	r2, [r2, #0]
   184c0:	2180      	movs	r1, #128	; 0x80
   184c2:	0109      	lsls	r1, r1, #4
   184c4:	430a      	orrs	r2, r1
   184c6:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
   184c8:	e02a      	b.n	18520 <tc_init+0x39c>
   184ca:	46c0      	nop			; (mov r8, r8)
   184cc:	00017e49 	.word	0x00017e49
   184d0:	00026db8 	.word	0x00026db8
   184d4:	00026cd0 	.word	0x00026cd0
   184d8:	00026df8 	.word	0x00026df8
   184dc:	000106e9 	.word	0x000106e9
   184e0:	00026cf0 	.word	0x00026cf0
   184e4:	0001b62d 	.word	0x0001b62d
   184e8:	00026d9c 	.word	0x00026d9c
   184ec:	00026ce8 	.word	0x00026ce8
   184f0:	000180dd 	.word	0x000180dd
   184f4:	00026dfc 	.word	0x00026dfc
   184f8:	0001b375 	.word	0x0001b375
   184fc:	00026e04 	.word	0x00026e04
   18500:	20001218 	.word	0x20001218
   18504:	00026d44 	.word	0x00026d44
   18508:	00017f85 	.word	0x00017f85
   1850c:	00017d71 	.word	0x00017d71
   18510:	00017ed9 	.word	0x00017ed9
   18514:	00017e5d 	.word	0x00017e5d
   18518:	00017971 	.word	0x00017971
   1851c:	00017a25 	.word	0x00017a25
   18520:	46c0      	nop			; (mov r8, r8)
   18522:	68fb      	ldr	r3, [r7, #12]
   18524:	1c18      	adds	r0, r3, #0
   18526:	4ba1      	ldr	r3, [pc, #644]	; (187ac <tc_init+0x628>)
   18528:	4798      	blx	r3
   1852a:	1c03      	adds	r3, r0, #0
   1852c:	2b00      	cmp	r3, #0
   1852e:	d1f8      	bne.n	18522 <tc_init+0x39e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
   18530:	68bb      	ldr	r3, [r7, #8]
   18532:	1c3a      	adds	r2, r7, #0
   18534:	3236      	adds	r2, #54	; 0x36
   18536:	8812      	ldrh	r2, [r2, #0]
   18538:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
   1853a:	687b      	ldr	r3, [r7, #4]
   1853c:	7b5b      	ldrb	r3, [r3, #13]
   1853e:	2b00      	cmp	r3, #0
   18540:	d003      	beq.n	1854a <tc_init+0x3c6>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
   18542:	1c3b      	adds	r3, r7, #0
   18544:	3335      	adds	r3, #53	; 0x35
   18546:	2204      	movs	r2, #4
   18548:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
   1854a:	687b      	ldr	r3, [r7, #4]
   1854c:	7b9b      	ldrb	r3, [r3, #14]
   1854e:	2b00      	cmp	r3, #0
   18550:	d008      	beq.n	18564 <tc_init+0x3e0>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
   18552:	1c3b      	adds	r3, r7, #0
   18554:	3335      	adds	r3, #53	; 0x35
   18556:	1c3a      	adds	r2, r7, #0
   18558:	3235      	adds	r2, #53	; 0x35
   1855a:	7812      	ldrb	r2, [r2, #0]
   1855c:	2101      	movs	r1, #1
   1855e:	430a      	orrs	r2, r1
   18560:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
   18562:	e7ff      	b.n	18564 <tc_init+0x3e0>
   18564:	46c0      	nop			; (mov r8, r8)
   18566:	68fb      	ldr	r3, [r7, #12]
   18568:	1c18      	adds	r0, r3, #0
   1856a:	4b90      	ldr	r3, [pc, #576]	; (187ac <tc_init+0x628>)
   1856c:	4798      	blx	r3
   1856e:	1c03      	adds	r3, r0, #0
   18570:	2b00      	cmp	r3, #0
   18572:	d1f8      	bne.n	18566 <tc_init+0x3e2>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
   18574:	68bb      	ldr	r3, [r7, #8]
   18576:	22ff      	movs	r2, #255	; 0xff
   18578:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
   1857a:	1c3b      	adds	r3, r7, #0
   1857c:	3335      	adds	r3, #53	; 0x35
   1857e:	781b      	ldrb	r3, [r3, #0]
   18580:	2b00      	cmp	r3, #0
   18582:	d00c      	beq.n	1859e <tc_init+0x41a>
		while (tc_is_syncing(module_inst)) {
   18584:	46c0      	nop			; (mov r8, r8)
   18586:	68fb      	ldr	r3, [r7, #12]
   18588:	1c18      	adds	r0, r3, #0
   1858a:	4b88      	ldr	r3, [pc, #544]	; (187ac <tc_init+0x628>)
   1858c:	4798      	blx	r3
   1858e:	1c03      	adds	r3, r0, #0
   18590:	2b00      	cmp	r3, #0
   18592:	d1f8      	bne.n	18586 <tc_init+0x402>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
   18594:	68bb      	ldr	r3, [r7, #8]
   18596:	1c3a      	adds	r2, r7, #0
   18598:	3235      	adds	r2, #53	; 0x35
   1859a:	7812      	ldrb	r2, [r2, #0]
   1859c:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
   1859e:	1c3b      	adds	r3, r7, #0
   185a0:	3333      	adds	r3, #51	; 0x33
   185a2:	687a      	ldr	r2, [r7, #4]
   185a4:	7a92      	ldrb	r2, [r2, #10]
   185a6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
   185a8:	1c3b      	adds	r3, r7, #0
   185aa:	3331      	adds	r3, #49	; 0x31
   185ac:	2200      	movs	r2, #0
   185ae:	701a      	strb	r2, [r3, #0]
   185b0:	e01f      	b.n	185f2 <tc_init+0x46e>
		if (config->enable_capture_on_channel[i] == true) {
   185b2:	1c3b      	adds	r3, r7, #0
   185b4:	3331      	adds	r3, #49	; 0x31
   185b6:	781a      	ldrb	r2, [r3, #0]
   185b8:	6879      	ldr	r1, [r7, #4]
   185ba:	2308      	movs	r3, #8
   185bc:	188a      	adds	r2, r1, r2
   185be:	18d3      	adds	r3, r2, r3
   185c0:	78db      	ldrb	r3, [r3, #3]
   185c2:	2b00      	cmp	r3, #0
   185c4:	d00e      	beq.n	185e4 <tc_init+0x460>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
   185c6:	1c3b      	adds	r3, r7, #0
   185c8:	3331      	adds	r3, #49	; 0x31
   185ca:	781b      	ldrb	r3, [r3, #0]
   185cc:	2210      	movs	r2, #16
   185ce:	1c11      	adds	r1, r2, #0
   185d0:	4099      	lsls	r1, r3
   185d2:	1c0b      	adds	r3, r1, #0
   185d4:	b2d9      	uxtb	r1, r3
   185d6:	1c3b      	adds	r3, r7, #0
   185d8:	3333      	adds	r3, #51	; 0x33
   185da:	1c3a      	adds	r2, r7, #0
   185dc:	3233      	adds	r2, #51	; 0x33
   185de:	7812      	ldrb	r2, [r2, #0]
   185e0:	430a      	orrs	r2, r1
   185e2:	701a      	strb	r2, [r3, #0]
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
   185e4:	1c3b      	adds	r3, r7, #0
   185e6:	3331      	adds	r3, #49	; 0x31
   185e8:	781a      	ldrb	r2, [r3, #0]
   185ea:	1c3b      	adds	r3, r7, #0
   185ec:	3331      	adds	r3, #49	; 0x31
   185ee:	3201      	adds	r2, #1
   185f0:	701a      	strb	r2, [r3, #0]
   185f2:	1c3b      	adds	r3, r7, #0
   185f4:	3331      	adds	r3, #49	; 0x31
   185f6:	781b      	ldrb	r3, [r3, #0]
   185f8:	2b01      	cmp	r3, #1
   185fa:	d9da      	bls.n	185b2 <tc_init+0x42e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
   185fc:	46c0      	nop			; (mov r8, r8)
   185fe:	68fb      	ldr	r3, [r7, #12]
   18600:	1c18      	adds	r0, r3, #0
   18602:	4b6a      	ldr	r3, [pc, #424]	; (187ac <tc_init+0x628>)
   18604:	4798      	blx	r3
   18606:	1c03      	adds	r3, r0, #0
   18608:	2b00      	cmp	r3, #0
   1860a:	d1f8      	bne.n	185fe <tc_init+0x47a>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
   1860c:	68bb      	ldr	r3, [r7, #8]
   1860e:	1c3a      	adds	r2, r7, #0
   18610:	3233      	adds	r2, #51	; 0x33
   18612:	7812      	ldrb	r2, [r2, #0]
   18614:	719a      	strb	r2, [r3, #6]

	/* Set evctrl register */
	if (config->invert_event_input) {
   18616:	687b      	ldr	r3, [r7, #4]
   18618:	7bdb      	ldrb	r3, [r3, #15]
   1861a:	2b00      	cmp	r3, #0
   1861c:	d008      	beq.n	18630 <tc_init+0x4ac>
		evctrl_tmp |= TC_EVCTRL_TCINV;
   1861e:	1c3b      	adds	r3, r7, #0
   18620:	3334      	adds	r3, #52	; 0x34
   18622:	1c3a      	adds	r2, r7, #0
   18624:	3234      	adds	r2, #52	; 0x34
   18626:	7812      	ldrb	r2, [r2, #0]
   18628:	2110      	movs	r1, #16
   1862a:	430a      	orrs	r2, r1
   1862c:	701a      	strb	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
   1862e:	e7ff      	b.n	18630 <tc_init+0x4ac>
   18630:	46c0      	nop			; (mov r8, r8)
   18632:	68fb      	ldr	r3, [r7, #12]
   18634:	1c18      	adds	r0, r3, #0
   18636:	4b5d      	ldr	r3, [pc, #372]	; (187ac <tc_init+0x628>)
   18638:	4798      	blx	r3
   1863a:	1c03      	adds	r3, r0, #0
   1863c:	2b00      	cmp	r3, #0
   1863e:	d1f8      	bne.n	18632 <tc_init+0x4ae>
		/* Wait for sync */
	}
	hw->COUNT8.EVCTRL.reg = evctrl_tmp | config->event_action;
   18640:	687b      	ldr	r3, [r7, #4]
   18642:	7c1a      	ldrb	r2, [r3, #16]
   18644:	1c3b      	adds	r3, r7, #0
   18646:	3334      	adds	r3, #52	; 0x34
   18648:	781b      	ldrb	r3, [r3, #0]
   1864a:	4313      	orrs	r3, r2
   1864c:	b2db      	uxtb	r3, r3
   1864e:	1c1a      	adds	r2, r3, #0
   18650:	68bb      	ldr	r3, [r7, #8]
   18652:	815a      	strh	r2, [r3, #10]

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
   18654:	68fb      	ldr	r3, [r7, #12]
   18656:	791b      	ldrb	r3, [r3, #4]
   18658:	2b04      	cmp	r3, #4
   1865a:	d004      	beq.n	18666 <tc_init+0x4e2>
   1865c:	2b08      	cmp	r3, #8
   1865e:	d05e      	beq.n	1871e <tc_init+0x59a>
   18660:	2b00      	cmp	r3, #0
   18662:	d036      	beq.n	186d2 <tc_init+0x54e>
   18664:	e081      	b.n	1876a <tc_init+0x5e6>
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
   18666:	46c0      	nop			; (mov r8, r8)
   18668:	68fb      	ldr	r3, [r7, #12]
   1866a:	1c18      	adds	r0, r3, #0
   1866c:	4b4f      	ldr	r3, [pc, #316]	; (187ac <tc_init+0x628>)
   1866e:	4798      	blx	r3
   18670:	1c03      	adds	r3, r0, #0
   18672:	2b00      	cmp	r3, #0
   18674:	d1f8      	bne.n	18668 <tc_init+0x4e4>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->size_specific.size_8_bit.count;
   18676:	687a      	ldr	r2, [r7, #4]
   18678:	2324      	movs	r3, #36	; 0x24
   1867a:	5cd2      	ldrb	r2, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
   1867c:	68bb      	ldr	r3, [r7, #8]
   1867e:	741a      	strb	r2, [r3, #16]
					config->size_specific.size_8_bit.count;


			while (tc_is_syncing(module_inst)) {
   18680:	46c0      	nop			; (mov r8, r8)
   18682:	68fb      	ldr	r3, [r7, #12]
   18684:	1c18      	adds	r0, r3, #0
   18686:	4b49      	ldr	r3, [pc, #292]	; (187ac <tc_init+0x628>)
   18688:	4798      	blx	r3
   1868a:	1c03      	adds	r3, r0, #0
   1868c:	2b00      	cmp	r3, #0
   1868e:	d1f8      	bne.n	18682 <tc_init+0x4fe>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->size_specific.size_8_bit.period;
   18690:	687a      	ldr	r2, [r7, #4]
   18692:	2325      	movs	r3, #37	; 0x25
   18694:	5cd2      	ldrb	r2, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
   18696:	68bb      	ldr	r3, [r7, #8]
   18698:	751a      	strb	r2, [r3, #20]
					config->size_specific.size_8_bit.period;

			while (tc_is_syncing(module_inst)) {
   1869a:	46c0      	nop			; (mov r8, r8)
   1869c:	68fb      	ldr	r3, [r7, #12]
   1869e:	1c18      	adds	r0, r3, #0
   186a0:	4b42      	ldr	r3, [pc, #264]	; (187ac <tc_init+0x628>)
   186a2:	4798      	blx	r3
   186a4:	1c03      	adds	r3, r0, #0
   186a6:	2b00      	cmp	r3, #0
   186a8:	d1f8      	bne.n	1869c <tc_init+0x518>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg = config->size_specific.\
					size_8_bit.compare_capture_channel[0];
   186aa:	687a      	ldr	r2, [r7, #4]
   186ac:	2326      	movs	r3, #38	; 0x26
   186ae:	5cd2      	ldrb	r2, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg = config->size_specific.\
   186b0:	68bb      	ldr	r3, [r7, #8]
   186b2:	761a      	strb	r2, [r3, #24]
					size_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
   186b4:	46c0      	nop			; (mov r8, r8)
   186b6:	68fb      	ldr	r3, [r7, #12]
   186b8:	1c18      	adds	r0, r3, #0
   186ba:	4b3c      	ldr	r3, [pc, #240]	; (187ac <tc_init+0x628>)
   186bc:	4798      	blx	r3
   186be:	1c03      	adds	r3, r0, #0
   186c0:	2b00      	cmp	r3, #0
   186c2:	d1f8      	bne.n	186b6 <tc_init+0x532>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg = config->size_specific.\
					size_8_bit.compare_capture_channel[1];
   186c4:	687a      	ldr	r2, [r7, #4]
   186c6:	2327      	movs	r3, #39	; 0x27
   186c8:	5cd2      	ldrb	r2, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg = config->size_specific.\
   186ca:	68bb      	ldr	r3, [r7, #8]
   186cc:	765a      	strb	r2, [r3, #25]
					size_8_bit.compare_capture_channel[1];

			return STATUS_OK;
   186ce:	2300      	movs	r3, #0
   186d0:	e068      	b.n	187a4 <tc_init+0x620>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
   186d2:	46c0      	nop			; (mov r8, r8)
   186d4:	68fb      	ldr	r3, [r7, #12]
   186d6:	1c18      	adds	r0, r3, #0
   186d8:	4b34      	ldr	r3, [pc, #208]	; (187ac <tc_init+0x628>)
   186da:	4798      	blx	r3
   186dc:	1c03      	adds	r3, r0, #0
   186de:	2b00      	cmp	r3, #0
   186e0:	d1f8      	bne.n	186d4 <tc_init+0x550>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->size_specific.size_16_bit.count;
   186e2:	687b      	ldr	r3, [r7, #4]
   186e4:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
   186e6:	68bb      	ldr	r3, [r7, #8]
   186e8:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
   186ea:	46c0      	nop			; (mov r8, r8)
   186ec:	68fb      	ldr	r3, [r7, #12]
   186ee:	1c18      	adds	r0, r3, #0
   186f0:	4b2e      	ldr	r3, [pc, #184]	; (187ac <tc_init+0x628>)
   186f2:	4798      	blx	r3
   186f4:	1c03      	adds	r3, r0, #0
   186f6:	2b00      	cmp	r3, #0
   186f8:	d1f8      	bne.n	186ec <tc_init+0x568>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg = config->size_specific.\
					size_16_bit.compare_capture_channel[0];
   186fa:	687b      	ldr	r3, [r7, #4]
   186fc:	8cda      	ldrh	r2, [r3, #38]	; 0x26

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg = config->size_specific.\
   186fe:	68bb      	ldr	r3, [r7, #8]
   18700:	831a      	strh	r2, [r3, #24]
					size_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
   18702:	46c0      	nop			; (mov r8, r8)
   18704:	68fb      	ldr	r3, [r7, #12]
   18706:	1c18      	adds	r0, r3, #0
   18708:	4b28      	ldr	r3, [pc, #160]	; (187ac <tc_init+0x628>)
   1870a:	4798      	blx	r3
   1870c:	1c03      	adds	r3, r0, #0
   1870e:	2b00      	cmp	r3, #0
   18710:	d1f8      	bne.n	18704 <tc_init+0x580>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg = config->size_specific.\
					size_16_bit.compare_capture_channel[1];
   18712:	687b      	ldr	r3, [r7, #4]
   18714:	8d1a      	ldrh	r2, [r3, #40]	; 0x28

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg = config->size_specific.\
   18716:	68bb      	ldr	r3, [r7, #8]
   18718:	835a      	strh	r2, [r3, #26]
					size_16_bit.compare_capture_channel[1];

			return STATUS_OK;
   1871a:	2300      	movs	r3, #0
   1871c:	e042      	b.n	187a4 <tc_init+0x620>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
   1871e:	46c0      	nop			; (mov r8, r8)
   18720:	68fb      	ldr	r3, [r7, #12]
   18722:	1c18      	adds	r0, r3, #0
   18724:	4b21      	ldr	r3, [pc, #132]	; (187ac <tc_init+0x628>)
   18726:	4798      	blx	r3
   18728:	1c03      	adds	r3, r0, #0
   1872a:	2b00      	cmp	r3, #0
   1872c:	d1f8      	bne.n	18720 <tc_init+0x59c>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->size_specific.size_32_bit.count;
   1872e:	687b      	ldr	r3, [r7, #4]
   18730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   18732:	68bb      	ldr	r3, [r7, #8]
   18734:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
   18736:	46c0      	nop			; (mov r8, r8)
   18738:	68fb      	ldr	r3, [r7, #12]
   1873a:	1c18      	adds	r0, r3, #0
   1873c:	4b1b      	ldr	r3, [pc, #108]	; (187ac <tc_init+0x628>)
   1873e:	4798      	blx	r3
   18740:	1c03      	adds	r3, r0, #0
   18742:	2b00      	cmp	r3, #0
   18744:	d1f8      	bne.n	18738 <tc_init+0x5b4>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg = config->size_specific.\
					size_32_bit.compare_capture_channel[0];
   18746:	687b      	ldr	r3, [r7, #4]
   18748:	6a9a      	ldr	r2, [r3, #40]	; 0x28

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg = config->size_specific.\
   1874a:	68bb      	ldr	r3, [r7, #8]
   1874c:	619a      	str	r2, [r3, #24]
					size_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
   1874e:	46c0      	nop			; (mov r8, r8)
   18750:	68fb      	ldr	r3, [r7, #12]
   18752:	1c18      	adds	r0, r3, #0
   18754:	4b15      	ldr	r3, [pc, #84]	; (187ac <tc_init+0x628>)
   18756:	4798      	blx	r3
   18758:	1c03      	adds	r3, r0, #0
   1875a:	2b00      	cmp	r3, #0
   1875c:	d1f8      	bne.n	18750 <tc_init+0x5cc>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg = config->size_specific.\
					size_32_bit.compare_capture_channel[1];
   1875e:	687b      	ldr	r3, [r7, #4]
   18760:	6ada      	ldr	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg = config->size_specific.\
   18762:	68bb      	ldr	r3, [r7, #8]
   18764:	61da      	str	r2, [r3, #28]
					size_32_bit.compare_capture_channel[1];

			return STATUS_OK;
   18766:	2300      	movs	r3, #0
   18768:	e01c      	b.n	187a4 <tc_init+0x620>
	}

	Assert(false);
   1876a:	4b11      	ldr	r3, [pc, #68]	; (187b0 <tc_init+0x62c>)
   1876c:	4798      	blx	r3
   1876e:	1c03      	adds	r3, r0, #0
   18770:	2b00      	cmp	r3, #0
   18772:	d00f      	beq.n	18794 <tc_init+0x610>
   18774:	4b0e      	ldr	r3, [pc, #56]	; (187b0 <tc_init+0x62c>)
   18776:	4798      	blx	r3
   18778:	1c01      	adds	r1, r0, #0
   1877a:	4a0e      	ldr	r2, [pc, #56]	; (187b4 <tc_init+0x630>)
   1877c:	23bc      	movs	r3, #188	; 0xbc
   1877e:	005b      	lsls	r3, r3, #1
   18780:	480d      	ldr	r0, [pc, #52]	; (187b8 <tc_init+0x634>)
   18782:	9000      	str	r0, [sp, #0]
   18784:	480d      	ldr	r0, [pc, #52]	; (187bc <tc_init+0x638>)
   18786:	9001      	str	r0, [sp, #4]
   18788:	1c08      	adds	r0, r1, #0
   1878a:	2101      	movs	r1, #1
   1878c:	4c0c      	ldr	r4, [pc, #48]	; (187c0 <tc_init+0x63c>)
   1878e:	47a0      	blx	r4
	return STATUS_ERR_INVALID_ARG;
   18790:	2317      	movs	r3, #23
   18792:	e007      	b.n	187a4 <tc_init+0x620>
					size_32_bit.compare_capture_channel[1];

			return STATUS_OK;
	}

	Assert(false);
   18794:	480b      	ldr	r0, [pc, #44]	; (187c4 <tc_init+0x640>)
   18796:	4909      	ldr	r1, [pc, #36]	; (187bc <tc_init+0x638>)
   18798:	4a06      	ldr	r2, [pc, #24]	; (187b4 <tc_init+0x630>)
   1879a:	23bc      	movs	r3, #188	; 0xbc
   1879c:	005b      	lsls	r3, r3, #1
   1879e:	4c0a      	ldr	r4, [pc, #40]	; (187c8 <tc_init+0x644>)
   187a0:	47a0      	blx	r4
   187a2:	e7fe      	b.n	187a2 <tc_init+0x61e>
	return STATUS_ERR_INVALID_ARG;
}
   187a4:	1c18      	adds	r0, r3, #0
   187a6:	46bd      	mov	sp, r7
   187a8:	b00f      	add	sp, #60	; 0x3c
   187aa:	bd90      	pop	{r4, r7, pc}
   187ac:	00018005 	.word	0x00018005
   187b0:	00017e49 	.word	0x00017e49
   187b4:	00026db8 	.word	0x00026db8
   187b8:	00026cd0 	.word	0x00026cd0
   187bc:	00026d44 	.word	0x00026d44
   187c0:	000106e9 	.word	0x000106e9
   187c4:	00026cf0 	.word	0x00026cf0
   187c8:	0001b62d 	.word	0x0001b62d

000187cc <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
   187cc:	b590      	push	{r4, r7, lr}
   187ce:	b089      	sub	sp, #36	; 0x24
   187d0:	af02      	add	r7, sp, #8
   187d2:	60f8      	str	r0, [r7, #12]
   187d4:	607a      	str	r2, [r7, #4]
   187d6:	1c3b      	adds	r3, r7, #0
   187d8:	330b      	adds	r3, #11
   187da:	1c0a      	adds	r2, r1, #0
   187dc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
   187de:	4b55      	ldr	r3, [pc, #340]	; (18934 <tc_set_compare_value+0x168>)
   187e0:	4798      	blx	r3
   187e2:	1c03      	adds	r3, r0, #0
   187e4:	2b00      	cmp	r3, #0
   187e6:	d010      	beq.n	1880a <tc_set_compare_value+0x3e>
   187e8:	68fb      	ldr	r3, [r7, #12]
   187ea:	2b00      	cmp	r3, #0
   187ec:	d117      	bne.n	1881e <tc_set_compare_value+0x52>
   187ee:	4b51      	ldr	r3, [pc, #324]	; (18934 <tc_set_compare_value+0x168>)
   187f0:	4798      	blx	r3
   187f2:	1c01      	adds	r1, r0, #0
   187f4:	4a50      	ldr	r2, [pc, #320]	; (18938 <tc_set_compare_value+0x16c>)
   187f6:	4b51      	ldr	r3, [pc, #324]	; (1893c <tc_set_compare_value+0x170>)
   187f8:	4851      	ldr	r0, [pc, #324]	; (18940 <tc_set_compare_value+0x174>)
   187fa:	9000      	str	r0, [sp, #0]
   187fc:	4851      	ldr	r0, [pc, #324]	; (18944 <tc_set_compare_value+0x178>)
   187fe:	9001      	str	r0, [sp, #4]
   18800:	1c08      	adds	r0, r1, #0
   18802:	2101      	movs	r1, #1
   18804:	4c50      	ldr	r4, [pc, #320]	; (18948 <tc_set_compare_value+0x17c>)
   18806:	47a0      	blx	r4
   18808:	e009      	b.n	1881e <tc_set_compare_value+0x52>
   1880a:	68fb      	ldr	r3, [r7, #12]
   1880c:	2b00      	cmp	r3, #0
   1880e:	d106      	bne.n	1881e <tc_set_compare_value+0x52>
   18810:	484e      	ldr	r0, [pc, #312]	; (1894c <tc_set_compare_value+0x180>)
   18812:	494c      	ldr	r1, [pc, #304]	; (18944 <tc_set_compare_value+0x178>)
   18814:	4a48      	ldr	r2, [pc, #288]	; (18938 <tc_set_compare_value+0x16c>)
   18816:	4b49      	ldr	r3, [pc, #292]	; (1893c <tc_set_compare_value+0x170>)
   18818:	4c4d      	ldr	r4, [pc, #308]	; (18950 <tc_set_compare_value+0x184>)
   1881a:	47a0      	blx	r4
   1881c:	e7fe      	b.n	1881c <tc_set_compare_value+0x50>
	Assert(module_inst->hw);
   1881e:	4b45      	ldr	r3, [pc, #276]	; (18934 <tc_set_compare_value+0x168>)
   18820:	4798      	blx	r3
   18822:	1c03      	adds	r3, r0, #0
   18824:	2b00      	cmp	r3, #0
   18826:	d011      	beq.n	1884c <tc_set_compare_value+0x80>
   18828:	68fb      	ldr	r3, [r7, #12]
   1882a:	681b      	ldr	r3, [r3, #0]
   1882c:	2b00      	cmp	r3, #0
   1882e:	d118      	bne.n	18862 <tc_set_compare_value+0x96>
   18830:	4b40      	ldr	r3, [pc, #256]	; (18934 <tc_set_compare_value+0x168>)
   18832:	4798      	blx	r3
   18834:	1c01      	adds	r1, r0, #0
   18836:	4a40      	ldr	r2, [pc, #256]	; (18938 <tc_set_compare_value+0x16c>)
   18838:	4b46      	ldr	r3, [pc, #280]	; (18954 <tc_set_compare_value+0x188>)
   1883a:	4841      	ldr	r0, [pc, #260]	; (18940 <tc_set_compare_value+0x174>)
   1883c:	9000      	str	r0, [sp, #0]
   1883e:	4846      	ldr	r0, [pc, #280]	; (18958 <tc_set_compare_value+0x18c>)
   18840:	9001      	str	r0, [sp, #4]
   18842:	1c08      	adds	r0, r1, #0
   18844:	2101      	movs	r1, #1
   18846:	4c40      	ldr	r4, [pc, #256]	; (18948 <tc_set_compare_value+0x17c>)
   18848:	47a0      	blx	r4
   1884a:	e00a      	b.n	18862 <tc_set_compare_value+0x96>
   1884c:	68fb      	ldr	r3, [r7, #12]
   1884e:	681b      	ldr	r3, [r3, #0]
   18850:	2b00      	cmp	r3, #0
   18852:	d106      	bne.n	18862 <tc_set_compare_value+0x96>
   18854:	483d      	ldr	r0, [pc, #244]	; (1894c <tc_set_compare_value+0x180>)
   18856:	4940      	ldr	r1, [pc, #256]	; (18958 <tc_set_compare_value+0x18c>)
   18858:	4a37      	ldr	r2, [pc, #220]	; (18938 <tc_set_compare_value+0x16c>)
   1885a:	4b3e      	ldr	r3, [pc, #248]	; (18954 <tc_set_compare_value+0x188>)
   1885c:	4c3c      	ldr	r4, [pc, #240]	; (18950 <tc_set_compare_value+0x184>)
   1885e:	47a0      	blx	r4
   18860:	e7fe      	b.n	18860 <tc_set_compare_value+0x94>
	Assert(compare);
   18862:	4b34      	ldr	r3, [pc, #208]	; (18934 <tc_set_compare_value+0x168>)
   18864:	4798      	blx	r3
   18866:	1c03      	adds	r3, r0, #0
   18868:	2b00      	cmp	r3, #0
   1886a:	d010      	beq.n	1888e <tc_set_compare_value+0xc2>
   1886c:	687b      	ldr	r3, [r7, #4]
   1886e:	2b00      	cmp	r3, #0
   18870:	d117      	bne.n	188a2 <tc_set_compare_value+0xd6>
   18872:	4b30      	ldr	r3, [pc, #192]	; (18934 <tc_set_compare_value+0x168>)
   18874:	4798      	blx	r3
   18876:	1c01      	adds	r1, r0, #0
   18878:	4a2f      	ldr	r2, [pc, #188]	; (18938 <tc_set_compare_value+0x16c>)
   1887a:	4b38      	ldr	r3, [pc, #224]	; (1895c <tc_set_compare_value+0x190>)
   1887c:	4830      	ldr	r0, [pc, #192]	; (18940 <tc_set_compare_value+0x174>)
   1887e:	9000      	str	r0, [sp, #0]
   18880:	4837      	ldr	r0, [pc, #220]	; (18960 <tc_set_compare_value+0x194>)
   18882:	9001      	str	r0, [sp, #4]
   18884:	1c08      	adds	r0, r1, #0
   18886:	2101      	movs	r1, #1
   18888:	4c2f      	ldr	r4, [pc, #188]	; (18948 <tc_set_compare_value+0x17c>)
   1888a:	47a0      	blx	r4
   1888c:	e009      	b.n	188a2 <tc_set_compare_value+0xd6>
   1888e:	687b      	ldr	r3, [r7, #4]
   18890:	2b00      	cmp	r3, #0
   18892:	d106      	bne.n	188a2 <tc_set_compare_value+0xd6>
   18894:	482d      	ldr	r0, [pc, #180]	; (1894c <tc_set_compare_value+0x180>)
   18896:	4932      	ldr	r1, [pc, #200]	; (18960 <tc_set_compare_value+0x194>)
   18898:	4a27      	ldr	r2, [pc, #156]	; (18938 <tc_set_compare_value+0x16c>)
   1889a:	4b30      	ldr	r3, [pc, #192]	; (1895c <tc_set_compare_value+0x190>)
   1889c:	4c2c      	ldr	r4, [pc, #176]	; (18950 <tc_set_compare_value+0x184>)
   1889e:	47a0      	blx	r4
   188a0:	e7fe      	b.n	188a0 <tc_set_compare_value+0xd4>

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
   188a2:	68fb      	ldr	r3, [r7, #12]
   188a4:	681b      	ldr	r3, [r3, #0]
   188a6:	617b      	str	r3, [r7, #20]

	while (tc_is_syncing(module_inst)) {
   188a8:	46c0      	nop			; (mov r8, r8)
   188aa:	68fb      	ldr	r3, [r7, #12]
   188ac:	1c18      	adds	r0, r3, #0
   188ae:	4b2d      	ldr	r3, [pc, #180]	; (18964 <tc_set_compare_value+0x198>)
   188b0:	4798      	blx	r3
   188b2:	1c03      	adds	r3, r0, #0
   188b4:	2b00      	cmp	r3, #0
   188b6:	d1f8      	bne.n	188aa <tc_set_compare_value+0xde>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
   188b8:	68fb      	ldr	r3, [r7, #12]
   188ba:	791b      	ldrb	r3, [r3, #4]
   188bc:	2b04      	cmp	r3, #4
   188be:	d004      	beq.n	188ca <tc_set_compare_value+0xfe>
   188c0:	2b08      	cmp	r3, #8
   188c2:	d021      	beq.n	18908 <tc_set_compare_value+0x13c>
   188c4:	2b00      	cmp	r3, #0
   188c6:	d00f      	beq.n	188e8 <tc_set_compare_value+0x11c>
   188c8:	e02e      	b.n	18928 <tc_set_compare_value+0x15c>
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
   188ca:	1c3b      	adds	r3, r7, #0
   188cc:	330b      	adds	r3, #11
   188ce:	781b      	ldrb	r3, [r3, #0]
   188d0:	2b01      	cmp	r3, #1
   188d2:	d809      	bhi.n	188e8 <tc_set_compare_value+0x11c>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
   188d4:	1c3b      	adds	r3, r7, #0
   188d6:	330b      	adds	r3, #11
   188d8:	781b      	ldrb	r3, [r3, #0]
						(uint8_t)compare;
   188da:	687a      	ldr	r2, [r7, #4]
   188dc:	b2d2      	uxtb	r2, r2
	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
   188de:	6979      	ldr	r1, [r7, #20]
   188e0:	18cb      	adds	r3, r1, r3
   188e2:	761a      	strb	r2, [r3, #24]
						(uint8_t)compare;
				return STATUS_OK;
   188e4:	2300      	movs	r3, #0
   188e6:	e020      	b.n	1892a <tc_set_compare_value+0x15e>
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
   188e8:	1c3b      	adds	r3, r7, #0
   188ea:	330b      	adds	r3, #11
   188ec:	781b      	ldrb	r3, [r3, #0]
   188ee:	2b01      	cmp	r3, #1
   188f0:	d80a      	bhi.n	18908 <tc_set_compare_value+0x13c>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
   188f2:	1c3b      	adds	r3, r7, #0
   188f4:	330b      	adds	r3, #11
   188f6:	781a      	ldrb	r2, [r3, #0]
						(uint16_t)compare;
   188f8:	687b      	ldr	r3, [r7, #4]
   188fa:	b299      	uxth	r1, r3
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
   188fc:	697b      	ldr	r3, [r7, #20]
   188fe:	320c      	adds	r2, #12
   18900:	0052      	lsls	r2, r2, #1
   18902:	52d1      	strh	r1, [r2, r3]
						(uint16_t)compare;
				return STATUS_OK;
   18904:	2300      	movs	r3, #0
   18906:	e010      	b.n	1892a <tc_set_compare_value+0x15e>
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
   18908:	1c3b      	adds	r3, r7, #0
   1890a:	330b      	adds	r3, #11
   1890c:	781b      	ldrb	r3, [r3, #0]
   1890e:	2b01      	cmp	r3, #1
   18910:	d80a      	bhi.n	18928 <tc_set_compare_value+0x15c>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
   18912:	1c3b      	adds	r3, r7, #0
   18914:	330b      	adds	r3, #11
   18916:	781a      	ldrb	r2, [r3, #0]
   18918:	687b      	ldr	r3, [r7, #4]
   1891a:	b299      	uxth	r1, r3
   1891c:	697b      	ldr	r3, [r7, #20]
   1891e:	320c      	adds	r2, #12
   18920:	0052      	lsls	r2, r2, #1
   18922:	52d1      	strh	r1, [r2, r3]
						(uint32_t)compare;
				return STATUS_OK;
   18924:	2300      	movs	r3, #0
   18926:	e000      	b.n	1892a <tc_set_compare_value+0x15e>
			}
	}

	return STATUS_ERR_INVALID_ARG;
   18928:	2317      	movs	r3, #23
}
   1892a:	1c18      	adds	r0, r3, #0
   1892c:	46bd      	mov	sp, r7
   1892e:	b007      	add	sp, #28
   18930:	bd90      	pop	{r4, r7, pc}
   18932:	46c0      	nop			; (mov r8, r8)
   18934:	00017e49 	.word	0x00017e49
   18938:	00026db8 	.word	0x00026db8
   1893c:	00000435 	.word	0x00000435
   18940:	00026cd0 	.word	0x00026cd0
   18944:	00026d9c 	.word	0x00026d9c
   18948:	000106e9 	.word	0x000106e9
   1894c:	00026cf0 	.word	0x00026cf0
   18950:	0001b62d 	.word	0x0001b62d
   18954:	00000436 	.word	0x00000436
   18958:	00026da8 	.word	0x00026da8
   1895c:	00000437 	.word	0x00000437
   18960:	00026e14 	.word	0x00026e14
   18964:	00018005 	.word	0x00018005

00018968 <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
   18968:	b580      	push	{r7, lr}
   1896a:	af00      	add	r7, sp, #0
	return test_case_ptr;
   1896c:	4b02      	ldr	r3, [pc, #8]	; (18978 <test_get_case+0x10>)
   1896e:	681b      	ldr	r3, [r3, #0]
}
   18970:	1c18      	adds	r0, r3, #0
   18972:	46bd      	mov	sp, r7
   18974:	bd80      	pop	{r7, pc}
   18976:	46c0      	nop			; (mov r8, r8)
   18978:	2000041c 	.word	0x2000041c

0001897c <tc_register_callback>:
 */
enum status_code tc_register_callback(
		struct tc_module *const module,
		tc_callback_t callback_func,
		const enum tc_callback callback_type)
{
   1897c:	b590      	push	{r4, r7, lr}
   1897e:	b087      	sub	sp, #28
   18980:	af02      	add	r7, sp, #8
   18982:	60f8      	str	r0, [r7, #12]
   18984:	60b9      	str	r1, [r7, #8]
   18986:	1dfb      	adds	r3, r7, #7
   18988:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
   1898a:	4b3d      	ldr	r3, [pc, #244]	; (18a80 <tc_register_callback+0x104>)
   1898c:	4798      	blx	r3
   1898e:	1c03      	adds	r3, r0, #0
   18990:	2b00      	cmp	r3, #0
   18992:	d011      	beq.n	189b8 <tc_register_callback+0x3c>
   18994:	68fb      	ldr	r3, [r7, #12]
   18996:	2b00      	cmp	r3, #0
   18998:	d11b      	bne.n	189d2 <tc_register_callback+0x56>
   1899a:	4b39      	ldr	r3, [pc, #228]	; (18a80 <tc_register_callback+0x104>)
   1899c:	4798      	blx	r3
   1899e:	1c02      	adds	r2, r0, #0
   189a0:	4b38      	ldr	r3, [pc, #224]	; (18a84 <tc_register_callback+0x108>)
   189a2:	4939      	ldr	r1, [pc, #228]	; (18a88 <tc_register_callback+0x10c>)
   189a4:	9100      	str	r1, [sp, #0]
   189a6:	4939      	ldr	r1, [pc, #228]	; (18a8c <tc_register_callback+0x110>)
   189a8:	9101      	str	r1, [sp, #4]
   189aa:	1c10      	adds	r0, r2, #0
   189ac:	2101      	movs	r1, #1
   189ae:	1c1a      	adds	r2, r3, #0
   189b0:	2345      	movs	r3, #69	; 0x45
   189b2:	4c37      	ldr	r4, [pc, #220]	; (18a90 <tc_register_callback+0x114>)
   189b4:	47a0      	blx	r4
   189b6:	e00c      	b.n	189d2 <tc_register_callback+0x56>
   189b8:	68fb      	ldr	r3, [r7, #12]
   189ba:	2b00      	cmp	r3, #0
   189bc:	d109      	bne.n	189d2 <tc_register_callback+0x56>
   189be:	4935      	ldr	r1, [pc, #212]	; (18a94 <tc_register_callback+0x118>)
   189c0:	4a32      	ldr	r2, [pc, #200]	; (18a8c <tc_register_callback+0x110>)
   189c2:	4b30      	ldr	r3, [pc, #192]	; (18a84 <tc_register_callback+0x108>)
   189c4:	1c08      	adds	r0, r1, #0
   189c6:	1c11      	adds	r1, r2, #0
   189c8:	1c1a      	adds	r2, r3, #0
   189ca:	2345      	movs	r3, #69	; 0x45
   189cc:	4c32      	ldr	r4, [pc, #200]	; (18a98 <tc_register_callback+0x11c>)
   189ce:	47a0      	blx	r4
   189d0:	e7fe      	b.n	189d0 <tc_register_callback+0x54>
	Assert(callback_func);
   189d2:	4b2b      	ldr	r3, [pc, #172]	; (18a80 <tc_register_callback+0x104>)
   189d4:	4798      	blx	r3
   189d6:	1c03      	adds	r3, r0, #0
   189d8:	2b00      	cmp	r3, #0
   189da:	d011      	beq.n	18a00 <tc_register_callback+0x84>
   189dc:	68bb      	ldr	r3, [r7, #8]
   189de:	2b00      	cmp	r3, #0
   189e0:	d11b      	bne.n	18a1a <tc_register_callback+0x9e>
   189e2:	4b27      	ldr	r3, [pc, #156]	; (18a80 <tc_register_callback+0x104>)
   189e4:	4798      	blx	r3
   189e6:	1c02      	adds	r2, r0, #0
   189e8:	4b26      	ldr	r3, [pc, #152]	; (18a84 <tc_register_callback+0x108>)
   189ea:	4927      	ldr	r1, [pc, #156]	; (18a88 <tc_register_callback+0x10c>)
   189ec:	9100      	str	r1, [sp, #0]
   189ee:	492b      	ldr	r1, [pc, #172]	; (18a9c <tc_register_callback+0x120>)
   189f0:	9101      	str	r1, [sp, #4]
   189f2:	1c10      	adds	r0, r2, #0
   189f4:	2101      	movs	r1, #1
   189f6:	1c1a      	adds	r2, r3, #0
   189f8:	2346      	movs	r3, #70	; 0x46
   189fa:	4c25      	ldr	r4, [pc, #148]	; (18a90 <tc_register_callback+0x114>)
   189fc:	47a0      	blx	r4
   189fe:	e00c      	b.n	18a1a <tc_register_callback+0x9e>
   18a00:	68bb      	ldr	r3, [r7, #8]
   18a02:	2b00      	cmp	r3, #0
   18a04:	d109      	bne.n	18a1a <tc_register_callback+0x9e>
   18a06:	4923      	ldr	r1, [pc, #140]	; (18a94 <tc_register_callback+0x118>)
   18a08:	4a24      	ldr	r2, [pc, #144]	; (18a9c <tc_register_callback+0x120>)
   18a0a:	4b1e      	ldr	r3, [pc, #120]	; (18a84 <tc_register_callback+0x108>)
   18a0c:	1c08      	adds	r0, r1, #0
   18a0e:	1c11      	adds	r1, r2, #0
   18a10:	1c1a      	adds	r2, r3, #0
   18a12:	2346      	movs	r3, #70	; 0x46
   18a14:	4c20      	ldr	r4, [pc, #128]	; (18a98 <tc_register_callback+0x11c>)
   18a16:	47a0      	blx	r4
   18a18:	e7fe      	b.n	18a18 <tc_register_callback+0x9c>

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   18a1a:	1dfb      	adds	r3, r7, #7
   18a1c:	781a      	ldrb	r2, [r3, #0]
   18a1e:	68fb      	ldr	r3, [r7, #12]
   18a20:	3202      	adds	r2, #2
   18a22:	0092      	lsls	r2, r2, #2
   18a24:	68b9      	ldr	r1, [r7, #8]
   18a26:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
   18a28:	1dfb      	adds	r3, r7, #7
   18a2a:	781b      	ldrb	r3, [r3, #0]
   18a2c:	2b02      	cmp	r3, #2
   18a2e:	d107      	bne.n	18a40 <tc_register_callback+0xc4>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
   18a30:	68fb      	ldr	r3, [r7, #12]
   18a32:	7e1b      	ldrb	r3, [r3, #24]
   18a34:	2210      	movs	r2, #16
   18a36:	4313      	orrs	r3, r2
   18a38:	b2da      	uxtb	r2, r3
   18a3a:	68fb      	ldr	r3, [r7, #12]
   18a3c:	761a      	strb	r2, [r3, #24]
   18a3e:	e01a      	b.n	18a76 <tc_register_callback+0xfa>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
   18a40:	1dfb      	adds	r3, r7, #7
   18a42:	781b      	ldrb	r3, [r3, #0]
   18a44:	2b03      	cmp	r3, #3
   18a46:	d107      	bne.n	18a58 <tc_register_callback+0xdc>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
   18a48:	68fb      	ldr	r3, [r7, #12]
   18a4a:	7e1b      	ldrb	r3, [r3, #24]
   18a4c:	2220      	movs	r2, #32
   18a4e:	4313      	orrs	r3, r2
   18a50:	b2da      	uxtb	r2, r3
   18a52:	68fb      	ldr	r3, [r7, #12]
   18a54:	761a      	strb	r2, [r3, #24]
   18a56:	e00e      	b.n	18a76 <tc_register_callback+0xfa>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
   18a58:	68fb      	ldr	r3, [r7, #12]
   18a5a:	7e1b      	ldrb	r3, [r3, #24]
   18a5c:	b2da      	uxtb	r2, r3
   18a5e:	1dfb      	adds	r3, r7, #7
   18a60:	781b      	ldrb	r3, [r3, #0]
   18a62:	2101      	movs	r1, #1
   18a64:	1c08      	adds	r0, r1, #0
   18a66:	4098      	lsls	r0, r3
   18a68:	1c03      	adds	r3, r0, #0
   18a6a:	b2db      	uxtb	r3, r3
   18a6c:	4313      	orrs	r3, r2
   18a6e:	b2db      	uxtb	r3, r3
   18a70:	b2da      	uxtb	r2, r3
   18a72:	68fb      	ldr	r3, [r7, #12]
   18a74:	761a      	strb	r2, [r3, #24]
	}
	return STATUS_OK;
   18a76:	2300      	movs	r3, #0
}
   18a78:	1c18      	adds	r0, r3, #0
   18a7a:	46bd      	mov	sp, r7
   18a7c:	b005      	add	sp, #20
   18a7e:	bd90      	pop	{r4, r7, pc}
   18a80:	00018969 	.word	0x00018969
   18a84:	00026e28 	.word	0x00026e28
   18a88:	00026e54 	.word	0x00026e54
   18a8c:	00026e6c 	.word	0x00026e6c
   18a90:	000106e9 	.word	0x000106e9
   18a94:	00026e74 	.word	0x00026e74
   18a98:	0001b62d 	.word	0x0001b62d
   18a9c:	00026e98 	.word	0x00026e98

00018aa0 <TC0_Handler>:
		void TC##n##_Handler(void) \
		{ \
			_tc_interrupt_handler(n); \
		}

MREPEAT(TC_INST_NUM, _TC_INTERRUPT_HANDLER, ~)
   18aa0:	b580      	push	{r7, lr}
   18aa2:	af00      	add	r7, sp, #0
   18aa4:	2000      	movs	r0, #0
   18aa6:	4b02      	ldr	r3, [pc, #8]	; (18ab0 <TC0_Handler+0x10>)
   18aa8:	4798      	blx	r3
   18aaa:	46bd      	mov	sp, r7
   18aac:	bd80      	pop	{r7, pc}
   18aae:	46c0      	nop			; (mov r8, r8)
   18ab0:	00018b41 	.word	0x00018b41

00018ab4 <TC1_Handler>:
   18ab4:	b580      	push	{r7, lr}
   18ab6:	af00      	add	r7, sp, #0
   18ab8:	2001      	movs	r0, #1
   18aba:	4b02      	ldr	r3, [pc, #8]	; (18ac4 <TC1_Handler+0x10>)
   18abc:	4798      	blx	r3
   18abe:	46bd      	mov	sp, r7
   18ac0:	bd80      	pop	{r7, pc}
   18ac2:	46c0      	nop			; (mov r8, r8)
   18ac4:	00018b41 	.word	0x00018b41

00018ac8 <TC2_Handler>:
   18ac8:	b580      	push	{r7, lr}
   18aca:	af00      	add	r7, sp, #0
   18acc:	2002      	movs	r0, #2
   18ace:	4b02      	ldr	r3, [pc, #8]	; (18ad8 <TC2_Handler+0x10>)
   18ad0:	4798      	blx	r3
   18ad2:	46bd      	mov	sp, r7
   18ad4:	bd80      	pop	{r7, pc}
   18ad6:	46c0      	nop			; (mov r8, r8)
   18ad8:	00018b41 	.word	0x00018b41

00018adc <TC3_Handler>:
   18adc:	b580      	push	{r7, lr}
   18ade:	af00      	add	r7, sp, #0
   18ae0:	2003      	movs	r0, #3
   18ae2:	4b02      	ldr	r3, [pc, #8]	; (18aec <TC3_Handler+0x10>)
   18ae4:	4798      	blx	r3
   18ae6:	46bd      	mov	sp, r7
   18ae8:	bd80      	pop	{r7, pc}
   18aea:	46c0      	nop			; (mov r8, r8)
   18aec:	00018b41 	.word	0x00018b41

00018af0 <TC4_Handler>:
   18af0:	b580      	push	{r7, lr}
   18af2:	af00      	add	r7, sp, #0
   18af4:	2004      	movs	r0, #4
   18af6:	4b02      	ldr	r3, [pc, #8]	; (18b00 <TC4_Handler+0x10>)
   18af8:	4798      	blx	r3
   18afa:	46bd      	mov	sp, r7
   18afc:	bd80      	pop	{r7, pc}
   18afe:	46c0      	nop			; (mov r8, r8)
   18b00:	00018b41 	.word	0x00018b41

00018b04 <TC5_Handler>:
   18b04:	b580      	push	{r7, lr}
   18b06:	af00      	add	r7, sp, #0
   18b08:	2005      	movs	r0, #5
   18b0a:	4b02      	ldr	r3, [pc, #8]	; (18b14 <TC5_Handler+0x10>)
   18b0c:	4798      	blx	r3
   18b0e:	46bd      	mov	sp, r7
   18b10:	bd80      	pop	{r7, pc}
   18b12:	46c0      	nop			; (mov r8, r8)
   18b14:	00018b41 	.word	0x00018b41

00018b18 <TC6_Handler>:
   18b18:	b580      	push	{r7, lr}
   18b1a:	af00      	add	r7, sp, #0
   18b1c:	2006      	movs	r0, #6
   18b1e:	4b02      	ldr	r3, [pc, #8]	; (18b28 <TC6_Handler+0x10>)
   18b20:	4798      	blx	r3
   18b22:	46bd      	mov	sp, r7
   18b24:	bd80      	pop	{r7, pc}
   18b26:	46c0      	nop			; (mov r8, r8)
   18b28:	00018b41 	.word	0x00018b41

00018b2c <TC7_Handler>:
   18b2c:	b580      	push	{r7, lr}
   18b2e:	af00      	add	r7, sp, #0
   18b30:	2007      	movs	r0, #7
   18b32:	4b02      	ldr	r3, [pc, #8]	; (18b3c <TC7_Handler+0x10>)
   18b34:	4798      	blx	r3
   18b36:	46bd      	mov	sp, r7
   18b38:	bd80      	pop	{r7, pc}
   18b3a:	46c0      	nop			; (mov r8, r8)
   18b3c:	00018b41 	.word	0x00018b41

00018b40 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   18b40:	b580      	push	{r7, lr}
   18b42:	b084      	sub	sp, #16
   18b44:	af00      	add	r7, sp, #0
   18b46:	1c02      	adds	r2, r0, #0
   18b48:	1dfb      	adds	r3, r7, #7
   18b4a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   18b4c:	1dfb      	adds	r3, r7, #7
   18b4e:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
   18b50:	4b29      	ldr	r3, [pc, #164]	; (18bf8 <_tc_interrupt_handler+0xb8>)
   18b52:	0092      	lsls	r2, r2, #2
   18b54:	58d3      	ldr	r3, [r2, r3]
   18b56:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18b58:	68fb      	ldr	r3, [r7, #12]
   18b5a:	681b      	ldr	r3, [r3, #0]
   18b5c:	68db      	ldr	r3, [r3, #12]
   18b5e:	021b      	lsls	r3, r3, #8
   18b60:	0e1b      	lsrs	r3, r3, #24
   18b62:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   18b64:	68fa      	ldr	r2, [r7, #12]
   18b66:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18b68:	4013      	ands	r3, r2
   18b6a:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
   18b6c:	68fb      	ldr	r3, [r7, #12]
   18b6e:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18b70:	1c3b      	adds	r3, r7, #0
   18b72:	330b      	adds	r3, #11
   18b74:	400a      	ands	r2, r1
   18b76:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   18b78:	1c3b      	adds	r3, r7, #0
   18b7a:	330b      	adds	r3, #11
   18b7c:	781a      	ldrb	r2, [r3, #0]
   18b7e:	2301      	movs	r3, #1
   18b80:	4013      	ands	r3, r2
   18b82:	d008      	beq.n	18b96 <_tc_interrupt_handler+0x56>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   18b84:	68fb      	ldr	r3, [r7, #12]
   18b86:	689b      	ldr	r3, [r3, #8]
   18b88:	68fa      	ldr	r2, [r7, #12]
   18b8a:	1c10      	adds	r0, r2, #0
   18b8c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   18b8e:	68fb      	ldr	r3, [r7, #12]
   18b90:	681b      	ldr	r3, [r3, #0]
   18b92:	2201      	movs	r2, #1
   18b94:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   18b96:	1c3b      	adds	r3, r7, #0
   18b98:	330b      	adds	r3, #11
   18b9a:	781a      	ldrb	r2, [r3, #0]
   18b9c:	2302      	movs	r3, #2
   18b9e:	4013      	ands	r3, r2
   18ba0:	d008      	beq.n	18bb4 <_tc_interrupt_handler+0x74>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   18ba2:	68fb      	ldr	r3, [r7, #12]
   18ba4:	68db      	ldr	r3, [r3, #12]
   18ba6:	68fa      	ldr	r2, [r7, #12]
   18ba8:	1c10      	adds	r0, r2, #0
   18baa:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   18bac:	68fb      	ldr	r3, [r7, #12]
   18bae:	681b      	ldr	r3, [r3, #0]
   18bb0:	2202      	movs	r2, #2
   18bb2:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   18bb4:	1c3b      	adds	r3, r7, #0
   18bb6:	330b      	adds	r3, #11
   18bb8:	781a      	ldrb	r2, [r3, #0]
   18bba:	2310      	movs	r3, #16
   18bbc:	4013      	ands	r3, r2
   18bbe:	d008      	beq.n	18bd2 <_tc_interrupt_handler+0x92>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   18bc0:	68fb      	ldr	r3, [r7, #12]
   18bc2:	691b      	ldr	r3, [r3, #16]
   18bc4:	68fa      	ldr	r2, [r7, #12]
   18bc6:	1c10      	adds	r0, r2, #0
   18bc8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   18bca:	68fb      	ldr	r3, [r7, #12]
   18bcc:	681b      	ldr	r3, [r3, #0]
   18bce:	2210      	movs	r2, #16
   18bd0:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   18bd2:	1c3b      	adds	r3, r7, #0
   18bd4:	330b      	adds	r3, #11
   18bd6:	781a      	ldrb	r2, [r3, #0]
   18bd8:	2320      	movs	r3, #32
   18bda:	4013      	ands	r3, r2
   18bdc:	d008      	beq.n	18bf0 <_tc_interrupt_handler+0xb0>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   18bde:	68fb      	ldr	r3, [r7, #12]
   18be0:	695b      	ldr	r3, [r3, #20]
   18be2:	68fa      	ldr	r2, [r7, #12]
   18be4:	1c10      	adds	r0, r2, #0
   18be6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   18be8:	68fb      	ldr	r3, [r7, #12]
   18bea:	681b      	ldr	r3, [r3, #0]
   18bec:	2220      	movs	r2, #32
   18bee:	739a      	strb	r2, [r3, #14]
	}
}
   18bf0:	46bd      	mov	sp, r7
   18bf2:	b004      	add	sp, #16
   18bf4:	bd80      	pop	{r7, pc}
   18bf6:	46c0      	nop			; (mov r8, r8)
   18bf8:	20001218 	.word	0x20001218

00018bfc <test_get_case>:
/**
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
   18bfc:	b580      	push	{r7, lr}
   18bfe:	af00      	add	r7, sp, #0
	return test_case_ptr;
   18c00:	4b02      	ldr	r3, [pc, #8]	; (18c0c <test_get_case+0x10>)
   18c02:	681b      	ldr	r3, [r3, #0]
}
   18c04:	1c18      	adds	r0, r3, #0
   18c06:	46bd      	mov	sp, r7
   18c08:	bd80      	pop	{r7, pc}
   18c0a:	46c0      	nop			; (mov r8, r8)
   18c0c:	2000041c 	.word	0x2000041c

00018c10 <nvm_get_config_defaults>:
 * \param[out] config  Configuration structure to initialize to default values
 *
 */
static inline void nvm_get_config_defaults(
		struct nvm_config *const config)
{
   18c10:	b590      	push	{r4, r7, lr}
   18c12:	b085      	sub	sp, #20
   18c14:	af02      	add	r7, sp, #8
   18c16:	6078      	str	r0, [r7, #4]
	/* Sanity check the parameters */
	Assert(config);
   18c18:	4b19      	ldr	r3, [pc, #100]	; (18c80 <nvm_get_config_defaults+0x70>)
   18c1a:	4798      	blx	r3
   18c1c:	1c03      	adds	r3, r0, #0
   18c1e:	2b00      	cmp	r3, #0
   18c20:	d011      	beq.n	18c46 <nvm_get_config_defaults+0x36>
   18c22:	687b      	ldr	r3, [r7, #4]
   18c24:	2b00      	cmp	r3, #0
   18c26:	d119      	bne.n	18c5c <nvm_get_config_defaults+0x4c>
   18c28:	4b15      	ldr	r3, [pc, #84]	; (18c80 <nvm_get_config_defaults+0x70>)
   18c2a:	4798      	blx	r3
   18c2c:	1c01      	adds	r1, r0, #0
   18c2e:	4a15      	ldr	r2, [pc, #84]	; (18c84 <nvm_get_config_defaults+0x74>)
   18c30:	2389      	movs	r3, #137	; 0x89
   18c32:	009b      	lsls	r3, r3, #2
   18c34:	4814      	ldr	r0, [pc, #80]	; (18c88 <nvm_get_config_defaults+0x78>)
   18c36:	9000      	str	r0, [sp, #0]
   18c38:	4814      	ldr	r0, [pc, #80]	; (18c8c <nvm_get_config_defaults+0x7c>)
   18c3a:	9001      	str	r0, [sp, #4]
   18c3c:	1c08      	adds	r0, r1, #0
   18c3e:	2101      	movs	r1, #1
   18c40:	4c13      	ldr	r4, [pc, #76]	; (18c90 <nvm_get_config_defaults+0x80>)
   18c42:	47a0      	blx	r4
   18c44:	e00a      	b.n	18c5c <nvm_get_config_defaults+0x4c>
   18c46:	687b      	ldr	r3, [r7, #4]
   18c48:	2b00      	cmp	r3, #0
   18c4a:	d107      	bne.n	18c5c <nvm_get_config_defaults+0x4c>
   18c4c:	4811      	ldr	r0, [pc, #68]	; (18c94 <nvm_get_config_defaults+0x84>)
   18c4e:	490f      	ldr	r1, [pc, #60]	; (18c8c <nvm_get_config_defaults+0x7c>)
   18c50:	4a0c      	ldr	r2, [pc, #48]	; (18c84 <nvm_get_config_defaults+0x74>)
   18c52:	2389      	movs	r3, #137	; 0x89
   18c54:	009b      	lsls	r3, r3, #2
   18c56:	4c10      	ldr	r4, [pc, #64]	; (18c98 <nvm_get_config_defaults+0x88>)
   18c58:	47a0      	blx	r4
   18c5a:	e7fe      	b.n	18c5a <nvm_get_config_defaults+0x4a>

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
   18c5c:	687b      	ldr	r3, [r7, #4]
   18c5e:	2200      	movs	r2, #0
   18c60:	801a      	strh	r2, [r3, #0]
	config->manual_page_write = false;
   18c62:	687b      	ldr	r3, [r7, #4]
   18c64:	2200      	movs	r2, #0
   18c66:	709a      	strb	r2, [r3, #2]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
   18c68:	4b0c      	ldr	r3, [pc, #48]	; (18c9c <nvm_get_config_defaults+0x8c>)
   18c6a:	685b      	ldr	r3, [r3, #4]
   18c6c:	06db      	lsls	r3, r3, #27
   18c6e:	0f1b      	lsrs	r3, r3, #28
   18c70:	b2db      	uxtb	r3, r3
   18c72:	1c1a      	adds	r2, r3, #0
   18c74:	687b      	ldr	r3, [r7, #4]
   18c76:	70da      	strb	r2, [r3, #3]
}
   18c78:	46bd      	mov	sp, r7
   18c7a:	b003      	add	sp, #12
   18c7c:	bd90      	pop	{r4, r7, pc}
   18c7e:	46c0      	nop			; (mov r8, r8)
   18c80:	00018bfd 	.word	0x00018bfd
   18c84:	00026ea8 	.word	0x00026ea8
   18c88:	00026ecc 	.word	0x00026ecc
   18c8c:	00026ee4 	.word	0x00026ee4
   18c90:	000106e9 	.word	0x000106e9
   18c94:	00026eec 	.word	0x00026eec
   18c98:	0001b62d 	.word	0x0001b62d
   18c9c:	41004000 	.word	0x41004000

00018ca0 <_eeprom_emulator_nvm_erase_row>:
 *
 *  \param[in] row  Physical row in EEPROM space to erase
 */
static void _eeprom_emulator_nvm_erase_row(
		const uint8_t row)
{
   18ca0:	b590      	push	{r4, r7, lr}
   18ca2:	b085      	sub	sp, #20
   18ca4:	af00      	add	r7, sp, #0
   18ca6:	1c02      	adds	r2, r0, #0
   18ca8:	1dfb      	adds	r3, r7, #7
   18caa:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   18cac:	1c3b      	adds	r3, r7, #0
   18cae:	330f      	adds	r3, #15
   18cb0:	2200      	movs	r2, #0
   18cb2:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_erase_row(
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
   18cb4:	4b0a      	ldr	r3, [pc, #40]	; (18ce0 <_eeprom_emulator_nvm_erase_row+0x40>)
   18cb6:	685a      	ldr	r2, [r3, #4]
   18cb8:	1dfb      	adds	r3, r7, #7
   18cba:	781b      	ldrb	r3, [r3, #0]
   18cbc:	021b      	lsls	r3, r3, #8
   18cbe:	18d3      	adds	r3, r2, r3
		const uint8_t row)
{
	enum status_code error_code = STATUS_OK;

	do {
		error_code = nvm_erase_row(
   18cc0:	1c3c      	adds	r4, r7, #0
   18cc2:	340f      	adds	r4, #15
   18cc4:	1c18      	adds	r0, r3, #0
   18cc6:	4b07      	ldr	r3, [pc, #28]	; (18ce4 <_eeprom_emulator_nvm_erase_row+0x44>)
   18cc8:	4798      	blx	r3
   18cca:	1c03      	adds	r3, r0, #0
   18ccc:	7023      	strb	r3, [r4, #0]
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
	} while (error_code == STATUS_BUSY);
   18cce:	1c3b      	adds	r3, r7, #0
   18cd0:	330f      	adds	r3, #15
   18cd2:	781b      	ldrb	r3, [r3, #0]
   18cd4:	2b05      	cmp	r3, #5
   18cd6:	d0ed      	beq.n	18cb4 <_eeprom_emulator_nvm_erase_row+0x14>
}
   18cd8:	46bd      	mov	sp, r7
   18cda:	b005      	add	sp, #20
   18cdc:	bd90      	pop	{r4, r7, pc}
   18cde:	46c0      	nop			; (mov r8, r8)
   18ce0:	2000045c 	.word	0x2000045c
   18ce4:	00011cb9 	.word	0x00011cb9

00018ce8 <_eeprom_emulator_nvm_fill_cache>:
 *  \param[in] data           Data to write to the physical memory page
 */
static void _eeprom_emulator_nvm_fill_cache(
		const uint16_t physical_page,
		const void* const data)
{
   18ce8:	b590      	push	{r4, r7, lr}
   18cea:	b085      	sub	sp, #20
   18cec:	af00      	add	r7, sp, #0
   18cee:	1c02      	adds	r2, r0, #0
   18cf0:	6039      	str	r1, [r7, #0]
   18cf2:	1dbb      	adds	r3, r7, #6
   18cf4:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   18cf6:	1c3b      	adds	r3, r7, #0
   18cf8:	330f      	adds	r3, #15
   18cfa:	2200      	movs	r2, #0
   18cfc:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_write_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   18cfe:	4b0c      	ldr	r3, [pc, #48]	; (18d30 <_eeprom_emulator_nvm_fill_cache+0x48>)
   18d00:	685a      	ldr	r2, [r3, #4]
   18d02:	1dbb      	adds	r3, r7, #6
   18d04:	881b      	ldrh	r3, [r3, #0]
   18d06:	019b      	lsls	r3, r3, #6
   18d08:	18d3      	adds	r3, r2, r3
		const void* const data)
{
	enum status_code error_code = STATUS_OK;

	do {
		error_code = nvm_write_buffer(
   18d0a:	1c1a      	adds	r2, r3, #0
   18d0c:	1c3c      	adds	r4, r7, #0
   18d0e:	340f      	adds	r4, #15
   18d10:	683b      	ldr	r3, [r7, #0]
   18d12:	1c10      	adds	r0, r2, #0
   18d14:	1c19      	adds	r1, r3, #0
   18d16:	2240      	movs	r2, #64	; 0x40
   18d18:	4b06      	ldr	r3, [pc, #24]	; (18d34 <_eeprom_emulator_nvm_fill_cache+0x4c>)
   18d1a:	4798      	blx	r3
   18d1c:	1c03      	adds	r3, r0, #0
   18d1e:	7023      	strb	r3, [r4, #0]
				(uint32_t)&_eeprom_instance.flash[physical_page],
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   18d20:	1c3b      	adds	r3, r7, #0
   18d22:	330f      	adds	r3, #15
   18d24:	781b      	ldrb	r3, [r3, #0]
   18d26:	2b05      	cmp	r3, #5
   18d28:	d0e9      	beq.n	18cfe <_eeprom_emulator_nvm_fill_cache+0x16>
}
   18d2a:	46bd      	mov	sp, r7
   18d2c:	b005      	add	sp, #20
   18d2e:	bd90      	pop	{r4, r7, pc}
   18d30:	2000045c 	.word	0x2000045c
   18d34:	00011a99 	.word	0x00011a99

00018d38 <_eeprom_emulator_nvm_commit_cache>:
 *
 *  \param[in] physical_page  Physical page in EEPROM space to commit
 */
static void _eeprom_emulator_nvm_commit_cache(
		const uint16_t physical_page)
{
   18d38:	b590      	push	{r4, r7, lr}
   18d3a:	b085      	sub	sp, #20
   18d3c:	af00      	add	r7, sp, #0
   18d3e:	1c02      	adds	r2, r0, #0
   18d40:	1dbb      	adds	r3, r7, #6
   18d42:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   18d44:	1c3b      	adds	r3, r7, #0
   18d46:	330f      	adds	r3, #15
   18d48:	2200      	movs	r2, #0
   18d4a:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_execute_command(
				NVM_COMMAND_WRITE_PAGE,
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
   18d4c:	4b0b      	ldr	r3, [pc, #44]	; (18d7c <_eeprom_emulator_nvm_commit_cache+0x44>)
   18d4e:	685a      	ldr	r2, [r3, #4]
   18d50:	1dbb      	adds	r3, r7, #6
   18d52:	881b      	ldrh	r3, [r3, #0]
   18d54:	019b      	lsls	r3, r3, #6
   18d56:	18d3      	adds	r3, r2, r3
		const uint16_t physical_page)
{
	enum status_code error_code = STATUS_OK;

	do {
		error_code = nvm_execute_command(
   18d58:	1c3c      	adds	r4, r7, #0
   18d5a:	340f      	adds	r4, #15
   18d5c:	2004      	movs	r0, #4
   18d5e:	1c19      	adds	r1, r3, #0
   18d60:	2200      	movs	r2, #0
   18d62:	4b07      	ldr	r3, [pc, #28]	; (18d80 <_eeprom_emulator_nvm_commit_cache+0x48>)
   18d64:	4798      	blx	r3
   18d66:	1c03      	adds	r3, r0, #0
   18d68:	7023      	strb	r3, [r4, #0]
				NVM_COMMAND_WRITE_PAGE,
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
	} while (error_code == STATUS_BUSY);
   18d6a:	1c3b      	adds	r3, r7, #0
   18d6c:	330f      	adds	r3, #15
   18d6e:	781b      	ldrb	r3, [r3, #0]
   18d70:	2b05      	cmp	r3, #5
   18d72:	d0eb      	beq.n	18d4c <_eeprom_emulator_nvm_commit_cache+0x14>
}
   18d74:	46bd      	mov	sp, r7
   18d76:	b005      	add	sp, #20
   18d78:	bd90      	pop	{r4, r7, pc}
   18d7a:	46c0      	nop			; (mov r8, r8)
   18d7c:	2000045c 	.word	0x2000045c
   18d80:	000119d1 	.word	0x000119d1

00018d84 <_eeprom_emulator_nvm_read_page>:
 *  \param[out] data           Destination buffer to fill with the read data
 */
static void _eeprom_emulator_nvm_read_page(
		const uint16_t physical_page,
		void* const data)
{
   18d84:	b590      	push	{r4, r7, lr}
   18d86:	b085      	sub	sp, #20
   18d88:	af00      	add	r7, sp, #0
   18d8a:	1c02      	adds	r2, r0, #0
   18d8c:	6039      	str	r1, [r7, #0]
   18d8e:	1dbb      	adds	r3, r7, #6
   18d90:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   18d92:	1c3b      	adds	r3, r7, #0
   18d94:	330f      	adds	r3, #15
   18d96:	2200      	movs	r2, #0
   18d98:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_read_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   18d9a:	4b0c      	ldr	r3, [pc, #48]	; (18dcc <_eeprom_emulator_nvm_read_page+0x48>)
   18d9c:	685a      	ldr	r2, [r3, #4]
   18d9e:	1dbb      	adds	r3, r7, #6
   18da0:	881b      	ldrh	r3, [r3, #0]
   18da2:	019b      	lsls	r3, r3, #6
   18da4:	18d3      	adds	r3, r2, r3
		void* const data)
{
	enum status_code error_code = STATUS_OK;

	do {
		error_code = nvm_read_buffer(
   18da6:	1c1a      	adds	r2, r3, #0
   18da8:	1c3c      	adds	r4, r7, #0
   18daa:	340f      	adds	r4, #15
   18dac:	683b      	ldr	r3, [r7, #0]
   18dae:	1c10      	adds	r0, r2, #0
   18db0:	1c19      	adds	r1, r3, #0
   18db2:	2240      	movs	r2, #64	; 0x40
   18db4:	4b06      	ldr	r3, [pc, #24]	; (18dd0 <_eeprom_emulator_nvm_read_page+0x4c>)
   18db6:	4798      	blx	r3
   18db8:	1c03      	adds	r3, r0, #0
   18dba:	7023      	strb	r3, [r4, #0]
				(uint32_t)&_eeprom_instance.flash[physical_page],
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   18dbc:	1c3b      	adds	r3, r7, #0
   18dbe:	330f      	adds	r3, #15
   18dc0:	781b      	ldrb	r3, [r3, #0]
   18dc2:	2b05      	cmp	r3, #5
   18dc4:	d0e9      	beq.n	18d9a <_eeprom_emulator_nvm_read_page+0x16>
}
   18dc6:	46bd      	mov	sp, r7
   18dc8:	b005      	add	sp, #20
   18dca:	bd90      	pop	{r4, r7, pc}
   18dcc:	2000045c 	.word	0x2000045c
   18dd0:	00011bb9 	.word	0x00011bb9

00018dd4 <_eeprom_emulator_format_memory>:

/**
 * \brief Initializes the emulated EEPROM memory, destroying the current contents.
 */
static void _eeprom_emulator_format_memory(void)
{
   18dd4:	b580      	push	{r7, lr}
   18dd6:	b092      	sub	sp, #72	; 0x48
   18dd8:	af00      	add	r7, sp, #0
	uint16_t logical_page = 0;
   18dda:	1c3b      	adds	r3, r7, #0
   18ddc:	3346      	adds	r3, #70	; 0x46
   18dde:	2200      	movs	r2, #0
   18de0:	801a      	strh	r2, [r3, #0]

	/* Set row 0 as the spare row */
	_eeprom_instance.spare_row = 0;
   18de2:	4a31      	ldr	r2, [pc, #196]	; (18ea8 <_eeprom_emulator_format_memory+0xd4>)
   18de4:	2387      	movs	r3, #135	; 0x87
   18de6:	2100      	movs	r1, #0
   18de8:	54d1      	strb	r1, [r2, r3]
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);
   18dea:	4a2f      	ldr	r2, [pc, #188]	; (18ea8 <_eeprom_emulator_format_memory+0xd4>)
   18dec:	2387      	movs	r3, #135	; 0x87
   18dee:	5cd3      	ldrb	r3, [r2, r3]
   18df0:	1c18      	adds	r0, r3, #0
   18df2:	4b2e      	ldr	r3, [pc, #184]	; (18eac <_eeprom_emulator_format_memory+0xd8>)
   18df4:	4798      	blx	r3

	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   18df6:	1c3b      	adds	r3, r7, #0
   18df8:	3344      	adds	r3, #68	; 0x44
   18dfa:	2204      	movs	r2, #4
   18dfc:	801a      	strh	r2, [r3, #0]
   18dfe:	e049      	b.n	18e94 <_eeprom_emulator_format_memory+0xc0>
			physical_page < _eeprom_instance.physical_pages; physical_page++) {

		if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   18e00:	1c3b      	adds	r3, r7, #0
   18e02:	3344      	adds	r3, #68	; 0x44
   18e04:	881a      	ldrh	r2, [r3, #0]
   18e06:	4b28      	ldr	r3, [pc, #160]	; (18ea8 <_eeprom_emulator_format_memory+0xd4>)
   18e08:	891b      	ldrh	r3, [r3, #8]
   18e0a:	3b01      	subs	r3, #1
   18e0c:	429a      	cmp	r2, r3
   18e0e:	d100      	bne.n	18e12 <_eeprom_emulator_format_memory+0x3e>
			continue;
   18e10:	e039      	b.n	18e86 <_eeprom_emulator_format_memory+0xb2>
		}

		/* If we are at the first page in a new row, erase the entire row */
		if ((physical_page % NVMCTRL_ROW_PAGES) == 0) {
   18e12:	1c3b      	adds	r3, r7, #0
   18e14:	3344      	adds	r3, #68	; 0x44
   18e16:	881a      	ldrh	r2, [r3, #0]
   18e18:	2303      	movs	r3, #3
   18e1a:	4013      	ands	r3, r2
   18e1c:	b29b      	uxth	r3, r3
   18e1e:	2b00      	cmp	r3, #0
   18e20:	d108      	bne.n	18e34 <_eeprom_emulator_format_memory+0x60>
			_eeprom_emulator_nvm_erase_row(physical_page / NVMCTRL_ROW_PAGES);
   18e22:	1c3b      	adds	r3, r7, #0
   18e24:	3344      	adds	r3, #68	; 0x44
   18e26:	881b      	ldrh	r3, [r3, #0]
   18e28:	089b      	lsrs	r3, r3, #2
   18e2a:	b29b      	uxth	r3, r3
   18e2c:	b2db      	uxtb	r3, r3
   18e2e:	1c18      	adds	r0, r3, #0
   18e30:	4b1e      	ldr	r3, [pc, #120]	; (18eac <_eeprom_emulator_format_memory+0xd8>)
   18e32:	4798      	blx	r3
		}

		/* Two logical pages are stored in each physical row; program in a
		 * pair of initialized but blank set of emulated EEPROM pages */
		if ((physical_page % NVMCTRL_ROW_PAGES) < 2) {
   18e34:	1c3b      	adds	r3, r7, #0
   18e36:	3344      	adds	r3, #68	; 0x44
   18e38:	881a      	ldrh	r2, [r3, #0]
   18e3a:	2303      	movs	r3, #3
   18e3c:	4013      	ands	r3, r2
   18e3e:	b29b      	uxth	r3, r3
   18e40:	2b01      	cmp	r3, #1
   18e42:	d820      	bhi.n	18e86 <_eeprom_emulator_format_memory+0xb2>
			/* Make a buffer to hold the initialized EEPROM page */
			struct _eeprom_page data;
			memset(&data, 0xFF, sizeof(data));
   18e44:	1d3b      	adds	r3, r7, #4
   18e46:	1c18      	adds	r0, r3, #0
   18e48:	21ff      	movs	r1, #255	; 0xff
   18e4a:	2240      	movs	r2, #64	; 0x40
   18e4c:	4b18      	ldr	r3, [pc, #96]	; (18eb0 <_eeprom_emulator_format_memory+0xdc>)
   18e4e:	4798      	blx	r3

			/* Set up the new EEPROM row's header */
			data.header.logical_page = logical_page;
   18e50:	1c3b      	adds	r3, r7, #0
   18e52:	3346      	adds	r3, #70	; 0x46
   18e54:	881b      	ldrh	r3, [r3, #0]
   18e56:	b2da      	uxtb	r2, r3
   18e58:	1d3b      	adds	r3, r7, #4
   18e5a:	701a      	strb	r2, [r3, #0]

			/* Write the page out to physical memory */
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
   18e5c:	1c3b      	adds	r3, r7, #0
   18e5e:	3344      	adds	r3, #68	; 0x44
   18e60:	881a      	ldrh	r2, [r3, #0]
   18e62:	1d3b      	adds	r3, r7, #4
   18e64:	1c10      	adds	r0, r2, #0
   18e66:	1c19      	adds	r1, r3, #0
   18e68:	4b12      	ldr	r3, [pc, #72]	; (18eb4 <_eeprom_emulator_format_memory+0xe0>)
   18e6a:	4798      	blx	r3
			_eeprom_emulator_nvm_commit_cache(physical_page);
   18e6c:	1c3b      	adds	r3, r7, #0
   18e6e:	3344      	adds	r3, #68	; 0x44
   18e70:	881b      	ldrh	r3, [r3, #0]
   18e72:	1c18      	adds	r0, r3, #0
   18e74:	4b10      	ldr	r3, [pc, #64]	; (18eb8 <_eeprom_emulator_format_memory+0xe4>)
   18e76:	4798      	blx	r3

			/* Increment the logical EEPROM page address now that the current
			 * address' page has been initialized */
			logical_page++;
   18e78:	1c3b      	adds	r3, r7, #0
   18e7a:	3346      	adds	r3, #70	; 0x46
   18e7c:	881a      	ldrh	r2, [r3, #0]
   18e7e:	1c3b      	adds	r3, r7, #0
   18e80:	3346      	adds	r3, #70	; 0x46
   18e82:	3201      	adds	r2, #1
   18e84:	801a      	strh	r2, [r3, #0]
	/* Set row 0 as the spare row */
	_eeprom_instance.spare_row = 0;
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);

	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
   18e86:	1c3b      	adds	r3, r7, #0
   18e88:	3344      	adds	r3, #68	; 0x44
   18e8a:	881a      	ldrh	r2, [r3, #0]
   18e8c:	1c3b      	adds	r3, r7, #0
   18e8e:	3344      	adds	r3, #68	; 0x44
   18e90:	3201      	adds	r2, #1
   18e92:	801a      	strh	r2, [r3, #0]
   18e94:	4b04      	ldr	r3, [pc, #16]	; (18ea8 <_eeprom_emulator_format_memory+0xd4>)
   18e96:	891b      	ldrh	r3, [r3, #8]

	/* Set row 0 as the spare row */
	_eeprom_instance.spare_row = 0;
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);

	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   18e98:	1c3a      	adds	r2, r7, #0
   18e9a:	3244      	adds	r2, #68	; 0x44
   18e9c:	8812      	ldrh	r2, [r2, #0]
   18e9e:	429a      	cmp	r2, r3
   18ea0:	d3ae      	bcc.n	18e00 <_eeprom_emulator_format_memory+0x2c>
			/* Increment the logical EEPROM page address now that the current
			 * address' page has been initialized */
			logical_page++;
		}
	}
}
   18ea2:	46bd      	mov	sp, r7
   18ea4:	b012      	add	sp, #72	; 0x48
   18ea6:	bd80      	pop	{r7, pc}
   18ea8:	2000045c 	.word	0x2000045c
   18eac:	00018ca1 	.word	0x00018ca1
   18eb0:	0001b3f9 	.word	0x0001b3f9
   18eb4:	00018ce9 	.word	0x00018ce9
   18eb8:	00018d39 	.word	0x00018d39

00018ebc <_eeprom_emulator_update_page_mapping>:

/**
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages
 */
static void _eeprom_emulator_update_page_mapping(void)
{
   18ebc:	b580      	push	{r7, lr}
   18ebe:	b084      	sub	sp, #16
   18ec0:	af00      	add	r7, sp, #0
	/* Scan through all physical pages, to map physical and logical pages */
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   18ec2:	1c3b      	adds	r3, r7, #0
   18ec4:	330e      	adds	r3, #14
   18ec6:	2200      	movs	r2, #0
   18ec8:	801a      	strh	r2, [r3, #0]
   18eca:	e032      	b.n	18f32 <_eeprom_emulator_update_page_mapping+0x76>
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
   18ecc:	1c3b      	adds	r3, r7, #0
   18ece:	330e      	adds	r3, #14
   18ed0:	881a      	ldrh	r2, [r3, #0]
   18ed2:	4b4b      	ldr	r3, [pc, #300]	; (19000 <_eeprom_emulator_update_page_mapping+0x144>)
   18ed4:	891b      	ldrh	r3, [r3, #8]
   18ed6:	3b01      	subs	r3, #1
   18ed8:	429a      	cmp	r2, r3
   18eda:	d100      	bne.n	18ede <_eeprom_emulator_update_page_mapping+0x22>
			continue;
   18edc:	e022      	b.n	18f24 <_eeprom_emulator_update_page_mapping+0x68>
		}

		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
   18ede:	4b48      	ldr	r3, [pc, #288]	; (19000 <_eeprom_emulator_update_page_mapping+0x144>)
   18ee0:	685a      	ldr	r2, [r3, #4]
   18ee2:	1c3b      	adds	r3, r7, #0
   18ee4:	330e      	adds	r3, #14
   18ee6:	881b      	ldrh	r3, [r3, #0]
   18ee8:	019b      	lsls	r3, r3, #6
   18eea:	18d3      	adds	r3, r2, r3
   18eec:	781a      	ldrb	r2, [r3, #0]
   18eee:	1c3b      	adds	r3, r7, #0
   18ef0:	3308      	adds	r3, #8
   18ef2:	801a      	strh	r2, [r3, #0]

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   18ef4:	1c3b      	adds	r3, r7, #0
   18ef6:	3308      	adds	r3, #8
   18ef8:	881b      	ldrh	r3, [r3, #0]
   18efa:	2bff      	cmp	r3, #255	; 0xff
   18efc:	d012      	beq.n	18f24 <_eeprom_emulator_update_page_mapping+0x68>
				(logical_page < _eeprom_instance.logical_pages)) {
   18efe:	4b40      	ldr	r3, [pc, #256]	; (19000 <_eeprom_emulator_update_page_mapping+0x144>)
   18f00:	7a9b      	ldrb	r3, [r3, #10]

		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   18f02:	1c3a      	adds	r2, r7, #0
   18f04:	3208      	adds	r2, #8
   18f06:	8812      	ldrh	r2, [r2, #0]
   18f08:	429a      	cmp	r2, r3
   18f0a:	d20b      	bcs.n	18f24 <_eeprom_emulator_update_page_mapping+0x68>
				(logical_page < _eeprom_instance.logical_pages)) {
			_eeprom_instance.page_map[logical_page] = c;
   18f0c:	1c3b      	adds	r3, r7, #0
   18f0e:	3308      	adds	r3, #8
   18f10:	8819      	ldrh	r1, [r3, #0]
   18f12:	1c3b      	adds	r3, r7, #0
   18f14:	330e      	adds	r3, #14
   18f16:	881b      	ldrh	r3, [r3, #0]
   18f18:	b2da      	uxtb	r2, r3
   18f1a:	4839      	ldr	r0, [pc, #228]	; (19000 <_eeprom_emulator_update_page_mapping+0x144>)
   18f1c:	2308      	movs	r3, #8
   18f1e:	1841      	adds	r1, r0, r1
   18f20:	18cb      	adds	r3, r1, r3
   18f22:	70da      	strb	r2, [r3, #3]
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages
 */
static void _eeprom_emulator_update_page_mapping(void)
{
	/* Scan through all physical pages, to map physical and logical pages */
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   18f24:	1c3b      	adds	r3, r7, #0
   18f26:	330e      	adds	r3, #14
   18f28:	881a      	ldrh	r2, [r3, #0]
   18f2a:	1c3b      	adds	r3, r7, #0
   18f2c:	330e      	adds	r3, #14
   18f2e:	3201      	adds	r2, #1
   18f30:	801a      	strh	r2, [r3, #0]
   18f32:	4b33      	ldr	r3, [pc, #204]	; (19000 <_eeprom_emulator_update_page_mapping+0x144>)
   18f34:	891b      	ldrh	r3, [r3, #8]
   18f36:	1c3a      	adds	r2, r7, #0
   18f38:	320e      	adds	r2, #14
   18f3a:	8812      	ldrh	r2, [r2, #0]
   18f3c:	429a      	cmp	r2, r3
   18f3e:	d3c5      	bcc.n	18ecc <_eeprom_emulator_update_page_mapping+0x10>
		}
	}

	/* Use an invalid page number as the spare row until a valid one has been
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
   18f40:	4a2f      	ldr	r2, [pc, #188]	; (19000 <_eeprom_emulator_update_page_mapping+0x144>)
   18f42:	2387      	movs	r3, #135	; 0x87
   18f44:	213f      	movs	r1, #63	; 0x3f
   18f46:	54d1      	strb	r1, [r2, r3]

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   18f48:	1c3b      	adds	r3, r7, #0
   18f4a:	330c      	adds	r3, #12
   18f4c:	2200      	movs	r2, #0
   18f4e:	801a      	strh	r2, [r3, #0]
   18f50:	e049      	b.n	18fe6 <_eeprom_emulator_update_page_mapping+0x12a>
		bool spare_row_found = true;
   18f52:	1c3b      	adds	r3, r7, #0
   18f54:	330b      	adds	r3, #11
   18f56:	2201      	movs	r2, #1
   18f58:	701a      	strb	r2, [r3, #0]

		/* Look through pages within the row to see if they are all erased */
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   18f5a:	1c3b      	adds	r3, r7, #0
   18f5c:	330a      	adds	r3, #10
   18f5e:	2200      	movs	r2, #0
   18f60:	701a      	strb	r2, [r3, #0]
   18f62:	e027      	b.n	18fb4 <_eeprom_emulator_update_page_mapping+0xf8>
			uint16_t physical_page = (c * NVMCTRL_ROW_PAGES) + c2;
   18f64:	1c3b      	adds	r3, r7, #0
   18f66:	330c      	adds	r3, #12
   18f68:	881b      	ldrh	r3, [r3, #0]
   18f6a:	009b      	lsls	r3, r3, #2
   18f6c:	b299      	uxth	r1, r3
   18f6e:	1c3b      	adds	r3, r7, #0
   18f70:	330a      	adds	r3, #10
   18f72:	781b      	ldrb	r3, [r3, #0]
   18f74:	b29a      	uxth	r2, r3
   18f76:	1dbb      	adds	r3, r7, #6
   18f78:	188a      	adds	r2, r1, r2
   18f7a:	801a      	strh	r2, [r3, #0]

			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   18f7c:	1dbb      	adds	r3, r7, #6
   18f7e:	881a      	ldrh	r2, [r3, #0]
   18f80:	4b1f      	ldr	r3, [pc, #124]	; (19000 <_eeprom_emulator_update_page_mapping+0x144>)
   18f82:	891b      	ldrh	r3, [r3, #8]
   18f84:	3b01      	subs	r3, #1
   18f86:	429a      	cmp	r2, r3
   18f88:	d100      	bne.n	18f8c <_eeprom_emulator_update_page_mapping+0xd0>
				continue;
   18f8a:	e00c      	b.n	18fa6 <_eeprom_emulator_update_page_mapping+0xea>
			}

			if (_eeprom_instance.flash[physical_page].header.logical_page !=
   18f8c:	4b1c      	ldr	r3, [pc, #112]	; (19000 <_eeprom_emulator_update_page_mapping+0x144>)
   18f8e:	685a      	ldr	r2, [r3, #4]
   18f90:	1dbb      	adds	r3, r7, #6
   18f92:	881b      	ldrh	r3, [r3, #0]
   18f94:	019b      	lsls	r3, r3, #6
   18f96:	18d3      	adds	r3, r2, r3
   18f98:	781b      	ldrb	r3, [r3, #0]
   18f9a:	2bff      	cmp	r3, #255	; 0xff
   18f9c:	d003      	beq.n	18fa6 <_eeprom_emulator_update_page_mapping+0xea>
					EEPROM_INVALID_PAGE_NUMBER) {
				spare_row_found = false;
   18f9e:	1c3b      	adds	r3, r7, #0
   18fa0:	330b      	adds	r3, #11
   18fa2:	2200      	movs	r2, #0
   18fa4:	701a      	strb	r2, [r3, #0]
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
		bool spare_row_found = true;

		/* Look through pages within the row to see if they are all erased */
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   18fa6:	1c3b      	adds	r3, r7, #0
   18fa8:	330a      	adds	r3, #10
   18faa:	781a      	ldrb	r2, [r3, #0]
   18fac:	1c3b      	adds	r3, r7, #0
   18fae:	330a      	adds	r3, #10
   18fb0:	3201      	adds	r2, #1
   18fb2:	701a      	strb	r2, [r3, #0]
   18fb4:	1c3b      	adds	r3, r7, #0
   18fb6:	330a      	adds	r3, #10
   18fb8:	781b      	ldrb	r3, [r3, #0]
   18fba:	2b03      	cmp	r3, #3
   18fbc:	d9d2      	bls.n	18f64 <_eeprom_emulator_update_page_mapping+0xa8>
				spare_row_found = false;
			}
		}

		/* If we've now found the spare row, store it and abort the search */
		if (spare_row_found == true) {
   18fbe:	1c3b      	adds	r3, r7, #0
   18fc0:	330b      	adds	r3, #11
   18fc2:	781b      	ldrb	r3, [r3, #0]
   18fc4:	2b00      	cmp	r3, #0
   18fc6:	d007      	beq.n	18fd8 <_eeprom_emulator_update_page_mapping+0x11c>
			_eeprom_instance.spare_row = c;
   18fc8:	1c3b      	adds	r3, r7, #0
   18fca:	330c      	adds	r3, #12
   18fcc:	881b      	ldrh	r3, [r3, #0]
   18fce:	b2d9      	uxtb	r1, r3
   18fd0:	4a0b      	ldr	r2, [pc, #44]	; (19000 <_eeprom_emulator_update_page_mapping+0x144>)
   18fd2:	2387      	movs	r3, #135	; 0x87
   18fd4:	54d1      	strb	r1, [r2, r3]
			break;
   18fd6:	e00f      	b.n	18ff8 <_eeprom_emulator_update_page_mapping+0x13c>
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   18fd8:	1c3b      	adds	r3, r7, #0
   18fda:	330c      	adds	r3, #12
   18fdc:	881a      	ldrh	r2, [r3, #0]
   18fde:	1c3b      	adds	r3, r7, #0
   18fe0:	330c      	adds	r3, #12
   18fe2:	3201      	adds	r2, #1
   18fe4:	801a      	strh	r2, [r3, #0]
   18fe6:	4b06      	ldr	r3, [pc, #24]	; (19000 <_eeprom_emulator_update_page_mapping+0x144>)
   18fe8:	891b      	ldrh	r3, [r3, #8]
   18fea:	089b      	lsrs	r3, r3, #2
   18fec:	b29b      	uxth	r3, r3
   18fee:	1c3a      	adds	r2, r7, #0
   18ff0:	320c      	adds	r2, #12
   18ff2:	8812      	ldrh	r2, [r2, #0]
   18ff4:	429a      	cmp	r2, r3
   18ff6:	d3ac      	bcc.n	18f52 <_eeprom_emulator_update_page_mapping+0x96>
		if (spare_row_found == true) {
			_eeprom_instance.spare_row = c;
			break;
		}
	}
}
   18ff8:	46bd      	mov	sp, r7
   18ffa:	b004      	add	sp, #16
   18ffc:	bd80      	pop	{r7, pc}
   18ffe:	46c0      	nop			; (mov r8, r8)
   19000:	2000045c 	.word	0x2000045c

00019004 <_eeprom_emulator_is_page_free_on_row>:
 * \retval \c false  If the specified row was full and needs an erase
 */
static bool _eeprom_emulator_is_page_free_on_row(
		const uint8_t start_physical_page,
		uint8_t *const free_physical_page)
{
   19004:	b580      	push	{r7, lr}
   19006:	b084      	sub	sp, #16
   19008:	af00      	add	r7, sp, #0
   1900a:	1c02      	adds	r2, r0, #0
   1900c:	6039      	str	r1, [r7, #0]
   1900e:	1dfb      	adds	r3, r7, #7
   19010:	701a      	strb	r2, [r3, #0]
	/* Convert physical page number to a FLASH row and page within the row */
	uint8_t row         = (start_physical_page / NVMCTRL_ROW_PAGES);
   19012:	1c3b      	adds	r3, r7, #0
   19014:	330e      	adds	r3, #14
   19016:	1dfa      	adds	r2, r7, #7
   19018:	7812      	ldrb	r2, [r2, #0]
   1901a:	0892      	lsrs	r2, r2, #2
   1901c:	701a      	strb	r2, [r3, #0]
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
   1901e:	1c3b      	adds	r3, r7, #0
   19020:	330d      	adds	r3, #13
   19022:	1dfa      	adds	r2, r7, #7
   19024:	7811      	ldrb	r1, [r2, #0]
   19026:	2203      	movs	r2, #3
   19028:	400a      	ands	r2, r1
   1902a:	701a      	strb	r2, [r3, #0]

	/* Look in the current row for a page that isn't currently used */
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   1902c:	1c3b      	adds	r3, r7, #0
   1902e:	330f      	adds	r3, #15
   19030:	1c3a      	adds	r2, r7, #0
   19032:	320d      	adds	r2, #13
   19034:	7812      	ldrb	r2, [r2, #0]
   19036:	701a      	strb	r2, [r3, #0]
   19038:	e023      	b.n	19082 <_eeprom_emulator_is_page_free_on_row+0x7e>
		/* Calculate the page number for the current page being examined */
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
   1903a:	1c3b      	adds	r3, r7, #0
   1903c:	330e      	adds	r3, #14
   1903e:	781b      	ldrb	r3, [r3, #0]
   19040:	009b      	lsls	r3, r3, #2
   19042:	b2d9      	uxtb	r1, r3
   19044:	1c3b      	adds	r3, r7, #0
   19046:	330c      	adds	r3, #12
   19048:	1c3a      	adds	r2, r7, #0
   1904a:	320f      	adds	r2, #15
   1904c:	7812      	ldrb	r2, [r2, #0]
   1904e:	188a      	adds	r2, r1, r2
   19050:	701a      	strb	r2, [r3, #0]

		/* If the page is free, pass it to the caller and exit */
		if (_eeprom_instance.flash[page].header.logical_page ==
   19052:	4b11      	ldr	r3, [pc, #68]	; (19098 <_eeprom_emulator_is_page_free_on_row+0x94>)
   19054:	685a      	ldr	r2, [r3, #4]
   19056:	1c3b      	adds	r3, r7, #0
   19058:	330c      	adds	r3, #12
   1905a:	781b      	ldrb	r3, [r3, #0]
   1905c:	019b      	lsls	r3, r3, #6
   1905e:	18d3      	adds	r3, r2, r3
   19060:	781b      	ldrb	r3, [r3, #0]
   19062:	2bff      	cmp	r3, #255	; 0xff
   19064:	d106      	bne.n	19074 <_eeprom_emulator_is_page_free_on_row+0x70>
				EEPROM_INVALID_PAGE_NUMBER) {
			*free_physical_page = page;
   19066:	683b      	ldr	r3, [r7, #0]
   19068:	1c3a      	adds	r2, r7, #0
   1906a:	320c      	adds	r2, #12
   1906c:	7812      	ldrb	r2, [r2, #0]
   1906e:	701a      	strb	r2, [r3, #0]
			return true;
   19070:	2301      	movs	r3, #1
   19072:	e00c      	b.n	1908e <_eeprom_emulator_is_page_free_on_row+0x8a>
	/* Convert physical page number to a FLASH row and page within the row */
	uint8_t row         = (start_physical_page / NVMCTRL_ROW_PAGES);
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);

	/* Look in the current row for a page that isn't currently used */
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   19074:	1c3b      	adds	r3, r7, #0
   19076:	330f      	adds	r3, #15
   19078:	781a      	ldrb	r2, [r3, #0]
   1907a:	1c3b      	adds	r3, r7, #0
   1907c:	330f      	adds	r3, #15
   1907e:	3201      	adds	r2, #1
   19080:	701a      	strb	r2, [r3, #0]
   19082:	1c3b      	adds	r3, r7, #0
   19084:	330f      	adds	r3, #15
   19086:	781b      	ldrb	r3, [r3, #0]
   19088:	2b03      	cmp	r3, #3
   1908a:	d9d6      	bls.n	1903a <_eeprom_emulator_is_page_free_on_row+0x36>
			return true;
		}
	}

	/* No free page in the current row was found */
	return false;
   1908c:	2300      	movs	r3, #0
}
   1908e:	1c18      	adds	r0, r3, #0
   19090:	46bd      	mov	sp, r7
   19092:	b004      	add	sp, #16
   19094:	bd80      	pop	{r7, pc}
   19096:	46c0      	nop			; (mov r8, r8)
   19098:	2000045c 	.word	0x2000045c

0001909c <_eeprom_emulator_move_data_to_spare>:
 */
static enum status_code _eeprom_emulator_move_data_to_spare(
		const uint8_t row_number,
		const uint8_t logical_page,
		const uint8_t *const data)
{
   1909c:	b580      	push	{r7, lr}
   1909e:	b086      	sub	sp, #24
   190a0:	af00      	add	r7, sp, #0
   190a2:	603a      	str	r2, [r7, #0]
   190a4:	1dfb      	adds	r3, r7, #7
   190a6:	1c02      	adds	r2, r0, #0
   190a8:	701a      	strb	r2, [r3, #0]
   190aa:	1dbb      	adds	r3, r7, #6
   190ac:	1c0a      	adds	r2, r1, #0
   190ae:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   190b0:	1c3b      	adds	r3, r7, #0
   190b2:	3314      	adds	r3, #20
   190b4:	2200      	movs	r2, #0
   190b6:	701a      	strb	r2, [r3, #0]
		uint8_t logical_page;
		uint8_t physical_page;
	} page_trans[2];

	const struct _eeprom_page *row_data =
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];
   190b8:	4b6a      	ldr	r3, [pc, #424]	; (19264 <_eeprom_emulator_move_data_to_spare+0x1c8>)
   190ba:	685a      	ldr	r2, [r3, #4]
   190bc:	1dfb      	adds	r3, r7, #7
   190be:	781b      	ldrb	r3, [r3, #0]
   190c0:	021b      	lsls	r3, r3, #8
	struct {
		uint8_t logical_page;
		uint8_t physical_page;
	} page_trans[2];

	const struct _eeprom_page *row_data =
   190c2:	18d3      	adds	r3, r2, r3
   190c4:	613b      	str	r3, [r7, #16]
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];

	/* There should be two logical pages of data in each row, possibly with
	 * multiple revisions (right-most version is the newest). Start by assuming
	 * the left-most two pages contain the newest page revisions. */
	page_trans[0].logical_page  = row_data[0].header.logical_page;
   190c6:	693b      	ldr	r3, [r7, #16]
   190c8:	781a      	ldrb	r2, [r3, #0]
   190ca:	1c3b      	adds	r3, r7, #0
   190cc:	3308      	adds	r3, #8
   190ce:	701a      	strb	r2, [r3, #0]
	page_trans[0].physical_page = (row_number * NVMCTRL_ROW_PAGES);
   190d0:	1dfb      	adds	r3, r7, #7
   190d2:	781b      	ldrb	r3, [r3, #0]
   190d4:	009b      	lsls	r3, r3, #2
   190d6:	b2da      	uxtb	r2, r3
   190d8:	1c3b      	adds	r3, r7, #0
   190da:	3308      	adds	r3, #8
   190dc:	705a      	strb	r2, [r3, #1]

	page_trans[1].logical_page  = row_data[1].header.logical_page;
   190de:	693b      	ldr	r3, [r7, #16]
   190e0:	3340      	adds	r3, #64	; 0x40
   190e2:	781a      	ldrb	r2, [r3, #0]
   190e4:	1c3b      	adds	r3, r7, #0
   190e6:	3308      	adds	r3, #8
   190e8:	709a      	strb	r2, [r3, #2]
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
   190ea:	1dfb      	adds	r3, r7, #7
   190ec:	781b      	ldrb	r3, [r3, #0]
   190ee:	009b      	lsls	r3, r3, #2
   190f0:	b2db      	uxtb	r3, r3
   190f2:	3301      	adds	r3, #1
   190f4:	b2da      	uxtb	r2, r3
   190f6:	1c3b      	adds	r3, r7, #0
   190f8:	3308      	adds	r3, #8
   190fa:	70da      	strb	r2, [r3, #3]

	/* Look for newer revisions of the two logical pages stored in the row */
	for (uint8_t c = 0; c < 2; c++) {
   190fc:	1c3b      	adds	r3, r7, #0
   190fe:	3317      	adds	r3, #23
   19100:	2200      	movs	r2, #0
   19102:	701a      	strb	r2, [r3, #0]
   19104:	e038      	b.n	19178 <_eeprom_emulator_move_data_to_spare+0xdc>
		/* Look through the remaining pages in the row for any newer revisions */
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   19106:	1c3b      	adds	r3, r7, #0
   19108:	3316      	adds	r3, #22
   1910a:	2202      	movs	r2, #2
   1910c:	701a      	strb	r2, [r3, #0]
   1910e:	e027      	b.n	19160 <_eeprom_emulator_move_data_to_spare+0xc4>
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
   19110:	1c3b      	adds	r3, r7, #0
   19112:	3317      	adds	r3, #23
   19114:	781a      	ldrb	r2, [r3, #0]
   19116:	1c3b      	adds	r3, r7, #0
   19118:	3308      	adds	r3, #8
   1911a:	0052      	lsls	r2, r2, #1
   1911c:	5cd2      	ldrb	r2, [r2, r3]
   1911e:	1c3b      	adds	r3, r7, #0
   19120:	3316      	adds	r3, #22
   19122:	781b      	ldrb	r3, [r3, #0]
   19124:	019b      	lsls	r3, r3, #6
   19126:	6939      	ldr	r1, [r7, #16]
   19128:	18cb      	adds	r3, r1, r3
   1912a:	781b      	ldrb	r3, [r3, #0]
   1912c:	429a      	cmp	r2, r3
   1912e:	d110      	bne.n	19152 <_eeprom_emulator_move_data_to_spare+0xb6>
				page_trans[c].physical_page =
   19130:	1c3b      	adds	r3, r7, #0
   19132:	3317      	adds	r3, #23
   19134:	781b      	ldrb	r3, [r3, #0]
   19136:	1dfa      	adds	r2, r7, #7
   19138:	7812      	ldrb	r2, [r2, #0]
   1913a:	0092      	lsls	r2, r2, #2
   1913c:	b2d1      	uxtb	r1, r2
   1913e:	1c3a      	adds	r2, r7, #0
   19140:	3216      	adds	r2, #22
   19142:	7812      	ldrb	r2, [r2, #0]
   19144:	188a      	adds	r2, r1, r2
   19146:	b2d2      	uxtb	r2, r2
   19148:	1c39      	adds	r1, r7, #0
   1914a:	3108      	adds	r1, #8
   1914c:	005b      	lsls	r3, r3, #1
   1914e:	18cb      	adds	r3, r1, r3
   19150:	705a      	strb	r2, [r3, #1]
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;

	/* Look for newer revisions of the two logical pages stored in the row */
	for (uint8_t c = 0; c < 2; c++) {
		/* Look through the remaining pages in the row for any newer revisions */
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   19152:	1c3b      	adds	r3, r7, #0
   19154:	3316      	adds	r3, #22
   19156:	781a      	ldrb	r2, [r3, #0]
   19158:	1c3b      	adds	r3, r7, #0
   1915a:	3316      	adds	r3, #22
   1915c:	3201      	adds	r2, #1
   1915e:	701a      	strb	r2, [r3, #0]
   19160:	1c3b      	adds	r3, r7, #0
   19162:	3316      	adds	r3, #22
   19164:	781b      	ldrb	r3, [r3, #0]
   19166:	2b03      	cmp	r3, #3
   19168:	d9d2      	bls.n	19110 <_eeprom_emulator_move_data_to_spare+0x74>

	page_trans[1].logical_page  = row_data[1].header.logical_page;
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;

	/* Look for newer revisions of the two logical pages stored in the row */
	for (uint8_t c = 0; c < 2; c++) {
   1916a:	1c3b      	adds	r3, r7, #0
   1916c:	3317      	adds	r3, #23
   1916e:	781a      	ldrb	r2, [r3, #0]
   19170:	1c3b      	adds	r3, r7, #0
   19172:	3317      	adds	r3, #23
   19174:	3201      	adds	r2, #1
   19176:	701a      	strb	r2, [r3, #0]
   19178:	1c3b      	adds	r3, r7, #0
   1917a:	3317      	adds	r3, #23
   1917c:	781b      	ldrb	r3, [r3, #0]
   1917e:	2b01      	cmp	r3, #1
   19180:	d9c1      	bls.n	19106 <_eeprom_emulator_move_data_to_spare+0x6a>
			}
		}
	}

	/* Need to move both saved logical pages stored in the same row */
	for (uint8_t c = 0; c < 2; c++) {
   19182:	1c3b      	adds	r3, r7, #0
   19184:	3315      	adds	r3, #21
   19186:	2200      	movs	r2, #0
   19188:	701a      	strb	r2, [r3, #0]
   1918a:	e055      	b.n	19238 <_eeprom_emulator_move_data_to_spare+0x19c>
		/* Find the physical page index for the new spare row pages */
		uint32_t new_page =
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
   1918c:	4a35      	ldr	r2, [pc, #212]	; (19264 <_eeprom_emulator_move_data_to_spare+0x1c8>)
   1918e:	2387      	movs	r3, #135	; 0x87
   19190:	5cd3      	ldrb	r3, [r2, r3]
   19192:	009a      	lsls	r2, r3, #2
   19194:	1c3b      	adds	r3, r7, #0
   19196:	3315      	adds	r3, #21
   19198:	781b      	ldrb	r3, [r3, #0]
   1919a:	18d3      	adds	r3, r2, r3
	}

	/* Need to move both saved logical pages stored in the same row */
	for (uint8_t c = 0; c < 2; c++) {
		/* Find the physical page index for the new spare row pages */
		uint32_t new_page =
   1919c:	60fb      	str	r3, [r7, #12]
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);

		/* Commit any cached data to physical non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   1919e:	4b32      	ldr	r3, [pc, #200]	; (19268 <_eeprom_emulator_move_data_to_spare+0x1cc>)
   191a0:	4798      	blx	r3

		/* Check if we we are looking at the page the calling function wishes
		 * to change during the move operation */
		if (logical_page == page_trans[c].logical_page) {
   191a2:	1c3b      	adds	r3, r7, #0
   191a4:	3315      	adds	r3, #21
   191a6:	781a      	ldrb	r2, [r3, #0]
   191a8:	1c3b      	adds	r3, r7, #0
   191aa:	3308      	adds	r3, #8
   191ac:	0052      	lsls	r2, r2, #1
   191ae:	5cd3      	ldrb	r3, [r2, r3]
   191b0:	1dba      	adds	r2, r7, #6
   191b2:	7812      	ldrb	r2, [r2, #0]
   191b4:	429a      	cmp	r2, r3
   191b6:	d110      	bne.n	191da <_eeprom_emulator_move_data_to_spare+0x13e>
			/* Fill out new (updated) logical page's header in the cache */
			_eeprom_instance.cache.header.logical_page = logical_page;
   191b8:	4a2a      	ldr	r2, [pc, #168]	; (19264 <_eeprom_emulator_move_data_to_spare+0x1c8>)
   191ba:	1db9      	adds	r1, r7, #6
   191bc:	2388      	movs	r3, #136	; 0x88
   191be:	7809      	ldrb	r1, [r1, #0]
   191c0:	54d1      	strb	r1, [r2, r3]

			/* Write data to SRAM cache */
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
   191c2:	4928      	ldr	r1, [pc, #160]	; (19264 <_eeprom_emulator_move_data_to_spare+0x1c8>)
   191c4:	228c      	movs	r2, #140	; 0x8c
   191c6:	683b      	ldr	r3, [r7, #0]
   191c8:	1889      	adds	r1, r1, r2
   191ca:	1c1a      	adds	r2, r3, #0
   191cc:	233c      	movs	r3, #60	; 0x3c
   191ce:	1c08      	adds	r0, r1, #0
   191d0:	1c11      	adds	r1, r2, #0
   191d2:	1c1a      	adds	r2, r3, #0
   191d4:	4b25      	ldr	r3, [pc, #148]	; (1926c <_eeprom_emulator_move_data_to_spare+0x1d0>)
   191d6:	4798      	blx	r3
   191d8:	e00d      	b.n	191f6 <_eeprom_emulator_move_data_to_spare+0x15a>
		} else {
			/* Copy existing EEPROM page to cache buffer wholesale */
			_eeprom_emulator_nvm_read_page(
					page_trans[c].physical_page, &_eeprom_instance.cache);
   191da:	1c3b      	adds	r3, r7, #0
   191dc:	3315      	adds	r3, #21
   191de:	781b      	ldrb	r3, [r3, #0]
   191e0:	1c3a      	adds	r2, r7, #0
   191e2:	3208      	adds	r2, #8
   191e4:	005b      	lsls	r3, r3, #1
   191e6:	18d3      	adds	r3, r2, r3
   191e8:	785b      	ldrb	r3, [r3, #1]

			/* Write data to SRAM cache */
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
		} else {
			/* Copy existing EEPROM page to cache buffer wholesale */
			_eeprom_emulator_nvm_read_page(
   191ea:	1c1a      	adds	r2, r3, #0
   191ec:	4b20      	ldr	r3, [pc, #128]	; (19270 <_eeprom_emulator_move_data_to_spare+0x1d4>)
   191ee:	1c10      	adds	r0, r2, #0
   191f0:	1c19      	adds	r1, r3, #0
   191f2:	4b20      	ldr	r3, [pc, #128]	; (19274 <_eeprom_emulator_move_data_to_spare+0x1d8>)
   191f4:	4798      	blx	r3
		}

		/* Fill the physical NVM buffer with the new data so that it can be
		 * quickly committed in the future if needed due to a low power
		 * condition */
		_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   191f6:	68fb      	ldr	r3, [r7, #12]
   191f8:	b29a      	uxth	r2, r3
   191fa:	4b1d      	ldr	r3, [pc, #116]	; (19270 <_eeprom_emulator_move_data_to_spare+0x1d4>)
   191fc:	1c10      	adds	r0, r2, #0
   191fe:	1c19      	adds	r1, r3, #0
   19200:	4b1d      	ldr	r3, [pc, #116]	; (19278 <_eeprom_emulator_move_data_to_spare+0x1dc>)
   19202:	4798      	blx	r3

		/* Update the page map with the new page location and indicate that
		 * the cache now holds new data */
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
   19204:	1c3b      	adds	r3, r7, #0
   19206:	3315      	adds	r3, #21
   19208:	781a      	ldrb	r2, [r3, #0]
   1920a:	1c3b      	adds	r3, r7, #0
   1920c:	3308      	adds	r3, #8
   1920e:	0052      	lsls	r2, r2, #1
   19210:	5cd3      	ldrb	r3, [r2, r3]
   19212:	1c19      	adds	r1, r3, #0
   19214:	68fb      	ldr	r3, [r7, #12]
   19216:	b2da      	uxtb	r2, r3
   19218:	4812      	ldr	r0, [pc, #72]	; (19264 <_eeprom_emulator_move_data_to_spare+0x1c8>)
   1921a:	2308      	movs	r3, #8
   1921c:	1841      	adds	r1, r0, r1
   1921e:	18cb      	adds	r3, r1, r3
   19220:	70da      	strb	r2, [r3, #3]
		_eeprom_instance.cache_active = true;
   19222:	4a10      	ldr	r2, [pc, #64]	; (19264 <_eeprom_emulator_move_data_to_spare+0x1c8>)
   19224:	23c8      	movs	r3, #200	; 0xc8
   19226:	2101      	movs	r1, #1
   19228:	54d1      	strb	r1, [r2, r3]
			}
		}
	}

	/* Need to move both saved logical pages stored in the same row */
	for (uint8_t c = 0; c < 2; c++) {
   1922a:	1c3b      	adds	r3, r7, #0
   1922c:	3315      	adds	r3, #21
   1922e:	781a      	ldrb	r2, [r3, #0]
   19230:	1c3b      	adds	r3, r7, #0
   19232:	3315      	adds	r3, #21
   19234:	3201      	adds	r2, #1
   19236:	701a      	strb	r2, [r3, #0]
   19238:	1c3b      	adds	r3, r7, #0
   1923a:	3315      	adds	r3, #21
   1923c:	781b      	ldrb	r3, [r3, #0]
   1923e:	2b01      	cmp	r3, #1
   19240:	d9a4      	bls.n	1918c <_eeprom_emulator_move_data_to_spare+0xf0>
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
		_eeprom_instance.cache_active = true;
	}

	/* Erase the row that was moved and set it as the new spare row */
	_eeprom_emulator_nvm_erase_row(row_number);
   19242:	1dfb      	adds	r3, r7, #7
   19244:	781b      	ldrb	r3, [r3, #0]
   19246:	1c18      	adds	r0, r3, #0
   19248:	4b0c      	ldr	r3, [pc, #48]	; (1927c <_eeprom_emulator_move_data_to_spare+0x1e0>)
   1924a:	4798      	blx	r3

	/* Keep the index of the new spare row */
	_eeprom_instance.spare_row = row_number;
   1924c:	4a05      	ldr	r2, [pc, #20]	; (19264 <_eeprom_emulator_move_data_to_spare+0x1c8>)
   1924e:	1df9      	adds	r1, r7, #7
   19250:	2387      	movs	r3, #135	; 0x87
   19252:	7809      	ldrb	r1, [r1, #0]
   19254:	54d1      	strb	r1, [r2, r3]

	return error_code;
   19256:	1c3b      	adds	r3, r7, #0
   19258:	3314      	adds	r3, #20
   1925a:	781b      	ldrb	r3, [r3, #0]
}
   1925c:	1c18      	adds	r0, r3, #0
   1925e:	46bd      	mov	sp, r7
   19260:	b006      	add	sp, #24
   19262:	bd80      	pop	{r7, pc}
   19264:	2000045c 	.word	0x2000045c
   19268:	0001973d 	.word	0x0001973d
   1926c:	0001b375 	.word	0x0001b375
   19270:	200004e4 	.word	0x200004e4
   19274:	00018d85 	.word	0x00018d85
   19278:	00018ce9 	.word	0x00018ce9
   1927c:	00018ca1 	.word	0x00018ca1

00019280 <_eeprom_emulator_create_master_page>:
 *
 * Creates a new master page in emulated EEPROM, giving information on the
 * emulator used to store the EEPROM data.
 */
static void _eeprom_emulator_create_master_page(void)
{
   19280:	b590      	push	{r4, r7, lr}
   19282:	b095      	sub	sp, #84	; 0x54
   19284:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   19286:	1c3b      	adds	r3, r7, #0
   19288:	3340      	adds	r3, #64	; 0x40
   1928a:	4a28      	ldr	r2, [pc, #160]	; (1932c <_eeprom_emulator_create_master_page+0xac>)
   1928c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1928e:	c313      	stmia	r3!, {r0, r1, r4}

	struct _eeprom_master_page master_page;
	memset(&master_page, 0xFF, sizeof(master_page));
   19290:	1c3b      	adds	r3, r7, #0
   19292:	1c18      	adds	r0, r3, #0
   19294:	21ff      	movs	r1, #255	; 0xff
   19296:	223d      	movs	r2, #61	; 0x3d
   19298:	4b25      	ldr	r3, [pc, #148]	; (19330 <_eeprom_emulator_create_master_page+0xb0>)
   1929a:	4798      	blx	r3

	/* Fill out the magic key header to indicate an initialized master page */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   1929c:	1c3b      	adds	r3, r7, #0
   1929e:	334f      	adds	r3, #79	; 0x4f
   192a0:	2200      	movs	r2, #0
   192a2:	701a      	strb	r2, [r3, #0]
   192a4:	e013      	b.n	192ce <_eeprom_emulator_create_master_page+0x4e>
		master_page.magic_key[c] = magic_key[c];
   192a6:	1c3b      	adds	r3, r7, #0
   192a8:	334f      	adds	r3, #79	; 0x4f
   192aa:	781a      	ldrb	r2, [r3, #0]
   192ac:	1c3b      	adds	r3, r7, #0
   192ae:	334f      	adds	r3, #79	; 0x4f
   192b0:	7819      	ldrb	r1, [r3, #0]
   192b2:	1c3b      	adds	r3, r7, #0
   192b4:	3340      	adds	r3, #64	; 0x40
   192b6:	0089      	lsls	r1, r1, #2
   192b8:	58c9      	ldr	r1, [r1, r3]
   192ba:	1c3b      	adds	r3, r7, #0
   192bc:	0092      	lsls	r2, r2, #2
   192be:	50d1      	str	r1, [r2, r3]

	struct _eeprom_master_page master_page;
	memset(&master_page, 0xFF, sizeof(master_page));

	/* Fill out the magic key header to indicate an initialized master page */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   192c0:	1c3b      	adds	r3, r7, #0
   192c2:	334f      	adds	r3, #79	; 0x4f
   192c4:	781a      	ldrb	r2, [r3, #0]
   192c6:	1c3b      	adds	r3, r7, #0
   192c8:	334f      	adds	r3, #79	; 0x4f
   192ca:	3201      	adds	r2, #1
   192cc:	701a      	strb	r2, [r3, #0]
   192ce:	1c3b      	adds	r3, r7, #0
   192d0:	334f      	adds	r3, #79	; 0x4f
   192d2:	781b      	ldrb	r3, [r3, #0]
   192d4:	2b02      	cmp	r3, #2
   192d6:	d9e6      	bls.n	192a6 <_eeprom_emulator_create_master_page+0x26>
		master_page.magic_key[c] = magic_key[c];
	}

	/* Update master header with version information of this emulator */
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
   192d8:	1c3b      	adds	r3, r7, #0
   192da:	2201      	movs	r2, #1
   192dc:	73da      	strb	r2, [r3, #15]
	master_page.major_version = EEPROM_MAJOR_VERSION;
   192de:	1c3b      	adds	r3, r7, #0
   192e0:	2201      	movs	r2, #1
   192e2:	731a      	strb	r2, [r3, #12]
	master_page.minor_version = EEPROM_MINOR_VERSION;
   192e4:	1c3b      	adds	r3, r7, #0
   192e6:	2200      	movs	r2, #0
   192e8:	735a      	strb	r2, [r3, #13]
	master_page.revision      = EEPROM_REVISION;
   192ea:	1c3b      	adds	r3, r7, #0
   192ec:	2200      	movs	r2, #0
   192ee:	739a      	strb	r2, [r3, #14]

	_eeprom_emulator_nvm_erase_row(
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
   192f0:	4b10      	ldr	r3, [pc, #64]	; (19334 <_eeprom_emulator_create_master_page+0xb4>)
   192f2:	891b      	ldrh	r3, [r3, #8]
   192f4:	3b01      	subs	r3, #1
   192f6:	2b00      	cmp	r3, #0
   192f8:	da00      	bge.n	192fc <_eeprom_emulator_create_master_page+0x7c>
   192fa:	3303      	adds	r3, #3
   192fc:	109b      	asrs	r3, r3, #2
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
	master_page.major_version = EEPROM_MAJOR_VERSION;
	master_page.minor_version = EEPROM_MINOR_VERSION;
	master_page.revision      = EEPROM_REVISION;

	_eeprom_emulator_nvm_erase_row(
   192fe:	b2db      	uxtb	r3, r3
   19300:	1c18      	adds	r0, r3, #0
   19302:	4b0d      	ldr	r3, [pc, #52]	; (19338 <_eeprom_emulator_create_master_page+0xb8>)
   19304:	4798      	blx	r3
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);

	/* Write the new master page data to physical memory */
	_eeprom_emulator_nvm_fill_cache(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   19306:	4b0b      	ldr	r3, [pc, #44]	; (19334 <_eeprom_emulator_create_master_page+0xb4>)
   19308:	891b      	ldrh	r3, [r3, #8]
   1930a:	3b01      	subs	r3, #1
   1930c:	b29a      	uxth	r2, r3
   1930e:	1c3b      	adds	r3, r7, #0
   19310:	1c10      	adds	r0, r2, #0
   19312:	1c19      	adds	r1, r3, #0
   19314:	4b09      	ldr	r3, [pc, #36]	; (1933c <_eeprom_emulator_create_master_page+0xbc>)
   19316:	4798      	blx	r3
	_eeprom_emulator_nvm_commit_cache(EEPROM_MASTER_PAGE_NUMBER);
   19318:	4b06      	ldr	r3, [pc, #24]	; (19334 <_eeprom_emulator_create_master_page+0xb4>)
   1931a:	891b      	ldrh	r3, [r3, #8]
   1931c:	3b01      	subs	r3, #1
   1931e:	b29b      	uxth	r3, r3
   19320:	1c18      	adds	r0, r3, #0
   19322:	4b07      	ldr	r3, [pc, #28]	; (19340 <_eeprom_emulator_create_master_page+0xc0>)
   19324:	4798      	blx	r3
}
   19326:	46bd      	mov	sp, r7
   19328:	b015      	add	sp, #84	; 0x54
   1932a:	bd90      	pop	{r4, r7, pc}
   1932c:	00026f10 	.word	0x00026f10
   19330:	0001b3f9 	.word	0x0001b3f9
   19334:	2000045c 	.word	0x2000045c
   19338:	00018ca1 	.word	0x00018ca1
   1933c:	00018ce9 	.word	0x00018ce9
   19340:	00018d39 	.word	0x00018d39

00019344 <_eeprom_emulator_verify_master_page>:
 * \retval STATUS_ERR_BAD_FORMAT  Master page contents was invalid
 * \retval STATUS_ERR_IO          Master page indicates the data is incompatible
 *                                with this version of the EEPROM emulator
 */
static enum status_code _eeprom_emulator_verify_master_page(void)
{
   19344:	b590      	push	{r4, r7, lr}
   19346:	b095      	sub	sp, #84	; 0x54
   19348:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   1934a:	1c3b      	adds	r3, r7, #0
   1934c:	3340      	adds	r3, #64	; 0x40
   1934e:	4a22      	ldr	r2, [pc, #136]	; (193d8 <_eeprom_emulator_verify_master_page+0x94>)
   19350:	ca13      	ldmia	r2!, {r0, r1, r4}
   19352:	c313      	stmia	r3!, {r0, r1, r4}
	struct _eeprom_master_page master_page;

	/* Copy the master page to the RAM buffer so that it can be inspected */
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   19354:	4b21      	ldr	r3, [pc, #132]	; (193dc <_eeprom_emulator_verify_master_page+0x98>)
   19356:	891b      	ldrh	r3, [r3, #8]
   19358:	3b01      	subs	r3, #1
   1935a:	b29a      	uxth	r2, r3
   1935c:	1c3b      	adds	r3, r7, #0
   1935e:	1c10      	adds	r0, r2, #0
   19360:	1c19      	adds	r1, r3, #0
   19362:	4b1f      	ldr	r3, [pc, #124]	; (193e0 <_eeprom_emulator_verify_master_page+0x9c>)
   19364:	4798      	blx	r3

	/* Verify magic key is correct in the master page header */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   19366:	1c3b      	adds	r3, r7, #0
   19368:	334f      	adds	r3, #79	; 0x4f
   1936a:	2200      	movs	r2, #0
   1936c:	701a      	strb	r2, [r3, #0]
   1936e:	e017      	b.n	193a0 <_eeprom_emulator_verify_master_page+0x5c>
		if (master_page.magic_key[c] != magic_key[c]) {
   19370:	1c3b      	adds	r3, r7, #0
   19372:	334f      	adds	r3, #79	; 0x4f
   19374:	781a      	ldrb	r2, [r3, #0]
   19376:	1c3b      	adds	r3, r7, #0
   19378:	0092      	lsls	r2, r2, #2
   1937a:	58d2      	ldr	r2, [r2, r3]
   1937c:	1c3b      	adds	r3, r7, #0
   1937e:	334f      	adds	r3, #79	; 0x4f
   19380:	7819      	ldrb	r1, [r3, #0]
   19382:	1c3b      	adds	r3, r7, #0
   19384:	3340      	adds	r3, #64	; 0x40
   19386:	0089      	lsls	r1, r1, #2
   19388:	58cb      	ldr	r3, [r1, r3]
   1938a:	429a      	cmp	r2, r3
   1938c:	d001      	beq.n	19392 <_eeprom_emulator_verify_master_page+0x4e>
			return STATUS_ERR_BAD_FORMAT;
   1938e:	231a      	movs	r3, #26
   19390:	e01e      	b.n	193d0 <_eeprom_emulator_verify_master_page+0x8c>

	/* Copy the master page to the RAM buffer so that it can be inspected */
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);

	/* Verify magic key is correct in the master page header */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   19392:	1c3b      	adds	r3, r7, #0
   19394:	334f      	adds	r3, #79	; 0x4f
   19396:	781a      	ldrb	r2, [r3, #0]
   19398:	1c3b      	adds	r3, r7, #0
   1939a:	334f      	adds	r3, #79	; 0x4f
   1939c:	3201      	adds	r2, #1
   1939e:	701a      	strb	r2, [r3, #0]
   193a0:	1c3b      	adds	r3, r7, #0
   193a2:	334f      	adds	r3, #79	; 0x4f
   193a4:	781b      	ldrb	r3, [r3, #0]
   193a6:	2b02      	cmp	r3, #2
   193a8:	d9e2      	bls.n	19370 <_eeprom_emulator_verify_master_page+0x2c>
			return STATUS_ERR_BAD_FORMAT;
		}
	}

	/* Verify emulator ID in header to ensure the same scheme is used */
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
   193aa:	1c3b      	adds	r3, r7, #0
   193ac:	7bdb      	ldrb	r3, [r3, #15]
   193ae:	2b01      	cmp	r3, #1
   193b0:	d001      	beq.n	193b6 <_eeprom_emulator_verify_master_page+0x72>
		return STATUS_ERR_IO;
   193b2:	2310      	movs	r3, #16
   193b4:	e00c      	b.n	193d0 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify major version in header to ensure the same version is used */
	if (master_page.major_version != EEPROM_MAJOR_VERSION) {
   193b6:	1c3b      	adds	r3, r7, #0
   193b8:	7b1b      	ldrb	r3, [r3, #12]
   193ba:	2b01      	cmp	r3, #1
   193bc:	d001      	beq.n	193c2 <_eeprom_emulator_verify_master_page+0x7e>
		return STATUS_ERR_IO;
   193be:	2310      	movs	r3, #16
   193c0:	e006      	b.n	193d0 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify minor version in header to ensure the same version is used */
	if (master_page.minor_version != EEPROM_MINOR_VERSION) {
   193c2:	1c3b      	adds	r3, r7, #0
   193c4:	7b5b      	ldrb	r3, [r3, #13]
   193c6:	2b00      	cmp	r3, #0
   193c8:	d001      	beq.n	193ce <_eeprom_emulator_verify_master_page+0x8a>
		return STATUS_ERR_IO;
   193ca:	2310      	movs	r3, #16
   193cc:	e000      	b.n	193d0 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Don't verify revision number - same major/minor is considered enough
	 * to ensure the stored data is compatible. */

	return STATUS_OK;
   193ce:	2300      	movs	r3, #0
}
   193d0:	1c18      	adds	r0, r3, #0
   193d2:	46bd      	mov	sp, r7
   193d4:	b015      	add	sp, #84	; 0x54
   193d6:	bd90      	pop	{r4, r7, pc}
   193d8:	00026f10 	.word	0x00026f10
   193dc:	2000045c 	.word	0x2000045c
   193e0:	00018d85 	.word	0x00018d85

000193e4 <eeprom_emulator_get_parameters>:
 *                                      successfully
 * \retval STATUS_ERR_NOT_INITIALIZED   If the EEPROM Emulator is not initialized
 */
enum status_code eeprom_emulator_get_parameters(
	struct eeprom_emulator_parameters *const parameters)
{
   193e4:	b580      	push	{r7, lr}
   193e6:	b082      	sub	sp, #8
   193e8:	af00      	add	r7, sp, #0
   193ea:	6078      	str	r0, [r7, #4]
	if (_eeprom_instance.initialized == false) {
   193ec:	4b0a      	ldr	r3, [pc, #40]	; (19418 <eeprom_emulator_get_parameters+0x34>)
   193ee:	781b      	ldrb	r3, [r3, #0]
   193f0:	2201      	movs	r2, #1
   193f2:	4053      	eors	r3, r2
   193f4:	b2db      	uxtb	r3, r3
   193f6:	2b00      	cmp	r3, #0
   193f8:	d001      	beq.n	193fe <eeprom_emulator_get_parameters+0x1a>
		return STATUS_ERR_NOT_INITIALIZED;
   193fa:	231f      	movs	r3, #31
   193fc:	e008      	b.n	19410 <eeprom_emulator_get_parameters+0x2c>
	}

	parameters->page_size              = EEPROM_PAGE_SIZE;
   193fe:	687b      	ldr	r3, [r7, #4]
   19400:	223c      	movs	r2, #60	; 0x3c
   19402:	701a      	strb	r2, [r3, #0]
	parameters->eeprom_number_of_pages = _eeprom_instance.logical_pages;
   19404:	4b04      	ldr	r3, [pc, #16]	; (19418 <eeprom_emulator_get_parameters+0x34>)
   19406:	7a9b      	ldrb	r3, [r3, #10]
   19408:	1c1a      	adds	r2, r3, #0
   1940a:	687b      	ldr	r3, [r7, #4]
   1940c:	805a      	strh	r2, [r3, #2]

	return STATUS_OK;
   1940e:	2300      	movs	r3, #0
}
   19410:	1c18      	adds	r0, r3, #0
   19412:	46bd      	mov	sp, r7
   19414:	b002      	add	sp, #8
   19416:	bd80      	pop	{r7, pc}
   19418:	2000045c 	.word	0x2000045c

0001941c <eeprom_emulator_init>:
 *                                formatted
 * \retval STATUS_ERR_IO          EEPROM data is incompatible with this version
 *                                or scheme of the EEPROM emulator
 */
enum status_code eeprom_emulator_init(void)
{
   1941c:	b590      	push	{r4, r7, lr}
   1941e:	b089      	sub	sp, #36	; 0x24
   19420:	af02      	add	r7, sp, #8
	enum status_code error_code = STATUS_OK;
   19422:	1c3b      	adds	r3, r7, #0
   19424:	3317      	adds	r3, #23
   19426:	2200      	movs	r2, #0
   19428:	701a      	strb	r2, [r3, #0]
	struct nvm_parameters parameters;

	/* Retrieve the NVM controller configuration - enable manual page writing
	 * mode so that the emulator has exclusive control over page writes to
	 * allow for caching */
	nvm_get_config_defaults(&config);
   1942a:	1c3b      	adds	r3, r7, #0
   1942c:	3310      	adds	r3, #16
   1942e:	1c18      	adds	r0, r3, #0
   19430:	4b3a      	ldr	r3, [pc, #232]	; (1951c <eeprom_emulator_init+0x100>)
   19432:	4798      	blx	r3
	config.manual_page_write = true;
   19434:	1c3b      	adds	r3, r7, #0
   19436:	3310      	adds	r3, #16
   19438:	2201      	movs	r2, #1
   1943a:	709a      	strb	r2, [r3, #2]

	/* Apply new NVM configuration */
	do {
		error_code = nvm_set_config(&config);
   1943c:	1c3c      	adds	r4, r7, #0
   1943e:	3417      	adds	r4, #23
   19440:	1c3b      	adds	r3, r7, #0
   19442:	3310      	adds	r3, #16
   19444:	1c18      	adds	r0, r3, #0
   19446:	4b36      	ldr	r3, [pc, #216]	; (19520 <eeprom_emulator_init+0x104>)
   19448:	4798      	blx	r3
   1944a:	1c03      	adds	r3, r0, #0
   1944c:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   1944e:	1c3b      	adds	r3, r7, #0
   19450:	3317      	adds	r3, #23
   19452:	781b      	ldrb	r3, [r3, #0]
   19454:	2b05      	cmp	r3, #5
   19456:	d0f1      	beq.n	1943c <eeprom_emulator_init+0x20>

	/* Get the NVM controller configuration parameters */
	nvm_get_parameters(&parameters);
   19458:	1d3b      	adds	r3, r7, #4
   1945a:	1c18      	adds	r0, r3, #0
   1945c:	4b31      	ldr	r3, [pc, #196]	; (19524 <eeprom_emulator_init+0x108>)
   1945e:	4798      	blx	r3

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
   19460:	1d3b      	adds	r3, r7, #4
   19462:	685b      	ldr	r3, [r3, #4]
   19464:	2b0b      	cmp	r3, #11
   19466:	d81a      	bhi.n	1949e <eeprom_emulator_init+0x82>
		Assert(false);
   19468:	4b2f      	ldr	r3, [pc, #188]	; (19528 <eeprom_emulator_init+0x10c>)
   1946a:	4798      	blx	r3
   1946c:	1c03      	adds	r3, r0, #0
   1946e:	2b00      	cmp	r3, #0
   19470:	d00e      	beq.n	19490 <eeprom_emulator_init+0x74>
   19472:	4b2d      	ldr	r3, [pc, #180]	; (19528 <eeprom_emulator_init+0x10c>)
   19474:	4798      	blx	r3
   19476:	1c01      	adds	r1, r0, #0
   19478:	4a2c      	ldr	r2, [pc, #176]	; (1952c <eeprom_emulator_init+0x110>)
   1947a:	4b2d      	ldr	r3, [pc, #180]	; (19530 <eeprom_emulator_init+0x114>)
   1947c:	482d      	ldr	r0, [pc, #180]	; (19534 <eeprom_emulator_init+0x118>)
   1947e:	9000      	str	r0, [sp, #0]
   19480:	482d      	ldr	r0, [pc, #180]	; (19538 <eeprom_emulator_init+0x11c>)
   19482:	9001      	str	r0, [sp, #4]
   19484:	1c08      	adds	r0, r1, #0
   19486:	2101      	movs	r1, #1
   19488:	4c2c      	ldr	r4, [pc, #176]	; (1953c <eeprom_emulator_init+0x120>)
   1948a:	47a0      	blx	r4
		return STATUS_ERR_NO_MEMORY;
   1948c:	2316      	movs	r3, #22
   1948e:	e041      	b.n	19514 <eeprom_emulator_init+0xf8>
	nvm_get_parameters(&parameters);

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
		Assert(false);
   19490:	482b      	ldr	r0, [pc, #172]	; (19540 <eeprom_emulator_init+0x124>)
   19492:	4929      	ldr	r1, [pc, #164]	; (19538 <eeprom_emulator_init+0x11c>)
   19494:	4a25      	ldr	r2, [pc, #148]	; (1952c <eeprom_emulator_init+0x110>)
   19496:	4b26      	ldr	r3, [pc, #152]	; (19530 <eeprom_emulator_init+0x114>)
   19498:	4c2a      	ldr	r4, [pc, #168]	; (19544 <eeprom_emulator_init+0x128>)
   1949a:	47a0      	blx	r4
   1949c:	e7fe      	b.n	1949c <eeprom_emulator_init+0x80>
	 *  - One row is reserved for the master page
	 *  - One row is reserved for the spare row
	 *  - Two logical pages can be stored in one physical row
	 */
	_eeprom_instance.physical_pages =
			parameters.eeprom_number_of_pages;
   1949e:	1d3b      	adds	r3, r7, #4
   194a0:	685b      	ldr	r3, [r3, #4]
	/* Configure the EEPROM instance physical and logical number of pages:
	 *  - One row is reserved for the master page
	 *  - One row is reserved for the spare row
	 *  - Two logical pages can be stored in one physical row
	 */
	_eeprom_instance.physical_pages =
   194a2:	b29a      	uxth	r2, r3
   194a4:	4b28      	ldr	r3, [pc, #160]	; (19548 <eeprom_emulator_init+0x12c>)
   194a6:	811a      	strh	r2, [r3, #8]
			parameters.eeprom_number_of_pages;
	_eeprom_instance.logical_pages  =
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
   194a8:	1d3b      	adds	r3, r7, #4
   194aa:	685b      	ldr	r3, [r3, #4]
   194ac:	3b08      	subs	r3, #8
   194ae:	085b      	lsrs	r3, r3, #1
	 *  - One row is reserved for the spare row
	 *  - Two logical pages can be stored in one physical row
	 */
	_eeprom_instance.physical_pages =
			parameters.eeprom_number_of_pages;
	_eeprom_instance.logical_pages  =
   194b0:	b2da      	uxtb	r2, r3
   194b2:	4b25      	ldr	r3, [pc, #148]	; (19548 <eeprom_emulator_init+0x12c>)
   194b4:	729a      	strb	r2, [r3, #10]

	/* Configure the EEPROM instance starting physical address in FLASH and
	 * pre-compute the index of the first page in FLASH used for EEPROM */
	_eeprom_instance.flash =
			(void*)(FLASH_SIZE -
			((uint32_t)_eeprom_instance.physical_pages * NVMCTRL_PAGE_SIZE));
   194b6:	4b24      	ldr	r3, [pc, #144]	; (19548 <eeprom_emulator_init+0x12c>)
   194b8:	891b      	ldrh	r3, [r3, #8]
   194ba:	1c1a      	adds	r2, r3, #0
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;

	/* Configure the EEPROM instance starting physical address in FLASH and
	 * pre-compute the index of the first page in FLASH used for EEPROM */
	_eeprom_instance.flash =
			(void*)(FLASH_SIZE -
   194bc:	1c13      	adds	r3, r2, #0
   194be:	069b      	lsls	r3, r3, #26
   194c0:	1a9b      	subs	r3, r3, r2
   194c2:	019b      	lsls	r3, r3, #6
   194c4:	2280      	movs	r2, #128	; 0x80
   194c6:	02d2      	lsls	r2, r2, #11
   194c8:	189b      	adds	r3, r3, r2
   194ca:	1c1a      	adds	r2, r3, #0
	_eeprom_instance.logical_pages  =
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;

	/* Configure the EEPROM instance starting physical address in FLASH and
	 * pre-compute the index of the first page in FLASH used for EEPROM */
	_eeprom_instance.flash =
   194cc:	4b1e      	ldr	r3, [pc, #120]	; (19548 <eeprom_emulator_init+0x12c>)
   194ce:	605a      	str	r2, [r3, #4]
			(void*)(FLASH_SIZE -
			((uint32_t)_eeprom_instance.physical_pages * NVMCTRL_PAGE_SIZE));

	/* Clear EEPROM page write cache on initialization */
	_eeprom_instance.cache_active = false;
   194d0:	4a1d      	ldr	r2, [pc, #116]	; (19548 <eeprom_emulator_init+0x12c>)
   194d2:	23c8      	movs	r3, #200	; 0xc8
   194d4:	2100      	movs	r1, #0
   194d6:	54d1      	strb	r1, [r2, r3]

	/* Scan physical memory and re-create logical to physical page mapping
	 * table to locate logical pages of EEPROM data in physical FLASH */
	_eeprom_emulator_update_page_mapping();
   194d8:	4b1c      	ldr	r3, [pc, #112]	; (1954c <eeprom_emulator_init+0x130>)
   194da:	4798      	blx	r3

	/* Could not find spare row - abort as the memory appears to be corrupt */
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
   194dc:	4a1a      	ldr	r2, [pc, #104]	; (19548 <eeprom_emulator_init+0x12c>)
   194de:	2387      	movs	r3, #135	; 0x87
   194e0:	5cd3      	ldrb	r3, [r2, r3]
   194e2:	2b3f      	cmp	r3, #63	; 0x3f
   194e4:	d101      	bne.n	194ea <eeprom_emulator_init+0xce>
		return STATUS_ERR_BAD_FORMAT;
   194e6:	231a      	movs	r3, #26
   194e8:	e014      	b.n	19514 <eeprom_emulator_init+0xf8>
	}

	/* Verify that the master page contains valid data for this service */
	error_code = _eeprom_emulator_verify_master_page();
   194ea:	1c3c      	adds	r4, r7, #0
   194ec:	3417      	adds	r4, #23
   194ee:	4b18      	ldr	r3, [pc, #96]	; (19550 <eeprom_emulator_init+0x134>)
   194f0:	4798      	blx	r3
   194f2:	1c03      	adds	r3, r0, #0
   194f4:	7023      	strb	r3, [r4, #0]
	if (error_code != STATUS_OK) {
   194f6:	1c3b      	adds	r3, r7, #0
   194f8:	3317      	adds	r3, #23
   194fa:	781b      	ldrb	r3, [r3, #0]
   194fc:	2b00      	cmp	r3, #0
   194fe:	d003      	beq.n	19508 <eeprom_emulator_init+0xec>
		return error_code;
   19500:	1c3b      	adds	r3, r7, #0
   19502:	3317      	adds	r3, #23
   19504:	781b      	ldrb	r3, [r3, #0]
   19506:	e005      	b.n	19514 <eeprom_emulator_init+0xf8>
	}

	/* Mark initialization as complete */
	_eeprom_instance.initialized = true;
   19508:	4b0f      	ldr	r3, [pc, #60]	; (19548 <eeprom_emulator_init+0x12c>)
   1950a:	2201      	movs	r2, #1
   1950c:	701a      	strb	r2, [r3, #0]

	return error_code;
   1950e:	1c3b      	adds	r3, r7, #0
   19510:	3317      	adds	r3, #23
   19512:	781b      	ldrb	r3, [r3, #0]
}
   19514:	1c18      	adds	r0, r3, #0
   19516:	46bd      	mov	sp, r7
   19518:	b007      	add	sp, #28
   1951a:	bd90      	pop	{r4, r7, pc}
   1951c:	00018c11 	.word	0x00018c11
   19520:	000118bd 	.word	0x000118bd
   19524:	00011d3d 	.word	0x00011d3d
   19528:	00018bfd 	.word	0x00018bfd
   1952c:	00026f1c 	.word	0x00026f1c
   19530:	0000024a 	.word	0x0000024a
   19534:	00026ecc 	.word	0x00026ecc
   19538:	00026f50 	.word	0x00026f50
   1953c:	000106e9 	.word	0x000106e9
   19540:	00026eec 	.word	0x00026eec
   19544:	0001b62d 	.word	0x0001b62d
   19548:	2000045c 	.word	0x2000045c
   1954c:	00018ebd 	.word	0x00018ebd
   19550:	00019345 	.word	0x00019345

00019554 <eeprom_emulator_erase_memory>:
 *
 * Erases and re-initializes the emulated EEPROM memory space, destroying any
 * existing data.
 */
void eeprom_emulator_erase_memory(void)
{
   19554:	b580      	push	{r7, lr}
   19556:	af00      	add	r7, sp, #0
	/* Create new EEPROM memory block in EEPROM emulation section */
	_eeprom_emulator_format_memory();
   19558:	4b03      	ldr	r3, [pc, #12]	; (19568 <eeprom_emulator_erase_memory+0x14>)
   1955a:	4798      	blx	r3

	/* Write EEPROM emulation master block */
	_eeprom_emulator_create_master_page();
   1955c:	4b03      	ldr	r3, [pc, #12]	; (1956c <eeprom_emulator_erase_memory+0x18>)
   1955e:	4798      	blx	r3

	/* Map the newly created EEPROM memory block */
	_eeprom_emulator_update_page_mapping();
   19560:	4b03      	ldr	r3, [pc, #12]	; (19570 <eeprom_emulator_erase_memory+0x1c>)
   19562:	4798      	blx	r3
}
   19564:	46bd      	mov	sp, r7
   19566:	bd80      	pop	{r7, pc}
   19568:	00018dd5 	.word	0x00018dd5
   1956c:	00019281 	.word	0x00019281
   19570:	00018ebd 	.word	0x00018ebd

00019574 <eeprom_emulator_write_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_write_page(
		const uint8_t logical_page,
		const uint8_t *const data)
{
   19574:	b590      	push	{r4, r7, lr}
   19576:	b085      	sub	sp, #20
   19578:	af00      	add	r7, sp, #0
   1957a:	1c02      	adds	r2, r0, #0
   1957c:	6039      	str	r1, [r7, #0]
   1957e:	1dfb      	adds	r3, r7, #7
   19580:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   19582:	4b3d      	ldr	r3, [pc, #244]	; (19678 <eeprom_emulator_write_page+0x104>)
   19584:	781b      	ldrb	r3, [r3, #0]
   19586:	2201      	movs	r2, #1
   19588:	4053      	eors	r3, r2
   1958a:	b2db      	uxtb	r3, r3
   1958c:	2b00      	cmp	r3, #0
   1958e:	d001      	beq.n	19594 <eeprom_emulator_write_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   19590:	231f      	movs	r3, #31
   19592:	e06d      	b.n	19670 <eeprom_emulator_write_page+0xfc>
	}

	/* Make sure the write address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   19594:	4b38      	ldr	r3, [pc, #224]	; (19678 <eeprom_emulator_write_page+0x104>)
   19596:	7a9b      	ldrb	r3, [r3, #10]
   19598:	1dfa      	adds	r2, r7, #7
   1959a:	7812      	ldrb	r2, [r2, #0]
   1959c:	429a      	cmp	r2, r3
   1959e:	d301      	bcc.n	195a4 <eeprom_emulator_write_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   195a0:	2318      	movs	r3, #24
   195a2:	e065      	b.n	19670 <eeprom_emulator_write_page+0xfc>
	}

	/* Check if the cache is active and the currently cached page is not the
	 * page that is being written (if not, we need to commit and cache the new
	 * page) */
	if ((_eeprom_instance.cache_active == true) &&
   195a4:	4a34      	ldr	r2, [pc, #208]	; (19678 <eeprom_emulator_write_page+0x104>)
   195a6:	23c8      	movs	r3, #200	; 0xc8
   195a8:	5cd3      	ldrb	r3, [r2, r3]
   195aa:	2b00      	cmp	r3, #0
   195ac:	d008      	beq.n	195c0 <eeprom_emulator_write_page+0x4c>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
   195ae:	4a32      	ldr	r2, [pc, #200]	; (19678 <eeprom_emulator_write_page+0x104>)
   195b0:	2388      	movs	r3, #136	; 0x88
   195b2:	5cd3      	ldrb	r3, [r2, r3]
	}

	/* Check if the cache is active and the currently cached page is not the
	 * page that is being written (if not, we need to commit and cache the new
	 * page) */
	if ((_eeprom_instance.cache_active == true) &&
   195b4:	1dfa      	adds	r2, r7, #7
   195b6:	7812      	ldrb	r2, [r2, #0]
   195b8:	429a      	cmp	r2, r3
   195ba:	d001      	beq.n	195c0 <eeprom_emulator_write_page+0x4c>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
		/* Commit the currently cached data buffer to non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   195bc:	4b2f      	ldr	r3, [pc, #188]	; (1967c <eeprom_emulator_write_page+0x108>)
   195be:	4798      	blx	r3
	}

	/* Check if we have space in the current page location's physical row for
	 * a new version, and if so get the new page index */
	uint8_t new_page = 0;
   195c0:	1c3b      	adds	r3, r7, #0
   195c2:	330e      	adds	r3, #14
   195c4:	2200      	movs	r2, #0
   195c6:	701a      	strb	r2, [r3, #0]
	bool page_spare  = _eeprom_emulator_is_page_free_on_row(
   195c8:	1dfb      	adds	r3, r7, #7
   195ca:	781a      	ldrb	r2, [r3, #0]
   195cc:	492a      	ldr	r1, [pc, #168]	; (19678 <eeprom_emulator_write_page+0x104>)
   195ce:	2308      	movs	r3, #8
   195d0:	188a      	adds	r2, r1, r2
   195d2:	18d3      	adds	r3, r2, r3
   195d4:	78da      	ldrb	r2, [r3, #3]
   195d6:	1c3c      	adds	r4, r7, #0
   195d8:	340f      	adds	r4, #15
   195da:	1c3b      	adds	r3, r7, #0
   195dc:	330e      	adds	r3, #14
   195de:	1c10      	adds	r0, r2, #0
   195e0:	1c19      	adds	r1, r3, #0
   195e2:	4b27      	ldr	r3, [pc, #156]	; (19680 <eeprom_emulator_write_page+0x10c>)
   195e4:	4798      	blx	r3
   195e6:	1c03      	adds	r3, r0, #0
   195e8:	7023      	strb	r3, [r4, #0]
			_eeprom_instance.page_map[logical_page], &new_page);

	/* Check if the current row is full, and we need to swap it out with a
	 * spare row */
	if (page_spare == false) {
   195ea:	1c3b      	adds	r3, r7, #0
   195ec:	330f      	adds	r3, #15
   195ee:	781b      	ldrb	r3, [r3, #0]
   195f0:	2201      	movs	r2, #1
   195f2:	4053      	eors	r3, r2
   195f4:	b2db      	uxtb	r3, r3
   195f6:	2b00      	cmp	r3, #0
   195f8:	d012      	beq.n	19620 <eeprom_emulator_write_page+0xac>
		/* Move the other page we aren't writing that is stored in the same
		 * page to the new row, and replace the old current page with the
		 * new page contents (cache is updated to match) */
		_eeprom_emulator_move_data_to_spare(
				_eeprom_instance.page_map[logical_page] / NVMCTRL_ROW_PAGES,
   195fa:	1dfb      	adds	r3, r7, #7
   195fc:	781a      	ldrb	r2, [r3, #0]
   195fe:	491e      	ldr	r1, [pc, #120]	; (19678 <eeprom_emulator_write_page+0x104>)
   19600:	2308      	movs	r3, #8
   19602:	188a      	adds	r2, r1, r2
   19604:	18d3      	adds	r3, r2, r3
   19606:	78db      	ldrb	r3, [r3, #3]
	 * spare row */
	if (page_spare == false) {
		/* Move the other page we aren't writing that is stored in the same
		 * page to the new row, and replace the old current page with the
		 * new page contents (cache is updated to match) */
		_eeprom_emulator_move_data_to_spare(
   19608:	089b      	lsrs	r3, r3, #2
   1960a:	b2d9      	uxtb	r1, r3
   1960c:	1dfb      	adds	r3, r7, #7
   1960e:	781a      	ldrb	r2, [r3, #0]
   19610:	683b      	ldr	r3, [r7, #0]
   19612:	1c08      	adds	r0, r1, #0
   19614:	1c11      	adds	r1, r2, #0
   19616:	1c1a      	adds	r2, r3, #0
   19618:	4b1a      	ldr	r3, [pc, #104]	; (19684 <eeprom_emulator_write_page+0x110>)
   1961a:	4798      	blx	r3
				_eeprom_instance.page_map[logical_page] / NVMCTRL_ROW_PAGES,
				logical_page,
				data);

		/* New data is now written and the cache is updated, exit */
		return STATUS_OK;
   1961c:	2300      	movs	r3, #0
   1961e:	e027      	b.n	19670 <eeprom_emulator_write_page+0xfc>
	}

	/* Update the page cache header section with the new page header */
	_eeprom_instance.cache.header.logical_page = logical_page;
   19620:	4a15      	ldr	r2, [pc, #84]	; (19678 <eeprom_emulator_write_page+0x104>)
   19622:	1df9      	adds	r1, r7, #7
   19624:	2388      	movs	r3, #136	; 0x88
   19626:	7809      	ldrb	r1, [r1, #0]
   19628:	54d1      	strb	r1, [r2, r3]

	/* Update the page cache contents with the new data */
	memcpy(&_eeprom_instance.cache.data,
   1962a:	4913      	ldr	r1, [pc, #76]	; (19678 <eeprom_emulator_write_page+0x104>)
   1962c:	228c      	movs	r2, #140	; 0x8c
   1962e:	683b      	ldr	r3, [r7, #0]
   19630:	1889      	adds	r1, r1, r2
   19632:	1c1a      	adds	r2, r3, #0
   19634:	233c      	movs	r3, #60	; 0x3c
   19636:	1c08      	adds	r0, r1, #0
   19638:	1c11      	adds	r1, r2, #0
   1963a:	1c1a      	adds	r2, r3, #0
   1963c:	4b12      	ldr	r3, [pc, #72]	; (19688 <eeprom_emulator_write_page+0x114>)
   1963e:	4798      	blx	r3
			data,
			EEPROM_PAGE_SIZE);

	/* Fill the physical NVM buffer with the new data so that it can be quickly
	 * committed in the future if needed due to a low power condition */
	_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   19640:	1c3b      	adds	r3, r7, #0
   19642:	330e      	adds	r3, #14
   19644:	781b      	ldrb	r3, [r3, #0]
   19646:	1c1a      	adds	r2, r3, #0
   19648:	4b10      	ldr	r3, [pc, #64]	; (1968c <eeprom_emulator_write_page+0x118>)
   1964a:	1c10      	adds	r0, r2, #0
   1964c:	1c19      	adds	r1, r3, #0
   1964e:	4b10      	ldr	r3, [pc, #64]	; (19690 <eeprom_emulator_write_page+0x11c>)
   19650:	4798      	blx	r3

	/* Update the cache parameters and mark the cache as active */
	_eeprom_instance.page_map[logical_page] = new_page;
   19652:	1dfb      	adds	r3, r7, #7
   19654:	7819      	ldrb	r1, [r3, #0]
   19656:	1c3b      	adds	r3, r7, #0
   19658:	330e      	adds	r3, #14
   1965a:	781a      	ldrb	r2, [r3, #0]
   1965c:	4806      	ldr	r0, [pc, #24]	; (19678 <eeprom_emulator_write_page+0x104>)
   1965e:	2308      	movs	r3, #8
   19660:	1841      	adds	r1, r0, r1
   19662:	18cb      	adds	r3, r1, r3
   19664:	70da      	strb	r2, [r3, #3]
	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active           = true;
   19666:	4a04      	ldr	r2, [pc, #16]	; (19678 <eeprom_emulator_write_page+0x104>)
   19668:	23c8      	movs	r3, #200	; 0xc8
   1966a:	2101      	movs	r1, #1
   1966c:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
   1966e:	2300      	movs	r3, #0
}
   19670:	1c18      	adds	r0, r3, #0
   19672:	46bd      	mov	sp, r7
   19674:	b005      	add	sp, #20
   19676:	bd90      	pop	{r4, r7, pc}
   19678:	2000045c 	.word	0x2000045c
   1967c:	0001973d 	.word	0x0001973d
   19680:	00019005 	.word	0x00019005
   19684:	0001909d 	.word	0x0001909d
   19688:	0001b375 	.word	0x0001b375
   1968c:	200004e4 	.word	0x200004e4
   19690:	00018ce9 	.word	0x00018ce9

00019694 <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
   19694:	b580      	push	{r7, lr}
   19696:	b092      	sub	sp, #72	; 0x48
   19698:	af00      	add	r7, sp, #0
   1969a:	1c02      	adds	r2, r0, #0
   1969c:	6039      	str	r1, [r7, #0]
   1969e:	1dfb      	adds	r3, r7, #7
   196a0:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   196a2:	4b23      	ldr	r3, [pc, #140]	; (19730 <eeprom_emulator_read_page+0x9c>)
   196a4:	781b      	ldrb	r3, [r3, #0]
   196a6:	2201      	movs	r2, #1
   196a8:	4053      	eors	r3, r2
   196aa:	b2db      	uxtb	r3, r3
   196ac:	2b00      	cmp	r3, #0
   196ae:	d001      	beq.n	196b4 <eeprom_emulator_read_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   196b0:	231f      	movs	r3, #31
   196b2:	e038      	b.n	19726 <eeprom_emulator_read_page+0x92>
	}

	/* Make sure the read address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   196b4:	4b1e      	ldr	r3, [pc, #120]	; (19730 <eeprom_emulator_read_page+0x9c>)
   196b6:	7a9b      	ldrb	r3, [r3, #10]
   196b8:	1dfa      	adds	r2, r7, #7
   196ba:	7812      	ldrb	r2, [r2, #0]
   196bc:	429a      	cmp	r2, r3
   196be:	d301      	bcc.n	196c4 <eeprom_emulator_read_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   196c0:	2318      	movs	r3, #24
   196c2:	e030      	b.n	19726 <eeprom_emulator_read_page+0x92>
	}

	/* Check if the page to read is currently cached (and potentially out of
	 * sync/newer than the physical memory) */
	if ((_eeprom_instance.cache_active == true) &&
   196c4:	4a1a      	ldr	r2, [pc, #104]	; (19730 <eeprom_emulator_read_page+0x9c>)
   196c6:	23c8      	movs	r3, #200	; 0xc8
   196c8:	5cd3      	ldrb	r3, [r2, r3]
   196ca:	2b00      	cmp	r3, #0
   196cc:	d011      	beq.n	196f2 <eeprom_emulator_read_page+0x5e>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
   196ce:	4a18      	ldr	r2, [pc, #96]	; (19730 <eeprom_emulator_read_page+0x9c>)
   196d0:	2388      	movs	r3, #136	; 0x88
   196d2:	5cd3      	ldrb	r3, [r2, r3]
		return STATUS_ERR_BAD_ADDRESS;
	}

	/* Check if the page to read is currently cached (and potentially out of
	 * sync/newer than the physical memory) */
	if ((_eeprom_instance.cache_active == true) &&
   196d4:	1dfa      	adds	r2, r7, #7
   196d6:	7812      	ldrb	r2, [r2, #0]
   196d8:	429a      	cmp	r2, r3
   196da:	d10a      	bne.n	196f2 <eeprom_emulator_read_page+0x5e>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
		/* Copy the potentially newer cached data into the user buffer */
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
   196dc:	6839      	ldr	r1, [r7, #0]
   196de:	4a14      	ldr	r2, [pc, #80]	; (19730 <eeprom_emulator_read_page+0x9c>)
   196e0:	238c      	movs	r3, #140	; 0x8c
   196e2:	18d2      	adds	r2, r2, r3
   196e4:	233c      	movs	r3, #60	; 0x3c
   196e6:	1c08      	adds	r0, r1, #0
   196e8:	1c11      	adds	r1, r2, #0
   196ea:	1c1a      	adds	r2, r3, #0
   196ec:	4b11      	ldr	r3, [pc, #68]	; (19734 <eeprom_emulator_read_page+0xa0>)
   196ee:	4798      	blx	r3
   196f0:	e018      	b.n	19724 <eeprom_emulator_read_page+0x90>
	} else {
		struct _eeprom_page temp;

		/* Copy the data from non-volatile memory into the temporary buffer */
		_eeprom_emulator_nvm_read_page(
				_eeprom_instance.page_map[logical_page], &temp);
   196f2:	1dfb      	adds	r3, r7, #7
   196f4:	781a      	ldrb	r2, [r3, #0]
   196f6:	490e      	ldr	r1, [pc, #56]	; (19730 <eeprom_emulator_read_page+0x9c>)
   196f8:	2308      	movs	r3, #8
   196fa:	188a      	adds	r2, r1, r2
   196fc:	18d3      	adds	r3, r2, r3
   196fe:	78db      	ldrb	r3, [r3, #3]
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
	} else {
		struct _eeprom_page temp;

		/* Copy the data from non-volatile memory into the temporary buffer */
		_eeprom_emulator_nvm_read_page(
   19700:	1c1a      	adds	r2, r3, #0
   19702:	1c3b      	adds	r3, r7, #0
   19704:	3308      	adds	r3, #8
   19706:	1c10      	adds	r0, r2, #0
   19708:	1c19      	adds	r1, r3, #0
   1970a:	4b0b      	ldr	r3, [pc, #44]	; (19738 <eeprom_emulator_read_page+0xa4>)
   1970c:	4798      	blx	r3
				_eeprom_instance.page_map[logical_page], &temp);

		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
   1970e:	683a      	ldr	r2, [r7, #0]
   19710:	1c3b      	adds	r3, r7, #0
   19712:	330c      	adds	r3, #12
   19714:	1c11      	adds	r1, r2, #0
   19716:	1c1a      	adds	r2, r3, #0
   19718:	233c      	movs	r3, #60	; 0x3c
   1971a:	1c08      	adds	r0, r1, #0
   1971c:	1c11      	adds	r1, r2, #0
   1971e:	1c1a      	adds	r2, r3, #0
   19720:	4b04      	ldr	r3, [pc, #16]	; (19734 <eeprom_emulator_read_page+0xa0>)
   19722:	4798      	blx	r3
	}

	return STATUS_OK;
   19724:	2300      	movs	r3, #0
}
   19726:	1c18      	adds	r0, r3, #0
   19728:	46bd      	mov	sp, r7
   1972a:	b012      	add	sp, #72	; 0x48
   1972c:	bd80      	pop	{r7, pc}
   1972e:	46c0      	nop			; (mov r8, r8)
   19730:	2000045c 	.word	0x2000045c
   19734:	0001b375 	.word	0x0001b375
   19738:	00018d85 	.word	0x00018d85

0001973c <eeprom_emulator_commit_page_buffer>:
 *       data loss.
 *
 * \return Status code indicating the status of the operation.
 */
enum status_code eeprom_emulator_commit_page_buffer(void)
{
   1973c:	b580      	push	{r7, lr}
   1973e:	b082      	sub	sp, #8
   19740:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   19742:	1dfb      	adds	r3, r7, #7
   19744:	2200      	movs	r2, #0
   19746:	701a      	strb	r2, [r3, #0]

	/* If cache is inactive, no need to commit anything to physical memory */
	if (_eeprom_instance.cache_active == false) {
   19748:	4a11      	ldr	r2, [pc, #68]	; (19790 <eeprom_emulator_commit_page_buffer+0x54>)
   1974a:	23c8      	movs	r3, #200	; 0xc8
   1974c:	5cd3      	ldrb	r3, [r2, r3]
   1974e:	2201      	movs	r2, #1
   19750:	4053      	eors	r3, r2
   19752:	b2db      	uxtb	r3, r3
   19754:	2b00      	cmp	r3, #0
   19756:	d001      	beq.n	1975c <eeprom_emulator_commit_page_buffer+0x20>
		return STATUS_OK;
   19758:	2300      	movs	r3, #0
   1975a:	e014      	b.n	19786 <eeprom_emulator_commit_page_buffer+0x4a>
	}

	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;
   1975c:	1dbb      	adds	r3, r7, #6
   1975e:	490c      	ldr	r1, [pc, #48]	; (19790 <eeprom_emulator_commit_page_buffer+0x54>)
   19760:	2288      	movs	r2, #136	; 0x88
   19762:	5c8a      	ldrb	r2, [r1, r2]
   19764:	701a      	strb	r2, [r3, #0]

	/* Perform the page write to commit the NVM page buffer to FLASH */
	_eeprom_emulator_nvm_commit_cache(
			_eeprom_instance.page_map[cached_logical_page]);
   19766:	1dbb      	adds	r3, r7, #6
   19768:	781a      	ldrb	r2, [r3, #0]
   1976a:	4909      	ldr	r1, [pc, #36]	; (19790 <eeprom_emulator_commit_page_buffer+0x54>)
   1976c:	2308      	movs	r3, #8
   1976e:	188a      	adds	r2, r1, r2
   19770:	18d3      	adds	r3, r2, r3
   19772:	78db      	ldrb	r3, [r3, #3]
	}

	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;

	/* Perform the page write to commit the NVM page buffer to FLASH */
	_eeprom_emulator_nvm_commit_cache(
   19774:	1c18      	adds	r0, r3, #0
   19776:	4b07      	ldr	r3, [pc, #28]	; (19794 <eeprom_emulator_commit_page_buffer+0x58>)
   19778:	4798      	blx	r3
			_eeprom_instance.page_map[cached_logical_page]);

	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active = false;
   1977a:	4a05      	ldr	r2, [pc, #20]	; (19790 <eeprom_emulator_commit_page_buffer+0x54>)
   1977c:	23c8      	movs	r3, #200	; 0xc8
   1977e:	2100      	movs	r1, #0
   19780:	54d1      	strb	r1, [r2, r3]

	return error_code;
   19782:	1dfb      	adds	r3, r7, #7
   19784:	781b      	ldrb	r3, [r3, #0]
}
   19786:	1c18      	adds	r0, r3, #0
   19788:	46bd      	mov	sp, r7
   1978a:	b002      	add	sp, #8
   1978c:	bd80      	pop	{r7, pc}
   1978e:	46c0      	nop			; (mov r8, r8)
   19790:	2000045c 	.word	0x2000045c
   19794:	00018d39 	.word	0x00018d39

00019798 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   19798:	b580      	push	{r7, lr}
   1979a:	b082      	sub	sp, #8
   1979c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   1979e:	4b16      	ldr	r3, [pc, #88]	; (197f8 <Reset_Handler+0x60>)
   197a0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   197a2:	4b16      	ldr	r3, [pc, #88]	; (197fc <Reset_Handler+0x64>)
   197a4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   197a6:	687a      	ldr	r2, [r7, #4]
   197a8:	683b      	ldr	r3, [r7, #0]
   197aa:	429a      	cmp	r2, r3
   197ac:	d00c      	beq.n	197c8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   197ae:	e007      	b.n	197c0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   197b0:	683b      	ldr	r3, [r7, #0]
   197b2:	1d1a      	adds	r2, r3, #4
   197b4:	603a      	str	r2, [r7, #0]
   197b6:	687a      	ldr	r2, [r7, #4]
   197b8:	1d11      	adds	r1, r2, #4
   197ba:	6079      	str	r1, [r7, #4]
   197bc:	6812      	ldr	r2, [r2, #0]
   197be:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
   197c0:	683a      	ldr	r2, [r7, #0]
   197c2:	4b0f      	ldr	r3, [pc, #60]	; (19800 <Reset_Handler+0x68>)
   197c4:	429a      	cmp	r2, r3
   197c6:	d3f3      	bcc.n	197b0 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   197c8:	4b0e      	ldr	r3, [pc, #56]	; (19804 <Reset_Handler+0x6c>)
   197ca:	603b      	str	r3, [r7, #0]
   197cc:	e004      	b.n	197d8 <Reset_Handler+0x40>
                *pDest++ = 0;
   197ce:	683b      	ldr	r3, [r7, #0]
   197d0:	1d1a      	adds	r2, r3, #4
   197d2:	603a      	str	r2, [r7, #0]
   197d4:	2200      	movs	r2, #0
   197d6:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   197d8:	683a      	ldr	r2, [r7, #0]
   197da:	4b0b      	ldr	r3, [pc, #44]	; (19808 <Reset_Handler+0x70>)
   197dc:	429a      	cmp	r2, r3
   197de:	d3f6      	bcc.n	197ce <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   197e0:	4b0a      	ldr	r3, [pc, #40]	; (1980c <Reset_Handler+0x74>)
   197e2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   197e4:	4b0a      	ldr	r3, [pc, #40]	; (19810 <Reset_Handler+0x78>)
   197e6:	687a      	ldr	r2, [r7, #4]
   197e8:	217f      	movs	r1, #127	; 0x7f
   197ea:	438a      	bics	r2, r1
   197ec:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
   197ee:	4b09      	ldr	r3, [pc, #36]	; (19814 <Reset_Handler+0x7c>)
   197f0:	4798      	blx	r3

        /* Branch to main function */
        main();
   197f2:	4b09      	ldr	r3, [pc, #36]	; (19818 <Reset_Handler+0x80>)
   197f4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   197f6:	e7fe      	b.n	197f6 <Reset_Handler+0x5e>
   197f8:	000273c8 	.word	0x000273c8
   197fc:	20000000 	.word	0x20000000
   19800:	20000284 	.word	0x20000284
   19804:	20000284 	.word	0x20000284
   19808:	20001248 	.word	0x20001248
   1980c:	00000000 	.word	0x00000000
   19810:	e000ed00 	.word	0xe000ed00
   19814:	0001b305 	.word	0x0001b305
   19818:	0000fda5 	.word	0x0000fda5

0001981c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   1981c:	b580      	push	{r7, lr}
   1981e:	af00      	add	r7, sp, #0
        while (1) {
        }
   19820:	e7fe      	b.n	19820 <Dummy_Handler+0x4>
   19822:	46c0      	nop			; (mov r8, r8)

00019824 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   19824:	b580      	push	{r7, lr}
   19826:	b086      	sub	sp, #24
   19828:	af00      	add	r7, sp, #0
   1982a:	60f8      	str	r0, [r7, #12]
   1982c:	60b9      	str	r1, [r7, #8]
   1982e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   19830:	2300      	movs	r3, #0
   19832:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   19834:	68fb      	ldr	r3, [r7, #12]
   19836:	2b00      	cmp	r3, #0
   19838:	d002      	beq.n	19840 <_read+0x1c>
		return -1;
   1983a:	2301      	movs	r3, #1
   1983c:	425b      	negs	r3, r3
   1983e:	e015      	b.n	1986c <_read+0x48>
	}

	for (; len > 0; --len) {
   19840:	e010      	b.n	19864 <_read+0x40>
		ptr_get(stdio_base, ptr);
   19842:	4b0c      	ldr	r3, [pc, #48]	; (19874 <_read+0x50>)
   19844:	681a      	ldr	r2, [r3, #0]
   19846:	4b0c      	ldr	r3, [pc, #48]	; (19878 <_read+0x54>)
   19848:	6819      	ldr	r1, [r3, #0]
   1984a:	68bb      	ldr	r3, [r7, #8]
   1984c:	1c08      	adds	r0, r1, #0
   1984e:	1c19      	adds	r1, r3, #0
   19850:	4790      	blx	r2
		ptr++;
   19852:	68bb      	ldr	r3, [r7, #8]
   19854:	3301      	adds	r3, #1
   19856:	60bb      	str	r3, [r7, #8]
		nChars++;
   19858:	697b      	ldr	r3, [r7, #20]
   1985a:	3301      	adds	r3, #1
   1985c:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   1985e:	687b      	ldr	r3, [r7, #4]
   19860:	3b01      	subs	r3, #1
   19862:	607b      	str	r3, [r7, #4]
   19864:	687b      	ldr	r3, [r7, #4]
   19866:	2b00      	cmp	r3, #0
   19868:	dceb      	bgt.n	19842 <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   1986a:	697b      	ldr	r3, [r7, #20]
}
   1986c:	1c18      	adds	r0, r3, #0
   1986e:	46bd      	mov	sp, r7
   19870:	b006      	add	sp, #24
   19872:	bd80      	pop	{r7, pc}
   19874:	20001238 	.word	0x20001238
   19878:	20001240 	.word	0x20001240

0001987c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   1987c:	b580      	push	{r7, lr}
   1987e:	b086      	sub	sp, #24
   19880:	af00      	add	r7, sp, #0
   19882:	60f8      	str	r0, [r7, #12]
   19884:	60b9      	str	r1, [r7, #8]
   19886:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   19888:	2300      	movs	r3, #0
   1988a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   1988c:	68fb      	ldr	r3, [r7, #12]
   1988e:	2b01      	cmp	r3, #1
   19890:	d008      	beq.n	198a4 <_write+0x28>
   19892:	68fb      	ldr	r3, [r7, #12]
   19894:	2b02      	cmp	r3, #2
   19896:	d005      	beq.n	198a4 <_write+0x28>
   19898:	68fb      	ldr	r3, [r7, #12]
   1989a:	2b03      	cmp	r3, #3
   1989c:	d002      	beq.n	198a4 <_write+0x28>
		return -1;
   1989e:	2301      	movs	r3, #1
   198a0:	425b      	negs	r3, r3
   198a2:	e01b      	b.n	198dc <_write+0x60>
	}

	for (; len != 0; --len) {
   198a4:	e016      	b.n	198d4 <_write+0x58>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   198a6:	4b0f      	ldr	r3, [pc, #60]	; (198e4 <_write+0x68>)
   198a8:	681a      	ldr	r2, [r3, #0]
   198aa:	4b0f      	ldr	r3, [pc, #60]	; (198e8 <_write+0x6c>)
   198ac:	6819      	ldr	r1, [r3, #0]
   198ae:	68bb      	ldr	r3, [r7, #8]
   198b0:	1c58      	adds	r0, r3, #1
   198b2:	60b8      	str	r0, [r7, #8]
   198b4:	781b      	ldrb	r3, [r3, #0]
   198b6:	1c08      	adds	r0, r1, #0
   198b8:	1c19      	adds	r1, r3, #0
   198ba:	4790      	blx	r2
   198bc:	1c03      	adds	r3, r0, #0
   198be:	2b00      	cmp	r3, #0
   198c0:	da02      	bge.n	198c8 <_write+0x4c>
			return -1;
   198c2:	2301      	movs	r3, #1
   198c4:	425b      	negs	r3, r3
   198c6:	e009      	b.n	198dc <_write+0x60>
		}
		++nChars;
   198c8:	697b      	ldr	r3, [r7, #20]
   198ca:	3301      	adds	r3, #1
   198cc:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   198ce:	687b      	ldr	r3, [r7, #4]
   198d0:	3b01      	subs	r3, #1
   198d2:	607b      	str	r3, [r7, #4]
   198d4:	687b      	ldr	r3, [r7, #4]
   198d6:	2b00      	cmp	r3, #0
   198d8:	d1e5      	bne.n	198a6 <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   198da:	697b      	ldr	r3, [r7, #20]
}
   198dc:	1c18      	adds	r0, r3, #0
   198de:	46bd      	mov	sp, r7
   198e0:	b006      	add	sp, #24
   198e2:	bd80      	pop	{r7, pc}
   198e4:	2000123c 	.word	0x2000123c
   198e8:	20001240 	.word	0x20001240

000198ec <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   198ec:	b580      	push	{r7, lr}
   198ee:	b084      	sub	sp, #16
   198f0:	af00      	add	r7, sp, #0
   198f2:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   198f4:	4b0a      	ldr	r3, [pc, #40]	; (19920 <_sbrk+0x34>)
   198f6:	681b      	ldr	r3, [r3, #0]
   198f8:	2b00      	cmp	r3, #0
   198fa:	d102      	bne.n	19902 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   198fc:	4b08      	ldr	r3, [pc, #32]	; (19920 <_sbrk+0x34>)
   198fe:	4a09      	ldr	r2, [pc, #36]	; (19924 <_sbrk+0x38>)
   19900:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   19902:	4b07      	ldr	r3, [pc, #28]	; (19920 <_sbrk+0x34>)
   19904:	681b      	ldr	r3, [r3, #0]
   19906:	60fb      	str	r3, [r7, #12]

	heap += incr;
   19908:	4b05      	ldr	r3, [pc, #20]	; (19920 <_sbrk+0x34>)
   1990a:	681a      	ldr	r2, [r3, #0]
   1990c:	687b      	ldr	r3, [r7, #4]
   1990e:	18d2      	adds	r2, r2, r3
   19910:	4b03      	ldr	r3, [pc, #12]	; (19920 <_sbrk+0x34>)
   19912:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   19914:	68fb      	ldr	r3, [r7, #12]
}
   19916:	1c18      	adds	r0, r3, #0
   19918:	46bd      	mov	sp, r7
   1991a:	b004      	add	sp, #16
   1991c:	bd80      	pop	{r7, pc}
   1991e:	46c0      	nop			; (mov r8, r8)
   19920:	20000528 	.word	0x20000528
   19924:	20003248 	.word	0x20003248

00019928 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   19928:	b580      	push	{r7, lr}
   1992a:	b082      	sub	sp, #8
   1992c:	af00      	add	r7, sp, #0
   1992e:	6078      	str	r0, [r7, #4]
	return -1;
   19930:	2301      	movs	r3, #1
   19932:	425b      	negs	r3, r3
}
   19934:	1c18      	adds	r0, r3, #0
   19936:	46bd      	mov	sp, r7
   19938:	b002      	add	sp, #8
   1993a:	bd80      	pop	{r7, pc}

0001993c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   1993c:	b580      	push	{r7, lr}
   1993e:	b082      	sub	sp, #8
   19940:	af00      	add	r7, sp, #0
   19942:	6078      	str	r0, [r7, #4]
   19944:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   19946:	683b      	ldr	r3, [r7, #0]
   19948:	2280      	movs	r2, #128	; 0x80
   1994a:	0192      	lsls	r2, r2, #6
   1994c:	605a      	str	r2, [r3, #4]

	return 0;
   1994e:	2300      	movs	r3, #0
}
   19950:	1c18      	adds	r0, r3, #0
   19952:	46bd      	mov	sp, r7
   19954:	b002      	add	sp, #8
   19956:	bd80      	pop	{r7, pc}

00019958 <_isatty>:

extern int _isatty(int file)
{
   19958:	b580      	push	{r7, lr}
   1995a:	b082      	sub	sp, #8
   1995c:	af00      	add	r7, sp, #0
   1995e:	6078      	str	r0, [r7, #4]
	return 1;
   19960:	2301      	movs	r3, #1
}
   19962:	1c18      	adds	r0, r3, #0
   19964:	46bd      	mov	sp, r7
   19966:	b002      	add	sp, #8
   19968:	bd80      	pop	{r7, pc}
   1996a:	46c0      	nop			; (mov r8, r8)

0001996c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   1996c:	b580      	push	{r7, lr}
   1996e:	b084      	sub	sp, #16
   19970:	af00      	add	r7, sp, #0
   19972:	60f8      	str	r0, [r7, #12]
   19974:	60b9      	str	r1, [r7, #8]
   19976:	607a      	str	r2, [r7, #4]
	return 0;
   19978:	2300      	movs	r3, #0
}
   1997a:	1c18      	adds	r0, r3, #0
   1997c:	46bd      	mov	sp, r7
   1997e:	b004      	add	sp, #16
   19980:	bd80      	pop	{r7, pc}
   19982:	46c0      	nop			; (mov r8, r8)
   19984:	0000      	movs	r0, r0
	...

00019988 <floor>:
   19988:	b5f0      	push	{r4, r5, r6, r7, lr}
   1998a:	b087      	sub	sp, #28
   1998c:	9002      	str	r0, [sp, #8]
   1998e:	9103      	str	r1, [sp, #12]
   19990:	9e02      	ldr	r6, [sp, #8]
   19992:	9c03      	ldr	r4, [sp, #12]
   19994:	9605      	str	r6, [sp, #20]
   19996:	1c35      	adds	r5, r6, #0
   19998:	0067      	lsls	r7, r4, #1
   1999a:	4e45      	ldr	r6, [pc, #276]	; (19ab0 <floor+0x128>)
   1999c:	0d7f      	lsrs	r7, r7, #21
   1999e:	19be      	adds	r6, r7, r6
   199a0:	9701      	str	r7, [sp, #4]
   199a2:	9600      	str	r6, [sp, #0]
   199a4:	2e13      	cmp	r6, #19
   199a6:	dc37      	bgt.n	19a18 <floor+0x90>
   199a8:	2e00      	cmp	r6, #0
   199aa:	da14      	bge.n	199d6 <floor+0x4e>
   199ac:	4b3d      	ldr	r3, [pc, #244]	; (19aa4 <floor+0x11c>)
   199ae:	4a3c      	ldr	r2, [pc, #240]	; (19aa0 <floor+0x118>)
   199b0:	f006 fdac 	bl	2050c <__aeabi_dadd>
   199b4:	4a3c      	ldr	r2, [pc, #240]	; (19aa8 <floor+0x120>)
   199b6:	4b3d      	ldr	r3, [pc, #244]	; (19aac <floor+0x124>)
   199b8:	f005 fe12 	bl	1f5e0 <__aeabi_dcmpgt>
   199bc:	2800      	cmp	r0, #0
   199be:	d067      	beq.n	19a90 <floor+0x108>
   199c0:	2c00      	cmp	r4, #0
   199c2:	da63      	bge.n	19a8c <floor+0x104>
   199c4:	9f03      	ldr	r7, [sp, #12]
   199c6:	9802      	ldr	r0, [sp, #8]
   199c8:	007d      	lsls	r5, r7, #1
   199ca:	086d      	lsrs	r5, r5, #1
   199cc:	4305      	orrs	r5, r0
   199ce:	d05f      	beq.n	19a90 <floor+0x108>
   199d0:	2500      	movs	r5, #0
   199d2:	4c38      	ldr	r4, [pc, #224]	; (19ab4 <floor+0x12c>)
   199d4:	e05c      	b.n	19a90 <floor+0x108>
   199d6:	4f38      	ldr	r7, [pc, #224]	; (19ab8 <floor+0x130>)
   199d8:	9a00      	ldr	r2, [sp, #0]
   199da:	1c3e      	adds	r6, r7, #0
   199dc:	9b03      	ldr	r3, [sp, #12]
   199de:	4116      	asrs	r6, r2
   199e0:	9f02      	ldr	r7, [sp, #8]
   199e2:	4033      	ands	r3, r6
   199e4:	431f      	orrs	r7, r3
   199e6:	1c02      	adds	r2, r0, #0
   199e8:	1c0b      	adds	r3, r1, #0
   199ea:	2f00      	cmp	r7, #0
   199ec:	d052      	beq.n	19a94 <floor+0x10c>
   199ee:	4b2d      	ldr	r3, [pc, #180]	; (19aa4 <floor+0x11c>)
   199f0:	4a2b      	ldr	r2, [pc, #172]	; (19aa0 <floor+0x118>)
   199f2:	f006 fd8b 	bl	2050c <__aeabi_dadd>
   199f6:	4a2c      	ldr	r2, [pc, #176]	; (19aa8 <floor+0x120>)
   199f8:	4b2c      	ldr	r3, [pc, #176]	; (19aac <floor+0x124>)
   199fa:	f005 fdf1 	bl	1f5e0 <__aeabi_dcmpgt>
   199fe:	2800      	cmp	r0, #0
   19a00:	d046      	beq.n	19a90 <floor+0x108>
   19a02:	2c00      	cmp	r4, #0
   19a04:	da05      	bge.n	19a12 <floor+0x8a>
   19a06:	2480      	movs	r4, #128	; 0x80
   19a08:	9f00      	ldr	r7, [sp, #0]
   19a0a:	0364      	lsls	r4, r4, #13
   19a0c:	9803      	ldr	r0, [sp, #12]
   19a0e:	413c      	asrs	r4, r7
   19a10:	1824      	adds	r4, r4, r0
   19a12:	43b4      	bics	r4, r6
   19a14:	2500      	movs	r5, #0
   19a16:	e03b      	b.n	19a90 <floor+0x108>
   19a18:	9e00      	ldr	r6, [sp, #0]
   19a1a:	2e33      	cmp	r6, #51	; 0x33
   19a1c:	dd0b      	ble.n	19a36 <floor+0xae>
   19a1e:	1c0b      	adds	r3, r1, #0
   19a20:	2180      	movs	r1, #128	; 0x80
   19a22:	1c02      	adds	r2, r0, #0
   19a24:	00c9      	lsls	r1, r1, #3
   19a26:	428e      	cmp	r6, r1
   19a28:	d134      	bne.n	19a94 <floor+0x10c>
   19a2a:	1c19      	adds	r1, r3, #0
   19a2c:	f006 fd6e 	bl	2050c <__aeabi_dadd>
   19a30:	1c02      	adds	r2, r0, #0
   19a32:	1c0b      	adds	r3, r1, #0
   19a34:	e02e      	b.n	19a94 <floor+0x10c>
   19a36:	9f01      	ldr	r7, [sp, #4]
   19a38:	4a20      	ldr	r2, [pc, #128]	; (19abc <floor+0x134>)
   19a3a:	18bb      	adds	r3, r7, r2
   19a3c:	2201      	movs	r2, #1
   19a3e:	4252      	negs	r2, r2
   19a40:	40da      	lsrs	r2, r3
   19a42:	9204      	str	r2, [sp, #16]
   19a44:	9e04      	ldr	r6, [sp, #16]
   19a46:	9f02      	ldr	r7, [sp, #8]
   19a48:	1c02      	adds	r2, r0, #0
   19a4a:	1c0b      	adds	r3, r1, #0
   19a4c:	423e      	tst	r6, r7
   19a4e:	d021      	beq.n	19a94 <floor+0x10c>
   19a50:	4b14      	ldr	r3, [pc, #80]	; (19aa4 <floor+0x11c>)
   19a52:	4a13      	ldr	r2, [pc, #76]	; (19aa0 <floor+0x118>)
   19a54:	f006 fd5a 	bl	2050c <__aeabi_dadd>
   19a58:	4a13      	ldr	r2, [pc, #76]	; (19aa8 <floor+0x120>)
   19a5a:	4b14      	ldr	r3, [pc, #80]	; (19aac <floor+0x124>)
   19a5c:	f005 fdc0 	bl	1f5e0 <__aeabi_dcmpgt>
   19a60:	2800      	cmp	r0, #0
   19a62:	d015      	beq.n	19a90 <floor+0x108>
   19a64:	2c00      	cmp	r4, #0
   19a66:	da0e      	bge.n	19a86 <floor+0xfe>
   19a68:	9e00      	ldr	r6, [sp, #0]
   19a6a:	2e14      	cmp	r6, #20
   19a6c:	d009      	beq.n	19a82 <floor+0xfa>
   19a6e:	4d14      	ldr	r5, [pc, #80]	; (19ac0 <floor+0x138>)
   19a70:	9e01      	ldr	r6, [sp, #4]
   19a72:	1baf      	subs	r7, r5, r6
   19a74:	2501      	movs	r5, #1
   19a76:	40bd      	lsls	r5, r7
   19a78:	9f02      	ldr	r7, [sp, #8]
   19a7a:	9e05      	ldr	r6, [sp, #20]
   19a7c:	19ed      	adds	r5, r5, r7
   19a7e:	42b5      	cmp	r5, r6
   19a80:	d201      	bcs.n	19a86 <floor+0xfe>
   19a82:	9c03      	ldr	r4, [sp, #12]
   19a84:	3401      	adds	r4, #1
   19a86:	9f04      	ldr	r7, [sp, #16]
   19a88:	43bd      	bics	r5, r7
   19a8a:	e001      	b.n	19a90 <floor+0x108>
   19a8c:	2500      	movs	r5, #0
   19a8e:	1c2c      	adds	r4, r5, #0
   19a90:	1c23      	adds	r3, r4, #0
   19a92:	1c2a      	adds	r2, r5, #0
   19a94:	1c10      	adds	r0, r2, #0
   19a96:	1c19      	adds	r1, r3, #0
   19a98:	b007      	add	sp, #28
   19a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19a9c:	46c0      	nop			; (mov r8, r8)
   19a9e:	46c0      	nop			; (mov r8, r8)
   19aa0:	8800759c 	.word	0x8800759c
   19aa4:	7e37e43c 	.word	0x7e37e43c
	...
   19ab0:	fffffc01 	.word	0xfffffc01
   19ab4:	bff00000 	.word	0xbff00000
   19ab8:	000fffff 	.word	0x000fffff
   19abc:	fffffbed 	.word	0xfffffbed
   19ac0:	00000433 	.word	0x00000433
   19ac4:	46c0      	nop			; (mov r8, r8)
   19ac6:	46c0      	nop			; (mov r8, r8)

00019ac8 <round>:
   19ac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19aca:	004e      	lsls	r6, r1, #1
   19acc:	4f23      	ldr	r7, [pc, #140]	; (19b5c <round+0x94>)
   19ace:	0d76      	lsrs	r6, r6, #21
   19ad0:	1c02      	adds	r2, r0, #0
   19ad2:	1c0b      	adds	r3, r1, #0
   19ad4:	1c0d      	adds	r5, r1, #0
   19ad6:	1c08      	adds	r0, r1, #0
   19ad8:	19f1      	adds	r1, r6, r7
   19ada:	9201      	str	r2, [sp, #4]
   19adc:	2913      	cmp	r1, #19
   19ade:	dc16      	bgt.n	19b0e <round+0x46>
   19ae0:	2900      	cmp	r1, #0
   19ae2:	da07      	bge.n	19af4 <round+0x2c>
   19ae4:	0fd8      	lsrs	r0, r3, #31
   19ae6:	07c0      	lsls	r0, r0, #31
   19ae8:	2600      	movs	r6, #0
   19aea:	3101      	adds	r1, #1
   19aec:	d12f      	bne.n	19b4e <round+0x86>
   19aee:	4b1c      	ldr	r3, [pc, #112]	; (19b60 <round+0x98>)
   19af0:	4318      	orrs	r0, r3
   19af2:	e02c      	b.n	19b4e <round+0x86>
   19af4:	4e1b      	ldr	r6, [pc, #108]	; (19b64 <round+0x9c>)
   19af6:	410e      	asrs	r6, r1
   19af8:	1c30      	adds	r0, r6, #0
   19afa:	4018      	ands	r0, r3
   19afc:	4310      	orrs	r0, r2
   19afe:	d028      	beq.n	19b52 <round+0x8a>
   19b00:	2080      	movs	r0, #128	; 0x80
   19b02:	0300      	lsls	r0, r0, #12
   19b04:	4108      	asrs	r0, r1
   19b06:	18c0      	adds	r0, r0, r3
   19b08:	43b0      	bics	r0, r6
   19b0a:	2600      	movs	r6, #0
   19b0c:	e01f      	b.n	19b4e <round+0x86>
   19b0e:	2933      	cmp	r1, #51	; 0x33
   19b10:	dd0a      	ble.n	19b28 <round+0x60>
   19b12:	2080      	movs	r0, #128	; 0x80
   19b14:	00c0      	lsls	r0, r0, #3
   19b16:	4281      	cmp	r1, r0
   19b18:	d11b      	bne.n	19b52 <round+0x8a>
   19b1a:	1c10      	adds	r0, r2, #0
   19b1c:	1c19      	adds	r1, r3, #0
   19b1e:	f006 fcf5 	bl	2050c <__aeabi_dadd>
   19b22:	1c02      	adds	r2, r0, #0
   19b24:	1c0b      	adds	r3, r1, #0
   19b26:	e014      	b.n	19b52 <round+0x8a>
   19b28:	4f0f      	ldr	r7, [pc, #60]	; (19b68 <round+0xa0>)
   19b2a:	19f1      	adds	r1, r6, r7
   19b2c:	2701      	movs	r7, #1
   19b2e:	46bc      	mov	ip, r7
   19b30:	427f      	negs	r7, r7
   19b32:	40cf      	lsrs	r7, r1
   19b34:	1c39      	adds	r1, r7, #0
   19b36:	4217      	tst	r7, r2
   19b38:	d00b      	beq.n	19b52 <round+0x8a>
   19b3a:	4b0c      	ldr	r3, [pc, #48]	; (19b6c <round+0xa4>)
   19b3c:	1b9e      	subs	r6, r3, r6
   19b3e:	4663      	mov	r3, ip
   19b40:	40b3      	lsls	r3, r6
   19b42:	189e      	adds	r6, r3, r2
   19b44:	9b01      	ldr	r3, [sp, #4]
   19b46:	429e      	cmp	r6, r3
   19b48:	d200      	bcs.n	19b4c <round+0x84>
   19b4a:	1c68      	adds	r0, r5, #1
   19b4c:	438e      	bics	r6, r1
   19b4e:	1c03      	adds	r3, r0, #0
   19b50:	1c32      	adds	r2, r6, #0
   19b52:	1c10      	adds	r0, r2, #0
   19b54:	1c19      	adds	r1, r3, #0
   19b56:	b003      	add	sp, #12
   19b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19b5a:	46c0      	nop			; (mov r8, r8)
   19b5c:	fffffc01 	.word	0xfffffc01
   19b60:	3ff00000 	.word	0x3ff00000
   19b64:	000fffff 	.word	0x000fffff
   19b68:	fffffbed 	.word	0xfffffbed
   19b6c:	00000432 	.word	0x00000432

00019b70 <log>:
   19b70:	b5f0      	push	{r4, r5, r6, r7, lr}
   19b72:	b08b      	sub	sp, #44	; 0x2c
   19b74:	1c04      	adds	r4, r0, #0
   19b76:	1c0d      	adds	r5, r1, #0
   19b78:	f000 fa4a 	bl	1a010 <__ieee754_log>
   19b7c:	4b38      	ldr	r3, [pc, #224]	; (19c60 <log+0xf0>)
   19b7e:	1c0f      	adds	r7, r1, #0
   19b80:	2100      	movs	r1, #0
   19b82:	5659      	ldrsb	r1, [r3, r1]
   19b84:	1c06      	adds	r6, r0, #0
   19b86:	1c32      	adds	r2, r6, #0
   19b88:	1c3b      	adds	r3, r7, #0
   19b8a:	3101      	adds	r1, #1
   19b8c:	d055      	beq.n	19c3a <log+0xca>
   19b8e:	1c20      	adds	r0, r4, #0
   19b90:	1c29      	adds	r1, r5, #0
   19b92:	f001 fa5f 	bl	1b054 <__fpclassifyd>
   19b96:	1c32      	adds	r2, r6, #0
   19b98:	1c3b      	adds	r3, r7, #0
   19b9a:	2800      	cmp	r0, #0
   19b9c:	d04d      	beq.n	19c3a <log+0xca>
   19b9e:	4b2b      	ldr	r3, [pc, #172]	; (19c4c <log+0xdc>)
   19ba0:	4a29      	ldr	r2, [pc, #164]	; (19c48 <log+0xd8>)
   19ba2:	1c20      	adds	r0, r4, #0
   19ba4:	1c29      	adds	r1, r5, #0
   19ba6:	f005 fd1b 	bl	1f5e0 <__aeabi_dcmpgt>
   19baa:	1c32      	adds	r2, r6, #0
   19bac:	1c3b      	adds	r3, r7, #0
   19bae:	2800      	cmp	r0, #0
   19bb0:	d143      	bne.n	19c3a <log+0xca>
   19bb2:	4b2c      	ldr	r3, [pc, #176]	; (19c64 <log+0xf4>)
   19bb4:	9008      	str	r0, [sp, #32]
   19bb6:	9301      	str	r3, [sp, #4]
   19bb8:	4b29      	ldr	r3, [pc, #164]	; (19c60 <log+0xf0>)
   19bba:	9402      	str	r4, [sp, #8]
   19bbc:	9503      	str	r5, [sp, #12]
   19bbe:	781e      	ldrb	r6, [r3, #0]
   19bc0:	9404      	str	r4, [sp, #16]
   19bc2:	9505      	str	r5, [sp, #20]
   19bc4:	2e00      	cmp	r6, #0
   19bc6:	d102      	bne.n	19bce <log+0x5e>
   19bc8:	4a21      	ldr	r2, [pc, #132]	; (19c50 <log+0xe0>)
   19bca:	4b22      	ldr	r3, [pc, #136]	; (19c54 <log+0xe4>)
   19bcc:	e001      	b.n	19bd2 <log+0x62>
   19bce:	4a22      	ldr	r2, [pc, #136]	; (19c58 <log+0xe8>)
   19bd0:	4b22      	ldr	r3, [pc, #136]	; (19c5c <log+0xec>)
   19bd2:	9206      	str	r2, [sp, #24]
   19bd4:	9307      	str	r3, [sp, #28]
   19bd6:	4b1d      	ldr	r3, [pc, #116]	; (19c4c <log+0xdc>)
   19bd8:	4a1b      	ldr	r2, [pc, #108]	; (19c48 <log+0xd8>)
   19bda:	1c20      	adds	r0, r4, #0
   19bdc:	1c29      	adds	r1, r5, #0
   19bde:	f005 fce5 	bl	1f5ac <__aeabi_dcmpeq>
   19be2:	b276      	sxtb	r6, r6
   19be4:	2800      	cmp	r0, #0
   19be6:	d00d      	beq.n	19c04 <log+0x94>
   19be8:	2302      	movs	r3, #2
   19bea:	9300      	str	r3, [sp, #0]
   19bec:	429e      	cmp	r6, r3
   19bee:	d004      	beq.n	19bfa <log+0x8a>
   19bf0:	4668      	mov	r0, sp
   19bf2:	f001 fa59 	bl	1b0a8 <matherr>
   19bf6:	2800      	cmp	r0, #0
   19bf8:	d116      	bne.n	19c28 <log+0xb8>
   19bfa:	f001 fb7d 	bl	1b2f8 <__errno>
   19bfe:	2322      	movs	r3, #34	; 0x22
   19c00:	6003      	str	r3, [r0, #0]
   19c02:	e011      	b.n	19c28 <log+0xb8>
   19c04:	2301      	movs	r3, #1
   19c06:	9300      	str	r3, [sp, #0]
   19c08:	2e02      	cmp	r6, #2
   19c0a:	d004      	beq.n	19c16 <log+0xa6>
   19c0c:	4668      	mov	r0, sp
   19c0e:	f001 fa4b 	bl	1b0a8 <matherr>
   19c12:	2800      	cmp	r0, #0
   19c14:	d103      	bne.n	19c1e <log+0xae>
   19c16:	f001 fb6f 	bl	1b2f8 <__errno>
   19c1a:	2321      	movs	r3, #33	; 0x21
   19c1c:	6003      	str	r3, [r0, #0]
   19c1e:	4812      	ldr	r0, [pc, #72]	; (19c68 <log+0xf8>)
   19c20:	f001 fa46 	bl	1b0b0 <nan>
   19c24:	9006      	str	r0, [sp, #24]
   19c26:	9107      	str	r1, [sp, #28]
   19c28:	9b08      	ldr	r3, [sp, #32]
   19c2a:	2b00      	cmp	r3, #0
   19c2c:	d003      	beq.n	19c36 <log+0xc6>
   19c2e:	f001 fb63 	bl	1b2f8 <__errno>
   19c32:	9b08      	ldr	r3, [sp, #32]
   19c34:	6003      	str	r3, [r0, #0]
   19c36:	9a06      	ldr	r2, [sp, #24]
   19c38:	9b07      	ldr	r3, [sp, #28]
   19c3a:	1c10      	adds	r0, r2, #0
   19c3c:	1c19      	adds	r1, r3, #0
   19c3e:	b00b      	add	sp, #44	; 0x2c
   19c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19c42:	46c0      	nop			; (mov r8, r8)
   19c44:	46c0      	nop			; (mov r8, r8)
   19c46:	46c0      	nop			; (mov r8, r8)
	...
   19c50:	e0000000 	.word	0xe0000000
   19c54:	c7efffff 	.word	0xc7efffff
   19c58:	00000000 	.word	0x00000000
   19c5c:	fff00000 	.word	0xfff00000
   19c60:	2000019d 	.word	0x2000019d
   19c64:	00026f58 	.word	0x00026f58
   19c68:	00026f5b 	.word	0x00026f5b
   19c6c:	46c0      	nop			; (mov r8, r8)
   19c6e:	46c0      	nop			; (mov r8, r8)

00019c70 <pow>:
   19c70:	b5f0      	push	{r4, r5, r6, r7, lr}
   19c72:	b091      	sub	sp, #68	; 0x44
   19c74:	1c16      	adds	r6, r2, #0
   19c76:	1c1f      	adds	r7, r3, #0
   19c78:	9000      	str	r0, [sp, #0]
   19c7a:	9101      	str	r1, [sp, #4]
   19c7c:	f000 fbe0 	bl	1a440 <__ieee754_pow>
   19c80:	4ab9      	ldr	r2, [pc, #740]	; (19f68 <pow+0x2f8>)
   19c82:	2300      	movs	r3, #0
   19c84:	56d3      	ldrsb	r3, [r2, r3]
   19c86:	1c04      	adds	r4, r0, #0
   19c88:	1c0d      	adds	r5, r1, #0
   19c8a:	9402      	str	r4, [sp, #8]
   19c8c:	9503      	str	r5, [sp, #12]
   19c8e:	3301      	adds	r3, #1
   19c90:	d100      	bne.n	19c94 <pow+0x24>
   19c92:	e1b1      	b.n	19ff8 <pow+0x388>
   19c94:	1c30      	adds	r0, r6, #0
   19c96:	1c39      	adds	r1, r7, #0
   19c98:	f001 f9dc 	bl	1b054 <__fpclassifyd>
   19c9c:	2800      	cmp	r0, #0
   19c9e:	d100      	bne.n	19ca2 <pow+0x32>
   19ca0:	e1aa      	b.n	19ff8 <pow+0x388>
   19ca2:	9800      	ldr	r0, [sp, #0]
   19ca4:	9901      	ldr	r1, [sp, #4]
   19ca6:	f001 f9d5 	bl	1b054 <__fpclassifyd>
   19caa:	9005      	str	r0, [sp, #20]
   19cac:	2800      	cmp	r0, #0
   19cae:	d121      	bne.n	19cf4 <pow+0x84>
   19cb0:	1c30      	adds	r0, r6, #0
   19cb2:	1c39      	adds	r1, r7, #0
   19cb4:	4b9f      	ldr	r3, [pc, #636]	; (19f34 <pow+0x2c4>)
   19cb6:	4a9e      	ldr	r2, [pc, #632]	; (19f30 <pow+0x2c0>)
   19cb8:	f005 fc78 	bl	1f5ac <__aeabi_dcmpeq>
   19cbc:	2800      	cmp	r0, #0
   19cbe:	d100      	bne.n	19cc2 <pow+0x52>
   19cc0:	e19a      	b.n	19ff8 <pow+0x388>
   19cc2:	2301      	movs	r3, #1
   19cc4:	9c05      	ldr	r4, [sp, #20]
   19cc6:	9306      	str	r3, [sp, #24]
   19cc8:	4ba8      	ldr	r3, [pc, #672]	; (19f6c <pow+0x2fc>)
   19cca:	940e      	str	r4, [sp, #56]	; 0x38
   19ccc:	4ca6      	ldr	r4, [pc, #664]	; (19f68 <pow+0x2f8>)
   19cce:	9307      	str	r3, [sp, #28]
   19cd0:	9a00      	ldr	r2, [sp, #0]
   19cd2:	9b01      	ldr	r3, [sp, #4]
   19cd4:	9208      	str	r2, [sp, #32]
   19cd6:	9309      	str	r3, [sp, #36]	; 0x24
   19cd8:	4a97      	ldr	r2, [pc, #604]	; (19f38 <pow+0x2c8>)
   19cda:	4b98      	ldr	r3, [pc, #608]	; (19f3c <pow+0x2cc>)
   19cdc:	920c      	str	r2, [sp, #48]	; 0x30
   19cde:	930d      	str	r3, [sp, #52]	; 0x34
   19ce0:	2300      	movs	r3, #0
   19ce2:	56e3      	ldrsb	r3, [r4, r3]
   19ce4:	960a      	str	r6, [sp, #40]	; 0x28
   19ce6:	970b      	str	r7, [sp, #44]	; 0x2c
   19ce8:	1c5a      	adds	r2, r3, #1
   19cea:	d100      	bne.n	19cee <pow+0x7e>
   19cec:	e176      	b.n	19fdc <pow+0x36c>
   19cee:	2b02      	cmp	r3, #2
   19cf0:	d166      	bne.n	19dc0 <pow+0x150>
   19cf2:	e173      	b.n	19fdc <pow+0x36c>
   19cf4:	9800      	ldr	r0, [sp, #0]
   19cf6:	9901      	ldr	r1, [sp, #4]
   19cf8:	4b8e      	ldr	r3, [pc, #568]	; (19f34 <pow+0x2c4>)
   19cfa:	4a8d      	ldr	r2, [pc, #564]	; (19f30 <pow+0x2c0>)
   19cfc:	f005 fc56 	bl	1f5ac <__aeabi_dcmpeq>
   19d00:	2800      	cmp	r0, #0
   19d02:	d067      	beq.n	19dd4 <pow+0x164>
   19d04:	1c30      	adds	r0, r6, #0
   19d06:	1c39      	adds	r1, r7, #0
   19d08:	4b8a      	ldr	r3, [pc, #552]	; (19f34 <pow+0x2c4>)
   19d0a:	4a89      	ldr	r2, [pc, #548]	; (19f30 <pow+0x2c0>)
   19d0c:	f005 fc4e 	bl	1f5ac <__aeabi_dcmpeq>
   19d10:	1e04      	subs	r4, r0, #0
   19d12:	d02b      	beq.n	19d6c <pow+0xfc>
   19d14:	2301      	movs	r3, #1
   19d16:	9306      	str	r3, [sp, #24]
   19d18:	4b94      	ldr	r3, [pc, #592]	; (19f6c <pow+0x2fc>)
   19d1a:	960a      	str	r6, [sp, #40]	; 0x28
   19d1c:	970b      	str	r7, [sp, #44]	; 0x2c
   19d1e:	9307      	str	r3, [sp, #28]
   19d20:	2300      	movs	r3, #0
   19d22:	930e      	str	r3, [sp, #56]	; 0x38
   19d24:	9b00      	ldr	r3, [sp, #0]
   19d26:	9c01      	ldr	r4, [sp, #4]
   19d28:	9308      	str	r3, [sp, #32]
   19d2a:	9409      	str	r4, [sp, #36]	; 0x24
   19d2c:	4b81      	ldr	r3, [pc, #516]	; (19f34 <pow+0x2c4>)
   19d2e:	4a80      	ldr	r2, [pc, #512]	; (19f30 <pow+0x2c0>)
   19d30:	4c8d      	ldr	r4, [pc, #564]	; (19f68 <pow+0x2f8>)
   19d32:	920c      	str	r2, [sp, #48]	; 0x30
   19d34:	930d      	str	r3, [sp, #52]	; 0x34
   19d36:	2300      	movs	r3, #0
   19d38:	56e3      	ldrsb	r3, [r4, r3]
   19d3a:	2b00      	cmp	r3, #0
   19d3c:	d004      	beq.n	19d48 <pow+0xd8>
   19d3e:	4a7e      	ldr	r2, [pc, #504]	; (19f38 <pow+0x2c8>)
   19d40:	4b7e      	ldr	r3, [pc, #504]	; (19f3c <pow+0x2cc>)
   19d42:	920c      	str	r2, [sp, #48]	; 0x30
   19d44:	930d      	str	r3, [sp, #52]	; 0x34
   19d46:	e008      	b.n	19d5a <pow+0xea>
   19d48:	a806      	add	r0, sp, #24
   19d4a:	f001 f9ad 	bl	1b0a8 <matherr>
   19d4e:	2800      	cmp	r0, #0
   19d50:	d103      	bne.n	19d5a <pow+0xea>
   19d52:	f001 fad1 	bl	1b2f8 <__errno>
   19d56:	2321      	movs	r3, #33	; 0x21
   19d58:	6003      	str	r3, [r0, #0]
   19d5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19d5c:	2a00      	cmp	r2, #0
   19d5e:	d100      	bne.n	19d62 <pow+0xf2>
   19d60:	e143      	b.n	19fea <pow+0x37a>
   19d62:	f001 fac9 	bl	1b2f8 <__errno>
   19d66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19d68:	6003      	str	r3, [r0, #0]
   19d6a:	e13e      	b.n	19fea <pow+0x37a>
   19d6c:	1c30      	adds	r0, r6, #0
   19d6e:	1c39      	adds	r1, r7, #0
   19d70:	f001 f968 	bl	1b044 <finite>
   19d74:	2800      	cmp	r0, #0
   19d76:	d100      	bne.n	19d7a <pow+0x10a>
   19d78:	e13e      	b.n	19ff8 <pow+0x388>
   19d7a:	1c30      	adds	r0, r6, #0
   19d7c:	1c39      	adds	r1, r7, #0
   19d7e:	4b6d      	ldr	r3, [pc, #436]	; (19f34 <pow+0x2c4>)
   19d80:	4a6b      	ldr	r2, [pc, #428]	; (19f30 <pow+0x2c0>)
   19d82:	f005 fc19 	bl	1f5b8 <__aeabi_dcmplt>
   19d86:	2800      	cmp	r0, #0
   19d88:	d100      	bne.n	19d8c <pow+0x11c>
   19d8a:	e135      	b.n	19ff8 <pow+0x388>
   19d8c:	2301      	movs	r3, #1
   19d8e:	9306      	str	r3, [sp, #24]
   19d90:	4b76      	ldr	r3, [pc, #472]	; (19f6c <pow+0x2fc>)
   19d92:	940e      	str	r4, [sp, #56]	; 0x38
   19d94:	9307      	str	r3, [sp, #28]
   19d96:	9b00      	ldr	r3, [sp, #0]
   19d98:	9c01      	ldr	r4, [sp, #4]
   19d9a:	9308      	str	r3, [sp, #32]
   19d9c:	9409      	str	r4, [sp, #36]	; 0x24
   19d9e:	4c72      	ldr	r4, [pc, #456]	; (19f68 <pow+0x2f8>)
   19da0:	960a      	str	r6, [sp, #40]	; 0x28
   19da2:	970b      	str	r7, [sp, #44]	; 0x2c
   19da4:	7821      	ldrb	r1, [r4, #0]
   19da6:	2900      	cmp	r1, #0
   19da8:	d104      	bne.n	19db4 <pow+0x144>
   19daa:	4b62      	ldr	r3, [pc, #392]	; (19f34 <pow+0x2c4>)
   19dac:	4a60      	ldr	r2, [pc, #384]	; (19f30 <pow+0x2c0>)
   19dae:	920c      	str	r2, [sp, #48]	; 0x30
   19db0:	930d      	str	r3, [sp, #52]	; 0x34
   19db2:	e005      	b.n	19dc0 <pow+0x150>
   19db4:	4a62      	ldr	r2, [pc, #392]	; (19f40 <pow+0x2d0>)
   19db6:	4b63      	ldr	r3, [pc, #396]	; (19f44 <pow+0x2d4>)
   19db8:	920c      	str	r2, [sp, #48]	; 0x30
   19dba:	930d      	str	r3, [sp, #52]	; 0x34
   19dbc:	2902      	cmp	r1, #2
   19dbe:	d005      	beq.n	19dcc <pow+0x15c>
   19dc0:	a806      	add	r0, sp, #24
   19dc2:	f001 f971 	bl	1b0a8 <matherr>
   19dc6:	2800      	cmp	r0, #0
   19dc8:	d000      	beq.n	19dcc <pow+0x15c>
   19dca:	e107      	b.n	19fdc <pow+0x36c>
   19dcc:	f001 fa94 	bl	1b2f8 <__errno>
   19dd0:	2321      	movs	r3, #33	; 0x21
   19dd2:	e102      	b.n	19fda <pow+0x36a>
   19dd4:	1c20      	adds	r0, r4, #0
   19dd6:	1c29      	adds	r1, r5, #0
   19dd8:	f001 f934 	bl	1b044 <finite>
   19ddc:	9002      	str	r0, [sp, #8]
   19dde:	2800      	cmp	r0, #0
   19de0:	d000      	beq.n	19de4 <pow+0x174>
   19de2:	e0c5      	b.n	19f70 <pow+0x300>
   19de4:	9800      	ldr	r0, [sp, #0]
   19de6:	9901      	ldr	r1, [sp, #4]
   19de8:	f001 f92c 	bl	1b044 <finite>
   19dec:	2800      	cmp	r0, #0
   19dee:	d100      	bne.n	19df2 <pow+0x182>
   19df0:	e0be      	b.n	19f70 <pow+0x300>
   19df2:	1c30      	adds	r0, r6, #0
   19df4:	1c39      	adds	r1, r7, #0
   19df6:	f001 f925 	bl	1b044 <finite>
   19dfa:	2800      	cmp	r0, #0
   19dfc:	d100      	bne.n	19e00 <pow+0x190>
   19dfe:	e0b7      	b.n	19f70 <pow+0x300>
   19e00:	1c20      	adds	r0, r4, #0
   19e02:	1c29      	adds	r1, r5, #0
   19e04:	f001 f926 	bl	1b054 <__fpclassifyd>
   19e08:	ac06      	add	r4, sp, #24
   19e0a:	4b58      	ldr	r3, [pc, #352]	; (19f6c <pow+0x2fc>)
   19e0c:	2800      	cmp	r0, #0
   19e0e:	d125      	bne.n	19e5c <pow+0x1ec>
   19e10:	2201      	movs	r2, #1
   19e12:	9206      	str	r2, [sp, #24]
   19e14:	6063      	str	r3, [r4, #4]
   19e16:	9a00      	ldr	r2, [sp, #0]
   19e18:	9b01      	ldr	r3, [sp, #4]
   19e1a:	60a2      	str	r2, [r4, #8]
   19e1c:	60e3      	str	r3, [r4, #12]
   19e1e:	4b52      	ldr	r3, [pc, #328]	; (19f68 <pow+0x2f8>)
   19e20:	6220      	str	r0, [r4, #32]
   19e22:	781d      	ldrb	r5, [r3, #0]
   19e24:	6126      	str	r6, [r4, #16]
   19e26:	6167      	str	r7, [r4, #20]
   19e28:	2d00      	cmp	r5, #0
   19e2a:	d104      	bne.n	19e36 <pow+0x1c6>
   19e2c:	4b41      	ldr	r3, [pc, #260]	; (19f34 <pow+0x2c4>)
   19e2e:	4a40      	ldr	r2, [pc, #256]	; (19f30 <pow+0x2c0>)
   19e30:	61a2      	str	r2, [r4, #24]
   19e32:	61e3      	str	r3, [r4, #28]
   19e34:	e009      	b.n	19e4a <pow+0x1da>
   19e36:	493f      	ldr	r1, [pc, #252]	; (19f34 <pow+0x2c4>)
   19e38:	483d      	ldr	r0, [pc, #244]	; (19f30 <pow+0x2c0>)
   19e3a:	1c02      	adds	r2, r0, #0
   19e3c:	1c0b      	adds	r3, r1, #0
   19e3e:	f006 fe89 	bl	20b54 <__aeabi_ddiv>
   19e42:	61a0      	str	r0, [r4, #24]
   19e44:	61e1      	str	r1, [r4, #28]
   19e46:	2d02      	cmp	r5, #2
   19e48:	d004      	beq.n	19e54 <pow+0x1e4>
   19e4a:	1c20      	adds	r0, r4, #0
   19e4c:	f001 f92c 	bl	1b0a8 <matherr>
   19e50:	2800      	cmp	r0, #0
   19e52:	d160      	bne.n	19f16 <pow+0x2a6>
   19e54:	f001 fa50 	bl	1b2f8 <__errno>
   19e58:	2321      	movs	r3, #33	; 0x21
   19e5a:	e05b      	b.n	19f14 <pow+0x2a4>
   19e5c:	6063      	str	r3, [r4, #4]
   19e5e:	9b02      	ldr	r3, [sp, #8]
   19e60:	2203      	movs	r2, #3
   19e62:	9206      	str	r2, [sp, #24]
   19e64:	6223      	str	r3, [r4, #32]
   19e66:	9a00      	ldr	r2, [sp, #0]
   19e68:	9b01      	ldr	r3, [sp, #4]
   19e6a:	60a2      	str	r2, [r4, #8]
   19e6c:	60e3      	str	r3, [r4, #12]
   19e6e:	4a3e      	ldr	r2, [pc, #248]	; (19f68 <pow+0x2f8>)
   19e70:	2300      	movs	r3, #0
   19e72:	56d3      	ldrsb	r3, [r2, r3]
   19e74:	6126      	str	r6, [r4, #16]
   19e76:	6167      	str	r7, [r4, #20]
   19e78:	2b00      	cmp	r3, #0
   19e7a:	d11e      	bne.n	19eba <pow+0x24a>
   19e7c:	4a32      	ldr	r2, [pc, #200]	; (19f48 <pow+0x2d8>)
   19e7e:	4b33      	ldr	r3, [pc, #204]	; (19f4c <pow+0x2dc>)
   19e80:	9800      	ldr	r0, [sp, #0]
   19e82:	9901      	ldr	r1, [sp, #4]
   19e84:	61a2      	str	r2, [r4, #24]
   19e86:	61e3      	str	r3, [r4, #28]
   19e88:	4b2a      	ldr	r3, [pc, #168]	; (19f34 <pow+0x2c4>)
   19e8a:	4a29      	ldr	r2, [pc, #164]	; (19f30 <pow+0x2c0>)
   19e8c:	f005 fb94 	bl	1f5b8 <__aeabi_dcmplt>
   19e90:	2800      	cmp	r0, #0
   19e92:	d032      	beq.n	19efa <pow+0x28a>
   19e94:	4a2e      	ldr	r2, [pc, #184]	; (19f50 <pow+0x2e0>)
   19e96:	4b2f      	ldr	r3, [pc, #188]	; (19f54 <pow+0x2e4>)
   19e98:	1c30      	adds	r0, r6, #0
   19e9a:	1c39      	adds	r1, r7, #0
   19e9c:	f007 faca 	bl	21434 <__aeabi_dmul>
   19ea0:	1c06      	adds	r6, r0, #0
   19ea2:	1c0f      	adds	r7, r1, #0
   19ea4:	f001 f90c 	bl	1b0c0 <rint>
   19ea8:	1c32      	adds	r2, r6, #0
   19eaa:	1c3b      	adds	r3, r7, #0
   19eac:	f005 fb7e 	bl	1f5ac <__aeabi_dcmpeq>
   19eb0:	2800      	cmp	r0, #0
   19eb2:	d122      	bne.n	19efa <pow+0x28a>
   19eb4:	4a28      	ldr	r2, [pc, #160]	; (19f58 <pow+0x2e8>)
   19eb6:	4b29      	ldr	r3, [pc, #164]	; (19f5c <pow+0x2ec>)
   19eb8:	e01d      	b.n	19ef6 <pow+0x286>
   19eba:	4a29      	ldr	r2, [pc, #164]	; (19f60 <pow+0x2f0>)
   19ebc:	4b29      	ldr	r3, [pc, #164]	; (19f64 <pow+0x2f4>)
   19ebe:	9800      	ldr	r0, [sp, #0]
   19ec0:	9901      	ldr	r1, [sp, #4]
   19ec2:	61a2      	str	r2, [r4, #24]
   19ec4:	61e3      	str	r3, [r4, #28]
   19ec6:	4b1b      	ldr	r3, [pc, #108]	; (19f34 <pow+0x2c4>)
   19ec8:	4a19      	ldr	r2, [pc, #100]	; (19f30 <pow+0x2c0>)
   19eca:	f005 fb75 	bl	1f5b8 <__aeabi_dcmplt>
   19ece:	2800      	cmp	r0, #0
   19ed0:	d013      	beq.n	19efa <pow+0x28a>
   19ed2:	4a1f      	ldr	r2, [pc, #124]	; (19f50 <pow+0x2e0>)
   19ed4:	4b1f      	ldr	r3, [pc, #124]	; (19f54 <pow+0x2e4>)
   19ed6:	1c30      	adds	r0, r6, #0
   19ed8:	1c39      	adds	r1, r7, #0
   19eda:	f007 faab 	bl	21434 <__aeabi_dmul>
   19ede:	1c06      	adds	r6, r0, #0
   19ee0:	1c0f      	adds	r7, r1, #0
   19ee2:	f001 f8ed 	bl	1b0c0 <rint>
   19ee6:	1c32      	adds	r2, r6, #0
   19ee8:	1c3b      	adds	r3, r7, #0
   19eea:	f005 fb5f 	bl	1f5ac <__aeabi_dcmpeq>
   19eee:	2800      	cmp	r0, #0
   19ef0:	d103      	bne.n	19efa <pow+0x28a>
   19ef2:	4a13      	ldr	r2, [pc, #76]	; (19f40 <pow+0x2d0>)
   19ef4:	4b13      	ldr	r3, [pc, #76]	; (19f44 <pow+0x2d4>)
   19ef6:	61a2      	str	r2, [r4, #24]
   19ef8:	61e3      	str	r3, [r4, #28]
   19efa:	4b1b      	ldr	r3, [pc, #108]	; (19f68 <pow+0x2f8>)
   19efc:	781b      	ldrb	r3, [r3, #0]
   19efe:	b25b      	sxtb	r3, r3
   19f00:	2b02      	cmp	r3, #2
   19f02:	d004      	beq.n	19f0e <pow+0x29e>
   19f04:	1c20      	adds	r0, r4, #0
   19f06:	f001 f8cf 	bl	1b0a8 <matherr>
   19f0a:	2800      	cmp	r0, #0
   19f0c:	d103      	bne.n	19f16 <pow+0x2a6>
   19f0e:	f001 f9f3 	bl	1b2f8 <__errno>
   19f12:	2322      	movs	r3, #34	; 0x22
   19f14:	6003      	str	r3, [r0, #0]
   19f16:	6a23      	ldr	r3, [r4, #32]
   19f18:	2b00      	cmp	r3, #0
   19f1a:	d003      	beq.n	19f24 <pow+0x2b4>
   19f1c:	f001 f9ec 	bl	1b2f8 <__errno>
   19f20:	6a22      	ldr	r2, [r4, #32]
   19f22:	6002      	str	r2, [r0, #0]
   19f24:	69a2      	ldr	r2, [r4, #24]
   19f26:	69e3      	ldr	r3, [r4, #28]
   19f28:	e061      	b.n	19fee <pow+0x37e>
   19f2a:	46c0      	nop			; (mov r8, r8)
   19f2c:	46c0      	nop			; (mov r8, r8)
   19f2e:	46c0      	nop			; (mov r8, r8)
	...
   19f3c:	3ff00000 	.word	0x3ff00000
   19f40:	00000000 	.word	0x00000000
   19f44:	fff00000 	.word	0xfff00000
   19f48:	e0000000 	.word	0xe0000000
   19f4c:	47efffff 	.word	0x47efffff
   19f50:	00000000 	.word	0x00000000
   19f54:	3fe00000 	.word	0x3fe00000
   19f58:	e0000000 	.word	0xe0000000
   19f5c:	c7efffff 	.word	0xc7efffff
   19f60:	00000000 	.word	0x00000000
   19f64:	7ff00000 	.word	0x7ff00000
   19f68:	2000019d 	.word	0x2000019d
   19f6c:	00026f5c 	.word	0x00026f5c
   19f70:	1c20      	adds	r0, r4, #0
   19f72:	1c29      	adds	r1, r5, #0
   19f74:	4b23      	ldr	r3, [pc, #140]	; (1a004 <pow+0x394>)
   19f76:	4a22      	ldr	r2, [pc, #136]	; (1a000 <pow+0x390>)
   19f78:	f005 fb18 	bl	1f5ac <__aeabi_dcmpeq>
   19f7c:	2800      	cmp	r0, #0
   19f7e:	d039      	beq.n	19ff4 <pow+0x384>
   19f80:	9800      	ldr	r0, [sp, #0]
   19f82:	9901      	ldr	r1, [sp, #4]
   19f84:	f001 f85e 	bl	1b044 <finite>
   19f88:	9402      	str	r4, [sp, #8]
   19f8a:	9503      	str	r5, [sp, #12]
   19f8c:	2800      	cmp	r0, #0
   19f8e:	d033      	beq.n	19ff8 <pow+0x388>
   19f90:	1c30      	adds	r0, r6, #0
   19f92:	1c39      	adds	r1, r7, #0
   19f94:	f001 f856 	bl	1b044 <finite>
   19f98:	9402      	str	r4, [sp, #8]
   19f9a:	9503      	str	r5, [sp, #12]
   19f9c:	2800      	cmp	r0, #0
   19f9e:	d02b      	beq.n	19ff8 <pow+0x388>
   19fa0:	2304      	movs	r3, #4
   19fa2:	9306      	str	r3, [sp, #24]
   19fa4:	4b18      	ldr	r3, [pc, #96]	; (1a008 <pow+0x398>)
   19fa6:	960a      	str	r6, [sp, #40]	; 0x28
   19fa8:	970b      	str	r7, [sp, #44]	; 0x2c
   19faa:	9307      	str	r3, [sp, #28]
   19fac:	2300      	movs	r3, #0
   19fae:	930e      	str	r3, [sp, #56]	; 0x38
   19fb0:	9b00      	ldr	r3, [sp, #0]
   19fb2:	9c01      	ldr	r4, [sp, #4]
   19fb4:	9308      	str	r3, [sp, #32]
   19fb6:	9409      	str	r4, [sp, #36]	; 0x24
   19fb8:	4b12      	ldr	r3, [pc, #72]	; (1a004 <pow+0x394>)
   19fba:	4a11      	ldr	r2, [pc, #68]	; (1a000 <pow+0x390>)
   19fbc:	920c      	str	r2, [sp, #48]	; 0x30
   19fbe:	930d      	str	r3, [sp, #52]	; 0x34
   19fc0:	4b12      	ldr	r3, [pc, #72]	; (1a00c <pow+0x39c>)
   19fc2:	781b      	ldrb	r3, [r3, #0]
   19fc4:	b25b      	sxtb	r3, r3
   19fc6:	2b02      	cmp	r3, #2
   19fc8:	d004      	beq.n	19fd4 <pow+0x364>
   19fca:	a806      	add	r0, sp, #24
   19fcc:	f001 f86c 	bl	1b0a8 <matherr>
   19fd0:	2800      	cmp	r0, #0
   19fd2:	d103      	bne.n	19fdc <pow+0x36c>
   19fd4:	f001 f990 	bl	1b2f8 <__errno>
   19fd8:	2322      	movs	r3, #34	; 0x22
   19fda:	6003      	str	r3, [r0, #0]
   19fdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19fde:	2b00      	cmp	r3, #0
   19fe0:	d003      	beq.n	19fea <pow+0x37a>
   19fe2:	f001 f989 	bl	1b2f8 <__errno>
   19fe6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   19fe8:	6004      	str	r4, [r0, #0]
   19fea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   19fec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19fee:	9202      	str	r2, [sp, #8]
   19ff0:	9303      	str	r3, [sp, #12]
   19ff2:	e001      	b.n	19ff8 <pow+0x388>
   19ff4:	9402      	str	r4, [sp, #8]
   19ff6:	9503      	str	r5, [sp, #12]
   19ff8:	9802      	ldr	r0, [sp, #8]
   19ffa:	9903      	ldr	r1, [sp, #12]
   19ffc:	b011      	add	sp, #68	; 0x44
   19ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...
   1a008:	00026f5c 	.word	0x00026f5c
   1a00c:	2000019d 	.word	0x2000019d

0001a010 <__ieee754_log>:
   1a010:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a012:	4edb      	ldr	r6, [pc, #876]	; (1a380 <__ieee754_log+0x370>)
   1a014:	b08b      	sub	sp, #44	; 0x2c
   1a016:	1c02      	adds	r2, r0, #0
   1a018:	1c0b      	adds	r3, r1, #0
   1a01a:	1c0c      	adds	r4, r1, #0
   1a01c:	1c0d      	adds	r5, r1, #0
   1a01e:	42b1      	cmp	r1, r6
   1a020:	dc1b      	bgt.n	1a05a <__ieee754_log+0x4a>
   1a022:	0049      	lsls	r1, r1, #1
   1a024:	0849      	lsrs	r1, r1, #1
   1a026:	4308      	orrs	r0, r1
   1a028:	d102      	bne.n	1a030 <__ieee754_log+0x20>
   1a02a:	49b6      	ldr	r1, [pc, #728]	; (1a304 <__ieee754_log+0x2f4>)
   1a02c:	48b4      	ldr	r0, [pc, #720]	; (1a300 <__ieee754_log+0x2f0>)
   1a02e:	e005      	b.n	1a03c <__ieee754_log+0x2c>
   1a030:	1c10      	adds	r0, r2, #0
   1a032:	1c19      	adds	r1, r3, #0
   1a034:	2c00      	cmp	r4, #0
   1a036:	da06      	bge.n	1a046 <__ieee754_log+0x36>
   1a038:	f007 fc8e 	bl	21958 <__aeabi_dsub>
   1a03c:	4ab2      	ldr	r2, [pc, #712]	; (1a308 <__ieee754_log+0x2f8>)
   1a03e:	4bb3      	ldr	r3, [pc, #716]	; (1a30c <__ieee754_log+0x2fc>)
   1a040:	f006 fd88 	bl	20b54 <__aeabi_ddiv>
   1a044:	e1ed      	b.n	1a422 <__ieee754_log+0x412>
   1a046:	4ab2      	ldr	r2, [pc, #712]	; (1a310 <__ieee754_log+0x300>)
   1a048:	4bb2      	ldr	r3, [pc, #712]	; (1a314 <__ieee754_log+0x304>)
   1a04a:	f007 f9f3 	bl	21434 <__aeabi_dmul>
   1a04e:	1c0b      	adds	r3, r1, #0
   1a050:	1c0d      	adds	r5, r1, #0
   1a052:	2136      	movs	r1, #54	; 0x36
   1a054:	1c02      	adds	r2, r0, #0
   1a056:	4249      	negs	r1, r1
   1a058:	e000      	b.n	1a05c <__ieee754_log+0x4c>
   1a05a:	2100      	movs	r1, #0
   1a05c:	48c9      	ldr	r0, [pc, #804]	; (1a384 <__ieee754_log+0x374>)
   1a05e:	4285      	cmp	r5, r0
   1a060:	dd02      	ble.n	1a068 <__ieee754_log+0x58>
   1a062:	1c10      	adds	r0, r2, #0
   1a064:	1c19      	adds	r1, r3, #0
   1a066:	e03f      	b.n	1a0e8 <__ieee754_log+0xd8>
   1a068:	48c7      	ldr	r0, [pc, #796]	; (1a388 <__ieee754_log+0x378>)
   1a06a:	152e      	asrs	r6, r5, #20
   1a06c:	4cc7      	ldr	r4, [pc, #796]	; (1a38c <__ieee754_log+0x37c>)
   1a06e:	032d      	lsls	r5, r5, #12
   1a070:	0b2d      	lsrs	r5, r5, #12
   1a072:	1836      	adds	r6, r6, r0
   1a074:	198e      	adds	r6, r1, r6
   1a076:	1929      	adds	r1, r5, r4
   1a078:	2480      	movs	r4, #128	; 0x80
   1a07a:	0364      	lsls	r4, r4, #13
   1a07c:	400c      	ands	r4, r1
   1a07e:	49c4      	ldr	r1, [pc, #784]	; (1a390 <__ieee754_log+0x380>)
   1a080:	1c2b      	adds	r3, r5, #0
   1a082:	4061      	eors	r1, r4
   1a084:	430b      	orrs	r3, r1
   1a086:	1524      	asrs	r4, r4, #20
   1a088:	1c10      	adds	r0, r2, #0
   1a08a:	1c19      	adds	r1, r3, #0
   1a08c:	1934      	adds	r4, r6, r4
   1a08e:	4aa2      	ldr	r2, [pc, #648]	; (1a318 <__ieee754_log+0x308>)
   1a090:	4ba2      	ldr	r3, [pc, #648]	; (1a31c <__ieee754_log+0x30c>)
   1a092:	9508      	str	r5, [sp, #32]
   1a094:	9400      	str	r4, [sp, #0]
   1a096:	f007 fc5f 	bl	21958 <__aeabi_dsub>
   1a09a:	9b08      	ldr	r3, [sp, #32]
   1a09c:	1c04      	adds	r4, r0, #0
   1a09e:	3302      	adds	r3, #2
   1a0a0:	031b      	lsls	r3, r3, #12
   1a0a2:	1c0d      	adds	r5, r1, #0
   1a0a4:	0b1b      	lsrs	r3, r3, #12
   1a0a6:	2b02      	cmp	r3, #2
   1a0a8:	dc65      	bgt.n	1a176 <__ieee754_log+0x166>
   1a0aa:	4a97      	ldr	r2, [pc, #604]	; (1a308 <__ieee754_log+0x2f8>)
   1a0ac:	4b97      	ldr	r3, [pc, #604]	; (1a30c <__ieee754_log+0x2fc>)
   1a0ae:	f005 fa7d 	bl	1f5ac <__aeabi_dcmpeq>
   1a0b2:	2800      	cmp	r0, #0
   1a0b4:	d01b      	beq.n	1a0ee <__ieee754_log+0xde>
   1a0b6:	9c00      	ldr	r4, [sp, #0]
   1a0b8:	2c00      	cmp	r4, #0
   1a0ba:	d100      	bne.n	1a0be <__ieee754_log+0xae>
   1a0bc:	e1af      	b.n	1a41e <__ieee754_log+0x40e>
   1a0be:	1c20      	adds	r0, r4, #0
   1a0c0:	f007 ffb4 	bl	2202c <__aeabi_i2d>
   1a0c4:	4a96      	ldr	r2, [pc, #600]	; (1a320 <__ieee754_log+0x310>)
   1a0c6:	4b97      	ldr	r3, [pc, #604]	; (1a324 <__ieee754_log+0x314>)
   1a0c8:	1c04      	adds	r4, r0, #0
   1a0ca:	1c0d      	adds	r5, r1, #0
   1a0cc:	f007 f9b2 	bl	21434 <__aeabi_dmul>
   1a0d0:	4a95      	ldr	r2, [pc, #596]	; (1a328 <__ieee754_log+0x318>)
   1a0d2:	4b96      	ldr	r3, [pc, #600]	; (1a32c <__ieee754_log+0x31c>)
   1a0d4:	1c06      	adds	r6, r0, #0
   1a0d6:	1c0f      	adds	r7, r1, #0
   1a0d8:	1c20      	adds	r0, r4, #0
   1a0da:	1c29      	adds	r1, r5, #0
   1a0dc:	f007 f9aa 	bl	21434 <__aeabi_dmul>
   1a0e0:	1c02      	adds	r2, r0, #0
   1a0e2:	1c0b      	adds	r3, r1, #0
   1a0e4:	1c30      	adds	r0, r6, #0
   1a0e6:	1c39      	adds	r1, r7, #0
   1a0e8:	f006 fa10 	bl	2050c <__aeabi_dadd>
   1a0ec:	e199      	b.n	1a422 <__ieee754_log+0x412>
   1a0ee:	1c22      	adds	r2, r4, #0
   1a0f0:	1c2b      	adds	r3, r5, #0
   1a0f2:	1c20      	adds	r0, r4, #0
   1a0f4:	1c29      	adds	r1, r5, #0
   1a0f6:	f007 f99d 	bl	21434 <__aeabi_dmul>
   1a0fa:	4a8d      	ldr	r2, [pc, #564]	; (1a330 <__ieee754_log+0x320>)
   1a0fc:	4b8d      	ldr	r3, [pc, #564]	; (1a334 <__ieee754_log+0x324>)
   1a0fe:	1c06      	adds	r6, r0, #0
   1a100:	1c0f      	adds	r7, r1, #0
   1a102:	1c20      	adds	r0, r4, #0
   1a104:	1c29      	adds	r1, r5, #0
   1a106:	f007 f995 	bl	21434 <__aeabi_dmul>
   1a10a:	1c02      	adds	r2, r0, #0
   1a10c:	1c0b      	adds	r3, r1, #0
   1a10e:	488a      	ldr	r0, [pc, #552]	; (1a338 <__ieee754_log+0x328>)
   1a110:	498a      	ldr	r1, [pc, #552]	; (1a33c <__ieee754_log+0x32c>)
   1a112:	f007 fc21 	bl	21958 <__aeabi_dsub>
   1a116:	1c02      	adds	r2, r0, #0
   1a118:	1c0b      	adds	r3, r1, #0
   1a11a:	1c30      	adds	r0, r6, #0
   1a11c:	1c39      	adds	r1, r7, #0
   1a11e:	f007 f989 	bl	21434 <__aeabi_dmul>
   1a122:	1c06      	adds	r6, r0, #0
   1a124:	9800      	ldr	r0, [sp, #0]
   1a126:	1c0f      	adds	r7, r1, #0
   1a128:	2800      	cmp	r0, #0
   1a12a:	d104      	bne.n	1a136 <__ieee754_log+0x126>
   1a12c:	1c20      	adds	r0, r4, #0
   1a12e:	1c29      	adds	r1, r5, #0
   1a130:	1c32      	adds	r2, r6, #0
   1a132:	1c3b      	adds	r3, r7, #0
   1a134:	e170      	b.n	1a418 <__ieee754_log+0x408>
   1a136:	9800      	ldr	r0, [sp, #0]
   1a138:	f007 ff78 	bl	2202c <__aeabi_i2d>
   1a13c:	4a78      	ldr	r2, [pc, #480]	; (1a320 <__ieee754_log+0x310>)
   1a13e:	4b79      	ldr	r3, [pc, #484]	; (1a324 <__ieee754_log+0x314>)
   1a140:	9000      	str	r0, [sp, #0]
   1a142:	9101      	str	r1, [sp, #4]
   1a144:	f007 f976 	bl	21434 <__aeabi_dmul>
   1a148:	4a77      	ldr	r2, [pc, #476]	; (1a328 <__ieee754_log+0x318>)
   1a14a:	4b78      	ldr	r3, [pc, #480]	; (1a32c <__ieee754_log+0x31c>)
   1a14c:	9002      	str	r0, [sp, #8]
   1a14e:	9103      	str	r1, [sp, #12]
   1a150:	9800      	ldr	r0, [sp, #0]
   1a152:	9901      	ldr	r1, [sp, #4]
   1a154:	f007 f96e 	bl	21434 <__aeabi_dmul>
   1a158:	1c02      	adds	r2, r0, #0
   1a15a:	1c0b      	adds	r3, r1, #0
   1a15c:	1c30      	adds	r0, r6, #0
   1a15e:	1c39      	adds	r1, r7, #0
   1a160:	f007 fbfa 	bl	21958 <__aeabi_dsub>
   1a164:	1c22      	adds	r2, r4, #0
   1a166:	1c2b      	adds	r3, r5, #0
   1a168:	f007 fbf6 	bl	21958 <__aeabi_dsub>
   1a16c:	1c02      	adds	r2, r0, #0
   1a16e:	1c0b      	adds	r3, r1, #0
   1a170:	9802      	ldr	r0, [sp, #8]
   1a172:	9903      	ldr	r1, [sp, #12]
   1a174:	e150      	b.n	1a418 <__ieee754_log+0x408>
   1a176:	4a72      	ldr	r2, [pc, #456]	; (1a340 <__ieee754_log+0x330>)
   1a178:	4b72      	ldr	r3, [pc, #456]	; (1a344 <__ieee754_log+0x334>)
   1a17a:	f006 f9c7 	bl	2050c <__aeabi_dadd>
   1a17e:	1c02      	adds	r2, r0, #0
   1a180:	1c0b      	adds	r3, r1, #0
   1a182:	1c20      	adds	r0, r4, #0
   1a184:	1c29      	adds	r1, r5, #0
   1a186:	f006 fce5 	bl	20b54 <__aeabi_ddiv>
   1a18a:	9002      	str	r0, [sp, #8]
   1a18c:	9103      	str	r1, [sp, #12]
   1a18e:	9800      	ldr	r0, [sp, #0]
   1a190:	f007 ff4c 	bl	2202c <__aeabi_i2d>
   1a194:	9006      	str	r0, [sp, #24]
   1a196:	9107      	str	r1, [sp, #28]
   1a198:	9802      	ldr	r0, [sp, #8]
   1a19a:	9903      	ldr	r1, [sp, #12]
   1a19c:	1c02      	adds	r2, r0, #0
   1a19e:	1c0b      	adds	r3, r1, #0
   1a1a0:	f007 f948 	bl	21434 <__aeabi_dmul>
   1a1a4:	9a08      	ldr	r2, [sp, #32]
   1a1a6:	4b7b      	ldr	r3, [pc, #492]	; (1a394 <__ieee754_log+0x384>)
   1a1a8:	9004      	str	r0, [sp, #16]
   1a1aa:	9105      	str	r1, [sp, #20]
   1a1ac:	18d3      	adds	r3, r2, r3
   1a1ae:	9309      	str	r3, [sp, #36]	; 0x24
   1a1b0:	1c02      	adds	r2, r0, #0
   1a1b2:	1c0b      	adds	r3, r1, #0
   1a1b4:	f007 f93e 	bl	21434 <__aeabi_dmul>
   1a1b8:	4a63      	ldr	r2, [pc, #396]	; (1a348 <__ieee754_log+0x338>)
   1a1ba:	4b64      	ldr	r3, [pc, #400]	; (1a34c <__ieee754_log+0x33c>)
   1a1bc:	1c06      	adds	r6, r0, #0
   1a1be:	1c0f      	adds	r7, r1, #0
   1a1c0:	f007 f938 	bl	21434 <__aeabi_dmul>
   1a1c4:	4a62      	ldr	r2, [pc, #392]	; (1a350 <__ieee754_log+0x340>)
   1a1c6:	4b63      	ldr	r3, [pc, #396]	; (1a354 <__ieee754_log+0x344>)
   1a1c8:	f006 f9a0 	bl	2050c <__aeabi_dadd>
   1a1cc:	1c02      	adds	r2, r0, #0
   1a1ce:	1c0b      	adds	r3, r1, #0
   1a1d0:	1c30      	adds	r0, r6, #0
   1a1d2:	1c39      	adds	r1, r7, #0
   1a1d4:	f007 f92e 	bl	21434 <__aeabi_dmul>
   1a1d8:	4a5f      	ldr	r2, [pc, #380]	; (1a358 <__ieee754_log+0x348>)
   1a1da:	4b60      	ldr	r3, [pc, #384]	; (1a35c <__ieee754_log+0x34c>)
   1a1dc:	f006 f996 	bl	2050c <__aeabi_dadd>
   1a1e0:	1c02      	adds	r2, r0, #0
   1a1e2:	1c0b      	adds	r3, r1, #0
   1a1e4:	1c30      	adds	r0, r6, #0
   1a1e6:	1c39      	adds	r1, r7, #0
   1a1e8:	f007 f924 	bl	21434 <__aeabi_dmul>
   1a1ec:	4a5c      	ldr	r2, [pc, #368]	; (1a360 <__ieee754_log+0x350>)
   1a1ee:	4b5d      	ldr	r3, [pc, #372]	; (1a364 <__ieee754_log+0x354>)
   1a1f0:	f006 f98c 	bl	2050c <__aeabi_dadd>
   1a1f4:	1c02      	adds	r2, r0, #0
   1a1f6:	1c0b      	adds	r3, r1, #0
   1a1f8:	9804      	ldr	r0, [sp, #16]
   1a1fa:	9905      	ldr	r1, [sp, #20]
   1a1fc:	f007 f91a 	bl	21434 <__aeabi_dmul>
   1a200:	4a59      	ldr	r2, [pc, #356]	; (1a368 <__ieee754_log+0x358>)
   1a202:	4b5a      	ldr	r3, [pc, #360]	; (1a36c <__ieee754_log+0x35c>)
   1a204:	9004      	str	r0, [sp, #16]
   1a206:	9105      	str	r1, [sp, #20]
   1a208:	1c30      	adds	r0, r6, #0
   1a20a:	1c39      	adds	r1, r7, #0
   1a20c:	f007 f912 	bl	21434 <__aeabi_dmul>
   1a210:	4a57      	ldr	r2, [pc, #348]	; (1a370 <__ieee754_log+0x360>)
   1a212:	4b58      	ldr	r3, [pc, #352]	; (1a374 <__ieee754_log+0x364>)
   1a214:	f006 f97a 	bl	2050c <__aeabi_dadd>
   1a218:	1c02      	adds	r2, r0, #0
   1a21a:	1c0b      	adds	r3, r1, #0
   1a21c:	1c30      	adds	r0, r6, #0
   1a21e:	1c39      	adds	r1, r7, #0
   1a220:	f007 f908 	bl	21434 <__aeabi_dmul>
   1a224:	4a54      	ldr	r2, [pc, #336]	; (1a378 <__ieee754_log+0x368>)
   1a226:	4b55      	ldr	r3, [pc, #340]	; (1a37c <__ieee754_log+0x36c>)
   1a228:	f006 f970 	bl	2050c <__aeabi_dadd>
   1a22c:	1c02      	adds	r2, r0, #0
   1a22e:	1c0b      	adds	r3, r1, #0
   1a230:	1c30      	adds	r0, r6, #0
   1a232:	1c39      	adds	r1, r7, #0
   1a234:	f007 f8fe 	bl	21434 <__aeabi_dmul>
   1a238:	1c02      	adds	r2, r0, #0
   1a23a:	1c0b      	adds	r3, r1, #0
   1a23c:	9804      	ldr	r0, [sp, #16]
   1a23e:	9905      	ldr	r1, [sp, #20]
   1a240:	f006 f964 	bl	2050c <__aeabi_dadd>
   1a244:	4b54      	ldr	r3, [pc, #336]	; (1a398 <__ieee754_log+0x388>)
   1a246:	9004      	str	r0, [sp, #16]
   1a248:	9105      	str	r1, [sp, #20]
   1a24a:	9808      	ldr	r0, [sp, #32]
   1a24c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a24e:	1a1b      	subs	r3, r3, r0
   1a250:	4313      	orrs	r3, r2
   1a252:	2b00      	cmp	r3, #0
   1a254:	dc00      	bgt.n	1a258 <__ieee754_log+0x248>
   1a256:	e0a1      	b.n	1a39c <__ieee754_log+0x38c>
   1a258:	4a37      	ldr	r2, [pc, #220]	; (1a338 <__ieee754_log+0x328>)
   1a25a:	4b38      	ldr	r3, [pc, #224]	; (1a33c <__ieee754_log+0x32c>)
   1a25c:	1c20      	adds	r0, r4, #0
   1a25e:	1c29      	adds	r1, r5, #0
   1a260:	f007 f8e8 	bl	21434 <__aeabi_dmul>
   1a264:	1c2b      	adds	r3, r5, #0
   1a266:	1c22      	adds	r2, r4, #0
   1a268:	f007 f8e4 	bl	21434 <__aeabi_dmul>
   1a26c:	9b00      	ldr	r3, [sp, #0]
   1a26e:	1c06      	adds	r6, r0, #0
   1a270:	1c0f      	adds	r7, r1, #0
   1a272:	2b00      	cmp	r3, #0
   1a274:	d110      	bne.n	1a298 <__ieee754_log+0x288>
   1a276:	9a04      	ldr	r2, [sp, #16]
   1a278:	9b05      	ldr	r3, [sp, #20]
   1a27a:	f006 f947 	bl	2050c <__aeabi_dadd>
   1a27e:	1c02      	adds	r2, r0, #0
   1a280:	1c0b      	adds	r3, r1, #0
   1a282:	9802      	ldr	r0, [sp, #8]
   1a284:	9903      	ldr	r1, [sp, #12]
   1a286:	f007 f8d5 	bl	21434 <__aeabi_dmul>
   1a28a:	1c02      	adds	r2, r0, #0
   1a28c:	1c0b      	adds	r3, r1, #0
   1a28e:	1c30      	adds	r0, r6, #0
   1a290:	1c39      	adds	r1, r7, #0
   1a292:	f007 fb61 	bl	21958 <__aeabi_dsub>
   1a296:	e090      	b.n	1a3ba <__ieee754_log+0x3aa>
   1a298:	4a21      	ldr	r2, [pc, #132]	; (1a320 <__ieee754_log+0x310>)
   1a29a:	4b22      	ldr	r3, [pc, #136]	; (1a324 <__ieee754_log+0x314>)
   1a29c:	9806      	ldr	r0, [sp, #24]
   1a29e:	9907      	ldr	r1, [sp, #28]
   1a2a0:	f007 f8c8 	bl	21434 <__aeabi_dmul>
   1a2a4:	9a04      	ldr	r2, [sp, #16]
   1a2a6:	9b05      	ldr	r3, [sp, #20]
   1a2a8:	9000      	str	r0, [sp, #0]
   1a2aa:	9101      	str	r1, [sp, #4]
   1a2ac:	1c30      	adds	r0, r6, #0
   1a2ae:	1c39      	adds	r1, r7, #0
   1a2b0:	f006 f92c 	bl	2050c <__aeabi_dadd>
   1a2b4:	1c02      	adds	r2, r0, #0
   1a2b6:	1c0b      	adds	r3, r1, #0
   1a2b8:	9802      	ldr	r0, [sp, #8]
   1a2ba:	9903      	ldr	r1, [sp, #12]
   1a2bc:	f007 f8ba 	bl	21434 <__aeabi_dmul>
   1a2c0:	4a19      	ldr	r2, [pc, #100]	; (1a328 <__ieee754_log+0x318>)
   1a2c2:	4b1a      	ldr	r3, [pc, #104]	; (1a32c <__ieee754_log+0x31c>)
   1a2c4:	9002      	str	r0, [sp, #8]
   1a2c6:	9103      	str	r1, [sp, #12]
   1a2c8:	9806      	ldr	r0, [sp, #24]
   1a2ca:	9907      	ldr	r1, [sp, #28]
   1a2cc:	f007 f8b2 	bl	21434 <__aeabi_dmul>
   1a2d0:	1c02      	adds	r2, r0, #0
   1a2d2:	1c0b      	adds	r3, r1, #0
   1a2d4:	9802      	ldr	r0, [sp, #8]
   1a2d6:	9903      	ldr	r1, [sp, #12]
   1a2d8:	f006 f918 	bl	2050c <__aeabi_dadd>
   1a2dc:	1c02      	adds	r2, r0, #0
   1a2de:	1c0b      	adds	r3, r1, #0
   1a2e0:	1c30      	adds	r0, r6, #0
   1a2e2:	1c39      	adds	r1, r7, #0
   1a2e4:	f007 fb38 	bl	21958 <__aeabi_dsub>
   1a2e8:	1c22      	adds	r2, r4, #0
   1a2ea:	1c2b      	adds	r3, r5, #0
   1a2ec:	f007 fb34 	bl	21958 <__aeabi_dsub>
   1a2f0:	1c02      	adds	r2, r0, #0
   1a2f2:	1c0b      	adds	r3, r1, #0
   1a2f4:	9800      	ldr	r0, [sp, #0]
   1a2f6:	9901      	ldr	r1, [sp, #4]
   1a2f8:	e08e      	b.n	1a418 <__ieee754_log+0x408>
   1a2fa:	46c0      	nop			; (mov r8, r8)
   1a2fc:	46c0      	nop			; (mov r8, r8)
   1a2fe:	46c0      	nop			; (mov r8, r8)
   1a300:	00000000 	.word	0x00000000
   1a304:	c3500000 	.word	0xc3500000
	...
   1a314:	43500000 	.word	0x43500000
   1a318:	00000000 	.word	0x00000000
   1a31c:	3ff00000 	.word	0x3ff00000
   1a320:	fee00000 	.word	0xfee00000
   1a324:	3fe62e42 	.word	0x3fe62e42
   1a328:	35793c76 	.word	0x35793c76
   1a32c:	3dea39ef 	.word	0x3dea39ef
   1a330:	55555555 	.word	0x55555555
   1a334:	3fd55555 	.word	0x3fd55555
   1a338:	00000000 	.word	0x00000000
   1a33c:	3fe00000 	.word	0x3fe00000
   1a340:	00000000 	.word	0x00000000
   1a344:	40000000 	.word	0x40000000
   1a348:	df3e5244 	.word	0xdf3e5244
   1a34c:	3fc2f112 	.word	0x3fc2f112
   1a350:	96cb03de 	.word	0x96cb03de
   1a354:	3fc74664 	.word	0x3fc74664
   1a358:	94229359 	.word	0x94229359
   1a35c:	3fd24924 	.word	0x3fd24924
   1a360:	55555593 	.word	0x55555593
   1a364:	3fe55555 	.word	0x3fe55555
   1a368:	d078c69f 	.word	0xd078c69f
   1a36c:	3fc39a09 	.word	0x3fc39a09
   1a370:	1d8e78af 	.word	0x1d8e78af
   1a374:	3fcc71c5 	.word	0x3fcc71c5
   1a378:	9997fa04 	.word	0x9997fa04
   1a37c:	3fd99999 	.word	0x3fd99999
   1a380:	000fffff 	.word	0x000fffff
   1a384:	7fefffff 	.word	0x7fefffff
   1a388:	fffffc01 	.word	0xfffffc01
   1a38c:	00095f64 	.word	0x00095f64
   1a390:	3ff00000 	.word	0x3ff00000
   1a394:	fff9eb86 	.word	0xfff9eb86
   1a398:	0006b851 	.word	0x0006b851
   1a39c:	9800      	ldr	r0, [sp, #0]
   1a39e:	2800      	cmp	r0, #0
   1a3a0:	d110      	bne.n	1a3c4 <__ieee754_log+0x3b4>
   1a3a2:	9a04      	ldr	r2, [sp, #16]
   1a3a4:	9b05      	ldr	r3, [sp, #20]
   1a3a6:	1c20      	adds	r0, r4, #0
   1a3a8:	1c29      	adds	r1, r5, #0
   1a3aa:	f007 fad5 	bl	21958 <__aeabi_dsub>
   1a3ae:	1c02      	adds	r2, r0, #0
   1a3b0:	1c0b      	adds	r3, r1, #0
   1a3b2:	9802      	ldr	r0, [sp, #8]
   1a3b4:	9903      	ldr	r1, [sp, #12]
   1a3b6:	f007 f83d 	bl	21434 <__aeabi_dmul>
   1a3ba:	1c02      	adds	r2, r0, #0
   1a3bc:	1c0b      	adds	r3, r1, #0
   1a3be:	1c20      	adds	r0, r4, #0
   1a3c0:	1c29      	adds	r1, r5, #0
   1a3c2:	e029      	b.n	1a418 <__ieee754_log+0x408>
   1a3c4:	4b19      	ldr	r3, [pc, #100]	; (1a42c <__ieee754_log+0x41c>)
   1a3c6:	4a18      	ldr	r2, [pc, #96]	; (1a428 <__ieee754_log+0x418>)
   1a3c8:	9806      	ldr	r0, [sp, #24]
   1a3ca:	9907      	ldr	r1, [sp, #28]
   1a3cc:	f007 f832 	bl	21434 <__aeabi_dmul>
   1a3d0:	9a04      	ldr	r2, [sp, #16]
   1a3d2:	9b05      	ldr	r3, [sp, #20]
   1a3d4:	1c06      	adds	r6, r0, #0
   1a3d6:	1c0f      	adds	r7, r1, #0
   1a3d8:	1c20      	adds	r0, r4, #0
   1a3da:	1c29      	adds	r1, r5, #0
   1a3dc:	f007 fabc 	bl	21958 <__aeabi_dsub>
   1a3e0:	1c02      	adds	r2, r0, #0
   1a3e2:	1c0b      	adds	r3, r1, #0
   1a3e4:	9802      	ldr	r0, [sp, #8]
   1a3e6:	9903      	ldr	r1, [sp, #12]
   1a3e8:	f007 f824 	bl	21434 <__aeabi_dmul>
   1a3ec:	4a10      	ldr	r2, [pc, #64]	; (1a430 <__ieee754_log+0x420>)
   1a3ee:	4b11      	ldr	r3, [pc, #68]	; (1a434 <__ieee754_log+0x424>)
   1a3f0:	9000      	str	r0, [sp, #0]
   1a3f2:	9101      	str	r1, [sp, #4]
   1a3f4:	9806      	ldr	r0, [sp, #24]
   1a3f6:	9907      	ldr	r1, [sp, #28]
   1a3f8:	f007 f81c 	bl	21434 <__aeabi_dmul>
   1a3fc:	1c02      	adds	r2, r0, #0
   1a3fe:	1c0b      	adds	r3, r1, #0
   1a400:	9800      	ldr	r0, [sp, #0]
   1a402:	9901      	ldr	r1, [sp, #4]
   1a404:	f007 faa8 	bl	21958 <__aeabi_dsub>
   1a408:	1c22      	adds	r2, r4, #0
   1a40a:	1c2b      	adds	r3, r5, #0
   1a40c:	f007 faa4 	bl	21958 <__aeabi_dsub>
   1a410:	1c02      	adds	r2, r0, #0
   1a412:	1c0b      	adds	r3, r1, #0
   1a414:	1c30      	adds	r0, r6, #0
   1a416:	1c39      	adds	r1, r7, #0
   1a418:	f007 fa9e 	bl	21958 <__aeabi_dsub>
   1a41c:	e001      	b.n	1a422 <__ieee754_log+0x412>
   1a41e:	4806      	ldr	r0, [pc, #24]	; (1a438 <__ieee754_log+0x428>)
   1a420:	4906      	ldr	r1, [pc, #24]	; (1a43c <__ieee754_log+0x42c>)
   1a422:	b00b      	add	sp, #44	; 0x2c
   1a424:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a426:	46c0      	nop			; (mov r8, r8)
   1a428:	fee00000 	.word	0xfee00000
   1a42c:	3fe62e42 	.word	0x3fe62e42
   1a430:	35793c76 	.word	0x35793c76
   1a434:	3dea39ef 	.word	0x3dea39ef
	...

0001a440 <__ieee754_pow>:
   1a440:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a442:	1c04      	adds	r4, r0, #0
   1a444:	b099      	sub	sp, #100	; 0x64
   1a446:	1c0d      	adds	r5, r1, #0
   1a448:	9406      	str	r4, [sp, #24]
   1a44a:	9507      	str	r5, [sp, #28]
   1a44c:	005f      	lsls	r7, r3, #1
   1a44e:	9c06      	ldr	r4, [sp, #24]
   1a450:	087f      	lsrs	r7, r7, #1
   1a452:	9000      	str	r0, [sp, #0]
   1a454:	1c15      	adds	r5, r2, #0
   1a456:	1c38      	adds	r0, r7, #0
   1a458:	9104      	str	r1, [sp, #16]
   1a45a:	920e      	str	r2, [sp, #56]	; 0x38
   1a45c:	9311      	str	r3, [sp, #68]	; 0x44
   1a45e:	940c      	str	r4, [sp, #48]	; 0x30
   1a460:	9302      	str	r3, [sp, #8]
   1a462:	4328      	orrs	r0, r5
   1a464:	d101      	bne.n	1a46a <__ieee754_pow+0x2a>
   1a466:	f000 fccf 	bl	1ae08 <__ieee754_pow+0x9c8>
   1a46a:	9c07      	ldr	r4, [sp, #28]
   1a46c:	4bba      	ldr	r3, [pc, #744]	; (1a758 <__ieee754_pow+0x318>)
   1a46e:	940a      	str	r4, [sp, #40]	; 0x28
   1a470:	0064      	lsls	r4, r4, #1
   1a472:	0864      	lsrs	r4, r4, #1
   1a474:	429c      	cmp	r4, r3
   1a476:	dc0a      	bgt.n	1a48e <__ieee754_pow+0x4e>
   1a478:	d102      	bne.n	1a480 <__ieee754_pow+0x40>
   1a47a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1a47c:	2900      	cmp	r1, #0
   1a47e:	d106      	bne.n	1a48e <__ieee754_pow+0x4e>
   1a480:	429f      	cmp	r7, r3
   1a482:	dc04      	bgt.n	1a48e <__ieee754_pow+0x4e>
   1a484:	49b4      	ldr	r1, [pc, #720]	; (1a758 <__ieee754_pow+0x318>)
   1a486:	428f      	cmp	r7, r1
   1a488:	d10d      	bne.n	1a4a6 <__ieee754_pow+0x66>
   1a48a:	2a00      	cmp	r2, #0
   1a48c:	d00b      	beq.n	1a4a6 <__ieee754_pow+0x66>
   1a48e:	4ab3      	ldr	r2, [pc, #716]	; (1a75c <__ieee754_pow+0x31c>)
   1a490:	9b06      	ldr	r3, [sp, #24]
   1a492:	18a0      	adds	r0, r4, r2
   1a494:	4318      	orrs	r0, r3
   1a496:	d101      	bne.n	1a49c <__ieee754_pow+0x5c>
   1a498:	f000 fcb6 	bl	1ae08 <__ieee754_pow+0x9c8>
   1a49c:	48b0      	ldr	r0, [pc, #704]	; (1a760 <__ieee754_pow+0x320>)
   1a49e:	f000 fe07 	bl	1b0b0 <nan>
   1a4a2:	f000 fcba 	bl	1ae1a <__ieee754_pow+0x9da>
   1a4a6:	990a      	ldr	r1, [sp, #40]	; 0x28
   1a4a8:	2000      	movs	r0, #0
   1a4aa:	9008      	str	r0, [sp, #32]
   1a4ac:	4281      	cmp	r1, r0
   1a4ae:	da2a      	bge.n	1a506 <__ieee754_pow+0xc6>
   1a4b0:	49ac      	ldr	r1, [pc, #688]	; (1a764 <__ieee754_pow+0x324>)
   1a4b2:	428f      	cmp	r7, r1
   1a4b4:	dc25      	bgt.n	1a502 <__ieee754_pow+0xc2>
   1a4b6:	49ac      	ldr	r1, [pc, #688]	; (1a768 <__ieee754_pow+0x328>)
   1a4b8:	428f      	cmp	r7, r1
   1a4ba:	dd24      	ble.n	1a506 <__ieee754_pow+0xc6>
   1a4bc:	48ab      	ldr	r0, [pc, #684]	; (1a76c <__ieee754_pow+0x32c>)
   1a4be:	1539      	asrs	r1, r7, #20
   1a4c0:	4281      	cmp	r1, r0
   1a4c2:	dd0e      	ble.n	1a4e2 <__ieee754_pow+0xa2>
   1a4c4:	48aa      	ldr	r0, [pc, #680]	; (1a770 <__ieee754_pow+0x330>)
   1a4c6:	1a40      	subs	r0, r0, r1
   1a4c8:	1c29      	adds	r1, r5, #0
   1a4ca:	40c1      	lsrs	r1, r0
   1a4cc:	9112      	str	r1, [sp, #72]	; 0x48
   1a4ce:	4081      	lsls	r1, r0
   1a4d0:	4291      	cmp	r1, r2
   1a4d2:	d118      	bne.n	1a506 <__ieee754_pow+0xc6>
   1a4d4:	9812      	ldr	r0, [sp, #72]	; 0x48
   1a4d6:	2101      	movs	r1, #1
   1a4d8:	4008      	ands	r0, r1
   1a4da:	2102      	movs	r1, #2
   1a4dc:	1a09      	subs	r1, r1, r0
   1a4de:	9108      	str	r1, [sp, #32]
   1a4e0:	e011      	b.n	1a506 <__ieee754_pow+0xc6>
   1a4e2:	2a00      	cmp	r2, #0
   1a4e4:	d152      	bne.n	1a58c <__ieee754_pow+0x14c>
   1a4e6:	1a41      	subs	r1, r0, r1
   1a4e8:	1c3b      	adds	r3, r7, #0
   1a4ea:	410b      	asrs	r3, r1
   1a4ec:	1c1a      	adds	r2, r3, #0
   1a4ee:	408a      	lsls	r2, r1
   1a4f0:	9508      	str	r5, [sp, #32]
   1a4f2:	42ba      	cmp	r2, r7
   1a4f4:	d128      	bne.n	1a548 <__ieee754_pow+0x108>
   1a4f6:	2001      	movs	r0, #1
   1a4f8:	4003      	ands	r3, r0
   1a4fa:	2002      	movs	r0, #2
   1a4fc:	1ac0      	subs	r0, r0, r3
   1a4fe:	9008      	str	r0, [sp, #32]
   1a500:	e022      	b.n	1a548 <__ieee754_pow+0x108>
   1a502:	2002      	movs	r0, #2
   1a504:	9008      	str	r0, [sp, #32]
   1a506:	2a00      	cmp	r2, #0
   1a508:	d140      	bne.n	1a58c <__ieee754_pow+0x14c>
   1a50a:	429f      	cmp	r7, r3
   1a50c:	d11c      	bne.n	1a548 <__ieee754_pow+0x108>
   1a50e:	4993      	ldr	r1, [pc, #588]	; (1a75c <__ieee754_pow+0x31c>)
   1a510:	9a06      	ldr	r2, [sp, #24]
   1a512:	1863      	adds	r3, r4, r1
   1a514:	4313      	orrs	r3, r2
   1a516:	d101      	bne.n	1a51c <__ieee754_pow+0xdc>
   1a518:	f000 fc75 	bl	1ae06 <__ieee754_pow+0x9c6>
   1a51c:	4b92      	ldr	r3, [pc, #584]	; (1a768 <__ieee754_pow+0x328>)
   1a51e:	429c      	cmp	r4, r3
   1a520:	dd08      	ble.n	1a534 <__ieee754_pow+0xf4>
   1a522:	9c02      	ldr	r4, [sp, #8]
   1a524:	2c00      	cmp	r4, #0
   1a526:	db01      	blt.n	1a52c <__ieee754_pow+0xec>
   1a528:	f000 fc70 	bl	1ae0c <__ieee754_pow+0x9cc>
   1a52c:	2000      	movs	r0, #0
   1a52e:	1c01      	adds	r1, r0, #0
   1a530:	f000 fc73 	bl	1ae1a <__ieee754_pow+0x9da>
   1a534:	9d02      	ldr	r5, [sp, #8]
   1a536:	2d00      	cmp	r5, #0
   1a538:	daf8      	bge.n	1a52c <__ieee754_pow+0xec>
   1a53a:	9c11      	ldr	r4, [sp, #68]	; 0x44
   1a53c:	2580      	movs	r5, #128	; 0x80
   1a53e:	062d      	lsls	r5, r5, #24
   1a540:	980e      	ldr	r0, [sp, #56]	; 0x38
   1a542:	1961      	adds	r1, r4, r5
   1a544:	f000 fc69 	bl	1ae1a <__ieee754_pow+0x9da>
   1a548:	4b8a      	ldr	r3, [pc, #552]	; (1a774 <__ieee754_pow+0x334>)
   1a54a:	429f      	cmp	r7, r3
   1a54c:	d109      	bne.n	1a562 <__ieee754_pow+0x122>
   1a54e:	9c02      	ldr	r4, [sp, #8]
   1a550:	2c00      	cmp	r4, #0
   1a552:	db01      	blt.n	1a558 <__ieee754_pow+0x118>
   1a554:	f000 fc5d 	bl	1ae12 <__ieee754_pow+0x9d2>
   1a558:	4970      	ldr	r1, [pc, #448]	; (1a71c <__ieee754_pow+0x2dc>)
   1a55a:	486f      	ldr	r0, [pc, #444]	; (1a718 <__ieee754_pow+0x2d8>)
   1a55c:	9a00      	ldr	r2, [sp, #0]
   1a55e:	9b04      	ldr	r3, [sp, #16]
   1a560:	e043      	b.n	1a5ea <__ieee754_pow+0x1aa>
   1a562:	9d02      	ldr	r5, [sp, #8]
   1a564:	2380      	movs	r3, #128	; 0x80
   1a566:	05db      	lsls	r3, r3, #23
   1a568:	429d      	cmp	r5, r3
   1a56a:	d102      	bne.n	1a572 <__ieee754_pow+0x132>
   1a56c:	9800      	ldr	r0, [sp, #0]
   1a56e:	9904      	ldr	r1, [sp, #16]
   1a570:	e066      	b.n	1a640 <__ieee754_pow+0x200>
   1a572:	4b81      	ldr	r3, [pc, #516]	; (1a778 <__ieee754_pow+0x338>)
   1a574:	9d02      	ldr	r5, [sp, #8]
   1a576:	429d      	cmp	r5, r3
   1a578:	d108      	bne.n	1a58c <__ieee754_pow+0x14c>
   1a57a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1a57c:	2d00      	cmp	r5, #0
   1a57e:	db05      	blt.n	1a58c <__ieee754_pow+0x14c>
   1a580:	9800      	ldr	r0, [sp, #0]
   1a582:	9904      	ldr	r1, [sp, #16]
   1a584:	f000 fc9c 	bl	1aec0 <__ieee754_sqrt>
   1a588:	f000 fc47 	bl	1ae1a <__ieee754_pow+0x9da>
   1a58c:	9800      	ldr	r0, [sp, #0]
   1a58e:	9904      	ldr	r1, [sp, #16]
   1a590:	f000 fd54 	bl	1b03c <fabs>
   1a594:	1c06      	adds	r6, r0, #0
   1a596:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a598:	1c0d      	adds	r5, r1, #0
   1a59a:	2800      	cmp	r0, #0
   1a59c:	d134      	bne.n	1a608 <__ieee754_pow+0x1c8>
   1a59e:	2c00      	cmp	r4, #0
   1a5a0:	d005      	beq.n	1a5ae <__ieee754_pow+0x16e>
   1a5a2:	9907      	ldr	r1, [sp, #28]
   1a5a4:	4b73      	ldr	r3, [pc, #460]	; (1a774 <__ieee754_pow+0x334>)
   1a5a6:	008a      	lsls	r2, r1, #2
   1a5a8:	0892      	lsrs	r2, r2, #2
   1a5aa:	429a      	cmp	r2, r3
   1a5ac:	d12c      	bne.n	1a608 <__ieee754_pow+0x1c8>
   1a5ae:	9a02      	ldr	r2, [sp, #8]
   1a5b0:	2a00      	cmp	r2, #0
   1a5b2:	da07      	bge.n	1a5c4 <__ieee754_pow+0x184>
   1a5b4:	1c32      	adds	r2, r6, #0
   1a5b6:	1c2b      	adds	r3, r5, #0
   1a5b8:	4958      	ldr	r1, [pc, #352]	; (1a71c <__ieee754_pow+0x2dc>)
   1a5ba:	4857      	ldr	r0, [pc, #348]	; (1a718 <__ieee754_pow+0x2d8>)
   1a5bc:	f006 faca 	bl	20b54 <__aeabi_ddiv>
   1a5c0:	1c06      	adds	r6, r0, #0
   1a5c2:	1c0d      	adds	r5, r1, #0
   1a5c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a5c6:	1c30      	adds	r0, r6, #0
   1a5c8:	2b00      	cmp	r3, #0
   1a5ca:	db01      	blt.n	1a5d0 <__ieee754_pow+0x190>
   1a5cc:	f000 fc24 	bl	1ae18 <__ieee754_pow+0x9d8>
   1a5d0:	4862      	ldr	r0, [pc, #392]	; (1a75c <__ieee754_pow+0x31c>)
   1a5d2:	9908      	ldr	r1, [sp, #32]
   1a5d4:	1824      	adds	r4, r4, r0
   1a5d6:	430c      	orrs	r4, r1
   1a5d8:	d10b      	bne.n	1a5f2 <__ieee754_pow+0x1b2>
   1a5da:	1c30      	adds	r0, r6, #0
   1a5dc:	1c29      	adds	r1, r5, #0
   1a5de:	1c32      	adds	r2, r6, #0
   1a5e0:	1c2b      	adds	r3, r5, #0
   1a5e2:	f007 f9b9 	bl	21958 <__aeabi_dsub>
   1a5e6:	1c02      	adds	r2, r0, #0
   1a5e8:	1c0b      	adds	r3, r1, #0
   1a5ea:	f006 fab3 	bl	20b54 <__aeabi_ddiv>
   1a5ee:	f000 fc14 	bl	1ae1a <__ieee754_pow+0x9da>
   1a5f2:	9c08      	ldr	r4, [sp, #32]
   1a5f4:	1c30      	adds	r0, r6, #0
   1a5f6:	2c01      	cmp	r4, #1
   1a5f8:	d001      	beq.n	1a5fe <__ieee754_pow+0x1be>
   1a5fa:	f000 fc0d 	bl	1ae18 <__ieee754_pow+0x9d8>
   1a5fe:	2280      	movs	r2, #128	; 0x80
   1a600:	0612      	lsls	r2, r2, #24
   1a602:	18a9      	adds	r1, r5, r2
   1a604:	f000 fc09 	bl	1ae1a <__ieee754_pow+0x9da>
   1a608:	9b07      	ldr	r3, [sp, #28]
   1a60a:	0fd9      	lsrs	r1, r3, #31
   1a60c:	9b08      	ldr	r3, [sp, #32]
   1a60e:	3901      	subs	r1, #1
   1a610:	9113      	str	r1, [sp, #76]	; 0x4c
   1a612:	430b      	orrs	r3, r1
   1a614:	d104      	bne.n	1a620 <__ieee754_pow+0x1e0>
   1a616:	9800      	ldr	r0, [sp, #0]
   1a618:	9904      	ldr	r1, [sp, #16]
   1a61a:	1c02      	adds	r2, r0, #0
   1a61c:	1c0b      	adds	r3, r1, #0
   1a61e:	e7e0      	b.n	1a5e2 <__ieee754_pow+0x1a2>
   1a620:	4b56      	ldr	r3, [pc, #344]	; (1a77c <__ieee754_pow+0x33c>)
   1a622:	429f      	cmp	r7, r3
   1a624:	dc00      	bgt.n	1a628 <__ieee754_pow+0x1e8>
   1a626:	e0af      	b.n	1a788 <__ieee754_pow+0x348>
   1a628:	4b55      	ldr	r3, [pc, #340]	; (1a780 <__ieee754_pow+0x340>)
   1a62a:	429f      	cmp	r7, r3
   1a62c:	dd0e      	ble.n	1a64c <__ieee754_pow+0x20c>
   1a62e:	4b4e      	ldr	r3, [pc, #312]	; (1a768 <__ieee754_pow+0x328>)
   1a630:	429c      	cmp	r4, r3
   1a632:	dc11      	bgt.n	1a658 <__ieee754_pow+0x218>
   1a634:	9c02      	ldr	r4, [sp, #8]
   1a636:	2c00      	cmp	r4, #0
   1a638:	db00      	blt.n	1a63c <__ieee754_pow+0x1fc>
   1a63a:	e777      	b.n	1a52c <__ieee754_pow+0xec>
   1a63c:	4838      	ldr	r0, [pc, #224]	; (1a720 <__ieee754_pow+0x2e0>)
   1a63e:	4939      	ldr	r1, [pc, #228]	; (1a724 <__ieee754_pow+0x2e4>)
   1a640:	1c02      	adds	r2, r0, #0
   1a642:	1c0b      	adds	r3, r1, #0
   1a644:	f006 fef6 	bl	21434 <__aeabi_dmul>
   1a648:	f000 fbe7 	bl	1ae1a <__ieee754_pow+0x9da>
   1a64c:	4b4d      	ldr	r3, [pc, #308]	; (1a784 <__ieee754_pow+0x344>)
   1a64e:	429c      	cmp	r4, r3
   1a650:	ddf0      	ble.n	1a634 <__ieee754_pow+0x1f4>
   1a652:	4b48      	ldr	r3, [pc, #288]	; (1a774 <__ieee754_pow+0x334>)
   1a654:	429c      	cmp	r4, r3
   1a656:	dd03      	ble.n	1a660 <__ieee754_pow+0x220>
   1a658:	9d02      	ldr	r5, [sp, #8]
   1a65a:	2d00      	cmp	r5, #0
   1a65c:	dcee      	bgt.n	1a63c <__ieee754_pow+0x1fc>
   1a65e:	e765      	b.n	1a52c <__ieee754_pow+0xec>
   1a660:	1c30      	adds	r0, r6, #0
   1a662:	1c29      	adds	r1, r5, #0
   1a664:	4b2d      	ldr	r3, [pc, #180]	; (1a71c <__ieee754_pow+0x2dc>)
   1a666:	4a2c      	ldr	r2, [pc, #176]	; (1a718 <__ieee754_pow+0x2d8>)
   1a668:	f007 f976 	bl	21958 <__aeabi_dsub>
   1a66c:	4a2e      	ldr	r2, [pc, #184]	; (1a728 <__ieee754_pow+0x2e8>)
   1a66e:	4b2f      	ldr	r3, [pc, #188]	; (1a72c <__ieee754_pow+0x2ec>)
   1a670:	1c04      	adds	r4, r0, #0
   1a672:	1c0d      	adds	r5, r1, #0
   1a674:	f006 fede 	bl	21434 <__aeabi_dmul>
   1a678:	4a2d      	ldr	r2, [pc, #180]	; (1a730 <__ieee754_pow+0x2f0>)
   1a67a:	4b2e      	ldr	r3, [pc, #184]	; (1a734 <__ieee754_pow+0x2f4>)
   1a67c:	1c06      	adds	r6, r0, #0
   1a67e:	1c0f      	adds	r7, r1, #0
   1a680:	1c20      	adds	r0, r4, #0
   1a682:	1c29      	adds	r1, r5, #0
   1a684:	f006 fed6 	bl	21434 <__aeabi_dmul>
   1a688:	1c22      	adds	r2, r4, #0
   1a68a:	9002      	str	r0, [sp, #8]
   1a68c:	9103      	str	r1, [sp, #12]
   1a68e:	1c2b      	adds	r3, r5, #0
   1a690:	1c20      	adds	r0, r4, #0
   1a692:	1c29      	adds	r1, r5, #0
   1a694:	f006 fece 	bl	21434 <__aeabi_dmul>
   1a698:	4a27      	ldr	r2, [pc, #156]	; (1a738 <__ieee754_pow+0x2f8>)
   1a69a:	4b28      	ldr	r3, [pc, #160]	; (1a73c <__ieee754_pow+0x2fc>)
   1a69c:	9000      	str	r0, [sp, #0]
   1a69e:	9101      	str	r1, [sp, #4]
   1a6a0:	1c20      	adds	r0, r4, #0
   1a6a2:	1c29      	adds	r1, r5, #0
   1a6a4:	f006 fec6 	bl	21434 <__aeabi_dmul>
   1a6a8:	1c02      	adds	r2, r0, #0
   1a6aa:	1c0b      	adds	r3, r1, #0
   1a6ac:	4824      	ldr	r0, [pc, #144]	; (1a740 <__ieee754_pow+0x300>)
   1a6ae:	4925      	ldr	r1, [pc, #148]	; (1a744 <__ieee754_pow+0x304>)
   1a6b0:	f007 f952 	bl	21958 <__aeabi_dsub>
   1a6b4:	1c02      	adds	r2, r0, #0
   1a6b6:	1c0b      	adds	r3, r1, #0
   1a6b8:	1c20      	adds	r0, r4, #0
   1a6ba:	1c29      	adds	r1, r5, #0
   1a6bc:	f006 feba 	bl	21434 <__aeabi_dmul>
   1a6c0:	1c02      	adds	r2, r0, #0
   1a6c2:	1c0b      	adds	r3, r1, #0
   1a6c4:	4820      	ldr	r0, [pc, #128]	; (1a748 <__ieee754_pow+0x308>)
   1a6c6:	4921      	ldr	r1, [pc, #132]	; (1a74c <__ieee754_pow+0x30c>)
   1a6c8:	f007 f946 	bl	21958 <__aeabi_dsub>
   1a6cc:	1c02      	adds	r2, r0, #0
   1a6ce:	1c0b      	adds	r3, r1, #0
   1a6d0:	9800      	ldr	r0, [sp, #0]
   1a6d2:	9901      	ldr	r1, [sp, #4]
   1a6d4:	f006 feae 	bl	21434 <__aeabi_dmul>
   1a6d8:	4a1d      	ldr	r2, [pc, #116]	; (1a750 <__ieee754_pow+0x310>)
   1a6da:	4b1e      	ldr	r3, [pc, #120]	; (1a754 <__ieee754_pow+0x314>)
   1a6dc:	f006 feaa 	bl	21434 <__aeabi_dmul>
   1a6e0:	1c02      	adds	r2, r0, #0
   1a6e2:	1c0b      	adds	r3, r1, #0
   1a6e4:	9802      	ldr	r0, [sp, #8]
   1a6e6:	9903      	ldr	r1, [sp, #12]
   1a6e8:	f007 f936 	bl	21958 <__aeabi_dsub>
   1a6ec:	1c04      	adds	r4, r0, #0
   1a6ee:	1c0d      	adds	r5, r1, #0
   1a6f0:	1c22      	adds	r2, r4, #0
   1a6f2:	1c2b      	adds	r3, r5, #0
   1a6f4:	1c30      	adds	r0, r6, #0
   1a6f6:	1c39      	adds	r1, r7, #0
   1a6f8:	f005 ff08 	bl	2050c <__aeabi_dadd>
   1a6fc:	2000      	movs	r0, #0
   1a6fe:	1c32      	adds	r2, r6, #0
   1a700:	1c3b      	adds	r3, r7, #0
   1a702:	9000      	str	r0, [sp, #0]
   1a704:	9101      	str	r1, [sp, #4]
   1a706:	f007 f927 	bl	21958 <__aeabi_dsub>
   1a70a:	1c02      	adds	r2, r0, #0
   1a70c:	1c0b      	adds	r3, r1, #0
   1a70e:	1c20      	adds	r0, r4, #0
   1a710:	1c29      	adds	r1, r5, #0
   1a712:	e203      	b.n	1ab1c <__ieee754_pow+0x6dc>
   1a714:	46c0      	nop			; (mov r8, r8)
   1a716:	46c0      	nop			; (mov r8, r8)
   1a718:	00000000 	.word	0x00000000
   1a71c:	3ff00000 	.word	0x3ff00000
   1a720:	8800759c 	.word	0x8800759c
   1a724:	7e37e43c 	.word	0x7e37e43c
   1a728:	60000000 	.word	0x60000000
   1a72c:	3ff71547 	.word	0x3ff71547
   1a730:	f85ddf44 	.word	0xf85ddf44
   1a734:	3e54ae0b 	.word	0x3e54ae0b
   1a738:	00000000 	.word	0x00000000
   1a73c:	3fd00000 	.word	0x3fd00000
   1a740:	55555555 	.word	0x55555555
   1a744:	3fd55555 	.word	0x3fd55555
   1a748:	00000000 	.word	0x00000000
   1a74c:	3fe00000 	.word	0x3fe00000
   1a750:	652b82fe 	.word	0x652b82fe
   1a754:	3ff71547 	.word	0x3ff71547
   1a758:	7ff00000 	.word	0x7ff00000
   1a75c:	c0100000 	.word	0xc0100000
   1a760:	00026f5b 	.word	0x00026f5b
   1a764:	433fffff 	.word	0x433fffff
   1a768:	3fefffff 	.word	0x3fefffff
   1a76c:	00000413 	.word	0x00000413
   1a770:	00000433 	.word	0x00000433
   1a774:	3ff00000 	.word	0x3ff00000
   1a778:	3fe00000 	.word	0x3fe00000
   1a77c:	41e00000 	.word	0x41e00000
   1a780:	43f00000 	.word	0x43f00000
   1a784:	3feffffe 	.word	0x3feffffe
   1a788:	4add      	ldr	r2, [pc, #884]	; (1ab00 <__ieee754_pow+0x6c0>)
   1a78a:	2300      	movs	r3, #0
   1a78c:	4294      	cmp	r4, r2
   1a78e:	dc09      	bgt.n	1a7a4 <__ieee754_pow+0x364>
   1a790:	1c30      	adds	r0, r6, #0
   1a792:	4bc2      	ldr	r3, [pc, #776]	; (1aa9c <__ieee754_pow+0x65c>)
   1a794:	4ac0      	ldr	r2, [pc, #768]	; (1aa98 <__ieee754_pow+0x658>)
   1a796:	1c29      	adds	r1, r5, #0
   1a798:	f006 fe4c 	bl	21434 <__aeabi_dmul>
   1a79c:	2335      	movs	r3, #53	; 0x35
   1a79e:	1c06      	adds	r6, r0, #0
   1a7a0:	1c0c      	adds	r4, r1, #0
   1a7a2:	425b      	negs	r3, r3
   1a7a4:	48d7      	ldr	r0, [pc, #860]	; (1ab04 <__ieee754_pow+0x6c4>)
   1a7a6:	1522      	asrs	r2, r4, #20
   1a7a8:	1812      	adds	r2, r2, r0
   1a7aa:	189a      	adds	r2, r3, r2
   1a7ac:	0324      	lsls	r4, r4, #12
   1a7ae:	9206      	str	r2, [sp, #24]
   1a7b0:	4fd5      	ldr	r7, [pc, #852]	; (1ab08 <__ieee754_pow+0x6c8>)
   1a7b2:	4ad6      	ldr	r2, [pc, #856]	; (1ab0c <__ieee754_pow+0x6cc>)
   1a7b4:	0b23      	lsrs	r3, r4, #12
   1a7b6:	431f      	orrs	r7, r3
   1a7b8:	2400      	movs	r4, #0
   1a7ba:	4293      	cmp	r3, r2
   1a7bc:	dd09      	ble.n	1a7d2 <__ieee754_pow+0x392>
   1a7be:	4ad4      	ldr	r2, [pc, #848]	; (1ab10 <__ieee754_pow+0x6d0>)
   1a7c0:	2401      	movs	r4, #1
   1a7c2:	4293      	cmp	r3, r2
   1a7c4:	dd05      	ble.n	1a7d2 <__ieee754_pow+0x392>
   1a7c6:	9c06      	ldr	r4, [sp, #24]
   1a7c8:	48d2      	ldr	r0, [pc, #840]	; (1ab14 <__ieee754_pow+0x6d4>)
   1a7ca:	3401      	adds	r4, #1
   1a7cc:	9406      	str	r4, [sp, #24]
   1a7ce:	183f      	adds	r7, r7, r0
   1a7d0:	2400      	movs	r4, #0
   1a7d2:	1c32      	adds	r2, r6, #0
   1a7d4:	1c3b      	adds	r3, r7, #0
   1a7d6:	920a      	str	r2, [sp, #40]	; 0x28
   1a7d8:	930b      	str	r3, [sp, #44]	; 0x2c
   1a7da:	4acf      	ldr	r2, [pc, #828]	; (1ab18 <__ieee754_pow+0x6d8>)
   1a7dc:	00e3      	lsls	r3, r4, #3
   1a7de:	18d3      	adds	r3, r2, r3
   1a7e0:	6819      	ldr	r1, [r3, #0]
   1a7e2:	685a      	ldr	r2, [r3, #4]
   1a7e4:	910c      	str	r1, [sp, #48]	; 0x30
   1a7e6:	920d      	str	r2, [sp, #52]	; 0x34
   1a7e8:	980a      	ldr	r0, [sp, #40]	; 0x28
   1a7ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1a7ec:	9312      	str	r3, [sp, #72]	; 0x48
   1a7ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a7f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a7f2:	f007 f8b1 	bl	21958 <__aeabi_dsub>
   1a7f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a7f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a7fa:	9014      	str	r0, [sp, #80]	; 0x50
   1a7fc:	9115      	str	r1, [sp, #84]	; 0x54
   1a7fe:	980a      	ldr	r0, [sp, #40]	; 0x28
   1a800:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1a802:	f005 fe83 	bl	2050c <__aeabi_dadd>
   1a806:	1c02      	adds	r2, r0, #0
   1a808:	1c0b      	adds	r3, r1, #0
   1a80a:	48a5      	ldr	r0, [pc, #660]	; (1aaa0 <__ieee754_pow+0x660>)
   1a80c:	49a5      	ldr	r1, [pc, #660]	; (1aaa4 <__ieee754_pow+0x664>)
   1a80e:	f006 f9a1 	bl	20b54 <__aeabi_ddiv>
   1a812:	9016      	str	r0, [sp, #88]	; 0x58
   1a814:	9117      	str	r1, [sp, #92]	; 0x5c
   1a816:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1a818:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1a81a:	9814      	ldr	r0, [sp, #80]	; 0x50
   1a81c:	9915      	ldr	r1, [sp, #84]	; 0x54
   1a81e:	f006 fe09 	bl	21434 <__aeabi_dmul>
   1a822:	2300      	movs	r3, #0
   1a824:	9000      	str	r0, [sp, #0]
   1a826:	9101      	str	r1, [sp, #4]
   1a828:	9300      	str	r3, [sp, #0]
   1a82a:	9004      	str	r0, [sp, #16]
   1a82c:	9105      	str	r1, [sp, #20]
   1a82e:	9800      	ldr	r0, [sp, #0]
   1a830:	9901      	ldr	r1, [sp, #4]
   1a832:	4a9d      	ldr	r2, [pc, #628]	; (1aaa8 <__ieee754_pow+0x668>)
   1a834:	4b9d      	ldr	r3, [pc, #628]	; (1aaac <__ieee754_pow+0x66c>)
   1a836:	9002      	str	r0, [sp, #8]
   1a838:	9103      	str	r1, [sp, #12]
   1a83a:	2180      	movs	r1, #128	; 0x80
   1a83c:	0589      	lsls	r1, r1, #22
   1a83e:	107f      	asrs	r7, r7, #1
   1a840:	430f      	orrs	r7, r1
   1a842:	2180      	movs	r1, #128	; 0x80
   1a844:	0309      	lsls	r1, r1, #12
   1a846:	187f      	adds	r7, r7, r1
   1a848:	04a4      	lsls	r4, r4, #18
   1a84a:	193b      	adds	r3, r7, r4
   1a84c:	9802      	ldr	r0, [sp, #8]
   1a84e:	9903      	ldr	r1, [sp, #12]
   1a850:	1c14      	adds	r4, r2, #0
   1a852:	1c1d      	adds	r5, r3, #0
   1a854:	f006 fdee 	bl	21434 <__aeabi_dmul>
   1a858:	1c02      	adds	r2, r0, #0
   1a85a:	1c0b      	adds	r3, r1, #0
   1a85c:	9814      	ldr	r0, [sp, #80]	; 0x50
   1a85e:	9915      	ldr	r1, [sp, #84]	; 0x54
   1a860:	f007 f87a 	bl	21958 <__aeabi_dsub>
   1a864:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a868:	1c06      	adds	r6, r0, #0
   1a86a:	1c0f      	adds	r7, r1, #0
   1a86c:	1c20      	adds	r0, r4, #0
   1a86e:	1c29      	adds	r1, r5, #0
   1a870:	f007 f872 	bl	21958 <__aeabi_dsub>
   1a874:	1c02      	adds	r2, r0, #0
   1a876:	1c0b      	adds	r3, r1, #0
   1a878:	980a      	ldr	r0, [sp, #40]	; 0x28
   1a87a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1a87c:	f007 f86c 	bl	21958 <__aeabi_dsub>
   1a880:	1c02      	adds	r2, r0, #0
   1a882:	1c0b      	adds	r3, r1, #0
   1a884:	9802      	ldr	r0, [sp, #8]
   1a886:	9903      	ldr	r1, [sp, #12]
   1a888:	f006 fdd4 	bl	21434 <__aeabi_dmul>
   1a88c:	1c02      	adds	r2, r0, #0
   1a88e:	1c0b      	adds	r3, r1, #0
   1a890:	1c30      	adds	r0, r6, #0
   1a892:	1c39      	adds	r1, r7, #0
   1a894:	f007 f860 	bl	21958 <__aeabi_dsub>
   1a898:	1c02      	adds	r2, r0, #0
   1a89a:	1c0b      	adds	r3, r1, #0
   1a89c:	9816      	ldr	r0, [sp, #88]	; 0x58
   1a89e:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1a8a0:	f006 fdc8 	bl	21434 <__aeabi_dmul>
   1a8a4:	900a      	str	r0, [sp, #40]	; 0x28
   1a8a6:	910b      	str	r1, [sp, #44]	; 0x2c
   1a8a8:	9804      	ldr	r0, [sp, #16]
   1a8aa:	9905      	ldr	r1, [sp, #20]
   1a8ac:	1c02      	adds	r2, r0, #0
   1a8ae:	1c0b      	adds	r3, r1, #0
   1a8b0:	f006 fdc0 	bl	21434 <__aeabi_dmul>
   1a8b4:	1c04      	adds	r4, r0, #0
   1a8b6:	1c0d      	adds	r5, r1, #0
   1a8b8:	1c22      	adds	r2, r4, #0
   1a8ba:	1c2b      	adds	r3, r5, #0
   1a8bc:	f006 fdba 	bl	21434 <__aeabi_dmul>
   1a8c0:	4a7b      	ldr	r2, [pc, #492]	; (1aab0 <__ieee754_pow+0x670>)
   1a8c2:	4b7c      	ldr	r3, [pc, #496]	; (1aab4 <__ieee754_pow+0x674>)
   1a8c4:	1c06      	adds	r6, r0, #0
   1a8c6:	1c0f      	adds	r7, r1, #0
   1a8c8:	1c20      	adds	r0, r4, #0
   1a8ca:	1c29      	adds	r1, r5, #0
   1a8cc:	f006 fdb2 	bl	21434 <__aeabi_dmul>
   1a8d0:	4a79      	ldr	r2, [pc, #484]	; (1aab8 <__ieee754_pow+0x678>)
   1a8d2:	4b7a      	ldr	r3, [pc, #488]	; (1aabc <__ieee754_pow+0x67c>)
   1a8d4:	f005 fe1a 	bl	2050c <__aeabi_dadd>
   1a8d8:	1c02      	adds	r2, r0, #0
   1a8da:	1c0b      	adds	r3, r1, #0
   1a8dc:	1c20      	adds	r0, r4, #0
   1a8de:	1c29      	adds	r1, r5, #0
   1a8e0:	f006 fda8 	bl	21434 <__aeabi_dmul>
   1a8e4:	4a76      	ldr	r2, [pc, #472]	; (1aac0 <__ieee754_pow+0x680>)
   1a8e6:	4b77      	ldr	r3, [pc, #476]	; (1aac4 <__ieee754_pow+0x684>)
   1a8e8:	f005 fe10 	bl	2050c <__aeabi_dadd>
   1a8ec:	1c02      	adds	r2, r0, #0
   1a8ee:	1c0b      	adds	r3, r1, #0
   1a8f0:	1c20      	adds	r0, r4, #0
   1a8f2:	1c29      	adds	r1, r5, #0
   1a8f4:	f006 fd9e 	bl	21434 <__aeabi_dmul>
   1a8f8:	4a73      	ldr	r2, [pc, #460]	; (1aac8 <__ieee754_pow+0x688>)
   1a8fa:	4b74      	ldr	r3, [pc, #464]	; (1aacc <__ieee754_pow+0x68c>)
   1a8fc:	f005 fe06 	bl	2050c <__aeabi_dadd>
   1a900:	1c02      	adds	r2, r0, #0
   1a902:	1c0b      	adds	r3, r1, #0
   1a904:	1c20      	adds	r0, r4, #0
   1a906:	1c29      	adds	r1, r5, #0
   1a908:	f006 fd94 	bl	21434 <__aeabi_dmul>
   1a90c:	4a70      	ldr	r2, [pc, #448]	; (1aad0 <__ieee754_pow+0x690>)
   1a90e:	4b71      	ldr	r3, [pc, #452]	; (1aad4 <__ieee754_pow+0x694>)
   1a910:	f005 fdfc 	bl	2050c <__aeabi_dadd>
   1a914:	1c02      	adds	r2, r0, #0
   1a916:	1c0b      	adds	r3, r1, #0
   1a918:	1c20      	adds	r0, r4, #0
   1a91a:	1c29      	adds	r1, r5, #0
   1a91c:	f006 fd8a 	bl	21434 <__aeabi_dmul>
   1a920:	4a6d      	ldr	r2, [pc, #436]	; (1aad8 <__ieee754_pow+0x698>)
   1a922:	4b6e      	ldr	r3, [pc, #440]	; (1aadc <__ieee754_pow+0x69c>)
   1a924:	f005 fdf2 	bl	2050c <__aeabi_dadd>
   1a928:	1c02      	adds	r2, r0, #0
   1a92a:	1c0b      	adds	r3, r1, #0
   1a92c:	1c30      	adds	r0, r6, #0
   1a92e:	1c39      	adds	r1, r7, #0
   1a930:	f006 fd80 	bl	21434 <__aeabi_dmul>
   1a934:	9a04      	ldr	r2, [sp, #16]
   1a936:	9b05      	ldr	r3, [sp, #20]
   1a938:	1c04      	adds	r4, r0, #0
   1a93a:	1c0d      	adds	r5, r1, #0
   1a93c:	9802      	ldr	r0, [sp, #8]
   1a93e:	9903      	ldr	r1, [sp, #12]
   1a940:	f005 fde4 	bl	2050c <__aeabi_dadd>
   1a944:	1c02      	adds	r2, r0, #0
   1a946:	1c0b      	adds	r3, r1, #0
   1a948:	980a      	ldr	r0, [sp, #40]	; 0x28
   1a94a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1a94c:	f006 fd72 	bl	21434 <__aeabi_dmul>
   1a950:	1c02      	adds	r2, r0, #0
   1a952:	1c0b      	adds	r3, r1, #0
   1a954:	1c20      	adds	r0, r4, #0
   1a956:	1c29      	adds	r1, r5, #0
   1a958:	f005 fdd8 	bl	2050c <__aeabi_dadd>
   1a95c:	1c06      	adds	r6, r0, #0
   1a95e:	1c0f      	adds	r7, r1, #0
   1a960:	9802      	ldr	r0, [sp, #8]
   1a962:	9903      	ldr	r1, [sp, #12]
   1a964:	1c02      	adds	r2, r0, #0
   1a966:	1c0b      	adds	r3, r1, #0
   1a968:	f006 fd64 	bl	21434 <__aeabi_dmul>
   1a96c:	4a5c      	ldr	r2, [pc, #368]	; (1aae0 <__ieee754_pow+0x6a0>)
   1a96e:	4b5d      	ldr	r3, [pc, #372]	; (1aae4 <__ieee754_pow+0x6a4>)
   1a970:	900c      	str	r0, [sp, #48]	; 0x30
   1a972:	910d      	str	r1, [sp, #52]	; 0x34
   1a974:	f005 fdca 	bl	2050c <__aeabi_dadd>
   1a978:	1c32      	adds	r2, r6, #0
   1a97a:	1c3b      	adds	r3, r7, #0
   1a97c:	f005 fdc6 	bl	2050c <__aeabi_dadd>
   1a980:	9c00      	ldr	r4, [sp, #0]
   1a982:	1c0d      	adds	r5, r1, #0
   1a984:	1c22      	adds	r2, r4, #0
   1a986:	9802      	ldr	r0, [sp, #8]
   1a988:	9903      	ldr	r1, [sp, #12]
   1a98a:	1c2b      	adds	r3, r5, #0
   1a98c:	f006 fd52 	bl	21434 <__aeabi_dmul>
   1a990:	1c22      	adds	r2, r4, #0
   1a992:	1c2b      	adds	r3, r5, #0
   1a994:	9002      	str	r0, [sp, #8]
   1a996:	9103      	str	r1, [sp, #12]
   1a998:	980a      	ldr	r0, [sp, #40]	; 0x28
   1a99a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1a99c:	f006 fd4a 	bl	21434 <__aeabi_dmul>
   1a9a0:	4a4f      	ldr	r2, [pc, #316]	; (1aae0 <__ieee754_pow+0x6a0>)
   1a9a2:	4b50      	ldr	r3, [pc, #320]	; (1aae4 <__ieee754_pow+0x6a4>)
   1a9a4:	900a      	str	r0, [sp, #40]	; 0x28
   1a9a6:	910b      	str	r1, [sp, #44]	; 0x2c
   1a9a8:	1c20      	adds	r0, r4, #0
   1a9aa:	1c29      	adds	r1, r5, #0
   1a9ac:	f006 ffd4 	bl	21958 <__aeabi_dsub>
   1a9b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a9b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a9b4:	f006 ffd0 	bl	21958 <__aeabi_dsub>
   1a9b8:	1c02      	adds	r2, r0, #0
   1a9ba:	1c0b      	adds	r3, r1, #0
   1a9bc:	1c30      	adds	r0, r6, #0
   1a9be:	1c39      	adds	r1, r7, #0
   1a9c0:	f006 ffca 	bl	21958 <__aeabi_dsub>
   1a9c4:	9a04      	ldr	r2, [sp, #16]
   1a9c6:	9b05      	ldr	r3, [sp, #20]
   1a9c8:	f006 fd34 	bl	21434 <__aeabi_dmul>
   1a9cc:	1c02      	adds	r2, r0, #0
   1a9ce:	1c0b      	adds	r3, r1, #0
   1a9d0:	980a      	ldr	r0, [sp, #40]	; 0x28
   1a9d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1a9d4:	f005 fd9a 	bl	2050c <__aeabi_dadd>
   1a9d8:	1c06      	adds	r6, r0, #0
   1a9da:	1c0f      	adds	r7, r1, #0
   1a9dc:	1c32      	adds	r2, r6, #0
   1a9de:	9802      	ldr	r0, [sp, #8]
   1a9e0:	9903      	ldr	r1, [sp, #12]
   1a9e2:	1c3b      	adds	r3, r7, #0
   1a9e4:	f005 fd92 	bl	2050c <__aeabi_dadd>
   1a9e8:	4a3f      	ldr	r2, [pc, #252]	; (1aae8 <__ieee754_pow+0x6a8>)
   1a9ea:	4b40      	ldr	r3, [pc, #256]	; (1aaec <__ieee754_pow+0x6ac>)
   1a9ec:	9c00      	ldr	r4, [sp, #0]
   1a9ee:	1c0d      	adds	r5, r1, #0
   1a9f0:	1c20      	adds	r0, r4, #0
   1a9f2:	f006 fd1f 	bl	21434 <__aeabi_dmul>
   1a9f6:	4a3e      	ldr	r2, [pc, #248]	; (1aaf0 <__ieee754_pow+0x6b0>)
   1a9f8:	4b3e      	ldr	r3, [pc, #248]	; (1aaf4 <__ieee754_pow+0x6b4>)
   1a9fa:	9004      	str	r0, [sp, #16]
   1a9fc:	9105      	str	r1, [sp, #20]
   1a9fe:	1c20      	adds	r0, r4, #0
   1aa00:	1c29      	adds	r1, r5, #0
   1aa02:	f006 fd17 	bl	21434 <__aeabi_dmul>
   1aa06:	9a02      	ldr	r2, [sp, #8]
   1aa08:	9b03      	ldr	r3, [sp, #12]
   1aa0a:	900a      	str	r0, [sp, #40]	; 0x28
   1aa0c:	910b      	str	r1, [sp, #44]	; 0x2c
   1aa0e:	1c20      	adds	r0, r4, #0
   1aa10:	1c29      	adds	r1, r5, #0
   1aa12:	f006 ffa1 	bl	21958 <__aeabi_dsub>
   1aa16:	1c02      	adds	r2, r0, #0
   1aa18:	1c0b      	adds	r3, r1, #0
   1aa1a:	1c30      	adds	r0, r6, #0
   1aa1c:	1c39      	adds	r1, r7, #0
   1aa1e:	f006 ff9b 	bl	21958 <__aeabi_dsub>
   1aa22:	4a35      	ldr	r2, [pc, #212]	; (1aaf8 <__ieee754_pow+0x6b8>)
   1aa24:	4b35      	ldr	r3, [pc, #212]	; (1aafc <__ieee754_pow+0x6bc>)
   1aa26:	f006 fd05 	bl	21434 <__aeabi_dmul>
   1aa2a:	1c02      	adds	r2, r0, #0
   1aa2c:	1c0b      	adds	r3, r1, #0
   1aa2e:	980a      	ldr	r0, [sp, #40]	; 0x28
   1aa30:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1aa32:	f005 fd6b 	bl	2050c <__aeabi_dadd>
   1aa36:	9c12      	ldr	r4, [sp, #72]	; 0x48
   1aa38:	6922      	ldr	r2, [r4, #16]
   1aa3a:	6963      	ldr	r3, [r4, #20]
   1aa3c:	f005 fd66 	bl	2050c <__aeabi_dadd>
   1aa40:	9002      	str	r0, [sp, #8]
   1aa42:	9103      	str	r1, [sp, #12]
   1aa44:	9806      	ldr	r0, [sp, #24]
   1aa46:	f007 faf1 	bl	2202c <__aeabi_i2d>
   1aa4a:	9a02      	ldr	r2, [sp, #8]
   1aa4c:	9b03      	ldr	r3, [sp, #12]
   1aa4e:	1c04      	adds	r4, r0, #0
   1aa50:	9812      	ldr	r0, [sp, #72]	; 0x48
   1aa52:	1c0d      	adds	r5, r1, #0
   1aa54:	6a06      	ldr	r6, [r0, #32]
   1aa56:	6a47      	ldr	r7, [r0, #36]	; 0x24
   1aa58:	9804      	ldr	r0, [sp, #16]
   1aa5a:	9905      	ldr	r1, [sp, #20]
   1aa5c:	f005 fd56 	bl	2050c <__aeabi_dadd>
   1aa60:	1c32      	adds	r2, r6, #0
   1aa62:	1c3b      	adds	r3, r7, #0
   1aa64:	f005 fd52 	bl	2050c <__aeabi_dadd>
   1aa68:	1c22      	adds	r2, r4, #0
   1aa6a:	1c2b      	adds	r3, r5, #0
   1aa6c:	f005 fd4e 	bl	2050c <__aeabi_dadd>
   1aa70:	9800      	ldr	r0, [sp, #0]
   1aa72:	1c22      	adds	r2, r4, #0
   1aa74:	1c2b      	adds	r3, r5, #0
   1aa76:	9000      	str	r0, [sp, #0]
   1aa78:	9101      	str	r1, [sp, #4]
   1aa7a:	f006 ff6d 	bl	21958 <__aeabi_dsub>
   1aa7e:	1c32      	adds	r2, r6, #0
   1aa80:	1c3b      	adds	r3, r7, #0
   1aa82:	f006 ff69 	bl	21958 <__aeabi_dsub>
   1aa86:	9a04      	ldr	r2, [sp, #16]
   1aa88:	9b05      	ldr	r3, [sp, #20]
   1aa8a:	f006 ff65 	bl	21958 <__aeabi_dsub>
   1aa8e:	1c02      	adds	r2, r0, #0
   1aa90:	1c0b      	adds	r3, r1, #0
   1aa92:	9802      	ldr	r0, [sp, #8]
   1aa94:	9903      	ldr	r1, [sp, #12]
   1aa96:	e041      	b.n	1ab1c <__ieee754_pow+0x6dc>
   1aa98:	00000000 	.word	0x00000000
   1aa9c:	43400000 	.word	0x43400000
   1aaa0:	00000000 	.word	0x00000000
   1aaa4:	3ff00000 	.word	0x3ff00000
	...
   1aab0:	4a454eef 	.word	0x4a454eef
   1aab4:	3fca7e28 	.word	0x3fca7e28
   1aab8:	93c9db65 	.word	0x93c9db65
   1aabc:	3fcd864a 	.word	0x3fcd864a
   1aac0:	a91d4101 	.word	0xa91d4101
   1aac4:	3fd17460 	.word	0x3fd17460
   1aac8:	518f264d 	.word	0x518f264d
   1aacc:	3fd55555 	.word	0x3fd55555
   1aad0:	db6fabff 	.word	0xdb6fabff
   1aad4:	3fdb6db6 	.word	0x3fdb6db6
   1aad8:	33333303 	.word	0x33333303
   1aadc:	3fe33333 	.word	0x3fe33333
   1aae0:	00000000 	.word	0x00000000
   1aae4:	40080000 	.word	0x40080000
   1aae8:	e0000000 	.word	0xe0000000
   1aaec:	3feec709 	.word	0x3feec709
   1aaf0:	145b01f5 	.word	0x145b01f5
   1aaf4:	be3e2fe0 	.word	0xbe3e2fe0
   1aaf8:	dc3a03fd 	.word	0xdc3a03fd
   1aafc:	3feec709 	.word	0x3feec709
   1ab00:	000fffff 	.word	0x000fffff
   1ab04:	fffffc01 	.word	0xfffffc01
   1ab08:	3ff00000 	.word	0x3ff00000
   1ab0c:	0003988e 	.word	0x0003988e
   1ab10:	000bb679 	.word	0x000bb679
   1ab14:	fff00000 	.word	0xfff00000
   1ab18:	00026f60 	.word	0x00026f60
   1ab1c:	f006 ff1c 	bl	21958 <__aeabi_dsub>
   1ab20:	1c06      	adds	r6, r0, #0
   1ab22:	9808      	ldr	r0, [sp, #32]
   1ab24:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   1ab26:	3801      	subs	r0, #1
   1ab28:	1c0f      	adds	r7, r1, #0
   1ab2a:	4320      	orrs	r0, r4
   1ab2c:	d102      	bne.n	1ab34 <__ieee754_pow+0x6f4>
   1ab2e:	4dbd      	ldr	r5, [pc, #756]	; (1ae24 <__ieee754_pow+0x9e4>)
   1ab30:	4cbb      	ldr	r4, [pc, #748]	; (1ae20 <__ieee754_pow+0x9e0>)
   1ab32:	e001      	b.n	1ab38 <__ieee754_pow+0x6f8>
   1ab34:	4cbc      	ldr	r4, [pc, #752]	; (1ae28 <__ieee754_pow+0x9e8>)
   1ab36:	4dbd      	ldr	r5, [pc, #756]	; (1ae2c <__ieee754_pow+0x9ec>)
   1ab38:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ab3a:	2200      	movs	r2, #0
   1ab3c:	1c19      	adds	r1, r3, #0
   1ab3e:	980e      	ldr	r0, [sp, #56]	; 0x38
   1ab40:	9402      	str	r4, [sp, #8]
   1ab42:	9503      	str	r5, [sp, #12]
   1ab44:	1c14      	adds	r4, r2, #0
   1ab46:	1c1d      	adds	r5, r3, #0
   1ab48:	f006 ff06 	bl	21958 <__aeabi_dsub>
   1ab4c:	9a00      	ldr	r2, [sp, #0]
   1ab4e:	9b01      	ldr	r3, [sp, #4]
   1ab50:	f006 fc70 	bl	21434 <__aeabi_dmul>
   1ab54:	1c32      	adds	r2, r6, #0
   1ab56:	9004      	str	r0, [sp, #16]
   1ab58:	9105      	str	r1, [sp, #20]
   1ab5a:	1c3b      	adds	r3, r7, #0
   1ab5c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1ab5e:	9911      	ldr	r1, [sp, #68]	; 0x44
   1ab60:	f006 fc68 	bl	21434 <__aeabi_dmul>
   1ab64:	1c02      	adds	r2, r0, #0
   1ab66:	1c0b      	adds	r3, r1, #0
   1ab68:	9804      	ldr	r0, [sp, #16]
   1ab6a:	9905      	ldr	r1, [sp, #20]
   1ab6c:	f005 fcce 	bl	2050c <__aeabi_dadd>
   1ab70:	9a00      	ldr	r2, [sp, #0]
   1ab72:	9b01      	ldr	r3, [sp, #4]
   1ab74:	9004      	str	r0, [sp, #16]
   1ab76:	9105      	str	r1, [sp, #20]
   1ab78:	1c20      	adds	r0, r4, #0
   1ab7a:	1c29      	adds	r1, r5, #0
   1ab7c:	f006 fc5a 	bl	21434 <__aeabi_dmul>
   1ab80:	1c06      	adds	r6, r0, #0
   1ab82:	1c0f      	adds	r7, r1, #0
   1ab84:	1c3b      	adds	r3, r7, #0
   1ab86:	9804      	ldr	r0, [sp, #16]
   1ab88:	9905      	ldr	r1, [sp, #20]
   1ab8a:	1c32      	adds	r2, r6, #0
   1ab8c:	9608      	str	r6, [sp, #32]
   1ab8e:	9709      	str	r7, [sp, #36]	; 0x24
   1ab90:	f005 fcbc 	bl	2050c <__aeabi_dadd>
   1ab94:	4bc0      	ldr	r3, [pc, #768]	; (1ae98 <__ieee754_pow+0xa58>)
   1ab96:	9000      	str	r0, [sp, #0]
   1ab98:	9101      	str	r1, [sp, #4]
   1ab9a:	1c04      	adds	r4, r0, #0
   1ab9c:	1c0d      	adds	r5, r1, #0
   1ab9e:	9106      	str	r1, [sp, #24]
   1aba0:	4299      	cmp	r1, r3
   1aba2:	dd22      	ble.n	1abea <__ieee754_pow+0x7aa>
   1aba4:	49bd      	ldr	r1, [pc, #756]	; (1ae9c <__ieee754_pow+0xa5c>)
   1aba6:	186b      	adds	r3, r5, r1
   1aba8:	4323      	orrs	r3, r4
   1abaa:	d115      	bne.n	1abd8 <__ieee754_pow+0x798>
   1abac:	4aa0      	ldr	r2, [pc, #640]	; (1ae30 <__ieee754_pow+0x9f0>)
   1abae:	4ba1      	ldr	r3, [pc, #644]	; (1ae34 <__ieee754_pow+0x9f4>)
   1abb0:	9804      	ldr	r0, [sp, #16]
   1abb2:	9905      	ldr	r1, [sp, #20]
   1abb4:	f005 fcaa 	bl	2050c <__aeabi_dadd>
   1abb8:	1c32      	adds	r2, r6, #0
   1abba:	900e      	str	r0, [sp, #56]	; 0x38
   1abbc:	910f      	str	r1, [sp, #60]	; 0x3c
   1abbe:	9800      	ldr	r0, [sp, #0]
   1abc0:	9901      	ldr	r1, [sp, #4]
   1abc2:	1c3b      	adds	r3, r7, #0
   1abc4:	f006 fec8 	bl	21958 <__aeabi_dsub>
   1abc8:	1c02      	adds	r2, r0, #0
   1abca:	1c0b      	adds	r3, r1, #0
   1abcc:	980e      	ldr	r0, [sp, #56]	; 0x38
   1abce:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1abd0:	f004 fd06 	bl	1f5e0 <__aeabi_dcmpgt>
   1abd4:	2800      	cmp	r0, #0
   1abd6:	d028      	beq.n	1ac2a <__ieee754_pow+0x7ea>
   1abd8:	4a97      	ldr	r2, [pc, #604]	; (1ae38 <__ieee754_pow+0x9f8>)
   1abda:	4b98      	ldr	r3, [pc, #608]	; (1ae3c <__ieee754_pow+0x9fc>)
   1abdc:	9802      	ldr	r0, [sp, #8]
   1abde:	9903      	ldr	r1, [sp, #12]
   1abe0:	f006 fc28 	bl	21434 <__aeabi_dmul>
   1abe4:	4a94      	ldr	r2, [pc, #592]	; (1ae38 <__ieee754_pow+0x9f8>)
   1abe6:	4b95      	ldr	r3, [pc, #596]	; (1ae3c <__ieee754_pow+0x9fc>)
   1abe8:	e52c      	b.n	1a644 <__ieee754_pow+0x204>
   1abea:	4bad      	ldr	r3, [pc, #692]	; (1aea0 <__ieee754_pow+0xa60>)
   1abec:	004a      	lsls	r2, r1, #1
   1abee:	0852      	lsrs	r2, r2, #1
   1abf0:	429a      	cmp	r2, r3
   1abf2:	dd1a      	ble.n	1ac2a <__ieee754_pow+0x7ea>
   1abf4:	4aab      	ldr	r2, [pc, #684]	; (1aea4 <__ieee754_pow+0xa64>)
   1abf6:	188b      	adds	r3, r1, r2
   1abf8:	4323      	orrs	r3, r4
   1abfa:	d10d      	bne.n	1ac18 <__ieee754_pow+0x7d8>
   1abfc:	1c32      	adds	r2, r6, #0
   1abfe:	1c3b      	adds	r3, r7, #0
   1ac00:	9800      	ldr	r0, [sp, #0]
   1ac02:	9901      	ldr	r1, [sp, #4]
   1ac04:	f006 fea8 	bl	21958 <__aeabi_dsub>
   1ac08:	1c02      	adds	r2, r0, #0
   1ac0a:	1c0b      	adds	r3, r1, #0
   1ac0c:	9804      	ldr	r0, [sp, #16]
   1ac0e:	9905      	ldr	r1, [sp, #20]
   1ac10:	f004 fcdc 	bl	1f5cc <__aeabi_dcmple>
   1ac14:	2800      	cmp	r0, #0
   1ac16:	d008      	beq.n	1ac2a <__ieee754_pow+0x7ea>
   1ac18:	4a89      	ldr	r2, [pc, #548]	; (1ae40 <__ieee754_pow+0xa00>)
   1ac1a:	4b8a      	ldr	r3, [pc, #552]	; (1ae44 <__ieee754_pow+0xa04>)
   1ac1c:	9802      	ldr	r0, [sp, #8]
   1ac1e:	9903      	ldr	r1, [sp, #12]
   1ac20:	f006 fc08 	bl	21434 <__aeabi_dmul>
   1ac24:	4a86      	ldr	r2, [pc, #536]	; (1ae40 <__ieee754_pow+0xa00>)
   1ac26:	4b87      	ldr	r3, [pc, #540]	; (1ae44 <__ieee754_pow+0xa04>)
   1ac28:	e50c      	b.n	1a644 <__ieee754_pow+0x204>
   1ac2a:	2300      	movs	r3, #0
   1ac2c:	9300      	str	r3, [sp, #0]
   1ac2e:	4b9e      	ldr	r3, [pc, #632]	; (1aea8 <__ieee754_pow+0xa68>)
   1ac30:	0069      	lsls	r1, r5, #1
   1ac32:	0849      	lsrs	r1, r1, #1
   1ac34:	4299      	cmp	r1, r3
   1ac36:	dd24      	ble.n	1ac82 <__ieee754_pow+0x842>
   1ac38:	489c      	ldr	r0, [pc, #624]	; (1aeac <__ieee754_pow+0xa6c>)
   1ac3a:	1509      	asrs	r1, r1, #20
   1ac3c:	2280      	movs	r2, #128	; 0x80
   1ac3e:	1809      	adds	r1, r1, r0
   1ac40:	0352      	lsls	r2, r2, #13
   1ac42:	410a      	asrs	r2, r1
   1ac44:	1951      	adds	r1, r2, r5
   1ac46:	004c      	lsls	r4, r1, #1
   1ac48:	4d99      	ldr	r5, [pc, #612]	; (1aeb0 <__ieee754_pow+0xa70>)
   1ac4a:	0d64      	lsrs	r4, r4, #21
   1ac4c:	4899      	ldr	r0, [pc, #612]	; (1aeb4 <__ieee754_pow+0xa74>)
   1ac4e:	1965      	adds	r5, r4, r5
   1ac50:	4128      	asrs	r0, r5
   1ac52:	4a7d      	ldr	r2, [pc, #500]	; (1ae48 <__ieee754_pow+0xa08>)
   1ac54:	4b7d      	ldr	r3, [pc, #500]	; (1ae4c <__ieee754_pow+0xa0c>)
   1ac56:	1c0b      	adds	r3, r1, #0
   1ac58:	4383      	bics	r3, r0
   1ac5a:	0309      	lsls	r1, r1, #12
   1ac5c:	2080      	movs	r0, #128	; 0x80
   1ac5e:	0b09      	lsrs	r1, r1, #12
   1ac60:	0340      	lsls	r0, r0, #13
   1ac62:	4308      	orrs	r0, r1
   1ac64:	4994      	ldr	r1, [pc, #592]	; (1aeb8 <__ieee754_pow+0xa78>)
   1ac66:	1b0c      	subs	r4, r1, r4
   1ac68:	4120      	asrs	r0, r4
   1ac6a:	9c06      	ldr	r4, [sp, #24]
   1ac6c:	9000      	str	r0, [sp, #0]
   1ac6e:	2c00      	cmp	r4, #0
   1ac70:	da01      	bge.n	1ac76 <__ieee754_pow+0x836>
   1ac72:	4240      	negs	r0, r0
   1ac74:	9000      	str	r0, [sp, #0]
   1ac76:	1c30      	adds	r0, r6, #0
   1ac78:	1c39      	adds	r1, r7, #0
   1ac7a:	f006 fe6d 	bl	21958 <__aeabi_dsub>
   1ac7e:	9008      	str	r0, [sp, #32]
   1ac80:	9109      	str	r1, [sp, #36]	; 0x24
   1ac82:	9a08      	ldr	r2, [sp, #32]
   1ac84:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ac86:	9804      	ldr	r0, [sp, #16]
   1ac88:	9905      	ldr	r1, [sp, #20]
   1ac8a:	f005 fc3f 	bl	2050c <__aeabi_dadd>
   1ac8e:	4a70      	ldr	r2, [pc, #448]	; (1ae50 <__ieee754_pow+0xa10>)
   1ac90:	4b70      	ldr	r3, [pc, #448]	; (1ae54 <__ieee754_pow+0xa14>)
   1ac92:	2600      	movs	r6, #0
   1ac94:	1c30      	adds	r0, r6, #0
   1ac96:	1c0f      	adds	r7, r1, #0
   1ac98:	f006 fbcc 	bl	21434 <__aeabi_dmul>
   1ac9c:	9a08      	ldr	r2, [sp, #32]
   1ac9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1aca0:	9006      	str	r0, [sp, #24]
   1aca2:	9107      	str	r1, [sp, #28]
   1aca4:	1c30      	adds	r0, r6, #0
   1aca6:	1c39      	adds	r1, r7, #0
   1aca8:	f006 fe56 	bl	21958 <__aeabi_dsub>
   1acac:	1c02      	adds	r2, r0, #0
   1acae:	1c0b      	adds	r3, r1, #0
   1acb0:	9804      	ldr	r0, [sp, #16]
   1acb2:	9905      	ldr	r1, [sp, #20]
   1acb4:	f006 fe50 	bl	21958 <__aeabi_dsub>
   1acb8:	4a67      	ldr	r2, [pc, #412]	; (1ae58 <__ieee754_pow+0xa18>)
   1acba:	4b68      	ldr	r3, [pc, #416]	; (1ae5c <__ieee754_pow+0xa1c>)
   1acbc:	f006 fbba 	bl	21434 <__aeabi_dmul>
   1acc0:	4a67      	ldr	r2, [pc, #412]	; (1ae60 <__ieee754_pow+0xa20>)
   1acc2:	4b68      	ldr	r3, [pc, #416]	; (1ae64 <__ieee754_pow+0xa24>)
   1acc4:	1c04      	adds	r4, r0, #0
   1acc6:	1c0d      	adds	r5, r1, #0
   1acc8:	1c30      	adds	r0, r6, #0
   1acca:	1c39      	adds	r1, r7, #0
   1accc:	f006 fbb2 	bl	21434 <__aeabi_dmul>
   1acd0:	1c02      	adds	r2, r0, #0
   1acd2:	1c0b      	adds	r3, r1, #0
   1acd4:	1c20      	adds	r0, r4, #0
   1acd6:	1c29      	adds	r1, r5, #0
   1acd8:	f005 fc18 	bl	2050c <__aeabi_dadd>
   1acdc:	1c04      	adds	r4, r0, #0
   1acde:	1c0d      	adds	r5, r1, #0
   1ace0:	1c22      	adds	r2, r4, #0
   1ace2:	1c2b      	adds	r3, r5, #0
   1ace4:	9806      	ldr	r0, [sp, #24]
   1ace6:	9907      	ldr	r1, [sp, #28]
   1ace8:	f005 fc10 	bl	2050c <__aeabi_dadd>
   1acec:	9a06      	ldr	r2, [sp, #24]
   1acee:	9b07      	ldr	r3, [sp, #28]
   1acf0:	1c06      	adds	r6, r0, #0
   1acf2:	1c0f      	adds	r7, r1, #0
   1acf4:	f006 fe30 	bl	21958 <__aeabi_dsub>
   1acf8:	1c02      	adds	r2, r0, #0
   1acfa:	1c0b      	adds	r3, r1, #0
   1acfc:	1c20      	adds	r0, r4, #0
   1acfe:	1c29      	adds	r1, r5, #0
   1ad00:	f006 fe2a 	bl	21958 <__aeabi_dsub>
   1ad04:	1c32      	adds	r2, r6, #0
   1ad06:	9004      	str	r0, [sp, #16]
   1ad08:	9105      	str	r1, [sp, #20]
   1ad0a:	1c3b      	adds	r3, r7, #0
   1ad0c:	1c30      	adds	r0, r6, #0
   1ad0e:	1c39      	adds	r1, r7, #0
   1ad10:	f006 fb90 	bl	21434 <__aeabi_dmul>
   1ad14:	4a54      	ldr	r2, [pc, #336]	; (1ae68 <__ieee754_pow+0xa28>)
   1ad16:	4b55      	ldr	r3, [pc, #340]	; (1ae6c <__ieee754_pow+0xa2c>)
   1ad18:	1c04      	adds	r4, r0, #0
   1ad1a:	1c0d      	adds	r5, r1, #0
   1ad1c:	f006 fb8a 	bl	21434 <__aeabi_dmul>
   1ad20:	4a53      	ldr	r2, [pc, #332]	; (1ae70 <__ieee754_pow+0xa30>)
   1ad22:	4b54      	ldr	r3, [pc, #336]	; (1ae74 <__ieee754_pow+0xa34>)
   1ad24:	f006 fe18 	bl	21958 <__aeabi_dsub>
   1ad28:	1c02      	adds	r2, r0, #0
   1ad2a:	1c0b      	adds	r3, r1, #0
   1ad2c:	1c20      	adds	r0, r4, #0
   1ad2e:	1c29      	adds	r1, r5, #0
   1ad30:	f006 fb80 	bl	21434 <__aeabi_dmul>
   1ad34:	4a50      	ldr	r2, [pc, #320]	; (1ae78 <__ieee754_pow+0xa38>)
   1ad36:	4b51      	ldr	r3, [pc, #324]	; (1ae7c <__ieee754_pow+0xa3c>)
   1ad38:	f005 fbe8 	bl	2050c <__aeabi_dadd>
   1ad3c:	1c02      	adds	r2, r0, #0
   1ad3e:	1c0b      	adds	r3, r1, #0
   1ad40:	1c20      	adds	r0, r4, #0
   1ad42:	1c29      	adds	r1, r5, #0
   1ad44:	f006 fb76 	bl	21434 <__aeabi_dmul>
   1ad48:	4a4d      	ldr	r2, [pc, #308]	; (1ae80 <__ieee754_pow+0xa40>)
   1ad4a:	4b4e      	ldr	r3, [pc, #312]	; (1ae84 <__ieee754_pow+0xa44>)
   1ad4c:	f006 fe04 	bl	21958 <__aeabi_dsub>
   1ad50:	1c02      	adds	r2, r0, #0
   1ad52:	1c0b      	adds	r3, r1, #0
   1ad54:	1c20      	adds	r0, r4, #0
   1ad56:	1c29      	adds	r1, r5, #0
   1ad58:	f006 fb6c 	bl	21434 <__aeabi_dmul>
   1ad5c:	4a4a      	ldr	r2, [pc, #296]	; (1ae88 <__ieee754_pow+0xa48>)
   1ad5e:	4b4b      	ldr	r3, [pc, #300]	; (1ae8c <__ieee754_pow+0xa4c>)
   1ad60:	f005 fbd4 	bl	2050c <__aeabi_dadd>
   1ad64:	1c02      	adds	r2, r0, #0
   1ad66:	1c0b      	adds	r3, r1, #0
   1ad68:	1c20      	adds	r0, r4, #0
   1ad6a:	1c29      	adds	r1, r5, #0
   1ad6c:	f006 fb62 	bl	21434 <__aeabi_dmul>
   1ad70:	1c02      	adds	r2, r0, #0
   1ad72:	1c0b      	adds	r3, r1, #0
   1ad74:	1c30      	adds	r0, r6, #0
   1ad76:	1c39      	adds	r1, r7, #0
   1ad78:	f006 fdee 	bl	21958 <__aeabi_dsub>
   1ad7c:	1c04      	adds	r4, r0, #0
   1ad7e:	1c0d      	adds	r5, r1, #0
   1ad80:	1c22      	adds	r2, r4, #0
   1ad82:	1c2b      	adds	r3, r5, #0
   1ad84:	1c30      	adds	r0, r6, #0
   1ad86:	1c39      	adds	r1, r7, #0
   1ad88:	f006 fb54 	bl	21434 <__aeabi_dmul>
   1ad8c:	4a40      	ldr	r2, [pc, #256]	; (1ae90 <__ieee754_pow+0xa50>)
   1ad8e:	4b41      	ldr	r3, [pc, #260]	; (1ae94 <__ieee754_pow+0xa54>)
   1ad90:	9008      	str	r0, [sp, #32]
   1ad92:	9109      	str	r1, [sp, #36]	; 0x24
   1ad94:	1c20      	adds	r0, r4, #0
   1ad96:	1c29      	adds	r1, r5, #0
   1ad98:	f006 fdde 	bl	21958 <__aeabi_dsub>
   1ad9c:	1c02      	adds	r2, r0, #0
   1ad9e:	1c0b      	adds	r3, r1, #0
   1ada0:	9808      	ldr	r0, [sp, #32]
   1ada2:	9909      	ldr	r1, [sp, #36]	; 0x24
   1ada4:	f005 fed6 	bl	20b54 <__aeabi_ddiv>
   1ada8:	9a04      	ldr	r2, [sp, #16]
   1adaa:	9b05      	ldr	r3, [sp, #20]
   1adac:	1c0d      	adds	r5, r1, #0
   1adae:	1c04      	adds	r4, r0, #0
   1adb0:	1c39      	adds	r1, r7, #0
   1adb2:	1c30      	adds	r0, r6, #0
   1adb4:	f006 fb3e 	bl	21434 <__aeabi_dmul>
   1adb8:	1c02      	adds	r2, r0, #0
   1adba:	1c0b      	adds	r3, r1, #0
   1adbc:	9804      	ldr	r0, [sp, #16]
   1adbe:	9905      	ldr	r1, [sp, #20]
   1adc0:	f005 fba4 	bl	2050c <__aeabi_dadd>
   1adc4:	1c02      	adds	r2, r0, #0
   1adc6:	1c0b      	adds	r3, r1, #0
   1adc8:	1c20      	adds	r0, r4, #0
   1adca:	1c29      	adds	r1, r5, #0
   1adcc:	f006 fdc4 	bl	21958 <__aeabi_dsub>
   1add0:	1c32      	adds	r2, r6, #0
   1add2:	1c3b      	adds	r3, r7, #0
   1add4:	f006 fdc0 	bl	21958 <__aeabi_dsub>
   1add8:	1c02      	adds	r2, r0, #0
   1adda:	1c0b      	adds	r3, r1, #0
   1addc:	4812      	ldr	r0, [pc, #72]	; (1ae28 <__ieee754_pow+0x9e8>)
   1adde:	4913      	ldr	r1, [pc, #76]	; (1ae2c <__ieee754_pow+0x9ec>)
   1ade0:	f006 fdba 	bl	21958 <__aeabi_dsub>
   1ade4:	9d00      	ldr	r5, [sp, #0]
   1ade6:	052a      	lsls	r2, r5, #20
   1ade8:	1853      	adds	r3, r2, r1
   1adea:	151a      	asrs	r2, r3, #20
   1adec:	2a00      	cmp	r2, #0
   1adee:	dc03      	bgt.n	1adf8 <__ieee754_pow+0x9b8>
   1adf0:	1c2a      	adds	r2, r5, #0
   1adf2:	f000 f9fd 	bl	1b1f0 <scalbn>
   1adf6:	e000      	b.n	1adfa <__ieee754_pow+0x9ba>
   1adf8:	1c19      	adds	r1, r3, #0
   1adfa:	1c02      	adds	r2, r0, #0
   1adfc:	1c0b      	adds	r3, r1, #0
   1adfe:	9802      	ldr	r0, [sp, #8]
   1ae00:	9903      	ldr	r1, [sp, #12]
   1ae02:	f7ff fc1f 	bl	1a644 <__ieee754_pow+0x204>
   1ae06:	1c28      	adds	r0, r5, #0
   1ae08:	492c      	ldr	r1, [pc, #176]	; (1aebc <__ieee754_pow+0xa7c>)
   1ae0a:	e006      	b.n	1ae1a <__ieee754_pow+0x9da>
   1ae0c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1ae0e:	9911      	ldr	r1, [sp, #68]	; 0x44
   1ae10:	e003      	b.n	1ae1a <__ieee754_pow+0x9da>
   1ae12:	9800      	ldr	r0, [sp, #0]
   1ae14:	9904      	ldr	r1, [sp, #16]
   1ae16:	e000      	b.n	1ae1a <__ieee754_pow+0x9da>
   1ae18:	1c29      	adds	r1, r5, #0
   1ae1a:	b019      	add	sp, #100	; 0x64
   1ae1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ae1e:	46c0      	nop			; (mov r8, r8)
   1ae20:	00000000 	.word	0x00000000
   1ae24:	bff00000 	.word	0xbff00000
   1ae28:	00000000 	.word	0x00000000
   1ae2c:	3ff00000 	.word	0x3ff00000
   1ae30:	652b82fe 	.word	0x652b82fe
   1ae34:	3c971547 	.word	0x3c971547
   1ae38:	8800759c 	.word	0x8800759c
   1ae3c:	7e37e43c 	.word	0x7e37e43c
   1ae40:	c2f8f359 	.word	0xc2f8f359
   1ae44:	01a56e1f 	.word	0x01a56e1f
	...
   1ae54:	3fe62e43 	.word	0x3fe62e43
   1ae58:	fefa39ef 	.word	0xfefa39ef
   1ae5c:	3fe62e42 	.word	0x3fe62e42
   1ae60:	0ca86c39 	.word	0x0ca86c39
   1ae64:	be205c61 	.word	0xbe205c61
   1ae68:	72bea4d0 	.word	0x72bea4d0
   1ae6c:	3e663769 	.word	0x3e663769
   1ae70:	c5d26bf1 	.word	0xc5d26bf1
   1ae74:	3ebbbd41 	.word	0x3ebbbd41
   1ae78:	af25de2c 	.word	0xaf25de2c
   1ae7c:	3f11566a 	.word	0x3f11566a
   1ae80:	16bebd93 	.word	0x16bebd93
   1ae84:	3f66c16c 	.word	0x3f66c16c
   1ae88:	5555553e 	.word	0x5555553e
   1ae8c:	3fc55555 	.word	0x3fc55555
   1ae90:	00000000 	.word	0x00000000
   1ae94:	40000000 	.word	0x40000000
   1ae98:	408fffff 	.word	0x408fffff
   1ae9c:	bf700000 	.word	0xbf700000
   1aea0:	4090cbff 	.word	0x4090cbff
   1aea4:	3f6f3400 	.word	0x3f6f3400
   1aea8:	3fe00000 	.word	0x3fe00000
   1aeac:	fffffc02 	.word	0xfffffc02
   1aeb0:	fffffc01 	.word	0xfffffc01
   1aeb4:	000fffff 	.word	0x000fffff
   1aeb8:	00000413 	.word	0x00000413
   1aebc:	3ff00000 	.word	0x3ff00000

0001aec0 <__ieee754_sqrt>:
   1aec0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aec2:	4b5b      	ldr	r3, [pc, #364]	; (1b030 <__ieee754_sqrt+0x170>)
   1aec4:	b087      	sub	sp, #28
   1aec6:	1c1a      	adds	r2, r3, #0
   1aec8:	1c04      	adds	r4, r0, #0
   1aeca:	1c0d      	adds	r5, r1, #0
   1aecc:	1c0f      	adds	r7, r1, #0
   1aece:	1c06      	adds	r6, r0, #0
   1aed0:	400a      	ands	r2, r1
   1aed2:	429a      	cmp	r2, r3
   1aed4:	d108      	bne.n	1aee8 <__ieee754_sqrt+0x28>
   1aed6:	1c22      	adds	r2, r4, #0
   1aed8:	1c2b      	adds	r3, r5, #0
   1aeda:	f006 faab 	bl	21434 <__aeabi_dmul>
   1aede:	1c22      	adds	r2, r4, #0
   1aee0:	1c2b      	adds	r3, r5, #0
   1aee2:	f005 fb13 	bl	2050c <__aeabi_dadd>
   1aee6:	e015      	b.n	1af14 <__ieee754_sqrt+0x54>
   1aee8:	2900      	cmp	r1, #0
   1aeea:	dc16      	bgt.n	1af1a <__ieee754_sqrt+0x5a>
   1aeec:	004b      	lsls	r3, r1, #1
   1aeee:	085b      	lsrs	r3, r3, #1
   1aef0:	4303      	orrs	r3, r0
   1aef2:	469c      	mov	ip, r3
   1aef4:	1c22      	adds	r2, r4, #0
   1aef6:	4664      	mov	r4, ip
   1aef8:	1c2b      	adds	r3, r5, #0
   1aefa:	2c00      	cmp	r4, #0
   1aefc:	d100      	bne.n	1af00 <__ieee754_sqrt+0x40>
   1aefe:	e092      	b.n	1b026 <__ieee754_sqrt+0x166>
   1af00:	2900      	cmp	r1, #0
   1af02:	d00a      	beq.n	1af1a <__ieee754_sqrt+0x5a>
   1af04:	1c10      	adds	r0, r2, #0
   1af06:	1c29      	adds	r1, r5, #0
   1af08:	f006 fd26 	bl	21958 <__aeabi_dsub>
   1af0c:	1c02      	adds	r2, r0, #0
   1af0e:	1c0b      	adds	r3, r1, #0
   1af10:	f005 fe20 	bl	20b54 <__aeabi_ddiv>
   1af14:	1c02      	adds	r2, r0, #0
   1af16:	1c0b      	adds	r3, r1, #0
   1af18:	e085      	b.n	1b026 <__ieee754_sqrt+0x166>
   1af1a:	150b      	asrs	r3, r1, #20
   1af1c:	d113      	bne.n	1af46 <__ieee754_sqrt+0x86>
   1af1e:	2f00      	cmp	r7, #0
   1af20:	d103      	bne.n	1af2a <__ieee754_sqrt+0x6a>
   1af22:	0af7      	lsrs	r7, r6, #11
   1af24:	3b15      	subs	r3, #21
   1af26:	0576      	lsls	r6, r6, #21
   1af28:	e7f9      	b.n	1af1e <__ieee754_sqrt+0x5e>
   1af2a:	2200      	movs	r2, #0
   1af2c:	02fd      	lsls	r5, r7, #11
   1af2e:	d402      	bmi.n	1af36 <__ieee754_sqrt+0x76>
   1af30:	007f      	lsls	r7, r7, #1
   1af32:	3201      	adds	r2, #1
   1af34:	e7fa      	b.n	1af2c <__ieee754_sqrt+0x6c>
   1af36:	2120      	movs	r1, #32
   1af38:	1c30      	adds	r0, r6, #0
   1af3a:	1a89      	subs	r1, r1, r2
   1af3c:	1a9b      	subs	r3, r3, r2
   1af3e:	40c8      	lsrs	r0, r1
   1af40:	3301      	adds	r3, #1
   1af42:	4307      	orrs	r7, r0
   1af44:	4096      	lsls	r6, r2
   1af46:	493b      	ldr	r1, [pc, #236]	; (1b034 <__ieee754_sqrt+0x174>)
   1af48:	033f      	lsls	r7, r7, #12
   1af4a:	185a      	adds	r2, r3, r1
   1af4c:	0b39      	lsrs	r1, r7, #12
   1af4e:	2780      	movs	r7, #128	; 0x80
   1af50:	037f      	lsls	r7, r7, #13
   1af52:	430f      	orrs	r7, r1
   1af54:	07d3      	lsls	r3, r2, #31
   1af56:	d503      	bpl.n	1af60 <__ieee754_sqrt+0xa0>
   1af58:	0ff1      	lsrs	r1, r6, #31
   1af5a:	007f      	lsls	r7, r7, #1
   1af5c:	187f      	adds	r7, r7, r1
   1af5e:	0076      	lsls	r6, r6, #1
   1af60:	1052      	asrs	r2, r2, #1
   1af62:	9204      	str	r2, [sp, #16]
   1af64:	007b      	lsls	r3, r7, #1
   1af66:	0ff2      	lsrs	r2, r6, #31
   1af68:	2400      	movs	r4, #0
   1af6a:	2580      	movs	r5, #128	; 0x80
   1af6c:	189b      	adds	r3, r3, r2
   1af6e:	2116      	movs	r1, #22
   1af70:	0072      	lsls	r2, r6, #1
   1af72:	1c20      	adds	r0, r4, #0
   1af74:	03ad      	lsls	r5, r5, #14
   1af76:	1946      	adds	r6, r0, r5
   1af78:	429e      	cmp	r6, r3
   1af7a:	dc02      	bgt.n	1af82 <__ieee754_sqrt+0xc2>
   1af7c:	1970      	adds	r0, r6, r5
   1af7e:	1b9b      	subs	r3, r3, r6
   1af80:	1964      	adds	r4, r4, r5
   1af82:	0fd6      	lsrs	r6, r2, #31
   1af84:	005b      	lsls	r3, r3, #1
   1af86:	3901      	subs	r1, #1
   1af88:	199b      	adds	r3, r3, r6
   1af8a:	0052      	lsls	r2, r2, #1
   1af8c:	086d      	lsrs	r5, r5, #1
   1af8e:	2900      	cmp	r1, #0
   1af90:	d1f1      	bne.n	1af76 <__ieee754_sqrt+0xb6>
   1af92:	2520      	movs	r5, #32
   1af94:	46ac      	mov	ip, r5
   1af96:	2580      	movs	r5, #128	; 0x80
   1af98:	062d      	lsls	r5, r5, #24
   1af9a:	9103      	str	r1, [sp, #12]
   1af9c:	9501      	str	r5, [sp, #4]
   1af9e:	9f01      	ldr	r7, [sp, #4]
   1afa0:	9d03      	ldr	r5, [sp, #12]
   1afa2:	197e      	adds	r6, r7, r5
   1afa4:	4298      	cmp	r0, r3
   1afa6:	db02      	blt.n	1afae <__ieee754_sqrt+0xee>
   1afa8:	d119      	bne.n	1afde <__ieee754_sqrt+0x11e>
   1afaa:	4296      	cmp	r6, r2
   1afac:	d816      	bhi.n	1afdc <__ieee754_sqrt+0x11c>
   1afae:	9f01      	ldr	r7, [sp, #4]
   1afb0:	19f7      	adds	r7, r6, r7
   1afb2:	9703      	str	r7, [sp, #12]
   1afb4:	1c07      	adds	r7, r0, #0
   1afb6:	2e00      	cmp	r6, #0
   1afb8:	da06      	bge.n	1afc8 <__ieee754_sqrt+0x108>
   1afba:	9f03      	ldr	r7, [sp, #12]
   1afbc:	0ffd      	lsrs	r5, r7, #31
   1afbe:	07ed      	lsls	r5, r5, #31
   1afc0:	426f      	negs	r7, r5
   1afc2:	416f      	adcs	r7, r5
   1afc4:	9702      	str	r7, [sp, #8]
   1afc6:	19c7      	adds	r7, r0, r7
   1afc8:	1a1b      	subs	r3, r3, r0
   1afca:	42b2      	cmp	r2, r6
   1afcc:	4180      	sbcs	r0, r0
   1afce:	4240      	negs	r0, r0
   1afd0:	1a1b      	subs	r3, r3, r0
   1afd2:	9801      	ldr	r0, [sp, #4]
   1afd4:	1b92      	subs	r2, r2, r6
   1afd6:	1809      	adds	r1, r1, r0
   1afd8:	1c38      	adds	r0, r7, #0
   1afda:	e000      	b.n	1afde <__ieee754_sqrt+0x11e>
   1afdc:	1c03      	adds	r3, r0, #0
   1afde:	0fd6      	lsrs	r6, r2, #31
   1afe0:	005b      	lsls	r3, r3, #1
   1afe2:	199b      	adds	r3, r3, r6
   1afe4:	2601      	movs	r6, #1
   1afe6:	9d01      	ldr	r5, [sp, #4]
   1afe8:	4276      	negs	r6, r6
   1afea:	44b4      	add	ip, r6
   1afec:	086d      	lsrs	r5, r5, #1
   1afee:	4667      	mov	r7, ip
   1aff0:	0052      	lsls	r2, r2, #1
   1aff2:	9501      	str	r5, [sp, #4]
   1aff4:	2f00      	cmp	r7, #0
   1aff6:	d1d2      	bne.n	1af9e <__ieee754_sqrt+0xde>
   1aff8:	4313      	orrs	r3, r2
   1affa:	d007      	beq.n	1b00c <__ieee754_sqrt+0x14c>
   1affc:	1c48      	adds	r0, r1, #1
   1affe:	d102      	bne.n	1b006 <__ieee754_sqrt+0x146>
   1b000:	3401      	adds	r4, #1
   1b002:	4661      	mov	r1, ip
   1b004:	e002      	b.n	1b00c <__ieee754_sqrt+0x14c>
   1b006:	2301      	movs	r3, #1
   1b008:	400b      	ands	r3, r1
   1b00a:	1859      	adds	r1, r3, r1
   1b00c:	4b0a      	ldr	r3, [pc, #40]	; (1b038 <__ieee754_sqrt+0x178>)
   1b00e:	1065      	asrs	r5, r4, #1
   1b010:	18ed      	adds	r5, r5, r3
   1b012:	0849      	lsrs	r1, r1, #1
   1b014:	07e6      	lsls	r6, r4, #31
   1b016:	d502      	bpl.n	1b01e <__ieee754_sqrt+0x15e>
   1b018:	2380      	movs	r3, #128	; 0x80
   1b01a:	061b      	lsls	r3, r3, #24
   1b01c:	4319      	orrs	r1, r3
   1b01e:	9f04      	ldr	r7, [sp, #16]
   1b020:	1c0a      	adds	r2, r1, #0
   1b022:	0538      	lsls	r0, r7, #20
   1b024:	182b      	adds	r3, r5, r0
   1b026:	1c10      	adds	r0, r2, #0
   1b028:	1c19      	adds	r1, r3, #0
   1b02a:	b007      	add	sp, #28
   1b02c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b02e:	46c0      	nop			; (mov r8, r8)
   1b030:	7ff00000 	.word	0x7ff00000
   1b034:	fffffc01 	.word	0xfffffc01
   1b038:	3fe00000 	.word	0x3fe00000

0001b03c <fabs>:
   1b03c:	004b      	lsls	r3, r1, #1
   1b03e:	0859      	lsrs	r1, r3, #1
   1b040:	4770      	bx	lr
	...

0001b044 <finite>:
   1b044:	0048      	lsls	r0, r1, #1
   1b046:	4b02      	ldr	r3, [pc, #8]	; (1b050 <finite+0xc>)
   1b048:	0840      	lsrs	r0, r0, #1
   1b04a:	18c0      	adds	r0, r0, r3
   1b04c:	0fc0      	lsrs	r0, r0, #31
   1b04e:	4770      	bx	lr
   1b050:	80100000 	.word	0x80100000

0001b054 <__fpclassifyd>:
   1b054:	b530      	push	{r4, r5, lr}
   1b056:	1c0b      	adds	r3, r1, #0
   1b058:	1c04      	adds	r4, r0, #0
   1b05a:	1c02      	adds	r2, r0, #0
   1b05c:	431c      	orrs	r4, r3
   1b05e:	2002      	movs	r0, #2
   1b060:	2c00      	cmp	r4, #0
   1b062:	d017      	beq.n	1b094 <__fpclassifyd+0x40>
   1b064:	2480      	movs	r4, #128	; 0x80
   1b066:	0624      	lsls	r4, r4, #24
   1b068:	42a3      	cmp	r3, r4
   1b06a:	d101      	bne.n	1b070 <__fpclassifyd+0x1c>
   1b06c:	2a00      	cmp	r2, #0
   1b06e:	d011      	beq.n	1b094 <__fpclassifyd+0x40>
   1b070:	4809      	ldr	r0, [pc, #36]	; (1b098 <__fpclassifyd+0x44>)
   1b072:	0059      	lsls	r1, r3, #1
   1b074:	0849      	lsrs	r1, r1, #1
   1b076:	4c09      	ldr	r4, [pc, #36]	; (1b09c <__fpclassifyd+0x48>)
   1b078:	180d      	adds	r5, r1, r0
   1b07a:	2004      	movs	r0, #4
   1b07c:	42a5      	cmp	r5, r4
   1b07e:	d909      	bls.n	1b094 <__fpclassifyd+0x40>
   1b080:	4c07      	ldr	r4, [pc, #28]	; (1b0a0 <__fpclassifyd+0x4c>)
   1b082:	2003      	movs	r0, #3
   1b084:	42a1      	cmp	r1, r4
   1b086:	d905      	bls.n	1b094 <__fpclassifyd+0x40>
   1b088:	4c06      	ldr	r4, [pc, #24]	; (1b0a4 <__fpclassifyd+0x50>)
   1b08a:	2000      	movs	r0, #0
   1b08c:	42a1      	cmp	r1, r4
   1b08e:	d101      	bne.n	1b094 <__fpclassifyd+0x40>
   1b090:	4250      	negs	r0, r2
   1b092:	4150      	adcs	r0, r2
   1b094:	bd30      	pop	{r4, r5, pc}
   1b096:	46c0      	nop			; (mov r8, r8)
   1b098:	fff00000 	.word	0xfff00000
   1b09c:	7fdfffff 	.word	0x7fdfffff
   1b0a0:	000fffff 	.word	0x000fffff
   1b0a4:	7ff00000 	.word	0x7ff00000

0001b0a8 <matherr>:
   1b0a8:	2000      	movs	r0, #0
   1b0aa:	4770      	bx	lr
   1b0ac:	0000      	movs	r0, r0
	...

0001b0b0 <nan>:
   1b0b0:	4902      	ldr	r1, [pc, #8]	; (1b0bc <nan+0xc>)
   1b0b2:	4801      	ldr	r0, [pc, #4]	; (1b0b8 <nan+0x8>)
   1b0b4:	4770      	bx	lr
   1b0b6:	46c0      	nop			; (mov r8, r8)
   1b0b8:	00000000 	.word	0x00000000
   1b0bc:	7ff80000 	.word	0x7ff80000

0001b0c0 <rint>:
   1b0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b0c2:	1c0b      	adds	r3, r1, #0
   1b0c4:	b085      	sub	sp, #20
   1b0c6:	0fdc      	lsrs	r4, r3, #31
   1b0c8:	9400      	str	r4, [sp, #0]
   1b0ca:	005d      	lsls	r5, r3, #1
   1b0cc:	4c43      	ldr	r4, [pc, #268]	; (1b1dc <rint+0x11c>)
   1b0ce:	0d6d      	lsrs	r5, r5, #21
   1b0d0:	1c02      	adds	r2, r0, #0
   1b0d2:	1c06      	adds	r6, r0, #0
   1b0d4:	1c0f      	adds	r7, r1, #0
   1b0d6:	468c      	mov	ip, r1
   1b0d8:	1c01      	adds	r1, r0, #0
   1b0da:	1928      	adds	r0, r5, r4
   1b0dc:	9501      	str	r5, [sp, #4]
   1b0de:	2813      	cmp	r0, #19
   1b0e0:	dc45      	bgt.n	1b16e <rint+0xae>
   1b0e2:	2800      	cmp	r0, #0
   1b0e4:	da29      	bge.n	1b13a <rint+0x7a>
   1b0e6:	0059      	lsls	r1, r3, #1
   1b0e8:	0849      	lsrs	r1, r1, #1
   1b0ea:	4311      	orrs	r1, r2
   1b0ec:	d071      	beq.n	1b1d2 <rint+0x112>
   1b0ee:	0319      	lsls	r1, r3, #12
   1b0f0:	0b09      	lsrs	r1, r1, #12
   1b0f2:	4311      	orrs	r1, r2
   1b0f4:	4248      	negs	r0, r1
   1b0f6:	4301      	orrs	r1, r0
   1b0f8:	2080      	movs	r0, #128	; 0x80
   1b0fa:	0300      	lsls	r0, r0, #12
   1b0fc:	0b09      	lsrs	r1, r1, #12
   1b0fe:	4001      	ands	r1, r0
   1b100:	0c58      	lsrs	r0, r3, #17
   1b102:	0440      	lsls	r0, r0, #17
   1b104:	1c0b      	adds	r3, r1, #0
   1b106:	9d00      	ldr	r5, [sp, #0]
   1b108:	4303      	orrs	r3, r0
   1b10a:	4835      	ldr	r0, [pc, #212]	; (1b1e0 <rint+0x120>)
   1b10c:	00e9      	lsls	r1, r5, #3
   1b10e:	1841      	adds	r1, r0, r1
   1b110:	680e      	ldr	r6, [r1, #0]
   1b112:	684f      	ldr	r7, [r1, #4]
   1b114:	1c30      	adds	r0, r6, #0
   1b116:	1c39      	adds	r1, r7, #0
   1b118:	f005 f9f8 	bl	2050c <__aeabi_dadd>
   1b11c:	9002      	str	r0, [sp, #8]
   1b11e:	9103      	str	r1, [sp, #12]
   1b120:	9802      	ldr	r0, [sp, #8]
   1b122:	9903      	ldr	r1, [sp, #12]
   1b124:	1c32      	adds	r2, r6, #0
   1b126:	1c3b      	adds	r3, r7, #0
   1b128:	f006 fc16 	bl	21958 <__aeabi_dsub>
   1b12c:	07ec      	lsls	r4, r5, #31
   1b12e:	0049      	lsls	r1, r1, #1
   1b130:	0849      	lsrs	r1, r1, #1
   1b132:	1c23      	adds	r3, r4, #0
   1b134:	1c02      	adds	r2, r0, #0
   1b136:	430b      	orrs	r3, r1
   1b138:	e04b      	b.n	1b1d2 <rint+0x112>
   1b13a:	492a      	ldr	r1, [pc, #168]	; (1b1e4 <rint+0x124>)
   1b13c:	4101      	asrs	r1, r0
   1b13e:	1c0d      	adds	r5, r1, #0
   1b140:	401d      	ands	r5, r3
   1b142:	4315      	orrs	r5, r2
   1b144:	d045      	beq.n	1b1d2 <rint+0x112>
   1b146:	084b      	lsrs	r3, r1, #1
   1b148:	1c1a      	adds	r2, r3, #0
   1b14a:	403a      	ands	r2, r7
   1b14c:	2100      	movs	r1, #0
   1b14e:	4332      	orrs	r2, r6
   1b150:	428a      	cmp	r2, r1
   1b152:	d028      	beq.n	1b1a6 <rint+0xe6>
   1b154:	2813      	cmp	r0, #19
   1b156:	d101      	bne.n	1b15c <rint+0x9c>
   1b158:	2180      	movs	r1, #128	; 0x80
   1b15a:	0609      	lsls	r1, r1, #24
   1b15c:	1c3a      	adds	r2, r7, #0
   1b15e:	439a      	bics	r2, r3
   1b160:	1c13      	adds	r3, r2, #0
   1b162:	2280      	movs	r2, #128	; 0x80
   1b164:	02d2      	lsls	r2, r2, #11
   1b166:	4102      	asrs	r2, r0
   1b168:	4313      	orrs	r3, r2
   1b16a:	469c      	mov	ip, r3
   1b16c:	e01b      	b.n	1b1a6 <rint+0xe6>
   1b16e:	2833      	cmp	r0, #51	; 0x33
   1b170:	dd08      	ble.n	1b184 <rint+0xc4>
   1b172:	2180      	movs	r1, #128	; 0x80
   1b174:	00c9      	lsls	r1, r1, #3
   1b176:	4288      	cmp	r0, r1
   1b178:	d12b      	bne.n	1b1d2 <rint+0x112>
   1b17a:	1c10      	adds	r0, r2, #0
   1b17c:	1c19      	adds	r1, r3, #0
   1b17e:	f005 f9c5 	bl	2050c <__aeabi_dadd>
   1b182:	e024      	b.n	1b1ce <rint+0x10e>
   1b184:	4818      	ldr	r0, [pc, #96]	; (1b1e8 <rint+0x128>)
   1b186:	9c01      	ldr	r4, [sp, #4]
   1b188:	1825      	adds	r5, r4, r0
   1b18a:	2001      	movs	r0, #1
   1b18c:	4240      	negs	r0, r0
   1b18e:	40e8      	lsrs	r0, r5
   1b190:	4210      	tst	r0, r2
   1b192:	d01e      	beq.n	1b1d2 <rint+0x112>
   1b194:	0840      	lsrs	r0, r0, #1
   1b196:	4210      	tst	r0, r2
   1b198:	d005      	beq.n	1b1a6 <rint+0xe6>
   1b19a:	2680      	movs	r6, #128	; 0x80
   1b19c:	1c11      	adds	r1, r2, #0
   1b19e:	05f6      	lsls	r6, r6, #23
   1b1a0:	4381      	bics	r1, r0
   1b1a2:	412e      	asrs	r6, r5
   1b1a4:	4331      	orrs	r1, r6
   1b1a6:	9d00      	ldr	r5, [sp, #0]
   1b1a8:	1c0a      	adds	r2, r1, #0
   1b1aa:	490d      	ldr	r1, [pc, #52]	; (1b1e0 <rint+0x120>)
   1b1ac:	00ec      	lsls	r4, r5, #3
   1b1ae:	190c      	adds	r4, r1, r4
   1b1b0:	6865      	ldr	r5, [r4, #4]
   1b1b2:	6824      	ldr	r4, [r4, #0]
   1b1b4:	4663      	mov	r3, ip
   1b1b6:	1c20      	adds	r0, r4, #0
   1b1b8:	1c29      	adds	r1, r5, #0
   1b1ba:	f005 f9a7 	bl	2050c <__aeabi_dadd>
   1b1be:	9002      	str	r0, [sp, #8]
   1b1c0:	9103      	str	r1, [sp, #12]
   1b1c2:	9802      	ldr	r0, [sp, #8]
   1b1c4:	9903      	ldr	r1, [sp, #12]
   1b1c6:	1c22      	adds	r2, r4, #0
   1b1c8:	1c2b      	adds	r3, r5, #0
   1b1ca:	f006 fbc5 	bl	21958 <__aeabi_dsub>
   1b1ce:	1c02      	adds	r2, r0, #0
   1b1d0:	1c0b      	adds	r3, r1, #0
   1b1d2:	1c10      	adds	r0, r2, #0
   1b1d4:	1c19      	adds	r1, r3, #0
   1b1d6:	b005      	add	sp, #20
   1b1d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b1da:	46c0      	nop			; (mov r8, r8)
   1b1dc:	fffffc01 	.word	0xfffffc01
   1b1e0:	00026f90 	.word	0x00026f90
   1b1e4:	000fffff 	.word	0x000fffff
   1b1e8:	fffffbed 	.word	0xfffffbed
   1b1ec:	00000000 	.word	0x00000000

0001b1f0 <scalbn>:
   1b1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b1f2:	4f37      	ldr	r7, [pc, #220]	; (1b2d0 <scalbn+0xe0>)
   1b1f4:	1c04      	adds	r4, r0, #0
   1b1f6:	1c0d      	adds	r5, r1, #0
   1b1f8:	1c16      	adds	r6, r2, #0
   1b1fa:	1c02      	adds	r2, r0, #0
   1b1fc:	1c38      	adds	r0, r7, #0
   1b1fe:	4028      	ands	r0, r5
   1b200:	1500      	asrs	r0, r0, #20
   1b202:	d112      	bne.n	1b22a <scalbn+0x3a>
   1b204:	006b      	lsls	r3, r5, #1
   1b206:	085b      	lsrs	r3, r3, #1
   1b208:	431a      	orrs	r2, r3
   1b20a:	1c20      	adds	r0, r4, #0
   1b20c:	1c29      	adds	r1, r5, #0
   1b20e:	2a00      	cmp	r2, #0
   1b210:	d04b      	beq.n	1b2aa <scalbn+0xba>
   1b212:	4b28      	ldr	r3, [pc, #160]	; (1b2b4 <scalbn+0xc4>)
   1b214:	4a26      	ldr	r2, [pc, #152]	; (1b2b0 <scalbn+0xc0>)
   1b216:	f006 f90d 	bl	21434 <__aeabi_dmul>
   1b21a:	1c0d      	adds	r5, r1, #0
   1b21c:	492d      	ldr	r1, [pc, #180]	; (1b2d4 <scalbn+0xe4>)
   1b21e:	1c04      	adds	r4, r0, #0
   1b220:	428e      	cmp	r6, r1
   1b222:	da0c      	bge.n	1b23e <scalbn+0x4e>
   1b224:	1c20      	adds	r0, r4, #0
   1b226:	1c29      	adds	r1, r5, #0
   1b228:	e030      	b.n	1b28c <scalbn+0x9c>
   1b22a:	4b2b      	ldr	r3, [pc, #172]	; (1b2d8 <scalbn+0xe8>)
   1b22c:	4298      	cmp	r0, r3
   1b22e:	d10a      	bne.n	1b246 <scalbn+0x56>
   1b230:	1c20      	adds	r0, r4, #0
   1b232:	1c29      	adds	r1, r5, #0
   1b234:	1c22      	adds	r2, r4, #0
   1b236:	1c2b      	adds	r3, r5, #0
   1b238:	f005 f968 	bl	2050c <__aeabi_dadd>
   1b23c:	e035      	b.n	1b2aa <scalbn+0xba>
   1b23e:	402f      	ands	r7, r5
   1b240:	1538      	asrs	r0, r7, #20
   1b242:	1c29      	adds	r1, r5, #0
   1b244:	3836      	subs	r0, #54	; 0x36
   1b246:	4b25      	ldr	r3, [pc, #148]	; (1b2dc <scalbn+0xec>)
   1b248:	1987      	adds	r7, r0, r6
   1b24a:	429f      	cmp	r7, r3
   1b24c:	dc0f      	bgt.n	1b26e <scalbn+0x7e>
   1b24e:	2f00      	cmp	r7, #0
   1b250:	dd07      	ble.n	1b262 <scalbn+0x72>
   1b252:	4b23      	ldr	r3, [pc, #140]	; (1b2e0 <scalbn+0xf0>)
   1b254:	053f      	lsls	r7, r7, #20
   1b256:	4019      	ands	r1, r3
   1b258:	1c3d      	adds	r5, r7, #0
   1b25a:	430d      	orrs	r5, r1
   1b25c:	1c20      	adds	r0, r4, #0
   1b25e:	1c29      	adds	r1, r5, #0
   1b260:	e023      	b.n	1b2aa <scalbn+0xba>
   1b262:	1c3b      	adds	r3, r7, #0
   1b264:	3335      	adds	r3, #53	; 0x35
   1b266:	da14      	bge.n	1b292 <scalbn+0xa2>
   1b268:	4b1e      	ldr	r3, [pc, #120]	; (1b2e4 <scalbn+0xf4>)
   1b26a:	429e      	cmp	r6, r3
   1b26c:	dd08      	ble.n	1b280 <scalbn+0x90>
   1b26e:	1c22      	adds	r2, r4, #0
   1b270:	1c2b      	adds	r3, r5, #0
   1b272:	4811      	ldr	r0, [pc, #68]	; (1b2b8 <scalbn+0xc8>)
   1b274:	4911      	ldr	r1, [pc, #68]	; (1b2bc <scalbn+0xcc>)
   1b276:	f000 f837 	bl	1b2e8 <copysign>
   1b27a:	4a0f      	ldr	r2, [pc, #60]	; (1b2b8 <scalbn+0xc8>)
   1b27c:	4b0f      	ldr	r3, [pc, #60]	; (1b2bc <scalbn+0xcc>)
   1b27e:	e012      	b.n	1b2a6 <scalbn+0xb6>
   1b280:	480f      	ldr	r0, [pc, #60]	; (1b2c0 <scalbn+0xd0>)
   1b282:	4910      	ldr	r1, [pc, #64]	; (1b2c4 <scalbn+0xd4>)
   1b284:	1c22      	adds	r2, r4, #0
   1b286:	1c2b      	adds	r3, r5, #0
   1b288:	f000 f82e 	bl	1b2e8 <copysign>
   1b28c:	4a0c      	ldr	r2, [pc, #48]	; (1b2c0 <scalbn+0xd0>)
   1b28e:	4b0d      	ldr	r3, [pc, #52]	; (1b2c4 <scalbn+0xd4>)
   1b290:	e009      	b.n	1b2a6 <scalbn+0xb6>
   1b292:	4b13      	ldr	r3, [pc, #76]	; (1b2e0 <scalbn+0xf0>)
   1b294:	3736      	adds	r7, #54	; 0x36
   1b296:	053f      	lsls	r7, r7, #20
   1b298:	4019      	ands	r1, r3
   1b29a:	1c3d      	adds	r5, r7, #0
   1b29c:	430d      	orrs	r5, r1
   1b29e:	1c20      	adds	r0, r4, #0
   1b2a0:	1c29      	adds	r1, r5, #0
   1b2a2:	4a09      	ldr	r2, [pc, #36]	; (1b2c8 <scalbn+0xd8>)
   1b2a4:	4b09      	ldr	r3, [pc, #36]	; (1b2cc <scalbn+0xdc>)
   1b2a6:	f006 f8c5 	bl	21434 <__aeabi_dmul>
   1b2aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b2ac:	46c0      	nop			; (mov r8, r8)
   1b2ae:	46c0      	nop			; (mov r8, r8)
   1b2b0:	00000000 	.word	0x00000000
   1b2b4:	43500000 	.word	0x43500000
   1b2b8:	8800759c 	.word	0x8800759c
   1b2bc:	7e37e43c 	.word	0x7e37e43c
   1b2c0:	c2f8f359 	.word	0xc2f8f359
   1b2c4:	01a56e1f 	.word	0x01a56e1f
   1b2c8:	00000000 	.word	0x00000000
   1b2cc:	3c900000 	.word	0x3c900000
   1b2d0:	7ff00000 	.word	0x7ff00000
   1b2d4:	ffff3cb0 	.word	0xffff3cb0
   1b2d8:	000007ff 	.word	0x000007ff
   1b2dc:	000007fe 	.word	0x000007fe
   1b2e0:	800fffff 	.word	0x800fffff
   1b2e4:	0000c350 	.word	0x0000c350

0001b2e8 <copysign>:
   1b2e8:	b530      	push	{r4, r5, lr}
   1b2ea:	0fda      	lsrs	r2, r3, #31
   1b2ec:	07d2      	lsls	r2, r2, #31
   1b2ee:	004b      	lsls	r3, r1, #1
   1b2f0:	085b      	lsrs	r3, r3, #1
   1b2f2:	1c11      	adds	r1, r2, #0
   1b2f4:	4319      	orrs	r1, r3
   1b2f6:	bd30      	pop	{r4, r5, pc}

0001b2f8 <__errno>:
   1b2f8:	4b01      	ldr	r3, [pc, #4]	; (1b300 <__errno+0x8>)
   1b2fa:	6818      	ldr	r0, [r3, #0]
   1b2fc:	4770      	bx	lr
   1b2fe:	46c0      	nop			; (mov r8, r8)
   1b300:	200001a0 	.word	0x200001a0

0001b304 <__libc_init_array>:
   1b304:	b570      	push	{r4, r5, r6, lr}
   1b306:	4e0d      	ldr	r6, [pc, #52]	; (1b33c <__libc_init_array+0x38>)
   1b308:	4d0d      	ldr	r5, [pc, #52]	; (1b340 <__libc_init_array+0x3c>)
   1b30a:	2400      	movs	r4, #0
   1b30c:	1bad      	subs	r5, r5, r6
   1b30e:	10ad      	asrs	r5, r5, #2
   1b310:	d005      	beq.n	1b31e <__libc_init_array+0x1a>
   1b312:	00a3      	lsls	r3, r4, #2
   1b314:	58f3      	ldr	r3, [r6, r3]
   1b316:	3401      	adds	r4, #1
   1b318:	4798      	blx	r3
   1b31a:	42a5      	cmp	r5, r4
   1b31c:	d1f9      	bne.n	1b312 <__libc_init_array+0xe>
   1b31e:	f00c f83f 	bl	273a0 <_init>
   1b322:	4e08      	ldr	r6, [pc, #32]	; (1b344 <__libc_init_array+0x40>)
   1b324:	4d08      	ldr	r5, [pc, #32]	; (1b348 <__libc_init_array+0x44>)
   1b326:	2400      	movs	r4, #0
   1b328:	1bad      	subs	r5, r5, r6
   1b32a:	10ad      	asrs	r5, r5, #2
   1b32c:	d005      	beq.n	1b33a <__libc_init_array+0x36>
   1b32e:	00a3      	lsls	r3, r4, #2
   1b330:	58f3      	ldr	r3, [r6, r3]
   1b332:	3401      	adds	r4, #1
   1b334:	4798      	blx	r3
   1b336:	42a5      	cmp	r5, r4
   1b338:	d1f9      	bne.n	1b32e <__libc_init_array+0x2a>
   1b33a:	bd70      	pop	{r4, r5, r6, pc}
   1b33c:	000273ac 	.word	0x000273ac
   1b340:	000273ac 	.word	0x000273ac
   1b344:	000273ac 	.word	0x000273ac
   1b348:	000273b0 	.word	0x000273b0

0001b34c <malloc>:
   1b34c:	b508      	push	{r3, lr}
   1b34e:	4b03      	ldr	r3, [pc, #12]	; (1b35c <malloc+0x10>)
   1b350:	1c01      	adds	r1, r0, #0
   1b352:	6818      	ldr	r0, [r3, #0]
   1b354:	f000 f8f6 	bl	1b544 <_malloc_r>
   1b358:	bd08      	pop	{r3, pc}
   1b35a:	46c0      	nop			; (mov r8, r8)
   1b35c:	200001a0 	.word	0x200001a0

0001b360 <free>:
   1b360:	b508      	push	{r3, lr}
   1b362:	4b03      	ldr	r3, [pc, #12]	; (1b370 <free+0x10>)
   1b364:	1c01      	adds	r1, r0, #0
   1b366:	6818      	ldr	r0, [r3, #0]
   1b368:	f000 f8a4 	bl	1b4b4 <_free_r>
   1b36c:	bd08      	pop	{r3, pc}
   1b36e:	46c0      	nop			; (mov r8, r8)
   1b370:	200001a0 	.word	0x200001a0

0001b374 <memcpy>:
   1b374:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b376:	2a0f      	cmp	r2, #15
   1b378:	d935      	bls.n	1b3e6 <memcpy+0x72>
   1b37a:	1c03      	adds	r3, r0, #0
   1b37c:	430b      	orrs	r3, r1
   1b37e:	079c      	lsls	r4, r3, #30
   1b380:	d135      	bne.n	1b3ee <memcpy+0x7a>
   1b382:	1c16      	adds	r6, r2, #0
   1b384:	3e10      	subs	r6, #16
   1b386:	0936      	lsrs	r6, r6, #4
   1b388:	0135      	lsls	r5, r6, #4
   1b38a:	1945      	adds	r5, r0, r5
   1b38c:	3510      	adds	r5, #16
   1b38e:	1c0c      	adds	r4, r1, #0
   1b390:	1c03      	adds	r3, r0, #0
   1b392:	6827      	ldr	r7, [r4, #0]
   1b394:	601f      	str	r7, [r3, #0]
   1b396:	6867      	ldr	r7, [r4, #4]
   1b398:	605f      	str	r7, [r3, #4]
   1b39a:	68a7      	ldr	r7, [r4, #8]
   1b39c:	609f      	str	r7, [r3, #8]
   1b39e:	68e7      	ldr	r7, [r4, #12]
   1b3a0:	3410      	adds	r4, #16
   1b3a2:	60df      	str	r7, [r3, #12]
   1b3a4:	3310      	adds	r3, #16
   1b3a6:	42ab      	cmp	r3, r5
   1b3a8:	d1f3      	bne.n	1b392 <memcpy+0x1e>
   1b3aa:	1c73      	adds	r3, r6, #1
   1b3ac:	011b      	lsls	r3, r3, #4
   1b3ae:	18c5      	adds	r5, r0, r3
   1b3b0:	18c9      	adds	r1, r1, r3
   1b3b2:	230f      	movs	r3, #15
   1b3b4:	4013      	ands	r3, r2
   1b3b6:	2b03      	cmp	r3, #3
   1b3b8:	d91b      	bls.n	1b3f2 <memcpy+0x7e>
   1b3ba:	1f1c      	subs	r4, r3, #4
   1b3bc:	08a4      	lsrs	r4, r4, #2
   1b3be:	3401      	adds	r4, #1
   1b3c0:	00a4      	lsls	r4, r4, #2
   1b3c2:	2300      	movs	r3, #0
   1b3c4:	58ce      	ldr	r6, [r1, r3]
   1b3c6:	50ee      	str	r6, [r5, r3]
   1b3c8:	3304      	adds	r3, #4
   1b3ca:	42a3      	cmp	r3, r4
   1b3cc:	d1fa      	bne.n	1b3c4 <memcpy+0x50>
   1b3ce:	18ed      	adds	r5, r5, r3
   1b3d0:	18c9      	adds	r1, r1, r3
   1b3d2:	2303      	movs	r3, #3
   1b3d4:	401a      	ands	r2, r3
   1b3d6:	d005      	beq.n	1b3e4 <memcpy+0x70>
   1b3d8:	2300      	movs	r3, #0
   1b3da:	5ccc      	ldrb	r4, [r1, r3]
   1b3dc:	54ec      	strb	r4, [r5, r3]
   1b3de:	3301      	adds	r3, #1
   1b3e0:	4293      	cmp	r3, r2
   1b3e2:	d1fa      	bne.n	1b3da <memcpy+0x66>
   1b3e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b3e6:	1c05      	adds	r5, r0, #0
   1b3e8:	2a00      	cmp	r2, #0
   1b3ea:	d1f5      	bne.n	1b3d8 <memcpy+0x64>
   1b3ec:	e7fa      	b.n	1b3e4 <memcpy+0x70>
   1b3ee:	1c05      	adds	r5, r0, #0
   1b3f0:	e7f2      	b.n	1b3d8 <memcpy+0x64>
   1b3f2:	1c1a      	adds	r2, r3, #0
   1b3f4:	e7f8      	b.n	1b3e8 <memcpy+0x74>
   1b3f6:	46c0      	nop			; (mov r8, r8)

0001b3f8 <memset>:
   1b3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b3fa:	464f      	mov	r7, r9
   1b3fc:	4646      	mov	r6, r8
   1b3fe:	b4c0      	push	{r6, r7}
   1b400:	b083      	sub	sp, #12
   1b402:	0783      	lsls	r3, r0, #30
   1b404:	d052      	beq.n	1b4ac <memset+0xb4>
   1b406:	1e54      	subs	r4, r2, #1
   1b408:	2a00      	cmp	r2, #0
   1b40a:	d04a      	beq.n	1b4a2 <memset+0xaa>
   1b40c:	b2ce      	uxtb	r6, r1
   1b40e:	1c03      	adds	r3, r0, #0
   1b410:	2503      	movs	r5, #3
   1b412:	e003      	b.n	1b41c <memset+0x24>
   1b414:	1e62      	subs	r2, r4, #1
   1b416:	2c00      	cmp	r4, #0
   1b418:	d043      	beq.n	1b4a2 <memset+0xaa>
   1b41a:	1c14      	adds	r4, r2, #0
   1b41c:	3301      	adds	r3, #1
   1b41e:	1e5a      	subs	r2, r3, #1
   1b420:	7016      	strb	r6, [r2, #0]
   1b422:	422b      	tst	r3, r5
   1b424:	d1f6      	bne.n	1b414 <memset+0x1c>
   1b426:	2c03      	cmp	r4, #3
   1b428:	d933      	bls.n	1b492 <memset+0x9a>
   1b42a:	25ff      	movs	r5, #255	; 0xff
   1b42c:	400d      	ands	r5, r1
   1b42e:	022a      	lsls	r2, r5, #8
   1b430:	4315      	orrs	r5, r2
   1b432:	042a      	lsls	r2, r5, #16
   1b434:	4315      	orrs	r5, r2
   1b436:	2c0f      	cmp	r4, #15
   1b438:	d91a      	bls.n	1b470 <memset+0x78>
   1b43a:	1c27      	adds	r7, r4, #0
   1b43c:	3f10      	subs	r7, #16
   1b43e:	093f      	lsrs	r7, r7, #4
   1b440:	46b9      	mov	r9, r7
   1b442:	013f      	lsls	r7, r7, #4
   1b444:	46b8      	mov	r8, r7
   1b446:	2710      	movs	r7, #16
   1b448:	18ff      	adds	r7, r7, r3
   1b44a:	46bc      	mov	ip, r7
   1b44c:	4646      	mov	r6, r8
   1b44e:	1c1a      	adds	r2, r3, #0
   1b450:	4466      	add	r6, ip
   1b452:	6015      	str	r5, [r2, #0]
   1b454:	6055      	str	r5, [r2, #4]
   1b456:	6095      	str	r5, [r2, #8]
   1b458:	60d5      	str	r5, [r2, #12]
   1b45a:	3210      	adds	r2, #16
   1b45c:	42b2      	cmp	r2, r6
   1b45e:	d1f8      	bne.n	1b452 <memset+0x5a>
   1b460:	464f      	mov	r7, r9
   1b462:	3701      	adds	r7, #1
   1b464:	013f      	lsls	r7, r7, #4
   1b466:	220f      	movs	r2, #15
   1b468:	19db      	adds	r3, r3, r7
   1b46a:	4014      	ands	r4, r2
   1b46c:	2c03      	cmp	r4, #3
   1b46e:	d910      	bls.n	1b492 <memset+0x9a>
   1b470:	1f27      	subs	r7, r4, #4
   1b472:	1d1e      	adds	r6, r3, #4
   1b474:	08bf      	lsrs	r7, r7, #2
   1b476:	9601      	str	r6, [sp, #4]
   1b478:	00be      	lsls	r6, r7, #2
   1b47a:	46b4      	mov	ip, r6
   1b47c:	9e01      	ldr	r6, [sp, #4]
   1b47e:	1c1a      	adds	r2, r3, #0
   1b480:	4466      	add	r6, ip
   1b482:	c220      	stmia	r2!, {r5}
   1b484:	42b2      	cmp	r2, r6
   1b486:	d1fc      	bne.n	1b482 <memset+0x8a>
   1b488:	3701      	adds	r7, #1
   1b48a:	00bf      	lsls	r7, r7, #2
   1b48c:	2203      	movs	r2, #3
   1b48e:	19db      	adds	r3, r3, r7
   1b490:	4014      	ands	r4, r2
   1b492:	2c00      	cmp	r4, #0
   1b494:	d005      	beq.n	1b4a2 <memset+0xaa>
   1b496:	b2c9      	uxtb	r1, r1
   1b498:	191c      	adds	r4, r3, r4
   1b49a:	7019      	strb	r1, [r3, #0]
   1b49c:	3301      	adds	r3, #1
   1b49e:	42a3      	cmp	r3, r4
   1b4a0:	d1fb      	bne.n	1b49a <memset+0xa2>
   1b4a2:	b003      	add	sp, #12
   1b4a4:	bc0c      	pop	{r2, r3}
   1b4a6:	4690      	mov	r8, r2
   1b4a8:	4699      	mov	r9, r3
   1b4aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b4ac:	1c03      	adds	r3, r0, #0
   1b4ae:	1c14      	adds	r4, r2, #0
   1b4b0:	e7b9      	b.n	1b426 <memset+0x2e>
   1b4b2:	46c0      	nop			; (mov r8, r8)

0001b4b4 <_free_r>:
   1b4b4:	b530      	push	{r4, r5, lr}
   1b4b6:	2900      	cmp	r1, #0
   1b4b8:	d00f      	beq.n	1b4da <_free_r+0x26>
   1b4ba:	3904      	subs	r1, #4
   1b4bc:	680b      	ldr	r3, [r1, #0]
   1b4be:	2b00      	cmp	r3, #0
   1b4c0:	db1e      	blt.n	1b500 <_free_r+0x4c>
   1b4c2:	4b1f      	ldr	r3, [pc, #124]	; (1b540 <_free_r+0x8c>)
   1b4c4:	681a      	ldr	r2, [r3, #0]
   1b4c6:	2a00      	cmp	r2, #0
   1b4c8:	d005      	beq.n	1b4d6 <_free_r+0x22>
   1b4ca:	428a      	cmp	r2, r1
   1b4cc:	d909      	bls.n	1b4e2 <_free_r+0x2e>
   1b4ce:	6808      	ldr	r0, [r1, #0]
   1b4d0:	180c      	adds	r4, r1, r0
   1b4d2:	42a2      	cmp	r2, r4
   1b4d4:	d016      	beq.n	1b504 <_free_r+0x50>
   1b4d6:	604a      	str	r2, [r1, #4]
   1b4d8:	6019      	str	r1, [r3, #0]
   1b4da:	bd30      	pop	{r4, r5, pc}
   1b4dc:	428b      	cmp	r3, r1
   1b4de:	d803      	bhi.n	1b4e8 <_free_r+0x34>
   1b4e0:	1c1a      	adds	r2, r3, #0
   1b4e2:	6853      	ldr	r3, [r2, #4]
   1b4e4:	2b00      	cmp	r3, #0
   1b4e6:	d1f9      	bne.n	1b4dc <_free_r+0x28>
   1b4e8:	6815      	ldr	r5, [r2, #0]
   1b4ea:	1954      	adds	r4, r2, r5
   1b4ec:	428c      	cmp	r4, r1
   1b4ee:	d013      	beq.n	1b518 <_free_r+0x64>
   1b4f0:	d80f      	bhi.n	1b512 <_free_r+0x5e>
   1b4f2:	6808      	ldr	r0, [r1, #0]
   1b4f4:	180c      	adds	r4, r1, r0
   1b4f6:	429c      	cmp	r4, r3
   1b4f8:	d01a      	beq.n	1b530 <_free_r+0x7c>
   1b4fa:	604b      	str	r3, [r1, #4]
   1b4fc:	6051      	str	r1, [r2, #4]
   1b4fe:	e7ec      	b.n	1b4da <_free_r+0x26>
   1b500:	18c9      	adds	r1, r1, r3
   1b502:	e7de      	b.n	1b4c2 <_free_r+0xe>
   1b504:	6814      	ldr	r4, [r2, #0]
   1b506:	6852      	ldr	r2, [r2, #4]
   1b508:	1900      	adds	r0, r0, r4
   1b50a:	6008      	str	r0, [r1, #0]
   1b50c:	604a      	str	r2, [r1, #4]
   1b50e:	6019      	str	r1, [r3, #0]
   1b510:	e7e3      	b.n	1b4da <_free_r+0x26>
   1b512:	230c      	movs	r3, #12
   1b514:	6003      	str	r3, [r0, #0]
   1b516:	e7e0      	b.n	1b4da <_free_r+0x26>
   1b518:	6809      	ldr	r1, [r1, #0]
   1b51a:	186d      	adds	r5, r5, r1
   1b51c:	1951      	adds	r1, r2, r5
   1b51e:	6015      	str	r5, [r2, #0]
   1b520:	4299      	cmp	r1, r3
   1b522:	d1da      	bne.n	1b4da <_free_r+0x26>
   1b524:	6819      	ldr	r1, [r3, #0]
   1b526:	685b      	ldr	r3, [r3, #4]
   1b528:	186d      	adds	r5, r5, r1
   1b52a:	6015      	str	r5, [r2, #0]
   1b52c:	6053      	str	r3, [r2, #4]
   1b52e:	e7d4      	b.n	1b4da <_free_r+0x26>
   1b530:	681c      	ldr	r4, [r3, #0]
   1b532:	685b      	ldr	r3, [r3, #4]
   1b534:	1900      	adds	r0, r0, r4
   1b536:	6008      	str	r0, [r1, #0]
   1b538:	604b      	str	r3, [r1, #4]
   1b53a:	6051      	str	r1, [r2, #4]
   1b53c:	e7cd      	b.n	1b4da <_free_r+0x26>
   1b53e:	46c0      	nop			; (mov r8, r8)
   1b540:	2000052c 	.word	0x2000052c

0001b544 <_malloc_r>:
   1b544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b546:	1ccd      	adds	r5, r1, #3
   1b548:	2303      	movs	r3, #3
   1b54a:	439d      	bics	r5, r3
   1b54c:	3508      	adds	r5, #8
   1b54e:	1c07      	adds	r7, r0, #0
   1b550:	2d0c      	cmp	r5, #12
   1b552:	d227      	bcs.n	1b5a4 <_malloc_r+0x60>
   1b554:	250c      	movs	r5, #12
   1b556:	42a9      	cmp	r1, r5
   1b558:	d826      	bhi.n	1b5a8 <_malloc_r+0x64>
   1b55a:	4e27      	ldr	r6, [pc, #156]	; (1b5f8 <_malloc_r+0xb4>)
   1b55c:	6833      	ldr	r3, [r6, #0]
   1b55e:	2b00      	cmp	r3, #0
   1b560:	d00a      	beq.n	1b578 <_malloc_r+0x34>
   1b562:	6819      	ldr	r1, [r3, #0]
   1b564:	1b4a      	subs	r2, r1, r5
   1b566:	d404      	bmi.n	1b572 <_malloc_r+0x2e>
   1b568:	e040      	b.n	1b5ec <_malloc_r+0xa8>
   1b56a:	6821      	ldr	r1, [r4, #0]
   1b56c:	1b4a      	subs	r2, r1, r5
   1b56e:	d51f      	bpl.n	1b5b0 <_malloc_r+0x6c>
   1b570:	1c23      	adds	r3, r4, #0
   1b572:	685c      	ldr	r4, [r3, #4]
   1b574:	2c00      	cmp	r4, #0
   1b576:	d1f8      	bne.n	1b56a <_malloc_r+0x26>
   1b578:	6871      	ldr	r1, [r6, #4]
   1b57a:	2900      	cmp	r1, #0
   1b57c:	d030      	beq.n	1b5e0 <_malloc_r+0x9c>
   1b57e:	1c38      	adds	r0, r7, #0
   1b580:	1c29      	adds	r1, r5, #0
   1b582:	f000 f993 	bl	1b8ac <_sbrk_r>
   1b586:	1c43      	adds	r3, r0, #1
   1b588:	d00e      	beq.n	1b5a8 <_malloc_r+0x64>
   1b58a:	1cc4      	adds	r4, r0, #3
   1b58c:	2303      	movs	r3, #3
   1b58e:	439c      	bics	r4, r3
   1b590:	42a0      	cmp	r0, r4
   1b592:	d005      	beq.n	1b5a0 <_malloc_r+0x5c>
   1b594:	1a21      	subs	r1, r4, r0
   1b596:	1c38      	adds	r0, r7, #0
   1b598:	f000 f988 	bl	1b8ac <_sbrk_r>
   1b59c:	3001      	adds	r0, #1
   1b59e:	d003      	beq.n	1b5a8 <_malloc_r+0x64>
   1b5a0:	6025      	str	r5, [r4, #0]
   1b5a2:	e00a      	b.n	1b5ba <_malloc_r+0x76>
   1b5a4:	2d00      	cmp	r5, #0
   1b5a6:	dad6      	bge.n	1b556 <_malloc_r+0x12>
   1b5a8:	230c      	movs	r3, #12
   1b5aa:	603b      	str	r3, [r7, #0]
   1b5ac:	2000      	movs	r0, #0
   1b5ae:	e00d      	b.n	1b5cc <_malloc_r+0x88>
   1b5b0:	2a0b      	cmp	r2, #11
   1b5b2:	d90c      	bls.n	1b5ce <_malloc_r+0x8a>
   1b5b4:	6022      	str	r2, [r4, #0]
   1b5b6:	18a4      	adds	r4, r4, r2
   1b5b8:	6025      	str	r5, [r4, #0]
   1b5ba:	1c20      	adds	r0, r4, #0
   1b5bc:	300b      	adds	r0, #11
   1b5be:	2207      	movs	r2, #7
   1b5c0:	1d23      	adds	r3, r4, #4
   1b5c2:	4390      	bics	r0, r2
   1b5c4:	1ac3      	subs	r3, r0, r3
   1b5c6:	d001      	beq.n	1b5cc <_malloc_r+0x88>
   1b5c8:	425a      	negs	r2, r3
   1b5ca:	50e2      	str	r2, [r4, r3]
   1b5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b5ce:	429c      	cmp	r4, r3
   1b5d0:	d002      	beq.n	1b5d8 <_malloc_r+0x94>
   1b5d2:	6862      	ldr	r2, [r4, #4]
   1b5d4:	605a      	str	r2, [r3, #4]
   1b5d6:	e7f0      	b.n	1b5ba <_malloc_r+0x76>
   1b5d8:	1c1a      	adds	r2, r3, #0
   1b5da:	6032      	str	r2, [r6, #0]
   1b5dc:	1c1c      	adds	r4, r3, #0
   1b5de:	e7ec      	b.n	1b5ba <_malloc_r+0x76>
   1b5e0:	1c38      	adds	r0, r7, #0
   1b5e2:	2100      	movs	r1, #0
   1b5e4:	f000 f962 	bl	1b8ac <_sbrk_r>
   1b5e8:	6070      	str	r0, [r6, #4]
   1b5ea:	e7c8      	b.n	1b57e <_malloc_r+0x3a>
   1b5ec:	2a0b      	cmp	r2, #11
   1b5ee:	d801      	bhi.n	1b5f4 <_malloc_r+0xb0>
   1b5f0:	685a      	ldr	r2, [r3, #4]
   1b5f2:	e7f2      	b.n	1b5da <_malloc_r+0x96>
   1b5f4:	1c1c      	adds	r4, r3, #0
   1b5f6:	e7dd      	b.n	1b5b4 <_malloc_r+0x70>
   1b5f8:	2000052c 	.word	0x2000052c

0001b5fc <_iprintf_r>:
   1b5fc:	b40e      	push	{r1, r2, r3}
   1b5fe:	b510      	push	{r4, lr}
   1b600:	1c04      	adds	r4, r0, #0
   1b602:	b083      	sub	sp, #12
   1b604:	2800      	cmp	r0, #0
   1b606:	d004      	beq.n	1b612 <_iprintf_r+0x16>
   1b608:	6983      	ldr	r3, [r0, #24]
   1b60a:	2b00      	cmp	r3, #0
   1b60c:	d101      	bne.n	1b612 <_iprintf_r+0x16>
   1b60e:	f002 fd57 	bl	1e0c0 <__sinit>
   1b612:	ab06      	add	r3, sp, #24
   1b614:	68a1      	ldr	r1, [r4, #8]
   1b616:	1c20      	adds	r0, r4, #0
   1b618:	9a05      	ldr	r2, [sp, #20]
   1b61a:	9301      	str	r3, [sp, #4]
   1b61c:	f001 f992 	bl	1c944 <_vfiprintf_r>
   1b620:	b003      	add	sp, #12
   1b622:	bc10      	pop	{r4}
   1b624:	bc08      	pop	{r3}
   1b626:	b003      	add	sp, #12
   1b628:	4718      	bx	r3
   1b62a:	46c0      	nop			; (mov r8, r8)

0001b62c <iprintf>:
   1b62c:	b40f      	push	{r0, r1, r2, r3}
   1b62e:	b510      	push	{r4, lr}
   1b630:	4b0b      	ldr	r3, [pc, #44]	; (1b660 <iprintf+0x34>)
   1b632:	b082      	sub	sp, #8
   1b634:	681c      	ldr	r4, [r3, #0]
   1b636:	2c00      	cmp	r4, #0
   1b638:	d005      	beq.n	1b646 <iprintf+0x1a>
   1b63a:	69a3      	ldr	r3, [r4, #24]
   1b63c:	2b00      	cmp	r3, #0
   1b63e:	d102      	bne.n	1b646 <iprintf+0x1a>
   1b640:	1c20      	adds	r0, r4, #0
   1b642:	f002 fd3d 	bl	1e0c0 <__sinit>
   1b646:	ab05      	add	r3, sp, #20
   1b648:	68a1      	ldr	r1, [r4, #8]
   1b64a:	1c20      	adds	r0, r4, #0
   1b64c:	9a04      	ldr	r2, [sp, #16]
   1b64e:	9301      	str	r3, [sp, #4]
   1b650:	f001 f978 	bl	1c944 <_vfiprintf_r>
   1b654:	b002      	add	sp, #8
   1b656:	bc10      	pop	{r4}
   1b658:	bc08      	pop	{r3}
   1b65a:	b004      	add	sp, #16
   1b65c:	4718      	bx	r3
   1b65e:	46c0      	nop			; (mov r8, r8)
   1b660:	200001a0 	.word	0x200001a0

0001b664 <_putchar_r>:
   1b664:	b538      	push	{r3, r4, r5, lr}
   1b666:	1c04      	adds	r4, r0, #0
   1b668:	1c0d      	adds	r5, r1, #0
   1b66a:	2800      	cmp	r0, #0
   1b66c:	d004      	beq.n	1b678 <_putchar_r+0x14>
   1b66e:	6983      	ldr	r3, [r0, #24]
   1b670:	2b00      	cmp	r3, #0
   1b672:	d101      	bne.n	1b678 <_putchar_r+0x14>
   1b674:	f002 fd24 	bl	1e0c0 <__sinit>
   1b678:	1c29      	adds	r1, r5, #0
   1b67a:	68a2      	ldr	r2, [r4, #8]
   1b67c:	1c20      	adds	r0, r4, #0
   1b67e:	f000 f815 	bl	1b6ac <_putc_r>
   1b682:	bd38      	pop	{r3, r4, r5, pc}

0001b684 <putchar>:
   1b684:	b538      	push	{r3, r4, r5, lr}
   1b686:	4b08      	ldr	r3, [pc, #32]	; (1b6a8 <putchar+0x24>)
   1b688:	1c05      	adds	r5, r0, #0
   1b68a:	681c      	ldr	r4, [r3, #0]
   1b68c:	2c00      	cmp	r4, #0
   1b68e:	d005      	beq.n	1b69c <putchar+0x18>
   1b690:	69a3      	ldr	r3, [r4, #24]
   1b692:	2b00      	cmp	r3, #0
   1b694:	d102      	bne.n	1b69c <putchar+0x18>
   1b696:	1c20      	adds	r0, r4, #0
   1b698:	f002 fd12 	bl	1e0c0 <__sinit>
   1b69c:	1c29      	adds	r1, r5, #0
   1b69e:	68a2      	ldr	r2, [r4, #8]
   1b6a0:	1c20      	adds	r0, r4, #0
   1b6a2:	f000 f803 	bl	1b6ac <_putc_r>
   1b6a6:	bd38      	pop	{r3, r4, r5, pc}
   1b6a8:	200001a0 	.word	0x200001a0

0001b6ac <_putc_r>:
   1b6ac:	b570      	push	{r4, r5, r6, lr}
   1b6ae:	1c05      	adds	r5, r0, #0
   1b6b0:	1c0e      	adds	r6, r1, #0
   1b6b2:	1c14      	adds	r4, r2, #0
   1b6b4:	2800      	cmp	r0, #0
   1b6b6:	d002      	beq.n	1b6be <_putc_r+0x12>
   1b6b8:	6982      	ldr	r2, [r0, #24]
   1b6ba:	2a00      	cmp	r2, #0
   1b6bc:	d023      	beq.n	1b706 <_putc_r+0x5a>
   1b6be:	4b1a      	ldr	r3, [pc, #104]	; (1b728 <_putc_r+0x7c>)
   1b6c0:	429c      	cmp	r4, r3
   1b6c2:	d025      	beq.n	1b710 <_putc_r+0x64>
   1b6c4:	4b19      	ldr	r3, [pc, #100]	; (1b72c <_putc_r+0x80>)
   1b6c6:	429c      	cmp	r4, r3
   1b6c8:	d02a      	beq.n	1b720 <_putc_r+0x74>
   1b6ca:	4b19      	ldr	r3, [pc, #100]	; (1b730 <_putc_r+0x84>)
   1b6cc:	429c      	cmp	r4, r3
   1b6ce:	d029      	beq.n	1b724 <_putc_r+0x78>
   1b6d0:	68a3      	ldr	r3, [r4, #8]
   1b6d2:	3b01      	subs	r3, #1
   1b6d4:	60a3      	str	r3, [r4, #8]
   1b6d6:	2b00      	cmp	r3, #0
   1b6d8:	db06      	blt.n	1b6e8 <_putc_r+0x3c>
   1b6da:	6822      	ldr	r2, [r4, #0]
   1b6dc:	7016      	strb	r6, [r2, #0]
   1b6de:	6823      	ldr	r3, [r4, #0]
   1b6e0:	1c5a      	adds	r2, r3, #1
   1b6e2:	6022      	str	r2, [r4, #0]
   1b6e4:	7818      	ldrb	r0, [r3, #0]
   1b6e6:	bd70      	pop	{r4, r5, r6, pc}
   1b6e8:	69a2      	ldr	r2, [r4, #24]
   1b6ea:	4293      	cmp	r3, r2
   1b6ec:	db12      	blt.n	1b714 <_putc_r+0x68>
   1b6ee:	6823      	ldr	r3, [r4, #0]
   1b6f0:	701e      	strb	r6, [r3, #0]
   1b6f2:	6823      	ldr	r3, [r4, #0]
   1b6f4:	781a      	ldrb	r2, [r3, #0]
   1b6f6:	2a0a      	cmp	r2, #10
   1b6f8:	d1f2      	bne.n	1b6e0 <_putc_r+0x34>
   1b6fa:	1c28      	adds	r0, r5, #0
   1b6fc:	210a      	movs	r1, #10
   1b6fe:	1c22      	adds	r2, r4, #0
   1b700:	f001 fa76 	bl	1cbf0 <__swbuf_r>
   1b704:	e7ef      	b.n	1b6e6 <_putc_r+0x3a>
   1b706:	f002 fcdb 	bl	1e0c0 <__sinit>
   1b70a:	4b07      	ldr	r3, [pc, #28]	; (1b728 <_putc_r+0x7c>)
   1b70c:	429c      	cmp	r4, r3
   1b70e:	d1d9      	bne.n	1b6c4 <_putc_r+0x18>
   1b710:	686c      	ldr	r4, [r5, #4]
   1b712:	e7dd      	b.n	1b6d0 <_putc_r+0x24>
   1b714:	1c28      	adds	r0, r5, #0
   1b716:	1c31      	adds	r1, r6, #0
   1b718:	1c22      	adds	r2, r4, #0
   1b71a:	f001 fa69 	bl	1cbf0 <__swbuf_r>
   1b71e:	e7e2      	b.n	1b6e6 <_putc_r+0x3a>
   1b720:	68ac      	ldr	r4, [r5, #8]
   1b722:	e7d5      	b.n	1b6d0 <_putc_r+0x24>
   1b724:	68ec      	ldr	r4, [r5, #12]
   1b726:	e7d3      	b.n	1b6d0 <_putc_r+0x24>
   1b728:	0002714c 	.word	0x0002714c
   1b72c:	0002712c 	.word	0x0002712c
   1b730:	0002710c 	.word	0x0002710c

0001b734 <putc>:
   1b734:	4b1f      	ldr	r3, [pc, #124]	; (1b7b4 <putc+0x80>)
   1b736:	b570      	push	{r4, r5, r6, lr}
   1b738:	681d      	ldr	r5, [r3, #0]
   1b73a:	1c06      	adds	r6, r0, #0
   1b73c:	1c0c      	adds	r4, r1, #0
   1b73e:	2d00      	cmp	r5, #0
   1b740:	d002      	beq.n	1b748 <putc+0x14>
   1b742:	69aa      	ldr	r2, [r5, #24]
   1b744:	2a00      	cmp	r2, #0
   1b746:	d023      	beq.n	1b790 <putc+0x5c>
   1b748:	4b1b      	ldr	r3, [pc, #108]	; (1b7b8 <putc+0x84>)
   1b74a:	429c      	cmp	r4, r3
   1b74c:	d026      	beq.n	1b79c <putc+0x68>
   1b74e:	4b1b      	ldr	r3, [pc, #108]	; (1b7bc <putc+0x88>)
   1b750:	429c      	cmp	r4, r3
   1b752:	d02b      	beq.n	1b7ac <putc+0x78>
   1b754:	4b1a      	ldr	r3, [pc, #104]	; (1b7c0 <putc+0x8c>)
   1b756:	429c      	cmp	r4, r3
   1b758:	d02a      	beq.n	1b7b0 <putc+0x7c>
   1b75a:	68a3      	ldr	r3, [r4, #8]
   1b75c:	3b01      	subs	r3, #1
   1b75e:	60a3      	str	r3, [r4, #8]
   1b760:	2b00      	cmp	r3, #0
   1b762:	db06      	blt.n	1b772 <putc+0x3e>
   1b764:	6822      	ldr	r2, [r4, #0]
   1b766:	7016      	strb	r6, [r2, #0]
   1b768:	6823      	ldr	r3, [r4, #0]
   1b76a:	1c5a      	adds	r2, r3, #1
   1b76c:	6022      	str	r2, [r4, #0]
   1b76e:	7818      	ldrb	r0, [r3, #0]
   1b770:	bd70      	pop	{r4, r5, r6, pc}
   1b772:	69a2      	ldr	r2, [r4, #24]
   1b774:	4293      	cmp	r3, r2
   1b776:	db13      	blt.n	1b7a0 <putc+0x6c>
   1b778:	6823      	ldr	r3, [r4, #0]
   1b77a:	701e      	strb	r6, [r3, #0]
   1b77c:	6823      	ldr	r3, [r4, #0]
   1b77e:	781a      	ldrb	r2, [r3, #0]
   1b780:	2a0a      	cmp	r2, #10
   1b782:	d1f2      	bne.n	1b76a <putc+0x36>
   1b784:	1c28      	adds	r0, r5, #0
   1b786:	210a      	movs	r1, #10
   1b788:	1c22      	adds	r2, r4, #0
   1b78a:	f001 fa31 	bl	1cbf0 <__swbuf_r>
   1b78e:	e7ef      	b.n	1b770 <putc+0x3c>
   1b790:	1c28      	adds	r0, r5, #0
   1b792:	f002 fc95 	bl	1e0c0 <__sinit>
   1b796:	4b08      	ldr	r3, [pc, #32]	; (1b7b8 <putc+0x84>)
   1b798:	429c      	cmp	r4, r3
   1b79a:	d1d8      	bne.n	1b74e <putc+0x1a>
   1b79c:	686c      	ldr	r4, [r5, #4]
   1b79e:	e7dc      	b.n	1b75a <putc+0x26>
   1b7a0:	1c28      	adds	r0, r5, #0
   1b7a2:	1c31      	adds	r1, r6, #0
   1b7a4:	1c22      	adds	r2, r4, #0
   1b7a6:	f001 fa23 	bl	1cbf0 <__swbuf_r>
   1b7aa:	e7e1      	b.n	1b770 <putc+0x3c>
   1b7ac:	68ac      	ldr	r4, [r5, #8]
   1b7ae:	e7d4      	b.n	1b75a <putc+0x26>
   1b7b0:	68ec      	ldr	r4, [r5, #12]
   1b7b2:	e7d2      	b.n	1b75a <putc+0x26>
   1b7b4:	200001a0 	.word	0x200001a0
   1b7b8:	0002714c 	.word	0x0002714c
   1b7bc:	0002712c 	.word	0x0002712c
   1b7c0:	0002710c 	.word	0x0002710c

0001b7c4 <_puts_r>:
   1b7c4:	b570      	push	{r4, r5, r6, lr}
   1b7c6:	1c06      	adds	r6, r0, #0
   1b7c8:	1c0d      	adds	r5, r1, #0
   1b7ca:	2800      	cmp	r0, #0
   1b7cc:	d002      	beq.n	1b7d4 <_puts_r+0x10>
   1b7ce:	6982      	ldr	r2, [r0, #24]
   1b7d0:	2a00      	cmp	r2, #0
   1b7d2:	d047      	beq.n	1b864 <_puts_r+0xa0>
   1b7d4:	68b4      	ldr	r4, [r6, #8]
   1b7d6:	89a3      	ldrh	r3, [r4, #12]
   1b7d8:	071a      	lsls	r2, r3, #28
   1b7da:	d53c      	bpl.n	1b856 <_puts_r+0x92>
   1b7dc:	6923      	ldr	r3, [r4, #16]
   1b7de:	2b00      	cmp	r3, #0
   1b7e0:	d039      	beq.n	1b856 <_puts_r+0x92>
   1b7e2:	782b      	ldrb	r3, [r5, #0]
   1b7e4:	2b00      	cmp	r3, #0
   1b7e6:	d00e      	beq.n	1b806 <_puts_r+0x42>
   1b7e8:	68a3      	ldr	r3, [r4, #8]
   1b7ea:	3b01      	subs	r3, #1
   1b7ec:	60a3      	str	r3, [r4, #8]
   1b7ee:	2b00      	cmp	r3, #0
   1b7f0:	db16      	blt.n	1b820 <_puts_r+0x5c>
   1b7f2:	782b      	ldrb	r3, [r5, #0]
   1b7f4:	6822      	ldr	r2, [r4, #0]
   1b7f6:	7013      	strb	r3, [r2, #0]
   1b7f8:	6823      	ldr	r3, [r4, #0]
   1b7fa:	3301      	adds	r3, #1
   1b7fc:	6023      	str	r3, [r4, #0]
   1b7fe:	3501      	adds	r5, #1
   1b800:	782b      	ldrb	r3, [r5, #0]
   1b802:	2b00      	cmp	r3, #0
   1b804:	d1f0      	bne.n	1b7e8 <_puts_r+0x24>
   1b806:	68a3      	ldr	r3, [r4, #8]
   1b808:	3b01      	subs	r3, #1
   1b80a:	60a3      	str	r3, [r4, #8]
   1b80c:	2b00      	cmp	r3, #0
   1b80e:	db2c      	blt.n	1b86a <_puts_r+0xa6>
   1b810:	6822      	ldr	r2, [r4, #0]
   1b812:	230a      	movs	r3, #10
   1b814:	7013      	strb	r3, [r2, #0]
   1b816:	6823      	ldr	r3, [r4, #0]
   1b818:	3301      	adds	r3, #1
   1b81a:	6023      	str	r3, [r4, #0]
   1b81c:	200a      	movs	r0, #10
   1b81e:	e019      	b.n	1b854 <_puts_r+0x90>
   1b820:	69a2      	ldr	r2, [r4, #24]
   1b822:	4293      	cmp	r3, r2
   1b824:	db09      	blt.n	1b83a <_puts_r+0x76>
   1b826:	782b      	ldrb	r3, [r5, #0]
   1b828:	6822      	ldr	r2, [r4, #0]
   1b82a:	7013      	strb	r3, [r2, #0]
   1b82c:	6823      	ldr	r3, [r4, #0]
   1b82e:	781a      	ldrb	r2, [r3, #0]
   1b830:	2a0a      	cmp	r2, #10
   1b832:	d1e2      	bne.n	1b7fa <_puts_r+0x36>
   1b834:	1c30      	adds	r0, r6, #0
   1b836:	210a      	movs	r1, #10
   1b838:	e001      	b.n	1b83e <_puts_r+0x7a>
   1b83a:	7829      	ldrb	r1, [r5, #0]
   1b83c:	1c30      	adds	r0, r6, #0
   1b83e:	1c22      	adds	r2, r4, #0
   1b840:	f001 f9d6 	bl	1cbf0 <__swbuf_r>
   1b844:	1c43      	adds	r3, r0, #1
   1b846:	425a      	negs	r2, r3
   1b848:	4153      	adcs	r3, r2
   1b84a:	b2db      	uxtb	r3, r3
   1b84c:	2b00      	cmp	r3, #0
   1b84e:	d0d6      	beq.n	1b7fe <_puts_r+0x3a>
   1b850:	2001      	movs	r0, #1
   1b852:	4240      	negs	r0, r0
   1b854:	bd70      	pop	{r4, r5, r6, pc}
   1b856:	1c30      	adds	r0, r6, #0
   1b858:	1c21      	adds	r1, r4, #0
   1b85a:	f001 fa3b 	bl	1ccd4 <__swsetup_r>
   1b85e:	2800      	cmp	r0, #0
   1b860:	d0bf      	beq.n	1b7e2 <_puts_r+0x1e>
   1b862:	e7f5      	b.n	1b850 <_puts_r+0x8c>
   1b864:	f002 fc2c 	bl	1e0c0 <__sinit>
   1b868:	e7b4      	b.n	1b7d4 <_puts_r+0x10>
   1b86a:	69a2      	ldr	r2, [r4, #24]
   1b86c:	4293      	cmp	r3, r2
   1b86e:	db06      	blt.n	1b87e <_puts_r+0xba>
   1b870:	6822      	ldr	r2, [r4, #0]
   1b872:	230a      	movs	r3, #10
   1b874:	7013      	strb	r3, [r2, #0]
   1b876:	6823      	ldr	r3, [r4, #0]
   1b878:	781a      	ldrb	r2, [r3, #0]
   1b87a:	2a0a      	cmp	r2, #10
   1b87c:	d1cc      	bne.n	1b818 <_puts_r+0x54>
   1b87e:	1c22      	adds	r2, r4, #0
   1b880:	1c30      	adds	r0, r6, #0
   1b882:	210a      	movs	r1, #10
   1b884:	f001 f9b4 	bl	1cbf0 <__swbuf_r>
   1b888:	1c43      	adds	r3, r0, #1
   1b88a:	425a      	negs	r2, r3
   1b88c:	4153      	adcs	r3, r2
   1b88e:	b2db      	uxtb	r3, r3
   1b890:	2b00      	cmp	r3, #0
   1b892:	d1dd      	bne.n	1b850 <_puts_r+0x8c>
   1b894:	200a      	movs	r0, #10
   1b896:	e7dd      	b.n	1b854 <_puts_r+0x90>

0001b898 <puts>:
   1b898:	b508      	push	{r3, lr}
   1b89a:	4b03      	ldr	r3, [pc, #12]	; (1b8a8 <puts+0x10>)
   1b89c:	1c01      	adds	r1, r0, #0
   1b89e:	6818      	ldr	r0, [r3, #0]
   1b8a0:	f7ff ff90 	bl	1b7c4 <_puts_r>
   1b8a4:	bd08      	pop	{r3, pc}
   1b8a6:	46c0      	nop			; (mov r8, r8)
   1b8a8:	200001a0 	.word	0x200001a0

0001b8ac <_sbrk_r>:
   1b8ac:	b538      	push	{r3, r4, r5, lr}
   1b8ae:	4c07      	ldr	r4, [pc, #28]	; (1b8cc <_sbrk_r+0x20>)
   1b8b0:	2300      	movs	r3, #0
   1b8b2:	1c05      	adds	r5, r0, #0
   1b8b4:	1c08      	adds	r0, r1, #0
   1b8b6:	6023      	str	r3, [r4, #0]
   1b8b8:	f7fe f818 	bl	198ec <_sbrk>
   1b8bc:	1c43      	adds	r3, r0, #1
   1b8be:	d000      	beq.n	1b8c2 <_sbrk_r+0x16>
   1b8c0:	bd38      	pop	{r3, r4, r5, pc}
   1b8c2:	6823      	ldr	r3, [r4, #0]
   1b8c4:	2b00      	cmp	r3, #0
   1b8c6:	d0fb      	beq.n	1b8c0 <_sbrk_r+0x14>
   1b8c8:	602b      	str	r3, [r5, #0]
   1b8ca:	e7f9      	b.n	1b8c0 <_sbrk_r+0x14>
   1b8cc:	20001244 	.word	0x20001244

0001b8d0 <setbuf>:
   1b8d0:	b508      	push	{r3, lr}
   1b8d2:	424a      	negs	r2, r1
   1b8d4:	414a      	adcs	r2, r1
   1b8d6:	2380      	movs	r3, #128	; 0x80
   1b8d8:	0052      	lsls	r2, r2, #1
   1b8da:	00db      	lsls	r3, r3, #3
   1b8dc:	f000 f81c 	bl	1b918 <setvbuf>
   1b8e0:	bd08      	pop	{r3, pc}
   1b8e2:	46c0      	nop			; (mov r8, r8)

0001b8e4 <setjmp>:
   1b8e4:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1b8e6:	4641      	mov	r1, r8
   1b8e8:	464a      	mov	r2, r9
   1b8ea:	4653      	mov	r3, sl
   1b8ec:	465c      	mov	r4, fp
   1b8ee:	466d      	mov	r5, sp
   1b8f0:	4676      	mov	r6, lr
   1b8f2:	c07e      	stmia	r0!, {r1, r2, r3, r4, r5, r6}
   1b8f4:	3828      	subs	r0, #40	; 0x28
   1b8f6:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1b8f8:	2000      	movs	r0, #0
   1b8fa:	4770      	bx	lr

0001b8fc <longjmp>:
   1b8fc:	3010      	adds	r0, #16
   1b8fe:	c87c      	ldmia	r0!, {r2, r3, r4, r5, r6}
   1b900:	4690      	mov	r8, r2
   1b902:	4699      	mov	r9, r3
   1b904:	46a2      	mov	sl, r4
   1b906:	46ab      	mov	fp, r5
   1b908:	46b5      	mov	sp, r6
   1b90a:	c808      	ldmia	r0!, {r3}
   1b90c:	3828      	subs	r0, #40	; 0x28
   1b90e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1b910:	1c08      	adds	r0, r1, #0
   1b912:	d100      	bne.n	1b916 <longjmp+0x1a>
   1b914:	2001      	movs	r0, #1
   1b916:	4718      	bx	r3

0001b918 <setvbuf>:
   1b918:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b91a:	4647      	mov	r7, r8
   1b91c:	b480      	push	{r7}
   1b91e:	1c1f      	adds	r7, r3, #0
   1b920:	4b43      	ldr	r3, [pc, #268]	; (1ba30 <setvbuf+0x118>)
   1b922:	1c04      	adds	r4, r0, #0
   1b924:	681d      	ldr	r5, [r3, #0]
   1b926:	4688      	mov	r8, r1
   1b928:	1c16      	adds	r6, r2, #0
   1b92a:	2d00      	cmp	r5, #0
   1b92c:	d002      	beq.n	1b934 <setvbuf+0x1c>
   1b92e:	69ab      	ldr	r3, [r5, #24]
   1b930:	2b00      	cmp	r3, #0
   1b932:	d051      	beq.n	1b9d8 <setvbuf+0xc0>
   1b934:	4b3f      	ldr	r3, [pc, #252]	; (1ba34 <setvbuf+0x11c>)
   1b936:	429c      	cmp	r4, r3
   1b938:	d054      	beq.n	1b9e4 <setvbuf+0xcc>
   1b93a:	4b3f      	ldr	r3, [pc, #252]	; (1ba38 <setvbuf+0x120>)
   1b93c:	429c      	cmp	r4, r3
   1b93e:	d053      	beq.n	1b9e8 <setvbuf+0xd0>
   1b940:	4b3e      	ldr	r3, [pc, #248]	; (1ba3c <setvbuf+0x124>)
   1b942:	429c      	cmp	r4, r3
   1b944:	d061      	beq.n	1ba0a <setvbuf+0xf2>
   1b946:	2e02      	cmp	r6, #2
   1b948:	d861      	bhi.n	1ba0e <setvbuf+0xf6>
   1b94a:	2f00      	cmp	r7, #0
   1b94c:	db5f      	blt.n	1ba0e <setvbuf+0xf6>
   1b94e:	1c28      	adds	r0, r5, #0
   1b950:	1c21      	adds	r1, r4, #0
   1b952:	f002 fb31 	bl	1dfb8 <_fflush_r>
   1b956:	89a2      	ldrh	r2, [r4, #12]
   1b958:	2300      	movs	r3, #0
   1b95a:	6063      	str	r3, [r4, #4]
   1b95c:	61a3      	str	r3, [r4, #24]
   1b95e:	0613      	lsls	r3, r2, #24
   1b960:	d423      	bmi.n	1b9aa <setvbuf+0x92>
   1b962:	2383      	movs	r3, #131	; 0x83
   1b964:	439a      	bics	r2, r3
   1b966:	81a2      	strh	r2, [r4, #12]
   1b968:	2e02      	cmp	r6, #2
   1b96a:	d028      	beq.n	1b9be <setvbuf+0xa6>
   1b96c:	4643      	mov	r3, r8
   1b96e:	2b00      	cmp	r3, #0
   1b970:	d03c      	beq.n	1b9ec <setvbuf+0xd4>
   1b972:	2e01      	cmp	r6, #1
   1b974:	d013      	beq.n	1b99e <setvbuf+0x86>
   1b976:	4b32      	ldr	r3, [pc, #200]	; (1ba40 <setvbuf+0x128>)
   1b978:	b292      	uxth	r2, r2
   1b97a:	62ab      	str	r3, [r5, #40]	; 0x28
   1b97c:	4643      	mov	r3, r8
   1b97e:	6023      	str	r3, [r4, #0]
   1b980:	6123      	str	r3, [r4, #16]
   1b982:	6167      	str	r7, [r4, #20]
   1b984:	2000      	movs	r0, #0
   1b986:	0713      	lsls	r3, r2, #28
   1b988:	d506      	bpl.n	1b998 <setvbuf+0x80>
   1b98a:	2303      	movs	r3, #3
   1b98c:	401a      	ands	r2, r3
   1b98e:	4253      	negs	r3, r2
   1b990:	415a      	adcs	r2, r3
   1b992:	4252      	negs	r2, r2
   1b994:	4017      	ands	r7, r2
   1b996:	60a7      	str	r7, [r4, #8]
   1b998:	bc04      	pop	{r2}
   1b99a:	4690      	mov	r8, r2
   1b99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b99e:	2301      	movs	r3, #1
   1b9a0:	431a      	orrs	r2, r3
   1b9a2:	427b      	negs	r3, r7
   1b9a4:	81a2      	strh	r2, [r4, #12]
   1b9a6:	61a3      	str	r3, [r4, #24]
   1b9a8:	e7e5      	b.n	1b976 <setvbuf+0x5e>
   1b9aa:	1c28      	adds	r0, r5, #0
   1b9ac:	6921      	ldr	r1, [r4, #16]
   1b9ae:	f7ff fd81 	bl	1b4b4 <_free_r>
   1b9b2:	89a2      	ldrh	r2, [r4, #12]
   1b9b4:	2383      	movs	r3, #131	; 0x83
   1b9b6:	439a      	bics	r2, r3
   1b9b8:	81a2      	strh	r2, [r4, #12]
   1b9ba:	2e02      	cmp	r6, #2
   1b9bc:	d1d6      	bne.n	1b96c <setvbuf+0x54>
   1b9be:	2000      	movs	r0, #0
   1b9c0:	2302      	movs	r3, #2
   1b9c2:	431a      	orrs	r2, r3
   1b9c4:	2300      	movs	r3, #0
   1b9c6:	60a3      	str	r3, [r4, #8]
   1b9c8:	1c23      	adds	r3, r4, #0
   1b9ca:	3347      	adds	r3, #71	; 0x47
   1b9cc:	6023      	str	r3, [r4, #0]
   1b9ce:	6123      	str	r3, [r4, #16]
   1b9d0:	2301      	movs	r3, #1
   1b9d2:	81a2      	strh	r2, [r4, #12]
   1b9d4:	6163      	str	r3, [r4, #20]
   1b9d6:	e7df      	b.n	1b998 <setvbuf+0x80>
   1b9d8:	1c28      	adds	r0, r5, #0
   1b9da:	f002 fb71 	bl	1e0c0 <__sinit>
   1b9de:	4b15      	ldr	r3, [pc, #84]	; (1ba34 <setvbuf+0x11c>)
   1b9e0:	429c      	cmp	r4, r3
   1b9e2:	d1aa      	bne.n	1b93a <setvbuf+0x22>
   1b9e4:	686c      	ldr	r4, [r5, #4]
   1b9e6:	e7ae      	b.n	1b946 <setvbuf+0x2e>
   1b9e8:	68ac      	ldr	r4, [r5, #8]
   1b9ea:	e7ac      	b.n	1b946 <setvbuf+0x2e>
   1b9ec:	2f00      	cmp	r7, #0
   1b9ee:	d101      	bne.n	1b9f4 <setvbuf+0xdc>
   1b9f0:	2780      	movs	r7, #128	; 0x80
   1b9f2:	00ff      	lsls	r7, r7, #3
   1b9f4:	1c38      	adds	r0, r7, #0
   1b9f6:	f7ff fca9 	bl	1b34c <malloc>
   1b9fa:	4680      	mov	r8, r0
   1b9fc:	2800      	cmp	r0, #0
   1b9fe:	d009      	beq.n	1ba14 <setvbuf+0xfc>
   1ba00:	89a2      	ldrh	r2, [r4, #12]
   1ba02:	2380      	movs	r3, #128	; 0x80
   1ba04:	431a      	orrs	r2, r3
   1ba06:	81a2      	strh	r2, [r4, #12]
   1ba08:	e7b3      	b.n	1b972 <setvbuf+0x5a>
   1ba0a:	68ec      	ldr	r4, [r5, #12]
   1ba0c:	e79b      	b.n	1b946 <setvbuf+0x2e>
   1ba0e:	2001      	movs	r0, #1
   1ba10:	4240      	negs	r0, r0
   1ba12:	e7c1      	b.n	1b998 <setvbuf+0x80>
   1ba14:	2080      	movs	r0, #128	; 0x80
   1ba16:	00c0      	lsls	r0, r0, #3
   1ba18:	f7ff fc98 	bl	1b34c <malloc>
   1ba1c:	4680      	mov	r8, r0
   1ba1e:	2800      	cmp	r0, #0
   1ba20:	d103      	bne.n	1ba2a <setvbuf+0x112>
   1ba22:	2001      	movs	r0, #1
   1ba24:	89a2      	ldrh	r2, [r4, #12]
   1ba26:	4240      	negs	r0, r0
   1ba28:	e7ca      	b.n	1b9c0 <setvbuf+0xa8>
   1ba2a:	2780      	movs	r7, #128	; 0x80
   1ba2c:	00ff      	lsls	r7, r7, #3
   1ba2e:	e7e7      	b.n	1ba00 <setvbuf+0xe8>
   1ba30:	200001a0 	.word	0x200001a0
   1ba34:	0002714c 	.word	0x0002714c
   1ba38:	0002712c 	.word	0x0002712c
   1ba3c:	0002710c 	.word	0x0002710c
   1ba40:	0001e049 	.word	0x0001e049

0001ba44 <strchr>:
   1ba44:	b2ca      	uxtb	r2, r1
   1ba46:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ba48:	2a00      	cmp	r2, #0
   1ba4a:	d03d      	beq.n	1bac8 <strchr+0x84>
   1ba4c:	0783      	lsls	r3, r0, #30
   1ba4e:	d00e      	beq.n	1ba6e <strchr+0x2a>
   1ba50:	7803      	ldrb	r3, [r0, #0]
   1ba52:	2b00      	cmp	r3, #0
   1ba54:	d05b      	beq.n	1bb0e <strchr+0xca>
   1ba56:	429a      	cmp	r2, r3
   1ba58:	d035      	beq.n	1bac6 <strchr+0x82>
   1ba5a:	2403      	movs	r4, #3
   1ba5c:	e004      	b.n	1ba68 <strchr+0x24>
   1ba5e:	7803      	ldrb	r3, [r0, #0]
   1ba60:	2b00      	cmp	r3, #0
   1ba62:	d054      	beq.n	1bb0e <strchr+0xca>
   1ba64:	429a      	cmp	r2, r3
   1ba66:	d02e      	beq.n	1bac6 <strchr+0x82>
   1ba68:	3001      	adds	r0, #1
   1ba6a:	4220      	tst	r0, r4
   1ba6c:	d1f7      	bne.n	1ba5e <strchr+0x1a>
   1ba6e:	23ff      	movs	r3, #255	; 0xff
   1ba70:	4019      	ands	r1, r3
   1ba72:	020b      	lsls	r3, r1, #8
   1ba74:	4319      	orrs	r1, r3
   1ba76:	040b      	lsls	r3, r1, #16
   1ba78:	4319      	orrs	r1, r3
   1ba7a:	6803      	ldr	r3, [r0, #0]
   1ba7c:	4e25      	ldr	r6, [pc, #148]	; (1bb14 <strchr+0xd0>)
   1ba7e:	1c1c      	adds	r4, r3, #0
   1ba80:	404c      	eors	r4, r1
   1ba82:	19a5      	adds	r5, r4, r6
   1ba84:	43a5      	bics	r5, r4
   1ba86:	1c2c      	adds	r4, r5, #0
   1ba88:	199d      	adds	r5, r3, r6
   1ba8a:	439d      	bics	r5, r3
   1ba8c:	1c2b      	adds	r3, r5, #0
   1ba8e:	4e22      	ldr	r6, [pc, #136]	; (1bb18 <strchr+0xd4>)
   1ba90:	4323      	orrs	r3, r4
   1ba92:	4233      	tst	r3, r6
   1ba94:	d10d      	bne.n	1bab2 <strchr+0x6e>
   1ba96:	3004      	adds	r0, #4
   1ba98:	6803      	ldr	r3, [r0, #0]
   1ba9a:	4f1e      	ldr	r7, [pc, #120]	; (1bb14 <strchr+0xd0>)
   1ba9c:	1c0c      	adds	r4, r1, #0
   1ba9e:	405c      	eors	r4, r3
   1baa0:	19e5      	adds	r5, r4, r7
   1baa2:	43a5      	bics	r5, r4
   1baa4:	1c2c      	adds	r4, r5, #0
   1baa6:	19dd      	adds	r5, r3, r7
   1baa8:	439d      	bics	r5, r3
   1baaa:	1c2b      	adds	r3, r5, #0
   1baac:	4323      	orrs	r3, r4
   1baae:	4233      	tst	r3, r6
   1bab0:	d0f1      	beq.n	1ba96 <strchr+0x52>
   1bab2:	7803      	ldrb	r3, [r0, #0]
   1bab4:	2b00      	cmp	r3, #0
   1bab6:	d104      	bne.n	1bac2 <strchr+0x7e>
   1bab8:	e029      	b.n	1bb0e <strchr+0xca>
   1baba:	3001      	adds	r0, #1
   1babc:	7803      	ldrb	r3, [r0, #0]
   1babe:	2b00      	cmp	r3, #0
   1bac0:	d025      	beq.n	1bb0e <strchr+0xca>
   1bac2:	429a      	cmp	r2, r3
   1bac4:	d1f9      	bne.n	1baba <strchr+0x76>
   1bac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bac8:	0784      	lsls	r4, r0, #30
   1baca:	d00a      	beq.n	1bae2 <strchr+0x9e>
   1bacc:	7803      	ldrb	r3, [r0, #0]
   1bace:	2b00      	cmp	r3, #0
   1bad0:	d0f9      	beq.n	1bac6 <strchr+0x82>
   1bad2:	2203      	movs	r2, #3
   1bad4:	e002      	b.n	1badc <strchr+0x98>
   1bad6:	7803      	ldrb	r3, [r0, #0]
   1bad8:	2b00      	cmp	r3, #0
   1bada:	d0f4      	beq.n	1bac6 <strchr+0x82>
   1badc:	3001      	adds	r0, #1
   1bade:	4210      	tst	r0, r2
   1bae0:	d1f9      	bne.n	1bad6 <strchr+0x92>
   1bae2:	6803      	ldr	r3, [r0, #0]
   1bae4:	4e0b      	ldr	r6, [pc, #44]	; (1bb14 <strchr+0xd0>)
   1bae6:	490c      	ldr	r1, [pc, #48]	; (1bb18 <strchr+0xd4>)
   1bae8:	199a      	adds	r2, r3, r6
   1baea:	439a      	bics	r2, r3
   1baec:	420a      	tst	r2, r1
   1baee:	d106      	bne.n	1bafe <strchr+0xba>
   1baf0:	3004      	adds	r0, #4
   1baf2:	6803      	ldr	r3, [r0, #0]
   1baf4:	4f07      	ldr	r7, [pc, #28]	; (1bb14 <strchr+0xd0>)
   1baf6:	19da      	adds	r2, r3, r7
   1baf8:	439a      	bics	r2, r3
   1bafa:	420a      	tst	r2, r1
   1bafc:	d0f8      	beq.n	1baf0 <strchr+0xac>
   1bafe:	7803      	ldrb	r3, [r0, #0]
   1bb00:	2b00      	cmp	r3, #0
   1bb02:	d0e0      	beq.n	1bac6 <strchr+0x82>
   1bb04:	3001      	adds	r0, #1
   1bb06:	7803      	ldrb	r3, [r0, #0]
   1bb08:	2b00      	cmp	r3, #0
   1bb0a:	d1fb      	bne.n	1bb04 <strchr+0xc0>
   1bb0c:	e7db      	b.n	1bac6 <strchr+0x82>
   1bb0e:	2000      	movs	r0, #0
   1bb10:	e7d9      	b.n	1bac6 <strchr+0x82>
   1bb12:	46c0      	nop			; (mov r8, r8)
   1bb14:	fefefeff 	.word	0xfefefeff
   1bb18:	80808080 	.word	0x80808080

0001bb1c <strlen>:
   1bb1c:	2300      	movs	r3, #0
   1bb1e:	5cc2      	ldrb	r2, [r0, r3]
   1bb20:	3301      	adds	r3, #1
   1bb22:	2a00      	cmp	r2, #0
   1bb24:	d1fb      	bne.n	1bb1e <strlen+0x2>
   1bb26:	1e58      	subs	r0, r3, #1
   1bb28:	4770      	bx	lr
   1bb2a:	46c0      	nop			; (mov r8, r8)

0001bb2c <strtok>:
   1bb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bb2e:	4b18      	ldr	r3, [pc, #96]	; (1bb90 <strtok+0x64>)
   1bb30:	1c07      	adds	r7, r0, #0
   1bb32:	681d      	ldr	r5, [r3, #0]
   1bb34:	1c0e      	adds	r6, r1, #0
   1bb36:	6dac      	ldr	r4, [r5, #88]	; 0x58
   1bb38:	2c00      	cmp	r4, #0
   1bb3a:	d006      	beq.n	1bb4a <strtok+0x1e>
   1bb3c:	1c38      	adds	r0, r7, #0
   1bb3e:	1c31      	adds	r1, r6, #0
   1bb40:	1c22      	adds	r2, r4, #0
   1bb42:	2301      	movs	r3, #1
   1bb44:	f000 f826 	bl	1bb94 <__strtok_r>
   1bb48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bb4a:	2050      	movs	r0, #80	; 0x50
   1bb4c:	f7ff fbfe 	bl	1b34c <malloc>
   1bb50:	65a8      	str	r0, [r5, #88]	; 0x58
   1bb52:	6084      	str	r4, [r0, #8]
   1bb54:	6dab      	ldr	r3, [r5, #88]	; 0x58
   1bb56:	6004      	str	r4, [r0, #0]
   1bb58:	6044      	str	r4, [r0, #4]
   1bb5a:	611c      	str	r4, [r3, #16]
   1bb5c:	60dc      	str	r4, [r3, #12]
   1bb5e:	6dab      	ldr	r3, [r5, #88]	; 0x58
   1bb60:	619c      	str	r4, [r3, #24]
   1bb62:	615c      	str	r4, [r3, #20]
   1bb64:	6dab      	ldr	r3, [r5, #88]	; 0x58
   1bb66:	62dc      	str	r4, [r3, #44]	; 0x2c
   1bb68:	629c      	str	r4, [r3, #40]	; 0x28
   1bb6a:	6dab      	ldr	r3, [r5, #88]	; 0x58
   1bb6c:	635c      	str	r4, [r3, #52]	; 0x34
   1bb6e:	631c      	str	r4, [r3, #48]	; 0x30
   1bb70:	6dab      	ldr	r3, [r5, #88]	; 0x58
   1bb72:	63dc      	str	r4, [r3, #60]	; 0x3c
   1bb74:	639c      	str	r4, [r3, #56]	; 0x38
   1bb76:	6dab      	ldr	r3, [r5, #88]	; 0x58
   1bb78:	645c      	str	r4, [r3, #68]	; 0x44
   1bb7a:	641c      	str	r4, [r3, #64]	; 0x40
   1bb7c:	6dab      	ldr	r3, [r5, #88]	; 0x58
   1bb7e:	64dc      	str	r4, [r3, #76]	; 0x4c
   1bb80:	649c      	str	r4, [r3, #72]	; 0x48
   1bb82:	6dab      	ldr	r3, [r5, #88]	; 0x58
   1bb84:	771c      	strb	r4, [r3, #28]
   1bb86:	6dac      	ldr	r4, [r5, #88]	; 0x58
   1bb88:	2300      	movs	r3, #0
   1bb8a:	6263      	str	r3, [r4, #36]	; 0x24
   1bb8c:	e7d6      	b.n	1bb3c <strtok+0x10>
   1bb8e:	46c0      	nop			; (mov r8, r8)
   1bb90:	200001a0 	.word	0x200001a0

0001bb94 <__strtok_r>:
   1bb94:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bb96:	2800      	cmp	r0, #0
   1bb98:	d023      	beq.n	1bbe2 <__strtok_r+0x4e>
   1bb9a:	1c47      	adds	r7, r0, #1
   1bb9c:	7806      	ldrb	r6, [r0, #0]
   1bb9e:	1c0c      	adds	r4, r1, #0
   1bba0:	e002      	b.n	1bba8 <__strtok_r+0x14>
   1bba2:	3401      	adds	r4, #1
   1bba4:	42ae      	cmp	r6, r5
   1bba6:	d014      	beq.n	1bbd2 <__strtok_r+0x3e>
   1bba8:	7825      	ldrb	r5, [r4, #0]
   1bbaa:	2d00      	cmp	r5, #0
   1bbac:	d1f9      	bne.n	1bba2 <__strtok_r+0xe>
   1bbae:	2e00      	cmp	r6, #0
   1bbb0:	d01c      	beq.n	1bbec <__strtok_r+0x58>
   1bbb2:	1c7e      	adds	r6, r7, #1
   1bbb4:	783d      	ldrb	r5, [r7, #0]
   1bbb6:	1c0b      	adds	r3, r1, #0
   1bbb8:	e002      	b.n	1bbc0 <__strtok_r+0x2c>
   1bbba:	3301      	adds	r3, #1
   1bbbc:	2c00      	cmp	r4, #0
   1bbbe:	d00c      	beq.n	1bbda <__strtok_r+0x46>
   1bbc0:	781c      	ldrb	r4, [r3, #0]
   1bbc2:	42ac      	cmp	r4, r5
   1bbc4:	d1f9      	bne.n	1bbba <__strtok_r+0x26>
   1bbc6:	2d00      	cmp	r5, #0
   1bbc8:	d009      	beq.n	1bbde <__strtok_r+0x4a>
   1bbca:	2300      	movs	r3, #0
   1bbcc:	703b      	strb	r3, [r7, #0]
   1bbce:	6016      	str	r6, [r2, #0]
   1bbd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bbd2:	2b00      	cmp	r3, #0
   1bbd4:	d00d      	beq.n	1bbf2 <__strtok_r+0x5e>
   1bbd6:	1c38      	adds	r0, r7, #0
   1bbd8:	e7df      	b.n	1bb9a <__strtok_r+0x6>
   1bbda:	1c37      	adds	r7, r6, #0
   1bbdc:	e7e9      	b.n	1bbb2 <__strtok_r+0x1e>
   1bbde:	2600      	movs	r6, #0
   1bbe0:	e7f5      	b.n	1bbce <__strtok_r+0x3a>
   1bbe2:	6810      	ldr	r0, [r2, #0]
   1bbe4:	2800      	cmp	r0, #0
   1bbe6:	d1d8      	bne.n	1bb9a <__strtok_r+0x6>
   1bbe8:	2000      	movs	r0, #0
   1bbea:	e7f1      	b.n	1bbd0 <__strtok_r+0x3c>
   1bbec:	6016      	str	r6, [r2, #0]
   1bbee:	2000      	movs	r0, #0
   1bbf0:	e7ee      	b.n	1bbd0 <__strtok_r+0x3c>
   1bbf2:	6017      	str	r7, [r2, #0]
   1bbf4:	7003      	strb	r3, [r0, #0]
   1bbf6:	e7eb      	b.n	1bbd0 <__strtok_r+0x3c>

0001bbf8 <strtok_r>:
   1bbf8:	b508      	push	{r3, lr}
   1bbfa:	2301      	movs	r3, #1
   1bbfc:	f7ff ffca 	bl	1bb94 <__strtok_r>
   1bc00:	bd08      	pop	{r3, pc}
   1bc02:	46c0      	nop			; (mov r8, r8)

0001bc04 <_strtol_r>:
   1bc04:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bc06:	4656      	mov	r6, sl
   1bc08:	4644      	mov	r4, r8
   1bc0a:	465f      	mov	r7, fp
   1bc0c:	464d      	mov	r5, r9
   1bc0e:	b4f0      	push	{r4, r5, r6, r7}
   1bc10:	4698      	mov	r8, r3
   1bc12:	4b54      	ldr	r3, [pc, #336]	; (1bd64 <_strtol_r+0x160>)
   1bc14:	b087      	sub	sp, #28
   1bc16:	9104      	str	r1, [sp, #16]
   1bc18:	681e      	ldr	r6, [r3, #0]
   1bc1a:	9005      	str	r0, [sp, #20]
   1bc1c:	1c0b      	adds	r3, r1, #0
   1bc1e:	4692      	mov	sl, r2
   1bc20:	2108      	movs	r1, #8
   1bc22:	e000      	b.n	1bc26 <_strtol_r+0x22>
   1bc24:	1c2b      	adds	r3, r5, #0
   1bc26:	781c      	ldrb	r4, [r3, #0]
   1bc28:	1c5d      	adds	r5, r3, #1
   1bc2a:	1932      	adds	r2, r6, r4
   1bc2c:	7852      	ldrb	r2, [r2, #1]
   1bc2e:	4211      	tst	r1, r2
   1bc30:	d1f8      	bne.n	1bc24 <_strtol_r+0x20>
   1bc32:	2c2d      	cmp	r4, #45	; 0x2d
   1bc34:	d100      	bne.n	1bc38 <_strtol_r+0x34>
   1bc36:	e078      	b.n	1bd2a <_strtol_r+0x126>
   1bc38:	2200      	movs	r2, #0
   1bc3a:	9202      	str	r2, [sp, #8]
   1bc3c:	2c2b      	cmp	r4, #43	; 0x2b
   1bc3e:	d100      	bne.n	1bc42 <_strtol_r+0x3e>
   1bc40:	e078      	b.n	1bd34 <_strtol_r+0x130>
   1bc42:	2310      	movs	r3, #16
   1bc44:	4641      	mov	r1, r8
   1bc46:	4399      	bics	r1, r3
   1bc48:	46c1      	mov	r9, r8
   1bc4a:	d109      	bne.n	1bc60 <_strtol_r+0x5c>
   1bc4c:	2c30      	cmp	r4, #48	; 0x30
   1bc4e:	d100      	bne.n	1bc52 <_strtol_r+0x4e>
   1bc50:	e073      	b.n	1bd3a <_strtol_r+0x136>
   1bc52:	4641      	mov	r1, r8
   1bc54:	2900      	cmp	r1, #0
   1bc56:	d000      	beq.n	1bc5a <_strtol_r+0x56>
   1bc58:	e081      	b.n	1bd5e <_strtol_r+0x15a>
   1bc5a:	220a      	movs	r2, #10
   1bc5c:	4691      	mov	r9, r2
   1bc5e:	4690      	mov	r8, r2
   1bc60:	9902      	ldr	r1, [sp, #8]
   1bc62:	2780      	movs	r7, #128	; 0x80
   1bc64:	424b      	negs	r3, r1
   1bc66:	414b      	adcs	r3, r1
   1bc68:	063f      	lsls	r7, r7, #24
   1bc6a:	1aff      	subs	r7, r7, r3
   1bc6c:	1c38      	adds	r0, r7, #0
   1bc6e:	4649      	mov	r1, r9
   1bc70:	f003 fc20 	bl	1f4b4 <__aeabi_uidivmod>
   1bc74:	1c38      	adds	r0, r7, #0
   1bc76:	9103      	str	r1, [sp, #12]
   1bc78:	4649      	mov	r1, r9
   1bc7a:	f003 fbd7 	bl	1f42c <__aeabi_uidiv>
   1bc7e:	2103      	movs	r1, #3
   1bc80:	2304      	movs	r3, #4
   1bc82:	468b      	mov	fp, r1
   1bc84:	4641      	mov	r1, r8
   1bc86:	1c02      	adds	r2, r0, #0
   1bc88:	2700      	movs	r7, #0
   1bc8a:	2000      	movs	r0, #0
   1bc8c:	469c      	mov	ip, r3
   1bc8e:	9101      	str	r1, [sp, #4]
   1bc90:	e00e      	b.n	1bcb0 <_strtol_r+0xac>
   1bc92:	9b01      	ldr	r3, [sp, #4]
   1bc94:	3c30      	subs	r4, #48	; 0x30
   1bc96:	42a3      	cmp	r3, r4
   1bc98:	dd1b      	ble.n	1bcd2 <_strtol_r+0xce>
   1bc9a:	1c79      	adds	r1, r7, #1
   1bc9c:	d006      	beq.n	1bcac <_strtol_r+0xa8>
   1bc9e:	4290      	cmp	r0, r2
   1bca0:	d82e      	bhi.n	1bd00 <_strtol_r+0xfc>
   1bca2:	d02a      	beq.n	1bcfa <_strtol_r+0xf6>
   1bca4:	4649      	mov	r1, r9
   1bca6:	4348      	muls	r0, r1
   1bca8:	2701      	movs	r7, #1
   1bcaa:	1820      	adds	r0, r4, r0
   1bcac:	782c      	ldrb	r4, [r5, #0]
   1bcae:	3501      	adds	r5, #1
   1bcb0:	1933      	adds	r3, r6, r4
   1bcb2:	785b      	ldrb	r3, [r3, #1]
   1bcb4:	4661      	mov	r1, ip
   1bcb6:	4219      	tst	r1, r3
   1bcb8:	d1eb      	bne.n	1bc92 <_strtol_r+0x8e>
   1bcba:	4659      	mov	r1, fp
   1bcbc:	400b      	ands	r3, r1
   1bcbe:	d008      	beq.n	1bcd2 <_strtol_r+0xce>
   1bcc0:	2157      	movs	r1, #87	; 0x57
   1bcc2:	4688      	mov	r8, r1
   1bcc4:	2b01      	cmp	r3, #1
   1bcc6:	d01e      	beq.n	1bd06 <_strtol_r+0x102>
   1bcc8:	9b01      	ldr	r3, [sp, #4]
   1bcca:	4641      	mov	r1, r8
   1bccc:	1a64      	subs	r4, r4, r1
   1bcce:	42a3      	cmp	r3, r4
   1bcd0:	dce3      	bgt.n	1bc9a <_strtol_r+0x96>
   1bcd2:	9902      	ldr	r1, [sp, #8]
   1bcd4:	1c7a      	adds	r2, r7, #1
   1bcd6:	d019      	beq.n	1bd0c <_strtol_r+0x108>
   1bcd8:	2900      	cmp	r1, #0
   1bcda:	d124      	bne.n	1bd26 <_strtol_r+0x122>
   1bcdc:	4652      	mov	r2, sl
   1bcde:	2a00      	cmp	r2, #0
   1bce0:	d004      	beq.n	1bcec <_strtol_r+0xe8>
   1bce2:	2f00      	cmp	r7, #0
   1bce4:	d11d      	bne.n	1bd22 <_strtol_r+0x11e>
   1bce6:	9d04      	ldr	r5, [sp, #16]
   1bce8:	4653      	mov	r3, sl
   1bcea:	601d      	str	r5, [r3, #0]
   1bcec:	b007      	add	sp, #28
   1bcee:	bc3c      	pop	{r2, r3, r4, r5}
   1bcf0:	4690      	mov	r8, r2
   1bcf2:	4699      	mov	r9, r3
   1bcf4:	46a2      	mov	sl, r4
   1bcf6:	46ab      	mov	fp, r5
   1bcf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bcfa:	9b03      	ldr	r3, [sp, #12]
   1bcfc:	429c      	cmp	r4, r3
   1bcfe:	ddd1      	ble.n	1bca4 <_strtol_r+0xa0>
   1bd00:	2701      	movs	r7, #1
   1bd02:	427f      	negs	r7, r7
   1bd04:	e7d2      	b.n	1bcac <_strtol_r+0xa8>
   1bd06:	2337      	movs	r3, #55	; 0x37
   1bd08:	4698      	mov	r8, r3
   1bd0a:	e7dd      	b.n	1bcc8 <_strtol_r+0xc4>
   1bd0c:	2080      	movs	r0, #128	; 0x80
   1bd0e:	424b      	negs	r3, r1
   1bd10:	414b      	adcs	r3, r1
   1bd12:	0600      	lsls	r0, r0, #24
   1bd14:	9a05      	ldr	r2, [sp, #20]
   1bd16:	1ac0      	subs	r0, r0, r3
   1bd18:	2322      	movs	r3, #34	; 0x22
   1bd1a:	6013      	str	r3, [r2, #0]
   1bd1c:	4653      	mov	r3, sl
   1bd1e:	2b00      	cmp	r3, #0
   1bd20:	d0e4      	beq.n	1bcec <_strtol_r+0xe8>
   1bd22:	3d01      	subs	r5, #1
   1bd24:	e7e0      	b.n	1bce8 <_strtol_r+0xe4>
   1bd26:	4240      	negs	r0, r0
   1bd28:	e7d8      	b.n	1bcdc <_strtol_r+0xd8>
   1bd2a:	2101      	movs	r1, #1
   1bd2c:	1c9d      	adds	r5, r3, #2
   1bd2e:	785c      	ldrb	r4, [r3, #1]
   1bd30:	9102      	str	r1, [sp, #8]
   1bd32:	e786      	b.n	1bc42 <_strtol_r+0x3e>
   1bd34:	1c9d      	adds	r5, r3, #2
   1bd36:	785c      	ldrb	r4, [r3, #1]
   1bd38:	e783      	b.n	1bc42 <_strtol_r+0x3e>
   1bd3a:	782b      	ldrb	r3, [r5, #0]
   1bd3c:	2220      	movs	r2, #32
   1bd3e:	4393      	bics	r3, r2
   1bd40:	2b58      	cmp	r3, #88	; 0x58
   1bd42:	d006      	beq.n	1bd52 <_strtol_r+0x14e>
   1bd44:	4641      	mov	r1, r8
   1bd46:	2900      	cmp	r1, #0
   1bd48:	d109      	bne.n	1bd5e <_strtol_r+0x15a>
   1bd4a:	2108      	movs	r1, #8
   1bd4c:	4689      	mov	r9, r1
   1bd4e:	4688      	mov	r8, r1
   1bd50:	e786      	b.n	1bc60 <_strtol_r+0x5c>
   1bd52:	2210      	movs	r2, #16
   1bd54:	786c      	ldrb	r4, [r5, #1]
   1bd56:	4691      	mov	r9, r2
   1bd58:	3502      	adds	r5, #2
   1bd5a:	4690      	mov	r8, r2
   1bd5c:	e780      	b.n	1bc60 <_strtol_r+0x5c>
   1bd5e:	46c1      	mov	r9, r8
   1bd60:	e77e      	b.n	1bc60 <_strtol_r+0x5c>
   1bd62:	46c0      	nop			; (mov r8, r8)
   1bd64:	20000204 	.word	0x20000204

0001bd68 <strtol>:
   1bd68:	b538      	push	{r3, r4, r5, lr}
   1bd6a:	1c13      	adds	r3, r2, #0
   1bd6c:	4a04      	ldr	r2, [pc, #16]	; (1bd80 <strtol+0x18>)
   1bd6e:	1c05      	adds	r5, r0, #0
   1bd70:	1c0c      	adds	r4, r1, #0
   1bd72:	6810      	ldr	r0, [r2, #0]
   1bd74:	1c29      	adds	r1, r5, #0
   1bd76:	1c22      	adds	r2, r4, #0
   1bd78:	f7ff ff44 	bl	1bc04 <_strtol_r>
   1bd7c:	bd38      	pop	{r3, r4, r5, pc}
   1bd7e:	46c0      	nop			; (mov r8, r8)
   1bd80:	200001a0 	.word	0x200001a0
   1bd84:	00000000 	.word	0x00000000

0001bd88 <__cvt>:
   1bd88:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bd8a:	464f      	mov	r7, r9
   1bd8c:	4646      	mov	r6, r8
   1bd8e:	b4c0      	push	{r6, r7}
   1bd90:	4691      	mov	r9, r2
   1bd92:	b089      	sub	sp, #36	; 0x24
   1bd94:	4698      	mov	r8, r3
   1bd96:	2b00      	cmp	r3, #0
   1bd98:	da00      	bge.n	1bd9c <__cvt+0x14>
   1bd9a:	e078      	b.n	1be8e <__cvt+0x106>
   1bd9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1bd9e:	2300      	movs	r3, #0
   1bda0:	7013      	strb	r3, [r2, #0]
   1bda2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1bda4:	2b66      	cmp	r3, #102	; 0x66
   1bda6:	d05a      	beq.n	1be5e <__cvt+0xd6>
   1bda8:	2b46      	cmp	r3, #70	; 0x46
   1bdaa:	d058      	beq.n	1be5e <__cvt+0xd6>
   1bdac:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1bdae:	2320      	movs	r3, #32
   1bdb0:	439a      	bics	r2, r3
   1bdb2:	2a45      	cmp	r2, #69	; 0x45
   1bdb4:	d039      	beq.n	1be2a <__cvt+0xa2>
   1bdb6:	2302      	movs	r3, #2
   1bdb8:	9300      	str	r3, [sp, #0]
   1bdba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1bdbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1bdbe:	9302      	str	r3, [sp, #8]
   1bdc0:	ab06      	add	r3, sp, #24
   1bdc2:	9303      	str	r3, [sp, #12]
   1bdc4:	ab07      	add	r3, sp, #28
   1bdc6:	9201      	str	r2, [sp, #4]
   1bdc8:	9304      	str	r3, [sp, #16]
   1bdca:	464a      	mov	r2, r9
   1bdcc:	4643      	mov	r3, r8
   1bdce:	f001 f8ab 	bl	1cf28 <_dtoa_r>
   1bdd2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1bdd4:	1c07      	adds	r7, r0, #0
   1bdd6:	2a67      	cmp	r2, #103	; 0x67
   1bdd8:	d139      	bne.n	1be4e <__cvt+0xc6>
   1bdda:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1bddc:	07d2      	lsls	r2, r2, #31
   1bdde:	d53c      	bpl.n	1be5a <__cvt+0xd2>
   1bde0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1bde2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1bde4:	18fe      	adds	r6, r7, r3
   1bde6:	2320      	movs	r3, #32
   1bde8:	439a      	bics	r2, r3
   1bdea:	2a46      	cmp	r2, #70	; 0x46
   1bdec:	d048      	beq.n	1be80 <__cvt+0xf8>
   1bdee:	4b35      	ldr	r3, [pc, #212]	; (1bec4 <__cvt+0x13c>)
   1bdf0:	4a33      	ldr	r2, [pc, #204]	; (1bec0 <__cvt+0x138>)
   1bdf2:	4648      	mov	r0, r9
   1bdf4:	4641      	mov	r1, r8
   1bdf6:	f003 fbd9 	bl	1f5ac <__aeabi_dcmpeq>
   1bdfa:	1c32      	adds	r2, r6, #0
   1bdfc:	2800      	cmp	r0, #0
   1bdfe:	d10b      	bne.n	1be18 <__cvt+0x90>
   1be00:	9b07      	ldr	r3, [sp, #28]
   1be02:	1c1a      	adds	r2, r3, #0
   1be04:	429e      	cmp	r6, r3
   1be06:	d907      	bls.n	1be18 <__cvt+0x90>
   1be08:	2130      	movs	r1, #48	; 0x30
   1be0a:	1c5a      	adds	r2, r3, #1
   1be0c:	9207      	str	r2, [sp, #28]
   1be0e:	7019      	strb	r1, [r3, #0]
   1be10:	9b07      	ldr	r3, [sp, #28]
   1be12:	429e      	cmp	r6, r3
   1be14:	d8f9      	bhi.n	1be0a <__cvt+0x82>
   1be16:	1c1a      	adds	r2, r3, #0
   1be18:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1be1a:	1bd2      	subs	r2, r2, r7
   1be1c:	1c38      	adds	r0, r7, #0
   1be1e:	601a      	str	r2, [r3, #0]
   1be20:	b009      	add	sp, #36	; 0x24
   1be22:	bc0c      	pop	{r2, r3}
   1be24:	4690      	mov	r8, r2
   1be26:	4699      	mov	r9, r3
   1be28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1be2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1be2c:	3301      	adds	r3, #1
   1be2e:	9310      	str	r3, [sp, #64]	; 0x40
   1be30:	2302      	movs	r3, #2
   1be32:	9300      	str	r3, [sp, #0]
   1be34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1be36:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1be38:	9302      	str	r3, [sp, #8]
   1be3a:	ab06      	add	r3, sp, #24
   1be3c:	9303      	str	r3, [sp, #12]
   1be3e:	ab07      	add	r3, sp, #28
   1be40:	9201      	str	r2, [sp, #4]
   1be42:	9304      	str	r3, [sp, #16]
   1be44:	464a      	mov	r2, r9
   1be46:	4643      	mov	r3, r8
   1be48:	f001 f86e 	bl	1cf28 <_dtoa_r>
   1be4c:	1c07      	adds	r7, r0, #0
   1be4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1be50:	2b47      	cmp	r3, #71	; 0x47
   1be52:	d1c5      	bne.n	1bde0 <__cvt+0x58>
   1be54:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1be56:	07d2      	lsls	r2, r2, #31
   1be58:	d4c2      	bmi.n	1bde0 <__cvt+0x58>
   1be5a:	9a07      	ldr	r2, [sp, #28]
   1be5c:	e7dc      	b.n	1be18 <__cvt+0x90>
   1be5e:	2303      	movs	r3, #3
   1be60:	9300      	str	r3, [sp, #0]
   1be62:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1be64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1be66:	9301      	str	r3, [sp, #4]
   1be68:	ab06      	add	r3, sp, #24
   1be6a:	9303      	str	r3, [sp, #12]
   1be6c:	ab07      	add	r3, sp, #28
   1be6e:	9202      	str	r2, [sp, #8]
   1be70:	9304      	str	r3, [sp, #16]
   1be72:	464a      	mov	r2, r9
   1be74:	4643      	mov	r3, r8
   1be76:	f001 f857 	bl	1cf28 <_dtoa_r>
   1be7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1be7c:	1c07      	adds	r7, r0, #0
   1be7e:	18c6      	adds	r6, r0, r3
   1be80:	783b      	ldrb	r3, [r7, #0]
   1be82:	2b30      	cmp	r3, #48	; 0x30
   1be84:	d00a      	beq.n	1be9c <__cvt+0x114>
   1be86:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1be88:	6813      	ldr	r3, [r2, #0]
   1be8a:	18f6      	adds	r6, r6, r3
   1be8c:	e7af      	b.n	1bdee <__cvt+0x66>
   1be8e:	2280      	movs	r2, #128	; 0x80
   1be90:	0612      	lsls	r2, r2, #24
   1be92:	4490      	add	r8, r2
   1be94:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1be96:	232d      	movs	r3, #45	; 0x2d
   1be98:	7013      	strb	r3, [r2, #0]
   1be9a:	e782      	b.n	1bda2 <__cvt+0x1a>
   1be9c:	4648      	mov	r0, r9
   1be9e:	4641      	mov	r1, r8
   1bea0:	4b08      	ldr	r3, [pc, #32]	; (1bec4 <__cvt+0x13c>)
   1bea2:	4a07      	ldr	r2, [pc, #28]	; (1bec0 <__cvt+0x138>)
   1bea4:	f003 fb82 	bl	1f5ac <__aeabi_dcmpeq>
   1bea8:	2800      	cmp	r0, #0
   1beaa:	d1ec      	bne.n	1be86 <__cvt+0xfe>
   1beac:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1beae:	2301      	movs	r3, #1
   1beb0:	1a9b      	subs	r3, r3, r2
   1beb2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1beb4:	18f6      	adds	r6, r6, r3
   1beb6:	6013      	str	r3, [r2, #0]
   1beb8:	e799      	b.n	1bdee <__cvt+0x66>
   1beba:	46c0      	nop			; (mov r8, r8)
   1bebc:	46c0      	nop			; (mov r8, r8)
   1bebe:	46c0      	nop			; (mov r8, r8)
	...

0001bec8 <__exponent>:
   1bec8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1beca:	4647      	mov	r7, r8
   1becc:	b480      	push	{r7}
   1bece:	1c0c      	adds	r4, r1, #0
   1bed0:	b082      	sub	sp, #8
   1bed2:	1c07      	adds	r7, r0, #0
   1bed4:	7002      	strb	r2, [r0, #0]
   1bed6:	2900      	cmp	r1, #0
   1bed8:	db36      	blt.n	1bf48 <__exponent+0x80>
   1beda:	1c83      	adds	r3, r0, #2
   1bedc:	4698      	mov	r8, r3
   1bede:	232b      	movs	r3, #43	; 0x2b
   1bee0:	7043      	strb	r3, [r0, #1]
   1bee2:	2c09      	cmp	r4, #9
   1bee4:	dd24      	ble.n	1bf30 <__exponent+0x68>
   1bee6:	466e      	mov	r6, sp
   1bee8:	3606      	adds	r6, #6
   1beea:	1c33      	adds	r3, r6, #0
   1beec:	1c20      	adds	r0, r4, #0
   1beee:	210a      	movs	r1, #10
   1bef0:	1c1d      	adds	r5, r3, #0
   1bef2:	f003 fb3f 	bl	1f574 <__aeabi_idivmod>
   1bef6:	3130      	adds	r1, #48	; 0x30
   1bef8:	7029      	strb	r1, [r5, #0]
   1befa:	1c20      	adds	r0, r4, #0
   1befc:	210a      	movs	r1, #10
   1befe:	f003 fae3 	bl	1f4c8 <__aeabi_idiv>
   1bf02:	1e6b      	subs	r3, r5, #1
   1bf04:	1e04      	subs	r4, r0, #0
   1bf06:	2c09      	cmp	r4, #9
   1bf08:	dcf0      	bgt.n	1beec <__exponent+0x24>
   1bf0a:	3430      	adds	r4, #48	; 0x30
   1bf0c:	466a      	mov	r2, sp
   1bf0e:	b2e4      	uxtb	r4, r4
   1bf10:	3207      	adds	r2, #7
   1bf12:	701c      	strb	r4, [r3, #0]
   1bf14:	4293      	cmp	r3, r2
   1bf16:	d21d      	bcs.n	1bf54 <__exponent+0x8c>
   1bf18:	4642      	mov	r2, r8
   1bf1a:	e001      	b.n	1bf20 <__exponent+0x58>
   1bf1c:	785c      	ldrb	r4, [r3, #1]
   1bf1e:	3301      	adds	r3, #1
   1bf20:	7014      	strb	r4, [r2, #0]
   1bf22:	3201      	adds	r2, #1
   1bf24:	429e      	cmp	r6, r3
   1bf26:	d1f9      	bne.n	1bf1c <__exponent+0x54>
   1bf28:	aa02      	add	r2, sp, #8
   1bf2a:	1b50      	subs	r0, r2, r5
   1bf2c:	4440      	add	r0, r8
   1bf2e:	e006      	b.n	1bf3e <__exponent+0x76>
   1bf30:	4642      	mov	r2, r8
   1bf32:	2330      	movs	r3, #48	; 0x30
   1bf34:	4640      	mov	r0, r8
   1bf36:	3430      	adds	r4, #48	; 0x30
   1bf38:	7013      	strb	r3, [r2, #0]
   1bf3a:	3002      	adds	r0, #2
   1bf3c:	7054      	strb	r4, [r2, #1]
   1bf3e:	1bc0      	subs	r0, r0, r7
   1bf40:	b002      	add	sp, #8
   1bf42:	bc04      	pop	{r2}
   1bf44:	4690      	mov	r8, r2
   1bf46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bf48:	1c82      	adds	r2, r0, #2
   1bf4a:	232d      	movs	r3, #45	; 0x2d
   1bf4c:	424c      	negs	r4, r1
   1bf4e:	4690      	mov	r8, r2
   1bf50:	7043      	strb	r3, [r0, #1]
   1bf52:	e7c6      	b.n	1bee2 <__exponent+0x1a>
   1bf54:	4640      	mov	r0, r8
   1bf56:	e7f2      	b.n	1bf3e <__exponent+0x76>

0001bf58 <_printf_float>:
   1bf58:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bf5a:	4656      	mov	r6, sl
   1bf5c:	464d      	mov	r5, r9
   1bf5e:	4644      	mov	r4, r8
   1bf60:	465f      	mov	r7, fp
   1bf62:	b4f0      	push	{r4, r5, r6, r7}
   1bf64:	b08f      	sub	sp, #60	; 0x3c
   1bf66:	1c05      	adds	r5, r0, #0
   1bf68:	9818      	ldr	r0, [sp, #96]	; 0x60
   1bf6a:	1c0c      	adds	r4, r1, #0
   1bf6c:	4681      	mov	r9, r0
   1bf6e:	1c28      	adds	r0, r5, #0
   1bf70:	1c16      	adds	r6, r2, #0
   1bf72:	1c1f      	adds	r7, r3, #0
   1bf74:	f002 fb9e 	bl	1e6b4 <_localeconv_r>
   1bf78:	6801      	ldr	r1, [r0, #0]
   1bf7a:	1c08      	adds	r0, r1, #0
   1bf7c:	468a      	mov	sl, r1
   1bf7e:	f7ff fdcd 	bl	1bb1c <strlen>
   1bf82:	2300      	movs	r3, #0
   1bf84:	9009      	str	r0, [sp, #36]	; 0x24
   1bf86:	4648      	mov	r0, r9
   1bf88:	7e22      	ldrb	r2, [r4, #24]
   1bf8a:	930c      	str	r3, [sp, #48]	; 0x30
   1bf8c:	6803      	ldr	r3, [r0, #0]
   1bf8e:	4690      	mov	r8, r2
   1bf90:	3307      	adds	r3, #7
   1bf92:	2207      	movs	r2, #7
   1bf94:	4393      	bics	r3, r2
   1bf96:	1c1a      	adds	r2, r3, #0
   1bf98:	3208      	adds	r2, #8
   1bf9a:	6002      	str	r2, [r0, #0]
   1bf9c:	6818      	ldr	r0, [r3, #0]
   1bf9e:	6859      	ldr	r1, [r3, #4]
   1bfa0:	64a0      	str	r0, [r4, #72]	; 0x48
   1bfa2:	64e1      	str	r1, [r4, #76]	; 0x4c
   1bfa4:	f7ff f856 	bl	1b054 <__fpclassifyd>
   1bfa8:	2801      	cmp	r0, #1
   1bfaa:	d053      	beq.n	1c054 <_printf_float+0xfc>
   1bfac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1bfae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   1bfb0:	f7ff f850 	bl	1b054 <__fpclassifyd>
   1bfb4:	2800      	cmp	r0, #0
   1bfb6:	d10e      	bne.n	1bfd6 <_printf_float+0x7e>
   1bfb8:	4642      	mov	r2, r8
   1bfba:	2a47      	cmp	r2, #71	; 0x47
   1bfbc:	d800      	bhi.n	1bfc0 <_printf_float+0x68>
   1bfbe:	e13a      	b.n	1c236 <_printf_float+0x2de>
   1bfc0:	48bd      	ldr	r0, [pc, #756]	; (1c2b8 <_printf_float+0x360>)
   1bfc2:	9008      	str	r0, [sp, #32]
   1bfc4:	2303      	movs	r3, #3
   1bfc6:	6821      	ldr	r1, [r4, #0]
   1bfc8:	6123      	str	r3, [r4, #16]
   1bfca:	2304      	movs	r3, #4
   1bfcc:	4399      	bics	r1, r3
   1bfce:	2200      	movs	r2, #0
   1bfd0:	6021      	str	r1, [r4, #0]
   1bfd2:	4691      	mov	r9, r2
   1bfd4:	e055      	b.n	1c082 <_printf_float+0x12a>
   1bfd6:	6863      	ldr	r3, [r4, #4]
   1bfd8:	1c58      	adds	r0, r3, #1
   1bfda:	d100      	bne.n	1bfde <_printf_float+0x86>
   1bfdc:	e134      	b.n	1c248 <_printf_float+0x2f0>
   1bfde:	2220      	movs	r2, #32
   1bfe0:	4641      	mov	r1, r8
   1bfe2:	4391      	bics	r1, r2
   1bfe4:	2947      	cmp	r1, #71	; 0x47
   1bfe6:	d100      	bne.n	1bfea <_printf_float+0x92>
   1bfe8:	e1f6      	b.n	1c3d8 <_printf_float+0x480>
   1bfea:	6821      	ldr	r1, [r4, #0]
   1bfec:	2280      	movs	r2, #128	; 0x80
   1bfee:	00d2      	lsls	r2, r2, #3
   1bff0:	430a      	orrs	r2, r1
   1bff2:	6022      	str	r2, [r4, #0]
   1bff4:	9300      	str	r3, [sp, #0]
   1bff6:	ab0b      	add	r3, sp, #44	; 0x2c
   1bff8:	9303      	str	r3, [sp, #12]
   1bffa:	4643      	mov	r3, r8
   1bffc:	9201      	str	r2, [sp, #4]
   1bffe:	9304      	str	r3, [sp, #16]
   1c000:	222b      	movs	r2, #43	; 0x2b
   1c002:	ab0c      	add	r3, sp, #48	; 0x30
   1c004:	446a      	add	r2, sp
   1c006:	9305      	str	r3, [sp, #20]
   1c008:	2300      	movs	r3, #0
   1c00a:	9202      	str	r2, [sp, #8]
   1c00c:	9306      	str	r3, [sp, #24]
   1c00e:	4693      	mov	fp, r2
   1c010:	1c28      	adds	r0, r5, #0
   1c012:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1c014:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1c016:	f7ff feb7 	bl	1bd88 <__cvt>
   1c01a:	9008      	str	r0, [sp, #32]
   1c01c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1c01e:	4640      	mov	r0, r8
   1c020:	2865      	cmp	r0, #101	; 0x65
   1c022:	d800      	bhi.n	1c026 <_printf_float+0xce>
   1c024:	e207      	b.n	1c436 <_printf_float+0x4de>
   1c026:	2866      	cmp	r0, #102	; 0x66
   1c028:	d100      	bne.n	1c02c <_printf_float+0xd4>
   1c02a:	e21a      	b.n	1c462 <_printf_float+0x50a>
   1c02c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c02e:	428b      	cmp	r3, r1
   1c030:	dd00      	ble.n	1c034 <_printf_float+0xdc>
   1c032:	e210      	b.n	1c456 <_printf_float+0x4fe>
   1c034:	6823      	ldr	r3, [r4, #0]
   1c036:	6121      	str	r1, [r4, #16]
   1c038:	07db      	lsls	r3, r3, #31
   1c03a:	d500      	bpl.n	1c03e <_printf_float+0xe6>
   1c03c:	e21f      	b.n	1c47e <_printf_float+0x526>
   1c03e:	2000      	movs	r0, #0
   1c040:	65a1      	str	r1, [r4, #88]	; 0x58
   1c042:	4681      	mov	r9, r0
   1c044:	4659      	mov	r1, fp
   1c046:	780b      	ldrb	r3, [r1, #0]
   1c048:	2b00      	cmp	r3, #0
   1c04a:	d01a      	beq.n	1c082 <_printf_float+0x12a>
   1c04c:	222d      	movs	r2, #45	; 0x2d
   1c04e:	2343      	movs	r3, #67	; 0x43
   1c050:	54e2      	strb	r2, [r4, r3]
   1c052:	e016      	b.n	1c082 <_printf_float+0x12a>
   1c054:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1c056:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   1c058:	4b96      	ldr	r3, [pc, #600]	; (1c2b4 <_printf_float+0x35c>)
   1c05a:	4a95      	ldr	r2, [pc, #596]	; (1c2b0 <_printf_float+0x358>)
   1c05c:	f003 faac 	bl	1f5b8 <__aeabi_dcmplt>
   1c060:	2800      	cmp	r0, #0
   1c062:	d000      	beq.n	1c066 <_printf_float+0x10e>
   1c064:	e11d      	b.n	1c2a2 <_printf_float+0x34a>
   1c066:	4641      	mov	r1, r8
   1c068:	2947      	cmp	r1, #71	; 0x47
   1c06a:	d900      	bls.n	1c06e <_printf_float+0x116>
   1c06c:	e0d6      	b.n	1c21c <_printf_float+0x2c4>
   1c06e:	4a93      	ldr	r2, [pc, #588]	; (1c2bc <_printf_float+0x364>)
   1c070:	9208      	str	r2, [sp, #32]
   1c072:	2303      	movs	r3, #3
   1c074:	6820      	ldr	r0, [r4, #0]
   1c076:	6123      	str	r3, [r4, #16]
   1c078:	2304      	movs	r3, #4
   1c07a:	4398      	bics	r0, r3
   1c07c:	2100      	movs	r1, #0
   1c07e:	6020      	str	r0, [r4, #0]
   1c080:	4689      	mov	r9, r1
   1c082:	9700      	str	r7, [sp, #0]
   1c084:	1c28      	adds	r0, r5, #0
   1c086:	1c21      	adds	r1, r4, #0
   1c088:	aa0d      	add	r2, sp, #52	; 0x34
   1c08a:	1c33      	adds	r3, r6, #0
   1c08c:	f000 fa54 	bl	1c538 <_printf_common>
   1c090:	3001      	adds	r0, #1
   1c092:	d047      	beq.n	1c124 <_printf_float+0x1cc>
   1c094:	6823      	ldr	r3, [r4, #0]
   1c096:	055a      	lsls	r2, r3, #21
   1c098:	d400      	bmi.n	1c09c <_printf_float+0x144>
   1c09a:	e0b7      	b.n	1c20c <_printf_float+0x2b4>
   1c09c:	4640      	mov	r0, r8
   1c09e:	2865      	cmp	r0, #101	; 0x65
   1c0a0:	d949      	bls.n	1c136 <_printf_float+0x1de>
   1c0a2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1c0a4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   1c0a6:	4b83      	ldr	r3, [pc, #524]	; (1c2b4 <_printf_float+0x35c>)
   1c0a8:	4a81      	ldr	r2, [pc, #516]	; (1c2b0 <_printf_float+0x358>)
   1c0aa:	f003 fa7f 	bl	1f5ac <__aeabi_dcmpeq>
   1c0ae:	2800      	cmp	r0, #0
   1c0b0:	d000      	beq.n	1c0b4 <_printf_float+0x15c>
   1c0b2:	e15d      	b.n	1c370 <_printf_float+0x418>
   1c0b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1c0b6:	2800      	cmp	r0, #0
   1c0b8:	dc00      	bgt.n	1c0bc <_printf_float+0x164>
   1c0ba:	e1f3      	b.n	1c4a4 <_printf_float+0x54c>
   1c0bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c0be:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1c0c0:	4698      	mov	r8, r3
   1c0c2:	4293      	cmp	r3, r2
   1c0c4:	dd00      	ble.n	1c0c8 <_printf_float+0x170>
   1c0c6:	e0b9      	b.n	1c23c <_printf_float+0x2e4>
   1c0c8:	4640      	mov	r0, r8
   1c0ca:	2800      	cmp	r0, #0
   1c0cc:	dd07      	ble.n	1c0de <_printf_float+0x186>
   1c0ce:	1c28      	adds	r0, r5, #0
   1c0d0:	1c31      	adds	r1, r6, #0
   1c0d2:	9a08      	ldr	r2, [sp, #32]
   1c0d4:	4643      	mov	r3, r8
   1c0d6:	47b8      	blx	r7
   1c0d8:	3001      	adds	r0, #1
   1c0da:	d023      	beq.n	1c124 <_printf_float+0x1cc>
   1c0dc:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1c0de:	4641      	mov	r1, r8
   1c0e0:	43cb      	mvns	r3, r1
   1c0e2:	17db      	asrs	r3, r3, #31
   1c0e4:	4019      	ands	r1, r3
   1c0e6:	201a      	movs	r0, #26
   1c0e8:	4689      	mov	r9, r1
   1c0ea:	1a53      	subs	r3, r2, r1
   1c0ec:	1900      	adds	r0, r0, r4
   1c0ee:	2100      	movs	r1, #0
   1c0f0:	2b00      	cmp	r3, #0
   1c0f2:	dc00      	bgt.n	1c0f6 <_printf_float+0x19e>
   1c0f4:	e0ec      	b.n	1c2d0 <_printf_float+0x378>
   1c0f6:	1c3b      	adds	r3, r7, #0
   1c0f8:	46a3      	mov	fp, r4
   1c0fa:	1c37      	adds	r7, r6, #0
   1c0fc:	1c0c      	adds	r4, r1, #0
   1c0fe:	1c2e      	adds	r6, r5, #0
   1c100:	4698      	mov	r8, r3
   1c102:	1c05      	adds	r5, r0, #0
   1c104:	e007      	b.n	1c116 <_printf_float+0x1be>
   1c106:	465b      	mov	r3, fp
   1c108:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   1c10a:	4648      	mov	r0, r9
   1c10c:	3401      	adds	r4, #1
   1c10e:	1a13      	subs	r3, r2, r0
   1c110:	42a3      	cmp	r3, r4
   1c112:	dc00      	bgt.n	1c116 <_printf_float+0x1be>
   1c114:	e0d8      	b.n	1c2c8 <_printf_float+0x370>
   1c116:	1c30      	adds	r0, r6, #0
   1c118:	1c39      	adds	r1, r7, #0
   1c11a:	1c2a      	adds	r2, r5, #0
   1c11c:	2301      	movs	r3, #1
   1c11e:	47c0      	blx	r8
   1c120:	3001      	adds	r0, #1
   1c122:	d1f0      	bne.n	1c106 <_printf_float+0x1ae>
   1c124:	2001      	movs	r0, #1
   1c126:	4240      	negs	r0, r0
   1c128:	b00f      	add	sp, #60	; 0x3c
   1c12a:	bc3c      	pop	{r2, r3, r4, r5}
   1c12c:	4690      	mov	r8, r2
   1c12e:	4699      	mov	r9, r3
   1c130:	46a2      	mov	sl, r4
   1c132:	46ab      	mov	fp, r5
   1c134:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c136:	980c      	ldr	r0, [sp, #48]	; 0x30
   1c138:	2801      	cmp	r0, #1
   1c13a:	dd72      	ble.n	1c222 <_printf_float+0x2ca>
   1c13c:	1c28      	adds	r0, r5, #0
   1c13e:	1c31      	adds	r1, r6, #0
   1c140:	9a08      	ldr	r2, [sp, #32]
   1c142:	2301      	movs	r3, #1
   1c144:	47b8      	blx	r7
   1c146:	3001      	adds	r0, #1
   1c148:	d0ec      	beq.n	1c124 <_printf_float+0x1cc>
   1c14a:	1c28      	adds	r0, r5, #0
   1c14c:	1c31      	adds	r1, r6, #0
   1c14e:	4652      	mov	r2, sl
   1c150:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c152:	47b8      	blx	r7
   1c154:	3001      	adds	r0, #1
   1c156:	d0e5      	beq.n	1c124 <_printf_float+0x1cc>
   1c158:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1c15a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   1c15c:	4b55      	ldr	r3, [pc, #340]	; (1c2b4 <_printf_float+0x35c>)
   1c15e:	4a54      	ldr	r2, [pc, #336]	; (1c2b0 <_printf_float+0x358>)
   1c160:	f003 fa24 	bl	1f5ac <__aeabi_dcmpeq>
   1c164:	2800      	cmp	r0, #0
   1c166:	d100      	bne.n	1c16a <_printf_float+0x212>
   1c168:	e154      	b.n	1c414 <_printf_float+0x4bc>
   1c16a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1c16c:	221a      	movs	r2, #26
   1c16e:	2300      	movs	r3, #0
   1c170:	1912      	adds	r2, r2, r4
   1c172:	4698      	mov	r8, r3
   1c174:	2801      	cmp	r0, #1
   1c176:	dd18      	ble.n	1c1aa <_printf_float+0x252>
   1c178:	1c3b      	adds	r3, r7, #0
   1c17a:	46a2      	mov	sl, r4
   1c17c:	1c37      	adds	r7, r6, #0
   1c17e:	4644      	mov	r4, r8
   1c180:	1c2e      	adds	r6, r5, #0
   1c182:	4698      	mov	r8, r3
   1c184:	1c15      	adds	r5, r2, #0
   1c186:	e004      	b.n	1c192 <_printf_float+0x23a>
   1c188:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c18a:	3401      	adds	r4, #1
   1c18c:	3b01      	subs	r3, #1
   1c18e:	42a3      	cmp	r3, r4
   1c190:	dd07      	ble.n	1c1a2 <_printf_float+0x24a>
   1c192:	1c30      	adds	r0, r6, #0
   1c194:	1c39      	adds	r1, r7, #0
   1c196:	1c2a      	adds	r2, r5, #0
   1c198:	2301      	movs	r3, #1
   1c19a:	47c0      	blx	r8
   1c19c:	3001      	adds	r0, #1
   1c19e:	d1f3      	bne.n	1c188 <_printf_float+0x230>
   1c1a0:	e7c0      	b.n	1c124 <_printf_float+0x1cc>
   1c1a2:	1c35      	adds	r5, r6, #0
   1c1a4:	4654      	mov	r4, sl
   1c1a6:	1c3e      	adds	r6, r7, #0
   1c1a8:	4647      	mov	r7, r8
   1c1aa:	1c22      	adds	r2, r4, #0
   1c1ac:	1c28      	adds	r0, r5, #0
   1c1ae:	1c31      	adds	r1, r6, #0
   1c1b0:	3250      	adds	r2, #80	; 0x50
   1c1b2:	464b      	mov	r3, r9
   1c1b4:	47b8      	blx	r7
   1c1b6:	3001      	adds	r0, #1
   1c1b8:	d0b4      	beq.n	1c124 <_printf_float+0x1cc>
   1c1ba:	6823      	ldr	r3, [r4, #0]
   1c1bc:	0799      	lsls	r1, r3, #30
   1c1be:	d405      	bmi.n	1c1cc <_printf_float+0x274>
   1c1c0:	68e3      	ldr	r3, [r4, #12]
   1c1c2:	980d      	ldr	r0, [sp, #52]	; 0x34
   1c1c4:	4298      	cmp	r0, r3
   1c1c6:	daaf      	bge.n	1c128 <_printf_float+0x1d0>
   1c1c8:	1c18      	adds	r0, r3, #0
   1c1ca:	e7ad      	b.n	1c128 <_printf_float+0x1d0>
   1c1cc:	68e3      	ldr	r3, [r4, #12]
   1c1ce:	980d      	ldr	r0, [sp, #52]	; 0x34
   1c1d0:	1a1a      	subs	r2, r3, r0
   1c1d2:	2a00      	cmp	r2, #0
   1c1d4:	ddf6      	ble.n	1c1c4 <_printf_float+0x26c>
   1c1d6:	2300      	movs	r3, #0
   1c1d8:	2219      	movs	r2, #25
   1c1da:	4698      	mov	r8, r3
   1c1dc:	1912      	adds	r2, r2, r4
   1c1de:	1c3b      	adds	r3, r7, #0
   1c1e0:	46a1      	mov	r9, r4
   1c1e2:	1c37      	adds	r7, r6, #0
   1c1e4:	4644      	mov	r4, r8
   1c1e6:	1c2e      	adds	r6, r5, #0
   1c1e8:	4698      	mov	r8, r3
   1c1ea:	1c15      	adds	r5, r2, #0
   1c1ec:	e006      	b.n	1c1fc <_printf_float+0x2a4>
   1c1ee:	4648      	mov	r0, r9
   1c1f0:	68c3      	ldr	r3, [r0, #12]
   1c1f2:	980d      	ldr	r0, [sp, #52]	; 0x34
   1c1f4:	3401      	adds	r4, #1
   1c1f6:	1a1a      	subs	r2, r3, r0
   1c1f8:	42a2      	cmp	r2, r4
   1c1fa:	dde3      	ble.n	1c1c4 <_printf_float+0x26c>
   1c1fc:	1c30      	adds	r0, r6, #0
   1c1fe:	1c39      	adds	r1, r7, #0
   1c200:	1c2a      	adds	r2, r5, #0
   1c202:	2301      	movs	r3, #1
   1c204:	47c0      	blx	r8
   1c206:	3001      	adds	r0, #1
   1c208:	d1f1      	bne.n	1c1ee <_printf_float+0x296>
   1c20a:	e78b      	b.n	1c124 <_printf_float+0x1cc>
   1c20c:	1c28      	adds	r0, r5, #0
   1c20e:	1c31      	adds	r1, r6, #0
   1c210:	9a08      	ldr	r2, [sp, #32]
   1c212:	6923      	ldr	r3, [r4, #16]
   1c214:	47b8      	blx	r7
   1c216:	3001      	adds	r0, #1
   1c218:	d1cf      	bne.n	1c1ba <_printf_float+0x262>
   1c21a:	e783      	b.n	1c124 <_printf_float+0x1cc>
   1c21c:	4b28      	ldr	r3, [pc, #160]	; (1c2c0 <_printf_float+0x368>)
   1c21e:	9308      	str	r3, [sp, #32]
   1c220:	e727      	b.n	1c072 <_printf_float+0x11a>
   1c222:	07d9      	lsls	r1, r3, #31
   1c224:	d48a      	bmi.n	1c13c <_printf_float+0x1e4>
   1c226:	1c28      	adds	r0, r5, #0
   1c228:	1c31      	adds	r1, r6, #0
   1c22a:	9a08      	ldr	r2, [sp, #32]
   1c22c:	2301      	movs	r3, #1
   1c22e:	47b8      	blx	r7
   1c230:	3001      	adds	r0, #1
   1c232:	d1ba      	bne.n	1c1aa <_printf_float+0x252>
   1c234:	e776      	b.n	1c124 <_printf_float+0x1cc>
   1c236:	4b23      	ldr	r3, [pc, #140]	; (1c2c4 <_printf_float+0x36c>)
   1c238:	9308      	str	r3, [sp, #32]
   1c23a:	e6c3      	b.n	1bfc4 <_printf_float+0x6c>
   1c23c:	4690      	mov	r8, r2
   1c23e:	4640      	mov	r0, r8
   1c240:	2800      	cmp	r0, #0
   1c242:	dd00      	ble.n	1c246 <_printf_float+0x2ee>
   1c244:	e743      	b.n	1c0ce <_printf_float+0x176>
   1c246:	e74a      	b.n	1c0de <_printf_float+0x186>
   1c248:	6821      	ldr	r1, [r4, #0]
   1c24a:	2380      	movs	r3, #128	; 0x80
   1c24c:	00db      	lsls	r3, r3, #3
   1c24e:	430b      	orrs	r3, r1
   1c250:	2206      	movs	r2, #6
   1c252:	6062      	str	r2, [r4, #4]
   1c254:	6023      	str	r3, [r4, #0]
   1c256:	9301      	str	r3, [sp, #4]
   1c258:	ab0b      	add	r3, sp, #44	; 0x2c
   1c25a:	9303      	str	r3, [sp, #12]
   1c25c:	4643      	mov	r3, r8
   1c25e:	9200      	str	r2, [sp, #0]
   1c260:	9304      	str	r3, [sp, #16]
   1c262:	222b      	movs	r2, #43	; 0x2b
   1c264:	ab0c      	add	r3, sp, #48	; 0x30
   1c266:	446a      	add	r2, sp
   1c268:	9305      	str	r3, [sp, #20]
   1c26a:	2300      	movs	r3, #0
   1c26c:	9202      	str	r2, [sp, #8]
   1c26e:	9306      	str	r3, [sp, #24]
   1c270:	4693      	mov	fp, r2
   1c272:	1c28      	adds	r0, r5, #0
   1c274:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1c276:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1c278:	f7ff fd86 	bl	1bd88 <__cvt>
   1c27c:	2320      	movs	r3, #32
   1c27e:	9008      	str	r0, [sp, #32]
   1c280:	4640      	mov	r0, r8
   1c282:	4398      	bics	r0, r3
   1c284:	2847      	cmp	r0, #71	; 0x47
   1c286:	d000      	beq.n	1c28a <_printf_float+0x332>
   1c288:	e6c8      	b.n	1c01c <_printf_float+0xc4>
   1c28a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1c28c:	1cca      	adds	r2, r1, #3
   1c28e:	db03      	blt.n	1c298 <_printf_float+0x340>
   1c290:	6863      	ldr	r3, [r4, #4]
   1c292:	4299      	cmp	r1, r3
   1c294:	dc00      	bgt.n	1c298 <_printf_float+0x340>
   1c296:	e0f5      	b.n	1c484 <_printf_float+0x52c>
   1c298:	4643      	mov	r3, r8
   1c29a:	3b02      	subs	r3, #2
   1c29c:	b2db      	uxtb	r3, r3
   1c29e:	4698      	mov	r8, r3
   1c2a0:	e6bd      	b.n	1c01e <_printf_float+0xc6>
   1c2a2:	222d      	movs	r2, #45	; 0x2d
   1c2a4:	2343      	movs	r3, #67	; 0x43
   1c2a6:	54e2      	strb	r2, [r4, r3]
   1c2a8:	e6dd      	b.n	1c066 <_printf_float+0x10e>
   1c2aa:	46c0      	nop			; (mov r8, r8)
   1c2ac:	46c0      	nop			; (mov r8, r8)
   1c2ae:	46c0      	nop			; (mov r8, r8)
	...
   1c2b8:	00026fb4 	.word	0x00026fb4
   1c2bc:	00026fa8 	.word	0x00026fa8
   1c2c0:	00026fac 	.word	0x00026fac
   1c2c4:	00026fb0 	.word	0x00026fb0
   1c2c8:	1c35      	adds	r5, r6, #0
   1c2ca:	465c      	mov	r4, fp
   1c2cc:	1c3e      	adds	r6, r7, #0
   1c2ce:	4647      	mov	r7, r8
   1c2d0:	9908      	ldr	r1, [sp, #32]
   1c2d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c2d4:	1889      	adds	r1, r1, r2
   1c2d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c2d8:	4688      	mov	r8, r1
   1c2da:	429a      	cmp	r2, r3
   1c2dc:	db3d      	blt.n	1c35a <_printf_float+0x402>
   1c2de:	6820      	ldr	r0, [r4, #0]
   1c2e0:	07c0      	lsls	r0, r0, #31
   1c2e2:	d43a      	bmi.n	1c35a <_printf_float+0x402>
   1c2e4:	9808      	ldr	r0, [sp, #32]
   1c2e6:	18c1      	adds	r1, r0, r3
   1c2e8:	1a9b      	subs	r3, r3, r2
   1c2ea:	4642      	mov	r2, r8
   1c2ec:	1a8a      	subs	r2, r1, r2
   1c2ee:	4691      	mov	r9, r2
   1c2f0:	429a      	cmp	r2, r3
   1c2f2:	dd00      	ble.n	1c2f6 <_printf_float+0x39e>
   1c2f4:	4699      	mov	r9, r3
   1c2f6:	4648      	mov	r0, r9
   1c2f8:	2800      	cmp	r0, #0
   1c2fa:	dd0a      	ble.n	1c312 <_printf_float+0x3ba>
   1c2fc:	1c28      	adds	r0, r5, #0
   1c2fe:	1c31      	adds	r1, r6, #0
   1c300:	4642      	mov	r2, r8
   1c302:	464b      	mov	r3, r9
   1c304:	47b8      	blx	r7
   1c306:	3001      	adds	r0, #1
   1c308:	d100      	bne.n	1c30c <_printf_float+0x3b4>
   1c30a:	e70b      	b.n	1c124 <_printf_float+0x1cc>
   1c30c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1c30e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c310:	1a8b      	subs	r3, r1, r2
   1c312:	4649      	mov	r1, r9
   1c314:	43ca      	mvns	r2, r1
   1c316:	17d2      	asrs	r2, r2, #31
   1c318:	4011      	ands	r1, r2
   1c31a:	221a      	movs	r2, #26
   1c31c:	468b      	mov	fp, r1
   1c31e:	1a5b      	subs	r3, r3, r1
   1c320:	1912      	adds	r2, r2, r4
   1c322:	2000      	movs	r0, #0
   1c324:	2b00      	cmp	r3, #0
   1c326:	dc00      	bgt.n	1c32a <_printf_float+0x3d2>
   1c328:	e747      	b.n	1c1ba <_printf_float+0x262>
   1c32a:	1c3b      	adds	r3, r7, #0
   1c32c:	46a1      	mov	r9, r4
   1c32e:	1c37      	adds	r7, r6, #0
   1c330:	1c04      	adds	r4, r0, #0
   1c332:	1c2e      	adds	r6, r5, #0
   1c334:	4698      	mov	r8, r3
   1c336:	1c15      	adds	r5, r2, #0
   1c338:	e007      	b.n	1c34a <_printf_float+0x3f2>
   1c33a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1c33c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1c33e:	465a      	mov	r2, fp
   1c340:	1a43      	subs	r3, r0, r1
   1c342:	3401      	adds	r4, #1
   1c344:	1a9b      	subs	r3, r3, r2
   1c346:	42a3      	cmp	r3, r4
   1c348:	dd6f      	ble.n	1c42a <_printf_float+0x4d2>
   1c34a:	1c30      	adds	r0, r6, #0
   1c34c:	1c39      	adds	r1, r7, #0
   1c34e:	1c2a      	adds	r2, r5, #0
   1c350:	2301      	movs	r3, #1
   1c352:	47c0      	blx	r8
   1c354:	3001      	adds	r0, #1
   1c356:	d1f0      	bne.n	1c33a <_printf_float+0x3e2>
   1c358:	e6e4      	b.n	1c124 <_printf_float+0x1cc>
   1c35a:	1c28      	adds	r0, r5, #0
   1c35c:	1c31      	adds	r1, r6, #0
   1c35e:	4652      	mov	r2, sl
   1c360:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c362:	47b8      	blx	r7
   1c364:	3001      	adds	r0, #1
   1c366:	d100      	bne.n	1c36a <_printf_float+0x412>
   1c368:	e6dc      	b.n	1c124 <_printf_float+0x1cc>
   1c36a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c36c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c36e:	e7b9      	b.n	1c2e4 <_printf_float+0x38c>
   1c370:	1c28      	adds	r0, r5, #0
   1c372:	1c31      	adds	r1, r6, #0
   1c374:	4a6f      	ldr	r2, [pc, #444]	; (1c534 <_printf_float+0x5dc>)
   1c376:	2301      	movs	r3, #1
   1c378:	47b8      	blx	r7
   1c37a:	3001      	adds	r0, #1
   1c37c:	d100      	bne.n	1c380 <_printf_float+0x428>
   1c37e:	e6d1      	b.n	1c124 <_printf_float+0x1cc>
   1c380:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1c382:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1c384:	4291      	cmp	r1, r2
   1c386:	db03      	blt.n	1c390 <_printf_float+0x438>
   1c388:	6823      	ldr	r3, [r4, #0]
   1c38a:	07d8      	lsls	r0, r3, #31
   1c38c:	d400      	bmi.n	1c390 <_printf_float+0x438>
   1c38e:	e715      	b.n	1c1bc <_printf_float+0x264>
   1c390:	1c28      	adds	r0, r5, #0
   1c392:	1c31      	adds	r1, r6, #0
   1c394:	4652      	mov	r2, sl
   1c396:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c398:	47b8      	blx	r7
   1c39a:	3001      	adds	r0, #1
   1c39c:	d100      	bne.n	1c3a0 <_printf_float+0x448>
   1c39e:	e6c1      	b.n	1c124 <_printf_float+0x1cc>
   1c3a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c3a2:	211a      	movs	r1, #26
   1c3a4:	1909      	adds	r1, r1, r4
   1c3a6:	2200      	movs	r2, #0
   1c3a8:	2b01      	cmp	r3, #1
   1c3aa:	dc00      	bgt.n	1c3ae <_printf_float+0x456>
   1c3ac:	e705      	b.n	1c1ba <_printf_float+0x262>
   1c3ae:	1c3b      	adds	r3, r7, #0
   1c3b0:	46a1      	mov	r9, r4
   1c3b2:	1c37      	adds	r7, r6, #0
   1c3b4:	1c14      	adds	r4, r2, #0
   1c3b6:	1c2e      	adds	r6, r5, #0
   1c3b8:	4698      	mov	r8, r3
   1c3ba:	1c0d      	adds	r5, r1, #0
   1c3bc:	e004      	b.n	1c3c8 <_printf_float+0x470>
   1c3be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c3c0:	3401      	adds	r4, #1
   1c3c2:	3b01      	subs	r3, #1
   1c3c4:	42a3      	cmp	r3, r4
   1c3c6:	dd30      	ble.n	1c42a <_printf_float+0x4d2>
   1c3c8:	1c30      	adds	r0, r6, #0
   1c3ca:	1c39      	adds	r1, r7, #0
   1c3cc:	1c2a      	adds	r2, r5, #0
   1c3ce:	2301      	movs	r3, #1
   1c3d0:	47c0      	blx	r8
   1c3d2:	3001      	adds	r0, #1
   1c3d4:	d1f3      	bne.n	1c3be <_printf_float+0x466>
   1c3d6:	e6a5      	b.n	1c124 <_printf_float+0x1cc>
   1c3d8:	2b00      	cmp	r3, #0
   1c3da:	d101      	bne.n	1c3e0 <_printf_float+0x488>
   1c3dc:	2301      	movs	r3, #1
   1c3de:	6063      	str	r3, [r4, #4]
   1c3e0:	6820      	ldr	r0, [r4, #0]
   1c3e2:	2280      	movs	r2, #128	; 0x80
   1c3e4:	00d2      	lsls	r2, r2, #3
   1c3e6:	4302      	orrs	r2, r0
   1c3e8:	6022      	str	r2, [r4, #0]
   1c3ea:	9300      	str	r3, [sp, #0]
   1c3ec:	ab0b      	add	r3, sp, #44	; 0x2c
   1c3ee:	9303      	str	r3, [sp, #12]
   1c3f0:	212b      	movs	r1, #43	; 0x2b
   1c3f2:	ab0c      	add	r3, sp, #48	; 0x30
   1c3f4:	9201      	str	r2, [sp, #4]
   1c3f6:	4469      	add	r1, sp
   1c3f8:	9305      	str	r3, [sp, #20]
   1c3fa:	4642      	mov	r2, r8
   1c3fc:	2300      	movs	r3, #0
   1c3fe:	9102      	str	r1, [sp, #8]
   1c400:	9204      	str	r2, [sp, #16]
   1c402:	9306      	str	r3, [sp, #24]
   1c404:	1c28      	adds	r0, r5, #0
   1c406:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1c408:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1c40a:	468b      	mov	fp, r1
   1c40c:	f7ff fcbc 	bl	1bd88 <__cvt>
   1c410:	9008      	str	r0, [sp, #32]
   1c412:	e73a      	b.n	1c28a <_printf_float+0x332>
   1c414:	9a08      	ldr	r2, [sp, #32]
   1c416:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c418:	3201      	adds	r2, #1
   1c41a:	3b01      	subs	r3, #1
   1c41c:	1c28      	adds	r0, r5, #0
   1c41e:	1c31      	adds	r1, r6, #0
   1c420:	47b8      	blx	r7
   1c422:	3001      	adds	r0, #1
   1c424:	d000      	beq.n	1c428 <_printf_float+0x4d0>
   1c426:	e6c0      	b.n	1c1aa <_printf_float+0x252>
   1c428:	e67c      	b.n	1c124 <_printf_float+0x1cc>
   1c42a:	464c      	mov	r4, r9
   1c42c:	1c35      	adds	r5, r6, #0
   1c42e:	6823      	ldr	r3, [r4, #0]
   1c430:	1c3e      	adds	r6, r7, #0
   1c432:	4647      	mov	r7, r8
   1c434:	e6c2      	b.n	1c1bc <_printf_float+0x264>
   1c436:	1c20      	adds	r0, r4, #0
   1c438:	3901      	subs	r1, #1
   1c43a:	4642      	mov	r2, r8
   1c43c:	3050      	adds	r0, #80	; 0x50
   1c43e:	910b      	str	r1, [sp, #44]	; 0x2c
   1c440:	f7ff fd42 	bl	1bec8 <__exponent>
   1c444:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c446:	4681      	mov	r9, r0
   1c448:	18c2      	adds	r2, r0, r3
   1c44a:	6122      	str	r2, [r4, #16]
   1c44c:	2b01      	cmp	r3, #1
   1c44e:	dd5f      	ble.n	1c510 <_printf_float+0x5b8>
   1c450:	3201      	adds	r2, #1
   1c452:	6122      	str	r2, [r4, #16]
   1c454:	e5f6      	b.n	1c044 <_printf_float+0xec>
   1c456:	2201      	movs	r2, #1
   1c458:	2900      	cmp	r1, #0
   1c45a:	dd16      	ble.n	1c48a <_printf_float+0x532>
   1c45c:	18d3      	adds	r3, r2, r3
   1c45e:	6123      	str	r3, [r4, #16]
   1c460:	e5ed      	b.n	1c03e <_printf_float+0xe6>
   1c462:	2900      	cmp	r1, #0
   1c464:	dd14      	ble.n	1c490 <_printf_float+0x538>
   1c466:	6863      	ldr	r3, [r4, #4]
   1c468:	6121      	str	r1, [r4, #16]
   1c46a:	2b00      	cmp	r3, #0
   1c46c:	d103      	bne.n	1c476 <_printf_float+0x51e>
   1c46e:	6820      	ldr	r0, [r4, #0]
   1c470:	07c0      	lsls	r0, r0, #31
   1c472:	d400      	bmi.n	1c476 <_printf_float+0x51e>
   1c474:	e5e3      	b.n	1c03e <_printf_float+0xe6>
   1c476:	3301      	adds	r3, #1
   1c478:	185b      	adds	r3, r3, r1
   1c47a:	6123      	str	r3, [r4, #16]
   1c47c:	e5df      	b.n	1c03e <_printf_float+0xe6>
   1c47e:	1c4b      	adds	r3, r1, #1
   1c480:	6123      	str	r3, [r4, #16]
   1c482:	e5dc      	b.n	1c03e <_printf_float+0xe6>
   1c484:	2267      	movs	r2, #103	; 0x67
   1c486:	4690      	mov	r8, r2
   1c488:	e5d0      	b.n	1c02c <_printf_float+0xd4>
   1c48a:	2202      	movs	r2, #2
   1c48c:	1a52      	subs	r2, r2, r1
   1c48e:	e7e5      	b.n	1c45c <_printf_float+0x504>
   1c490:	6863      	ldr	r3, [r4, #4]
   1c492:	2b00      	cmp	r3, #0
   1c494:	d103      	bne.n	1c49e <_printf_float+0x546>
   1c496:	6820      	ldr	r0, [r4, #0]
   1c498:	2201      	movs	r2, #1
   1c49a:	07c0      	lsls	r0, r0, #31
   1c49c:	d500      	bpl.n	1c4a0 <_printf_float+0x548>
   1c49e:	1c9a      	adds	r2, r3, #2
   1c4a0:	6122      	str	r2, [r4, #16]
   1c4a2:	e5cc      	b.n	1c03e <_printf_float+0xe6>
   1c4a4:	1c28      	adds	r0, r5, #0
   1c4a6:	1c31      	adds	r1, r6, #0
   1c4a8:	4a22      	ldr	r2, [pc, #136]	; (1c534 <_printf_float+0x5dc>)
   1c4aa:	2301      	movs	r3, #1
   1c4ac:	47b8      	blx	r7
   1c4ae:	3001      	adds	r0, #1
   1c4b0:	d100      	bne.n	1c4b4 <_printf_float+0x55c>
   1c4b2:	e637      	b.n	1c124 <_printf_float+0x1cc>
   1c4b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1c4b6:	2900      	cmp	r1, #0
   1c4b8:	d106      	bne.n	1c4c8 <_printf_float+0x570>
   1c4ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1c4bc:	2a00      	cmp	r2, #0
   1c4be:	d103      	bne.n	1c4c8 <_printf_float+0x570>
   1c4c0:	6823      	ldr	r3, [r4, #0]
   1c4c2:	07d8      	lsls	r0, r3, #31
   1c4c4:	d400      	bmi.n	1c4c8 <_printf_float+0x570>
   1c4c6:	e679      	b.n	1c1bc <_printf_float+0x264>
   1c4c8:	1c28      	adds	r0, r5, #0
   1c4ca:	1c31      	adds	r1, r6, #0
   1c4cc:	4652      	mov	r2, sl
   1c4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c4d0:	47b8      	blx	r7
   1c4d2:	3001      	adds	r0, #1
   1c4d4:	d100      	bne.n	1c4d8 <_printf_float+0x580>
   1c4d6:	e625      	b.n	1c124 <_printf_float+0x1cc>
   1c4d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1c4da:	221a      	movs	r2, #26
   1c4dc:	424b      	negs	r3, r1
   1c4de:	1912      	adds	r2, r2, r4
   1c4e0:	2000      	movs	r0, #0
   1c4e2:	2b00      	cmp	r3, #0
   1c4e4:	dd1d      	ble.n	1c522 <_printf_float+0x5ca>
   1c4e6:	1c3b      	adds	r3, r7, #0
   1c4e8:	46a1      	mov	r9, r4
   1c4ea:	1c37      	adds	r7, r6, #0
   1c4ec:	1c04      	adds	r4, r0, #0
   1c4ee:	1c2e      	adds	r6, r5, #0
   1c4f0:	4698      	mov	r8, r3
   1c4f2:	1c15      	adds	r5, r2, #0
   1c4f4:	e004      	b.n	1c500 <_printf_float+0x5a8>
   1c4f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1c4f8:	3401      	adds	r4, #1
   1c4fa:	424b      	negs	r3, r1
   1c4fc:	42a3      	cmp	r3, r4
   1c4fe:	dd0c      	ble.n	1c51a <_printf_float+0x5c2>
   1c500:	1c30      	adds	r0, r6, #0
   1c502:	1c39      	adds	r1, r7, #0
   1c504:	1c2a      	adds	r2, r5, #0
   1c506:	2301      	movs	r3, #1
   1c508:	47c0      	blx	r8
   1c50a:	3001      	adds	r0, #1
   1c50c:	d1f3      	bne.n	1c4f6 <_printf_float+0x59e>
   1c50e:	e609      	b.n	1c124 <_printf_float+0x1cc>
   1c510:	6821      	ldr	r1, [r4, #0]
   1c512:	07c9      	lsls	r1, r1, #31
   1c514:	d400      	bmi.n	1c518 <_printf_float+0x5c0>
   1c516:	e595      	b.n	1c044 <_printf_float+0xec>
   1c518:	e79a      	b.n	1c450 <_printf_float+0x4f8>
   1c51a:	1c35      	adds	r5, r6, #0
   1c51c:	464c      	mov	r4, r9
   1c51e:	1c3e      	adds	r6, r7, #0
   1c520:	4647      	mov	r7, r8
   1c522:	1c28      	adds	r0, r5, #0
   1c524:	1c31      	adds	r1, r6, #0
   1c526:	9a08      	ldr	r2, [sp, #32]
   1c528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c52a:	47b8      	blx	r7
   1c52c:	3001      	adds	r0, #1
   1c52e:	d000      	beq.n	1c532 <_printf_float+0x5da>
   1c530:	e643      	b.n	1c1ba <_printf_float+0x262>
   1c532:	e5f7      	b.n	1c124 <_printf_float+0x1cc>
   1c534:	00026fb8 	.word	0x00026fb8

0001c538 <_printf_common>:
   1c538:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c53a:	464e      	mov	r6, r9
   1c53c:	4657      	mov	r7, sl
   1c53e:	4645      	mov	r5, r8
   1c540:	b4e0      	push	{r5, r6, r7}
   1c542:	4691      	mov	r9, r2
   1c544:	1c06      	adds	r6, r0, #0
   1c546:	1c1f      	adds	r7, r3, #0
   1c548:	9808      	ldr	r0, [sp, #32]
   1c54a:	690a      	ldr	r2, [r1, #16]
   1c54c:	688b      	ldr	r3, [r1, #8]
   1c54e:	1c0c      	adds	r4, r1, #0
   1c550:	4680      	mov	r8, r0
   1c552:	4293      	cmp	r3, r2
   1c554:	da00      	bge.n	1c558 <_printf_common+0x20>
   1c556:	1c13      	adds	r3, r2, #0
   1c558:	4649      	mov	r1, r9
   1c55a:	600b      	str	r3, [r1, #0]
   1c55c:	2243      	movs	r2, #67	; 0x43
   1c55e:	5ca2      	ldrb	r2, [r4, r2]
   1c560:	2a00      	cmp	r2, #0
   1c562:	d001      	beq.n	1c568 <_printf_common+0x30>
   1c564:	3301      	adds	r3, #1
   1c566:	600b      	str	r3, [r1, #0]
   1c568:	6822      	ldr	r2, [r4, #0]
   1c56a:	0693      	lsls	r3, r2, #26
   1c56c:	d504      	bpl.n	1c578 <_printf_common+0x40>
   1c56e:	4648      	mov	r0, r9
   1c570:	6803      	ldr	r3, [r0, #0]
   1c572:	3302      	adds	r3, #2
   1c574:	6003      	str	r3, [r0, #0]
   1c576:	6822      	ldr	r2, [r4, #0]
   1c578:	2306      	movs	r3, #6
   1c57a:	4213      	tst	r3, r2
   1c57c:	d120      	bne.n	1c5c0 <_printf_common+0x88>
   1c57e:	4648      	mov	r0, r9
   1c580:	68e1      	ldr	r1, [r4, #12]
   1c582:	6800      	ldr	r0, [r0, #0]
   1c584:	1a0b      	subs	r3, r1, r0
   1c586:	2b00      	cmp	r3, #0
   1c588:	dd1a      	ble.n	1c5c0 <_printf_common+0x88>
   1c58a:	2119      	movs	r1, #25
   1c58c:	1909      	adds	r1, r1, r4
   1c58e:	468a      	mov	sl, r1
   1c590:	2500      	movs	r5, #0
   1c592:	e006      	b.n	1c5a2 <_printf_common+0x6a>
   1c594:	4648      	mov	r0, r9
   1c596:	68e2      	ldr	r2, [r4, #12]
   1c598:	6800      	ldr	r0, [r0, #0]
   1c59a:	3501      	adds	r5, #1
   1c59c:	1a13      	subs	r3, r2, r0
   1c59e:	42ab      	cmp	r3, r5
   1c5a0:	dd0d      	ble.n	1c5be <_printf_common+0x86>
   1c5a2:	1c30      	adds	r0, r6, #0
   1c5a4:	1c39      	adds	r1, r7, #0
   1c5a6:	4652      	mov	r2, sl
   1c5a8:	2301      	movs	r3, #1
   1c5aa:	47c0      	blx	r8
   1c5ac:	3001      	adds	r0, #1
   1c5ae:	d1f1      	bne.n	1c594 <_printf_common+0x5c>
   1c5b0:	2001      	movs	r0, #1
   1c5b2:	4240      	negs	r0, r0
   1c5b4:	bc1c      	pop	{r2, r3, r4}
   1c5b6:	4690      	mov	r8, r2
   1c5b8:	4699      	mov	r9, r3
   1c5ba:	46a2      	mov	sl, r4
   1c5bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c5be:	6822      	ldr	r2, [r4, #0]
   1c5c0:	2343      	movs	r3, #67	; 0x43
   1c5c2:	5ce3      	ldrb	r3, [r4, r3]
   1c5c4:	1e59      	subs	r1, r3, #1
   1c5c6:	418b      	sbcs	r3, r1
   1c5c8:	0691      	lsls	r1, r2, #26
   1c5ca:	d426      	bmi.n	1c61a <_printf_common+0xe2>
   1c5cc:	1c22      	adds	r2, r4, #0
   1c5ce:	1c30      	adds	r0, r6, #0
   1c5d0:	1c39      	adds	r1, r7, #0
   1c5d2:	3243      	adds	r2, #67	; 0x43
   1c5d4:	47c0      	blx	r8
   1c5d6:	3001      	adds	r0, #1
   1c5d8:	d0ea      	beq.n	1c5b0 <_printf_common+0x78>
   1c5da:	464b      	mov	r3, r9
   1c5dc:	6820      	ldr	r0, [r4, #0]
   1c5de:	681a      	ldr	r2, [r3, #0]
   1c5e0:	2306      	movs	r3, #6
   1c5e2:	4003      	ands	r3, r0
   1c5e4:	2000      	movs	r0, #0
   1c5e6:	68e1      	ldr	r1, [r4, #12]
   1c5e8:	4681      	mov	r9, r0
   1c5ea:	2b04      	cmp	r3, #4
   1c5ec:	d026      	beq.n	1c63c <_printf_common+0x104>
   1c5ee:	68a2      	ldr	r2, [r4, #8]
   1c5f0:	6923      	ldr	r3, [r4, #16]
   1c5f2:	429a      	cmp	r2, r3
   1c5f4:	dc1d      	bgt.n	1c632 <_printf_common+0xfa>
   1c5f6:	341a      	adds	r4, #26
   1c5f8:	4649      	mov	r1, r9
   1c5fa:	46a2      	mov	sl, r4
   1c5fc:	2400      	movs	r4, #0
   1c5fe:	2900      	cmp	r1, #0
   1c600:	dc03      	bgt.n	1c60a <_printf_common+0xd2>
   1c602:	e019      	b.n	1c638 <_printf_common+0x100>
   1c604:	3401      	adds	r4, #1
   1c606:	454c      	cmp	r4, r9
   1c608:	d016      	beq.n	1c638 <_printf_common+0x100>
   1c60a:	1c30      	adds	r0, r6, #0
   1c60c:	1c39      	adds	r1, r7, #0
   1c60e:	4652      	mov	r2, sl
   1c610:	2301      	movs	r3, #1
   1c612:	47c0      	blx	r8
   1c614:	3001      	adds	r0, #1
   1c616:	d1f5      	bne.n	1c604 <_printf_common+0xcc>
   1c618:	e7ca      	b.n	1c5b0 <_printf_common+0x78>
   1c61a:	18e1      	adds	r1, r4, r3
   1c61c:	3140      	adds	r1, #64	; 0x40
   1c61e:	2030      	movs	r0, #48	; 0x30
   1c620:	70c8      	strb	r0, [r1, #3]
   1c622:	1c5a      	adds	r2, r3, #1
   1c624:	2145      	movs	r1, #69	; 0x45
   1c626:	5c61      	ldrb	r1, [r4, r1]
   1c628:	18a2      	adds	r2, r4, r2
   1c62a:	3240      	adds	r2, #64	; 0x40
   1c62c:	3302      	adds	r3, #2
   1c62e:	70d1      	strb	r1, [r2, #3]
   1c630:	e7cc      	b.n	1c5cc <_printf_common+0x94>
   1c632:	1ad3      	subs	r3, r2, r3
   1c634:	4499      	add	r9, r3
   1c636:	e7de      	b.n	1c5f6 <_printf_common+0xbe>
   1c638:	2000      	movs	r0, #0
   1c63a:	e7bb      	b.n	1c5b4 <_printf_common+0x7c>
   1c63c:	1a8a      	subs	r2, r1, r2
   1c63e:	43d3      	mvns	r3, r2
   1c640:	17db      	asrs	r3, r3, #31
   1c642:	401a      	ands	r2, r3
   1c644:	4691      	mov	r9, r2
   1c646:	e7d2      	b.n	1c5ee <_printf_common+0xb6>

0001c648 <_printf_i>:
   1c648:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c64a:	4644      	mov	r4, r8
   1c64c:	4656      	mov	r6, sl
   1c64e:	464d      	mov	r5, r9
   1c650:	465f      	mov	r7, fp
   1c652:	b4f0      	push	{r4, r5, r6, r7}
   1c654:	1c0c      	adds	r4, r1, #0
   1c656:	469a      	mov	sl, r3
   1c658:	7e23      	ldrb	r3, [r4, #24]
   1c65a:	b087      	sub	sp, #28
   1c65c:	3143      	adds	r1, #67	; 0x43
   1c65e:	4691      	mov	r9, r2
   1c660:	4680      	mov	r8, r0
   1c662:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1c664:	9103      	str	r1, [sp, #12]
   1c666:	2b6e      	cmp	r3, #110	; 0x6e
   1c668:	d054      	beq.n	1c714 <_printf_i+0xcc>
   1c66a:	d815      	bhi.n	1c698 <_printf_i+0x50>
   1c66c:	2b63      	cmp	r3, #99	; 0x63
   1c66e:	d100      	bne.n	1c672 <_printf_i+0x2a>
   1c670:	e0d0      	b.n	1c814 <_printf_i+0x1cc>
   1c672:	d900      	bls.n	1c676 <_printf_i+0x2e>
   1c674:	e0ba      	b.n	1c7ec <_printf_i+0x1a4>
   1c676:	2b00      	cmp	r3, #0
   1c678:	d059      	beq.n	1c72e <_printf_i+0xe6>
   1c67a:	2b58      	cmp	r3, #88	; 0x58
   1c67c:	d000      	beq.n	1c680 <_printf_i+0x38>
   1c67e:	e0ed      	b.n	1c85c <_printf_i+0x214>
   1c680:	2145      	movs	r1, #69	; 0x45
   1c682:	5463      	strb	r3, [r4, r1]
   1c684:	498c      	ldr	r1, [pc, #560]	; (1c8b8 <_printf_i+0x270>)
   1c686:	6823      	ldr	r3, [r4, #0]
   1c688:	468b      	mov	fp, r1
   1c68a:	0619      	lsls	r1, r3, #24
   1c68c:	d51a      	bpl.n	1c6c4 <_printf_i+0x7c>
   1c68e:	6811      	ldr	r1, [r2, #0]
   1c690:	1d08      	adds	r0, r1, #4
   1c692:	6010      	str	r0, [r2, #0]
   1c694:	680d      	ldr	r5, [r1, #0]
   1c696:	e01b      	b.n	1c6d0 <_printf_i+0x88>
   1c698:	2b73      	cmp	r3, #115	; 0x73
   1c69a:	d100      	bne.n	1c69e <_printf_i+0x56>
   1c69c:	e0cf      	b.n	1c83e <_printf_i+0x1f6>
   1c69e:	d900      	bls.n	1c6a2 <_printf_i+0x5a>
   1c6a0:	e07f      	b.n	1c7a2 <_printf_i+0x15a>
   1c6a2:	2b6f      	cmp	r3, #111	; 0x6f
   1c6a4:	d100      	bne.n	1c6a8 <_printf_i+0x60>
   1c6a6:	e0e0      	b.n	1c86a <_printf_i+0x222>
   1c6a8:	2b70      	cmp	r3, #112	; 0x70
   1c6aa:	d000      	beq.n	1c6ae <_printf_i+0x66>
   1c6ac:	e0d6      	b.n	1c85c <_printf_i+0x214>
   1c6ae:	6821      	ldr	r1, [r4, #0]
   1c6b0:	2320      	movs	r3, #32
   1c6b2:	430b      	orrs	r3, r1
   1c6b4:	6023      	str	r3, [r4, #0]
   1c6b6:	2145      	movs	r1, #69	; 0x45
   1c6b8:	2078      	movs	r0, #120	; 0x78
   1c6ba:	5460      	strb	r0, [r4, r1]
   1c6bc:	497f      	ldr	r1, [pc, #508]	; (1c8bc <_printf_i+0x274>)
   1c6be:	468b      	mov	fp, r1
   1c6c0:	0619      	lsls	r1, r3, #24
   1c6c2:	d4e4      	bmi.n	1c68e <_printf_i+0x46>
   1c6c4:	0659      	lsls	r1, r3, #25
   1c6c6:	d5e2      	bpl.n	1c68e <_printf_i+0x46>
   1c6c8:	6811      	ldr	r1, [r2, #0]
   1c6ca:	1d08      	adds	r0, r1, #4
   1c6cc:	880d      	ldrh	r5, [r1, #0]
   1c6ce:	6010      	str	r0, [r2, #0]
   1c6d0:	07da      	lsls	r2, r3, #31
   1c6d2:	d502      	bpl.n	1c6da <_printf_i+0x92>
   1c6d4:	2220      	movs	r2, #32
   1c6d6:	4313      	orrs	r3, r2
   1c6d8:	6023      	str	r3, [r4, #0]
   1c6da:	2710      	movs	r7, #16
   1c6dc:	2d00      	cmp	r5, #0
   1c6de:	d103      	bne.n	1c6e8 <_printf_i+0xa0>
   1c6e0:	6821      	ldr	r1, [r4, #0]
   1c6e2:	2320      	movs	r3, #32
   1c6e4:	4399      	bics	r1, r3
   1c6e6:	6021      	str	r1, [r4, #0]
   1c6e8:	2200      	movs	r2, #0
   1c6ea:	2343      	movs	r3, #67	; 0x43
   1c6ec:	54e2      	strb	r2, [r4, r3]
   1c6ee:	6863      	ldr	r3, [r4, #4]
   1c6f0:	60a3      	str	r3, [r4, #8]
   1c6f2:	2b00      	cmp	r3, #0
   1c6f4:	db5b      	blt.n	1c7ae <_printf_i+0x166>
   1c6f6:	6821      	ldr	r1, [r4, #0]
   1c6f8:	2204      	movs	r2, #4
   1c6fa:	4391      	bics	r1, r2
   1c6fc:	6021      	str	r1, [r4, #0]
   1c6fe:	2d00      	cmp	r5, #0
   1c700:	d158      	bne.n	1c7b4 <_printf_i+0x16c>
   1c702:	9e03      	ldr	r6, [sp, #12]
   1c704:	2b00      	cmp	r3, #0
   1c706:	d154      	bne.n	1c7b2 <_printf_i+0x16a>
   1c708:	2f08      	cmp	r7, #8
   1c70a:	d064      	beq.n	1c7d6 <_printf_i+0x18e>
   1c70c:	9903      	ldr	r1, [sp, #12]
   1c70e:	1b8b      	subs	r3, r1, r6
   1c710:	6123      	str	r3, [r4, #16]
   1c712:	e00f      	b.n	1c734 <_printf_i+0xec>
   1c714:	6823      	ldr	r3, [r4, #0]
   1c716:	0619      	lsls	r1, r3, #24
   1c718:	d500      	bpl.n	1c71c <_printf_i+0xd4>
   1c71a:	e089      	b.n	1c830 <_printf_i+0x1e8>
   1c71c:	0659      	lsls	r1, r3, #25
   1c71e:	d400      	bmi.n	1c722 <_printf_i+0xda>
   1c720:	e086      	b.n	1c830 <_printf_i+0x1e8>
   1c722:	6813      	ldr	r3, [r2, #0]
   1c724:	1d19      	adds	r1, r3, #4
   1c726:	6011      	str	r1, [r2, #0]
   1c728:	681b      	ldr	r3, [r3, #0]
   1c72a:	6962      	ldr	r2, [r4, #20]
   1c72c:	801a      	strh	r2, [r3, #0]
   1c72e:	2300      	movs	r3, #0
   1c730:	9e03      	ldr	r6, [sp, #12]
   1c732:	6123      	str	r3, [r4, #16]
   1c734:	4653      	mov	r3, sl
   1c736:	9300      	str	r3, [sp, #0]
   1c738:	4640      	mov	r0, r8
   1c73a:	1c21      	adds	r1, r4, #0
   1c73c:	aa05      	add	r2, sp, #20
   1c73e:	464b      	mov	r3, r9
   1c740:	f7ff fefa 	bl	1c538 <_printf_common>
   1c744:	3001      	adds	r0, #1
   1c746:	d01f      	beq.n	1c788 <_printf_i+0x140>
   1c748:	4640      	mov	r0, r8
   1c74a:	4649      	mov	r1, r9
   1c74c:	1c32      	adds	r2, r6, #0
   1c74e:	6923      	ldr	r3, [r4, #16]
   1c750:	47d0      	blx	sl
   1c752:	3001      	adds	r0, #1
   1c754:	d018      	beq.n	1c788 <_printf_i+0x140>
   1c756:	6821      	ldr	r1, [r4, #0]
   1c758:	68e0      	ldr	r0, [r4, #12]
   1c75a:	9b05      	ldr	r3, [sp, #20]
   1c75c:	0789      	lsls	r1, r1, #30
   1c75e:	d51c      	bpl.n	1c79a <_printf_i+0x152>
   1c760:	1ac2      	subs	r2, r0, r3
   1c762:	2a00      	cmp	r2, #0
   1c764:	dd19      	ble.n	1c79a <_printf_i+0x152>
   1c766:	1c26      	adds	r6, r4, #0
   1c768:	3619      	adds	r6, #25
   1c76a:	2500      	movs	r5, #0
   1c76c:	e005      	b.n	1c77a <_printf_i+0x132>
   1c76e:	68e0      	ldr	r0, [r4, #12]
   1c770:	9b05      	ldr	r3, [sp, #20]
   1c772:	3501      	adds	r5, #1
   1c774:	1ac2      	subs	r2, r0, r3
   1c776:	42aa      	cmp	r2, r5
   1c778:	dd0f      	ble.n	1c79a <_printf_i+0x152>
   1c77a:	4640      	mov	r0, r8
   1c77c:	4649      	mov	r1, r9
   1c77e:	1c32      	adds	r2, r6, #0
   1c780:	2301      	movs	r3, #1
   1c782:	47d0      	blx	sl
   1c784:	3001      	adds	r0, #1
   1c786:	d1f2      	bne.n	1c76e <_printf_i+0x126>
   1c788:	2001      	movs	r0, #1
   1c78a:	4240      	negs	r0, r0
   1c78c:	b007      	add	sp, #28
   1c78e:	bc3c      	pop	{r2, r3, r4, r5}
   1c790:	4690      	mov	r8, r2
   1c792:	4699      	mov	r9, r3
   1c794:	46a2      	mov	sl, r4
   1c796:	46ab      	mov	fp, r5
   1c798:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c79a:	4298      	cmp	r0, r3
   1c79c:	daf6      	bge.n	1c78c <_printf_i+0x144>
   1c79e:	1c18      	adds	r0, r3, #0
   1c7a0:	e7f4      	b.n	1c78c <_printf_i+0x144>
   1c7a2:	2b75      	cmp	r3, #117	; 0x75
   1c7a4:	d061      	beq.n	1c86a <_printf_i+0x222>
   1c7a6:	2b78      	cmp	r3, #120	; 0x78
   1c7a8:	d158      	bne.n	1c85c <_printf_i+0x214>
   1c7aa:	6823      	ldr	r3, [r4, #0]
   1c7ac:	e783      	b.n	1c6b6 <_printf_i+0x6e>
   1c7ae:	2d00      	cmp	r5, #0
   1c7b0:	d100      	bne.n	1c7b4 <_printf_i+0x16c>
   1c7b2:	2500      	movs	r5, #0
   1c7b4:	9e03      	ldr	r6, [sp, #12]
   1c7b6:	1c28      	adds	r0, r5, #0
   1c7b8:	1c39      	adds	r1, r7, #0
   1c7ba:	f002 fe7b 	bl	1f4b4 <__aeabi_uidivmod>
   1c7be:	465a      	mov	r2, fp
   1c7c0:	5c53      	ldrb	r3, [r2, r1]
   1c7c2:	3e01      	subs	r6, #1
   1c7c4:	1c28      	adds	r0, r5, #0
   1c7c6:	7033      	strb	r3, [r6, #0]
   1c7c8:	1c39      	adds	r1, r7, #0
   1c7ca:	f002 fe2f 	bl	1f42c <__aeabi_uidiv>
   1c7ce:	1e05      	subs	r5, r0, #0
   1c7d0:	d1f1      	bne.n	1c7b6 <_printf_i+0x16e>
   1c7d2:	2f08      	cmp	r7, #8
   1c7d4:	d19a      	bne.n	1c70c <_printf_i+0xc4>
   1c7d6:	6823      	ldr	r3, [r4, #0]
   1c7d8:	07db      	lsls	r3, r3, #31
   1c7da:	d597      	bpl.n	1c70c <_printf_i+0xc4>
   1c7dc:	6861      	ldr	r1, [r4, #4]
   1c7de:	6922      	ldr	r2, [r4, #16]
   1c7e0:	4291      	cmp	r1, r2
   1c7e2:	dc93      	bgt.n	1c70c <_printf_i+0xc4>
   1c7e4:	3e01      	subs	r6, #1
   1c7e6:	2330      	movs	r3, #48	; 0x30
   1c7e8:	7033      	strb	r3, [r6, #0]
   1c7ea:	e78f      	b.n	1c70c <_printf_i+0xc4>
   1c7ec:	2b64      	cmp	r3, #100	; 0x64
   1c7ee:	d001      	beq.n	1c7f4 <_printf_i+0x1ac>
   1c7f0:	2b69      	cmp	r3, #105	; 0x69
   1c7f2:	d133      	bne.n	1c85c <_printf_i+0x214>
   1c7f4:	6823      	ldr	r3, [r4, #0]
   1c7f6:	0619      	lsls	r1, r3, #24
   1c7f8:	d401      	bmi.n	1c7fe <_printf_i+0x1b6>
   1c7fa:	0659      	lsls	r1, r3, #25
   1c7fc:	d44c      	bmi.n	1c898 <_printf_i+0x250>
   1c7fe:	6813      	ldr	r3, [r2, #0]
   1c800:	1d19      	adds	r1, r3, #4
   1c802:	681b      	ldr	r3, [r3, #0]
   1c804:	6011      	str	r1, [r2, #0]
   1c806:	1c1d      	adds	r5, r3, #0
   1c808:	2b00      	cmp	r3, #0
   1c80a:	db4c      	blt.n	1c8a6 <_printf_i+0x25e>
   1c80c:	4b2a      	ldr	r3, [pc, #168]	; (1c8b8 <_printf_i+0x270>)
   1c80e:	270a      	movs	r7, #10
   1c810:	469b      	mov	fp, r3
   1c812:	e76c      	b.n	1c6ee <_printf_i+0xa6>
   1c814:	6813      	ldr	r3, [r2, #0]
   1c816:	1c26      	adds	r6, r4, #0
   1c818:	1d19      	adds	r1, r3, #4
   1c81a:	6011      	str	r1, [r2, #0]
   1c81c:	681a      	ldr	r2, [r3, #0]
   1c81e:	2342      	movs	r3, #66	; 0x42
   1c820:	54e2      	strb	r2, [r4, r3]
   1c822:	2301      	movs	r3, #1
   1c824:	3642      	adds	r6, #66	; 0x42
   1c826:	6123      	str	r3, [r4, #16]
   1c828:	2200      	movs	r2, #0
   1c82a:	2343      	movs	r3, #67	; 0x43
   1c82c:	54e2      	strb	r2, [r4, r3]
   1c82e:	e781      	b.n	1c734 <_printf_i+0xec>
   1c830:	6813      	ldr	r3, [r2, #0]
   1c832:	1d19      	adds	r1, r3, #4
   1c834:	6011      	str	r1, [r2, #0]
   1c836:	681b      	ldr	r3, [r3, #0]
   1c838:	6962      	ldr	r2, [r4, #20]
   1c83a:	601a      	str	r2, [r3, #0]
   1c83c:	e777      	b.n	1c72e <_printf_i+0xe6>
   1c83e:	6813      	ldr	r3, [r2, #0]
   1c840:	1d19      	adds	r1, r3, #4
   1c842:	6011      	str	r1, [r2, #0]
   1c844:	681e      	ldr	r6, [r3, #0]
   1c846:	1c30      	adds	r0, r6, #0
   1c848:	f7ff f968 	bl	1bb1c <strlen>
   1c84c:	6863      	ldr	r3, [r4, #4]
   1c84e:	6120      	str	r0, [r4, #16]
   1c850:	4298      	cmp	r0, r3
   1c852:	d901      	bls.n	1c858 <_printf_i+0x210>
   1c854:	6123      	str	r3, [r4, #16]
   1c856:	1c18      	adds	r0, r3, #0
   1c858:	6060      	str	r0, [r4, #4]
   1c85a:	e7e5      	b.n	1c828 <_printf_i+0x1e0>
   1c85c:	2242      	movs	r2, #66	; 0x42
   1c85e:	54a3      	strb	r3, [r4, r2]
   1c860:	1c26      	adds	r6, r4, #0
   1c862:	2301      	movs	r3, #1
   1c864:	3642      	adds	r6, #66	; 0x42
   1c866:	6123      	str	r3, [r4, #16]
   1c868:	e7de      	b.n	1c828 <_printf_i+0x1e0>
   1c86a:	6823      	ldr	r3, [r4, #0]
   1c86c:	0619      	lsls	r1, r3, #24
   1c86e:	d401      	bmi.n	1c874 <_printf_i+0x22c>
   1c870:	0659      	lsls	r1, r3, #25
   1c872:	d40c      	bmi.n	1c88e <_printf_i+0x246>
   1c874:	6813      	ldr	r3, [r2, #0]
   1c876:	1d19      	adds	r1, r3, #4
   1c878:	681d      	ldr	r5, [r3, #0]
   1c87a:	6011      	str	r1, [r2, #0]
   1c87c:	4a0e      	ldr	r2, [pc, #56]	; (1c8b8 <_printf_i+0x270>)
   1c87e:	7e23      	ldrb	r3, [r4, #24]
   1c880:	4693      	mov	fp, r2
   1c882:	2708      	movs	r7, #8
   1c884:	2b6f      	cmp	r3, #111	; 0x6f
   1c886:	d100      	bne.n	1c88a <_printf_i+0x242>
   1c888:	e72e      	b.n	1c6e8 <_printf_i+0xa0>
   1c88a:	270a      	movs	r7, #10
   1c88c:	e72c      	b.n	1c6e8 <_printf_i+0xa0>
   1c88e:	6813      	ldr	r3, [r2, #0]
   1c890:	1d19      	adds	r1, r3, #4
   1c892:	6011      	str	r1, [r2, #0]
   1c894:	881d      	ldrh	r5, [r3, #0]
   1c896:	e7f1      	b.n	1c87c <_printf_i+0x234>
   1c898:	6813      	ldr	r3, [r2, #0]
   1c89a:	1d19      	adds	r1, r3, #4
   1c89c:	6011      	str	r1, [r2, #0]
   1c89e:	2200      	movs	r2, #0
   1c8a0:	5e9d      	ldrsh	r5, [r3, r2]
   1c8a2:	1c2b      	adds	r3, r5, #0
   1c8a4:	e7b0      	b.n	1c808 <_printf_i+0x1c0>
   1c8a6:	2343      	movs	r3, #67	; 0x43
   1c8a8:	222d      	movs	r2, #45	; 0x2d
   1c8aa:	54e2      	strb	r2, [r4, r3]
   1c8ac:	4b02      	ldr	r3, [pc, #8]	; (1c8b8 <_printf_i+0x270>)
   1c8ae:	426d      	negs	r5, r5
   1c8b0:	469b      	mov	fp, r3
   1c8b2:	270a      	movs	r7, #10
   1c8b4:	e71b      	b.n	1c6ee <_printf_i+0xa6>
   1c8b6:	46c0      	nop			; (mov r8, r8)
   1c8b8:	00026fbc 	.word	0x00026fbc
   1c8bc:	00026fd0 	.word	0x00026fd0

0001c8c0 <__sfputc_r>:
   1c8c0:	6893      	ldr	r3, [r2, #8]
   1c8c2:	b510      	push	{r4, lr}
   1c8c4:	3b01      	subs	r3, #1
   1c8c6:	6093      	str	r3, [r2, #8]
   1c8c8:	2b00      	cmp	r3, #0
   1c8ca:	db06      	blt.n	1c8da <__sfputc_r+0x1a>
   1c8cc:	6813      	ldr	r3, [r2, #0]
   1c8ce:	1c58      	adds	r0, r3, #1
   1c8d0:	6010      	str	r0, [r2, #0]
   1c8d2:	20ff      	movs	r0, #255	; 0xff
   1c8d4:	7019      	strb	r1, [r3, #0]
   1c8d6:	4008      	ands	r0, r1
   1c8d8:	bd10      	pop	{r4, pc}
   1c8da:	6994      	ldr	r4, [r2, #24]
   1c8dc:	42a3      	cmp	r3, r4
   1c8de:	db02      	blt.n	1c8e6 <__sfputc_r+0x26>
   1c8e0:	b2cb      	uxtb	r3, r1
   1c8e2:	2b0a      	cmp	r3, #10
   1c8e4:	d1f2      	bne.n	1c8cc <__sfputc_r+0xc>
   1c8e6:	f000 f983 	bl	1cbf0 <__swbuf_r>
   1c8ea:	e7f5      	b.n	1c8d8 <__sfputc_r+0x18>

0001c8ec <__sfputs_r>:
   1c8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c8ee:	464f      	mov	r7, r9
   1c8f0:	4646      	mov	r6, r8
   1c8f2:	b4c0      	push	{r6, r7}
   1c8f4:	4681      	mov	r9, r0
   1c8f6:	4688      	mov	r8, r1
   1c8f8:	1c17      	adds	r7, r2, #0
   1c8fa:	1c1e      	adds	r6, r3, #0
   1c8fc:	2500      	movs	r5, #0
   1c8fe:	2400      	movs	r4, #0
   1c900:	2b00      	cmp	r3, #0
   1c902:	d104      	bne.n	1c90e <__sfputs_r+0x22>
   1c904:	e00e      	b.n	1c924 <__sfputs_r+0x38>
   1c906:	3401      	adds	r4, #1
   1c908:	1e25      	subs	r5, r4, #0
   1c90a:	42b5      	cmp	r5, r6
   1c90c:	d00a      	beq.n	1c924 <__sfputs_r+0x38>
   1c90e:	5d79      	ldrb	r1, [r7, r5]
   1c910:	4648      	mov	r0, r9
   1c912:	4642      	mov	r2, r8
   1c914:	f7ff ffd4 	bl	1c8c0 <__sfputc_r>
   1c918:	1c43      	adds	r3, r0, #1
   1c91a:	d1f4      	bne.n	1c906 <__sfputs_r+0x1a>
   1c91c:	bc0c      	pop	{r2, r3}
   1c91e:	4690      	mov	r8, r2
   1c920:	4699      	mov	r9, r3
   1c922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c924:	2000      	movs	r0, #0
   1c926:	e7f9      	b.n	1c91c <__sfputs_r+0x30>

0001c928 <__sprint_r>:
   1c928:	6893      	ldr	r3, [r2, #8]
   1c92a:	b510      	push	{r4, lr}
   1c92c:	1c14      	adds	r4, r2, #0
   1c92e:	2b00      	cmp	r3, #0
   1c930:	d102      	bne.n	1c938 <__sprint_r+0x10>
   1c932:	6053      	str	r3, [r2, #4]
   1c934:	2000      	movs	r0, #0
   1c936:	bd10      	pop	{r4, pc}
   1c938:	f001 fcb4 	bl	1e2a4 <__sfvwrite_r>
   1c93c:	2300      	movs	r3, #0
   1c93e:	60a3      	str	r3, [r4, #8]
   1c940:	6063      	str	r3, [r4, #4]
   1c942:	e7f8      	b.n	1c936 <__sprint_r+0xe>

0001c944 <_vfiprintf_r>:
   1c944:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c946:	465f      	mov	r7, fp
   1c948:	4656      	mov	r6, sl
   1c94a:	464d      	mov	r5, r9
   1c94c:	4644      	mov	r4, r8
   1c94e:	b4f0      	push	{r4, r5, r6, r7}
   1c950:	b09f      	sub	sp, #124	; 0x7c
   1c952:	9004      	str	r0, [sp, #16]
   1c954:	468b      	mov	fp, r1
   1c956:	1c17      	adds	r7, r2, #0
   1c958:	9305      	str	r3, [sp, #20]
   1c95a:	2800      	cmp	r0, #0
   1c95c:	d003      	beq.n	1c966 <_vfiprintf_r+0x22>
   1c95e:	6982      	ldr	r2, [r0, #24]
   1c960:	2a00      	cmp	r2, #0
   1c962:	d100      	bne.n	1c966 <_vfiprintf_r+0x22>
   1c964:	e109      	b.n	1cb7a <_vfiprintf_r+0x236>
   1c966:	4b93      	ldr	r3, [pc, #588]	; (1cbb4 <_vfiprintf_r+0x270>)
   1c968:	459b      	cmp	fp, r3
   1c96a:	d100      	bne.n	1c96e <_vfiprintf_r+0x2a>
   1c96c:	e10b      	b.n	1cb86 <_vfiprintf_r+0x242>
   1c96e:	4b92      	ldr	r3, [pc, #584]	; (1cbb8 <_vfiprintf_r+0x274>)
   1c970:	459b      	cmp	fp, r3
   1c972:	d100      	bne.n	1c976 <_vfiprintf_r+0x32>
   1c974:	e10b      	b.n	1cb8e <_vfiprintf_r+0x24a>
   1c976:	4b91      	ldr	r3, [pc, #580]	; (1cbbc <_vfiprintf_r+0x278>)
   1c978:	459b      	cmp	fp, r3
   1c97a:	d100      	bne.n	1c97e <_vfiprintf_r+0x3a>
   1c97c:	e10b      	b.n	1cb96 <_vfiprintf_r+0x252>
   1c97e:	4659      	mov	r1, fp
   1c980:	898b      	ldrh	r3, [r1, #12]
   1c982:	071a      	lsls	r2, r3, #28
   1c984:	d400      	bmi.n	1c988 <_vfiprintf_r+0x44>
   1c986:	e0ec      	b.n	1cb62 <_vfiprintf_r+0x21e>
   1c988:	690b      	ldr	r3, [r1, #16]
   1c98a:	2b00      	cmp	r3, #0
   1c98c:	d100      	bne.n	1c990 <_vfiprintf_r+0x4c>
   1c98e:	e0e8      	b.n	1cb62 <_vfiprintf_r+0x21e>
   1c990:	ad06      	add	r5, sp, #24
   1c992:	2300      	movs	r3, #0
   1c994:	616b      	str	r3, [r5, #20]
   1c996:	498a      	ldr	r1, [pc, #552]	; (1cbc0 <_vfiprintf_r+0x27c>)
   1c998:	2320      	movs	r3, #32
   1c99a:	766b      	strb	r3, [r5, #25]
   1c99c:	4e89      	ldr	r6, [pc, #548]	; (1cbc4 <_vfiprintf_r+0x280>)
   1c99e:	2330      	movs	r3, #48	; 0x30
   1c9a0:	76ab      	strb	r3, [r5, #26]
   1c9a2:	4689      	mov	r9, r1
   1c9a4:	783b      	ldrb	r3, [r7, #0]
   1c9a6:	1c3c      	adds	r4, r7, #0
   1c9a8:	2b00      	cmp	r3, #0
   1c9aa:	d00d      	beq.n	1c9c8 <_vfiprintf_r+0x84>
   1c9ac:	2b25      	cmp	r3, #37	; 0x25
   1c9ae:	d102      	bne.n	1c9b6 <_vfiprintf_r+0x72>
   1c9b0:	e00a      	b.n	1c9c8 <_vfiprintf_r+0x84>
   1c9b2:	2b25      	cmp	r3, #37	; 0x25
   1c9b4:	d070      	beq.n	1ca98 <_vfiprintf_r+0x154>
   1c9b6:	3401      	adds	r4, #1
   1c9b8:	7823      	ldrb	r3, [r4, #0]
   1c9ba:	2b00      	cmp	r3, #0
   1c9bc:	d1f9      	bne.n	1c9b2 <_vfiprintf_r+0x6e>
   1c9be:	1be2      	subs	r2, r4, r7
   1c9c0:	4690      	mov	r8, r2
   1c9c2:	4641      	mov	r1, r8
   1c9c4:	2900      	cmp	r1, #0
   1c9c6:	d16c      	bne.n	1caa2 <_vfiprintf_r+0x15e>
   1c9c8:	7823      	ldrb	r3, [r4, #0]
   1c9ca:	2b00      	cmp	r3, #0
   1c9cc:	d078      	beq.n	1cac0 <_vfiprintf_r+0x17c>
   1c9ce:	2201      	movs	r2, #1
   1c9d0:	4252      	negs	r2, r2
   1c9d2:	2300      	movs	r3, #0
   1c9d4:	606a      	str	r2, [r5, #4]
   1c9d6:	2243      	movs	r2, #67	; 0x43
   1c9d8:	3401      	adds	r4, #1
   1c9da:	602b      	str	r3, [r5, #0]
   1c9dc:	60eb      	str	r3, [r5, #12]
   1c9de:	60ab      	str	r3, [r5, #8]
   1c9e0:	54ab      	strb	r3, [r5, r2]
   1c9e2:	65ab      	str	r3, [r5, #88]	; 0x58
   1c9e4:	2701      	movs	r7, #1
   1c9e6:	e007      	b.n	1c9f8 <_vfiprintf_r+0xb4>
   1c9e8:	1b80      	subs	r0, r0, r6
   1c9ea:	1c3b      	adds	r3, r7, #0
   1c9ec:	6829      	ldr	r1, [r5, #0]
   1c9ee:	4083      	lsls	r3, r0
   1c9f0:	1c18      	adds	r0, r3, #0
   1c9f2:	4308      	orrs	r0, r1
   1c9f4:	6028      	str	r0, [r5, #0]
   1c9f6:	3401      	adds	r4, #1
   1c9f8:	7821      	ldrb	r1, [r4, #0]
   1c9fa:	1c30      	adds	r0, r6, #0
   1c9fc:	2205      	movs	r2, #5
   1c9fe:	f001 fec3 	bl	1e788 <memchr>
   1ca02:	2800      	cmp	r0, #0
   1ca04:	d1f0      	bne.n	1c9e8 <_vfiprintf_r+0xa4>
   1ca06:	682b      	ldr	r3, [r5, #0]
   1ca08:	1c22      	adds	r2, r4, #0
   1ca0a:	06d9      	lsls	r1, r3, #27
   1ca0c:	d502      	bpl.n	1ca14 <_vfiprintf_r+0xd0>
   1ca0e:	2020      	movs	r0, #32
   1ca10:	2143      	movs	r1, #67	; 0x43
   1ca12:	5468      	strb	r0, [r5, r1]
   1ca14:	0719      	lsls	r1, r3, #28
   1ca16:	d502      	bpl.n	1ca1e <_vfiprintf_r+0xda>
   1ca18:	202b      	movs	r0, #43	; 0x2b
   1ca1a:	2143      	movs	r1, #67	; 0x43
   1ca1c:	5468      	strb	r0, [r5, r1]
   1ca1e:	7821      	ldrb	r1, [r4, #0]
   1ca20:	292a      	cmp	r1, #42	; 0x2a
   1ca22:	d100      	bne.n	1ca26 <_vfiprintf_r+0xe2>
   1ca24:	e06f      	b.n	1cb06 <_vfiprintf_r+0x1c2>
   1ca26:	1c0b      	adds	r3, r1, #0
   1ca28:	3b30      	subs	r3, #48	; 0x30
   1ca2a:	2b09      	cmp	r3, #9
   1ca2c:	d80b      	bhi.n	1ca46 <_vfiprintf_r+0x102>
   1ca2e:	68ea      	ldr	r2, [r5, #12]
   1ca30:	0091      	lsls	r1, r2, #2
   1ca32:	3401      	adds	r4, #1
   1ca34:	188a      	adds	r2, r1, r2
   1ca36:	7821      	ldrb	r1, [r4, #0]
   1ca38:	0052      	lsls	r2, r2, #1
   1ca3a:	189a      	adds	r2, r3, r2
   1ca3c:	1c0b      	adds	r3, r1, #0
   1ca3e:	3b30      	subs	r3, #48	; 0x30
   1ca40:	2b09      	cmp	r3, #9
   1ca42:	d9f5      	bls.n	1ca30 <_vfiprintf_r+0xec>
   1ca44:	60ea      	str	r2, [r5, #12]
   1ca46:	292e      	cmp	r1, #46	; 0x2e
   1ca48:	d046      	beq.n	1cad8 <_vfiprintf_r+0x194>
   1ca4a:	4648      	mov	r0, r9
   1ca4c:	2203      	movs	r2, #3
   1ca4e:	f001 fe9b 	bl	1e788 <memchr>
   1ca52:	2800      	cmp	r0, #0
   1ca54:	d008      	beq.n	1ca68 <_vfiprintf_r+0x124>
   1ca56:	464a      	mov	r2, r9
   1ca58:	1a80      	subs	r0, r0, r2
   1ca5a:	2340      	movs	r3, #64	; 0x40
   1ca5c:	4083      	lsls	r3, r0
   1ca5e:	1c18      	adds	r0, r3, #0
   1ca60:	682b      	ldr	r3, [r5, #0]
   1ca62:	3401      	adds	r4, #1
   1ca64:	4318      	orrs	r0, r3
   1ca66:	6028      	str	r0, [r5, #0]
   1ca68:	7821      	ldrb	r1, [r4, #0]
   1ca6a:	4857      	ldr	r0, [pc, #348]	; (1cbc8 <_vfiprintf_r+0x284>)
   1ca6c:	2206      	movs	r2, #6
   1ca6e:	1c67      	adds	r7, r4, #1
   1ca70:	7629      	strb	r1, [r5, #24]
   1ca72:	f001 fe89 	bl	1e788 <memchr>
   1ca76:	2800      	cmp	r0, #0
   1ca78:	d060      	beq.n	1cb3c <_vfiprintf_r+0x1f8>
   1ca7a:	4b54      	ldr	r3, [pc, #336]	; (1cbcc <_vfiprintf_r+0x288>)
   1ca7c:	2b00      	cmp	r3, #0
   1ca7e:	d000      	beq.n	1ca82 <_vfiprintf_r+0x13e>
   1ca80:	e08d      	b.n	1cb9e <_vfiprintf_r+0x25a>
   1ca82:	9b05      	ldr	r3, [sp, #20]
   1ca84:	2207      	movs	r2, #7
   1ca86:	3307      	adds	r3, #7
   1ca88:	4393      	bics	r3, r2
   1ca8a:	3308      	adds	r3, #8
   1ca8c:	9305      	str	r3, [sp, #20]
   1ca8e:	696a      	ldr	r2, [r5, #20]
   1ca90:	1c13      	adds	r3, r2, #0
   1ca92:	4453      	add	r3, sl
   1ca94:	616b      	str	r3, [r5, #20]
   1ca96:	e785      	b.n	1c9a4 <_vfiprintf_r+0x60>
   1ca98:	1be3      	subs	r3, r4, r7
   1ca9a:	4698      	mov	r8, r3
   1ca9c:	4641      	mov	r1, r8
   1ca9e:	2900      	cmp	r1, #0
   1caa0:	d092      	beq.n	1c9c8 <_vfiprintf_r+0x84>
   1caa2:	9804      	ldr	r0, [sp, #16]
   1caa4:	4659      	mov	r1, fp
   1caa6:	1c3a      	adds	r2, r7, #0
   1caa8:	4643      	mov	r3, r8
   1caaa:	f7ff ff1f 	bl	1c8ec <__sfputs_r>
   1caae:	3001      	adds	r0, #1
   1cab0:	d006      	beq.n	1cac0 <_vfiprintf_r+0x17c>
   1cab2:	696a      	ldr	r2, [r5, #20]
   1cab4:	1c13      	adds	r3, r2, #0
   1cab6:	4443      	add	r3, r8
   1cab8:	616b      	str	r3, [r5, #20]
   1caba:	7823      	ldrb	r3, [r4, #0]
   1cabc:	2b00      	cmp	r3, #0
   1cabe:	d186      	bne.n	1c9ce <_vfiprintf_r+0x8a>
   1cac0:	4659      	mov	r1, fp
   1cac2:	898b      	ldrh	r3, [r1, #12]
   1cac4:	065a      	lsls	r2, r3, #25
   1cac6:	d449      	bmi.n	1cb5c <_vfiprintf_r+0x218>
   1cac8:	6968      	ldr	r0, [r5, #20]
   1caca:	b01f      	add	sp, #124	; 0x7c
   1cacc:	bc3c      	pop	{r2, r3, r4, r5}
   1cace:	4690      	mov	r8, r2
   1cad0:	4699      	mov	r9, r3
   1cad2:	46a2      	mov	sl, r4
   1cad4:	46ab      	mov	fp, r5
   1cad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cad8:	7861      	ldrb	r1, [r4, #1]
   1cada:	292a      	cmp	r1, #42	; 0x2a
   1cadc:	d01d      	beq.n	1cb1a <_vfiprintf_r+0x1d6>
   1cade:	2300      	movs	r3, #0
   1cae0:	606b      	str	r3, [r5, #4]
   1cae2:	1c0b      	adds	r3, r1, #0
   1cae4:	3b30      	subs	r3, #48	; 0x30
   1cae6:	3401      	adds	r4, #1
   1cae8:	2b09      	cmp	r3, #9
   1caea:	d8ae      	bhi.n	1ca4a <_vfiprintf_r+0x106>
   1caec:	2200      	movs	r2, #0
   1caee:	0091      	lsls	r1, r2, #2
   1caf0:	3401      	adds	r4, #1
   1caf2:	188a      	adds	r2, r1, r2
   1caf4:	7821      	ldrb	r1, [r4, #0]
   1caf6:	0052      	lsls	r2, r2, #1
   1caf8:	189a      	adds	r2, r3, r2
   1cafa:	1c0b      	adds	r3, r1, #0
   1cafc:	3b30      	subs	r3, #48	; 0x30
   1cafe:	2b09      	cmp	r3, #9
   1cb00:	d9f5      	bls.n	1caee <_vfiprintf_r+0x1aa>
   1cb02:	606a      	str	r2, [r5, #4]
   1cb04:	e7a1      	b.n	1ca4a <_vfiprintf_r+0x106>
   1cb06:	9905      	ldr	r1, [sp, #20]
   1cb08:	1d08      	adds	r0, r1, #4
   1cb0a:	6809      	ldr	r1, [r1, #0]
   1cb0c:	9005      	str	r0, [sp, #20]
   1cb0e:	2900      	cmp	r1, #0
   1cb10:	db0e      	blt.n	1cb30 <_vfiprintf_r+0x1ec>
   1cb12:	60e9      	str	r1, [r5, #12]
   1cb14:	3401      	adds	r4, #1
   1cb16:	7851      	ldrb	r1, [r2, #1]
   1cb18:	e795      	b.n	1ca46 <_vfiprintf_r+0x102>
   1cb1a:	9b05      	ldr	r3, [sp, #20]
   1cb1c:	1ca0      	adds	r0, r4, #2
   1cb1e:	1d1a      	adds	r2, r3, #4
   1cb20:	681b      	ldr	r3, [r3, #0]
   1cb22:	9205      	str	r2, [sp, #20]
   1cb24:	606b      	str	r3, [r5, #4]
   1cb26:	2b00      	cmp	r3, #0
   1cb28:	db23      	blt.n	1cb72 <_vfiprintf_r+0x22e>
   1cb2a:	78a1      	ldrb	r1, [r4, #2]
   1cb2c:	1c04      	adds	r4, r0, #0
   1cb2e:	e78c      	b.n	1ca4a <_vfiprintf_r+0x106>
   1cb30:	4249      	negs	r1, r1
   1cb32:	60e9      	str	r1, [r5, #12]
   1cb34:	2102      	movs	r1, #2
   1cb36:	430b      	orrs	r3, r1
   1cb38:	602b      	str	r3, [r5, #0]
   1cb3a:	e7eb      	b.n	1cb14 <_vfiprintf_r+0x1d0>
   1cb3c:	ab05      	add	r3, sp, #20
   1cb3e:	9300      	str	r3, [sp, #0]
   1cb40:	9804      	ldr	r0, [sp, #16]
   1cb42:	1c29      	adds	r1, r5, #0
   1cb44:	465a      	mov	r2, fp
   1cb46:	4b22      	ldr	r3, [pc, #136]	; (1cbd0 <_vfiprintf_r+0x28c>)
   1cb48:	f7ff fd7e 	bl	1c648 <_printf_i>
   1cb4c:	4682      	mov	sl, r0
   1cb4e:	4651      	mov	r1, sl
   1cb50:	3101      	adds	r1, #1
   1cb52:	d19c      	bne.n	1ca8e <_vfiprintf_r+0x14a>
   1cb54:	4659      	mov	r1, fp
   1cb56:	898b      	ldrh	r3, [r1, #12]
   1cb58:	065a      	lsls	r2, r3, #25
   1cb5a:	d5b5      	bpl.n	1cac8 <_vfiprintf_r+0x184>
   1cb5c:	2001      	movs	r0, #1
   1cb5e:	4240      	negs	r0, r0
   1cb60:	e7b3      	b.n	1caca <_vfiprintf_r+0x186>
   1cb62:	9804      	ldr	r0, [sp, #16]
   1cb64:	4659      	mov	r1, fp
   1cb66:	f000 f8b5 	bl	1ccd4 <__swsetup_r>
   1cb6a:	2800      	cmp	r0, #0
   1cb6c:	d100      	bne.n	1cb70 <_vfiprintf_r+0x22c>
   1cb6e:	e70f      	b.n	1c990 <_vfiprintf_r+0x4c>
   1cb70:	e7f4      	b.n	1cb5c <_vfiprintf_r+0x218>
   1cb72:	2301      	movs	r3, #1
   1cb74:	425b      	negs	r3, r3
   1cb76:	606b      	str	r3, [r5, #4]
   1cb78:	e7d7      	b.n	1cb2a <_vfiprintf_r+0x1e6>
   1cb7a:	f001 faa1 	bl	1e0c0 <__sinit>
   1cb7e:	4b0d      	ldr	r3, [pc, #52]	; (1cbb4 <_vfiprintf_r+0x270>)
   1cb80:	459b      	cmp	fp, r3
   1cb82:	d000      	beq.n	1cb86 <_vfiprintf_r+0x242>
   1cb84:	e6f3      	b.n	1c96e <_vfiprintf_r+0x2a>
   1cb86:	9904      	ldr	r1, [sp, #16]
   1cb88:	684b      	ldr	r3, [r1, #4]
   1cb8a:	469b      	mov	fp, r3
   1cb8c:	e6f7      	b.n	1c97e <_vfiprintf_r+0x3a>
   1cb8e:	9b04      	ldr	r3, [sp, #16]
   1cb90:	689a      	ldr	r2, [r3, #8]
   1cb92:	4693      	mov	fp, r2
   1cb94:	e6f3      	b.n	1c97e <_vfiprintf_r+0x3a>
   1cb96:	9a04      	ldr	r2, [sp, #16]
   1cb98:	68d1      	ldr	r1, [r2, #12]
   1cb9a:	468b      	mov	fp, r1
   1cb9c:	e6ef      	b.n	1c97e <_vfiprintf_r+0x3a>
   1cb9e:	ab05      	add	r3, sp, #20
   1cba0:	9300      	str	r3, [sp, #0]
   1cba2:	9804      	ldr	r0, [sp, #16]
   1cba4:	1c29      	adds	r1, r5, #0
   1cba6:	465a      	mov	r2, fp
   1cba8:	4b09      	ldr	r3, [pc, #36]	; (1cbd0 <_vfiprintf_r+0x28c>)
   1cbaa:	f7ff f9d5 	bl	1bf58 <_printf_float>
   1cbae:	4682      	mov	sl, r0
   1cbb0:	e7cd      	b.n	1cb4e <_vfiprintf_r+0x20a>
   1cbb2:	46c0      	nop			; (mov r8, r8)
   1cbb4:	0002714c 	.word	0x0002714c
   1cbb8:	0002712c 	.word	0x0002712c
   1cbbc:	0002710c 	.word	0x0002710c
   1cbc0:	00026fec 	.word	0x00026fec
   1cbc4:	00026fe4 	.word	0x00026fe4
   1cbc8:	00026ff0 	.word	0x00026ff0
   1cbcc:	0001bf59 	.word	0x0001bf59
   1cbd0:	0001c8ed 	.word	0x0001c8ed

0001cbd4 <vfiprintf>:
   1cbd4:	b538      	push	{r3, r4, r5, lr}
   1cbd6:	1c13      	adds	r3, r2, #0
   1cbd8:	4a04      	ldr	r2, [pc, #16]	; (1cbec <vfiprintf+0x18>)
   1cbda:	1c05      	adds	r5, r0, #0
   1cbdc:	1c0c      	adds	r4, r1, #0
   1cbde:	6810      	ldr	r0, [r2, #0]
   1cbe0:	1c29      	adds	r1, r5, #0
   1cbe2:	1c22      	adds	r2, r4, #0
   1cbe4:	f7ff feae 	bl	1c944 <_vfiprintf_r>
   1cbe8:	bd38      	pop	{r3, r4, r5, pc}
   1cbea:	46c0      	nop			; (mov r8, r8)
   1cbec:	200001a0 	.word	0x200001a0

0001cbf0 <__swbuf_r>:
   1cbf0:	b570      	push	{r4, r5, r6, lr}
   1cbf2:	1c05      	adds	r5, r0, #0
   1cbf4:	1c0e      	adds	r6, r1, #0
   1cbf6:	1c14      	adds	r4, r2, #0
   1cbf8:	2800      	cmp	r0, #0
   1cbfa:	d002      	beq.n	1cc02 <__swbuf_r+0x12>
   1cbfc:	6981      	ldr	r1, [r0, #24]
   1cbfe:	2900      	cmp	r1, #0
   1cc00:	d047      	beq.n	1cc92 <__swbuf_r+0xa2>
   1cc02:	4b2b      	ldr	r3, [pc, #172]	; (1ccb0 <__swbuf_r+0xc0>)
   1cc04:	429c      	cmp	r4, r3
   1cc06:	d049      	beq.n	1cc9c <__swbuf_r+0xac>
   1cc08:	4b2a      	ldr	r3, [pc, #168]	; (1ccb4 <__swbuf_r+0xc4>)
   1cc0a:	429c      	cmp	r4, r3
   1cc0c:	d048      	beq.n	1cca0 <__swbuf_r+0xb0>
   1cc0e:	4b2a      	ldr	r3, [pc, #168]	; (1ccb8 <__swbuf_r+0xc8>)
   1cc10:	429c      	cmp	r4, r3
   1cc12:	d047      	beq.n	1cca4 <__swbuf_r+0xb4>
   1cc14:	69a2      	ldr	r2, [r4, #24]
   1cc16:	89a3      	ldrh	r3, [r4, #12]
   1cc18:	60a2      	str	r2, [r4, #8]
   1cc1a:	0719      	lsls	r1, r3, #28
   1cc1c:	d522      	bpl.n	1cc64 <__swbuf_r+0x74>
   1cc1e:	6922      	ldr	r2, [r4, #16]
   1cc20:	2a00      	cmp	r2, #0
   1cc22:	d01f      	beq.n	1cc64 <__swbuf_r+0x74>
   1cc24:	23ff      	movs	r3, #255	; 0xff
   1cc26:	401e      	ands	r6, r3
   1cc28:	6961      	ldr	r1, [r4, #20]
   1cc2a:	6823      	ldr	r3, [r4, #0]
   1cc2c:	1a9a      	subs	r2, r3, r2
   1cc2e:	428a      	cmp	r2, r1
   1cc30:	da26      	bge.n	1cc80 <__swbuf_r+0x90>
   1cc32:	3201      	adds	r2, #1
   1cc34:	68a1      	ldr	r1, [r4, #8]
   1cc36:	3901      	subs	r1, #1
   1cc38:	60a1      	str	r1, [r4, #8]
   1cc3a:	1c59      	adds	r1, r3, #1
   1cc3c:	6021      	str	r1, [r4, #0]
   1cc3e:	701e      	strb	r6, [r3, #0]
   1cc40:	6963      	ldr	r3, [r4, #20]
   1cc42:	4293      	cmp	r3, r2
   1cc44:	d006      	beq.n	1cc54 <__swbuf_r+0x64>
   1cc46:	89a3      	ldrh	r3, [r4, #12]
   1cc48:	1c30      	adds	r0, r6, #0
   1cc4a:	07d9      	lsls	r1, r3, #31
   1cc4c:	d501      	bpl.n	1cc52 <__swbuf_r+0x62>
   1cc4e:	2e0a      	cmp	r6, #10
   1cc50:	d000      	beq.n	1cc54 <__swbuf_r+0x64>
   1cc52:	bd70      	pop	{r4, r5, r6, pc}
   1cc54:	1c28      	adds	r0, r5, #0
   1cc56:	1c21      	adds	r1, r4, #0
   1cc58:	f001 f9ae 	bl	1dfb8 <_fflush_r>
   1cc5c:	2800      	cmp	r0, #0
   1cc5e:	d123      	bne.n	1cca8 <__swbuf_r+0xb8>
   1cc60:	1c30      	adds	r0, r6, #0
   1cc62:	e7f6      	b.n	1cc52 <__swbuf_r+0x62>
   1cc64:	1c28      	adds	r0, r5, #0
   1cc66:	1c21      	adds	r1, r4, #0
   1cc68:	f000 f834 	bl	1ccd4 <__swsetup_r>
   1cc6c:	2800      	cmp	r0, #0
   1cc6e:	d11b      	bne.n	1cca8 <__swbuf_r+0xb8>
   1cc70:	23ff      	movs	r3, #255	; 0xff
   1cc72:	6922      	ldr	r2, [r4, #16]
   1cc74:	401e      	ands	r6, r3
   1cc76:	6961      	ldr	r1, [r4, #20]
   1cc78:	6823      	ldr	r3, [r4, #0]
   1cc7a:	1a9a      	subs	r2, r3, r2
   1cc7c:	428a      	cmp	r2, r1
   1cc7e:	dbd8      	blt.n	1cc32 <__swbuf_r+0x42>
   1cc80:	1c28      	adds	r0, r5, #0
   1cc82:	1c21      	adds	r1, r4, #0
   1cc84:	f001 f998 	bl	1dfb8 <_fflush_r>
   1cc88:	2800      	cmp	r0, #0
   1cc8a:	d10d      	bne.n	1cca8 <__swbuf_r+0xb8>
   1cc8c:	6823      	ldr	r3, [r4, #0]
   1cc8e:	2201      	movs	r2, #1
   1cc90:	e7d0      	b.n	1cc34 <__swbuf_r+0x44>
   1cc92:	f001 fa15 	bl	1e0c0 <__sinit>
   1cc96:	4b06      	ldr	r3, [pc, #24]	; (1ccb0 <__swbuf_r+0xc0>)
   1cc98:	429c      	cmp	r4, r3
   1cc9a:	d1b5      	bne.n	1cc08 <__swbuf_r+0x18>
   1cc9c:	686c      	ldr	r4, [r5, #4]
   1cc9e:	e7b9      	b.n	1cc14 <__swbuf_r+0x24>
   1cca0:	68ac      	ldr	r4, [r5, #8]
   1cca2:	e7b7      	b.n	1cc14 <__swbuf_r+0x24>
   1cca4:	68ec      	ldr	r4, [r5, #12]
   1cca6:	e7b5      	b.n	1cc14 <__swbuf_r+0x24>
   1cca8:	2001      	movs	r0, #1
   1ccaa:	4240      	negs	r0, r0
   1ccac:	e7d1      	b.n	1cc52 <__swbuf_r+0x62>
   1ccae:	46c0      	nop			; (mov r8, r8)
   1ccb0:	0002714c 	.word	0x0002714c
   1ccb4:	0002712c 	.word	0x0002712c
   1ccb8:	0002710c 	.word	0x0002710c

0001ccbc <__swbuf>:
   1ccbc:	b508      	push	{r3, lr}
   1ccbe:	1c0a      	adds	r2, r1, #0
   1ccc0:	4903      	ldr	r1, [pc, #12]	; (1ccd0 <__swbuf+0x14>)
   1ccc2:	1c03      	adds	r3, r0, #0
   1ccc4:	6808      	ldr	r0, [r1, #0]
   1ccc6:	1c19      	adds	r1, r3, #0
   1ccc8:	f7ff ff92 	bl	1cbf0 <__swbuf_r>
   1cccc:	bd08      	pop	{r3, pc}
   1ccce:	46c0      	nop			; (mov r8, r8)
   1ccd0:	200001a0 	.word	0x200001a0

0001ccd4 <__swsetup_r>:
   1ccd4:	4b3b      	ldr	r3, [pc, #236]	; (1cdc4 <__swsetup_r+0xf0>)
   1ccd6:	b570      	push	{r4, r5, r6, lr}
   1ccd8:	681d      	ldr	r5, [r3, #0]
   1ccda:	1c06      	adds	r6, r0, #0
   1ccdc:	1c0c      	adds	r4, r1, #0
   1ccde:	2d00      	cmp	r5, #0
   1cce0:	d002      	beq.n	1cce8 <__swsetup_r+0x14>
   1cce2:	69a8      	ldr	r0, [r5, #24]
   1cce4:	2800      	cmp	r0, #0
   1cce6:	d044      	beq.n	1cd72 <__swsetup_r+0x9e>
   1cce8:	4b37      	ldr	r3, [pc, #220]	; (1cdc8 <__swsetup_r+0xf4>)
   1ccea:	429c      	cmp	r4, r3
   1ccec:	d047      	beq.n	1cd7e <__swsetup_r+0xaa>
   1ccee:	4b37      	ldr	r3, [pc, #220]	; (1cdcc <__swsetup_r+0xf8>)
   1ccf0:	429c      	cmp	r4, r3
   1ccf2:	d05a      	beq.n	1cdaa <__swsetup_r+0xd6>
   1ccf4:	4b36      	ldr	r3, [pc, #216]	; (1cdd0 <__swsetup_r+0xfc>)
   1ccf6:	429c      	cmp	r4, r3
   1ccf8:	d059      	beq.n	1cdae <__swsetup_r+0xda>
   1ccfa:	89a5      	ldrh	r5, [r4, #12]
   1ccfc:	b2ab      	uxth	r3, r5
   1ccfe:	0719      	lsls	r1, r3, #28
   1cd00:	d50d      	bpl.n	1cd1e <__swsetup_r+0x4a>
   1cd02:	6922      	ldr	r2, [r4, #16]
   1cd04:	2a00      	cmp	r2, #0
   1cd06:	d015      	beq.n	1cd34 <__swsetup_r+0x60>
   1cd08:	07d9      	lsls	r1, r3, #31
   1cd0a:	d521      	bpl.n	1cd50 <__swsetup_r+0x7c>
   1cd0c:	6960      	ldr	r0, [r4, #20]
   1cd0e:	2300      	movs	r3, #0
   1cd10:	60a3      	str	r3, [r4, #8]
   1cd12:	4243      	negs	r3, r0
   1cd14:	61a3      	str	r3, [r4, #24]
   1cd16:	2000      	movs	r0, #0
   1cd18:	2a00      	cmp	r2, #0
   1cd1a:	d021      	beq.n	1cd60 <__swsetup_r+0x8c>
   1cd1c:	bd70      	pop	{r4, r5, r6, pc}
   1cd1e:	06da      	lsls	r2, r3, #27
   1cd20:	d547      	bpl.n	1cdb2 <__swsetup_r+0xde>
   1cd22:	0758      	lsls	r0, r3, #29
   1cd24:	d42d      	bmi.n	1cd82 <__swsetup_r+0xae>
   1cd26:	6922      	ldr	r2, [r4, #16]
   1cd28:	2308      	movs	r3, #8
   1cd2a:	431d      	orrs	r5, r3
   1cd2c:	81a5      	strh	r5, [r4, #12]
   1cd2e:	b2ab      	uxth	r3, r5
   1cd30:	2a00      	cmp	r2, #0
   1cd32:	d1e9      	bne.n	1cd08 <__swsetup_r+0x34>
   1cd34:	20a0      	movs	r0, #160	; 0xa0
   1cd36:	0080      	lsls	r0, r0, #2
   1cd38:	2180      	movs	r1, #128	; 0x80
   1cd3a:	4018      	ands	r0, r3
   1cd3c:	0089      	lsls	r1, r1, #2
   1cd3e:	4288      	cmp	r0, r1
   1cd40:	d0e2      	beq.n	1cd08 <__swsetup_r+0x34>
   1cd42:	1c30      	adds	r0, r6, #0
   1cd44:	1c21      	adds	r1, r4, #0
   1cd46:	f001 fccd 	bl	1e6e4 <__smakebuf_r>
   1cd4a:	89a3      	ldrh	r3, [r4, #12]
   1cd4c:	6922      	ldr	r2, [r4, #16]
   1cd4e:	e7db      	b.n	1cd08 <__swsetup_r+0x34>
   1cd50:	2100      	movs	r1, #0
   1cd52:	0798      	lsls	r0, r3, #30
   1cd54:	d400      	bmi.n	1cd58 <__swsetup_r+0x84>
   1cd56:	6961      	ldr	r1, [r4, #20]
   1cd58:	60a1      	str	r1, [r4, #8]
   1cd5a:	2000      	movs	r0, #0
   1cd5c:	2a00      	cmp	r2, #0
   1cd5e:	d1dd      	bne.n	1cd1c <__swsetup_r+0x48>
   1cd60:	89a3      	ldrh	r3, [r4, #12]
   1cd62:	0619      	lsls	r1, r3, #24
   1cd64:	d5da      	bpl.n	1cd1c <__swsetup_r+0x48>
   1cd66:	2240      	movs	r2, #64	; 0x40
   1cd68:	4313      	orrs	r3, r2
   1cd6a:	2001      	movs	r0, #1
   1cd6c:	81a3      	strh	r3, [r4, #12]
   1cd6e:	4240      	negs	r0, r0
   1cd70:	e7d4      	b.n	1cd1c <__swsetup_r+0x48>
   1cd72:	1c28      	adds	r0, r5, #0
   1cd74:	f001 f9a4 	bl	1e0c0 <__sinit>
   1cd78:	4b13      	ldr	r3, [pc, #76]	; (1cdc8 <__swsetup_r+0xf4>)
   1cd7a:	429c      	cmp	r4, r3
   1cd7c:	d1b7      	bne.n	1ccee <__swsetup_r+0x1a>
   1cd7e:	686c      	ldr	r4, [r5, #4]
   1cd80:	e7bb      	b.n	1ccfa <__swsetup_r+0x26>
   1cd82:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1cd84:	2900      	cmp	r1, #0
   1cd86:	d009      	beq.n	1cd9c <__swsetup_r+0xc8>
   1cd88:	1c23      	adds	r3, r4, #0
   1cd8a:	3344      	adds	r3, #68	; 0x44
   1cd8c:	4299      	cmp	r1, r3
   1cd8e:	d003      	beq.n	1cd98 <__swsetup_r+0xc4>
   1cd90:	1c30      	adds	r0, r6, #0
   1cd92:	f7fe fb8f 	bl	1b4b4 <_free_r>
   1cd96:	89a5      	ldrh	r5, [r4, #12]
   1cd98:	2300      	movs	r3, #0
   1cd9a:	6363      	str	r3, [r4, #52]	; 0x34
   1cd9c:	2324      	movs	r3, #36	; 0x24
   1cd9e:	6922      	ldr	r2, [r4, #16]
   1cda0:	439d      	bics	r5, r3
   1cda2:	2300      	movs	r3, #0
   1cda4:	6063      	str	r3, [r4, #4]
   1cda6:	6022      	str	r2, [r4, #0]
   1cda8:	e7be      	b.n	1cd28 <__swsetup_r+0x54>
   1cdaa:	68ac      	ldr	r4, [r5, #8]
   1cdac:	e7a5      	b.n	1ccfa <__swsetup_r+0x26>
   1cdae:	68ec      	ldr	r4, [r5, #12]
   1cdb0:	e7a3      	b.n	1ccfa <__swsetup_r+0x26>
   1cdb2:	2309      	movs	r3, #9
   1cdb4:	6033      	str	r3, [r6, #0]
   1cdb6:	2340      	movs	r3, #64	; 0x40
   1cdb8:	431d      	orrs	r5, r3
   1cdba:	2001      	movs	r0, #1
   1cdbc:	81a5      	strh	r5, [r4, #12]
   1cdbe:	4240      	negs	r0, r0
   1cdc0:	e7ac      	b.n	1cd1c <__swsetup_r+0x48>
   1cdc2:	46c0      	nop			; (mov r8, r8)
   1cdc4:	200001a0 	.word	0x200001a0
   1cdc8:	0002714c 	.word	0x0002714c
   1cdcc:	0002712c 	.word	0x0002712c
   1cdd0:	0002710c 	.word	0x0002710c
   1cdd4:	00000000 	.word	0x00000000

0001cdd8 <quorem>:
   1cdd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cdda:	4644      	mov	r4, r8
   1cddc:	465f      	mov	r7, fp
   1cdde:	4656      	mov	r6, sl
   1cde0:	464d      	mov	r5, r9
   1cde2:	b4f0      	push	{r4, r5, r6, r7}
   1cde4:	4680      	mov	r8, r0
   1cde6:	468b      	mov	fp, r1
   1cde8:	690c      	ldr	r4, [r1, #16]
   1cdea:	4641      	mov	r1, r8
   1cdec:	6909      	ldr	r1, [r1, #16]
   1cdee:	b085      	sub	sp, #20
   1cdf0:	2000      	movs	r0, #0
   1cdf2:	428c      	cmp	r4, r1
   1cdf4:	dd00      	ble.n	1cdf8 <quorem+0x20>
   1cdf6:	e090      	b.n	1cf1a <quorem+0x142>
   1cdf8:	465d      	mov	r5, fp
   1cdfa:	3c01      	subs	r4, #1
   1cdfc:	3514      	adds	r5, #20
   1cdfe:	00a3      	lsls	r3, r4, #2
   1ce00:	9502      	str	r5, [sp, #8]
   1ce02:	4647      	mov	r7, r8
   1ce04:	18ed      	adds	r5, r5, r3
   1ce06:	3714      	adds	r7, #20
   1ce08:	6829      	ldr	r1, [r5, #0]
   1ce0a:	18fb      	adds	r3, r7, r3
   1ce0c:	3101      	adds	r1, #1
   1ce0e:	6818      	ldr	r0, [r3, #0]
   1ce10:	9303      	str	r3, [sp, #12]
   1ce12:	f002 fb0b 	bl	1f42c <__aeabi_uidiv>
   1ce16:	1e06      	subs	r6, r0, #0
   1ce18:	d042      	beq.n	1cea0 <quorem+0xc8>
   1ce1a:	2100      	movs	r1, #0
   1ce1c:	468a      	mov	sl, r1
   1ce1e:	9b02      	ldr	r3, [sp, #8]
   1ce20:	1c3a      	adds	r2, r7, #0
   1ce22:	46ac      	mov	ip, r5
   1ce24:	46b9      	mov	r9, r7
   1ce26:	4655      	mov	r5, sl
   1ce28:	1c07      	adds	r7, r0, #0
   1ce2a:	1c0e      	adds	r6, r1, #0
   1ce2c:	46a2      	mov	sl, r4
   1ce2e:	cb02      	ldmia	r3!, {r1}
   1ce30:	0408      	lsls	r0, r1, #16
   1ce32:	0c00      	lsrs	r0, r0, #16
   1ce34:	4378      	muls	r0, r7
   1ce36:	0c09      	lsrs	r1, r1, #16
   1ce38:	4379      	muls	r1, r7
   1ce3a:	1830      	adds	r0, r6, r0
   1ce3c:	0c04      	lsrs	r4, r0, #16
   1ce3e:	1864      	adds	r4, r4, r1
   1ce40:	6811      	ldr	r1, [r2, #0]
   1ce42:	0400      	lsls	r0, r0, #16
   1ce44:	0409      	lsls	r1, r1, #16
   1ce46:	0c09      	lsrs	r1, r1, #16
   1ce48:	194d      	adds	r5, r1, r5
   1ce4a:	0c00      	lsrs	r0, r0, #16
   1ce4c:	1a28      	subs	r0, r5, r0
   1ce4e:	6815      	ldr	r5, [r2, #0]
   1ce50:	0c26      	lsrs	r6, r4, #16
   1ce52:	0424      	lsls	r4, r4, #16
   1ce54:	0c29      	lsrs	r1, r5, #16
   1ce56:	0c24      	lsrs	r4, r4, #16
   1ce58:	1405      	asrs	r5, r0, #16
   1ce5a:	1b09      	subs	r1, r1, r4
   1ce5c:	1949      	adds	r1, r1, r5
   1ce5e:	0400      	lsls	r0, r0, #16
   1ce60:	140d      	asrs	r5, r1, #16
   1ce62:	0c00      	lsrs	r0, r0, #16
   1ce64:	0409      	lsls	r1, r1, #16
   1ce66:	4301      	orrs	r1, r0
   1ce68:	c202      	stmia	r2!, {r1}
   1ce6a:	459c      	cmp	ip, r3
   1ce6c:	d2df      	bcs.n	1ce2e <quorem+0x56>
   1ce6e:	9903      	ldr	r1, [sp, #12]
   1ce70:	1c3e      	adds	r6, r7, #0
   1ce72:	6809      	ldr	r1, [r1, #0]
   1ce74:	4665      	mov	r5, ip
   1ce76:	464f      	mov	r7, r9
   1ce78:	4654      	mov	r4, sl
   1ce7a:	2900      	cmp	r1, #0
   1ce7c:	d110      	bne.n	1cea0 <quorem+0xc8>
   1ce7e:	9b03      	ldr	r3, [sp, #12]
   1ce80:	3b04      	subs	r3, #4
   1ce82:	429f      	cmp	r7, r3
   1ce84:	d20a      	bcs.n	1ce9c <quorem+0xc4>
   1ce86:	681a      	ldr	r2, [r3, #0]
   1ce88:	2a00      	cmp	r2, #0
   1ce8a:	d003      	beq.n	1ce94 <quorem+0xbc>
   1ce8c:	e006      	b.n	1ce9c <quorem+0xc4>
   1ce8e:	6819      	ldr	r1, [r3, #0]
   1ce90:	2900      	cmp	r1, #0
   1ce92:	d103      	bne.n	1ce9c <quorem+0xc4>
   1ce94:	3b04      	subs	r3, #4
   1ce96:	3c01      	subs	r4, #1
   1ce98:	429f      	cmp	r7, r3
   1ce9a:	d3f8      	bcc.n	1ce8e <quorem+0xb6>
   1ce9c:	4642      	mov	r2, r8
   1ce9e:	6114      	str	r4, [r2, #16]
   1cea0:	4640      	mov	r0, r8
   1cea2:	4659      	mov	r1, fp
   1cea4:	f001 ffa4 	bl	1edf0 <__mcmp>
   1cea8:	2800      	cmp	r0, #0
   1ceaa:	db35      	blt.n	1cf18 <quorem+0x140>
   1ceac:	2100      	movs	r1, #0
   1ceae:	4689      	mov	r9, r1
   1ceb0:	3601      	adds	r6, #1
   1ceb2:	1c21      	adds	r1, r4, #0
   1ceb4:	9b02      	ldr	r3, [sp, #8]
   1ceb6:	46b4      	mov	ip, r6
   1ceb8:	464c      	mov	r4, r9
   1ceba:	1c3a      	adds	r2, r7, #0
   1cebc:	1c2e      	adds	r6, r5, #0
   1cebe:	4689      	mov	r9, r1
   1cec0:	6811      	ldr	r1, [r2, #0]
   1cec2:	cb20      	ldmia	r3!, {r5}
   1cec4:	0408      	lsls	r0, r1, #16
   1cec6:	0c00      	lsrs	r0, r0, #16
   1cec8:	1904      	adds	r4, r0, r4
   1ceca:	0428      	lsls	r0, r5, #16
   1cecc:	0c00      	lsrs	r0, r0, #16
   1cece:	1a20      	subs	r0, r4, r0
   1ced0:	0c09      	lsrs	r1, r1, #16
   1ced2:	0c2d      	lsrs	r5, r5, #16
   1ced4:	1404      	asrs	r4, r0, #16
   1ced6:	1b49      	subs	r1, r1, r5
   1ced8:	1909      	adds	r1, r1, r4
   1ceda:	0400      	lsls	r0, r0, #16
   1cedc:	140c      	asrs	r4, r1, #16
   1cede:	0c00      	lsrs	r0, r0, #16
   1cee0:	0409      	lsls	r1, r1, #16
   1cee2:	4301      	orrs	r1, r0
   1cee4:	c202      	stmia	r2!, {r1}
   1cee6:	429e      	cmp	r6, r3
   1cee8:	d2ea      	bcs.n	1cec0 <quorem+0xe8>
   1ceea:	464c      	mov	r4, r9
   1ceec:	00a3      	lsls	r3, r4, #2
   1ceee:	18fb      	adds	r3, r7, r3
   1cef0:	681a      	ldr	r2, [r3, #0]
   1cef2:	4666      	mov	r6, ip
   1cef4:	2a00      	cmp	r2, #0
   1cef6:	d10f      	bne.n	1cf18 <quorem+0x140>
   1cef8:	3b04      	subs	r3, #4
   1cefa:	429f      	cmp	r7, r3
   1cefc:	d20a      	bcs.n	1cf14 <quorem+0x13c>
   1cefe:	681d      	ldr	r5, [r3, #0]
   1cf00:	2d00      	cmp	r5, #0
   1cf02:	d003      	beq.n	1cf0c <quorem+0x134>
   1cf04:	e006      	b.n	1cf14 <quorem+0x13c>
   1cf06:	6819      	ldr	r1, [r3, #0]
   1cf08:	2900      	cmp	r1, #0
   1cf0a:	d103      	bne.n	1cf14 <quorem+0x13c>
   1cf0c:	3b04      	subs	r3, #4
   1cf0e:	3c01      	subs	r4, #1
   1cf10:	429f      	cmp	r7, r3
   1cf12:	d3f8      	bcc.n	1cf06 <quorem+0x12e>
   1cf14:	4642      	mov	r2, r8
   1cf16:	6114      	str	r4, [r2, #16]
   1cf18:	1c30      	adds	r0, r6, #0
   1cf1a:	b005      	add	sp, #20
   1cf1c:	bc3c      	pop	{r2, r3, r4, r5}
   1cf1e:	4690      	mov	r8, r2
   1cf20:	4699      	mov	r9, r3
   1cf22:	46a2      	mov	sl, r4
   1cf24:	46ab      	mov	fp, r5
   1cf26:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001cf28 <_dtoa_r>:
   1cf28:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cf2a:	4656      	mov	r6, sl
   1cf2c:	464d      	mov	r5, r9
   1cf2e:	4644      	mov	r4, r8
   1cf30:	465f      	mov	r7, fp
   1cf32:	b4f0      	push	{r4, r5, r6, r7}
   1cf34:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1cf36:	b09d      	sub	sp, #116	; 0x74
   1cf38:	4682      	mov	sl, r0
   1cf3a:	9d29      	ldr	r5, [sp, #164]	; 0xa4
   1cf3c:	9202      	str	r2, [sp, #8]
   1cf3e:	9303      	str	r3, [sp, #12]
   1cf40:	2c00      	cmp	r4, #0
   1cf42:	d100      	bne.n	1cf46 <_dtoa_r+0x1e>
   1cf44:	e34b      	b.n	1d5de <_dtoa_r+0x6b6>
   1cf46:	6821      	ldr	r1, [r4, #0]
   1cf48:	2900      	cmp	r1, #0
   1cf4a:	d00b      	beq.n	1cf64 <_dtoa_r+0x3c>
   1cf4c:	6863      	ldr	r3, [r4, #4]
   1cf4e:	2201      	movs	r2, #1
   1cf50:	409a      	lsls	r2, r3
   1cf52:	604b      	str	r3, [r1, #4]
   1cf54:	608a      	str	r2, [r1, #8]
   1cf56:	4650      	mov	r0, sl
   1cf58:	f001 fce0 	bl	1e91c <_Bfree>
   1cf5c:	4652      	mov	r2, sl
   1cf5e:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1cf60:	2200      	movs	r2, #0
   1cf62:	601a      	str	r2, [r3, #0]
   1cf64:	9e03      	ldr	r6, [sp, #12]
   1cf66:	2e00      	cmp	r6, #0
   1cf68:	db34      	blt.n	1cfd4 <_dtoa_r+0xac>
   1cf6a:	2300      	movs	r3, #0
   1cf6c:	602b      	str	r3, [r5, #0]
   1cf6e:	4b1e      	ldr	r3, [pc, #120]	; (1cfe8 <_dtoa_r+0xc0>)
   1cf70:	1c32      	adds	r2, r6, #0
   1cf72:	401a      	ands	r2, r3
   1cf74:	429a      	cmp	r2, r3
   1cf76:	d01a      	beq.n	1cfae <_dtoa_r+0x86>
   1cf78:	9c02      	ldr	r4, [sp, #8]
   1cf7a:	9d03      	ldr	r5, [sp, #12]
   1cf7c:	4b19      	ldr	r3, [pc, #100]	; (1cfe4 <_dtoa_r+0xbc>)
   1cf7e:	4a18      	ldr	r2, [pc, #96]	; (1cfe0 <_dtoa_r+0xb8>)
   1cf80:	1c20      	adds	r0, r4, #0
   1cf82:	1c29      	adds	r1, r5, #0
   1cf84:	f002 fb12 	bl	1f5ac <__aeabi_dcmpeq>
   1cf88:	2800      	cmp	r0, #0
   1cf8a:	d035      	beq.n	1cff8 <_dtoa_r+0xd0>
   1cf8c:	9c28      	ldr	r4, [sp, #160]	; 0xa0
   1cf8e:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
   1cf90:	2301      	movs	r3, #1
   1cf92:	6023      	str	r3, [r4, #0]
   1cf94:	2d00      	cmp	r5, #0
   1cf96:	d100      	bne.n	1cf9a <_dtoa_r+0x72>
   1cf98:	e234      	b.n	1d404 <_dtoa_r+0x4dc>
   1cf9a:	4814      	ldr	r0, [pc, #80]	; (1cfec <_dtoa_r+0xc4>)
   1cf9c:	6028      	str	r0, [r5, #0]
   1cf9e:	3801      	subs	r0, #1
   1cfa0:	b01d      	add	sp, #116	; 0x74
   1cfa2:	bc3c      	pop	{r2, r3, r4, r5}
   1cfa4:	4690      	mov	r8, r2
   1cfa6:	4699      	mov	r9, r3
   1cfa8:	46a2      	mov	sl, r4
   1cfaa:	46ab      	mov	fp, r5
   1cfac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cfae:	4b10      	ldr	r3, [pc, #64]	; (1cff0 <_dtoa_r+0xc8>)
   1cfb0:	9c28      	ldr	r4, [sp, #160]	; 0xa0
   1cfb2:	9d02      	ldr	r5, [sp, #8]
   1cfb4:	6023      	str	r3, [r4, #0]
   1cfb6:	2d00      	cmp	r5, #0
   1cfb8:	d100      	bne.n	1cfbc <_dtoa_r+0x94>
   1cfba:	e206      	b.n	1d3ca <_dtoa_r+0x4a2>
   1cfbc:	480d      	ldr	r0, [pc, #52]	; (1cff4 <_dtoa_r+0xcc>)
   1cfbe:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1cfc0:	2c00      	cmp	r4, #0
   1cfc2:	d0ed      	beq.n	1cfa0 <_dtoa_r+0x78>
   1cfc4:	78c2      	ldrb	r2, [r0, #3]
   1cfc6:	1cc3      	adds	r3, r0, #3
   1cfc8:	2a00      	cmp	r2, #0
   1cfca:	d000      	beq.n	1cfce <_dtoa_r+0xa6>
   1cfcc:	3305      	adds	r3, #5
   1cfce:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
   1cfd0:	602b      	str	r3, [r5, #0]
   1cfd2:	e7e5      	b.n	1cfa0 <_dtoa_r+0x78>
   1cfd4:	0076      	lsls	r6, r6, #1
   1cfd6:	2301      	movs	r3, #1
   1cfd8:	0876      	lsrs	r6, r6, #1
   1cfda:	602b      	str	r3, [r5, #0]
   1cfdc:	9603      	str	r6, [sp, #12]
   1cfde:	e7c6      	b.n	1cf6e <_dtoa_r+0x46>
	...
   1cfe8:	7ff00000 	.word	0x7ff00000
   1cfec:	00026fb9 	.word	0x00026fb9
   1cff0:	0000270f 	.word	0x0000270f
   1cff4:	00027108 	.word	0x00027108
   1cff8:	ab1b      	add	r3, sp, #108	; 0x6c
   1cffa:	9300      	str	r3, [sp, #0]
   1cffc:	ab1a      	add	r3, sp, #104	; 0x68
   1cffe:	9301      	str	r3, [sp, #4]
   1d000:	4650      	mov	r0, sl
   1d002:	1c2b      	adds	r3, r5, #0
   1d004:	1c22      	adds	r2, r4, #0
   1d006:	f001 fffb 	bl	1f000 <__d2b>
   1d00a:	0d33      	lsrs	r3, r6, #20
   1d00c:	4683      	mov	fp, r0
   1d00e:	d100      	bne.n	1d012 <_dtoa_r+0xea>
   1d010:	e1e0      	b.n	1d3d4 <_dtoa_r+0x4ac>
   1d012:	1c20      	adds	r0, r4, #0
   1d014:	4cba      	ldr	r4, [pc, #744]	; (1d300 <_dtoa_r+0x3d8>)
   1d016:	032a      	lsls	r2, r5, #12
   1d018:	0b12      	lsrs	r2, r2, #12
   1d01a:	1c21      	adds	r1, r4, #0
   1d01c:	4311      	orrs	r1, r2
   1d01e:	4ab9      	ldr	r2, [pc, #740]	; (1d304 <_dtoa_r+0x3dc>)
   1d020:	2400      	movs	r4, #0
   1d022:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   1d024:	189e      	adds	r6, r3, r2
   1d026:	9413      	str	r4, [sp, #76]	; 0x4c
   1d028:	4ba6      	ldr	r3, [pc, #664]	; (1d2c4 <_dtoa_r+0x39c>)
   1d02a:	4aa5      	ldr	r2, [pc, #660]	; (1d2c0 <_dtoa_r+0x398>)
   1d02c:	f004 fc94 	bl	21958 <__aeabi_dsub>
   1d030:	4aa5      	ldr	r2, [pc, #660]	; (1d2c8 <_dtoa_r+0x3a0>)
   1d032:	4ba6      	ldr	r3, [pc, #664]	; (1d2cc <_dtoa_r+0x3a4>)
   1d034:	f004 f9fe 	bl	21434 <__aeabi_dmul>
   1d038:	4aa5      	ldr	r2, [pc, #660]	; (1d2d0 <_dtoa_r+0x3a8>)
   1d03a:	4ba6      	ldr	r3, [pc, #664]	; (1d2d4 <_dtoa_r+0x3ac>)
   1d03c:	f003 fa66 	bl	2050c <__aeabi_dadd>
   1d040:	1c04      	adds	r4, r0, #0
   1d042:	1c30      	adds	r0, r6, #0
   1d044:	1c0d      	adds	r5, r1, #0
   1d046:	f004 fff1 	bl	2202c <__aeabi_i2d>
   1d04a:	4aa3      	ldr	r2, [pc, #652]	; (1d2d8 <_dtoa_r+0x3b0>)
   1d04c:	4ba3      	ldr	r3, [pc, #652]	; (1d2dc <_dtoa_r+0x3b4>)
   1d04e:	f004 f9f1 	bl	21434 <__aeabi_dmul>
   1d052:	1c02      	adds	r2, r0, #0
   1d054:	1c0b      	adds	r3, r1, #0
   1d056:	1c20      	adds	r0, r4, #0
   1d058:	1c29      	adds	r1, r5, #0
   1d05a:	f003 fa57 	bl	2050c <__aeabi_dadd>
   1d05e:	1c04      	adds	r4, r0, #0
   1d060:	1c0d      	adds	r5, r1, #0
   1d062:	f004 ffaf 	bl	21fc4 <__aeabi_d2iz>
   1d066:	4a9e      	ldr	r2, [pc, #632]	; (1d2e0 <_dtoa_r+0x3b8>)
   1d068:	4b9e      	ldr	r3, [pc, #632]	; (1d2e4 <_dtoa_r+0x3bc>)
   1d06a:	9008      	str	r0, [sp, #32]
   1d06c:	1c29      	adds	r1, r5, #0
   1d06e:	1c20      	adds	r0, r4, #0
   1d070:	f002 faa2 	bl	1f5b8 <__aeabi_dcmplt>
   1d074:	2800      	cmp	r0, #0
   1d076:	d000      	beq.n	1d07a <_dtoa_r+0x152>
   1d078:	e2c0      	b.n	1d5fc <_dtoa_r+0x6d4>
   1d07a:	9d08      	ldr	r5, [sp, #32]
   1d07c:	2401      	movs	r4, #1
   1d07e:	9411      	str	r4, [sp, #68]	; 0x44
   1d080:	2d16      	cmp	r5, #22
   1d082:	d80f      	bhi.n	1d0a4 <_dtoa_r+0x17c>
   1d084:	4aa0      	ldr	r2, [pc, #640]	; (1d308 <_dtoa_r+0x3e0>)
   1d086:	00eb      	lsls	r3, r5, #3
   1d088:	18d3      	adds	r3, r2, r3
   1d08a:	6818      	ldr	r0, [r3, #0]
   1d08c:	6859      	ldr	r1, [r3, #4]
   1d08e:	9a02      	ldr	r2, [sp, #8]
   1d090:	9b03      	ldr	r3, [sp, #12]
   1d092:	f002 faa5 	bl	1f5e0 <__aeabi_dcmpgt>
   1d096:	2800      	cmp	r0, #0
   1d098:	d100      	bne.n	1d09c <_dtoa_r+0x174>
   1d09a:	e3cf      	b.n	1d83c <_dtoa_r+0x914>
   1d09c:	3d01      	subs	r5, #1
   1d09e:	2400      	movs	r4, #0
   1d0a0:	9508      	str	r5, [sp, #32]
   1d0a2:	9411      	str	r4, [sp, #68]	; 0x44
   1d0a4:	2400      	movs	r4, #0
   1d0a6:	1bbe      	subs	r6, r7, r6
   1d0a8:	9409      	str	r4, [sp, #36]	; 0x24
   1d0aa:	3e01      	subs	r6, #1
   1d0ac:	46b1      	mov	r9, r6
   1d0ae:	d500      	bpl.n	1d0b2 <_dtoa_r+0x18a>
   1d0b0:	e29f      	b.n	1d5f2 <_dtoa_r+0x6ca>
   1d0b2:	9c08      	ldr	r4, [sp, #32]
   1d0b4:	2c00      	cmp	r4, #0
   1d0b6:	da00      	bge.n	1d0ba <_dtoa_r+0x192>
   1d0b8:	e2ad      	b.n	1d616 <_dtoa_r+0x6ee>
   1d0ba:	2500      	movs	r5, #0
   1d0bc:	44a1      	add	r9, r4
   1d0be:	940c      	str	r4, [sp, #48]	; 0x30
   1d0c0:	950b      	str	r5, [sp, #44]	; 0x2c
   1d0c2:	9c26      	ldr	r4, [sp, #152]	; 0x98
   1d0c4:	2c09      	cmp	r4, #9
   1d0c6:	d900      	bls.n	1d0ca <_dtoa_r+0x1a2>
   1d0c8:	e19e      	b.n	1d408 <_dtoa_r+0x4e0>
   1d0ca:	2501      	movs	r5, #1
   1d0cc:	2c05      	cmp	r4, #5
   1d0ce:	dd02      	ble.n	1d0d6 <_dtoa_r+0x1ae>
   1d0d0:	3c04      	subs	r4, #4
   1d0d2:	9426      	str	r4, [sp, #152]	; 0x98
   1d0d4:	2500      	movs	r5, #0
   1d0d6:	9c26      	ldr	r4, [sp, #152]	; 0x98
   1d0d8:	2c03      	cmp	r4, #3
   1d0da:	d101      	bne.n	1d0e0 <_dtoa_r+0x1b8>
   1d0dc:	f000 fd09 	bl	1daf2 <_dtoa_r+0xbca>
   1d0e0:	dc01      	bgt.n	1d0e6 <_dtoa_r+0x1be>
   1d0e2:	f000 fc88 	bl	1d9f6 <_dtoa_r+0xace>
   1d0e6:	9c26      	ldr	r4, [sp, #152]	; 0x98
   1d0e8:	2c04      	cmp	r4, #4
   1d0ea:	d101      	bne.n	1d0f0 <_dtoa_r+0x1c8>
   1d0ec:	f000 fc05 	bl	1d8fa <_dtoa_r+0x9d2>
   1d0f0:	2401      	movs	r4, #1
   1d0f2:	9410      	str	r4, [sp, #64]	; 0x40
   1d0f4:	9c26      	ldr	r4, [sp, #152]	; 0x98
   1d0f6:	2c05      	cmp	r4, #5
   1d0f8:	d000      	beq.n	1d0fc <_dtoa_r+0x1d4>
   1d0fa:	e187      	b.n	1d40c <_dtoa_r+0x4e4>
   1d0fc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   1d0fe:	9908      	ldr	r1, [sp, #32]
   1d100:	1864      	adds	r4, r4, r1
   1d102:	9412      	str	r4, [sp, #72]	; 0x48
   1d104:	3401      	adds	r4, #1
   1d106:	940a      	str	r4, [sp, #40]	; 0x28
   1d108:	2c00      	cmp	r4, #0
   1d10a:	dc01      	bgt.n	1d110 <_dtoa_r+0x1e8>
   1d10c:	f000 fc3f 	bl	1d98e <_dtoa_r+0xa66>
   1d110:	4652      	mov	r2, sl
   1d112:	6a56      	ldr	r6, [r2, #36]	; 0x24
   1d114:	2300      	movs	r3, #0
   1d116:	6073      	str	r3, [r6, #4]
   1d118:	2100      	movs	r1, #0
   1d11a:	2c17      	cmp	r4, #23
   1d11c:	d909      	bls.n	1d132 <_dtoa_r+0x20a>
   1d11e:	2201      	movs	r2, #1
   1d120:	2304      	movs	r3, #4
   1d122:	005b      	lsls	r3, r3, #1
   1d124:	1c18      	adds	r0, r3, #0
   1d126:	3014      	adds	r0, #20
   1d128:	1c11      	adds	r1, r2, #0
   1d12a:	3201      	adds	r2, #1
   1d12c:	42a0      	cmp	r0, r4
   1d12e:	d9f8      	bls.n	1d122 <_dtoa_r+0x1fa>
   1d130:	6071      	str	r1, [r6, #4]
   1d132:	4650      	mov	r0, sl
   1d134:	f001 fbbc 	bl	1e8b0 <_Balloc>
   1d138:	4651      	mov	r1, sl
   1d13a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1d13c:	6030      	str	r0, [r6, #0]
   1d13e:	681b      	ldr	r3, [r3, #0]
   1d140:	930d      	str	r3, [sp, #52]	; 0x34
   1d142:	2c0e      	cmp	r4, #14
   1d144:	d900      	bls.n	1d148 <_dtoa_r+0x220>
   1d146:	e175      	b.n	1d434 <_dtoa_r+0x50c>
   1d148:	2d00      	cmp	r5, #0
   1d14a:	d100      	bne.n	1d14e <_dtoa_r+0x226>
   1d14c:	e172      	b.n	1d434 <_dtoa_r+0x50c>
   1d14e:	9d08      	ldr	r5, [sp, #32]
   1d150:	2d00      	cmp	r5, #0
   1d152:	dc01      	bgt.n	1d158 <_dtoa_r+0x230>
   1d154:	f000 fd0c 	bl	1db70 <_dtoa_r+0xc48>
   1d158:	1c2a      	adds	r2, r5, #0
   1d15a:	230f      	movs	r3, #15
   1d15c:	496a      	ldr	r1, [pc, #424]	; (1d308 <_dtoa_r+0x3e0>)
   1d15e:	401a      	ands	r2, r3
   1d160:	00d2      	lsls	r2, r2, #3
   1d162:	188a      	adds	r2, r1, r2
   1d164:	9908      	ldr	r1, [sp, #32]
   1d166:	6814      	ldr	r4, [r2, #0]
   1d168:	6855      	ldr	r5, [r2, #4]
   1d16a:	110e      	asrs	r6, r1, #4
   1d16c:	06f2      	lsls	r2, r6, #27
   1d16e:	d401      	bmi.n	1d174 <_dtoa_r+0x24c>
   1d170:	f000 fccb 	bl	1db0a <_dtoa_r+0xbe2>
   1d174:	401e      	ands	r6, r3
   1d176:	4b65      	ldr	r3, [pc, #404]	; (1d30c <_dtoa_r+0x3e4>)
   1d178:	9802      	ldr	r0, [sp, #8]
   1d17a:	9903      	ldr	r1, [sp, #12]
   1d17c:	6a1a      	ldr	r2, [r3, #32]
   1d17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d180:	f003 fce8 	bl	20b54 <__aeabi_ddiv>
   1d184:	900e      	str	r0, [sp, #56]	; 0x38
   1d186:	910f      	str	r1, [sp, #60]	; 0x3c
   1d188:	2303      	movs	r3, #3
   1d18a:	4698      	mov	r8, r3
   1d18c:	2e00      	cmp	r6, #0
   1d18e:	d012      	beq.n	1d1b6 <_dtoa_r+0x28e>
   1d190:	4f5e      	ldr	r7, [pc, #376]	; (1d30c <_dtoa_r+0x3e4>)
   1d192:	1c20      	adds	r0, r4, #0
   1d194:	1c29      	adds	r1, r5, #0
   1d196:	4644      	mov	r4, r8
   1d198:	2301      	movs	r3, #1
   1d19a:	4233      	tst	r3, r6
   1d19c:	d004      	beq.n	1d1a8 <_dtoa_r+0x280>
   1d19e:	683a      	ldr	r2, [r7, #0]
   1d1a0:	687b      	ldr	r3, [r7, #4]
   1d1a2:	3401      	adds	r4, #1
   1d1a4:	f004 f946 	bl	21434 <__aeabi_dmul>
   1d1a8:	1076      	asrs	r6, r6, #1
   1d1aa:	3708      	adds	r7, #8
   1d1ac:	2e00      	cmp	r6, #0
   1d1ae:	d1f3      	bne.n	1d198 <_dtoa_r+0x270>
   1d1b0:	46a0      	mov	r8, r4
   1d1b2:	1c0d      	adds	r5, r1, #0
   1d1b4:	1c04      	adds	r4, r0, #0
   1d1b6:	980e      	ldr	r0, [sp, #56]	; 0x38
   1d1b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1d1ba:	1c22      	adds	r2, r4, #0
   1d1bc:	1c2b      	adds	r3, r5, #0
   1d1be:	f003 fcc9 	bl	20b54 <__aeabi_ddiv>
   1d1c2:	1c06      	adds	r6, r0, #0
   1d1c4:	1c0f      	adds	r7, r1, #0
   1d1c6:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1d1c8:	2d00      	cmp	r5, #0
   1d1ca:	d009      	beq.n	1d1e0 <_dtoa_r+0x2b8>
   1d1cc:	1c30      	adds	r0, r6, #0
   1d1ce:	1c39      	adds	r1, r7, #0
   1d1d0:	4a45      	ldr	r2, [pc, #276]	; (1d2e8 <_dtoa_r+0x3c0>)
   1d1d2:	4b46      	ldr	r3, [pc, #280]	; (1d2ec <_dtoa_r+0x3c4>)
   1d1d4:	f002 f9f0 	bl	1f5b8 <__aeabi_dcmplt>
   1d1d8:	2800      	cmp	r0, #0
   1d1da:	d001      	beq.n	1d1e0 <_dtoa_r+0x2b8>
   1d1dc:	f000 fdb3 	bl	1dd46 <_dtoa_r+0xe1e>
   1d1e0:	4640      	mov	r0, r8
   1d1e2:	f004 ff23 	bl	2202c <__aeabi_i2d>
   1d1e6:	1c32      	adds	r2, r6, #0
   1d1e8:	1c3b      	adds	r3, r7, #0
   1d1ea:	f004 f923 	bl	21434 <__aeabi_dmul>
   1d1ee:	4a40      	ldr	r2, [pc, #256]	; (1d2f0 <_dtoa_r+0x3c8>)
   1d1f0:	4b40      	ldr	r3, [pc, #256]	; (1d2f4 <_dtoa_r+0x3cc>)
   1d1f2:	f003 f98b 	bl	2050c <__aeabi_dadd>
   1d1f6:	900e      	str	r0, [sp, #56]	; 0x38
   1d1f8:	910f      	str	r1, [sp, #60]	; 0x3c
   1d1fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d1fc:	4c44      	ldr	r4, [pc, #272]	; (1d310 <_dtoa_r+0x3e8>)
   1d1fe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1d200:	191c      	adds	r4, r3, r4
   1d202:	940f      	str	r4, [sp, #60]	; 0x3c
   1d204:	2d00      	cmp	r5, #0
   1d206:	d101      	bne.n	1d20c <_dtoa_r+0x2e4>
   1d208:	f000 fc4e 	bl	1daa8 <_dtoa_r+0xb80>
   1d20c:	9c08      	ldr	r4, [sp, #32]
   1d20e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1d210:	9418      	str	r4, [sp, #96]	; 0x60
   1d212:	46a8      	mov	r8, r5
   1d214:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1d216:	2c00      	cmp	r4, #0
   1d218:	d101      	bne.n	1d21e <_dtoa_r+0x2f6>
   1d21a:	f000 fcea 	bl	1dbf2 <_dtoa_r+0xcca>
   1d21e:	4643      	mov	r3, r8
   1d220:	4a39      	ldr	r2, [pc, #228]	; (1d308 <_dtoa_r+0x3e0>)
   1d222:	3b01      	subs	r3, #1
   1d224:	00db      	lsls	r3, r3, #3
   1d226:	18d3      	adds	r3, r2, r3
   1d228:	681a      	ldr	r2, [r3, #0]
   1d22a:	685b      	ldr	r3, [r3, #4]
   1d22c:	4832      	ldr	r0, [pc, #200]	; (1d2f8 <_dtoa_r+0x3d0>)
   1d22e:	4933      	ldr	r1, [pc, #204]	; (1d2fc <_dtoa_r+0x3d4>)
   1d230:	f003 fc90 	bl	20b54 <__aeabi_ddiv>
   1d234:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1d236:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d238:	f004 fb8e 	bl	21958 <__aeabi_dsub>
   1d23c:	9014      	str	r0, [sp, #80]	; 0x50
   1d23e:	9115      	str	r1, [sp, #84]	; 0x54
   1d240:	1c30      	adds	r0, r6, #0
   1d242:	1c39      	adds	r1, r7, #0
   1d244:	f004 febe 	bl	21fc4 <__aeabi_d2iz>
   1d248:	1c05      	adds	r5, r0, #0
   1d24a:	f004 feef 	bl	2202c <__aeabi_i2d>
   1d24e:	1c02      	adds	r2, r0, #0
   1d250:	1c0b      	adds	r3, r1, #0
   1d252:	1c30      	adds	r0, r6, #0
   1d254:	1c39      	adds	r1, r7, #0
   1d256:	f004 fb7f 	bl	21958 <__aeabi_dsub>
   1d25a:	3530      	adds	r5, #48	; 0x30
   1d25c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1d25e:	900e      	str	r0, [sp, #56]	; 0x38
   1d260:	910f      	str	r1, [sp, #60]	; 0x3c
   1d262:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1d264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d266:	9814      	ldr	r0, [sp, #80]	; 0x50
   1d268:	9915      	ldr	r1, [sp, #84]	; 0x54
   1d26a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1d26c:	b2ed      	uxtb	r5, r5
   1d26e:	7025      	strb	r5, [r4, #0]
   1d270:	3601      	adds	r6, #1
   1d272:	f002 f9b5 	bl	1f5e0 <__aeabi_dcmpgt>
   1d276:	2800      	cmp	r0, #0
   1d278:	d001      	beq.n	1d27e <_dtoa_r+0x356>
   1d27a:	f000 fda4 	bl	1ddc6 <_dtoa_r+0xe9e>
   1d27e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1d280:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d282:	4819      	ldr	r0, [pc, #100]	; (1d2e8 <_dtoa_r+0x3c0>)
   1d284:	4919      	ldr	r1, [pc, #100]	; (1d2ec <_dtoa_r+0x3c4>)
   1d286:	f004 fb67 	bl	21958 <__aeabi_dsub>
   1d28a:	1c02      	adds	r2, r0, #0
   1d28c:	1c0b      	adds	r3, r1, #0
   1d28e:	9814      	ldr	r0, [sp, #80]	; 0x50
   1d290:	9915      	ldr	r1, [sp, #84]	; 0x54
   1d292:	f002 f9a5 	bl	1f5e0 <__aeabi_dcmpgt>
   1d296:	2800      	cmp	r0, #0
   1d298:	d001      	beq.n	1d29e <_dtoa_r+0x376>
   1d29a:	f000 fdd2 	bl	1de42 <_dtoa_r+0xf1a>
   1d29e:	4645      	mov	r5, r8
   1d2a0:	2d01      	cmp	r5, #1
   1d2a2:	dc00      	bgt.n	1d2a6 <_dtoa_r+0x37e>
   1d2a4:	e0c6      	b.n	1d434 <_dtoa_r+0x50c>
   1d2a6:	44a0      	add	r8, r4
   1d2a8:	464c      	mov	r4, r9
   1d2aa:	9419      	str	r4, [sp, #100]	; 0x64
   1d2ac:	4652      	mov	r2, sl
   1d2ae:	465c      	mov	r4, fp
   1d2b0:	9416      	str	r4, [sp, #88]	; 0x58
   1d2b2:	46b1      	mov	r9, r6
   1d2b4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1d2b6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1d2b8:	9e14      	ldr	r6, [sp, #80]	; 0x50
   1d2ba:	9f15      	ldr	r7, [sp, #84]	; 0x54
   1d2bc:	920e      	str	r2, [sp, #56]	; 0x38
   1d2be:	e03b      	b.n	1d338 <_dtoa_r+0x410>
   1d2c0:	00000000 	.word	0x00000000
   1d2c4:	3ff80000 	.word	0x3ff80000
   1d2c8:	636f4361 	.word	0x636f4361
   1d2cc:	3fd287a7 	.word	0x3fd287a7
   1d2d0:	8b60c8b3 	.word	0x8b60c8b3
   1d2d4:	3fc68a28 	.word	0x3fc68a28
   1d2d8:	509f79fb 	.word	0x509f79fb
   1d2dc:	3fd34413 	.word	0x3fd34413
	...
   1d2ec:	3ff00000 	.word	0x3ff00000
   1d2f0:	00000000 	.word	0x00000000
   1d2f4:	401c0000 	.word	0x401c0000
   1d2f8:	00000000 	.word	0x00000000
   1d2fc:	3fe00000 	.word	0x3fe00000
   1d300:	3ff00000 	.word	0x3ff00000
   1d304:	fffffc01 	.word	0xfffffc01
   1d308:	00027188 	.word	0x00027188
   1d30c:	00027278 	.word	0x00027278
   1d310:	fcc00000 	.word	0xfcc00000
   1d314:	1c22      	adds	r2, r4, #0
   1d316:	1c2b      	adds	r3, r5, #0
   1d318:	49c4      	ldr	r1, [pc, #784]	; (1d62c <_dtoa_r+0x704>)
   1d31a:	48c3      	ldr	r0, [pc, #780]	; (1d628 <_dtoa_r+0x700>)
   1d31c:	f004 fb1c 	bl	21958 <__aeabi_dsub>
   1d320:	1c32      	adds	r2, r6, #0
   1d322:	1c3b      	adds	r3, r7, #0
   1d324:	f002 f948 	bl	1f5b8 <__aeabi_dcmplt>
   1d328:	2800      	cmp	r0, #0
   1d32a:	d001      	beq.n	1d330 <_dtoa_r+0x408>
   1d32c:	f000 fd65 	bl	1ddfa <_dtoa_r+0xed2>
   1d330:	45c1      	cmp	r9, r8
   1d332:	d101      	bne.n	1d338 <_dtoa_r+0x410>
   1d334:	f000 fd6d 	bl	1de12 <_dtoa_r+0xeea>
   1d338:	1c30      	adds	r0, r6, #0
   1d33a:	1c39      	adds	r1, r7, #0
   1d33c:	4abc      	ldr	r2, [pc, #752]	; (1d630 <_dtoa_r+0x708>)
   1d33e:	4bbd      	ldr	r3, [pc, #756]	; (1d634 <_dtoa_r+0x70c>)
   1d340:	f004 f878 	bl	21434 <__aeabi_dmul>
   1d344:	4aba      	ldr	r2, [pc, #744]	; (1d630 <_dtoa_r+0x708>)
   1d346:	4bbb      	ldr	r3, [pc, #748]	; (1d634 <_dtoa_r+0x70c>)
   1d348:	1c06      	adds	r6, r0, #0
   1d34a:	1c0f      	adds	r7, r1, #0
   1d34c:	1c20      	adds	r0, r4, #0
   1d34e:	1c29      	adds	r1, r5, #0
   1d350:	f004 f870 	bl	21434 <__aeabi_dmul>
   1d354:	1c0d      	adds	r5, r1, #0
   1d356:	1c04      	adds	r4, r0, #0
   1d358:	f004 fe34 	bl	21fc4 <__aeabi_d2iz>
   1d35c:	4682      	mov	sl, r0
   1d35e:	f004 fe65 	bl	2202c <__aeabi_i2d>
   1d362:	1c02      	adds	r2, r0, #0
   1d364:	1c0b      	adds	r3, r1, #0
   1d366:	1c20      	adds	r0, r4, #0
   1d368:	1c29      	adds	r1, r5, #0
   1d36a:	f004 faf5 	bl	21958 <__aeabi_dsub>
   1d36e:	1c0d      	adds	r5, r1, #0
   1d370:	2101      	movs	r1, #1
   1d372:	2301      	movs	r3, #1
   1d374:	4249      	negs	r1, r1
   1d376:	4499      	add	r9, r3
   1d378:	468b      	mov	fp, r1
   1d37a:	4653      	mov	r3, sl
   1d37c:	3330      	adds	r3, #48	; 0x30
   1d37e:	44cb      	add	fp, r9
   1d380:	b2db      	uxtb	r3, r3
   1d382:	465a      	mov	r2, fp
   1d384:	1c04      	adds	r4, r0, #0
   1d386:	7013      	strb	r3, [r2, #0]
   1d388:	469a      	mov	sl, r3
   1d38a:	1c20      	adds	r0, r4, #0
   1d38c:	1c29      	adds	r1, r5, #0
   1d38e:	1c32      	adds	r2, r6, #0
   1d390:	1c3b      	adds	r3, r7, #0
   1d392:	f002 f911 	bl	1f5b8 <__aeabi_dcmplt>
   1d396:	2800      	cmp	r0, #0
   1d398:	d0bc      	beq.n	1d314 <_dtoa_r+0x3ec>
   1d39a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1d39c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1d39e:	46a2      	mov	sl, r4
   1d3a0:	9c18      	ldr	r4, [sp, #96]	; 0x60
   1d3a2:	469b      	mov	fp, r3
   1d3a4:	464e      	mov	r6, r9
   1d3a6:	9408      	str	r4, [sp, #32]
   1d3a8:	4650      	mov	r0, sl
   1d3aa:	4659      	mov	r1, fp
   1d3ac:	f001 fab6 	bl	1e91c <_Bfree>
   1d3b0:	2300      	movs	r3, #0
   1d3b2:	7033      	strb	r3, [r6, #0]
   1d3b4:	9b08      	ldr	r3, [sp, #32]
   1d3b6:	9c28      	ldr	r4, [sp, #160]	; 0xa0
   1d3b8:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
   1d3ba:	3301      	adds	r3, #1
   1d3bc:	6023      	str	r3, [r4, #0]
   1d3be:	2d00      	cmp	r5, #0
   1d3c0:	d100      	bne.n	1d3c4 <_dtoa_r+0x49c>
   1d3c2:	e315      	b.n	1d9f0 <_dtoa_r+0xac8>
   1d3c4:	602e      	str	r6, [r5, #0]
   1d3c6:	980d      	ldr	r0, [sp, #52]	; 0x34
   1d3c8:	e5ea      	b.n	1cfa0 <_dtoa_r+0x78>
   1d3ca:	0336      	lsls	r6, r6, #12
   1d3cc:	d000      	beq.n	1d3d0 <_dtoa_r+0x4a8>
   1d3ce:	e5f5      	b.n	1cfbc <_dtoa_r+0x94>
   1d3d0:	489b      	ldr	r0, [pc, #620]	; (1d640 <_dtoa_r+0x718>)
   1d3d2:	e5f4      	b.n	1cfbe <_dtoa_r+0x96>
   1d3d4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   1d3d6:	991b      	ldr	r1, [sp, #108]	; 0x6c
   1d3d8:	4b9a      	ldr	r3, [pc, #616]	; (1d644 <_dtoa_r+0x71c>)
   1d3da:	187d      	adds	r5, r7, r1
   1d3dc:	429d      	cmp	r5, r3
   1d3de:	da00      	bge.n	1d3e2 <_dtoa_r+0x4ba>
   1d3e0:	e22f      	b.n	1d842 <_dtoa_r+0x91a>
   1d3e2:	4899      	ldr	r0, [pc, #612]	; (1d648 <_dtoa_r+0x720>)
   1d3e4:	4a99      	ldr	r2, [pc, #612]	; (1d64c <_dtoa_r+0x724>)
   1d3e6:	1b40      	subs	r0, r0, r5
   1d3e8:	9c02      	ldr	r4, [sp, #8]
   1d3ea:	4086      	lsls	r6, r0
   1d3ec:	18ab      	adds	r3, r5, r2
   1d3ee:	1c30      	adds	r0, r6, #0
   1d3f0:	40dc      	lsrs	r4, r3
   1d3f2:	4320      	orrs	r0, r4
   1d3f4:	f004 fe58 	bl	220a8 <__aeabi_ui2d>
   1d3f8:	4a95      	ldr	r2, [pc, #596]	; (1d650 <_dtoa_r+0x728>)
   1d3fa:	2401      	movs	r4, #1
   1d3fc:	1889      	adds	r1, r1, r2
   1d3fe:	1e6e      	subs	r6, r5, #1
   1d400:	9413      	str	r4, [sp, #76]	; 0x4c
   1d402:	e611      	b.n	1d028 <_dtoa_r+0x100>
   1d404:	4893      	ldr	r0, [pc, #588]	; (1d654 <_dtoa_r+0x72c>)
   1d406:	e5cb      	b.n	1cfa0 <_dtoa_r+0x78>
   1d408:	2400      	movs	r4, #0
   1d40a:	9426      	str	r4, [sp, #152]	; 0x98
   1d40c:	4655      	mov	r5, sl
   1d40e:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   1d410:	2300      	movs	r3, #0
   1d412:	6063      	str	r3, [r4, #4]
   1d414:	2100      	movs	r1, #0
   1d416:	4650      	mov	r0, sl
   1d418:	f001 fa4a 	bl	1e8b0 <_Balloc>
   1d41c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1d41e:	6020      	str	r0, [r4, #0]
   1d420:	681b      	ldr	r3, [r3, #0]
   1d422:	2601      	movs	r6, #1
   1d424:	4276      	negs	r6, r6
   1d426:	2100      	movs	r1, #0
   1d428:	2401      	movs	r4, #1
   1d42a:	930d      	str	r3, [sp, #52]	; 0x34
   1d42c:	9127      	str	r1, [sp, #156]	; 0x9c
   1d42e:	960a      	str	r6, [sp, #40]	; 0x28
   1d430:	9612      	str	r6, [sp, #72]	; 0x48
   1d432:	9410      	str	r4, [sp, #64]	; 0x40
   1d434:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1d436:	2b00      	cmp	r3, #0
   1d438:	da00      	bge.n	1d43c <_dtoa_r+0x514>
   1d43a:	e0b2      	b.n	1d5a2 <_dtoa_r+0x67a>
   1d43c:	9d08      	ldr	r5, [sp, #32]
   1d43e:	2d0e      	cmp	r5, #14
   1d440:	dd00      	ble.n	1d444 <_dtoa_r+0x51c>
   1d442:	e0ae      	b.n	1d5a2 <_dtoa_r+0x67a>
   1d444:	4a84      	ldr	r2, [pc, #528]	; (1d658 <_dtoa_r+0x730>)
   1d446:	00eb      	lsls	r3, r5, #3
   1d448:	18d3      	adds	r3, r2, r3
   1d44a:	681c      	ldr	r4, [r3, #0]
   1d44c:	685d      	ldr	r5, [r3, #4]
   1d44e:	9404      	str	r4, [sp, #16]
   1d450:	9505      	str	r5, [sp, #20]
   1d452:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   1d454:	2d00      	cmp	r5, #0
   1d456:	da00      	bge.n	1d45a <_dtoa_r+0x532>
   1d458:	e259      	b.n	1d90e <_dtoa_r+0x9e6>
   1d45a:	9c02      	ldr	r4, [sp, #8]
   1d45c:	9d03      	ldr	r5, [sp, #12]
   1d45e:	9a04      	ldr	r2, [sp, #16]
   1d460:	9b05      	ldr	r3, [sp, #20]
   1d462:	1c20      	adds	r0, r4, #0
   1d464:	1c29      	adds	r1, r5, #0
   1d466:	f003 fb75 	bl	20b54 <__aeabi_ddiv>
   1d46a:	f004 fdab 	bl	21fc4 <__aeabi_d2iz>
   1d46e:	4680      	mov	r8, r0
   1d470:	f004 fddc 	bl	2202c <__aeabi_i2d>
   1d474:	9a04      	ldr	r2, [sp, #16]
   1d476:	9b05      	ldr	r3, [sp, #20]
   1d478:	f003 ffdc 	bl	21434 <__aeabi_dmul>
   1d47c:	1c02      	adds	r2, r0, #0
   1d47e:	1c0b      	adds	r3, r1, #0
   1d480:	1c20      	adds	r0, r4, #0
   1d482:	1c29      	adds	r1, r5, #0
   1d484:	f004 fa68 	bl	21958 <__aeabi_dsub>
   1d488:	4643      	mov	r3, r8
   1d48a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1d48c:	3330      	adds	r3, #48	; 0x30
   1d48e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1d490:	7013      	strb	r3, [r2, #0]
   1d492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d494:	1c04      	adds	r4, r0, #0
   1d496:	1c0d      	adds	r5, r1, #0
   1d498:	3601      	adds	r6, #1
   1d49a:	2b01      	cmp	r3, #1
   1d49c:	d053      	beq.n	1d546 <_dtoa_r+0x61e>
   1d49e:	4a64      	ldr	r2, [pc, #400]	; (1d630 <_dtoa_r+0x708>)
   1d4a0:	4b64      	ldr	r3, [pc, #400]	; (1d634 <_dtoa_r+0x70c>)
   1d4a2:	f003 ffc7 	bl	21434 <__aeabi_dmul>
   1d4a6:	4a64      	ldr	r2, [pc, #400]	; (1d638 <_dtoa_r+0x710>)
   1d4a8:	4b64      	ldr	r3, [pc, #400]	; (1d63c <_dtoa_r+0x714>)
   1d4aa:	1c04      	adds	r4, r0, #0
   1d4ac:	1c0d      	adds	r5, r1, #0
   1d4ae:	f002 f87d 	bl	1f5ac <__aeabi_dcmpeq>
   1d4b2:	2800      	cmp	r0, #0
   1d4b4:	d000      	beq.n	1d4b8 <_dtoa_r+0x590>
   1d4b6:	e777      	b.n	1d3a8 <_dtoa_r+0x480>
   1d4b8:	990d      	ldr	r1, [sp, #52]	; 0x34
   1d4ba:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1d4bc:	4689      	mov	r9, r1
   1d4be:	990a      	ldr	r1, [sp, #40]	; 0x28
   1d4c0:	3702      	adds	r7, #2
   1d4c2:	4652      	mov	r2, sl
   1d4c4:	465b      	mov	r3, fp
   1d4c6:	46ba      	mov	sl, r7
   1d4c8:	4489      	add	r9, r1
   1d4ca:	9302      	str	r3, [sp, #8]
   1d4cc:	9207      	str	r2, [sp, #28]
   1d4ce:	9e04      	ldr	r6, [sp, #16]
   1d4d0:	9f05      	ldr	r7, [sp, #20]
   1d4d2:	e012      	b.n	1d4fa <_dtoa_r+0x5d2>
   1d4d4:	1c10      	adds	r0, r2, #0
   1d4d6:	1c19      	adds	r1, r3, #0
   1d4d8:	4a55      	ldr	r2, [pc, #340]	; (1d630 <_dtoa_r+0x708>)
   1d4da:	4b56      	ldr	r3, [pc, #344]	; (1d634 <_dtoa_r+0x70c>)
   1d4dc:	f003 ffaa 	bl	21434 <__aeabi_dmul>
   1d4e0:	4a55      	ldr	r2, [pc, #340]	; (1d638 <_dtoa_r+0x710>)
   1d4e2:	4b56      	ldr	r3, [pc, #344]	; (1d63c <_dtoa_r+0x714>)
   1d4e4:	1c0d      	adds	r5, r1, #0
   1d4e6:	1c04      	adds	r4, r0, #0
   1d4e8:	2101      	movs	r1, #1
   1d4ea:	448a      	add	sl, r1
   1d4ec:	1c20      	adds	r0, r4, #0
   1d4ee:	1c29      	adds	r1, r5, #0
   1d4f0:	f002 f85c 	bl	1f5ac <__aeabi_dcmpeq>
   1d4f4:	2800      	cmp	r0, #0
   1d4f6:	d000      	beq.n	1d4fa <_dtoa_r+0x5d2>
   1d4f8:	e2bd      	b.n	1da76 <_dtoa_r+0xb4e>
   1d4fa:	1c32      	adds	r2, r6, #0
   1d4fc:	1c3b      	adds	r3, r7, #0
   1d4fe:	1c20      	adds	r0, r4, #0
   1d500:	1c29      	adds	r1, r5, #0
   1d502:	f003 fb27 	bl	20b54 <__aeabi_ddiv>
   1d506:	f004 fd5d 	bl	21fc4 <__aeabi_d2iz>
   1d50a:	4680      	mov	r8, r0
   1d50c:	f004 fd8e 	bl	2202c <__aeabi_i2d>
   1d510:	1c32      	adds	r2, r6, #0
   1d512:	1c3b      	adds	r3, r7, #0
   1d514:	f003 ff8e 	bl	21434 <__aeabi_dmul>
   1d518:	1c02      	adds	r2, r0, #0
   1d51a:	1c0b      	adds	r3, r1, #0
   1d51c:	1c20      	adds	r0, r4, #0
   1d51e:	1c29      	adds	r1, r5, #0
   1d520:	f004 fa1a 	bl	21958 <__aeabi_dsub>
   1d524:	1c02      	adds	r2, r0, #0
   1d526:	1c0b      	adds	r3, r1, #0
   1d528:	1c04      	adds	r4, r0, #0
   1d52a:	1c0d      	adds	r5, r1, #0
   1d52c:	4640      	mov	r0, r8
   1d52e:	4651      	mov	r1, sl
   1d530:	3901      	subs	r1, #1
   1d532:	3030      	adds	r0, #48	; 0x30
   1d534:	46d3      	mov	fp, sl
   1d536:	7008      	strb	r0, [r1, #0]
   1d538:	45ca      	cmp	sl, r9
   1d53a:	d1cb      	bne.n	1d4d4 <_dtoa_r+0x5ac>
   1d53c:	9a02      	ldr	r2, [sp, #8]
   1d53e:	9b07      	ldr	r3, [sp, #28]
   1d540:	4656      	mov	r6, sl
   1d542:	4693      	mov	fp, r2
   1d544:	469a      	mov	sl, r3
   1d546:	1c22      	adds	r2, r4, #0
   1d548:	1c2b      	adds	r3, r5, #0
   1d54a:	1c20      	adds	r0, r4, #0
   1d54c:	1c29      	adds	r1, r5, #0
   1d54e:	f002 ffdd 	bl	2050c <__aeabi_dadd>
   1d552:	1c04      	adds	r4, r0, #0
   1d554:	1c0d      	adds	r5, r1, #0
   1d556:	1c22      	adds	r2, r4, #0
   1d558:	9804      	ldr	r0, [sp, #16]
   1d55a:	9905      	ldr	r1, [sp, #20]
   1d55c:	1c2b      	adds	r3, r5, #0
   1d55e:	f002 f82b 	bl	1f5b8 <__aeabi_dcmplt>
   1d562:	2800      	cmp	r0, #0
   1d564:	d10c      	bne.n	1d580 <_dtoa_r+0x658>
   1d566:	9804      	ldr	r0, [sp, #16]
   1d568:	9905      	ldr	r1, [sp, #20]
   1d56a:	1c22      	adds	r2, r4, #0
   1d56c:	1c2b      	adds	r3, r5, #0
   1d56e:	f002 f81d 	bl	1f5ac <__aeabi_dcmpeq>
   1d572:	2800      	cmp	r0, #0
   1d574:	d100      	bne.n	1d578 <_dtoa_r+0x650>
   1d576:	e717      	b.n	1d3a8 <_dtoa_r+0x480>
   1d578:	4643      	mov	r3, r8
   1d57a:	07db      	lsls	r3, r3, #31
   1d57c:	d400      	bmi.n	1d580 <_dtoa_r+0x658>
   1d57e:	e713      	b.n	1d3a8 <_dtoa_r+0x480>
   1d580:	1e74      	subs	r4, r6, #1
   1d582:	7825      	ldrb	r5, [r4, #0]
   1d584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1d586:	e006      	b.n	1d596 <_dtoa_r+0x66e>
   1d588:	429c      	cmp	r4, r3
   1d58a:	d100      	bne.n	1d58e <_dtoa_r+0x666>
   1d58c:	e2d5      	b.n	1db3a <_dtoa_r+0xc12>
   1d58e:	3e02      	subs	r6, #2
   1d590:	7835      	ldrb	r5, [r6, #0]
   1d592:	1c26      	adds	r6, r4, #0
   1d594:	3c01      	subs	r4, #1
   1d596:	2d39      	cmp	r5, #57	; 0x39
   1d598:	d0f6      	beq.n	1d588 <_dtoa_r+0x660>
   1d59a:	3501      	adds	r5, #1
   1d59c:	b2ed      	uxtb	r5, r5
   1d59e:	7025      	strb	r5, [r4, #0]
   1d5a0:	e702      	b.n	1d3a8 <_dtoa_r+0x480>
   1d5a2:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1d5a4:	2c00      	cmp	r4, #0
   1d5a6:	d059      	beq.n	1d65c <_dtoa_r+0x734>
   1d5a8:	9d26      	ldr	r5, [sp, #152]	; 0x98
   1d5aa:	2d01      	cmp	r5, #1
   1d5ac:	dc00      	bgt.n	1d5b0 <_dtoa_r+0x688>
   1d5ae:	e1d5      	b.n	1d95c <_dtoa_r+0xa34>
   1d5b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1d5b2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1d5b4:	3c01      	subs	r4, #1
   1d5b6:	42a5      	cmp	r5, r4
   1d5b8:	da00      	bge.n	1d5bc <_dtoa_r+0x694>
   1d5ba:	e29e      	b.n	1dafa <_dtoa_r+0xbd2>
   1d5bc:	1b2c      	subs	r4, r5, r4
   1d5be:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1d5c0:	2d00      	cmp	r5, #0
   1d5c2:	da00      	bge.n	1d5c6 <_dtoa_r+0x69e>
   1d5c4:	e3a6      	b.n	1dd14 <_dtoa_r+0xdec>
   1d5c6:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1d5c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d5ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1d5cc:	4650      	mov	r0, sl
   1d5ce:	18ed      	adds	r5, r5, r3
   1d5d0:	2101      	movs	r1, #1
   1d5d2:	9509      	str	r5, [sp, #36]	; 0x24
   1d5d4:	4499      	add	r9, r3
   1d5d6:	f001 faa1 	bl	1eb1c <__i2b>
   1d5da:	1c07      	adds	r7, r0, #0
   1d5dc:	e041      	b.n	1d662 <_dtoa_r+0x73a>
   1d5de:	2010      	movs	r0, #16
   1d5e0:	f7fd feb4 	bl	1b34c <malloc>
   1d5e4:	4651      	mov	r1, sl
   1d5e6:	6248      	str	r0, [r1, #36]	; 0x24
   1d5e8:	6044      	str	r4, [r0, #4]
   1d5ea:	6084      	str	r4, [r0, #8]
   1d5ec:	6004      	str	r4, [r0, #0]
   1d5ee:	60c4      	str	r4, [r0, #12]
   1d5f0:	e4b8      	b.n	1cf64 <_dtoa_r+0x3c>
   1d5f2:	464d      	mov	r5, r9
   1d5f4:	426d      	negs	r5, r5
   1d5f6:	9509      	str	r5, [sp, #36]	; 0x24
   1d5f8:	46a1      	mov	r9, r4
   1d5fa:	e55a      	b.n	1d0b2 <_dtoa_r+0x18a>
   1d5fc:	9808      	ldr	r0, [sp, #32]
   1d5fe:	f004 fd15 	bl	2202c <__aeabi_i2d>
   1d602:	1c2b      	adds	r3, r5, #0
   1d604:	1c22      	adds	r2, r4, #0
   1d606:	f001 ffd1 	bl	1f5ac <__aeabi_dcmpeq>
   1d60a:	9d08      	ldr	r5, [sp, #32]
   1d60c:	4243      	negs	r3, r0
   1d60e:	4143      	adcs	r3, r0
   1d610:	1aed      	subs	r5, r5, r3
   1d612:	9508      	str	r5, [sp, #32]
   1d614:	e531      	b.n	1d07a <_dtoa_r+0x152>
   1d616:	9d08      	ldr	r5, [sp, #32]
   1d618:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1d61a:	1b64      	subs	r4, r4, r5
   1d61c:	9409      	str	r4, [sp, #36]	; 0x24
   1d61e:	426c      	negs	r4, r5
   1d620:	2500      	movs	r5, #0
   1d622:	940b      	str	r4, [sp, #44]	; 0x2c
   1d624:	950c      	str	r5, [sp, #48]	; 0x30
   1d626:	e54c      	b.n	1d0c2 <_dtoa_r+0x19a>
   1d628:	00000000 	.word	0x00000000
   1d62c:	3ff00000 	.word	0x3ff00000
   1d630:	00000000 	.word	0x00000000
   1d634:	40240000 	.word	0x40240000
	...
   1d640:	000270fc 	.word	0x000270fc
   1d644:	fffffbef 	.word	0xfffffbef
   1d648:	fffffc0e 	.word	0xfffffc0e
   1d64c:	00000412 	.word	0x00000412
   1d650:	fe100000 	.word	0xfe100000
   1d654:	00026fb8 	.word	0x00026fb8
   1d658:	00027188 	.word	0x00027188
   1d65c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1d65e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1d660:	2700      	movs	r7, #0
   1d662:	2e00      	cmp	r6, #0
   1d664:	d00d      	beq.n	1d682 <_dtoa_r+0x75a>
   1d666:	4649      	mov	r1, r9
   1d668:	2900      	cmp	r1, #0
   1d66a:	dd0a      	ble.n	1d682 <_dtoa_r+0x75a>
   1d66c:	464b      	mov	r3, r9
   1d66e:	45b1      	cmp	r9, r6
   1d670:	dd00      	ble.n	1d674 <_dtoa_r+0x74c>
   1d672:	e140      	b.n	1d8f6 <_dtoa_r+0x9ce>
   1d674:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1d676:	4649      	mov	r1, r9
   1d678:	1aed      	subs	r5, r5, r3
   1d67a:	1ac9      	subs	r1, r1, r3
   1d67c:	9509      	str	r5, [sp, #36]	; 0x24
   1d67e:	1af6      	subs	r6, r6, r3
   1d680:	4689      	mov	r9, r1
   1d682:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1d684:	2d00      	cmp	r5, #0
   1d686:	dd1a      	ble.n	1d6be <_dtoa_r+0x796>
   1d688:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1d68a:	2d00      	cmp	r5, #0
   1d68c:	d100      	bne.n	1d690 <_dtoa_r+0x768>
   1d68e:	e229      	b.n	1dae4 <_dtoa_r+0xbbc>
   1d690:	2c00      	cmp	r4, #0
   1d692:	dd10      	ble.n	1d6b6 <_dtoa_r+0x78e>
   1d694:	1c39      	adds	r1, r7, #0
   1d696:	1c22      	adds	r2, r4, #0
   1d698:	4650      	mov	r0, sl
   1d69a:	f001 faeb 	bl	1ec74 <__pow5mult>
   1d69e:	1c07      	adds	r7, r0, #0
   1d6a0:	465a      	mov	r2, fp
   1d6a2:	1c39      	adds	r1, r7, #0
   1d6a4:	4650      	mov	r0, sl
   1d6a6:	f001 fa43 	bl	1eb30 <__multiply>
   1d6aa:	4659      	mov	r1, fp
   1d6ac:	1c05      	adds	r5, r0, #0
   1d6ae:	4650      	mov	r0, sl
   1d6b0:	f001 f934 	bl	1e91c <_Bfree>
   1d6b4:	46ab      	mov	fp, r5
   1d6b6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1d6b8:	1b2a      	subs	r2, r5, r4
   1d6ba:	d000      	beq.n	1d6be <_dtoa_r+0x796>
   1d6bc:	e148      	b.n	1d950 <_dtoa_r+0xa28>
   1d6be:	4650      	mov	r0, sl
   1d6c0:	2101      	movs	r1, #1
   1d6c2:	f001 fa2b 	bl	1eb1c <__i2b>
   1d6c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1d6c8:	4680      	mov	r8, r0
   1d6ca:	2c00      	cmp	r4, #0
   1d6cc:	dd05      	ble.n	1d6da <_dtoa_r+0x7b2>
   1d6ce:	4641      	mov	r1, r8
   1d6d0:	4650      	mov	r0, sl
   1d6d2:	1c22      	adds	r2, r4, #0
   1d6d4:	f001 face 	bl	1ec74 <__pow5mult>
   1d6d8:	4680      	mov	r8, r0
   1d6da:	9d26      	ldr	r5, [sp, #152]	; 0x98
   1d6dc:	2400      	movs	r4, #0
   1d6de:	2d01      	cmp	r5, #1
   1d6e0:	dc00      	bgt.n	1d6e4 <_dtoa_r+0x7bc>
   1d6e2:	e18f      	b.n	1da04 <_dtoa_r+0xadc>
   1d6e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1d6e6:	2301      	movs	r3, #1
   1d6e8:	2d00      	cmp	r5, #0
   1d6ea:	d000      	beq.n	1d6ee <_dtoa_r+0x7c6>
   1d6ec:	e175      	b.n	1d9da <_dtoa_r+0xab2>
   1d6ee:	444b      	add	r3, r9
   1d6f0:	221f      	movs	r2, #31
   1d6f2:	4013      	ands	r3, r2
   1d6f4:	d100      	bne.n	1d6f8 <_dtoa_r+0x7d0>
   1d6f6:	e09f      	b.n	1d838 <_dtoa_r+0x910>
   1d6f8:	2220      	movs	r2, #32
   1d6fa:	1ad2      	subs	r2, r2, r3
   1d6fc:	2a04      	cmp	r2, #4
   1d6fe:	dc00      	bgt.n	1d702 <_dtoa_r+0x7da>
   1d700:	e3a5      	b.n	1de4e <_dtoa_r+0xf26>
   1d702:	221c      	movs	r2, #28
   1d704:	1ad3      	subs	r3, r2, r3
   1d706:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1d708:	18f6      	adds	r6, r6, r3
   1d70a:	18ed      	adds	r5, r5, r3
   1d70c:	9509      	str	r5, [sp, #36]	; 0x24
   1d70e:	4499      	add	r9, r3
   1d710:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1d712:	2d00      	cmp	r5, #0
   1d714:	dd05      	ble.n	1d722 <_dtoa_r+0x7fa>
   1d716:	4659      	mov	r1, fp
   1d718:	4650      	mov	r0, sl
   1d71a:	1c2a      	adds	r2, r5, #0
   1d71c:	f001 fb0c 	bl	1ed38 <__lshift>
   1d720:	4683      	mov	fp, r0
   1d722:	4649      	mov	r1, r9
   1d724:	2900      	cmp	r1, #0
   1d726:	dd05      	ble.n	1d734 <_dtoa_r+0x80c>
   1d728:	4641      	mov	r1, r8
   1d72a:	4650      	mov	r0, sl
   1d72c:	464a      	mov	r2, r9
   1d72e:	f001 fb03 	bl	1ed38 <__lshift>
   1d732:	4680      	mov	r8, r0
   1d734:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1d736:	2d00      	cmp	r5, #0
   1d738:	d000      	beq.n	1d73c <_dtoa_r+0x814>
   1d73a:	e12f      	b.n	1d99c <_dtoa_r+0xa74>
   1d73c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1d73e:	2d00      	cmp	r5, #0
   1d740:	dc00      	bgt.n	1d744 <_dtoa_r+0x81c>
   1d742:	e172      	b.n	1da2a <_dtoa_r+0xb02>
   1d744:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1d746:	2d00      	cmp	r5, #0
   1d748:	d100      	bne.n	1d74c <_dtoa_r+0x824>
   1d74a:	e080      	b.n	1d84e <_dtoa_r+0x926>
   1d74c:	2e00      	cmp	r6, #0
   1d74e:	dd05      	ble.n	1d75c <_dtoa_r+0x834>
   1d750:	1c39      	adds	r1, r7, #0
   1d752:	4650      	mov	r0, sl
   1d754:	1c32      	adds	r2, r6, #0
   1d756:	f001 faef 	bl	1ed38 <__lshift>
   1d75a:	1c07      	adds	r7, r0, #0
   1d75c:	46b9      	mov	r9, r7
   1d75e:	2c00      	cmp	r4, #0
   1d760:	d000      	beq.n	1d764 <_dtoa_r+0x83c>
   1d762:	e232      	b.n	1dbca <_dtoa_r+0xca2>
   1d764:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1d766:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1d768:	1c23      	adds	r3, r4, #0
   1d76a:	3b01      	subs	r3, #1
   1d76c:	195b      	adds	r3, r3, r5
   1d76e:	9d02      	ldr	r5, [sp, #8]
   1d770:	930c      	str	r3, [sp, #48]	; 0x30
   1d772:	2301      	movs	r3, #1
   1d774:	401d      	ands	r5, r3
   1d776:	4642      	mov	r2, r8
   1d778:	9502      	str	r5, [sp, #8]
   1d77a:	46a0      	mov	r8, r4
   1d77c:	465d      	mov	r5, fp
   1d77e:	9207      	str	r2, [sp, #28]
   1d780:	4654      	mov	r4, sl
   1d782:	9907      	ldr	r1, [sp, #28]
   1d784:	1c28      	adds	r0, r5, #0
   1d786:	f7ff fb27 	bl	1cdd8 <quorem>
   1d78a:	1c03      	adds	r3, r0, #0
   1d78c:	3330      	adds	r3, #48	; 0x30
   1d78e:	900a      	str	r0, [sp, #40]	; 0x28
   1d790:	1c39      	adds	r1, r7, #0
   1d792:	1c28      	adds	r0, r5, #0
   1d794:	9309      	str	r3, [sp, #36]	; 0x24
   1d796:	f001 fb2b 	bl	1edf0 <__mcmp>
   1d79a:	9907      	ldr	r1, [sp, #28]
   1d79c:	4682      	mov	sl, r0
   1d79e:	464a      	mov	r2, r9
   1d7a0:	1c20      	adds	r0, r4, #0
   1d7a2:	f001 fb41 	bl	1ee28 <__mdiff>
   1d7a6:	68c1      	ldr	r1, [r0, #12]
   1d7a8:	1c06      	adds	r6, r0, #0
   1d7aa:	2900      	cmp	r1, #0
   1d7ac:	d000      	beq.n	1d7b0 <_dtoa_r+0x888>
   1d7ae:	e0e4      	b.n	1d97a <_dtoa_r+0xa52>
   1d7b0:	1c28      	adds	r0, r5, #0
   1d7b2:	1c31      	adds	r1, r6, #0
   1d7b4:	f001 fb1c 	bl	1edf0 <__mcmp>
   1d7b8:	4683      	mov	fp, r0
   1d7ba:	1c31      	adds	r1, r6, #0
   1d7bc:	1c20      	adds	r0, r4, #0
   1d7be:	f001 f8ad 	bl	1e91c <_Bfree>
   1d7c2:	9926      	ldr	r1, [sp, #152]	; 0x98
   1d7c4:	465b      	mov	r3, fp
   1d7c6:	430b      	orrs	r3, r1
   1d7c8:	d103      	bne.n	1d7d2 <_dtoa_r+0x8aa>
   1d7ca:	9a02      	ldr	r2, [sp, #8]
   1d7cc:	2a00      	cmp	r2, #0
   1d7ce:	d100      	bne.n	1d7d2 <_dtoa_r+0x8aa>
   1d7d0:	e2fd      	b.n	1ddce <_dtoa_r+0xea6>
   1d7d2:	4651      	mov	r1, sl
   1d7d4:	2900      	cmp	r1, #0
   1d7d6:	da00      	bge.n	1d7da <_dtoa_r+0x8b2>
   1d7d8:	e266      	b.n	1dca8 <_dtoa_r+0xd80>
   1d7da:	9926      	ldr	r1, [sp, #152]	; 0x98
   1d7dc:	4653      	mov	r3, sl
   1d7de:	430b      	orrs	r3, r1
   1d7e0:	d103      	bne.n	1d7ea <_dtoa_r+0x8c2>
   1d7e2:	9a02      	ldr	r2, [sp, #8]
   1d7e4:	2a00      	cmp	r2, #0
   1d7e6:	d100      	bne.n	1d7ea <_dtoa_r+0x8c2>
   1d7e8:	e300      	b.n	1ddec <_dtoa_r+0xec4>
   1d7ea:	4659      	mov	r1, fp
   1d7ec:	2900      	cmp	r1, #0
   1d7ee:	dd00      	ble.n	1d7f2 <_dtoa_r+0x8ca>
   1d7f0:	e27a      	b.n	1dce8 <_dtoa_r+0xdc0>
   1d7f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d7f4:	4641      	mov	r1, r8
   1d7f6:	700a      	strb	r2, [r1, #0]
   1d7f8:	990c      	ldr	r1, [sp, #48]	; 0x30
   1d7fa:	4646      	mov	r6, r8
   1d7fc:	3601      	adds	r6, #1
   1d7fe:	4588      	cmp	r8, r1
   1d800:	d100      	bne.n	1d804 <_dtoa_r+0x8dc>
   1d802:	e280      	b.n	1dd06 <_dtoa_r+0xdde>
   1d804:	1c29      	adds	r1, r5, #0
   1d806:	220a      	movs	r2, #10
   1d808:	2300      	movs	r3, #0
   1d80a:	1c20      	adds	r0, r4, #0
   1d80c:	f001 f8a0 	bl	1e950 <__multadd>
   1d810:	1c39      	adds	r1, r7, #0
   1d812:	1c05      	adds	r5, r0, #0
   1d814:	220a      	movs	r2, #10
   1d816:	1c20      	adds	r0, r4, #0
   1d818:	2300      	movs	r3, #0
   1d81a:	454f      	cmp	r7, r9
   1d81c:	d100      	bne.n	1d820 <_dtoa_r+0x8f8>
   1d81e:	e0a6      	b.n	1d96e <_dtoa_r+0xa46>
   1d820:	f001 f896 	bl	1e950 <__multadd>
   1d824:	4649      	mov	r1, r9
   1d826:	1c07      	adds	r7, r0, #0
   1d828:	220a      	movs	r2, #10
   1d82a:	1c20      	adds	r0, r4, #0
   1d82c:	2300      	movs	r3, #0
   1d82e:	f001 f88f 	bl	1e950 <__multadd>
   1d832:	46b0      	mov	r8, r6
   1d834:	4681      	mov	r9, r0
   1d836:	e7a4      	b.n	1d782 <_dtoa_r+0x85a>
   1d838:	231c      	movs	r3, #28
   1d83a:	e764      	b.n	1d706 <_dtoa_r+0x7de>
   1d83c:	2500      	movs	r5, #0
   1d83e:	9511      	str	r5, [sp, #68]	; 0x44
   1d840:	e430      	b.n	1d0a4 <_dtoa_r+0x17c>
   1d842:	48c7      	ldr	r0, [pc, #796]	; (1db60 <_dtoa_r+0xc38>)
   1d844:	9902      	ldr	r1, [sp, #8]
   1d846:	1b40      	subs	r0, r0, r5
   1d848:	4081      	lsls	r1, r0
   1d84a:	1c08      	adds	r0, r1, #0
   1d84c:	e5d2      	b.n	1d3f4 <_dtoa_r+0x4cc>
   1d84e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1d850:	46b9      	mov	r9, r7
   1d852:	2400      	movs	r4, #0
   1d854:	4647      	mov	r7, r8
   1d856:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1d858:	465d      	mov	r5, fp
   1d85a:	4690      	mov	r8, r2
   1d85c:	e006      	b.n	1d86c <_dtoa_r+0x944>
   1d85e:	1c29      	adds	r1, r5, #0
   1d860:	4650      	mov	r0, sl
   1d862:	220a      	movs	r2, #10
   1d864:	2300      	movs	r3, #0
   1d866:	f001 f873 	bl	1e950 <__multadd>
   1d86a:	1c05      	adds	r5, r0, #0
   1d86c:	1c39      	adds	r1, r7, #0
   1d86e:	1c28      	adds	r0, r5, #0
   1d870:	f7ff fab2 	bl	1cdd8 <quorem>
   1d874:	1c03      	adds	r3, r0, #0
   1d876:	3330      	adds	r3, #48	; 0x30
   1d878:	4641      	mov	r1, r8
   1d87a:	550b      	strb	r3, [r1, r4]
   1d87c:	3401      	adds	r4, #1
   1d87e:	42a6      	cmp	r6, r4
   1d880:	dced      	bgt.n	1d85e <_dtoa_r+0x936>
   1d882:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1d884:	46b8      	mov	r8, r7
   1d886:	9309      	str	r3, [sp, #36]	; 0x24
   1d888:	46ab      	mov	fp, r5
   1d88a:	464f      	mov	r7, r9
   1d88c:	2e00      	cmp	r6, #0
   1d88e:	dc00      	bgt.n	1d892 <_dtoa_r+0x96a>
   1d890:	e244      	b.n	1dd1c <_dtoa_r+0xdf4>
   1d892:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1d894:	2500      	movs	r5, #0
   1d896:	19a6      	adds	r6, r4, r6
   1d898:	4659      	mov	r1, fp
   1d89a:	4650      	mov	r0, sl
   1d89c:	2201      	movs	r2, #1
   1d89e:	f001 fa4b 	bl	1ed38 <__lshift>
   1d8a2:	4641      	mov	r1, r8
   1d8a4:	4683      	mov	fp, r0
   1d8a6:	f001 faa3 	bl	1edf0 <__mcmp>
   1d8aa:	2800      	cmp	r0, #0
   1d8ac:	dc00      	bgt.n	1d8b0 <_dtoa_r+0x988>
   1d8ae:	e134      	b.n	1db1a <_dtoa_r+0xbf2>
   1d8b0:	1e74      	subs	r4, r6, #1
   1d8b2:	7823      	ldrb	r3, [r4, #0]
   1d8b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1d8b6:	e006      	b.n	1d8c6 <_dtoa_r+0x99e>
   1d8b8:	4294      	cmp	r4, r2
   1d8ba:	d100      	bne.n	1d8be <_dtoa_r+0x996>
   1d8bc:	e0d4      	b.n	1da68 <_dtoa_r+0xb40>
   1d8be:	3e02      	subs	r6, #2
   1d8c0:	7833      	ldrb	r3, [r6, #0]
   1d8c2:	1c26      	adds	r6, r4, #0
   1d8c4:	3c01      	subs	r4, #1
   1d8c6:	2b39      	cmp	r3, #57	; 0x39
   1d8c8:	d0f6      	beq.n	1d8b8 <_dtoa_r+0x990>
   1d8ca:	3301      	adds	r3, #1
   1d8cc:	7023      	strb	r3, [r4, #0]
   1d8ce:	4650      	mov	r0, sl
   1d8d0:	4641      	mov	r1, r8
   1d8d2:	f001 f823 	bl	1e91c <_Bfree>
   1d8d6:	2f00      	cmp	r7, #0
   1d8d8:	d100      	bne.n	1d8dc <_dtoa_r+0x9b4>
   1d8da:	e565      	b.n	1d3a8 <_dtoa_r+0x480>
   1d8dc:	2d00      	cmp	r5, #0
   1d8de:	d005      	beq.n	1d8ec <_dtoa_r+0x9c4>
   1d8e0:	42bd      	cmp	r5, r7
   1d8e2:	d003      	beq.n	1d8ec <_dtoa_r+0x9c4>
   1d8e4:	4650      	mov	r0, sl
   1d8e6:	1c29      	adds	r1, r5, #0
   1d8e8:	f001 f818 	bl	1e91c <_Bfree>
   1d8ec:	4650      	mov	r0, sl
   1d8ee:	1c39      	adds	r1, r7, #0
   1d8f0:	f001 f814 	bl	1e91c <_Bfree>
   1d8f4:	e558      	b.n	1d3a8 <_dtoa_r+0x480>
   1d8f6:	1c33      	adds	r3, r6, #0
   1d8f8:	e6bc      	b.n	1d674 <_dtoa_r+0x74c>
   1d8fa:	2401      	movs	r4, #1
   1d8fc:	9410      	str	r4, [sp, #64]	; 0x40
   1d8fe:	9927      	ldr	r1, [sp, #156]	; 0x9c
   1d900:	2900      	cmp	r1, #0
   1d902:	dd3d      	ble.n	1d980 <_dtoa_r+0xa58>
   1d904:	1c0c      	adds	r4, r1, #0
   1d906:	9112      	str	r1, [sp, #72]	; 0x48
   1d908:	910a      	str	r1, [sp, #40]	; 0x28
   1d90a:	f7ff fc01 	bl	1d110 <_dtoa_r+0x1e8>
   1d90e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1d910:	2c00      	cmp	r4, #0
   1d912:	dd00      	ble.n	1d916 <_dtoa_r+0x9ee>
   1d914:	e5a1      	b.n	1d45a <_dtoa_r+0x532>
   1d916:	d000      	beq.n	1d91a <_dtoa_r+0x9f2>
   1d918:	e28b      	b.n	1de32 <_dtoa_r+0xf0a>
   1d91a:	4b8e      	ldr	r3, [pc, #568]	; (1db54 <_dtoa_r+0xc2c>)
   1d91c:	4a8c      	ldr	r2, [pc, #560]	; (1db50 <_dtoa_r+0xc28>)
   1d91e:	9804      	ldr	r0, [sp, #16]
   1d920:	9905      	ldr	r1, [sp, #20]
   1d922:	f003 fd87 	bl	21434 <__aeabi_dmul>
   1d926:	9a02      	ldr	r2, [sp, #8]
   1d928:	9b03      	ldr	r3, [sp, #12]
   1d92a:	f001 fe63 	bl	1f5f4 <__aeabi_dcmpge>
   1d92e:	2800      	cmp	r0, #0
   1d930:	d100      	bne.n	1d934 <_dtoa_r+0xa0c>
   1d932:	e0fe      	b.n	1db32 <_dtoa_r+0xc0a>
   1d934:	2200      	movs	r2, #0
   1d936:	4690      	mov	r8, r2
   1d938:	2700      	movs	r7, #0
   1d93a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   1d93c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1d93e:	43e4      	mvns	r4, r4
   1d940:	9408      	str	r4, [sp, #32]
   1d942:	4650      	mov	r0, sl
   1d944:	4641      	mov	r1, r8
   1d946:	f000 ffe9 	bl	1e91c <_Bfree>
   1d94a:	2f00      	cmp	r7, #0
   1d94c:	d1ce      	bne.n	1d8ec <_dtoa_r+0x9c4>
   1d94e:	e52b      	b.n	1d3a8 <_dtoa_r+0x480>
   1d950:	4659      	mov	r1, fp
   1d952:	4650      	mov	r0, sl
   1d954:	f001 f98e 	bl	1ec74 <__pow5mult>
   1d958:	4683      	mov	fp, r0
   1d95a:	e6b0      	b.n	1d6be <_dtoa_r+0x796>
   1d95c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   1d95e:	2c00      	cmp	r4, #0
   1d960:	d100      	bne.n	1d964 <_dtoa_r+0xa3c>
   1d962:	e1dd      	b.n	1dd20 <_dtoa_r+0xdf8>
   1d964:	4d7f      	ldr	r5, [pc, #508]	; (1db64 <_dtoa_r+0xc3c>)
   1d966:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1d968:	195b      	adds	r3, r3, r5
   1d96a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1d96c:	e62d      	b.n	1d5ca <_dtoa_r+0x6a2>
   1d96e:	f000 ffef 	bl	1e950 <__multadd>
   1d972:	46b0      	mov	r8, r6
   1d974:	1c07      	adds	r7, r0, #0
   1d976:	4681      	mov	r9, r0
   1d978:	e703      	b.n	1d782 <_dtoa_r+0x85a>
   1d97a:	2201      	movs	r2, #1
   1d97c:	4693      	mov	fp, r2
   1d97e:	e71c      	b.n	1d7ba <_dtoa_r+0x892>
   1d980:	2301      	movs	r3, #1
   1d982:	2101      	movs	r1, #1
   1d984:	2201      	movs	r2, #1
   1d986:	2401      	movs	r4, #1
   1d988:	9312      	str	r3, [sp, #72]	; 0x48
   1d98a:	910a      	str	r1, [sp, #40]	; 0x28
   1d98c:	9227      	str	r2, [sp, #156]	; 0x9c
   1d98e:	4653      	mov	r3, sl
   1d990:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   1d992:	2300      	movs	r3, #0
   1d994:	6073      	str	r3, [r6, #4]
   1d996:	2100      	movs	r1, #0
   1d998:	f7ff fbcb 	bl	1d132 <_dtoa_r+0x20a>
   1d99c:	4658      	mov	r0, fp
   1d99e:	4641      	mov	r1, r8
   1d9a0:	f001 fa26 	bl	1edf0 <__mcmp>
   1d9a4:	2800      	cmp	r0, #0
   1d9a6:	db00      	blt.n	1d9aa <_dtoa_r+0xa82>
   1d9a8:	e6c8      	b.n	1d73c <_dtoa_r+0x814>
   1d9aa:	9d08      	ldr	r5, [sp, #32]
   1d9ac:	4659      	mov	r1, fp
   1d9ae:	3d01      	subs	r5, #1
   1d9b0:	4650      	mov	r0, sl
   1d9b2:	220a      	movs	r2, #10
   1d9b4:	2300      	movs	r3, #0
   1d9b6:	9508      	str	r5, [sp, #32]
   1d9b8:	f000 ffca 	bl	1e950 <__multadd>
   1d9bc:	9d12      	ldr	r5, [sp, #72]	; 0x48
   1d9be:	4683      	mov	fp, r0
   1d9c0:	950a      	str	r5, [sp, #40]	; 0x28
   1d9c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1d9c4:	2d00      	cmp	r5, #0
   1d9c6:	d100      	bne.n	1d9ca <_dtoa_r+0xaa2>
   1d9c8:	e6b8      	b.n	1d73c <_dtoa_r+0x814>
   1d9ca:	1c39      	adds	r1, r7, #0
   1d9cc:	4650      	mov	r0, sl
   1d9ce:	220a      	movs	r2, #10
   1d9d0:	2300      	movs	r3, #0
   1d9d2:	f000 ffbd 	bl	1e950 <__multadd>
   1d9d6:	1c07      	adds	r7, r0, #0
   1d9d8:	e6b0      	b.n	1d73c <_dtoa_r+0x814>
   1d9da:	4641      	mov	r1, r8
   1d9dc:	690b      	ldr	r3, [r1, #16]
   1d9de:	3303      	adds	r3, #3
   1d9e0:	009b      	lsls	r3, r3, #2
   1d9e2:	4443      	add	r3, r8
   1d9e4:	6858      	ldr	r0, [r3, #4]
   1d9e6:	f001 f84d 	bl	1ea84 <__hi0bits>
   1d9ea:	2320      	movs	r3, #32
   1d9ec:	1a1b      	subs	r3, r3, r0
   1d9ee:	e67e      	b.n	1d6ee <_dtoa_r+0x7c6>
   1d9f0:	980d      	ldr	r0, [sp, #52]	; 0x34
   1d9f2:	f7ff fad5 	bl	1cfa0 <_dtoa_r+0x78>
   1d9f6:	2400      	movs	r4, #0
   1d9f8:	9410      	str	r4, [sp, #64]	; 0x40
   1d9fa:	9c26      	ldr	r4, [sp, #152]	; 0x98
   1d9fc:	2c02      	cmp	r4, #2
   1d9fe:	d100      	bne.n	1da02 <_dtoa_r+0xada>
   1da00:	e77d      	b.n	1d8fe <_dtoa_r+0x9d6>
   1da02:	e503      	b.n	1d40c <_dtoa_r+0x4e4>
   1da04:	9902      	ldr	r1, [sp, #8]
   1da06:	2900      	cmp	r1, #0
   1da08:	d000      	beq.n	1da0c <_dtoa_r+0xae4>
   1da0a:	e66b      	b.n	1d6e4 <_dtoa_r+0x7bc>
   1da0c:	9a03      	ldr	r2, [sp, #12]
   1da0e:	0313      	lsls	r3, r2, #12
   1da10:	d000      	beq.n	1da14 <_dtoa_r+0xaec>
   1da12:	e667      	b.n	1d6e4 <_dtoa_r+0x7bc>
   1da14:	4b54      	ldr	r3, [pc, #336]	; (1db68 <_dtoa_r+0xc40>)
   1da16:	4213      	tst	r3, r2
   1da18:	d100      	bne.n	1da1c <_dtoa_r+0xaf4>
   1da1a:	e663      	b.n	1d6e4 <_dtoa_r+0x7bc>
   1da1c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1da1e:	2501      	movs	r5, #1
   1da20:	3401      	adds	r4, #1
   1da22:	9409      	str	r4, [sp, #36]	; 0x24
   1da24:	44a9      	add	r9, r5
   1da26:	2401      	movs	r4, #1
   1da28:	e65c      	b.n	1d6e4 <_dtoa_r+0x7bc>
   1da2a:	9d26      	ldr	r5, [sp, #152]	; 0x98
   1da2c:	2d02      	cmp	r5, #2
   1da2e:	dc00      	bgt.n	1da32 <_dtoa_r+0xb0a>
   1da30:	e688      	b.n	1d744 <_dtoa_r+0x81c>
   1da32:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1da34:	2c00      	cmp	r4, #0
   1da36:	d000      	beq.n	1da3a <_dtoa_r+0xb12>
   1da38:	e77f      	b.n	1d93a <_dtoa_r+0xa12>
   1da3a:	4641      	mov	r1, r8
   1da3c:	4650      	mov	r0, sl
   1da3e:	2205      	movs	r2, #5
   1da40:	2300      	movs	r3, #0
   1da42:	f000 ff85 	bl	1e950 <__multadd>
   1da46:	4680      	mov	r8, r0
   1da48:	4641      	mov	r1, r8
   1da4a:	4658      	mov	r0, fp
   1da4c:	f001 f9d0 	bl	1edf0 <__mcmp>
   1da50:	2800      	cmp	r0, #0
   1da52:	dc00      	bgt.n	1da56 <_dtoa_r+0xb2e>
   1da54:	e771      	b.n	1d93a <_dtoa_r+0xa12>
   1da56:	9d08      	ldr	r5, [sp, #32]
   1da58:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1da5a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1da5c:	2331      	movs	r3, #49	; 0x31
   1da5e:	3501      	adds	r5, #1
   1da60:	3601      	adds	r6, #1
   1da62:	7023      	strb	r3, [r4, #0]
   1da64:	9508      	str	r5, [sp, #32]
   1da66:	e76c      	b.n	1d942 <_dtoa_r+0xa1a>
   1da68:	9c08      	ldr	r4, [sp, #32]
   1da6a:	2331      	movs	r3, #49	; 0x31
   1da6c:	3401      	adds	r4, #1
   1da6e:	9408      	str	r4, [sp, #32]
   1da70:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1da72:	7023      	strb	r3, [r4, #0]
   1da74:	e72b      	b.n	1d8ce <_dtoa_r+0x9a6>
   1da76:	9902      	ldr	r1, [sp, #8]
   1da78:	9a07      	ldr	r2, [sp, #28]
   1da7a:	465e      	mov	r6, fp
   1da7c:	4692      	mov	sl, r2
   1da7e:	468b      	mov	fp, r1
   1da80:	e492      	b.n	1d3a8 <_dtoa_r+0x480>
   1da82:	4640      	mov	r0, r8
   1da84:	f004 fad2 	bl	2202c <__aeabi_i2d>
   1da88:	1c02      	adds	r2, r0, #0
   1da8a:	1c0b      	adds	r3, r1, #0
   1da8c:	1c30      	adds	r0, r6, #0
   1da8e:	1c39      	adds	r1, r7, #0
   1da90:	f003 fcd0 	bl	21434 <__aeabi_dmul>
   1da94:	4a30      	ldr	r2, [pc, #192]	; (1db58 <_dtoa_r+0xc30>)
   1da96:	4b31      	ldr	r3, [pc, #196]	; (1db5c <_dtoa_r+0xc34>)
   1da98:	f002 fd38 	bl	2050c <__aeabi_dadd>
   1da9c:	900e      	str	r0, [sp, #56]	; 0x38
   1da9e:	910f      	str	r1, [sp, #60]	; 0x3c
   1daa0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1daa2:	4a32      	ldr	r2, [pc, #200]	; (1db6c <_dtoa_r+0xc44>)
   1daa4:	188a      	adds	r2, r1, r2
   1daa6:	920f      	str	r2, [sp, #60]	; 0x3c
   1daa8:	4b2a      	ldr	r3, [pc, #168]	; (1db54 <_dtoa_r+0xc2c>)
   1daaa:	4a29      	ldr	r2, [pc, #164]	; (1db50 <_dtoa_r+0xc28>)
   1daac:	1c30      	adds	r0, r6, #0
   1daae:	1c39      	adds	r1, r7, #0
   1dab0:	f003 ff52 	bl	21958 <__aeabi_dsub>
   1dab4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1dab6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1dab8:	1c04      	adds	r4, r0, #0
   1daba:	1c0d      	adds	r5, r1, #0
   1dabc:	f001 fd90 	bl	1f5e0 <__aeabi_dcmpgt>
   1dac0:	2800      	cmp	r0, #0
   1dac2:	d136      	bne.n	1db32 <_dtoa_r+0xc0a>
   1dac4:	1c20      	adds	r0, r4, #0
   1dac6:	1c29      	adds	r1, r5, #0
   1dac8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1daca:	2580      	movs	r5, #128	; 0x80
   1dacc:	062d      	lsls	r5, r5, #24
   1dace:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1dad0:	1963      	adds	r3, r4, r5
   1dad2:	f001 fd71 	bl	1f5b8 <__aeabi_dcmplt>
   1dad6:	2800      	cmp	r0, #0
   1dad8:	d100      	bne.n	1dadc <_dtoa_r+0xbb4>
   1dada:	e4ab      	b.n	1d434 <_dtoa_r+0x50c>
   1dadc:	2500      	movs	r5, #0
   1dade:	46a8      	mov	r8, r5
   1dae0:	2700      	movs	r7, #0
   1dae2:	e72a      	b.n	1d93a <_dtoa_r+0xa12>
   1dae4:	4659      	mov	r1, fp
   1dae6:	4650      	mov	r0, sl
   1dae8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1daea:	f001 f8c3 	bl	1ec74 <__pow5mult>
   1daee:	4683      	mov	fp, r0
   1daf0:	e5e5      	b.n	1d6be <_dtoa_r+0x796>
   1daf2:	2400      	movs	r4, #0
   1daf4:	9410      	str	r4, [sp, #64]	; 0x40
   1daf6:	f7ff fb01 	bl	1d0fc <_dtoa_r+0x1d4>
   1dafa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1dafc:	940b      	str	r4, [sp, #44]	; 0x2c
   1dafe:	1b63      	subs	r3, r4, r5
   1db00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1db02:	2400      	movs	r4, #0
   1db04:	18ed      	adds	r5, r5, r3
   1db06:	950c      	str	r5, [sp, #48]	; 0x30
   1db08:	e559      	b.n	1d5be <_dtoa_r+0x696>
   1db0a:	9902      	ldr	r1, [sp, #8]
   1db0c:	9a03      	ldr	r2, [sp, #12]
   1db0e:	910e      	str	r1, [sp, #56]	; 0x38
   1db10:	920f      	str	r2, [sp, #60]	; 0x3c
   1db12:	2202      	movs	r2, #2
   1db14:	4690      	mov	r8, r2
   1db16:	f7ff fb39 	bl	1d18c <_dtoa_r+0x264>
   1db1a:	2800      	cmp	r0, #0
   1db1c:	d104      	bne.n	1db28 <_dtoa_r+0xc00>
   1db1e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1db20:	07e4      	lsls	r4, r4, #31
   1db22:	d501      	bpl.n	1db28 <_dtoa_r+0xc00>
   1db24:	e6c4      	b.n	1d8b0 <_dtoa_r+0x988>
   1db26:	1c1e      	adds	r6, r3, #0
   1db28:	1e73      	subs	r3, r6, #1
   1db2a:	781a      	ldrb	r2, [r3, #0]
   1db2c:	2a30      	cmp	r2, #48	; 0x30
   1db2e:	d0fa      	beq.n	1db26 <_dtoa_r+0xbfe>
   1db30:	e6cd      	b.n	1d8ce <_dtoa_r+0x9a6>
   1db32:	2500      	movs	r5, #0
   1db34:	46a8      	mov	r8, r5
   1db36:	2700      	movs	r7, #0
   1db38:	e78d      	b.n	1da56 <_dtoa_r+0xb2e>
   1db3a:	9d08      	ldr	r5, [sp, #32]
   1db3c:	2330      	movs	r3, #48	; 0x30
   1db3e:	3501      	adds	r5, #1
   1db40:	9508      	str	r5, [sp, #32]
   1db42:	2531      	movs	r5, #49	; 0x31
   1db44:	7023      	strb	r3, [r4, #0]
   1db46:	7025      	strb	r5, [r4, #0]
   1db48:	e42e      	b.n	1d3a8 <_dtoa_r+0x480>
   1db4a:	46c0      	nop			; (mov r8, r8)
   1db4c:	46c0      	nop			; (mov r8, r8)
   1db4e:	46c0      	nop			; (mov r8, r8)
   1db50:	00000000 	.word	0x00000000
   1db54:	40140000 	.word	0x40140000
   1db58:	00000000 	.word	0x00000000
   1db5c:	401c0000 	.word	0x401c0000
   1db60:	fffffbee 	.word	0xfffffbee
   1db64:	00000433 	.word	0x00000433
   1db68:	7ff00000 	.word	0x7ff00000
   1db6c:	fcc00000 	.word	0xfcc00000
   1db70:	9d08      	ldr	r5, [sp, #32]
   1db72:	426c      	negs	r4, r5
   1db74:	2c00      	cmp	r4, #0
   1db76:	d100      	bne.n	1db7a <_dtoa_r+0xc52>
   1db78:	e0d8      	b.n	1dd2c <_dtoa_r+0xe04>
   1db7a:	230f      	movs	r3, #15
   1db7c:	4023      	ands	r3, r4
   1db7e:	4abe      	ldr	r2, [pc, #760]	; (1de78 <_dtoa_r+0xf50>)
   1db80:	00db      	lsls	r3, r3, #3
   1db82:	18d3      	adds	r3, r2, r3
   1db84:	9802      	ldr	r0, [sp, #8]
   1db86:	9903      	ldr	r1, [sp, #12]
   1db88:	681a      	ldr	r2, [r3, #0]
   1db8a:	685b      	ldr	r3, [r3, #4]
   1db8c:	f003 fc52 	bl	21434 <__aeabi_dmul>
   1db90:	1124      	asrs	r4, r4, #4
   1db92:	1c06      	adds	r6, r0, #0
   1db94:	1c0f      	adds	r7, r1, #0
   1db96:	2c00      	cmp	r4, #0
   1db98:	d100      	bne.n	1db9c <_dtoa_r+0xc74>
   1db9a:	e14e      	b.n	1de3a <_dtoa_r+0xf12>
   1db9c:	2102      	movs	r1, #2
   1db9e:	4688      	mov	r8, r1
   1dba0:	4db6      	ldr	r5, [pc, #728]	; (1de7c <_dtoa_r+0xf54>)
   1dba2:	1c30      	adds	r0, r6, #0
   1dba4:	1c39      	adds	r1, r7, #0
   1dba6:	4646      	mov	r6, r8
   1dba8:	2201      	movs	r2, #1
   1dbaa:	4222      	tst	r2, r4
   1dbac:	d004      	beq.n	1dbb8 <_dtoa_r+0xc90>
   1dbae:	682a      	ldr	r2, [r5, #0]
   1dbb0:	686b      	ldr	r3, [r5, #4]
   1dbb2:	3601      	adds	r6, #1
   1dbb4:	f003 fc3e 	bl	21434 <__aeabi_dmul>
   1dbb8:	1064      	asrs	r4, r4, #1
   1dbba:	3508      	adds	r5, #8
   1dbbc:	2c00      	cmp	r4, #0
   1dbbe:	d1f3      	bne.n	1dba8 <_dtoa_r+0xc80>
   1dbc0:	46b0      	mov	r8, r6
   1dbc2:	1c0f      	adds	r7, r1, #0
   1dbc4:	1c06      	adds	r6, r0, #0
   1dbc6:	f7ff fafe 	bl	1d1c6 <_dtoa_r+0x29e>
   1dbca:	6879      	ldr	r1, [r7, #4]
   1dbcc:	4650      	mov	r0, sl
   1dbce:	f000 fe6f 	bl	1e8b0 <_Balloc>
   1dbd2:	693a      	ldr	r2, [r7, #16]
   1dbd4:	1c39      	adds	r1, r7, #0
   1dbd6:	3202      	adds	r2, #2
   1dbd8:	1c04      	adds	r4, r0, #0
   1dbda:	0092      	lsls	r2, r2, #2
   1dbdc:	310c      	adds	r1, #12
   1dbde:	300c      	adds	r0, #12
   1dbe0:	f7fd fbc8 	bl	1b374 <memcpy>
   1dbe4:	4650      	mov	r0, sl
   1dbe6:	1c21      	adds	r1, r4, #0
   1dbe8:	2201      	movs	r2, #1
   1dbea:	f001 f8a5 	bl	1ed38 <__lshift>
   1dbee:	4681      	mov	r9, r0
   1dbf0:	e5b8      	b.n	1d764 <_dtoa_r+0x83c>
   1dbf2:	4645      	mov	r5, r8
   1dbf4:	3d01      	subs	r5, #1
   1dbf6:	4aa0      	ldr	r2, [pc, #640]	; (1de78 <_dtoa_r+0xf50>)
   1dbf8:	00eb      	lsls	r3, r5, #3
   1dbfa:	18d3      	adds	r3, r2, r3
   1dbfc:	6818      	ldr	r0, [r3, #0]
   1dbfe:	6859      	ldr	r1, [r3, #4]
   1dc00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1dc02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1dc04:	9514      	str	r5, [sp, #80]	; 0x50
   1dc06:	f003 fc15 	bl	21434 <__aeabi_dmul>
   1dc0a:	9016      	str	r0, [sp, #88]	; 0x58
   1dc0c:	9117      	str	r1, [sp, #92]	; 0x5c
   1dc0e:	1c39      	adds	r1, r7, #0
   1dc10:	1c30      	adds	r0, r6, #0
   1dc12:	f004 f9d7 	bl	21fc4 <__aeabi_d2iz>
   1dc16:	900e      	str	r0, [sp, #56]	; 0x38
   1dc18:	f004 fa08 	bl	2202c <__aeabi_i2d>
   1dc1c:	1c0b      	adds	r3, r1, #0
   1dc1e:	1c02      	adds	r2, r0, #0
   1dc20:	1c39      	adds	r1, r7, #0
   1dc22:	1c30      	adds	r0, r6, #0
   1dc24:	f003 fe98 	bl	21958 <__aeabi_dsub>
   1dc28:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1dc2a:	1c0d      	adds	r5, r1, #0
   1dc2c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1dc2e:	990d      	ldr	r1, [sp, #52]	; 0x34
   1dc30:	3730      	adds	r7, #48	; 0x30
   1dc32:	700f      	strb	r7, [r1, #0]
   1dc34:	3601      	adds	r6, #1
   1dc36:	4441      	add	r1, r8
   1dc38:	4643      	mov	r3, r8
   1dc3a:	1c04      	adds	r4, r0, #0
   1dc3c:	1c37      	adds	r7, r6, #0
   1dc3e:	910e      	str	r1, [sp, #56]	; 0x38
   1dc40:	2b01      	cmp	r3, #1
   1dc42:	d01e      	beq.n	1dc82 <_dtoa_r+0xd5a>
   1dc44:	46b0      	mov	r8, r6
   1dc46:	1c20      	adds	r0, r4, #0
   1dc48:	1c29      	adds	r1, r5, #0
   1dc4a:	4b86      	ldr	r3, [pc, #536]	; (1de64 <_dtoa_r+0xf3c>)
   1dc4c:	4a84      	ldr	r2, [pc, #528]	; (1de60 <_dtoa_r+0xf38>)
   1dc4e:	f003 fbf1 	bl	21434 <__aeabi_dmul>
   1dc52:	1c04      	adds	r4, r0, #0
   1dc54:	1c0d      	adds	r5, r1, #0
   1dc56:	f004 f9b5 	bl	21fc4 <__aeabi_d2iz>
   1dc5a:	1c06      	adds	r6, r0, #0
   1dc5c:	f004 f9e6 	bl	2202c <__aeabi_i2d>
   1dc60:	1c02      	adds	r2, r0, #0
   1dc62:	1c0b      	adds	r3, r1, #0
   1dc64:	1c20      	adds	r0, r4, #0
   1dc66:	1c29      	adds	r1, r5, #0
   1dc68:	f003 fe76 	bl	21958 <__aeabi_dsub>
   1dc6c:	3630      	adds	r6, #48	; 0x30
   1dc6e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1dc70:	703e      	strb	r6, [r7, #0]
   1dc72:	3701      	adds	r7, #1
   1dc74:	42a7      	cmp	r7, r4
   1dc76:	d1e8      	bne.n	1dc4a <_dtoa_r+0xd22>
   1dc78:	1c0d      	adds	r5, r1, #0
   1dc7a:	9914      	ldr	r1, [sp, #80]	; 0x50
   1dc7c:	4646      	mov	r6, r8
   1dc7e:	1c04      	adds	r4, r0, #0
   1dc80:	1876      	adds	r6, r6, r1
   1dc82:	4a79      	ldr	r2, [pc, #484]	; (1de68 <_dtoa_r+0xf40>)
   1dc84:	4b79      	ldr	r3, [pc, #484]	; (1de6c <_dtoa_r+0xf44>)
   1dc86:	9816      	ldr	r0, [sp, #88]	; 0x58
   1dc88:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1dc8a:	f002 fc3f 	bl	2050c <__aeabi_dadd>
   1dc8e:	1c22      	adds	r2, r4, #0
   1dc90:	1c2b      	adds	r3, r5, #0
   1dc92:	f001 fc91 	bl	1f5b8 <__aeabi_dcmplt>
   1dc96:	2800      	cmp	r0, #0
   1dc98:	d100      	bne.n	1dc9c <_dtoa_r+0xd74>
   1dc9a:	e080      	b.n	1dd9e <_dtoa_r+0xe76>
   1dc9c:	9918      	ldr	r1, [sp, #96]	; 0x60
   1dc9e:	1e74      	subs	r4, r6, #1
   1dca0:	7825      	ldrb	r5, [r4, #0]
   1dca2:	9108      	str	r1, [sp, #32]
   1dca4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1dca6:	e476      	b.n	1d596 <_dtoa_r+0x66e>
   1dca8:	9a07      	ldr	r2, [sp, #28]
   1dcaa:	465e      	mov	r6, fp
   1dcac:	46a2      	mov	sl, r4
   1dcae:	46ab      	mov	fp, r5
   1dcb0:	4644      	mov	r4, r8
   1dcb2:	4690      	mov	r8, r2
   1dcb4:	2e00      	cmp	r6, #0
   1dcb6:	dd11      	ble.n	1dcdc <_dtoa_r+0xdb4>
   1dcb8:	4659      	mov	r1, fp
   1dcba:	4650      	mov	r0, sl
   1dcbc:	2201      	movs	r2, #1
   1dcbe:	f001 f83b 	bl	1ed38 <__lshift>
   1dcc2:	4641      	mov	r1, r8
   1dcc4:	4683      	mov	fp, r0
   1dcc6:	f001 f893 	bl	1edf0 <__mcmp>
   1dcca:	2800      	cmp	r0, #0
   1dccc:	dc00      	bgt.n	1dcd0 <_dtoa_r+0xda8>
   1dcce:	e0a8      	b.n	1de22 <_dtoa_r+0xefa>
   1dcd0:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1dcd2:	2d39      	cmp	r5, #57	; 0x39
   1dcd4:	d030      	beq.n	1dd38 <_dtoa_r+0xe10>
   1dcd6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1dcd8:	3531      	adds	r5, #49	; 0x31
   1dcda:	9509      	str	r5, [sp, #36]	; 0x24
   1dcdc:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1dcde:	1c66      	adds	r6, r4, #1
   1dce0:	7025      	strb	r5, [r4, #0]
   1dce2:	1c3d      	adds	r5, r7, #0
   1dce4:	464f      	mov	r7, r9
   1dce6:	e5f2      	b.n	1d8ce <_dtoa_r+0x9a6>
   1dce8:	46ab      	mov	fp, r5
   1dcea:	9a07      	ldr	r2, [sp, #28]
   1dcec:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1dcee:	46a2      	mov	sl, r4
   1dcf0:	4644      	mov	r4, r8
   1dcf2:	4690      	mov	r8, r2
   1dcf4:	2d39      	cmp	r5, #57	; 0x39
   1dcf6:	d01f      	beq.n	1dd38 <_dtoa_r+0xe10>
   1dcf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1dcfa:	1c3d      	adds	r5, r7, #0
   1dcfc:	3301      	adds	r3, #1
   1dcfe:	1c66      	adds	r6, r4, #1
   1dd00:	7023      	strb	r3, [r4, #0]
   1dd02:	464f      	mov	r7, r9
   1dd04:	e5e3      	b.n	1d8ce <_dtoa_r+0x9a6>
   1dd06:	46ab      	mov	fp, r5
   1dd08:	9d07      	ldr	r5, [sp, #28]
   1dd0a:	46a2      	mov	sl, r4
   1dd0c:	46a8      	mov	r8, r5
   1dd0e:	1c3d      	adds	r5, r7, #0
   1dd10:	464f      	mov	r7, r9
   1dd12:	e5c1      	b.n	1d898 <_dtoa_r+0x970>
   1dd14:	9909      	ldr	r1, [sp, #36]	; 0x24
   1dd16:	2300      	movs	r3, #0
   1dd18:	1b4e      	subs	r6, r1, r5
   1dd1a:	e456      	b.n	1d5ca <_dtoa_r+0x6a2>
   1dd1c:	2601      	movs	r6, #1
   1dd1e:	e5b8      	b.n	1d892 <_dtoa_r+0x96a>
   1dd20:	991a      	ldr	r1, [sp, #104]	; 0x68
   1dd22:	2336      	movs	r3, #54	; 0x36
   1dd24:	1a5b      	subs	r3, r3, r1
   1dd26:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1dd28:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1dd2a:	e44e      	b.n	1d5ca <_dtoa_r+0x6a2>
   1dd2c:	2302      	movs	r3, #2
   1dd2e:	9e02      	ldr	r6, [sp, #8]
   1dd30:	9f03      	ldr	r7, [sp, #12]
   1dd32:	4698      	mov	r8, r3
   1dd34:	f7ff fa47 	bl	1d1c6 <_dtoa_r+0x29e>
   1dd38:	2339      	movs	r3, #57	; 0x39
   1dd3a:	1c3d      	adds	r5, r7, #0
   1dd3c:	1c66      	adds	r6, r4, #1
   1dd3e:	7023      	strb	r3, [r4, #0]
   1dd40:	464f      	mov	r7, r9
   1dd42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1dd44:	e5bf      	b.n	1d8c6 <_dtoa_r+0x99e>
   1dd46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1dd48:	2c00      	cmp	r4, #0
   1dd4a:	d100      	bne.n	1dd4e <_dtoa_r+0xe26>
   1dd4c:	e699      	b.n	1da82 <_dtoa_r+0xb5a>
   1dd4e:	9d12      	ldr	r5, [sp, #72]	; 0x48
   1dd50:	2d00      	cmp	r5, #0
   1dd52:	dc01      	bgt.n	1dd58 <_dtoa_r+0xe30>
   1dd54:	f7ff fb6e 	bl	1d434 <_dtoa_r+0x50c>
   1dd58:	9c08      	ldr	r4, [sp, #32]
   1dd5a:	4b42      	ldr	r3, [pc, #264]	; (1de64 <_dtoa_r+0xf3c>)
   1dd5c:	4a40      	ldr	r2, [pc, #256]	; (1de60 <_dtoa_r+0xf38>)
   1dd5e:	1c30      	adds	r0, r6, #0
   1dd60:	1c39      	adds	r1, r7, #0
   1dd62:	3c01      	subs	r4, #1
   1dd64:	9418      	str	r4, [sp, #96]	; 0x60
   1dd66:	f003 fb65 	bl	21434 <__aeabi_dmul>
   1dd6a:	1c06      	adds	r6, r0, #0
   1dd6c:	4640      	mov	r0, r8
   1dd6e:	3001      	adds	r0, #1
   1dd70:	1c0f      	adds	r7, r1, #0
   1dd72:	f004 f95b 	bl	2202c <__aeabi_i2d>
   1dd76:	1c02      	adds	r2, r0, #0
   1dd78:	1c0b      	adds	r3, r1, #0
   1dd7a:	1c30      	adds	r0, r6, #0
   1dd7c:	1c39      	adds	r1, r7, #0
   1dd7e:	f003 fb59 	bl	21434 <__aeabi_dmul>
   1dd82:	4a3b      	ldr	r2, [pc, #236]	; (1de70 <_dtoa_r+0xf48>)
   1dd84:	4b3b      	ldr	r3, [pc, #236]	; (1de74 <_dtoa_r+0xf4c>)
   1dd86:	f002 fbc1 	bl	2050c <__aeabi_dadd>
   1dd8a:	900e      	str	r0, [sp, #56]	; 0x38
   1dd8c:	910f      	str	r1, [sp, #60]	; 0x3c
   1dd8e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1dd90:	493b      	ldr	r1, [pc, #236]	; (1de80 <_dtoa_r+0xf58>)
   1dd92:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1dd94:	1869      	adds	r1, r5, r1
   1dd96:	910f      	str	r1, [sp, #60]	; 0x3c
   1dd98:	4690      	mov	r8, r2
   1dd9a:	f7ff fa3b 	bl	1d214 <_dtoa_r+0x2ec>
   1dd9e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1dda0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1dda2:	4831      	ldr	r0, [pc, #196]	; (1de68 <_dtoa_r+0xf40>)
   1dda4:	4931      	ldr	r1, [pc, #196]	; (1de6c <_dtoa_r+0xf44>)
   1dda6:	f003 fdd7 	bl	21958 <__aeabi_dsub>
   1ddaa:	1c22      	adds	r2, r4, #0
   1ddac:	1c2b      	adds	r3, r5, #0
   1ddae:	f001 fc17 	bl	1f5e0 <__aeabi_dcmpgt>
   1ddb2:	2800      	cmp	r0, #0
   1ddb4:	d101      	bne.n	1ddba <_dtoa_r+0xe92>
   1ddb6:	f7ff fb3d 	bl	1d434 <_dtoa_r+0x50c>
   1ddba:	e000      	b.n	1ddbe <_dtoa_r+0xe96>
   1ddbc:	1c1e      	adds	r6, r3, #0
   1ddbe:	1e73      	subs	r3, r6, #1
   1ddc0:	781a      	ldrb	r2, [r3, #0]
   1ddc2:	2a30      	cmp	r2, #48	; 0x30
   1ddc4:	d0fa      	beq.n	1ddbc <_dtoa_r+0xe94>
   1ddc6:	9d18      	ldr	r5, [sp, #96]	; 0x60
   1ddc8:	9508      	str	r5, [sp, #32]
   1ddca:	f7ff faed 	bl	1d3a8 <_dtoa_r+0x480>
   1ddce:	46ab      	mov	fp, r5
   1ddd0:	4655      	mov	r5, sl
   1ddd2:	9502      	str	r5, [sp, #8]
   1ddd4:	9907      	ldr	r1, [sp, #28]
   1ddd6:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1ddd8:	4653      	mov	r3, sl
   1ddda:	46a2      	mov	sl, r4
   1dddc:	4644      	mov	r4, r8
   1ddde:	4688      	mov	r8, r1
   1dde0:	2d39      	cmp	r5, #57	; 0x39
   1dde2:	d0a9      	beq.n	1dd38 <_dtoa_r+0xe10>
   1dde4:	2b00      	cmp	r3, #0
   1dde6:	dd00      	ble.n	1ddea <_dtoa_r+0xec2>
   1dde8:	e775      	b.n	1dcd6 <_dtoa_r+0xdae>
   1ddea:	e777      	b.n	1dcdc <_dtoa_r+0xdb4>
   1ddec:	9b07      	ldr	r3, [sp, #28]
   1ddee:	465e      	mov	r6, fp
   1ddf0:	46a2      	mov	sl, r4
   1ddf2:	46ab      	mov	fp, r5
   1ddf4:	4644      	mov	r4, r8
   1ddf6:	4698      	mov	r8, r3
   1ddf8:	e75c      	b.n	1dcb4 <_dtoa_r+0xd8c>
   1ddfa:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1ddfc:	990e      	ldr	r1, [sp, #56]	; 0x38
   1ddfe:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1de00:	4655      	mov	r5, sl
   1de02:	465c      	mov	r4, fp
   1de04:	9308      	str	r3, [sp, #32]
   1de06:	464e      	mov	r6, r9
   1de08:	468a      	mov	sl, r1
   1de0a:	4693      	mov	fp, r2
   1de0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1de0e:	f7ff fbc2 	bl	1d596 <_dtoa_r+0x66e>
   1de12:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1de14:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1de16:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1de18:	4691      	mov	r9, r2
   1de1a:	469b      	mov	fp, r3
   1de1c:	46a2      	mov	sl, r4
   1de1e:	f7ff fb09 	bl	1d434 <_dtoa_r+0x50c>
   1de22:	2800      	cmp	r0, #0
   1de24:	d000      	beq.n	1de28 <_dtoa_r+0xf00>
   1de26:	e759      	b.n	1dcdc <_dtoa_r+0xdb4>
   1de28:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1de2a:	07ed      	lsls	r5, r5, #31
   1de2c:	d400      	bmi.n	1de30 <_dtoa_r+0xf08>
   1de2e:	e755      	b.n	1dcdc <_dtoa_r+0xdb4>
   1de30:	e74e      	b.n	1dcd0 <_dtoa_r+0xda8>
   1de32:	2100      	movs	r1, #0
   1de34:	4688      	mov	r8, r1
   1de36:	2700      	movs	r7, #0
   1de38:	e57f      	b.n	1d93a <_dtoa_r+0xa12>
   1de3a:	2402      	movs	r4, #2
   1de3c:	46a0      	mov	r8, r4
   1de3e:	f7ff f9c2 	bl	1d1c6 <_dtoa_r+0x29e>
   1de42:	9c18      	ldr	r4, [sp, #96]	; 0x60
   1de44:	9408      	str	r4, [sp, #32]
   1de46:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1de48:	1c23      	adds	r3, r4, #0
   1de4a:	f7ff fba4 	bl	1d596 <_dtoa_r+0x66e>
   1de4e:	2a04      	cmp	r2, #4
   1de50:	d100      	bne.n	1de54 <_dtoa_r+0xf2c>
   1de52:	e45d      	b.n	1d710 <_dtoa_r+0x7e8>
   1de54:	223c      	movs	r2, #60	; 0x3c
   1de56:	1ad3      	subs	r3, r2, r3
   1de58:	e455      	b.n	1d706 <_dtoa_r+0x7de>
   1de5a:	46c0      	nop			; (mov r8, r8)
   1de5c:	46c0      	nop			; (mov r8, r8)
   1de5e:	46c0      	nop			; (mov r8, r8)
   1de60:	00000000 	.word	0x00000000
   1de64:	40240000 	.word	0x40240000
   1de68:	00000000 	.word	0x00000000
   1de6c:	3fe00000 	.word	0x3fe00000
   1de70:	00000000 	.word	0x00000000
   1de74:	401c0000 	.word	0x401c0000
   1de78:	00027188 	.word	0x00027188
   1de7c:	00027278 	.word	0x00027278
   1de80:	fcc00000 	.word	0xfcc00000
   1de84:	46c0      	nop			; (mov r8, r8)
   1de86:	46c0      	nop			; (mov r8, r8)

0001de88 <__sflush_r>:
   1de88:	b5f0      	push	{r4, r5, r6, r7, lr}
   1de8a:	4647      	mov	r7, r8
   1de8c:	b480      	push	{r7}
   1de8e:	898b      	ldrh	r3, [r1, #12]
   1de90:	4680      	mov	r8, r0
   1de92:	1c0d      	adds	r5, r1, #0
   1de94:	0719      	lsls	r1, r3, #28
   1de96:	d434      	bmi.n	1df02 <__sflush_r+0x7a>
   1de98:	686a      	ldr	r2, [r5, #4]
   1de9a:	2a00      	cmp	r2, #0
   1de9c:	dd52      	ble.n	1df44 <__sflush_r+0xbc>
   1de9e:	6aec      	ldr	r4, [r5, #44]	; 0x2c
   1dea0:	2c00      	cmp	r4, #0
   1dea2:	d02a      	beq.n	1defa <__sflush_r+0x72>
   1dea4:	4641      	mov	r1, r8
   1dea6:	2200      	movs	r2, #0
   1dea8:	680e      	ldr	r6, [r1, #0]
   1deaa:	600a      	str	r2, [r1, #0]
   1deac:	04da      	lsls	r2, r3, #19
   1deae:	d54d      	bpl.n	1df4c <__sflush_r+0xc4>
   1deb0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   1deb2:	075f      	lsls	r7, r3, #29
   1deb4:	d506      	bpl.n	1dec4 <__sflush_r+0x3c>
   1deb6:	6869      	ldr	r1, [r5, #4]
   1deb8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1deba:	1a52      	subs	r2, r2, r1
   1debc:	2b00      	cmp	r3, #0
   1debe:	d001      	beq.n	1dec4 <__sflush_r+0x3c>
   1dec0:	6c2f      	ldr	r7, [r5, #64]	; 0x40
   1dec2:	1bd2      	subs	r2, r2, r7
   1dec4:	6a29      	ldr	r1, [r5, #32]
   1dec6:	4640      	mov	r0, r8
   1dec8:	2300      	movs	r3, #0
   1deca:	47a0      	blx	r4
   1decc:	1c41      	adds	r1, r0, #1
   1dece:	d048      	beq.n	1df62 <__sflush_r+0xda>
   1ded0:	2300      	movs	r3, #0
   1ded2:	606b      	str	r3, [r5, #4]
   1ded4:	6929      	ldr	r1, [r5, #16]
   1ded6:	89ab      	ldrh	r3, [r5, #12]
   1ded8:	6029      	str	r1, [r5, #0]
   1deda:	04da      	lsls	r2, r3, #19
   1dedc:	d44b      	bmi.n	1df76 <__sflush_r+0xee>
   1dede:	6b69      	ldr	r1, [r5, #52]	; 0x34
   1dee0:	4643      	mov	r3, r8
   1dee2:	601e      	str	r6, [r3, #0]
   1dee4:	2900      	cmp	r1, #0
   1dee6:	d008      	beq.n	1defa <__sflush_r+0x72>
   1dee8:	1c2b      	adds	r3, r5, #0
   1deea:	3344      	adds	r3, #68	; 0x44
   1deec:	4299      	cmp	r1, r3
   1deee:	d002      	beq.n	1def6 <__sflush_r+0x6e>
   1def0:	4640      	mov	r0, r8
   1def2:	f7fd fadf 	bl	1b4b4 <_free_r>
   1def6:	2300      	movs	r3, #0
   1def8:	636b      	str	r3, [r5, #52]	; 0x34
   1defa:	2000      	movs	r0, #0
   1defc:	bc04      	pop	{r2}
   1defe:	4690      	mov	r8, r2
   1df00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1df02:	692e      	ldr	r6, [r5, #16]
   1df04:	2e00      	cmp	r6, #0
   1df06:	d0f8      	beq.n	1defa <__sflush_r+0x72>
   1df08:	682f      	ldr	r7, [r5, #0]
   1df0a:	2200      	movs	r2, #0
   1df0c:	1bbc      	subs	r4, r7, r6
   1df0e:	602e      	str	r6, [r5, #0]
   1df10:	0799      	lsls	r1, r3, #30
   1df12:	d100      	bne.n	1df16 <__sflush_r+0x8e>
   1df14:	696a      	ldr	r2, [r5, #20]
   1df16:	60aa      	str	r2, [r5, #8]
   1df18:	2c00      	cmp	r4, #0
   1df1a:	dc04      	bgt.n	1df26 <__sflush_r+0x9e>
   1df1c:	e7ed      	b.n	1defa <__sflush_r+0x72>
   1df1e:	1836      	adds	r6, r6, r0
   1df20:	1a24      	subs	r4, r4, r0
   1df22:	2c00      	cmp	r4, #0
   1df24:	dde9      	ble.n	1defa <__sflush_r+0x72>
   1df26:	4640      	mov	r0, r8
   1df28:	6a29      	ldr	r1, [r5, #32]
   1df2a:	1c32      	adds	r2, r6, #0
   1df2c:	1c23      	adds	r3, r4, #0
   1df2e:	6aaf      	ldr	r7, [r5, #40]	; 0x28
   1df30:	47b8      	blx	r7
   1df32:	2800      	cmp	r0, #0
   1df34:	dcf3      	bgt.n	1df1e <__sflush_r+0x96>
   1df36:	89aa      	ldrh	r2, [r5, #12]
   1df38:	2340      	movs	r3, #64	; 0x40
   1df3a:	4313      	orrs	r3, r2
   1df3c:	2001      	movs	r0, #1
   1df3e:	81ab      	strh	r3, [r5, #12]
   1df40:	4240      	negs	r0, r0
   1df42:	e7db      	b.n	1defc <__sflush_r+0x74>
   1df44:	6c2f      	ldr	r7, [r5, #64]	; 0x40
   1df46:	2f00      	cmp	r7, #0
   1df48:	dca9      	bgt.n	1de9e <__sflush_r+0x16>
   1df4a:	e7d6      	b.n	1defa <__sflush_r+0x72>
   1df4c:	2200      	movs	r2, #0
   1df4e:	4640      	mov	r0, r8
   1df50:	6a29      	ldr	r1, [r5, #32]
   1df52:	2301      	movs	r3, #1
   1df54:	47a0      	blx	r4
   1df56:	1c02      	adds	r2, r0, #0
   1df58:	1c43      	adds	r3, r0, #1
   1df5a:	d017      	beq.n	1df8c <__sflush_r+0x104>
   1df5c:	89ab      	ldrh	r3, [r5, #12]
   1df5e:	6aec      	ldr	r4, [r5, #44]	; 0x2c
   1df60:	e7a7      	b.n	1deb2 <__sflush_r+0x2a>
   1df62:	4642      	mov	r2, r8
   1df64:	6813      	ldr	r3, [r2, #0]
   1df66:	2b00      	cmp	r3, #0
   1df68:	d107      	bne.n	1df7a <__sflush_r+0xf2>
   1df6a:	606b      	str	r3, [r5, #4]
   1df6c:	692f      	ldr	r7, [r5, #16]
   1df6e:	89ab      	ldrh	r3, [r5, #12]
   1df70:	602f      	str	r7, [r5, #0]
   1df72:	04d9      	lsls	r1, r3, #19
   1df74:	d5b3      	bpl.n	1dede <__sflush_r+0x56>
   1df76:	6568      	str	r0, [r5, #84]	; 0x54
   1df78:	e7b1      	b.n	1dede <__sflush_r+0x56>
   1df7a:	2b1d      	cmp	r3, #29
   1df7c:	d001      	beq.n	1df82 <__sflush_r+0xfa>
   1df7e:	2b16      	cmp	r3, #22
   1df80:	d115      	bne.n	1dfae <__sflush_r+0x126>
   1df82:	2300      	movs	r3, #0
   1df84:	606b      	str	r3, [r5, #4]
   1df86:	692b      	ldr	r3, [r5, #16]
   1df88:	602b      	str	r3, [r5, #0]
   1df8a:	e7a8      	b.n	1dede <__sflush_r+0x56>
   1df8c:	4647      	mov	r7, r8
   1df8e:	683b      	ldr	r3, [r7, #0]
   1df90:	2b00      	cmp	r3, #0
   1df92:	d0e3      	beq.n	1df5c <__sflush_r+0xd4>
   1df94:	2b1d      	cmp	r3, #29
   1df96:	d006      	beq.n	1dfa6 <__sflush_r+0x11e>
   1df98:	2b16      	cmp	r3, #22
   1df9a:	d004      	beq.n	1dfa6 <__sflush_r+0x11e>
   1df9c:	89a9      	ldrh	r1, [r5, #12]
   1df9e:	2340      	movs	r3, #64	; 0x40
   1dfa0:	430b      	orrs	r3, r1
   1dfa2:	81ab      	strh	r3, [r5, #12]
   1dfa4:	e7aa      	b.n	1defc <__sflush_r+0x74>
   1dfa6:	4641      	mov	r1, r8
   1dfa8:	600e      	str	r6, [r1, #0]
   1dfaa:	2000      	movs	r0, #0
   1dfac:	e7a6      	b.n	1defc <__sflush_r+0x74>
   1dfae:	89aa      	ldrh	r2, [r5, #12]
   1dfb0:	2340      	movs	r3, #64	; 0x40
   1dfb2:	4313      	orrs	r3, r2
   1dfb4:	81ab      	strh	r3, [r5, #12]
   1dfb6:	e7a1      	b.n	1defc <__sflush_r+0x74>

0001dfb8 <_fflush_r>:
   1dfb8:	690a      	ldr	r2, [r1, #16]
   1dfba:	b538      	push	{r3, r4, r5, lr}
   1dfbc:	1c05      	adds	r5, r0, #0
   1dfbe:	1c0c      	adds	r4, r1, #0
   1dfc0:	2a00      	cmp	r2, #0
   1dfc2:	d011      	beq.n	1dfe8 <_fflush_r+0x30>
   1dfc4:	2800      	cmp	r0, #0
   1dfc6:	d002      	beq.n	1dfce <_fflush_r+0x16>
   1dfc8:	6983      	ldr	r3, [r0, #24]
   1dfca:	2b00      	cmp	r3, #0
   1dfcc:	d013      	beq.n	1dff6 <_fflush_r+0x3e>
   1dfce:	4b0f      	ldr	r3, [pc, #60]	; (1e00c <_fflush_r+0x54>)
   1dfd0:	429c      	cmp	r4, r3
   1dfd2:	d015      	beq.n	1e000 <_fflush_r+0x48>
   1dfd4:	4b0e      	ldr	r3, [pc, #56]	; (1e010 <_fflush_r+0x58>)
   1dfd6:	429c      	cmp	r4, r3
   1dfd8:	d014      	beq.n	1e004 <_fflush_r+0x4c>
   1dfda:	4b0e      	ldr	r3, [pc, #56]	; (1e014 <_fflush_r+0x5c>)
   1dfdc:	429c      	cmp	r4, r3
   1dfde:	d013      	beq.n	1e008 <_fflush_r+0x50>
   1dfe0:	220c      	movs	r2, #12
   1dfe2:	5ea3      	ldrsh	r3, [r4, r2]
   1dfe4:	2b00      	cmp	r3, #0
   1dfe6:	d101      	bne.n	1dfec <_fflush_r+0x34>
   1dfe8:	2000      	movs	r0, #0
   1dfea:	bd38      	pop	{r3, r4, r5, pc}
   1dfec:	1c28      	adds	r0, r5, #0
   1dfee:	1c21      	adds	r1, r4, #0
   1dff0:	f7ff ff4a 	bl	1de88 <__sflush_r>
   1dff4:	e7f9      	b.n	1dfea <_fflush_r+0x32>
   1dff6:	f000 f863 	bl	1e0c0 <__sinit>
   1dffa:	4b04      	ldr	r3, [pc, #16]	; (1e00c <_fflush_r+0x54>)
   1dffc:	429c      	cmp	r4, r3
   1dffe:	d1e9      	bne.n	1dfd4 <_fflush_r+0x1c>
   1e000:	686c      	ldr	r4, [r5, #4]
   1e002:	e7ed      	b.n	1dfe0 <_fflush_r+0x28>
   1e004:	68ac      	ldr	r4, [r5, #8]
   1e006:	e7eb      	b.n	1dfe0 <_fflush_r+0x28>
   1e008:	68ec      	ldr	r4, [r5, #12]
   1e00a:	e7e9      	b.n	1dfe0 <_fflush_r+0x28>
   1e00c:	0002714c 	.word	0x0002714c
   1e010:	0002712c 	.word	0x0002712c
   1e014:	0002710c 	.word	0x0002710c

0001e018 <fflush>:
   1e018:	b508      	push	{r3, lr}
   1e01a:	1e01      	subs	r1, r0, #0
   1e01c:	d004      	beq.n	1e028 <fflush+0x10>
   1e01e:	4b05      	ldr	r3, [pc, #20]	; (1e034 <fflush+0x1c>)
   1e020:	6818      	ldr	r0, [r3, #0]
   1e022:	f7ff ffc9 	bl	1dfb8 <_fflush_r>
   1e026:	bd08      	pop	{r3, pc}
   1e028:	4b03      	ldr	r3, [pc, #12]	; (1e038 <fflush+0x20>)
   1e02a:	4904      	ldr	r1, [pc, #16]	; (1e03c <fflush+0x24>)
   1e02c:	6818      	ldr	r0, [r3, #0]
   1e02e:	f000 fae7 	bl	1e600 <_fwalk_reent>
   1e032:	e7f8      	b.n	1e026 <fflush+0xe>
   1e034:	200001a0 	.word	0x200001a0
   1e038:	00026fa0 	.word	0x00026fa0
   1e03c:	0001dfb9 	.word	0x0001dfb9

0001e040 <__fp_lock>:
   1e040:	2000      	movs	r0, #0
   1e042:	4770      	bx	lr

0001e044 <__fp_unlock>:
   1e044:	2000      	movs	r0, #0
   1e046:	4770      	bx	lr

0001e048 <_cleanup_r>:
   1e048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e04a:	1c06      	adds	r6, r0, #0
   1e04c:	3648      	adds	r6, #72	; 0x48
   1e04e:	1c07      	adds	r7, r0, #0
   1e050:	2e00      	cmp	r6, #0
   1e052:	d014      	beq.n	1e07e <_cleanup_r+0x36>
   1e054:	6875      	ldr	r5, [r6, #4]
   1e056:	68b4      	ldr	r4, [r6, #8]
   1e058:	3d01      	subs	r5, #1
   1e05a:	d40d      	bmi.n	1e078 <_cleanup_r+0x30>
   1e05c:	89a3      	ldrh	r3, [r4, #12]
   1e05e:	2b01      	cmp	r3, #1
   1e060:	d907      	bls.n	1e072 <_cleanup_r+0x2a>
   1e062:	220e      	movs	r2, #14
   1e064:	5ea3      	ldrsh	r3, [r4, r2]
   1e066:	3301      	adds	r3, #1
   1e068:	d003      	beq.n	1e072 <_cleanup_r+0x2a>
   1e06a:	1c38      	adds	r0, r7, #0
   1e06c:	1c21      	adds	r1, r4, #0
   1e06e:	f7ff ffa3 	bl	1dfb8 <_fflush_r>
   1e072:	3468      	adds	r4, #104	; 0x68
   1e074:	3d01      	subs	r5, #1
   1e076:	d2f1      	bcs.n	1e05c <_cleanup_r+0x14>
   1e078:	6836      	ldr	r6, [r6, #0]
   1e07a:	2e00      	cmp	r6, #0
   1e07c:	d1ea      	bne.n	1e054 <_cleanup_r+0xc>
   1e07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e080 <__sfmoreglue>:
   1e080:	b570      	push	{r4, r5, r6, lr}
   1e082:	1e4b      	subs	r3, r1, #1
   1e084:	2568      	movs	r5, #104	; 0x68
   1e086:	435d      	muls	r5, r3
   1e088:	1c0e      	adds	r6, r1, #0
   1e08a:	1c29      	adds	r1, r5, #0
   1e08c:	3174      	adds	r1, #116	; 0x74
   1e08e:	f7fd fa59 	bl	1b544 <_malloc_r>
   1e092:	1e04      	subs	r4, r0, #0
   1e094:	d009      	beq.n	1e0aa <__sfmoreglue+0x2a>
   1e096:	2300      	movs	r3, #0
   1e098:	6003      	str	r3, [r0, #0]
   1e09a:	6046      	str	r6, [r0, #4]
   1e09c:	1c2a      	adds	r2, r5, #0
   1e09e:	300c      	adds	r0, #12
   1e0a0:	60a0      	str	r0, [r4, #8]
   1e0a2:	3268      	adds	r2, #104	; 0x68
   1e0a4:	2100      	movs	r1, #0
   1e0a6:	f7fd f9a7 	bl	1b3f8 <memset>
   1e0aa:	1c20      	adds	r0, r4, #0
   1e0ac:	bd70      	pop	{r4, r5, r6, pc}
   1e0ae:	46c0      	nop			; (mov r8, r8)

0001e0b0 <_cleanup>:
   1e0b0:	b508      	push	{r3, lr}
   1e0b2:	4b02      	ldr	r3, [pc, #8]	; (1e0bc <_cleanup+0xc>)
   1e0b4:	6818      	ldr	r0, [r3, #0]
   1e0b6:	f7ff ffc7 	bl	1e048 <_cleanup_r>
   1e0ba:	bd08      	pop	{r3, pc}
   1e0bc:	00026fa0 	.word	0x00026fa0

0001e0c0 <__sinit>:
   1e0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e0c2:	464d      	mov	r5, r9
   1e0c4:	465f      	mov	r7, fp
   1e0c6:	4656      	mov	r6, sl
   1e0c8:	4644      	mov	r4, r8
   1e0ca:	b4f0      	push	{r4, r5, r6, r7}
   1e0cc:	6983      	ldr	r3, [r0, #24]
   1e0ce:	b083      	sub	sp, #12
   1e0d0:	1c05      	adds	r5, r0, #0
   1e0d2:	2b00      	cmp	r3, #0
   1e0d4:	d169      	bne.n	1e1aa <__sinit+0xea>
   1e0d6:	6483      	str	r3, [r0, #72]	; 0x48
   1e0d8:	64c3      	str	r3, [r0, #76]	; 0x4c
   1e0da:	6503      	str	r3, [r0, #80]	; 0x50
   1e0dc:	4b38      	ldr	r3, [pc, #224]	; (1e1c0 <__sinit+0x100>)
   1e0de:	4a39      	ldr	r2, [pc, #228]	; (1e1c4 <__sinit+0x104>)
   1e0e0:	681b      	ldr	r3, [r3, #0]
   1e0e2:	6282      	str	r2, [r0, #40]	; 0x28
   1e0e4:	4298      	cmp	r0, r3
   1e0e6:	d067      	beq.n	1e1b8 <__sinit+0xf8>
   1e0e8:	1c28      	adds	r0, r5, #0
   1e0ea:	f000 f875 	bl	1e1d8 <__sfp>
   1e0ee:	6068      	str	r0, [r5, #4]
   1e0f0:	1c28      	adds	r0, r5, #0
   1e0f2:	f000 f871 	bl	1e1d8 <__sfp>
   1e0f6:	60a8      	str	r0, [r5, #8]
   1e0f8:	1c28      	adds	r0, r5, #0
   1e0fa:	f000 f86d 	bl	1e1d8 <__sfp>
   1e0fe:	686e      	ldr	r6, [r5, #4]
   1e100:	2400      	movs	r4, #0
   1e102:	60e8      	str	r0, [r5, #12]
   1e104:	2304      	movs	r3, #4
   1e106:	1c30      	adds	r0, r6, #0
   1e108:	81b3      	strh	r3, [r6, #12]
   1e10a:	6034      	str	r4, [r6, #0]
   1e10c:	6074      	str	r4, [r6, #4]
   1e10e:	60b4      	str	r4, [r6, #8]
   1e110:	6674      	str	r4, [r6, #100]	; 0x64
   1e112:	81f4      	strh	r4, [r6, #14]
   1e114:	6134      	str	r4, [r6, #16]
   1e116:	6174      	str	r4, [r6, #20]
   1e118:	61b4      	str	r4, [r6, #24]
   1e11a:	2100      	movs	r1, #0
   1e11c:	2208      	movs	r2, #8
   1e11e:	305c      	adds	r0, #92	; 0x5c
   1e120:	f7fd f96a 	bl	1b3f8 <memset>
   1e124:	4b28      	ldr	r3, [pc, #160]	; (1e1c8 <__sinit+0x108>)
   1e126:	4f29      	ldr	r7, [pc, #164]	; (1e1cc <__sinit+0x10c>)
   1e128:	469a      	mov	sl, r3
   1e12a:	6273      	str	r3, [r6, #36]	; 0x24
   1e12c:	4b28      	ldr	r3, [pc, #160]	; (1e1d0 <__sinit+0x110>)
   1e12e:	6236      	str	r6, [r6, #32]
   1e130:	4699      	mov	r9, r3
   1e132:	62b3      	str	r3, [r6, #40]	; 0x28
   1e134:	4b27      	ldr	r3, [pc, #156]	; (1e1d4 <__sinit+0x114>)
   1e136:	6337      	str	r7, [r6, #48]	; 0x30
   1e138:	62f3      	str	r3, [r6, #44]	; 0x2c
   1e13a:	68ae      	ldr	r6, [r5, #8]
   1e13c:	4698      	mov	r8, r3
   1e13e:	2309      	movs	r3, #9
   1e140:	81b3      	strh	r3, [r6, #12]
   1e142:	1c30      	adds	r0, r6, #0
   1e144:	2301      	movs	r3, #1
   1e146:	81f3      	strh	r3, [r6, #14]
   1e148:	6034      	str	r4, [r6, #0]
   1e14a:	6074      	str	r4, [r6, #4]
   1e14c:	60b4      	str	r4, [r6, #8]
   1e14e:	6674      	str	r4, [r6, #100]	; 0x64
   1e150:	6134      	str	r4, [r6, #16]
   1e152:	6174      	str	r4, [r6, #20]
   1e154:	61b4      	str	r4, [r6, #24]
   1e156:	2100      	movs	r1, #0
   1e158:	2208      	movs	r2, #8
   1e15a:	305c      	adds	r0, #92	; 0x5c
   1e15c:	469b      	mov	fp, r3
   1e15e:	f7fd f94b 	bl	1b3f8 <memset>
   1e162:	4653      	mov	r3, sl
   1e164:	6273      	str	r3, [r6, #36]	; 0x24
   1e166:	464b      	mov	r3, r9
   1e168:	62b3      	str	r3, [r6, #40]	; 0x28
   1e16a:	4643      	mov	r3, r8
   1e16c:	62f3      	str	r3, [r6, #44]	; 0x2c
   1e16e:	6236      	str	r6, [r6, #32]
   1e170:	6337      	str	r7, [r6, #48]	; 0x30
   1e172:	68ee      	ldr	r6, [r5, #12]
   1e174:	2312      	movs	r3, #18
   1e176:	81b3      	strh	r3, [r6, #12]
   1e178:	1c30      	adds	r0, r6, #0
   1e17a:	2302      	movs	r3, #2
   1e17c:	81f3      	strh	r3, [r6, #14]
   1e17e:	6034      	str	r4, [r6, #0]
   1e180:	6074      	str	r4, [r6, #4]
   1e182:	60b4      	str	r4, [r6, #8]
   1e184:	6674      	str	r4, [r6, #100]	; 0x64
   1e186:	6134      	str	r4, [r6, #16]
   1e188:	6174      	str	r4, [r6, #20]
   1e18a:	61b4      	str	r4, [r6, #24]
   1e18c:	305c      	adds	r0, #92	; 0x5c
   1e18e:	2100      	movs	r1, #0
   1e190:	2208      	movs	r2, #8
   1e192:	f7fd f931 	bl	1b3f8 <memset>
   1e196:	4653      	mov	r3, sl
   1e198:	6273      	str	r3, [r6, #36]	; 0x24
   1e19a:	464b      	mov	r3, r9
   1e19c:	62b3      	str	r3, [r6, #40]	; 0x28
   1e19e:	4643      	mov	r3, r8
   1e1a0:	62f3      	str	r3, [r6, #44]	; 0x2c
   1e1a2:	465b      	mov	r3, fp
   1e1a4:	6236      	str	r6, [r6, #32]
   1e1a6:	6337      	str	r7, [r6, #48]	; 0x30
   1e1a8:	61ab      	str	r3, [r5, #24]
   1e1aa:	b003      	add	sp, #12
   1e1ac:	bc3c      	pop	{r2, r3, r4, r5}
   1e1ae:	4690      	mov	r8, r2
   1e1b0:	4699      	mov	r9, r3
   1e1b2:	46a2      	mov	sl, r4
   1e1b4:	46ab      	mov	fp, r5
   1e1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e1b8:	2301      	movs	r3, #1
   1e1ba:	6183      	str	r3, [r0, #24]
   1e1bc:	e794      	b.n	1e0e8 <__sinit+0x28>
   1e1be:	46c0      	nop			; (mov r8, r8)
   1e1c0:	00026fa0 	.word	0x00026fa0
   1e1c4:	0001e049 	.word	0x0001e049
   1e1c8:	0001f281 	.word	0x0001f281
   1e1cc:	0001f311 	.word	0x0001f311
   1e1d0:	0001f2ad 	.word	0x0001f2ad
   1e1d4:	0001f2e5 	.word	0x0001f2e5

0001e1d8 <__sfp>:
   1e1d8:	4b21      	ldr	r3, [pc, #132]	; (1e260 <__sfp+0x88>)
   1e1da:	b570      	push	{r4, r5, r6, lr}
   1e1dc:	681d      	ldr	r5, [r3, #0]
   1e1de:	1c06      	adds	r6, r0, #0
   1e1e0:	69a9      	ldr	r1, [r5, #24]
   1e1e2:	2900      	cmp	r1, #0
   1e1e4:	d02a      	beq.n	1e23c <__sfp+0x64>
   1e1e6:	3548      	adds	r5, #72	; 0x48
   1e1e8:	686b      	ldr	r3, [r5, #4]
   1e1ea:	68ac      	ldr	r4, [r5, #8]
   1e1ec:	3b01      	subs	r3, #1
   1e1ee:	d503      	bpl.n	1e1f8 <__sfp+0x20>
   1e1f0:	e01f      	b.n	1e232 <__sfp+0x5a>
   1e1f2:	3468      	adds	r4, #104	; 0x68
   1e1f4:	3b01      	subs	r3, #1
   1e1f6:	d31c      	bcc.n	1e232 <__sfp+0x5a>
   1e1f8:	210c      	movs	r1, #12
   1e1fa:	5e62      	ldrsh	r2, [r4, r1]
   1e1fc:	2a00      	cmp	r2, #0
   1e1fe:	d1f8      	bne.n	1e1f2 <__sfp+0x1a>
   1e200:	2301      	movs	r3, #1
   1e202:	425b      	negs	r3, r3
   1e204:	2500      	movs	r5, #0
   1e206:	81e3      	strh	r3, [r4, #14]
   1e208:	1c20      	adds	r0, r4, #0
   1e20a:	2301      	movs	r3, #1
   1e20c:	81a3      	strh	r3, [r4, #12]
   1e20e:	6665      	str	r5, [r4, #100]	; 0x64
   1e210:	6025      	str	r5, [r4, #0]
   1e212:	60a5      	str	r5, [r4, #8]
   1e214:	6065      	str	r5, [r4, #4]
   1e216:	6125      	str	r5, [r4, #16]
   1e218:	6165      	str	r5, [r4, #20]
   1e21a:	61a5      	str	r5, [r4, #24]
   1e21c:	305c      	adds	r0, #92	; 0x5c
   1e21e:	2100      	movs	r1, #0
   1e220:	2208      	movs	r2, #8
   1e222:	f7fd f8e9 	bl	1b3f8 <memset>
   1e226:	6365      	str	r5, [r4, #52]	; 0x34
   1e228:	63a5      	str	r5, [r4, #56]	; 0x38
   1e22a:	64a5      	str	r5, [r4, #72]	; 0x48
   1e22c:	64e5      	str	r5, [r4, #76]	; 0x4c
   1e22e:	1c20      	adds	r0, r4, #0
   1e230:	bd70      	pop	{r4, r5, r6, pc}
   1e232:	682b      	ldr	r3, [r5, #0]
   1e234:	2b00      	cmp	r3, #0
   1e236:	d005      	beq.n	1e244 <__sfp+0x6c>
   1e238:	1c1d      	adds	r5, r3, #0
   1e23a:	e7d5      	b.n	1e1e8 <__sfp+0x10>
   1e23c:	1c28      	adds	r0, r5, #0
   1e23e:	f7ff ff3f 	bl	1e0c0 <__sinit>
   1e242:	e7d0      	b.n	1e1e6 <__sfp+0xe>
   1e244:	1c30      	adds	r0, r6, #0
   1e246:	2104      	movs	r1, #4
   1e248:	f7ff ff1a 	bl	1e080 <__sfmoreglue>
   1e24c:	6028      	str	r0, [r5, #0]
   1e24e:	2800      	cmp	r0, #0
   1e250:	d001      	beq.n	1e256 <__sfp+0x7e>
   1e252:	1c05      	adds	r5, r0, #0
   1e254:	e7c8      	b.n	1e1e8 <__sfp+0x10>
   1e256:	230c      	movs	r3, #12
   1e258:	6033      	str	r3, [r6, #0]
   1e25a:	2000      	movs	r0, #0
   1e25c:	e7e8      	b.n	1e230 <__sfp+0x58>
   1e25e:	46c0      	nop			; (mov r8, r8)
   1e260:	00026fa0 	.word	0x00026fa0

0001e264 <__sfp_lock_acquire>:
   1e264:	4770      	bx	lr
   1e266:	46c0      	nop			; (mov r8, r8)

0001e268 <__sfp_lock_release>:
   1e268:	4770      	bx	lr
   1e26a:	46c0      	nop			; (mov r8, r8)

0001e26c <__sinit_lock_acquire>:
   1e26c:	4770      	bx	lr
   1e26e:	46c0      	nop			; (mov r8, r8)

0001e270 <__sinit_lock_release>:
   1e270:	4770      	bx	lr
   1e272:	46c0      	nop			; (mov r8, r8)

0001e274 <__fp_lock_all>:
   1e274:	b508      	push	{r3, lr}
   1e276:	4b03      	ldr	r3, [pc, #12]	; (1e284 <__fp_lock_all+0x10>)
   1e278:	4903      	ldr	r1, [pc, #12]	; (1e288 <__fp_lock_all+0x14>)
   1e27a:	6818      	ldr	r0, [r3, #0]
   1e27c:	f000 f99e 	bl	1e5bc <_fwalk>
   1e280:	bd08      	pop	{r3, pc}
   1e282:	46c0      	nop			; (mov r8, r8)
   1e284:	200001a0 	.word	0x200001a0
   1e288:	0001e041 	.word	0x0001e041

0001e28c <__fp_unlock_all>:
   1e28c:	b508      	push	{r3, lr}
   1e28e:	4b03      	ldr	r3, [pc, #12]	; (1e29c <__fp_unlock_all+0x10>)
   1e290:	4903      	ldr	r1, [pc, #12]	; (1e2a0 <__fp_unlock_all+0x14>)
   1e292:	6818      	ldr	r0, [r3, #0]
   1e294:	f000 f992 	bl	1e5bc <_fwalk>
   1e298:	bd08      	pop	{r3, pc}
   1e29a:	46c0      	nop			; (mov r8, r8)
   1e29c:	200001a0 	.word	0x200001a0
   1e2a0:	0001e045 	.word	0x0001e045

0001e2a4 <__sfvwrite_r>:
   1e2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e2a6:	4656      	mov	r6, sl
   1e2a8:	4644      	mov	r4, r8
   1e2aa:	465f      	mov	r7, fp
   1e2ac:	464d      	mov	r5, r9
   1e2ae:	b4f0      	push	{r4, r5, r6, r7}
   1e2b0:	b085      	sub	sp, #20
   1e2b2:	9003      	str	r0, [sp, #12]
   1e2b4:	6890      	ldr	r0, [r2, #8]
   1e2b6:	1c0c      	adds	r4, r1, #0
   1e2b8:	4692      	mov	sl, r2
   1e2ba:	2800      	cmp	r0, #0
   1e2bc:	d024      	beq.n	1e308 <__sfvwrite_r+0x64>
   1e2be:	898b      	ldrh	r3, [r1, #12]
   1e2c0:	0719      	lsls	r1, r3, #28
   1e2c2:	d529      	bpl.n	1e318 <__sfvwrite_r+0x74>
   1e2c4:	6922      	ldr	r2, [r4, #16]
   1e2c6:	2a00      	cmp	r2, #0
   1e2c8:	d026      	beq.n	1e318 <__sfvwrite_r+0x74>
   1e2ca:	4657      	mov	r7, sl
   1e2cc:	683e      	ldr	r6, [r7, #0]
   1e2ce:	46b3      	mov	fp, r6
   1e2d0:	0798      	lsls	r0, r3, #30
   1e2d2:	d52e      	bpl.n	1e332 <__sfvwrite_r+0x8e>
   1e2d4:	49b6      	ldr	r1, [pc, #728]	; (1e5b0 <__sfvwrite_r+0x30c>)
   1e2d6:	2600      	movs	r6, #0
   1e2d8:	2500      	movs	r5, #0
   1e2da:	4688      	mov	r8, r1
   1e2dc:	2d00      	cmp	r5, #0
   1e2de:	d065      	beq.n	1e3ac <__sfvwrite_r+0x108>
   1e2e0:	6a21      	ldr	r1, [r4, #32]
   1e2e2:	1e2b      	subs	r3, r5, #0
   1e2e4:	4543      	cmp	r3, r8
   1e2e6:	d900      	bls.n	1e2ea <__sfvwrite_r+0x46>
   1e2e8:	4bb1      	ldr	r3, [pc, #708]	; (1e5b0 <__sfvwrite_r+0x30c>)
   1e2ea:	9803      	ldr	r0, [sp, #12]
   1e2ec:	1c32      	adds	r2, r6, #0
   1e2ee:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   1e2f0:	47b8      	blx	r7
   1e2f2:	2800      	cmp	r0, #0
   1e2f4:	dc00      	bgt.n	1e2f8 <__sfvwrite_r+0x54>
   1e2f6:	e080      	b.n	1e3fa <__sfvwrite_r+0x156>
   1e2f8:	4651      	mov	r1, sl
   1e2fa:	6889      	ldr	r1, [r1, #8]
   1e2fc:	1836      	adds	r6, r6, r0
   1e2fe:	1a2d      	subs	r5, r5, r0
   1e300:	4652      	mov	r2, sl
   1e302:	1a08      	subs	r0, r1, r0
   1e304:	6090      	str	r0, [r2, #8]
   1e306:	d1e9      	bne.n	1e2dc <__sfvwrite_r+0x38>
   1e308:	2000      	movs	r0, #0
   1e30a:	b005      	add	sp, #20
   1e30c:	bc3c      	pop	{r2, r3, r4, r5}
   1e30e:	4690      	mov	r8, r2
   1e310:	4699      	mov	r9, r3
   1e312:	46a2      	mov	sl, r4
   1e314:	46ab      	mov	fp, r5
   1e316:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e318:	9803      	ldr	r0, [sp, #12]
   1e31a:	1c21      	adds	r1, r4, #0
   1e31c:	f7fe fcda 	bl	1ccd4 <__swsetup_r>
   1e320:	2800      	cmp	r0, #0
   1e322:	d000      	beq.n	1e326 <__sfvwrite_r+0x82>
   1e324:	e13b      	b.n	1e59e <__sfvwrite_r+0x2fa>
   1e326:	4657      	mov	r7, sl
   1e328:	683e      	ldr	r6, [r7, #0]
   1e32a:	89a3      	ldrh	r3, [r4, #12]
   1e32c:	46b3      	mov	fp, r6
   1e32e:	0798      	lsls	r0, r3, #30
   1e330:	d4d0      	bmi.n	1e2d4 <__sfvwrite_r+0x30>
   1e332:	07de      	lsls	r6, r3, #31
   1e334:	d568      	bpl.n	1e408 <__sfvwrite_r+0x164>
   1e336:	2600      	movs	r6, #0
   1e338:	2700      	movs	r7, #0
   1e33a:	9601      	str	r6, [sp, #4]
   1e33c:	46b1      	mov	r9, r6
   1e33e:	2500      	movs	r5, #0
   1e340:	2d00      	cmp	r5, #0
   1e342:	d02a      	beq.n	1e39a <__sfvwrite_r+0xf6>
   1e344:	9e01      	ldr	r6, [sp, #4]
   1e346:	2e00      	cmp	r6, #0
   1e348:	d100      	bne.n	1e34c <__sfvwrite_r+0xa8>
   1e34a:	e0af      	b.n	1e4ac <__sfvwrite_r+0x208>
   1e34c:	46b8      	mov	r8, r7
   1e34e:	42af      	cmp	r7, r5
   1e350:	d900      	bls.n	1e354 <__sfvwrite_r+0xb0>
   1e352:	46a8      	mov	r8, r5
   1e354:	6820      	ldr	r0, [r4, #0]
   1e356:	6921      	ldr	r1, [r4, #16]
   1e358:	4646      	mov	r6, r8
   1e35a:	68a2      	ldr	r2, [r4, #8]
   1e35c:	6963      	ldr	r3, [r4, #20]
   1e35e:	4288      	cmp	r0, r1
   1e360:	d904      	bls.n	1e36c <__sfvwrite_r+0xc8>
   1e362:	18d2      	adds	r2, r2, r3
   1e364:	9202      	str	r2, [sp, #8]
   1e366:	4590      	cmp	r8, r2
   1e368:	dd00      	ble.n	1e36c <__sfvwrite_r+0xc8>
   1e36a:	e0f0      	b.n	1e54e <__sfvwrite_r+0x2aa>
   1e36c:	4598      	cmp	r8, r3
   1e36e:	da00      	bge.n	1e372 <__sfvwrite_r+0xce>
   1e370:	e080      	b.n	1e474 <__sfvwrite_r+0x1d0>
   1e372:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1e374:	9803      	ldr	r0, [sp, #12]
   1e376:	6a21      	ldr	r1, [r4, #32]
   1e378:	464a      	mov	r2, r9
   1e37a:	47b0      	blx	r6
   1e37c:	1e06      	subs	r6, r0, #0
   1e37e:	dd3c      	ble.n	1e3fa <__sfvwrite_r+0x156>
   1e380:	1bbf      	subs	r7, r7, r6
   1e382:	d100      	bne.n	1e386 <__sfvwrite_r+0xe2>
   1e384:	e085      	b.n	1e492 <__sfvwrite_r+0x1ee>
   1e386:	4650      	mov	r0, sl
   1e388:	6880      	ldr	r0, [r0, #8]
   1e38a:	44b1      	add	r9, r6
   1e38c:	1bad      	subs	r5, r5, r6
   1e38e:	4651      	mov	r1, sl
   1e390:	1b86      	subs	r6, r0, r6
   1e392:	608e      	str	r6, [r1, #8]
   1e394:	d0b8      	beq.n	1e308 <__sfvwrite_r+0x64>
   1e396:	2d00      	cmp	r5, #0
   1e398:	d1d4      	bne.n	1e344 <__sfvwrite_r+0xa0>
   1e39a:	465b      	mov	r3, fp
   1e39c:	2608      	movs	r6, #8
   1e39e:	681a      	ldr	r2, [r3, #0]
   1e3a0:	44b3      	add	fp, r6
   1e3a2:	2600      	movs	r6, #0
   1e3a4:	4691      	mov	r9, r2
   1e3a6:	685d      	ldr	r5, [r3, #4]
   1e3a8:	9601      	str	r6, [sp, #4]
   1e3aa:	e7c9      	b.n	1e340 <__sfvwrite_r+0x9c>
   1e3ac:	465a      	mov	r2, fp
   1e3ae:	2308      	movs	r3, #8
   1e3b0:	6816      	ldr	r6, [r2, #0]
   1e3b2:	6855      	ldr	r5, [r2, #4]
   1e3b4:	449b      	add	fp, r3
   1e3b6:	e791      	b.n	1e2dc <__sfvwrite_r+0x38>
   1e3b8:	6820      	ldr	r0, [r4, #0]
   1e3ba:	6923      	ldr	r3, [r4, #16]
   1e3bc:	4298      	cmp	r0, r3
   1e3be:	d804      	bhi.n	1e3ca <__sfvwrite_r+0x126>
   1e3c0:	6966      	ldr	r6, [r4, #20]
   1e3c2:	46b1      	mov	r9, r6
   1e3c4:	42b5      	cmp	r5, r6
   1e3c6:	d300      	bcc.n	1e3ca <__sfvwrite_r+0x126>
   1e3c8:	e0ad      	b.n	1e526 <__sfvwrite_r+0x282>
   1e3ca:	46a9      	mov	r9, r5
   1e3cc:	4545      	cmp	r5, r8
   1e3ce:	d900      	bls.n	1e3d2 <__sfvwrite_r+0x12e>
   1e3d0:	46c1      	mov	r9, r8
   1e3d2:	9901      	ldr	r1, [sp, #4]
   1e3d4:	464a      	mov	r2, r9
   1e3d6:	f000 fa19 	bl	1e80c <memmove>
   1e3da:	6826      	ldr	r6, [r4, #0]
   1e3dc:	68a0      	ldr	r0, [r4, #8]
   1e3de:	4649      	mov	r1, r9
   1e3e0:	1c32      	adds	r2, r6, #0
   1e3e2:	1a43      	subs	r3, r0, r1
   1e3e4:	444a      	add	r2, r9
   1e3e6:	60a3      	str	r3, [r4, #8]
   1e3e8:	6022      	str	r2, [r4, #0]
   1e3ea:	2b00      	cmp	r3, #0
   1e3ec:	d140      	bne.n	1e470 <__sfvwrite_r+0x1cc>
   1e3ee:	9803      	ldr	r0, [sp, #12]
   1e3f0:	1c21      	adds	r1, r4, #0
   1e3f2:	f7ff fde1 	bl	1dfb8 <_fflush_r>
   1e3f6:	2800      	cmp	r0, #0
   1e3f8:	d03a      	beq.n	1e470 <__sfvwrite_r+0x1cc>
   1e3fa:	89a2      	ldrh	r2, [r4, #12]
   1e3fc:	2340      	movs	r3, #64	; 0x40
   1e3fe:	4313      	orrs	r3, r2
   1e400:	2001      	movs	r0, #1
   1e402:	81a3      	strh	r3, [r4, #12]
   1e404:	4240      	negs	r0, r0
   1e406:	e780      	b.n	1e30a <__sfvwrite_r+0x66>
   1e408:	2600      	movs	r6, #0
   1e40a:	2500      	movs	r5, #0
   1e40c:	9601      	str	r6, [sp, #4]
   1e40e:	465f      	mov	r7, fp
   1e410:	2d00      	cmp	r5, #0
   1e412:	d028      	beq.n	1e466 <__sfvwrite_r+0x1c2>
   1e414:	68a0      	ldr	r0, [r4, #8]
   1e416:	2180      	movs	r1, #128	; 0x80
   1e418:	0089      	lsls	r1, r1, #2
   1e41a:	4680      	mov	r8, r0
   1e41c:	420b      	tst	r3, r1
   1e41e:	d0cb      	beq.n	1e3b8 <__sfvwrite_r+0x114>
   1e420:	4285      	cmp	r5, r0
   1e422:	d33f      	bcc.n	1e4a4 <__sfvwrite_r+0x200>
   1e424:	2290      	movs	r2, #144	; 0x90
   1e426:	00d2      	lsls	r2, r2, #3
   1e428:	4213      	tst	r3, r2
   1e42a:	d14c      	bne.n	1e4c6 <__sfvwrite_r+0x222>
   1e42c:	6820      	ldr	r0, [r4, #0]
   1e42e:	46c1      	mov	r9, r8
   1e430:	9901      	ldr	r1, [sp, #4]
   1e432:	464a      	mov	r2, r9
   1e434:	f000 f9ea 	bl	1e80c <memmove>
   1e438:	68a0      	ldr	r0, [r4, #8]
   1e43a:	6822      	ldr	r2, [r4, #0]
   1e43c:	4641      	mov	r1, r8
   1e43e:	1a43      	subs	r3, r0, r1
   1e440:	60a3      	str	r3, [r4, #8]
   1e442:	1c13      	adds	r3, r2, #0
   1e444:	444b      	add	r3, r9
   1e446:	6023      	str	r3, [r4, #0]
   1e448:	1c2a      	adds	r2, r5, #0
   1e44a:	4650      	mov	r0, sl
   1e44c:	9e01      	ldr	r6, [sp, #4]
   1e44e:	6880      	ldr	r0, [r0, #8]
   1e450:	18b6      	adds	r6, r6, r2
   1e452:	1aad      	subs	r5, r5, r2
   1e454:	4651      	mov	r1, sl
   1e456:	1a82      	subs	r2, r0, r2
   1e458:	9601      	str	r6, [sp, #4]
   1e45a:	608a      	str	r2, [r1, #8]
   1e45c:	d100      	bne.n	1e460 <__sfvwrite_r+0x1bc>
   1e45e:	e753      	b.n	1e308 <__sfvwrite_r+0x64>
   1e460:	89a3      	ldrh	r3, [r4, #12]
   1e462:	2d00      	cmp	r5, #0
   1e464:	d1d6      	bne.n	1e414 <__sfvwrite_r+0x170>
   1e466:	683e      	ldr	r6, [r7, #0]
   1e468:	687d      	ldr	r5, [r7, #4]
   1e46a:	9601      	str	r6, [sp, #4]
   1e46c:	3708      	adds	r7, #8
   1e46e:	e7cf      	b.n	1e410 <__sfvwrite_r+0x16c>
   1e470:	464a      	mov	r2, r9
   1e472:	e7ea      	b.n	1e44a <__sfvwrite_r+0x1a6>
   1e474:	4649      	mov	r1, r9
   1e476:	4642      	mov	r2, r8
   1e478:	f000 f9c8 	bl	1e80c <memmove>
   1e47c:	68a0      	ldr	r0, [r4, #8]
   1e47e:	6822      	ldr	r2, [r4, #0]
   1e480:	4641      	mov	r1, r8
   1e482:	1a43      	subs	r3, r0, r1
   1e484:	60a3      	str	r3, [r4, #8]
   1e486:	1c13      	adds	r3, r2, #0
   1e488:	4443      	add	r3, r8
   1e48a:	6023      	str	r3, [r4, #0]
   1e48c:	1bbf      	subs	r7, r7, r6
   1e48e:	d000      	beq.n	1e492 <__sfvwrite_r+0x1ee>
   1e490:	e779      	b.n	1e386 <__sfvwrite_r+0xe2>
   1e492:	9803      	ldr	r0, [sp, #12]
   1e494:	1c21      	adds	r1, r4, #0
   1e496:	f7ff fd8f 	bl	1dfb8 <_fflush_r>
   1e49a:	2800      	cmp	r0, #0
   1e49c:	d1ad      	bne.n	1e3fa <__sfvwrite_r+0x156>
   1e49e:	2300      	movs	r3, #0
   1e4a0:	9301      	str	r3, [sp, #4]
   1e4a2:	e770      	b.n	1e386 <__sfvwrite_r+0xe2>
   1e4a4:	46a8      	mov	r8, r5
   1e4a6:	6820      	ldr	r0, [r4, #0]
   1e4a8:	46a9      	mov	r9, r5
   1e4aa:	e7c1      	b.n	1e430 <__sfvwrite_r+0x18c>
   1e4ac:	4648      	mov	r0, r9
   1e4ae:	210a      	movs	r1, #10
   1e4b0:	1c2a      	adds	r2, r5, #0
   1e4b2:	f000 f969 	bl	1e788 <memchr>
   1e4b6:	2800      	cmp	r0, #0
   1e4b8:	d06d      	beq.n	1e596 <__sfvwrite_r+0x2f2>
   1e4ba:	1c47      	adds	r7, r0, #1
   1e4bc:	2601      	movs	r6, #1
   1e4be:	4648      	mov	r0, r9
   1e4c0:	1a3f      	subs	r7, r7, r0
   1e4c2:	9601      	str	r6, [sp, #4]
   1e4c4:	e742      	b.n	1e34c <__sfvwrite_r+0xa8>
   1e4c6:	6962      	ldr	r2, [r4, #20]
   1e4c8:	6921      	ldr	r1, [r4, #16]
   1e4ca:	0050      	lsls	r0, r2, #1
   1e4cc:	1882      	adds	r2, r0, r2
   1e4ce:	6826      	ldr	r6, [r4, #0]
   1e4d0:	0fd0      	lsrs	r0, r2, #31
   1e4d2:	1882      	adds	r2, r0, r2
   1e4d4:	1a76      	subs	r6, r6, r1
   1e4d6:	1052      	asrs	r2, r2, #1
   1e4d8:	4691      	mov	r9, r2
   1e4da:	1c32      	adds	r2, r6, #0
   1e4dc:	3201      	adds	r2, #1
   1e4de:	1952      	adds	r2, r2, r5
   1e4e0:	46b3      	mov	fp, r6
   1e4e2:	4591      	cmp	r9, r2
   1e4e4:	d243      	bcs.n	1e56e <__sfvwrite_r+0x2ca>
   1e4e6:	4691      	mov	r9, r2
   1e4e8:	0558      	lsls	r0, r3, #21
   1e4ea:	d543      	bpl.n	1e574 <__sfvwrite_r+0x2d0>
   1e4ec:	9803      	ldr	r0, [sp, #12]
   1e4ee:	1c11      	adds	r1, r2, #0
   1e4f0:	f7fd f828 	bl	1b544 <_malloc_r>
   1e4f4:	4680      	mov	r8, r0
   1e4f6:	2800      	cmp	r0, #0
   1e4f8:	d054      	beq.n	1e5a4 <__sfvwrite_r+0x300>
   1e4fa:	465a      	mov	r2, fp
   1e4fc:	6921      	ldr	r1, [r4, #16]
   1e4fe:	f7fc ff39 	bl	1b374 <memcpy>
   1e502:	89a2      	ldrh	r2, [r4, #12]
   1e504:	4b2b      	ldr	r3, [pc, #172]	; (1e5b4 <__sfvwrite_r+0x310>)
   1e506:	4013      	ands	r3, r2
   1e508:	2280      	movs	r2, #128	; 0x80
   1e50a:	4313      	orrs	r3, r2
   1e50c:	81a3      	strh	r3, [r4, #12]
   1e50e:	4640      	mov	r0, r8
   1e510:	464a      	mov	r2, r9
   1e512:	465e      	mov	r6, fp
   1e514:	6120      	str	r0, [r4, #16]
   1e516:	1b93      	subs	r3, r2, r6
   1e518:	4458      	add	r0, fp
   1e51a:	6020      	str	r0, [r4, #0]
   1e51c:	6162      	str	r2, [r4, #20]
   1e51e:	46a8      	mov	r8, r5
   1e520:	60a3      	str	r3, [r4, #8]
   1e522:	46a9      	mov	r9, r5
   1e524:	e784      	b.n	1e430 <__sfvwrite_r+0x18c>
   1e526:	4924      	ldr	r1, [pc, #144]	; (1e5b8 <__sfvwrite_r+0x314>)
   1e528:	1e28      	subs	r0, r5, #0
   1e52a:	4288      	cmp	r0, r1
   1e52c:	d900      	bls.n	1e530 <__sfvwrite_r+0x28c>
   1e52e:	1c08      	adds	r0, r1, #0
   1e530:	4649      	mov	r1, r9
   1e532:	f000 ffc9 	bl	1f4c8 <__aeabi_idiv>
   1e536:	464b      	mov	r3, r9
   1e538:	4343      	muls	r3, r0
   1e53a:	6a21      	ldr	r1, [r4, #32]
   1e53c:	9803      	ldr	r0, [sp, #12]
   1e53e:	9a01      	ldr	r2, [sp, #4]
   1e540:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1e542:	47b0      	blx	r6
   1e544:	2800      	cmp	r0, #0
   1e546:	dc00      	bgt.n	1e54a <__sfvwrite_r+0x2a6>
   1e548:	e757      	b.n	1e3fa <__sfvwrite_r+0x156>
   1e54a:	1c02      	adds	r2, r0, #0
   1e54c:	e77d      	b.n	1e44a <__sfvwrite_r+0x1a6>
   1e54e:	4649      	mov	r1, r9
   1e550:	f000 f95c 	bl	1e80c <memmove>
   1e554:	6822      	ldr	r2, [r4, #0]
   1e556:	9e02      	ldr	r6, [sp, #8]
   1e558:	9803      	ldr	r0, [sp, #12]
   1e55a:	1993      	adds	r3, r2, r6
   1e55c:	6023      	str	r3, [r4, #0]
   1e55e:	1c21      	adds	r1, r4, #0
   1e560:	f7ff fd2a 	bl	1dfb8 <_fflush_r>
   1e564:	2800      	cmp	r0, #0
   1e566:	d000      	beq.n	1e56a <__sfvwrite_r+0x2c6>
   1e568:	e747      	b.n	1e3fa <__sfvwrite_r+0x156>
   1e56a:	9e02      	ldr	r6, [sp, #8]
   1e56c:	e708      	b.n	1e380 <__sfvwrite_r+0xdc>
   1e56e:	464a      	mov	r2, r9
   1e570:	0558      	lsls	r0, r3, #21
   1e572:	d4bb      	bmi.n	1e4ec <__sfvwrite_r+0x248>
   1e574:	9803      	ldr	r0, [sp, #12]
   1e576:	f000 fe59 	bl	1f22c <_realloc_r>
   1e57a:	4680      	mov	r8, r0
   1e57c:	2800      	cmp	r0, #0
   1e57e:	d1c6      	bne.n	1e50e <__sfvwrite_r+0x26a>
   1e580:	9803      	ldr	r0, [sp, #12]
   1e582:	6921      	ldr	r1, [r4, #16]
   1e584:	f7fc ff96 	bl	1b4b4 <_free_r>
   1e588:	89a2      	ldrh	r2, [r4, #12]
   1e58a:	2380      	movs	r3, #128	; 0x80
   1e58c:	9f03      	ldr	r7, [sp, #12]
   1e58e:	439a      	bics	r2, r3
   1e590:	230c      	movs	r3, #12
   1e592:	603b      	str	r3, [r7, #0]
   1e594:	e732      	b.n	1e3fc <__sfvwrite_r+0x158>
   1e596:	2601      	movs	r6, #1
   1e598:	1c6f      	adds	r7, r5, #1
   1e59a:	9601      	str	r6, [sp, #4]
   1e59c:	e6d6      	b.n	1e34c <__sfvwrite_r+0xa8>
   1e59e:	2001      	movs	r0, #1
   1e5a0:	4240      	negs	r0, r0
   1e5a2:	e6b2      	b.n	1e30a <__sfvwrite_r+0x66>
   1e5a4:	9e03      	ldr	r6, [sp, #12]
   1e5a6:	230c      	movs	r3, #12
   1e5a8:	6033      	str	r3, [r6, #0]
   1e5aa:	89a2      	ldrh	r2, [r4, #12]
   1e5ac:	e726      	b.n	1e3fc <__sfvwrite_r+0x158>
   1e5ae:	46c0      	nop			; (mov r8, r8)
   1e5b0:	7ffffc00 	.word	0x7ffffc00
   1e5b4:	fffffb7f 	.word	0xfffffb7f
   1e5b8:	7fffffff 	.word	0x7fffffff

0001e5bc <_fwalk>:
   1e5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e5be:	4647      	mov	r7, r8
   1e5c0:	b480      	push	{r7}
   1e5c2:	1c07      	adds	r7, r0, #0
   1e5c4:	3748      	adds	r7, #72	; 0x48
   1e5c6:	4688      	mov	r8, r1
   1e5c8:	2600      	movs	r6, #0
   1e5ca:	2f00      	cmp	r7, #0
   1e5cc:	d013      	beq.n	1e5f6 <_fwalk+0x3a>
   1e5ce:	687d      	ldr	r5, [r7, #4]
   1e5d0:	68bc      	ldr	r4, [r7, #8]
   1e5d2:	3d01      	subs	r5, #1
   1e5d4:	d40c      	bmi.n	1e5f0 <_fwalk+0x34>
   1e5d6:	89a3      	ldrh	r3, [r4, #12]
   1e5d8:	2b01      	cmp	r3, #1
   1e5da:	d906      	bls.n	1e5ea <_fwalk+0x2e>
   1e5dc:	220e      	movs	r2, #14
   1e5de:	5ea3      	ldrsh	r3, [r4, r2]
   1e5e0:	3301      	adds	r3, #1
   1e5e2:	d002      	beq.n	1e5ea <_fwalk+0x2e>
   1e5e4:	1c20      	adds	r0, r4, #0
   1e5e6:	47c0      	blx	r8
   1e5e8:	4306      	orrs	r6, r0
   1e5ea:	3468      	adds	r4, #104	; 0x68
   1e5ec:	3d01      	subs	r5, #1
   1e5ee:	d2f2      	bcs.n	1e5d6 <_fwalk+0x1a>
   1e5f0:	683f      	ldr	r7, [r7, #0]
   1e5f2:	2f00      	cmp	r7, #0
   1e5f4:	d1eb      	bne.n	1e5ce <_fwalk+0x12>
   1e5f6:	1c30      	adds	r0, r6, #0
   1e5f8:	bc04      	pop	{r2}
   1e5fa:	4690      	mov	r8, r2
   1e5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e5fe:	46c0      	nop			; (mov r8, r8)

0001e600 <_fwalk_reent>:
   1e600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e602:	464f      	mov	r7, r9
   1e604:	4646      	mov	r6, r8
   1e606:	b4c0      	push	{r6, r7}
   1e608:	1c06      	adds	r6, r0, #0
   1e60a:	3648      	adds	r6, #72	; 0x48
   1e60c:	4680      	mov	r8, r0
   1e60e:	4689      	mov	r9, r1
   1e610:	2700      	movs	r7, #0
   1e612:	2e00      	cmp	r6, #0
   1e614:	d014      	beq.n	1e640 <_fwalk_reent+0x40>
   1e616:	6875      	ldr	r5, [r6, #4]
   1e618:	68b4      	ldr	r4, [r6, #8]
   1e61a:	3d01      	subs	r5, #1
   1e61c:	d40d      	bmi.n	1e63a <_fwalk_reent+0x3a>
   1e61e:	89a3      	ldrh	r3, [r4, #12]
   1e620:	2b01      	cmp	r3, #1
   1e622:	d907      	bls.n	1e634 <_fwalk_reent+0x34>
   1e624:	220e      	movs	r2, #14
   1e626:	5ea3      	ldrsh	r3, [r4, r2]
   1e628:	3301      	adds	r3, #1
   1e62a:	d003      	beq.n	1e634 <_fwalk_reent+0x34>
   1e62c:	4640      	mov	r0, r8
   1e62e:	1c21      	adds	r1, r4, #0
   1e630:	47c8      	blx	r9
   1e632:	4307      	orrs	r7, r0
   1e634:	3468      	adds	r4, #104	; 0x68
   1e636:	3d01      	subs	r5, #1
   1e638:	d2f1      	bcs.n	1e61e <_fwalk_reent+0x1e>
   1e63a:	6836      	ldr	r6, [r6, #0]
   1e63c:	2e00      	cmp	r6, #0
   1e63e:	d1ea      	bne.n	1e616 <_fwalk_reent+0x16>
   1e640:	1c38      	adds	r0, r7, #0
   1e642:	bc0c      	pop	{r2, r3}
   1e644:	4690      	mov	r8, r2
   1e646:	4699      	mov	r9, r3
   1e648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e64a:	46c0      	nop			; (mov r8, r8)

0001e64c <_setlocale_r>:
   1e64c:	b538      	push	{r3, r4, r5, lr}
   1e64e:	1e14      	subs	r4, r2, #0
   1e650:	d005      	beq.n	1e65e <_setlocale_r+0x12>
   1e652:	1c10      	adds	r0, r2, #0
   1e654:	490b      	ldr	r1, [pc, #44]	; (1e684 <_setlocale_r+0x38>)
   1e656:	f000 fe61 	bl	1f31c <strcmp>
   1e65a:	2800      	cmp	r0, #0
   1e65c:	d102      	bne.n	1e664 <_setlocale_r+0x18>
   1e65e:	4d0a      	ldr	r5, [pc, #40]	; (1e688 <_setlocale_r+0x3c>)
   1e660:	1c28      	adds	r0, r5, #0
   1e662:	bd38      	pop	{r3, r4, r5, pc}
   1e664:	4d08      	ldr	r5, [pc, #32]	; (1e688 <_setlocale_r+0x3c>)
   1e666:	1c20      	adds	r0, r4, #0
   1e668:	1c29      	adds	r1, r5, #0
   1e66a:	f000 fe57 	bl	1f31c <strcmp>
   1e66e:	2800      	cmp	r0, #0
   1e670:	d0f6      	beq.n	1e660 <_setlocale_r+0x14>
   1e672:	1c20      	adds	r0, r4, #0
   1e674:	4905      	ldr	r1, [pc, #20]	; (1e68c <_setlocale_r+0x40>)
   1e676:	f000 fe51 	bl	1f31c <strcmp>
   1e67a:	4243      	negs	r3, r0
   1e67c:	4158      	adcs	r0, r3
   1e67e:	4240      	negs	r0, r0
   1e680:	4028      	ands	r0, r5
   1e682:	e7ee      	b.n	1e662 <_setlocale_r+0x16>
   1e684:	0002716c 	.word	0x0002716c
   1e688:	00026fa4 	.word	0x00026fa4
   1e68c:	00026fcc 	.word	0x00026fcc

0001e690 <__locale_charset>:
   1e690:	4800      	ldr	r0, [pc, #0]	; (1e694 <__locale_charset+0x4>)
   1e692:	4770      	bx	lr
   1e694:	20000208 	.word	0x20000208

0001e698 <__locale_mb_cur_max>:
   1e698:	4b01      	ldr	r3, [pc, #4]	; (1e6a0 <__locale_mb_cur_max+0x8>)
   1e69a:	6a18      	ldr	r0, [r3, #32]
   1e69c:	4770      	bx	lr
   1e69e:	46c0      	nop			; (mov r8, r8)
   1e6a0:	20000208 	.word	0x20000208

0001e6a4 <__locale_msgcharset>:
   1e6a4:	4801      	ldr	r0, [pc, #4]	; (1e6ac <__locale_msgcharset+0x8>)
   1e6a6:	3024      	adds	r0, #36	; 0x24
   1e6a8:	4770      	bx	lr
   1e6aa:	46c0      	nop			; (mov r8, r8)
   1e6ac:	20000208 	.word	0x20000208

0001e6b0 <__locale_cjk_lang>:
   1e6b0:	2000      	movs	r0, #0
   1e6b2:	4770      	bx	lr

0001e6b4 <_localeconv_r>:
   1e6b4:	4801      	ldr	r0, [pc, #4]	; (1e6bc <_localeconv_r+0x8>)
   1e6b6:	3044      	adds	r0, #68	; 0x44
   1e6b8:	4770      	bx	lr
   1e6ba:	46c0      	nop			; (mov r8, r8)
   1e6bc:	20000208 	.word	0x20000208

0001e6c0 <setlocale>:
   1e6c0:	b508      	push	{r3, lr}
   1e6c2:	1c0a      	adds	r2, r1, #0
   1e6c4:	4903      	ldr	r1, [pc, #12]	; (1e6d4 <setlocale+0x14>)
   1e6c6:	1c03      	adds	r3, r0, #0
   1e6c8:	6808      	ldr	r0, [r1, #0]
   1e6ca:	1c19      	adds	r1, r3, #0
   1e6cc:	f7ff ffbe 	bl	1e64c <_setlocale_r>
   1e6d0:	bd08      	pop	{r3, pc}
   1e6d2:	46c0      	nop			; (mov r8, r8)
   1e6d4:	200001a0 	.word	0x200001a0

0001e6d8 <localeconv>:
   1e6d8:	4801      	ldr	r0, [pc, #4]	; (1e6e0 <localeconv+0x8>)
   1e6da:	3044      	adds	r0, #68	; 0x44
   1e6dc:	4770      	bx	lr
   1e6de:	46c0      	nop			; (mov r8, r8)
   1e6e0:	20000208 	.word	0x20000208

0001e6e4 <__smakebuf_r>:
   1e6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e6e6:	898b      	ldrh	r3, [r1, #12]
   1e6e8:	b091      	sub	sp, #68	; 0x44
   1e6ea:	1c05      	adds	r5, r0, #0
   1e6ec:	1c0c      	adds	r4, r1, #0
   1e6ee:	079a      	lsls	r2, r3, #30
   1e6f0:	d433      	bmi.n	1e75a <__smakebuf_r+0x76>
   1e6f2:	220e      	movs	r2, #14
   1e6f4:	5e89      	ldrsh	r1, [r1, r2]
   1e6f6:	2900      	cmp	r1, #0
   1e6f8:	db22      	blt.n	1e740 <__smakebuf_r+0x5c>
   1e6fa:	aa01      	add	r2, sp, #4
   1e6fc:	f000 fe3e 	bl	1f37c <_fstat_r>
   1e700:	2800      	cmp	r0, #0
   1e702:	db1c      	blt.n	1e73e <__smakebuf_r+0x5a>
   1e704:	9b02      	ldr	r3, [sp, #8]
   1e706:	27f0      	movs	r7, #240	; 0xf0
   1e708:	023f      	lsls	r7, r7, #8
   1e70a:	401f      	ands	r7, r3
   1e70c:	4b1c      	ldr	r3, [pc, #112]	; (1e780 <__smakebuf_r+0x9c>)
   1e70e:	2680      	movs	r6, #128	; 0x80
   1e710:	18ff      	adds	r7, r7, r3
   1e712:	427b      	negs	r3, r7
   1e714:	415f      	adcs	r7, r3
   1e716:	00f6      	lsls	r6, r6, #3
   1e718:	1c28      	adds	r0, r5, #0
   1e71a:	1c31      	adds	r1, r6, #0
   1e71c:	f7fc ff12 	bl	1b544 <_malloc_r>
   1e720:	2800      	cmp	r0, #0
   1e722:	d014      	beq.n	1e74e <__smakebuf_r+0x6a>
   1e724:	4b17      	ldr	r3, [pc, #92]	; (1e784 <__smakebuf_r+0xa0>)
   1e726:	62ab      	str	r3, [r5, #40]	; 0x28
   1e728:	89a2      	ldrh	r2, [r4, #12]
   1e72a:	2380      	movs	r3, #128	; 0x80
   1e72c:	4313      	orrs	r3, r2
   1e72e:	81a3      	strh	r3, [r4, #12]
   1e730:	6020      	str	r0, [r4, #0]
   1e732:	6120      	str	r0, [r4, #16]
   1e734:	6166      	str	r6, [r4, #20]
   1e736:	2f00      	cmp	r7, #0
   1e738:	d116      	bne.n	1e768 <__smakebuf_r+0x84>
   1e73a:	b011      	add	sp, #68	; 0x44
   1e73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e73e:	89a3      	ldrh	r3, [r4, #12]
   1e740:	2700      	movs	r7, #0
   1e742:	2640      	movs	r6, #64	; 0x40
   1e744:	061a      	lsls	r2, r3, #24
   1e746:	d4e7      	bmi.n	1e718 <__smakebuf_r+0x34>
   1e748:	2680      	movs	r6, #128	; 0x80
   1e74a:	00f6      	lsls	r6, r6, #3
   1e74c:	e7e4      	b.n	1e718 <__smakebuf_r+0x34>
   1e74e:	89a3      	ldrh	r3, [r4, #12]
   1e750:	059a      	lsls	r2, r3, #22
   1e752:	d4f2      	bmi.n	1e73a <__smakebuf_r+0x56>
   1e754:	2202      	movs	r2, #2
   1e756:	4313      	orrs	r3, r2
   1e758:	81a3      	strh	r3, [r4, #12]
   1e75a:	1c23      	adds	r3, r4, #0
   1e75c:	3347      	adds	r3, #71	; 0x47
   1e75e:	6023      	str	r3, [r4, #0]
   1e760:	6123      	str	r3, [r4, #16]
   1e762:	2301      	movs	r3, #1
   1e764:	6163      	str	r3, [r4, #20]
   1e766:	e7e8      	b.n	1e73a <__smakebuf_r+0x56>
   1e768:	230e      	movs	r3, #14
   1e76a:	5ee1      	ldrsh	r1, [r4, r3]
   1e76c:	1c28      	adds	r0, r5, #0
   1e76e:	f000 fe19 	bl	1f3a4 <_isatty_r>
   1e772:	2800      	cmp	r0, #0
   1e774:	d0e1      	beq.n	1e73a <__smakebuf_r+0x56>
   1e776:	89a2      	ldrh	r2, [r4, #12]
   1e778:	2301      	movs	r3, #1
   1e77a:	4313      	orrs	r3, r2
   1e77c:	81a3      	strh	r3, [r4, #12]
   1e77e:	e7dc      	b.n	1e73a <__smakebuf_r+0x56>
   1e780:	ffffe000 	.word	0xffffe000
   1e784:	0001e049 	.word	0x0001e049

0001e788 <memchr>:
   1e788:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e78a:	b2cc      	uxtb	r4, r1
   1e78c:	0783      	lsls	r3, r0, #30
   1e78e:	d037      	beq.n	1e800 <memchr+0x78>
   1e790:	1e53      	subs	r3, r2, #1
   1e792:	2a00      	cmp	r2, #0
   1e794:	d01f      	beq.n	1e7d6 <memchr+0x4e>
   1e796:	7802      	ldrb	r2, [r0, #0]
   1e798:	42a2      	cmp	r2, r4
   1e79a:	d01d      	beq.n	1e7d8 <memchr+0x50>
   1e79c:	2503      	movs	r5, #3
   1e79e:	e005      	b.n	1e7ac <memchr+0x24>
   1e7a0:	2b00      	cmp	r3, #0
   1e7a2:	d018      	beq.n	1e7d6 <memchr+0x4e>
   1e7a4:	7802      	ldrb	r2, [r0, #0]
   1e7a6:	3b01      	subs	r3, #1
   1e7a8:	42a2      	cmp	r2, r4
   1e7aa:	d015      	beq.n	1e7d8 <memchr+0x50>
   1e7ac:	3001      	adds	r0, #1
   1e7ae:	4228      	tst	r0, r5
   1e7b0:	d1f6      	bne.n	1e7a0 <memchr+0x18>
   1e7b2:	2b03      	cmp	r3, #3
   1e7b4:	d811      	bhi.n	1e7da <memchr+0x52>
   1e7b6:	2b00      	cmp	r3, #0
   1e7b8:	d00d      	beq.n	1e7d6 <memchr+0x4e>
   1e7ba:	7802      	ldrb	r2, [r0, #0]
   1e7bc:	42a2      	cmp	r2, r4
   1e7be:	d00b      	beq.n	1e7d8 <memchr+0x50>
   1e7c0:	1c42      	adds	r2, r0, #1
   1e7c2:	18c3      	adds	r3, r0, r3
   1e7c4:	e004      	b.n	1e7d0 <memchr+0x48>
   1e7c6:	3201      	adds	r2, #1
   1e7c8:	1e51      	subs	r1, r2, #1
   1e7ca:	7809      	ldrb	r1, [r1, #0]
   1e7cc:	42a1      	cmp	r1, r4
   1e7ce:	d003      	beq.n	1e7d8 <memchr+0x50>
   1e7d0:	1e10      	subs	r0, r2, #0
   1e7d2:	4298      	cmp	r0, r3
   1e7d4:	d1f7      	bne.n	1e7c6 <memchr+0x3e>
   1e7d6:	2000      	movs	r0, #0
   1e7d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e7da:	26ff      	movs	r6, #255	; 0xff
   1e7dc:	4031      	ands	r1, r6
   1e7de:	020e      	lsls	r6, r1, #8
   1e7e0:	4331      	orrs	r1, r6
   1e7e2:	040e      	lsls	r6, r1, #16
   1e7e4:	4d07      	ldr	r5, [pc, #28]	; (1e804 <memchr+0x7c>)
   1e7e6:	430e      	orrs	r6, r1
   1e7e8:	6802      	ldr	r2, [r0, #0]
   1e7ea:	4f07      	ldr	r7, [pc, #28]	; (1e808 <memchr+0x80>)
   1e7ec:	4072      	eors	r2, r6
   1e7ee:	19d1      	adds	r1, r2, r7
   1e7f0:	4391      	bics	r1, r2
   1e7f2:	4229      	tst	r1, r5
   1e7f4:	d1df      	bne.n	1e7b6 <memchr+0x2e>
   1e7f6:	3b04      	subs	r3, #4
   1e7f8:	3004      	adds	r0, #4
   1e7fa:	2b03      	cmp	r3, #3
   1e7fc:	d8f4      	bhi.n	1e7e8 <memchr+0x60>
   1e7fe:	e7da      	b.n	1e7b6 <memchr+0x2e>
   1e800:	1c13      	adds	r3, r2, #0
   1e802:	e7d6      	b.n	1e7b2 <memchr+0x2a>
   1e804:	80808080 	.word	0x80808080
   1e808:	fefefeff 	.word	0xfefefeff

0001e80c <memmove>:
   1e80c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e80e:	4288      	cmp	r0, r1
   1e810:	d90e      	bls.n	1e830 <memmove+0x24>
   1e812:	188d      	adds	r5, r1, r2
   1e814:	42a8      	cmp	r0, r5
   1e816:	d20b      	bcs.n	1e830 <memmove+0x24>
   1e818:	1886      	adds	r6, r0, r2
   1e81a:	1e53      	subs	r3, r2, #1
   1e81c:	4251      	negs	r1, r2
   1e81e:	2a00      	cmp	r2, #0
   1e820:	d005      	beq.n	1e82e <memmove+0x22>
   1e822:	186a      	adds	r2, r5, r1
   1e824:	5cd4      	ldrb	r4, [r2, r3]
   1e826:	1872      	adds	r2, r6, r1
   1e828:	54d4      	strb	r4, [r2, r3]
   1e82a:	3b01      	subs	r3, #1
   1e82c:	d2f9      	bcs.n	1e822 <memmove+0x16>
   1e82e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e830:	2a0f      	cmp	r2, #15
   1e832:	d809      	bhi.n	1e848 <memmove+0x3c>
   1e834:	1c05      	adds	r5, r0, #0
   1e836:	2a00      	cmp	r2, #0
   1e838:	d0f9      	beq.n	1e82e <memmove+0x22>
   1e83a:	2300      	movs	r3, #0
   1e83c:	5ccc      	ldrb	r4, [r1, r3]
   1e83e:	54ec      	strb	r4, [r5, r3]
   1e840:	3301      	adds	r3, #1
   1e842:	4293      	cmp	r3, r2
   1e844:	d1fa      	bne.n	1e83c <memmove+0x30>
   1e846:	e7f2      	b.n	1e82e <memmove+0x22>
   1e848:	1c03      	adds	r3, r0, #0
   1e84a:	430b      	orrs	r3, r1
   1e84c:	079c      	lsls	r4, r3, #30
   1e84e:	d12a      	bne.n	1e8a6 <memmove+0x9a>
   1e850:	1c16      	adds	r6, r2, #0
   1e852:	3e10      	subs	r6, #16
   1e854:	0936      	lsrs	r6, r6, #4
   1e856:	0135      	lsls	r5, r6, #4
   1e858:	1945      	adds	r5, r0, r5
   1e85a:	3510      	adds	r5, #16
   1e85c:	1c0c      	adds	r4, r1, #0
   1e85e:	1c03      	adds	r3, r0, #0
   1e860:	6827      	ldr	r7, [r4, #0]
   1e862:	601f      	str	r7, [r3, #0]
   1e864:	6867      	ldr	r7, [r4, #4]
   1e866:	605f      	str	r7, [r3, #4]
   1e868:	68a7      	ldr	r7, [r4, #8]
   1e86a:	609f      	str	r7, [r3, #8]
   1e86c:	68e7      	ldr	r7, [r4, #12]
   1e86e:	3410      	adds	r4, #16
   1e870:	60df      	str	r7, [r3, #12]
   1e872:	3310      	adds	r3, #16
   1e874:	42ab      	cmp	r3, r5
   1e876:	d1f3      	bne.n	1e860 <memmove+0x54>
   1e878:	1c73      	adds	r3, r6, #1
   1e87a:	011b      	lsls	r3, r3, #4
   1e87c:	18c5      	adds	r5, r0, r3
   1e87e:	18c9      	adds	r1, r1, r3
   1e880:	230f      	movs	r3, #15
   1e882:	4013      	ands	r3, r2
   1e884:	2b03      	cmp	r3, #3
   1e886:	d910      	bls.n	1e8aa <memmove+0x9e>
   1e888:	1f1c      	subs	r4, r3, #4
   1e88a:	08a4      	lsrs	r4, r4, #2
   1e88c:	3401      	adds	r4, #1
   1e88e:	00a4      	lsls	r4, r4, #2
   1e890:	2300      	movs	r3, #0
   1e892:	58ce      	ldr	r6, [r1, r3]
   1e894:	50ee      	str	r6, [r5, r3]
   1e896:	3304      	adds	r3, #4
   1e898:	42a3      	cmp	r3, r4
   1e89a:	d1fa      	bne.n	1e892 <memmove+0x86>
   1e89c:	18ed      	adds	r5, r5, r3
   1e89e:	18c9      	adds	r1, r1, r3
   1e8a0:	2303      	movs	r3, #3
   1e8a2:	401a      	ands	r2, r3
   1e8a4:	e7c7      	b.n	1e836 <memmove+0x2a>
   1e8a6:	1c05      	adds	r5, r0, #0
   1e8a8:	e7c7      	b.n	1e83a <memmove+0x2e>
   1e8aa:	1c1a      	adds	r2, r3, #0
   1e8ac:	e7c3      	b.n	1e836 <memmove+0x2a>
   1e8ae:	46c0      	nop			; (mov r8, r8)

0001e8b0 <_Balloc>:
   1e8b0:	b570      	push	{r4, r5, r6, lr}
   1e8b2:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1e8b4:	1c05      	adds	r5, r0, #0
   1e8b6:	1c0e      	adds	r6, r1, #0
   1e8b8:	2c00      	cmp	r4, #0
   1e8ba:	d00d      	beq.n	1e8d8 <_Balloc+0x28>
   1e8bc:	68e3      	ldr	r3, [r4, #12]
   1e8be:	2b00      	cmp	r3, #0
   1e8c0:	d013      	beq.n	1e8ea <_Balloc+0x3a>
   1e8c2:	00b2      	lsls	r2, r6, #2
   1e8c4:	189a      	adds	r2, r3, r2
   1e8c6:	6810      	ldr	r0, [r2, #0]
   1e8c8:	2800      	cmp	r0, #0
   1e8ca:	d01a      	beq.n	1e902 <_Balloc+0x52>
   1e8cc:	6803      	ldr	r3, [r0, #0]
   1e8ce:	6013      	str	r3, [r2, #0]
   1e8d0:	2200      	movs	r2, #0
   1e8d2:	6102      	str	r2, [r0, #16]
   1e8d4:	60c2      	str	r2, [r0, #12]
   1e8d6:	bd70      	pop	{r4, r5, r6, pc}
   1e8d8:	2010      	movs	r0, #16
   1e8da:	f7fc fd37 	bl	1b34c <malloc>
   1e8de:	6268      	str	r0, [r5, #36]	; 0x24
   1e8e0:	6044      	str	r4, [r0, #4]
   1e8e2:	6084      	str	r4, [r0, #8]
   1e8e4:	6004      	str	r4, [r0, #0]
   1e8e6:	60c4      	str	r4, [r0, #12]
   1e8e8:	1c04      	adds	r4, r0, #0
   1e8ea:	1c28      	adds	r0, r5, #0
   1e8ec:	2104      	movs	r1, #4
   1e8ee:	2221      	movs	r2, #33	; 0x21
   1e8f0:	f000 fc8e 	bl	1f210 <_calloc_r>
   1e8f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1e8f6:	60e0      	str	r0, [r4, #12]
   1e8f8:	68db      	ldr	r3, [r3, #12]
   1e8fa:	2b00      	cmp	r3, #0
   1e8fc:	d1e1      	bne.n	1e8c2 <_Balloc+0x12>
   1e8fe:	2000      	movs	r0, #0
   1e900:	e7e9      	b.n	1e8d6 <_Balloc+0x26>
   1e902:	2401      	movs	r4, #1
   1e904:	40b4      	lsls	r4, r6
   1e906:	1d62      	adds	r2, r4, #5
   1e908:	0092      	lsls	r2, r2, #2
   1e90a:	1c28      	adds	r0, r5, #0
   1e90c:	2101      	movs	r1, #1
   1e90e:	f000 fc7f 	bl	1f210 <_calloc_r>
   1e912:	2800      	cmp	r0, #0
   1e914:	d0f3      	beq.n	1e8fe <_Balloc+0x4e>
   1e916:	6046      	str	r6, [r0, #4]
   1e918:	6084      	str	r4, [r0, #8]
   1e91a:	e7d9      	b.n	1e8d0 <_Balloc+0x20>

0001e91c <_Bfree>:
   1e91c:	b570      	push	{r4, r5, r6, lr}
   1e91e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   1e920:	1c05      	adds	r5, r0, #0
   1e922:	1c0c      	adds	r4, r1, #0
   1e924:	2e00      	cmp	r6, #0
   1e926:	d00a      	beq.n	1e93e <_Bfree+0x22>
   1e928:	2c00      	cmp	r4, #0
   1e92a:	d007      	beq.n	1e93c <_Bfree+0x20>
   1e92c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1e92e:	6861      	ldr	r1, [r4, #4]
   1e930:	68d2      	ldr	r2, [r2, #12]
   1e932:	008b      	lsls	r3, r1, #2
   1e934:	18d3      	adds	r3, r2, r3
   1e936:	681a      	ldr	r2, [r3, #0]
   1e938:	6022      	str	r2, [r4, #0]
   1e93a:	601c      	str	r4, [r3, #0]
   1e93c:	bd70      	pop	{r4, r5, r6, pc}
   1e93e:	2010      	movs	r0, #16
   1e940:	f7fc fd04 	bl	1b34c <malloc>
   1e944:	6268      	str	r0, [r5, #36]	; 0x24
   1e946:	6046      	str	r6, [r0, #4]
   1e948:	6086      	str	r6, [r0, #8]
   1e94a:	6006      	str	r6, [r0, #0]
   1e94c:	60c6      	str	r6, [r0, #12]
   1e94e:	e7eb      	b.n	1e928 <_Bfree+0xc>

0001e950 <__multadd>:
   1e950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e952:	464d      	mov	r5, r9
   1e954:	4644      	mov	r4, r8
   1e956:	465f      	mov	r7, fp
   1e958:	4656      	mov	r6, sl
   1e95a:	4698      	mov	r8, r3
   1e95c:	690b      	ldr	r3, [r1, #16]
   1e95e:	b4f0      	push	{r4, r5, r6, r7}
   1e960:	1c0d      	adds	r5, r1, #0
   1e962:	4683      	mov	fp, r0
   1e964:	468a      	mov	sl, r1
   1e966:	4699      	mov	r9, r3
   1e968:	3514      	adds	r5, #20
   1e96a:	2400      	movs	r4, #0
   1e96c:	682e      	ldr	r6, [r5, #0]
   1e96e:	3401      	adds	r4, #1
   1e970:	0437      	lsls	r7, r6, #16
   1e972:	0c3f      	lsrs	r7, r7, #16
   1e974:	4357      	muls	r7, r2
   1e976:	0c36      	lsrs	r6, r6, #16
   1e978:	4356      	muls	r6, r2
   1e97a:	4447      	add	r7, r8
   1e97c:	0c3b      	lsrs	r3, r7, #16
   1e97e:	199e      	adds	r6, r3, r6
   1e980:	043f      	lsls	r7, r7, #16
   1e982:	0c31      	lsrs	r1, r6, #16
   1e984:	0c3f      	lsrs	r7, r7, #16
   1e986:	0436      	lsls	r6, r6, #16
   1e988:	19f6      	adds	r6, r6, r7
   1e98a:	4688      	mov	r8, r1
   1e98c:	c540      	stmia	r5!, {r6}
   1e98e:	45a1      	cmp	r9, r4
   1e990:	dcec      	bgt.n	1e96c <__multadd+0x1c>
   1e992:	2900      	cmp	r1, #0
   1e994:	d00d      	beq.n	1e9b2 <__multadd+0x62>
   1e996:	4652      	mov	r2, sl
   1e998:	6892      	ldr	r2, [r2, #8]
   1e99a:	4591      	cmp	r9, r2
   1e99c:	da10      	bge.n	1e9c0 <__multadd+0x70>
   1e99e:	464b      	mov	r3, r9
   1e9a0:	3304      	adds	r3, #4
   1e9a2:	009b      	lsls	r3, r3, #2
   1e9a4:	4453      	add	r3, sl
   1e9a6:	4641      	mov	r1, r8
   1e9a8:	6059      	str	r1, [r3, #4]
   1e9aa:	464b      	mov	r3, r9
   1e9ac:	3301      	adds	r3, #1
   1e9ae:	4652      	mov	r2, sl
   1e9b0:	6113      	str	r3, [r2, #16]
   1e9b2:	4650      	mov	r0, sl
   1e9b4:	bc3c      	pop	{r2, r3, r4, r5}
   1e9b6:	4690      	mov	r8, r2
   1e9b8:	4699      	mov	r9, r3
   1e9ba:	46a2      	mov	sl, r4
   1e9bc:	46ab      	mov	fp, r5
   1e9be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e9c0:	4653      	mov	r3, sl
   1e9c2:	6859      	ldr	r1, [r3, #4]
   1e9c4:	4658      	mov	r0, fp
   1e9c6:	3101      	adds	r1, #1
   1e9c8:	f7ff ff72 	bl	1e8b0 <_Balloc>
   1e9cc:	4653      	mov	r3, sl
   1e9ce:	691a      	ldr	r2, [r3, #16]
   1e9d0:	4651      	mov	r1, sl
   1e9d2:	3202      	adds	r2, #2
   1e9d4:	1c04      	adds	r4, r0, #0
   1e9d6:	310c      	adds	r1, #12
   1e9d8:	0092      	lsls	r2, r2, #2
   1e9da:	300c      	adds	r0, #12
   1e9dc:	f7fc fcca 	bl	1b374 <memcpy>
   1e9e0:	4651      	mov	r1, sl
   1e9e2:	4658      	mov	r0, fp
   1e9e4:	f7ff ff9a 	bl	1e91c <_Bfree>
   1e9e8:	46a2      	mov	sl, r4
   1e9ea:	e7d8      	b.n	1e99e <__multadd+0x4e>

0001e9ec <__s2b>:
   1e9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e9ee:	464f      	mov	r7, r9
   1e9f0:	4646      	mov	r6, r8
   1e9f2:	b4c0      	push	{r6, r7}
   1e9f4:	1c07      	adds	r7, r0, #0
   1e9f6:	1c18      	adds	r0, r3, #0
   1e9f8:	1c0c      	adds	r4, r1, #0
   1e9fa:	3008      	adds	r0, #8
   1e9fc:	2109      	movs	r1, #9
   1e9fe:	4690      	mov	r8, r2
   1ea00:	4699      	mov	r9, r3
   1ea02:	f000 fd61 	bl	1f4c8 <__aeabi_idiv>
   1ea06:	2801      	cmp	r0, #1
   1ea08:	dd3a      	ble.n	1ea80 <__s2b+0x94>
   1ea0a:	2501      	movs	r5, #1
   1ea0c:	2100      	movs	r1, #0
   1ea0e:	006d      	lsls	r5, r5, #1
   1ea10:	3101      	adds	r1, #1
   1ea12:	42a8      	cmp	r0, r5
   1ea14:	dcfb      	bgt.n	1ea0e <__s2b+0x22>
   1ea16:	1c38      	adds	r0, r7, #0
   1ea18:	f7ff ff4a 	bl	1e8b0 <_Balloc>
   1ea1c:	9b08      	ldr	r3, [sp, #32]
   1ea1e:	1c01      	adds	r1, r0, #0
   1ea20:	6143      	str	r3, [r0, #20]
   1ea22:	2301      	movs	r3, #1
   1ea24:	6103      	str	r3, [r0, #16]
   1ea26:	4643      	mov	r3, r8
   1ea28:	2b09      	cmp	r3, #9
   1ea2a:	dd25      	ble.n	1ea78 <__s2b+0x8c>
   1ea2c:	1c26      	adds	r6, r4, #0
   1ea2e:	3609      	adds	r6, #9
   1ea30:	1c35      	adds	r5, r6, #0
   1ea32:	4444      	add	r4, r8
   1ea34:	782b      	ldrb	r3, [r5, #0]
   1ea36:	1c38      	adds	r0, r7, #0
   1ea38:	3b30      	subs	r3, #48	; 0x30
   1ea3a:	220a      	movs	r2, #10
   1ea3c:	f7ff ff88 	bl	1e950 <__multadd>
   1ea40:	3501      	adds	r5, #1
   1ea42:	1c01      	adds	r1, r0, #0
   1ea44:	42a5      	cmp	r5, r4
   1ea46:	d1f5      	bne.n	1ea34 <__s2b+0x48>
   1ea48:	4643      	mov	r3, r8
   1ea4a:	18f4      	adds	r4, r6, r3
   1ea4c:	3c08      	subs	r4, #8
   1ea4e:	45c1      	cmp	r9, r8
   1ea50:	dd0d      	ble.n	1ea6e <__s2b+0x82>
   1ea52:	464b      	mov	r3, r9
   1ea54:	18e5      	adds	r5, r4, r3
   1ea56:	4643      	mov	r3, r8
   1ea58:	1aed      	subs	r5, r5, r3
   1ea5a:	7823      	ldrb	r3, [r4, #0]
   1ea5c:	1c38      	adds	r0, r7, #0
   1ea5e:	3b30      	subs	r3, #48	; 0x30
   1ea60:	220a      	movs	r2, #10
   1ea62:	f7ff ff75 	bl	1e950 <__multadd>
   1ea66:	3401      	adds	r4, #1
   1ea68:	1c01      	adds	r1, r0, #0
   1ea6a:	42ac      	cmp	r4, r5
   1ea6c:	d1f5      	bne.n	1ea5a <__s2b+0x6e>
   1ea6e:	1c08      	adds	r0, r1, #0
   1ea70:	bc0c      	pop	{r2, r3}
   1ea72:	4690      	mov	r8, r2
   1ea74:	4699      	mov	r9, r3
   1ea76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ea78:	2309      	movs	r3, #9
   1ea7a:	340a      	adds	r4, #10
   1ea7c:	4698      	mov	r8, r3
   1ea7e:	e7e6      	b.n	1ea4e <__s2b+0x62>
   1ea80:	2100      	movs	r1, #0
   1ea82:	e7c8      	b.n	1ea16 <__s2b+0x2a>

0001ea84 <__hi0bits>:
   1ea84:	1c03      	adds	r3, r0, #0
   1ea86:	0c01      	lsrs	r1, r0, #16
   1ea88:	2200      	movs	r2, #0
   1ea8a:	2900      	cmp	r1, #0
   1ea8c:	d101      	bne.n	1ea92 <__hi0bits+0xe>
   1ea8e:	0403      	lsls	r3, r0, #16
   1ea90:	2210      	movs	r2, #16
   1ea92:	0e19      	lsrs	r1, r3, #24
   1ea94:	d101      	bne.n	1ea9a <__hi0bits+0x16>
   1ea96:	3208      	adds	r2, #8
   1ea98:	021b      	lsls	r3, r3, #8
   1ea9a:	0f19      	lsrs	r1, r3, #28
   1ea9c:	d101      	bne.n	1eaa2 <__hi0bits+0x1e>
   1ea9e:	3204      	adds	r2, #4
   1eaa0:	011b      	lsls	r3, r3, #4
   1eaa2:	0f99      	lsrs	r1, r3, #30
   1eaa4:	d101      	bne.n	1eaaa <__hi0bits+0x26>
   1eaa6:	3202      	adds	r2, #2
   1eaa8:	009b      	lsls	r3, r3, #2
   1eaaa:	2b00      	cmp	r3, #0
   1eaac:	db05      	blt.n	1eaba <__hi0bits+0x36>
   1eaae:	2020      	movs	r0, #32
   1eab0:	0059      	lsls	r1, r3, #1
   1eab2:	d400      	bmi.n	1eab6 <__hi0bits+0x32>
   1eab4:	4770      	bx	lr
   1eab6:	1c50      	adds	r0, r2, #1
   1eab8:	e7fc      	b.n	1eab4 <__hi0bits+0x30>
   1eaba:	1c10      	adds	r0, r2, #0
   1eabc:	e7fa      	b.n	1eab4 <__hi0bits+0x30>
   1eabe:	46c0      	nop			; (mov r8, r8)

0001eac0 <__lo0bits>:
   1eac0:	6803      	ldr	r3, [r0, #0]
   1eac2:	1c01      	adds	r1, r0, #0
   1eac4:	0758      	lsls	r0, r3, #29
   1eac6:	d008      	beq.n	1eada <__lo0bits+0x1a>
   1eac8:	2000      	movs	r0, #0
   1eaca:	07da      	lsls	r2, r3, #31
   1eacc:	d404      	bmi.n	1ead8 <__lo0bits+0x18>
   1eace:	0798      	lsls	r0, r3, #30
   1ead0:	d420      	bmi.n	1eb14 <__lo0bits+0x54>
   1ead2:	089b      	lsrs	r3, r3, #2
   1ead4:	600b      	str	r3, [r1, #0]
   1ead6:	2002      	movs	r0, #2
   1ead8:	4770      	bx	lr
   1eada:	0418      	lsls	r0, r3, #16
   1eadc:	2200      	movs	r2, #0
   1eade:	2800      	cmp	r0, #0
   1eae0:	d101      	bne.n	1eae6 <__lo0bits+0x26>
   1eae2:	0c1b      	lsrs	r3, r3, #16
   1eae4:	2210      	movs	r2, #16
   1eae6:	20ff      	movs	r0, #255	; 0xff
   1eae8:	4218      	tst	r0, r3
   1eaea:	d101      	bne.n	1eaf0 <__lo0bits+0x30>
   1eaec:	3208      	adds	r2, #8
   1eaee:	0a1b      	lsrs	r3, r3, #8
   1eaf0:	0718      	lsls	r0, r3, #28
   1eaf2:	d101      	bne.n	1eaf8 <__lo0bits+0x38>
   1eaf4:	3204      	adds	r2, #4
   1eaf6:	091b      	lsrs	r3, r3, #4
   1eaf8:	0798      	lsls	r0, r3, #30
   1eafa:	d101      	bne.n	1eb00 <__lo0bits+0x40>
   1eafc:	3202      	adds	r2, #2
   1eafe:	089b      	lsrs	r3, r3, #2
   1eb00:	07d8      	lsls	r0, r3, #31
   1eb02:	d404      	bmi.n	1eb0e <__lo0bits+0x4e>
   1eb04:	085b      	lsrs	r3, r3, #1
   1eb06:	2020      	movs	r0, #32
   1eb08:	2b00      	cmp	r3, #0
   1eb0a:	d0e5      	beq.n	1ead8 <__lo0bits+0x18>
   1eb0c:	3201      	adds	r2, #1
   1eb0e:	600b      	str	r3, [r1, #0]
   1eb10:	1c10      	adds	r0, r2, #0
   1eb12:	e7e1      	b.n	1ead8 <__lo0bits+0x18>
   1eb14:	085b      	lsrs	r3, r3, #1
   1eb16:	600b      	str	r3, [r1, #0]
   1eb18:	2001      	movs	r0, #1
   1eb1a:	e7dd      	b.n	1ead8 <__lo0bits+0x18>

0001eb1c <__i2b>:
   1eb1c:	b510      	push	{r4, lr}
   1eb1e:	1c0c      	adds	r4, r1, #0
   1eb20:	2101      	movs	r1, #1
   1eb22:	f7ff fec5 	bl	1e8b0 <_Balloc>
   1eb26:	2301      	movs	r3, #1
   1eb28:	6144      	str	r4, [r0, #20]
   1eb2a:	6103      	str	r3, [r0, #16]
   1eb2c:	bd10      	pop	{r4, pc}
   1eb2e:	46c0      	nop			; (mov r8, r8)

0001eb30 <__multiply>:
   1eb30:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eb32:	465f      	mov	r7, fp
   1eb34:	4656      	mov	r6, sl
   1eb36:	464d      	mov	r5, r9
   1eb38:	4644      	mov	r4, r8
   1eb3a:	b4f0      	push	{r4, r5, r6, r7}
   1eb3c:	690f      	ldr	r7, [r1, #16]
   1eb3e:	6914      	ldr	r4, [r2, #16]
   1eb40:	b085      	sub	sp, #20
   1eb42:	1c0e      	adds	r6, r1, #0
   1eb44:	1c15      	adds	r5, r2, #0
   1eb46:	42a7      	cmp	r7, r4
   1eb48:	da04      	bge.n	1eb54 <__multiply+0x24>
   1eb4a:	1c3b      	adds	r3, r7, #0
   1eb4c:	1c16      	adds	r6, r2, #0
   1eb4e:	1c27      	adds	r7, r4, #0
   1eb50:	1c0d      	adds	r5, r1, #0
   1eb52:	1c1c      	adds	r4, r3, #0
   1eb54:	68b3      	ldr	r3, [r6, #8]
   1eb56:	193a      	adds	r2, r7, r4
   1eb58:	6871      	ldr	r1, [r6, #4]
   1eb5a:	4690      	mov	r8, r2
   1eb5c:	429a      	cmp	r2, r3
   1eb5e:	dd00      	ble.n	1eb62 <__multiply+0x32>
   1eb60:	3101      	adds	r1, #1
   1eb62:	f7ff fea5 	bl	1e8b0 <_Balloc>
   1eb66:	2114      	movs	r1, #20
   1eb68:	4642      	mov	r2, r8
   1eb6a:	4683      	mov	fp, r0
   1eb6c:	448b      	add	fp, r1
   1eb6e:	0093      	lsls	r3, r2, #2
   1eb70:	445b      	add	r3, fp
   1eb72:	1c19      	adds	r1, r3, #0
   1eb74:	9303      	str	r3, [sp, #12]
   1eb76:	9002      	str	r0, [sp, #8]
   1eb78:	465b      	mov	r3, fp
   1eb7a:	2200      	movs	r2, #0
   1eb7c:	458b      	cmp	fp, r1
   1eb7e:	d203      	bcs.n	1eb88 <__multiply+0x58>
   1eb80:	9903      	ldr	r1, [sp, #12]
   1eb82:	c304      	stmia	r3!, {r2}
   1eb84:	4299      	cmp	r1, r3
   1eb86:	d8fc      	bhi.n	1eb82 <__multiply+0x52>
   1eb88:	3514      	adds	r5, #20
   1eb8a:	46aa      	mov	sl, r5
   1eb8c:	00a4      	lsls	r4, r4, #2
   1eb8e:	3614      	adds	r6, #20
   1eb90:	00bf      	lsls	r7, r7, #2
   1eb92:	4454      	add	r4, sl
   1eb94:	9600      	str	r6, [sp, #0]
   1eb96:	19f7      	adds	r7, r6, r7
   1eb98:	9401      	str	r4, [sp, #4]
   1eb9a:	42a5      	cmp	r5, r4
   1eb9c:	d24c      	bcs.n	1ec38 <__multiply+0x108>
   1eb9e:	4651      	mov	r1, sl
   1eba0:	680d      	ldr	r5, [r1, #0]
   1eba2:	042c      	lsls	r4, r5, #16
   1eba4:	0c24      	lsrs	r4, r4, #16
   1eba6:	d01f      	beq.n	1ebe8 <__multiply+0xb8>
   1eba8:	9a00      	ldr	r2, [sp, #0]
   1ebaa:	465b      	mov	r3, fp
   1ebac:	2500      	movs	r5, #0
   1ebae:	6819      	ldr	r1, [r3, #0]
   1ebb0:	ca40      	ldmia	r2!, {r6}
   1ebb2:	0408      	lsls	r0, r1, #16
   1ebb4:	0c01      	lsrs	r1, r0, #16
   1ebb6:	0430      	lsls	r0, r6, #16
   1ebb8:	0c00      	lsrs	r0, r0, #16
   1ebba:	4360      	muls	r0, r4
   1ebbc:	0c36      	lsrs	r6, r6, #16
   1ebbe:	1808      	adds	r0, r1, r0
   1ebc0:	4366      	muls	r6, r4
   1ebc2:	1940      	adds	r0, r0, r5
   1ebc4:	681d      	ldr	r5, [r3, #0]
   1ebc6:	4699      	mov	r9, r3
   1ebc8:	0c29      	lsrs	r1, r5, #16
   1ebca:	1989      	adds	r1, r1, r6
   1ebcc:	0c05      	lsrs	r5, r0, #16
   1ebce:	1949      	adds	r1, r1, r5
   1ebd0:	0400      	lsls	r0, r0, #16
   1ebd2:	0c0d      	lsrs	r5, r1, #16
   1ebd4:	0c00      	lsrs	r0, r0, #16
   1ebd6:	0409      	lsls	r1, r1, #16
   1ebd8:	4301      	orrs	r1, r0
   1ebda:	c302      	stmia	r3!, {r1}
   1ebdc:	4297      	cmp	r7, r2
   1ebde:	d8e6      	bhi.n	1ebae <__multiply+0x7e>
   1ebe0:	4649      	mov	r1, r9
   1ebe2:	604d      	str	r5, [r1, #4]
   1ebe4:	4652      	mov	r2, sl
   1ebe6:	6815      	ldr	r5, [r2, #0]
   1ebe8:	0c2d      	lsrs	r5, r5, #16
   1ebea:	d01f      	beq.n	1ec2c <__multiply+0xfc>
   1ebec:	465b      	mov	r3, fp
   1ebee:	6819      	ldr	r1, [r3, #0]
   1ebf0:	2600      	movs	r6, #0
   1ebf2:	9a00      	ldr	r2, [sp, #0]
   1ebf4:	1c08      	adds	r0, r1, #0
   1ebf6:	1c34      	adds	r4, r6, #0
   1ebf8:	8816      	ldrh	r6, [r2, #0]
   1ebfa:	0c00      	lsrs	r0, r0, #16
   1ebfc:	436e      	muls	r6, r5
   1ebfe:	1836      	adds	r6, r6, r0
   1ec00:	1936      	adds	r6, r6, r4
   1ec02:	0409      	lsls	r1, r1, #16
   1ec04:	0430      	lsls	r0, r6, #16
   1ec06:	0c09      	lsrs	r1, r1, #16
   1ec08:	4301      	orrs	r1, r0
   1ec0a:	6019      	str	r1, [r3, #0]
   1ec0c:	ca10      	ldmia	r2!, {r4}
   1ec0e:	6858      	ldr	r0, [r3, #4]
   1ec10:	0c24      	lsrs	r4, r4, #16
   1ec12:	436c      	muls	r4, r5
   1ec14:	0401      	lsls	r1, r0, #16
   1ec16:	0c09      	lsrs	r1, r1, #16
   1ec18:	1861      	adds	r1, r4, r1
   1ec1a:	0c36      	lsrs	r6, r6, #16
   1ec1c:	1989      	adds	r1, r1, r6
   1ec1e:	469c      	mov	ip, r3
   1ec20:	0c0c      	lsrs	r4, r1, #16
   1ec22:	3304      	adds	r3, #4
   1ec24:	4297      	cmp	r7, r2
   1ec26:	d8e7      	bhi.n	1ebf8 <__multiply+0xc8>
   1ec28:	4665      	mov	r5, ip
   1ec2a:	6069      	str	r1, [r5, #4]
   1ec2c:	2104      	movs	r1, #4
   1ec2e:	9a01      	ldr	r2, [sp, #4]
   1ec30:	448a      	add	sl, r1
   1ec32:	448b      	add	fp, r1
   1ec34:	4552      	cmp	r2, sl
   1ec36:	d8b2      	bhi.n	1eb9e <__multiply+0x6e>
   1ec38:	4643      	mov	r3, r8
   1ec3a:	2b00      	cmp	r3, #0
   1ec3c:	dd0e      	ble.n	1ec5c <__multiply+0x12c>
   1ec3e:	9b03      	ldr	r3, [sp, #12]
   1ec40:	3b04      	subs	r3, #4
   1ec42:	681d      	ldr	r5, [r3, #0]
   1ec44:	2d00      	cmp	r5, #0
   1ec46:	d109      	bne.n	1ec5c <__multiply+0x12c>
   1ec48:	4642      	mov	r2, r8
   1ec4a:	e003      	b.n	1ec54 <__multiply+0x124>
   1ec4c:	3b04      	subs	r3, #4
   1ec4e:	6819      	ldr	r1, [r3, #0]
   1ec50:	2900      	cmp	r1, #0
   1ec52:	d102      	bne.n	1ec5a <__multiply+0x12a>
   1ec54:	3a01      	subs	r2, #1
   1ec56:	2a00      	cmp	r2, #0
   1ec58:	d1f8      	bne.n	1ec4c <__multiply+0x11c>
   1ec5a:	4690      	mov	r8, r2
   1ec5c:	9b02      	ldr	r3, [sp, #8]
   1ec5e:	4642      	mov	r2, r8
   1ec60:	1c18      	adds	r0, r3, #0
   1ec62:	611a      	str	r2, [r3, #16]
   1ec64:	b005      	add	sp, #20
   1ec66:	bc3c      	pop	{r2, r3, r4, r5}
   1ec68:	4690      	mov	r8, r2
   1ec6a:	4699      	mov	r9, r3
   1ec6c:	46a2      	mov	sl, r4
   1ec6e:	46ab      	mov	fp, r5
   1ec70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ec72:	46c0      	nop			; (mov r8, r8)

0001ec74 <__pow5mult>:
   1ec74:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ec76:	2303      	movs	r3, #3
   1ec78:	464e      	mov	r6, r9
   1ec7a:	4645      	mov	r5, r8
   1ec7c:	4657      	mov	r7, sl
   1ec7e:	b4e0      	push	{r5, r6, r7}
   1ec80:	4680      	mov	r8, r0
   1ec82:	1c0e      	adds	r6, r1, #0
   1ec84:	1c14      	adds	r4, r2, #0
   1ec86:	4013      	ands	r3, r2
   1ec88:	d132      	bne.n	1ecf0 <__pow5mult+0x7c>
   1ec8a:	10a4      	asrs	r4, r4, #2
   1ec8c:	d020      	beq.n	1ecd0 <__pow5mult+0x5c>
   1ec8e:	4643      	mov	r3, r8
   1ec90:	6a5f      	ldr	r7, [r3, #36]	; 0x24
   1ec92:	2f00      	cmp	r7, #0
   1ec94:	d035      	beq.n	1ed02 <__pow5mult+0x8e>
   1ec96:	68bd      	ldr	r5, [r7, #8]
   1ec98:	2d00      	cmp	r5, #0
   1ec9a:	d03c      	beq.n	1ed16 <__pow5mult+0xa2>
   1ec9c:	2300      	movs	r3, #0
   1ec9e:	2701      	movs	r7, #1
   1eca0:	469a      	mov	sl, r3
   1eca2:	4227      	tst	r7, r4
   1eca4:	d107      	bne.n	1ecb6 <__pow5mult+0x42>
   1eca6:	1064      	asrs	r4, r4, #1
   1eca8:	d012      	beq.n	1ecd0 <__pow5mult+0x5c>
   1ecaa:	6828      	ldr	r0, [r5, #0]
   1ecac:	2800      	cmp	r0, #0
   1ecae:	d015      	beq.n	1ecdc <__pow5mult+0x68>
   1ecb0:	1c05      	adds	r5, r0, #0
   1ecb2:	4227      	tst	r7, r4
   1ecb4:	d0f7      	beq.n	1eca6 <__pow5mult+0x32>
   1ecb6:	1c31      	adds	r1, r6, #0
   1ecb8:	1c2a      	adds	r2, r5, #0
   1ecba:	4640      	mov	r0, r8
   1ecbc:	f7ff ff38 	bl	1eb30 <__multiply>
   1ecc0:	1c31      	adds	r1, r6, #0
   1ecc2:	4681      	mov	r9, r0
   1ecc4:	4640      	mov	r0, r8
   1ecc6:	f7ff fe29 	bl	1e91c <_Bfree>
   1ecca:	464e      	mov	r6, r9
   1eccc:	1064      	asrs	r4, r4, #1
   1ecce:	d1ec      	bne.n	1ecaa <__pow5mult+0x36>
   1ecd0:	1c30      	adds	r0, r6, #0
   1ecd2:	bc1c      	pop	{r2, r3, r4}
   1ecd4:	4690      	mov	r8, r2
   1ecd6:	4699      	mov	r9, r3
   1ecd8:	46a2      	mov	sl, r4
   1ecda:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ecdc:	1c29      	adds	r1, r5, #0
   1ecde:	1c2a      	adds	r2, r5, #0
   1ece0:	4640      	mov	r0, r8
   1ece2:	f7ff ff25 	bl	1eb30 <__multiply>
   1ece6:	4653      	mov	r3, sl
   1ece8:	6028      	str	r0, [r5, #0]
   1ecea:	6003      	str	r3, [r0, #0]
   1ecec:	1c05      	adds	r5, r0, #0
   1ecee:	e7e0      	b.n	1ecb2 <__pow5mult+0x3e>
   1ecf0:	4a0f      	ldr	r2, [pc, #60]	; (1ed30 <__pow5mult+0xbc>)
   1ecf2:	3b01      	subs	r3, #1
   1ecf4:	009b      	lsls	r3, r3, #2
   1ecf6:	589a      	ldr	r2, [r3, r2]
   1ecf8:	2300      	movs	r3, #0
   1ecfa:	f7ff fe29 	bl	1e950 <__multadd>
   1ecfe:	1c06      	adds	r6, r0, #0
   1ed00:	e7c3      	b.n	1ec8a <__pow5mult+0x16>
   1ed02:	2010      	movs	r0, #16
   1ed04:	f7fc fb22 	bl	1b34c <malloc>
   1ed08:	4643      	mov	r3, r8
   1ed0a:	6258      	str	r0, [r3, #36]	; 0x24
   1ed0c:	6047      	str	r7, [r0, #4]
   1ed0e:	6087      	str	r7, [r0, #8]
   1ed10:	6007      	str	r7, [r0, #0]
   1ed12:	60c7      	str	r7, [r0, #12]
   1ed14:	1c07      	adds	r7, r0, #0
   1ed16:	4640      	mov	r0, r8
   1ed18:	2101      	movs	r1, #1
   1ed1a:	f7ff fdc9 	bl	1e8b0 <_Balloc>
   1ed1e:	4b05      	ldr	r3, [pc, #20]	; (1ed34 <__pow5mult+0xc0>)
   1ed20:	1c05      	adds	r5, r0, #0
   1ed22:	6143      	str	r3, [r0, #20]
   1ed24:	2301      	movs	r3, #1
   1ed26:	6103      	str	r3, [r0, #16]
   1ed28:	2300      	movs	r3, #0
   1ed2a:	60b8      	str	r0, [r7, #8]
   1ed2c:	6003      	str	r3, [r0, #0]
   1ed2e:	e7b5      	b.n	1ec9c <__pow5mult+0x28>
   1ed30:	00027178 	.word	0x00027178
   1ed34:	00000271 	.word	0x00000271

0001ed38 <__lshift>:
   1ed38:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ed3a:	464d      	mov	r5, r9
   1ed3c:	4644      	mov	r4, r8
   1ed3e:	465f      	mov	r7, fp
   1ed40:	4656      	mov	r6, sl
   1ed42:	b4f0      	push	{r4, r5, r6, r7}
   1ed44:	1c0e      	adds	r6, r1, #0
   1ed46:	1155      	asrs	r5, r2, #5
   1ed48:	1c17      	adds	r7, r2, #0
   1ed4a:	6932      	ldr	r2, [r6, #16]
   1ed4c:	68b3      	ldr	r3, [r6, #8]
   1ed4e:	1952      	adds	r2, r2, r5
   1ed50:	1c14      	adds	r4, r2, #0
   1ed52:	3401      	adds	r4, #1
   1ed54:	b083      	sub	sp, #12
   1ed56:	4680      	mov	r8, r0
   1ed58:	6849      	ldr	r1, [r1, #4]
   1ed5a:	4691      	mov	r9, r2
   1ed5c:	429c      	cmp	r4, r3
   1ed5e:	dd03      	ble.n	1ed68 <__lshift+0x30>
   1ed60:	3101      	adds	r1, #1
   1ed62:	005b      	lsls	r3, r3, #1
   1ed64:	429c      	cmp	r4, r3
   1ed66:	dcfb      	bgt.n	1ed60 <__lshift+0x28>
   1ed68:	4640      	mov	r0, r8
   1ed6a:	f7ff fda1 	bl	1e8b0 <_Balloc>
   1ed6e:	1c01      	adds	r1, r0, #0
   1ed70:	4682      	mov	sl, r0
   1ed72:	3114      	adds	r1, #20
   1ed74:	2d00      	cmp	r5, #0
   1ed76:	dd08      	ble.n	1ed8a <__lshift+0x52>
   1ed78:	1c0a      	adds	r2, r1, #0
   1ed7a:	2300      	movs	r3, #0
   1ed7c:	2000      	movs	r0, #0
   1ed7e:	3301      	adds	r3, #1
   1ed80:	c201      	stmia	r2!, {r0}
   1ed82:	42ab      	cmp	r3, r5
   1ed84:	d1fb      	bne.n	1ed7e <__lshift+0x46>
   1ed86:	009b      	lsls	r3, r3, #2
   1ed88:	18c9      	adds	r1, r1, r3
   1ed8a:	6932      	ldr	r2, [r6, #16]
   1ed8c:	1c33      	adds	r3, r6, #0
   1ed8e:	3314      	adds	r3, #20
   1ed90:	0090      	lsls	r0, r2, #2
   1ed92:	251f      	movs	r5, #31
   1ed94:	1818      	adds	r0, r3, r0
   1ed96:	403d      	ands	r5, r7
   1ed98:	d023      	beq.n	1ede2 <__lshift+0xaa>
   1ed9a:	2220      	movs	r2, #32
   1ed9c:	1b52      	subs	r2, r2, r5
   1ed9e:	4694      	mov	ip, r2
   1eda0:	1c0a      	adds	r2, r1, #0
   1eda2:	2100      	movs	r1, #0
   1eda4:	681f      	ldr	r7, [r3, #0]
   1eda6:	9201      	str	r2, [sp, #4]
   1eda8:	40af      	lsls	r7, r5
   1edaa:	4339      	orrs	r1, r7
   1edac:	c202      	stmia	r2!, {r1}
   1edae:	cb02      	ldmia	r3!, {r1}
   1edb0:	4667      	mov	r7, ip
   1edb2:	40f9      	lsrs	r1, r7
   1edb4:	4298      	cmp	r0, r3
   1edb6:	d8f5      	bhi.n	1eda4 <__lshift+0x6c>
   1edb8:	9a01      	ldr	r2, [sp, #4]
   1edba:	6051      	str	r1, [r2, #4]
   1edbc:	2900      	cmp	r1, #0
   1edbe:	d001      	beq.n	1edc4 <__lshift+0x8c>
   1edc0:	464c      	mov	r4, r9
   1edc2:	3402      	adds	r4, #2
   1edc4:	4653      	mov	r3, sl
   1edc6:	3c01      	subs	r4, #1
   1edc8:	4640      	mov	r0, r8
   1edca:	611c      	str	r4, [r3, #16]
   1edcc:	1c31      	adds	r1, r6, #0
   1edce:	f7ff fda5 	bl	1e91c <_Bfree>
   1edd2:	4650      	mov	r0, sl
   1edd4:	b003      	add	sp, #12
   1edd6:	bc3c      	pop	{r2, r3, r4, r5}
   1edd8:	4690      	mov	r8, r2
   1edda:	4699      	mov	r9, r3
   1eddc:	46a2      	mov	sl, r4
   1edde:	46ab      	mov	fp, r5
   1ede0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ede2:	1c0a      	adds	r2, r1, #0
   1ede4:	cb02      	ldmia	r3!, {r1}
   1ede6:	c202      	stmia	r2!, {r1}
   1ede8:	4298      	cmp	r0, r3
   1edea:	d8fb      	bhi.n	1ede4 <__lshift+0xac>
   1edec:	e7ea      	b.n	1edc4 <__lshift+0x8c>
   1edee:	46c0      	nop			; (mov r8, r8)

0001edf0 <__mcmp>:
   1edf0:	b510      	push	{r4, lr}
   1edf2:	690b      	ldr	r3, [r1, #16]
   1edf4:	6904      	ldr	r4, [r0, #16]
   1edf6:	1ae2      	subs	r2, r4, r3
   1edf8:	d111      	bne.n	1ee1e <__mcmp+0x2e>
   1edfa:	009a      	lsls	r2, r3, #2
   1edfc:	3014      	adds	r0, #20
   1edfe:	3114      	adds	r1, #20
   1ee00:	1883      	adds	r3, r0, r2
   1ee02:	1889      	adds	r1, r1, r2
   1ee04:	e001      	b.n	1ee0a <__mcmp+0x1a>
   1ee06:	4298      	cmp	r0, r3
   1ee08:	d20b      	bcs.n	1ee22 <__mcmp+0x32>
   1ee0a:	3b04      	subs	r3, #4
   1ee0c:	3904      	subs	r1, #4
   1ee0e:	681c      	ldr	r4, [r3, #0]
   1ee10:	680a      	ldr	r2, [r1, #0]
   1ee12:	4294      	cmp	r4, r2
   1ee14:	d0f7      	beq.n	1ee06 <__mcmp+0x16>
   1ee16:	4294      	cmp	r4, r2
   1ee18:	4192      	sbcs	r2, r2
   1ee1a:	2301      	movs	r3, #1
   1ee1c:	431a      	orrs	r2, r3
   1ee1e:	1c10      	adds	r0, r2, #0
   1ee20:	bd10      	pop	{r4, pc}
   1ee22:	2200      	movs	r2, #0
   1ee24:	e7fb      	b.n	1ee1e <__mcmp+0x2e>
   1ee26:	46c0      	nop			; (mov r8, r8)

0001ee28 <__mdiff>:
   1ee28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ee2a:	464f      	mov	r7, r9
   1ee2c:	4646      	mov	r6, r8
   1ee2e:	b4c0      	push	{r6, r7}
   1ee30:	1c0c      	adds	r4, r1, #0
   1ee32:	1c07      	adds	r7, r0, #0
   1ee34:	1c08      	adds	r0, r1, #0
   1ee36:	1c11      	adds	r1, r2, #0
   1ee38:	1c16      	adds	r6, r2, #0
   1ee3a:	f7ff ffd9 	bl	1edf0 <__mcmp>
   1ee3e:	1e05      	subs	r5, r0, #0
   1ee40:	d05d      	beq.n	1eefe <__mdiff+0xd6>
   1ee42:	2800      	cmp	r0, #0
   1ee44:	db56      	blt.n	1eef4 <__mdiff+0xcc>
   1ee46:	2500      	movs	r5, #0
   1ee48:	6861      	ldr	r1, [r4, #4]
   1ee4a:	1c38      	adds	r0, r7, #0
   1ee4c:	f7ff fd30 	bl	1e8b0 <_Balloc>
   1ee50:	4684      	mov	ip, r0
   1ee52:	60c5      	str	r5, [r0, #12]
   1ee54:	6920      	ldr	r0, [r4, #16]
   1ee56:	1c23      	adds	r3, r4, #0
   1ee58:	3314      	adds	r3, #20
   1ee5a:	0082      	lsls	r2, r0, #2
   1ee5c:	18d2      	adds	r2, r2, r3
   1ee5e:	4690      	mov	r8, r2
   1ee60:	6932      	ldr	r2, [r6, #16]
   1ee62:	1c35      	adds	r5, r6, #0
   1ee64:	3514      	adds	r5, #20
   1ee66:	0092      	lsls	r2, r2, #2
   1ee68:	1952      	adds	r2, r2, r5
   1ee6a:	4664      	mov	r4, ip
   1ee6c:	4691      	mov	r9, r2
   1ee6e:	3414      	adds	r4, #20
   1ee70:	2100      	movs	r1, #0
   1ee72:	cb04      	ldmia	r3!, {r2}
   1ee74:	cd80      	ldmia	r5!, {r7}
   1ee76:	0416      	lsls	r6, r2, #16
   1ee78:	0c36      	lsrs	r6, r6, #16
   1ee7a:	1871      	adds	r1, r6, r1
   1ee7c:	043e      	lsls	r6, r7, #16
   1ee7e:	0c36      	lsrs	r6, r6, #16
   1ee80:	1b8e      	subs	r6, r1, r6
   1ee82:	0c12      	lsrs	r2, r2, #16
   1ee84:	0c3f      	lsrs	r7, r7, #16
   1ee86:	1431      	asrs	r1, r6, #16
   1ee88:	1bd2      	subs	r2, r2, r7
   1ee8a:	1852      	adds	r2, r2, r1
   1ee8c:	0436      	lsls	r6, r6, #16
   1ee8e:	0c36      	lsrs	r6, r6, #16
   1ee90:	1411      	asrs	r1, r2, #16
   1ee92:	3404      	adds	r4, #4
   1ee94:	0412      	lsls	r2, r2, #16
   1ee96:	4332      	orrs	r2, r6
   1ee98:	1f26      	subs	r6, r4, #4
   1ee9a:	6032      	str	r2, [r6, #0]
   1ee9c:	45a9      	cmp	r9, r5
   1ee9e:	d8e8      	bhi.n	1ee72 <__mdiff+0x4a>
   1eea0:	4699      	mov	r9, r3
   1eea2:	4598      	cmp	r8, r3
   1eea4:	d917      	bls.n	1eed6 <__mdiff+0xae>
   1eea6:	1c27      	adds	r7, r4, #0
   1eea8:	cb40      	ldmia	r3!, {r6}
   1eeaa:	0435      	lsls	r5, r6, #16
   1eeac:	0c2d      	lsrs	r5, r5, #16
   1eeae:	186d      	adds	r5, r5, r1
   1eeb0:	142a      	asrs	r2, r5, #16
   1eeb2:	0c36      	lsrs	r6, r6, #16
   1eeb4:	1992      	adds	r2, r2, r6
   1eeb6:	042d      	lsls	r5, r5, #16
   1eeb8:	1411      	asrs	r1, r2, #16
   1eeba:	0c2d      	lsrs	r5, r5, #16
   1eebc:	0412      	lsls	r2, r2, #16
   1eebe:	432a      	orrs	r2, r5
   1eec0:	c704      	stmia	r7!, {r2}
   1eec2:	4598      	cmp	r8, r3
   1eec4:	d8f0      	bhi.n	1eea8 <__mdiff+0x80>
   1eec6:	4649      	mov	r1, r9
   1eec8:	43cb      	mvns	r3, r1
   1eeca:	4443      	add	r3, r8
   1eecc:	089b      	lsrs	r3, r3, #2
   1eece:	3301      	adds	r3, #1
   1eed0:	009b      	lsls	r3, r3, #2
   1eed2:	18e4      	adds	r4, r4, r3
   1eed4:	1f26      	subs	r6, r4, #4
   1eed6:	1c33      	adds	r3, r6, #0
   1eed8:	2a00      	cmp	r2, #0
   1eeda:	d104      	bne.n	1eee6 <__mdiff+0xbe>
   1eedc:	3b04      	subs	r3, #4
   1eede:	681a      	ldr	r2, [r3, #0]
   1eee0:	3801      	subs	r0, #1
   1eee2:	2a00      	cmp	r2, #0
   1eee4:	d0fa      	beq.n	1eedc <__mdiff+0xb4>
   1eee6:	4663      	mov	r3, ip
   1eee8:	6118      	str	r0, [r3, #16]
   1eeea:	4660      	mov	r0, ip
   1eeec:	bc0c      	pop	{r2, r3}
   1eeee:	4690      	mov	r8, r2
   1eef0:	4699      	mov	r9, r3
   1eef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1eef4:	1c23      	adds	r3, r4, #0
   1eef6:	2501      	movs	r5, #1
   1eef8:	1c34      	adds	r4, r6, #0
   1eefa:	1c1e      	adds	r6, r3, #0
   1eefc:	e7a4      	b.n	1ee48 <__mdiff+0x20>
   1eefe:	1c38      	adds	r0, r7, #0
   1ef00:	2100      	movs	r1, #0
   1ef02:	f7ff fcd5 	bl	1e8b0 <_Balloc>
   1ef06:	2301      	movs	r3, #1
   1ef08:	6103      	str	r3, [r0, #16]
   1ef0a:	6145      	str	r5, [r0, #20]
   1ef0c:	e7ee      	b.n	1eeec <__mdiff+0xc4>
   1ef0e:	46c0      	nop			; (mov r8, r8)

0001ef10 <__ulp>:
   1ef10:	4b0e      	ldr	r3, [pc, #56]	; (1ef4c <__ulp+0x3c>)
   1ef12:	4a0f      	ldr	r2, [pc, #60]	; (1ef50 <__ulp+0x40>)
   1ef14:	400b      	ands	r3, r1
   1ef16:	189b      	adds	r3, r3, r2
   1ef18:	b510      	push	{r4, lr}
   1ef1a:	2b00      	cmp	r3, #0
   1ef1c:	dd02      	ble.n	1ef24 <__ulp+0x14>
   1ef1e:	1c19      	adds	r1, r3, #0
   1ef20:	2000      	movs	r0, #0
   1ef22:	bd10      	pop	{r4, pc}
   1ef24:	425b      	negs	r3, r3
   1ef26:	151b      	asrs	r3, r3, #20
   1ef28:	2000      	movs	r0, #0
   1ef2a:	2100      	movs	r1, #0
   1ef2c:	2b13      	cmp	r3, #19
   1ef2e:	dd07      	ble.n	1ef40 <__ulp+0x30>
   1ef30:	2201      	movs	r2, #1
   1ef32:	2b32      	cmp	r3, #50	; 0x32
   1ef34:	dc02      	bgt.n	1ef3c <__ulp+0x2c>
   1ef36:	2433      	movs	r4, #51	; 0x33
   1ef38:	1ae3      	subs	r3, r4, r3
   1ef3a:	409a      	lsls	r2, r3
   1ef3c:	1c10      	adds	r0, r2, #0
   1ef3e:	e7f0      	b.n	1ef22 <__ulp+0x12>
   1ef40:	2280      	movs	r2, #128	; 0x80
   1ef42:	0312      	lsls	r2, r2, #12
   1ef44:	1c11      	adds	r1, r2, #0
   1ef46:	4119      	asrs	r1, r3
   1ef48:	2000      	movs	r0, #0
   1ef4a:	e7ea      	b.n	1ef22 <__ulp+0x12>
   1ef4c:	7ff00000 	.word	0x7ff00000
   1ef50:	fcc00000 	.word	0xfcc00000

0001ef54 <__b2d>:
   1ef54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ef56:	4646      	mov	r6, r8
   1ef58:	464f      	mov	r7, r9
   1ef5a:	b4c0      	push	{r6, r7}
   1ef5c:	6907      	ldr	r7, [r0, #16]
   1ef5e:	1c06      	adds	r6, r0, #0
   1ef60:	3614      	adds	r6, #20
   1ef62:	00bf      	lsls	r7, r7, #2
   1ef64:	19f7      	adds	r7, r6, r7
   1ef66:	1f3c      	subs	r4, r7, #4
   1ef68:	6825      	ldr	r5, [r4, #0]
   1ef6a:	4688      	mov	r8, r1
   1ef6c:	1c28      	adds	r0, r5, #0
   1ef6e:	f7ff fd89 	bl	1ea84 <__hi0bits>
   1ef72:	2320      	movs	r3, #32
   1ef74:	1a1b      	subs	r3, r3, r0
   1ef76:	4641      	mov	r1, r8
   1ef78:	600b      	str	r3, [r1, #0]
   1ef7a:	280a      	cmp	r0, #10
   1ef7c:	dc1a      	bgt.n	1efb4 <__b2d+0x60>
   1ef7e:	230b      	movs	r3, #11
   1ef80:	1a1b      	subs	r3, r3, r0
   1ef82:	1c2a      	adds	r2, r5, #0
   1ef84:	40da      	lsrs	r2, r3
   1ef86:	491d      	ldr	r1, [pc, #116]	; (1effc <__b2d+0xa8>)
   1ef88:	4691      	mov	r9, r2
   1ef8a:	469c      	mov	ip, r3
   1ef8c:	1c0b      	adds	r3, r1, #0
   1ef8e:	4649      	mov	r1, r9
   1ef90:	430b      	orrs	r3, r1
   1ef92:	2100      	movs	r1, #0
   1ef94:	42a6      	cmp	r6, r4
   1ef96:	d203      	bcs.n	1efa0 <__b2d+0x4c>
   1ef98:	3f08      	subs	r7, #8
   1ef9a:	6839      	ldr	r1, [r7, #0]
   1ef9c:	4664      	mov	r4, ip
   1ef9e:	40e1      	lsrs	r1, r4
   1efa0:	3015      	adds	r0, #21
   1efa2:	4085      	lsls	r5, r0
   1efa4:	1c0a      	adds	r2, r1, #0
   1efa6:	432a      	orrs	r2, r5
   1efa8:	1c10      	adds	r0, r2, #0
   1efaa:	1c19      	adds	r1, r3, #0
   1efac:	bc0c      	pop	{r2, r3}
   1efae:	4690      	mov	r8, r2
   1efb0:	4699      	mov	r9, r3
   1efb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1efb4:	2100      	movs	r1, #0
   1efb6:	42a6      	cmp	r6, r4
   1efb8:	d202      	bcs.n	1efc0 <__b2d+0x6c>
   1efba:	1c3c      	adds	r4, r7, #0
   1efbc:	3c08      	subs	r4, #8
   1efbe:	6821      	ldr	r1, [r4, #0]
   1efc0:	1c07      	adds	r7, r0, #0
   1efc2:	3f0b      	subs	r7, #11
   1efc4:	2f00      	cmp	r7, #0
   1efc6:	d013      	beq.n	1eff0 <__b2d+0x9c>
   1efc8:	232b      	movs	r3, #43	; 0x2b
   1efca:	1a18      	subs	r0, r3, r0
   1efcc:	4b0b      	ldr	r3, [pc, #44]	; (1effc <__b2d+0xa8>)
   1efce:	40bd      	lsls	r5, r7
   1efd0:	432b      	orrs	r3, r5
   1efd2:	469c      	mov	ip, r3
   1efd4:	1c0d      	adds	r5, r1, #0
   1efd6:	40c5      	lsrs	r5, r0
   1efd8:	4663      	mov	r3, ip
   1efda:	432b      	orrs	r3, r5
   1efdc:	2500      	movs	r5, #0
   1efde:	42b4      	cmp	r4, r6
   1efe0:	d902      	bls.n	1efe8 <__b2d+0x94>
   1efe2:	3c04      	subs	r4, #4
   1efe4:	6825      	ldr	r5, [r4, #0]
   1efe6:	40c5      	lsrs	r5, r0
   1efe8:	40b9      	lsls	r1, r7
   1efea:	1c2a      	adds	r2, r5, #0
   1efec:	430a      	orrs	r2, r1
   1efee:	e7db      	b.n	1efa8 <__b2d+0x54>
   1eff0:	4802      	ldr	r0, [pc, #8]	; (1effc <__b2d+0xa8>)
   1eff2:	1c0a      	adds	r2, r1, #0
   1eff4:	1c03      	adds	r3, r0, #0
   1eff6:	432b      	orrs	r3, r5
   1eff8:	e7d6      	b.n	1efa8 <__b2d+0x54>
   1effa:	46c0      	nop			; (mov r8, r8)
   1effc:	3ff00000 	.word	0x3ff00000

0001f000 <__d2b>:
   1f000:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f002:	2101      	movs	r1, #1
   1f004:	b083      	sub	sp, #12
   1f006:	1c1d      	adds	r5, r3, #0
   1f008:	1c14      	adds	r4, r2, #0
   1f00a:	f7ff fc51 	bl	1e8b0 <_Balloc>
   1f00e:	032b      	lsls	r3, r5, #12
   1f010:	006a      	lsls	r2, r5, #1
   1f012:	1c06      	adds	r6, r0, #0
   1f014:	0b1b      	lsrs	r3, r3, #12
   1f016:	0d57      	lsrs	r7, r2, #21
   1f018:	d002      	beq.n	1f020 <__d2b+0x20>
   1f01a:	2280      	movs	r2, #128	; 0x80
   1f01c:	0352      	lsls	r2, r2, #13
   1f01e:	4313      	orrs	r3, r2
   1f020:	9301      	str	r3, [sp, #4]
   1f022:	2c00      	cmp	r4, #0
   1f024:	d01a      	beq.n	1f05c <__d2b+0x5c>
   1f026:	4668      	mov	r0, sp
   1f028:	9400      	str	r4, [sp, #0]
   1f02a:	f7ff fd49 	bl	1eac0 <__lo0bits>
   1f02e:	2800      	cmp	r0, #0
   1f030:	d131      	bne.n	1f096 <__d2b+0x96>
   1f032:	9b00      	ldr	r3, [sp, #0]
   1f034:	9c01      	ldr	r4, [sp, #4]
   1f036:	6173      	str	r3, [r6, #20]
   1f038:	61b4      	str	r4, [r6, #24]
   1f03a:	4263      	negs	r3, r4
   1f03c:	4163      	adcs	r3, r4
   1f03e:	2402      	movs	r4, #2
   1f040:	1ae4      	subs	r4, r4, r3
   1f042:	6134      	str	r4, [r6, #16]
   1f044:	2f00      	cmp	r7, #0
   1f046:	d014      	beq.n	1f072 <__d2b+0x72>
   1f048:	4a19      	ldr	r2, [pc, #100]	; (1f0b0 <__d2b+0xb0>)
   1f04a:	9908      	ldr	r1, [sp, #32]
   1f04c:	18bb      	adds	r3, r7, r2
   1f04e:	181b      	adds	r3, r3, r0
   1f050:	600b      	str	r3, [r1, #0]
   1f052:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f054:	2335      	movs	r3, #53	; 0x35
   1f056:	1a18      	subs	r0, r3, r0
   1f058:	6010      	str	r0, [r2, #0]
   1f05a:	e019      	b.n	1f090 <__d2b+0x90>
   1f05c:	a801      	add	r0, sp, #4
   1f05e:	f7ff fd2f 	bl	1eac0 <__lo0bits>
   1f062:	9901      	ldr	r1, [sp, #4]
   1f064:	2301      	movs	r3, #1
   1f066:	6171      	str	r1, [r6, #20]
   1f068:	6133      	str	r3, [r6, #16]
   1f06a:	3020      	adds	r0, #32
   1f06c:	2401      	movs	r4, #1
   1f06e:	2f00      	cmp	r7, #0
   1f070:	d1ea      	bne.n	1f048 <__d2b+0x48>
   1f072:	4b10      	ldr	r3, [pc, #64]	; (1f0b4 <__d2b+0xb4>)
   1f074:	4a10      	ldr	r2, [pc, #64]	; (1f0b8 <__d2b+0xb8>)
   1f076:	18c0      	adds	r0, r0, r3
   1f078:	18a3      	adds	r3, r4, r2
   1f07a:	9908      	ldr	r1, [sp, #32]
   1f07c:	009b      	lsls	r3, r3, #2
   1f07e:	18f3      	adds	r3, r6, r3
   1f080:	6008      	str	r0, [r1, #0]
   1f082:	6958      	ldr	r0, [r3, #20]
   1f084:	f7ff fcfe 	bl	1ea84 <__hi0bits>
   1f088:	0164      	lsls	r4, r4, #5
   1f08a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f08c:	1a24      	subs	r4, r4, r0
   1f08e:	601c      	str	r4, [r3, #0]
   1f090:	1c30      	adds	r0, r6, #0
   1f092:	b003      	add	sp, #12
   1f094:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f096:	9c01      	ldr	r4, [sp, #4]
   1f098:	2320      	movs	r3, #32
   1f09a:	1a1b      	subs	r3, r3, r0
   1f09c:	1c21      	adds	r1, r4, #0
   1f09e:	4099      	lsls	r1, r3
   1f0a0:	9a00      	ldr	r2, [sp, #0]
   1f0a2:	1c0b      	adds	r3, r1, #0
   1f0a4:	4313      	orrs	r3, r2
   1f0a6:	40c4      	lsrs	r4, r0
   1f0a8:	6173      	str	r3, [r6, #20]
   1f0aa:	9401      	str	r4, [sp, #4]
   1f0ac:	e7c4      	b.n	1f038 <__d2b+0x38>
   1f0ae:	46c0      	nop			; (mov r8, r8)
   1f0b0:	fffffbcd 	.word	0xfffffbcd
   1f0b4:	fffffbce 	.word	0xfffffbce
   1f0b8:	3fffffff 	.word	0x3fffffff

0001f0bc <__ratio>:
   1f0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f0be:	4657      	mov	r7, sl
   1f0c0:	464e      	mov	r6, r9
   1f0c2:	4645      	mov	r5, r8
   1f0c4:	b4e0      	push	{r5, r6, r7}
   1f0c6:	b084      	sub	sp, #16
   1f0c8:	4689      	mov	r9, r1
   1f0ca:	a902      	add	r1, sp, #8
   1f0cc:	4680      	mov	r8, r0
   1f0ce:	f7ff ff41 	bl	1ef54 <__b2d>
   1f0d2:	1c06      	adds	r6, r0, #0
   1f0d4:	1c0f      	adds	r7, r1, #0
   1f0d6:	4648      	mov	r0, r9
   1f0d8:	a903      	add	r1, sp, #12
   1f0da:	f7ff ff3b 	bl	1ef54 <__b2d>
   1f0de:	1c02      	adds	r2, r0, #0
   1f0e0:	1c0b      	adds	r3, r1, #0
   1f0e2:	9802      	ldr	r0, [sp, #8]
   1f0e4:	9903      	ldr	r1, [sp, #12]
   1f0e6:	9200      	str	r2, [sp, #0]
   1f0e8:	9301      	str	r3, [sp, #4]
   1f0ea:	1a40      	subs	r0, r0, r1
   1f0ec:	4641      	mov	r1, r8
   1f0ee:	4682      	mov	sl, r0
   1f0f0:	6908      	ldr	r0, [r1, #16]
   1f0f2:	4684      	mov	ip, r0
   1f0f4:	4648      	mov	r0, r9
   1f0f6:	6901      	ldr	r1, [r0, #16]
   1f0f8:	4660      	mov	r0, ip
   1f0fa:	1a41      	subs	r1, r0, r1
   1f0fc:	0149      	lsls	r1, r1, #5
   1f0fe:	4451      	add	r1, sl
   1f100:	2900      	cmp	r1, #0
   1f102:	dd0c      	ble.n	1f11e <__ratio+0x62>
   1f104:	0509      	lsls	r1, r1, #20
   1f106:	19cd      	adds	r5, r1, r7
   1f108:	1c2f      	adds	r7, r5, #0
   1f10a:	1c30      	adds	r0, r6, #0
   1f10c:	1c39      	adds	r1, r7, #0
   1f10e:	f001 fd21 	bl	20b54 <__aeabi_ddiv>
   1f112:	b004      	add	sp, #16
   1f114:	bc1c      	pop	{r2, r3, r4}
   1f116:	4690      	mov	r8, r2
   1f118:	4699      	mov	r9, r3
   1f11a:	46a2      	mov	sl, r4
   1f11c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f11e:	9b01      	ldr	r3, [sp, #4]
   1f120:	0509      	lsls	r1, r1, #20
   1f122:	1a59      	subs	r1, r3, r1
   1f124:	9101      	str	r1, [sp, #4]
   1f126:	9a00      	ldr	r2, [sp, #0]
   1f128:	9b01      	ldr	r3, [sp, #4]
   1f12a:	e7ee      	b.n	1f10a <__ratio+0x4e>

0001f12c <_mprec_log10>:
   1f12c:	b510      	push	{r4, lr}
   1f12e:	1e04      	subs	r4, r0, #0
   1f130:	2c17      	cmp	r4, #23
   1f132:	dd09      	ble.n	1f148 <_mprec_log10+0x1c>
   1f134:	4909      	ldr	r1, [pc, #36]	; (1f15c <_mprec_log10+0x30>)
   1f136:	4808      	ldr	r0, [pc, #32]	; (1f158 <_mprec_log10+0x2c>)
   1f138:	4a09      	ldr	r2, [pc, #36]	; (1f160 <_mprec_log10+0x34>)
   1f13a:	4b0a      	ldr	r3, [pc, #40]	; (1f164 <_mprec_log10+0x38>)
   1f13c:	3c01      	subs	r4, #1
   1f13e:	f002 f979 	bl	21434 <__aeabi_dmul>
   1f142:	2c00      	cmp	r4, #0
   1f144:	d1f8      	bne.n	1f138 <_mprec_log10+0xc>
   1f146:	bd10      	pop	{r4, pc}
   1f148:	4b07      	ldr	r3, [pc, #28]	; (1f168 <_mprec_log10+0x3c>)
   1f14a:	00c4      	lsls	r4, r0, #3
   1f14c:	191c      	adds	r4, r3, r4
   1f14e:	6920      	ldr	r0, [r4, #16]
   1f150:	6961      	ldr	r1, [r4, #20]
   1f152:	e7f8      	b.n	1f146 <_mprec_log10+0x1a>
   1f154:	46c0      	nop			; (mov r8, r8)
   1f156:	46c0      	nop			; (mov r8, r8)
   1f158:	00000000 	.word	0x00000000
   1f15c:	3ff00000 	.word	0x3ff00000
   1f160:	00000000 	.word	0x00000000
   1f164:	40240000 	.word	0x40240000
   1f168:	00027178 	.word	0x00027178

0001f16c <__copybits>:
   1f16c:	b570      	push	{r4, r5, r6, lr}
   1f16e:	1e4e      	subs	r6, r1, #1
   1f170:	6911      	ldr	r1, [r2, #16]
   1f172:	1176      	asrs	r6, r6, #5
   1f174:	1c13      	adds	r3, r2, #0
   1f176:	3601      	adds	r6, #1
   1f178:	3314      	adds	r3, #20
   1f17a:	008d      	lsls	r5, r1, #2
   1f17c:	00b6      	lsls	r6, r6, #2
   1f17e:	195d      	adds	r5, r3, r5
   1f180:	1986      	adds	r6, r0, r6
   1f182:	42ab      	cmp	r3, r5
   1f184:	d20a      	bcs.n	1f19c <__copybits+0x30>
   1f186:	1c01      	adds	r1, r0, #0
   1f188:	cb10      	ldmia	r3!, {r4}
   1f18a:	c110      	stmia	r1!, {r4}
   1f18c:	429d      	cmp	r5, r3
   1f18e:	d8fb      	bhi.n	1f188 <__copybits+0x1c>
   1f190:	1aab      	subs	r3, r5, r2
   1f192:	3b15      	subs	r3, #21
   1f194:	089b      	lsrs	r3, r3, #2
   1f196:	3301      	adds	r3, #1
   1f198:	009b      	lsls	r3, r3, #2
   1f19a:	18c0      	adds	r0, r0, r3
   1f19c:	2300      	movs	r3, #0
   1f19e:	4286      	cmp	r6, r0
   1f1a0:	d902      	bls.n	1f1a8 <__copybits+0x3c>
   1f1a2:	c008      	stmia	r0!, {r3}
   1f1a4:	4286      	cmp	r6, r0
   1f1a6:	d8fc      	bhi.n	1f1a2 <__copybits+0x36>
   1f1a8:	bd70      	pop	{r4, r5, r6, pc}
   1f1aa:	46c0      	nop			; (mov r8, r8)

0001f1ac <__any_on>:
   1f1ac:	6903      	ldr	r3, [r0, #16]
   1f1ae:	1c02      	adds	r2, r0, #0
   1f1b0:	b510      	push	{r4, lr}
   1f1b2:	3214      	adds	r2, #20
   1f1b4:	1148      	asrs	r0, r1, #5
   1f1b6:	4283      	cmp	r3, r0
   1f1b8:	da0f      	bge.n	1f1da <__any_on+0x2e>
   1f1ba:	009b      	lsls	r3, r3, #2
   1f1bc:	18d3      	adds	r3, r2, r3
   1f1be:	429a      	cmp	r2, r3
   1f1c0:	d221      	bcs.n	1f206 <__any_on+0x5a>
   1f1c2:	3b04      	subs	r3, #4
   1f1c4:	6818      	ldr	r0, [r3, #0]
   1f1c6:	2800      	cmp	r0, #0
   1f1c8:	d004      	beq.n	1f1d4 <__any_on+0x28>
   1f1ca:	e01a      	b.n	1f202 <__any_on+0x56>
   1f1cc:	3b04      	subs	r3, #4
   1f1ce:	6819      	ldr	r1, [r3, #0]
   1f1d0:	2900      	cmp	r1, #0
   1f1d2:	d116      	bne.n	1f202 <__any_on+0x56>
   1f1d4:	429a      	cmp	r2, r3
   1f1d6:	d3f9      	bcc.n	1f1cc <__any_on+0x20>
   1f1d8:	bd10      	pop	{r4, pc}
   1f1da:	4283      	cmp	r3, r0
   1f1dc:	dd0e      	ble.n	1f1fc <__any_on+0x50>
   1f1de:	231f      	movs	r3, #31
   1f1e0:	4019      	ands	r1, r3
   1f1e2:	0083      	lsls	r3, r0, #2
   1f1e4:	18d3      	adds	r3, r2, r3
   1f1e6:	2900      	cmp	r1, #0
   1f1e8:	d0e9      	beq.n	1f1be <__any_on+0x12>
   1f1ea:	681c      	ldr	r4, [r3, #0]
   1f1ec:	1c20      	adds	r0, r4, #0
   1f1ee:	40c8      	lsrs	r0, r1
   1f1f0:	4088      	lsls	r0, r1
   1f1f2:	1c01      	adds	r1, r0, #0
   1f1f4:	2001      	movs	r0, #1
   1f1f6:	42a1      	cmp	r1, r4
   1f1f8:	d1ee      	bne.n	1f1d8 <__any_on+0x2c>
   1f1fa:	e7e0      	b.n	1f1be <__any_on+0x12>
   1f1fc:	0083      	lsls	r3, r0, #2
   1f1fe:	18d3      	adds	r3, r2, r3
   1f200:	e7dd      	b.n	1f1be <__any_on+0x12>
   1f202:	2001      	movs	r0, #1
   1f204:	e7e8      	b.n	1f1d8 <__any_on+0x2c>
   1f206:	2000      	movs	r0, #0
   1f208:	e7e6      	b.n	1f1d8 <__any_on+0x2c>
   1f20a:	46c0      	nop			; (mov r8, r8)
   1f20c:	46c0      	nop			; (mov r8, r8)
   1f20e:	46c0      	nop			; (mov r8, r8)

0001f210 <_calloc_r>:
   1f210:	b538      	push	{r3, r4, r5, lr}
   1f212:	1c15      	adds	r5, r2, #0
   1f214:	434d      	muls	r5, r1
   1f216:	1c29      	adds	r1, r5, #0
   1f218:	f7fc f994 	bl	1b544 <_malloc_r>
   1f21c:	1e04      	subs	r4, r0, #0
   1f21e:	d003      	beq.n	1f228 <_calloc_r+0x18>
   1f220:	2100      	movs	r1, #0
   1f222:	1c2a      	adds	r2, r5, #0
   1f224:	f7fc f8e8 	bl	1b3f8 <memset>
   1f228:	1c20      	adds	r0, r4, #0
   1f22a:	bd38      	pop	{r3, r4, r5, pc}

0001f22c <_realloc_r>:
   1f22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f22e:	1c06      	adds	r6, r0, #0
   1f230:	1c0c      	adds	r4, r1, #0
   1f232:	1c15      	adds	r5, r2, #0
   1f234:	2900      	cmp	r1, #0
   1f236:	d01d      	beq.n	1f274 <_realloc_r+0x48>
   1f238:	2a00      	cmp	r2, #0
   1f23a:	d017      	beq.n	1f26c <_realloc_r+0x40>
   1f23c:	f000 f8d8 	bl	1f3f0 <_malloc_usable_size_r>
   1f240:	4285      	cmp	r5, r0
   1f242:	d801      	bhi.n	1f248 <_realloc_r+0x1c>
   1f244:	1c20      	adds	r0, r4, #0
   1f246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f248:	1c30      	adds	r0, r6, #0
   1f24a:	1c29      	adds	r1, r5, #0
   1f24c:	f7fc f97a 	bl	1b544 <_malloc_r>
   1f250:	1e07      	subs	r7, r0, #0
   1f252:	d009      	beq.n	1f268 <_realloc_r+0x3c>
   1f254:	1c21      	adds	r1, r4, #0
   1f256:	1c2a      	adds	r2, r5, #0
   1f258:	f7fc f88c 	bl	1b374 <memcpy>
   1f25c:	1c21      	adds	r1, r4, #0
   1f25e:	1c30      	adds	r0, r6, #0
   1f260:	f7fc f928 	bl	1b4b4 <_free_r>
   1f264:	1c3c      	adds	r4, r7, #0
   1f266:	e7ed      	b.n	1f244 <_realloc_r+0x18>
   1f268:	2400      	movs	r4, #0
   1f26a:	e7eb      	b.n	1f244 <_realloc_r+0x18>
   1f26c:	f7fc f922 	bl	1b4b4 <_free_r>
   1f270:	2400      	movs	r4, #0
   1f272:	e7e7      	b.n	1f244 <_realloc_r+0x18>
   1f274:	1c11      	adds	r1, r2, #0
   1f276:	f7fc f965 	bl	1b544 <_malloc_r>
   1f27a:	1c04      	adds	r4, r0, #0
   1f27c:	e7e2      	b.n	1f244 <_realloc_r+0x18>
   1f27e:	46c0      	nop			; (mov r8, r8)

0001f280 <__sread>:
   1f280:	b538      	push	{r3, r4, r5, lr}
   1f282:	1c0c      	adds	r4, r1, #0
   1f284:	250e      	movs	r5, #14
   1f286:	5f49      	ldrsh	r1, [r1, r5]
   1f288:	f000 f8bc 	bl	1f404 <_read_r>
   1f28c:	2800      	cmp	r0, #0
   1f28e:	db03      	blt.n	1f298 <__sread+0x18>
   1f290:	6d62      	ldr	r2, [r4, #84]	; 0x54
   1f292:	1813      	adds	r3, r2, r0
   1f294:	6563      	str	r3, [r4, #84]	; 0x54
   1f296:	bd38      	pop	{r3, r4, r5, pc}
   1f298:	89a2      	ldrh	r2, [r4, #12]
   1f29a:	4b02      	ldr	r3, [pc, #8]	; (1f2a4 <__sread+0x24>)
   1f29c:	4013      	ands	r3, r2
   1f29e:	81a3      	strh	r3, [r4, #12]
   1f2a0:	e7f9      	b.n	1f296 <__sread+0x16>
   1f2a2:	46c0      	nop			; (mov r8, r8)
   1f2a4:	ffffefff 	.word	0xffffefff

0001f2a8 <__seofread>:
   1f2a8:	2000      	movs	r0, #0
   1f2aa:	4770      	bx	lr

0001f2ac <__swrite>:
   1f2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f2ae:	1c0c      	adds	r4, r1, #0
   1f2b0:	8989      	ldrh	r1, [r1, #12]
   1f2b2:	1c05      	adds	r5, r0, #0
   1f2b4:	1c17      	adds	r7, r2, #0
   1f2b6:	1c1e      	adds	r6, r3, #0
   1f2b8:	05cb      	lsls	r3, r1, #23
   1f2ba:	d506      	bpl.n	1f2ca <__swrite+0x1e>
   1f2bc:	230e      	movs	r3, #14
   1f2be:	5ee1      	ldrsh	r1, [r4, r3]
   1f2c0:	2200      	movs	r2, #0
   1f2c2:	2302      	movs	r3, #2
   1f2c4:	f000 f880 	bl	1f3c8 <_lseek_r>
   1f2c8:	89a1      	ldrh	r1, [r4, #12]
   1f2ca:	4b05      	ldr	r3, [pc, #20]	; (1f2e0 <__swrite+0x34>)
   1f2cc:	1c28      	adds	r0, r5, #0
   1f2ce:	4019      	ands	r1, r3
   1f2d0:	81a1      	strh	r1, [r4, #12]
   1f2d2:	1c3a      	adds	r2, r7, #0
   1f2d4:	230e      	movs	r3, #14
   1f2d6:	5ee1      	ldrsh	r1, [r4, r3]
   1f2d8:	1c33      	adds	r3, r6, #0
   1f2da:	f000 f829 	bl	1f330 <_write_r>
   1f2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f2e0:	ffffefff 	.word	0xffffefff

0001f2e4 <__sseek>:
   1f2e4:	b538      	push	{r3, r4, r5, lr}
   1f2e6:	1c0c      	adds	r4, r1, #0
   1f2e8:	250e      	movs	r5, #14
   1f2ea:	5f49      	ldrsh	r1, [r1, r5]
   1f2ec:	f000 f86c 	bl	1f3c8 <_lseek_r>
   1f2f0:	89a2      	ldrh	r2, [r4, #12]
   1f2f2:	1c43      	adds	r3, r0, #1
   1f2f4:	d005      	beq.n	1f302 <__sseek+0x1e>
   1f2f6:	2380      	movs	r3, #128	; 0x80
   1f2f8:	015b      	lsls	r3, r3, #5
   1f2fa:	4313      	orrs	r3, r2
   1f2fc:	81a3      	strh	r3, [r4, #12]
   1f2fe:	6560      	str	r0, [r4, #84]	; 0x54
   1f300:	bd38      	pop	{r3, r4, r5, pc}
   1f302:	4b02      	ldr	r3, [pc, #8]	; (1f30c <__sseek+0x28>)
   1f304:	4013      	ands	r3, r2
   1f306:	81a3      	strh	r3, [r4, #12]
   1f308:	e7fa      	b.n	1f300 <__sseek+0x1c>
   1f30a:	46c0      	nop			; (mov r8, r8)
   1f30c:	ffffefff 	.word	0xffffefff

0001f310 <__sclose>:
   1f310:	b508      	push	{r3, lr}
   1f312:	230e      	movs	r3, #14
   1f314:	5ec9      	ldrsh	r1, [r1, r3]
   1f316:	f000 f81f 	bl	1f358 <_close_r>
   1f31a:	bd08      	pop	{r3, pc}

0001f31c <strcmp>:
   1f31c:	7802      	ldrb	r2, [r0, #0]
   1f31e:	780b      	ldrb	r3, [r1, #0]
   1f320:	3001      	adds	r0, #1
   1f322:	3101      	adds	r1, #1
   1f324:	2a00      	cmp	r2, #0
   1f326:	d001      	beq.n	1f32c <strcmp+0x10>
   1f328:	429a      	cmp	r2, r3
   1f32a:	d0f7      	beq.n	1f31c <strcmp>
   1f32c:	1ad0      	subs	r0, r2, r3
   1f32e:	4770      	bx	lr

0001f330 <_write_r>:
   1f330:	b570      	push	{r4, r5, r6, lr}
   1f332:	4c08      	ldr	r4, [pc, #32]	; (1f354 <_write_r+0x24>)
   1f334:	1c06      	adds	r6, r0, #0
   1f336:	2500      	movs	r5, #0
   1f338:	1c08      	adds	r0, r1, #0
   1f33a:	1c11      	adds	r1, r2, #0
   1f33c:	1c1a      	adds	r2, r3, #0
   1f33e:	6025      	str	r5, [r4, #0]
   1f340:	f7fa fa9c 	bl	1987c <_write>
   1f344:	1c43      	adds	r3, r0, #1
   1f346:	d000      	beq.n	1f34a <_write_r+0x1a>
   1f348:	bd70      	pop	{r4, r5, r6, pc}
   1f34a:	6823      	ldr	r3, [r4, #0]
   1f34c:	2b00      	cmp	r3, #0
   1f34e:	d0fb      	beq.n	1f348 <_write_r+0x18>
   1f350:	6033      	str	r3, [r6, #0]
   1f352:	e7f9      	b.n	1f348 <_write_r+0x18>
   1f354:	20001244 	.word	0x20001244

0001f358 <_close_r>:
   1f358:	b538      	push	{r3, r4, r5, lr}
   1f35a:	4c07      	ldr	r4, [pc, #28]	; (1f378 <_close_r+0x20>)
   1f35c:	2300      	movs	r3, #0
   1f35e:	1c05      	adds	r5, r0, #0
   1f360:	1c08      	adds	r0, r1, #0
   1f362:	6023      	str	r3, [r4, #0]
   1f364:	f7fa fae0 	bl	19928 <_close>
   1f368:	1c43      	adds	r3, r0, #1
   1f36a:	d000      	beq.n	1f36e <_close_r+0x16>
   1f36c:	bd38      	pop	{r3, r4, r5, pc}
   1f36e:	6823      	ldr	r3, [r4, #0]
   1f370:	2b00      	cmp	r3, #0
   1f372:	d0fb      	beq.n	1f36c <_close_r+0x14>
   1f374:	602b      	str	r3, [r5, #0]
   1f376:	e7f9      	b.n	1f36c <_close_r+0x14>
   1f378:	20001244 	.word	0x20001244

0001f37c <_fstat_r>:
   1f37c:	b538      	push	{r3, r4, r5, lr}
   1f37e:	4c08      	ldr	r4, [pc, #32]	; (1f3a0 <_fstat_r+0x24>)
   1f380:	2300      	movs	r3, #0
   1f382:	1c05      	adds	r5, r0, #0
   1f384:	1c08      	adds	r0, r1, #0
   1f386:	1c11      	adds	r1, r2, #0
   1f388:	6023      	str	r3, [r4, #0]
   1f38a:	f7fa fad7 	bl	1993c <_fstat>
   1f38e:	1c43      	adds	r3, r0, #1
   1f390:	d000      	beq.n	1f394 <_fstat_r+0x18>
   1f392:	bd38      	pop	{r3, r4, r5, pc}
   1f394:	6823      	ldr	r3, [r4, #0]
   1f396:	2b00      	cmp	r3, #0
   1f398:	d0fb      	beq.n	1f392 <_fstat_r+0x16>
   1f39a:	602b      	str	r3, [r5, #0]
   1f39c:	e7f9      	b.n	1f392 <_fstat_r+0x16>
   1f39e:	46c0      	nop			; (mov r8, r8)
   1f3a0:	20001244 	.word	0x20001244

0001f3a4 <_isatty_r>:
   1f3a4:	b538      	push	{r3, r4, r5, lr}
   1f3a6:	4c07      	ldr	r4, [pc, #28]	; (1f3c4 <_isatty_r+0x20>)
   1f3a8:	2300      	movs	r3, #0
   1f3aa:	1c05      	adds	r5, r0, #0
   1f3ac:	1c08      	adds	r0, r1, #0
   1f3ae:	6023      	str	r3, [r4, #0]
   1f3b0:	f7fa fad2 	bl	19958 <_isatty>
   1f3b4:	1c43      	adds	r3, r0, #1
   1f3b6:	d000      	beq.n	1f3ba <_isatty_r+0x16>
   1f3b8:	bd38      	pop	{r3, r4, r5, pc}
   1f3ba:	6823      	ldr	r3, [r4, #0]
   1f3bc:	2b00      	cmp	r3, #0
   1f3be:	d0fb      	beq.n	1f3b8 <_isatty_r+0x14>
   1f3c0:	602b      	str	r3, [r5, #0]
   1f3c2:	e7f9      	b.n	1f3b8 <_isatty_r+0x14>
   1f3c4:	20001244 	.word	0x20001244

0001f3c8 <_lseek_r>:
   1f3c8:	b570      	push	{r4, r5, r6, lr}
   1f3ca:	4c08      	ldr	r4, [pc, #32]	; (1f3ec <_lseek_r+0x24>)
   1f3cc:	1c06      	adds	r6, r0, #0
   1f3ce:	2500      	movs	r5, #0
   1f3d0:	1c08      	adds	r0, r1, #0
   1f3d2:	1c11      	adds	r1, r2, #0
   1f3d4:	1c1a      	adds	r2, r3, #0
   1f3d6:	6025      	str	r5, [r4, #0]
   1f3d8:	f7fa fac8 	bl	1996c <_lseek>
   1f3dc:	1c43      	adds	r3, r0, #1
   1f3de:	d000      	beq.n	1f3e2 <_lseek_r+0x1a>
   1f3e0:	bd70      	pop	{r4, r5, r6, pc}
   1f3e2:	6823      	ldr	r3, [r4, #0]
   1f3e4:	2b00      	cmp	r3, #0
   1f3e6:	d0fb      	beq.n	1f3e0 <_lseek_r+0x18>
   1f3e8:	6033      	str	r3, [r6, #0]
   1f3ea:	e7f9      	b.n	1f3e0 <_lseek_r+0x18>
   1f3ec:	20001244 	.word	0x20001244

0001f3f0 <_malloc_usable_size_r>:
   1f3f0:	3904      	subs	r1, #4
   1f3f2:	680b      	ldr	r3, [r1, #0]
   1f3f4:	1f18      	subs	r0, r3, #4
   1f3f6:	2b00      	cmp	r3, #0
   1f3f8:	db00      	blt.n	1f3fc <_malloc_usable_size_r+0xc>
   1f3fa:	4770      	bx	lr
   1f3fc:	58c8      	ldr	r0, [r1, r3]
   1f3fe:	181b      	adds	r3, r3, r0
   1f400:	1f18      	subs	r0, r3, #4
   1f402:	e7fa      	b.n	1f3fa <_malloc_usable_size_r+0xa>

0001f404 <_read_r>:
   1f404:	b570      	push	{r4, r5, r6, lr}
   1f406:	4c08      	ldr	r4, [pc, #32]	; (1f428 <_read_r+0x24>)
   1f408:	1c06      	adds	r6, r0, #0
   1f40a:	2500      	movs	r5, #0
   1f40c:	1c08      	adds	r0, r1, #0
   1f40e:	1c11      	adds	r1, r2, #0
   1f410:	1c1a      	adds	r2, r3, #0
   1f412:	6025      	str	r5, [r4, #0]
   1f414:	f7fa fa06 	bl	19824 <_read>
   1f418:	1c43      	adds	r3, r0, #1
   1f41a:	d000      	beq.n	1f41e <_read_r+0x1a>
   1f41c:	bd70      	pop	{r4, r5, r6, pc}
   1f41e:	6823      	ldr	r3, [r4, #0]
   1f420:	2b00      	cmp	r3, #0
   1f422:	d0fb      	beq.n	1f41c <_read_r+0x18>
   1f424:	6033      	str	r3, [r6, #0]
   1f426:	e7f9      	b.n	1f41c <_read_r+0x18>
   1f428:	20001244 	.word	0x20001244

0001f42c <__aeabi_uidiv>:
   1f42c:	2900      	cmp	r1, #0
   1f42e:	d034      	beq.n	1f49a <.udivsi3_skip_div0_test+0x6a>

0001f430 <.udivsi3_skip_div0_test>:
   1f430:	2301      	movs	r3, #1
   1f432:	2200      	movs	r2, #0
   1f434:	b410      	push	{r4}
   1f436:	4288      	cmp	r0, r1
   1f438:	d32c      	bcc.n	1f494 <.udivsi3_skip_div0_test+0x64>
   1f43a:	2401      	movs	r4, #1
   1f43c:	0724      	lsls	r4, r4, #28
   1f43e:	42a1      	cmp	r1, r4
   1f440:	d204      	bcs.n	1f44c <.udivsi3_skip_div0_test+0x1c>
   1f442:	4281      	cmp	r1, r0
   1f444:	d202      	bcs.n	1f44c <.udivsi3_skip_div0_test+0x1c>
   1f446:	0109      	lsls	r1, r1, #4
   1f448:	011b      	lsls	r3, r3, #4
   1f44a:	e7f8      	b.n	1f43e <.udivsi3_skip_div0_test+0xe>
   1f44c:	00e4      	lsls	r4, r4, #3
   1f44e:	42a1      	cmp	r1, r4
   1f450:	d204      	bcs.n	1f45c <.udivsi3_skip_div0_test+0x2c>
   1f452:	4281      	cmp	r1, r0
   1f454:	d202      	bcs.n	1f45c <.udivsi3_skip_div0_test+0x2c>
   1f456:	0049      	lsls	r1, r1, #1
   1f458:	005b      	lsls	r3, r3, #1
   1f45a:	e7f8      	b.n	1f44e <.udivsi3_skip_div0_test+0x1e>
   1f45c:	4288      	cmp	r0, r1
   1f45e:	d301      	bcc.n	1f464 <.udivsi3_skip_div0_test+0x34>
   1f460:	1a40      	subs	r0, r0, r1
   1f462:	431a      	orrs	r2, r3
   1f464:	084c      	lsrs	r4, r1, #1
   1f466:	42a0      	cmp	r0, r4
   1f468:	d302      	bcc.n	1f470 <.udivsi3_skip_div0_test+0x40>
   1f46a:	1b00      	subs	r0, r0, r4
   1f46c:	085c      	lsrs	r4, r3, #1
   1f46e:	4322      	orrs	r2, r4
   1f470:	088c      	lsrs	r4, r1, #2
   1f472:	42a0      	cmp	r0, r4
   1f474:	d302      	bcc.n	1f47c <.udivsi3_skip_div0_test+0x4c>
   1f476:	1b00      	subs	r0, r0, r4
   1f478:	089c      	lsrs	r4, r3, #2
   1f47a:	4322      	orrs	r2, r4
   1f47c:	08cc      	lsrs	r4, r1, #3
   1f47e:	42a0      	cmp	r0, r4
   1f480:	d302      	bcc.n	1f488 <.udivsi3_skip_div0_test+0x58>
   1f482:	1b00      	subs	r0, r0, r4
   1f484:	08dc      	lsrs	r4, r3, #3
   1f486:	4322      	orrs	r2, r4
   1f488:	2800      	cmp	r0, #0
   1f48a:	d003      	beq.n	1f494 <.udivsi3_skip_div0_test+0x64>
   1f48c:	091b      	lsrs	r3, r3, #4
   1f48e:	d001      	beq.n	1f494 <.udivsi3_skip_div0_test+0x64>
   1f490:	0909      	lsrs	r1, r1, #4
   1f492:	e7e3      	b.n	1f45c <.udivsi3_skip_div0_test+0x2c>
   1f494:	1c10      	adds	r0, r2, #0
   1f496:	bc10      	pop	{r4}
   1f498:	4770      	bx	lr
   1f49a:	2800      	cmp	r0, #0
   1f49c:	d001      	beq.n	1f4a2 <.udivsi3_skip_div0_test+0x72>
   1f49e:	2000      	movs	r0, #0
   1f4a0:	43c0      	mvns	r0, r0
   1f4a2:	b407      	push	{r0, r1, r2}
   1f4a4:	4802      	ldr	r0, [pc, #8]	; (1f4b0 <.udivsi3_skip_div0_test+0x80>)
   1f4a6:	a102      	add	r1, pc, #8	; (adr r1, 1f4b0 <.udivsi3_skip_div0_test+0x80>)
   1f4a8:	1840      	adds	r0, r0, r1
   1f4aa:	9002      	str	r0, [sp, #8]
   1f4ac:	bd03      	pop	{r0, r1, pc}
   1f4ae:	46c0      	nop			; (mov r8, r8)
   1f4b0:	000000d9 	.word	0x000000d9

0001f4b4 <__aeabi_uidivmod>:
   1f4b4:	2900      	cmp	r1, #0
   1f4b6:	d0f0      	beq.n	1f49a <.udivsi3_skip_div0_test+0x6a>
   1f4b8:	b503      	push	{r0, r1, lr}
   1f4ba:	f7ff ffb9 	bl	1f430 <.udivsi3_skip_div0_test>
   1f4be:	bc0e      	pop	{r1, r2, r3}
   1f4c0:	4342      	muls	r2, r0
   1f4c2:	1a89      	subs	r1, r1, r2
   1f4c4:	4718      	bx	r3
   1f4c6:	46c0      	nop			; (mov r8, r8)

0001f4c8 <__aeabi_idiv>:
   1f4c8:	2900      	cmp	r1, #0
   1f4ca:	d041      	beq.n	1f550 <.divsi3_skip_div0_test+0x84>

0001f4cc <.divsi3_skip_div0_test>:
   1f4cc:	b410      	push	{r4}
   1f4ce:	1c04      	adds	r4, r0, #0
   1f4d0:	404c      	eors	r4, r1
   1f4d2:	46a4      	mov	ip, r4
   1f4d4:	2301      	movs	r3, #1
   1f4d6:	2200      	movs	r2, #0
   1f4d8:	2900      	cmp	r1, #0
   1f4da:	d500      	bpl.n	1f4de <.divsi3_skip_div0_test+0x12>
   1f4dc:	4249      	negs	r1, r1
   1f4de:	2800      	cmp	r0, #0
   1f4e0:	d500      	bpl.n	1f4e4 <.divsi3_skip_div0_test+0x18>
   1f4e2:	4240      	negs	r0, r0
   1f4e4:	4288      	cmp	r0, r1
   1f4e6:	d32c      	bcc.n	1f542 <.divsi3_skip_div0_test+0x76>
   1f4e8:	2401      	movs	r4, #1
   1f4ea:	0724      	lsls	r4, r4, #28
   1f4ec:	42a1      	cmp	r1, r4
   1f4ee:	d204      	bcs.n	1f4fa <.divsi3_skip_div0_test+0x2e>
   1f4f0:	4281      	cmp	r1, r0
   1f4f2:	d202      	bcs.n	1f4fa <.divsi3_skip_div0_test+0x2e>
   1f4f4:	0109      	lsls	r1, r1, #4
   1f4f6:	011b      	lsls	r3, r3, #4
   1f4f8:	e7f8      	b.n	1f4ec <.divsi3_skip_div0_test+0x20>
   1f4fa:	00e4      	lsls	r4, r4, #3
   1f4fc:	42a1      	cmp	r1, r4
   1f4fe:	d204      	bcs.n	1f50a <.divsi3_skip_div0_test+0x3e>
   1f500:	4281      	cmp	r1, r0
   1f502:	d202      	bcs.n	1f50a <.divsi3_skip_div0_test+0x3e>
   1f504:	0049      	lsls	r1, r1, #1
   1f506:	005b      	lsls	r3, r3, #1
   1f508:	e7f8      	b.n	1f4fc <.divsi3_skip_div0_test+0x30>
   1f50a:	4288      	cmp	r0, r1
   1f50c:	d301      	bcc.n	1f512 <.divsi3_skip_div0_test+0x46>
   1f50e:	1a40      	subs	r0, r0, r1
   1f510:	431a      	orrs	r2, r3
   1f512:	084c      	lsrs	r4, r1, #1
   1f514:	42a0      	cmp	r0, r4
   1f516:	d302      	bcc.n	1f51e <.divsi3_skip_div0_test+0x52>
   1f518:	1b00      	subs	r0, r0, r4
   1f51a:	085c      	lsrs	r4, r3, #1
   1f51c:	4322      	orrs	r2, r4
   1f51e:	088c      	lsrs	r4, r1, #2
   1f520:	42a0      	cmp	r0, r4
   1f522:	d302      	bcc.n	1f52a <.divsi3_skip_div0_test+0x5e>
   1f524:	1b00      	subs	r0, r0, r4
   1f526:	089c      	lsrs	r4, r3, #2
   1f528:	4322      	orrs	r2, r4
   1f52a:	08cc      	lsrs	r4, r1, #3
   1f52c:	42a0      	cmp	r0, r4
   1f52e:	d302      	bcc.n	1f536 <.divsi3_skip_div0_test+0x6a>
   1f530:	1b00      	subs	r0, r0, r4
   1f532:	08dc      	lsrs	r4, r3, #3
   1f534:	4322      	orrs	r2, r4
   1f536:	2800      	cmp	r0, #0
   1f538:	d003      	beq.n	1f542 <.divsi3_skip_div0_test+0x76>
   1f53a:	091b      	lsrs	r3, r3, #4
   1f53c:	d001      	beq.n	1f542 <.divsi3_skip_div0_test+0x76>
   1f53e:	0909      	lsrs	r1, r1, #4
   1f540:	e7e3      	b.n	1f50a <.divsi3_skip_div0_test+0x3e>
   1f542:	1c10      	adds	r0, r2, #0
   1f544:	4664      	mov	r4, ip
   1f546:	2c00      	cmp	r4, #0
   1f548:	d500      	bpl.n	1f54c <.divsi3_skip_div0_test+0x80>
   1f54a:	4240      	negs	r0, r0
   1f54c:	bc10      	pop	{r4}
   1f54e:	4770      	bx	lr
   1f550:	2800      	cmp	r0, #0
   1f552:	d006      	beq.n	1f562 <.divsi3_skip_div0_test+0x96>
   1f554:	db03      	blt.n	1f55e <.divsi3_skip_div0_test+0x92>
   1f556:	2000      	movs	r0, #0
   1f558:	43c0      	mvns	r0, r0
   1f55a:	0840      	lsrs	r0, r0, #1
   1f55c:	e001      	b.n	1f562 <.divsi3_skip_div0_test+0x96>
   1f55e:	2080      	movs	r0, #128	; 0x80
   1f560:	0600      	lsls	r0, r0, #24
   1f562:	b407      	push	{r0, r1, r2}
   1f564:	4802      	ldr	r0, [pc, #8]	; (1f570 <.divsi3_skip_div0_test+0xa4>)
   1f566:	a102      	add	r1, pc, #8	; (adr r1, 1f570 <.divsi3_skip_div0_test+0xa4>)
   1f568:	1840      	adds	r0, r0, r1
   1f56a:	9002      	str	r0, [sp, #8]
   1f56c:	bd03      	pop	{r0, r1, pc}
   1f56e:	46c0      	nop			; (mov r8, r8)
   1f570:	00000019 	.word	0x00000019

0001f574 <__aeabi_idivmod>:
   1f574:	2900      	cmp	r1, #0
   1f576:	d0eb      	beq.n	1f550 <.divsi3_skip_div0_test+0x84>
   1f578:	b503      	push	{r0, r1, lr}
   1f57a:	f7ff ffa7 	bl	1f4cc <.divsi3_skip_div0_test>
   1f57e:	bc0e      	pop	{r1, r2, r3}
   1f580:	4342      	muls	r2, r0
   1f582:	1a89      	subs	r1, r1, r2
   1f584:	4718      	bx	r3
   1f586:	46c0      	nop			; (mov r8, r8)

0001f588 <__aeabi_idiv0>:
   1f588:	4770      	bx	lr
   1f58a:	46c0      	nop			; (mov r8, r8)

0001f58c <__aeabi_cdrcmple>:
   1f58c:	4684      	mov	ip, r0
   1f58e:	1c10      	adds	r0, r2, #0
   1f590:	4662      	mov	r2, ip
   1f592:	468c      	mov	ip, r1
   1f594:	1c19      	adds	r1, r3, #0
   1f596:	4663      	mov	r3, ip
   1f598:	e000      	b.n	1f59c <__aeabi_cdcmpeq>
   1f59a:	46c0      	nop			; (mov r8, r8)

0001f59c <__aeabi_cdcmpeq>:
   1f59c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1f59e:	f001 fec5 	bl	2132c <__ledf2>
   1f5a2:	2800      	cmp	r0, #0
   1f5a4:	d401      	bmi.n	1f5aa <__aeabi_cdcmpeq+0xe>
   1f5a6:	2100      	movs	r1, #0
   1f5a8:	42c8      	cmn	r0, r1
   1f5aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0001f5ac <__aeabi_dcmpeq>:
   1f5ac:	b510      	push	{r4, lr}
   1f5ae:	f001 fdf9 	bl	211a4 <__eqdf2>
   1f5b2:	4240      	negs	r0, r0
   1f5b4:	3001      	adds	r0, #1
   1f5b6:	bd10      	pop	{r4, pc}

0001f5b8 <__aeabi_dcmplt>:
   1f5b8:	b510      	push	{r4, lr}
   1f5ba:	f001 feb7 	bl	2132c <__ledf2>
   1f5be:	2800      	cmp	r0, #0
   1f5c0:	db01      	blt.n	1f5c6 <__aeabi_dcmplt+0xe>
   1f5c2:	2000      	movs	r0, #0
   1f5c4:	bd10      	pop	{r4, pc}
   1f5c6:	2001      	movs	r0, #1
   1f5c8:	bd10      	pop	{r4, pc}
   1f5ca:	46c0      	nop			; (mov r8, r8)

0001f5cc <__aeabi_dcmple>:
   1f5cc:	b510      	push	{r4, lr}
   1f5ce:	f001 fead 	bl	2132c <__ledf2>
   1f5d2:	2800      	cmp	r0, #0
   1f5d4:	dd01      	ble.n	1f5da <__aeabi_dcmple+0xe>
   1f5d6:	2000      	movs	r0, #0
   1f5d8:	bd10      	pop	{r4, pc}
   1f5da:	2001      	movs	r0, #1
   1f5dc:	bd10      	pop	{r4, pc}
   1f5de:	46c0      	nop			; (mov r8, r8)

0001f5e0 <__aeabi_dcmpgt>:
   1f5e0:	b510      	push	{r4, lr}
   1f5e2:	f001 fe29 	bl	21238 <__gedf2>
   1f5e6:	2800      	cmp	r0, #0
   1f5e8:	dc01      	bgt.n	1f5ee <__aeabi_dcmpgt+0xe>
   1f5ea:	2000      	movs	r0, #0
   1f5ec:	bd10      	pop	{r4, pc}
   1f5ee:	2001      	movs	r0, #1
   1f5f0:	bd10      	pop	{r4, pc}
   1f5f2:	46c0      	nop			; (mov r8, r8)

0001f5f4 <__aeabi_dcmpge>:
   1f5f4:	b510      	push	{r4, lr}
   1f5f6:	f001 fe1f 	bl	21238 <__gedf2>
   1f5fa:	2800      	cmp	r0, #0
   1f5fc:	da01      	bge.n	1f602 <__aeabi_dcmpge+0xe>
   1f5fe:	2000      	movs	r0, #0
   1f600:	bd10      	pop	{r4, pc}
   1f602:	2001      	movs	r0, #1
   1f604:	bd10      	pop	{r4, pc}
   1f606:	46c0      	nop			; (mov r8, r8)

0001f608 <__aeabi_cfrcmple>:
   1f608:	4684      	mov	ip, r0
   1f60a:	1c08      	adds	r0, r1, #0
   1f60c:	4661      	mov	r1, ip
   1f60e:	e7ff      	b.n	1f610 <__aeabi_cfcmpeq>

0001f610 <__aeabi_cfcmpeq>:
   1f610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1f612:	f000 fbc5 	bl	1fda0 <__lesf2>
   1f616:	2800      	cmp	r0, #0
   1f618:	d401      	bmi.n	1f61e <__aeabi_cfcmpeq+0xe>
   1f61a:	2100      	movs	r1, #0
   1f61c:	42c8      	cmn	r0, r1
   1f61e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0001f620 <__aeabi_fcmpeq>:
   1f620:	b510      	push	{r4, lr}
   1f622:	f000 fb4d 	bl	1fcc0 <__eqsf2>
   1f626:	4240      	negs	r0, r0
   1f628:	3001      	adds	r0, #1
   1f62a:	bd10      	pop	{r4, pc}

0001f62c <__aeabi_fcmplt>:
   1f62c:	b510      	push	{r4, lr}
   1f62e:	f000 fbb7 	bl	1fda0 <__lesf2>
   1f632:	2800      	cmp	r0, #0
   1f634:	db01      	blt.n	1f63a <__aeabi_fcmplt+0xe>
   1f636:	2000      	movs	r0, #0
   1f638:	bd10      	pop	{r4, pc}
   1f63a:	2001      	movs	r0, #1
   1f63c:	bd10      	pop	{r4, pc}
   1f63e:	46c0      	nop			; (mov r8, r8)

0001f640 <__aeabi_fcmple>:
   1f640:	b510      	push	{r4, lr}
   1f642:	f000 fbad 	bl	1fda0 <__lesf2>
   1f646:	2800      	cmp	r0, #0
   1f648:	dd01      	ble.n	1f64e <__aeabi_fcmple+0xe>
   1f64a:	2000      	movs	r0, #0
   1f64c:	bd10      	pop	{r4, pc}
   1f64e:	2001      	movs	r0, #1
   1f650:	bd10      	pop	{r4, pc}
   1f652:	46c0      	nop			; (mov r8, r8)

0001f654 <__aeabi_fcmpgt>:
   1f654:	b510      	push	{r4, lr}
   1f656:	f000 fb5b 	bl	1fd10 <__gesf2>
   1f65a:	2800      	cmp	r0, #0
   1f65c:	dc01      	bgt.n	1f662 <__aeabi_fcmpgt+0xe>
   1f65e:	2000      	movs	r0, #0
   1f660:	bd10      	pop	{r4, pc}
   1f662:	2001      	movs	r0, #1
   1f664:	bd10      	pop	{r4, pc}
   1f666:	46c0      	nop			; (mov r8, r8)

0001f668 <__aeabi_fcmpge>:
   1f668:	b510      	push	{r4, lr}
   1f66a:	f000 fb51 	bl	1fd10 <__gesf2>
   1f66e:	2800      	cmp	r0, #0
   1f670:	da01      	bge.n	1f676 <__aeabi_fcmpge+0xe>
   1f672:	2000      	movs	r0, #0
   1f674:	bd10      	pop	{r4, pc}
   1f676:	2001      	movs	r0, #1
   1f678:	bd10      	pop	{r4, pc}
   1f67a:	46c0      	nop			; (mov r8, r8)

0001f67c <__aeabi_uldivmod>:
   1f67c:	2b00      	cmp	r3, #0
   1f67e:	d111      	bne.n	1f6a4 <__aeabi_uldivmod+0x28>
   1f680:	2a00      	cmp	r2, #0
   1f682:	d10f      	bne.n	1f6a4 <__aeabi_uldivmod+0x28>
   1f684:	2900      	cmp	r1, #0
   1f686:	d100      	bne.n	1f68a <__aeabi_uldivmod+0xe>
   1f688:	2800      	cmp	r0, #0
   1f68a:	d002      	beq.n	1f692 <__aeabi_uldivmod+0x16>
   1f68c:	2100      	movs	r1, #0
   1f68e:	43c9      	mvns	r1, r1
   1f690:	1c08      	adds	r0, r1, #0
   1f692:	b407      	push	{r0, r1, r2}
   1f694:	4802      	ldr	r0, [pc, #8]	; (1f6a0 <__aeabi_uldivmod+0x24>)
   1f696:	a102      	add	r1, pc, #8	; (adr r1, 1f6a0 <__aeabi_uldivmod+0x24>)
   1f698:	1840      	adds	r0, r0, r1
   1f69a:	9002      	str	r0, [sp, #8]
   1f69c:	bd03      	pop	{r0, r1, pc}
   1f69e:	46c0      	nop			; (mov r8, r8)
   1f6a0:	fffffee9 	.word	0xfffffee9
   1f6a4:	b403      	push	{r0, r1}
   1f6a6:	4668      	mov	r0, sp
   1f6a8:	b501      	push	{r0, lr}
   1f6aa:	9802      	ldr	r0, [sp, #8]
   1f6ac:	f000 f85c 	bl	1f768 <__gnu_uldivmod_helper>
   1f6b0:	9b01      	ldr	r3, [sp, #4]
   1f6b2:	469e      	mov	lr, r3
   1f6b4:	b002      	add	sp, #8
   1f6b6:	bc0c      	pop	{r2, r3}
   1f6b8:	4770      	bx	lr
   1f6ba:	46c0      	nop			; (mov r8, r8)

0001f6bc <__aeabi_f2uiz>:
   1f6bc:	219e      	movs	r1, #158	; 0x9e
   1f6be:	b510      	push	{r4, lr}
   1f6c0:	05c9      	lsls	r1, r1, #23
   1f6c2:	1c04      	adds	r4, r0, #0
   1f6c4:	f7ff ffd0 	bl	1f668 <__aeabi_fcmpge>
   1f6c8:	2800      	cmp	r0, #0
   1f6ca:	d103      	bne.n	1f6d4 <__aeabi_f2uiz+0x18>
   1f6cc:	1c20      	adds	r0, r4, #0
   1f6ce:	f000 fe51 	bl	20374 <__aeabi_f2iz>
   1f6d2:	bd10      	pop	{r4, pc}
   1f6d4:	219e      	movs	r1, #158	; 0x9e
   1f6d6:	05c9      	lsls	r1, r1, #23
   1f6d8:	1c20      	adds	r0, r4, #0
   1f6da:	f000 fcd5 	bl	20088 <__aeabi_fsub>
   1f6de:	f000 fe49 	bl	20374 <__aeabi_f2iz>
   1f6e2:	2380      	movs	r3, #128	; 0x80
   1f6e4:	061b      	lsls	r3, r3, #24
   1f6e6:	18c0      	adds	r0, r0, r3
   1f6e8:	e7f3      	b.n	1f6d2 <__aeabi_f2uiz+0x16>
   1f6ea:	46c0      	nop			; (mov r8, r8)
   1f6ec:	0000      	movs	r0, r0
	...

0001f6f0 <__aeabi_d2uiz>:
   1f6f0:	b538      	push	{r3, r4, r5, lr}
   1f6f2:	4b0e      	ldr	r3, [pc, #56]	; (1f72c <__aeabi_d2uiz+0x3c>)
   1f6f4:	4a0c      	ldr	r2, [pc, #48]	; (1f728 <__aeabi_d2uiz+0x38>)
   1f6f6:	1c04      	adds	r4, r0, #0
   1f6f8:	1c0d      	adds	r5, r1, #0
   1f6fa:	f7ff ff7b 	bl	1f5f4 <__aeabi_dcmpge>
   1f6fe:	2800      	cmp	r0, #0
   1f700:	d104      	bne.n	1f70c <__aeabi_d2uiz+0x1c>
   1f702:	1c20      	adds	r0, r4, #0
   1f704:	1c29      	adds	r1, r5, #0
   1f706:	f002 fc5d 	bl	21fc4 <__aeabi_d2iz>
   1f70a:	bd38      	pop	{r3, r4, r5, pc}
   1f70c:	4b07      	ldr	r3, [pc, #28]	; (1f72c <__aeabi_d2uiz+0x3c>)
   1f70e:	4a06      	ldr	r2, [pc, #24]	; (1f728 <__aeabi_d2uiz+0x38>)
   1f710:	1c20      	adds	r0, r4, #0
   1f712:	1c29      	adds	r1, r5, #0
   1f714:	f002 f920 	bl	21958 <__aeabi_dsub>
   1f718:	f002 fc54 	bl	21fc4 <__aeabi_d2iz>
   1f71c:	2380      	movs	r3, #128	; 0x80
   1f71e:	061b      	lsls	r3, r3, #24
   1f720:	18c0      	adds	r0, r0, r3
   1f722:	e7f2      	b.n	1f70a <__aeabi_d2uiz+0x1a>
   1f724:	46c0      	nop			; (mov r8, r8)
   1f726:	46c0      	nop			; (mov r8, r8)
   1f728:	00000000 	.word	0x00000000
   1f72c:	41e00000 	.word	0x41e00000

0001f730 <__gnu_ldivmod_helper>:
   1f730:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f732:	b083      	sub	sp, #12
   1f734:	1c16      	adds	r6, r2, #0
   1f736:	1c1f      	adds	r7, r3, #0
   1f738:	9000      	str	r0, [sp, #0]
   1f73a:	9101      	str	r1, [sp, #4]
   1f73c:	f002 fe06 	bl	2234c <__divdi3>
   1f740:	1c04      	adds	r4, r0, #0
   1f742:	1c0d      	adds	r5, r1, #0
   1f744:	1c22      	adds	r2, r4, #0
   1f746:	1c2b      	adds	r3, r5, #0
   1f748:	1c30      	adds	r0, r6, #0
   1f74a:	1c39      	adds	r1, r7, #0
   1f74c:	f002 fddc 	bl	22308 <__aeabi_lmul>
   1f750:	9a00      	ldr	r2, [sp, #0]
   1f752:	9b01      	ldr	r3, [sp, #4]
   1f754:	1a12      	subs	r2, r2, r0
   1f756:	418b      	sbcs	r3, r1
   1f758:	9908      	ldr	r1, [sp, #32]
   1f75a:	1c20      	adds	r0, r4, #0
   1f75c:	600a      	str	r2, [r1, #0]
   1f75e:	604b      	str	r3, [r1, #4]
   1f760:	1c29      	adds	r1, r5, #0
   1f762:	b003      	add	sp, #12
   1f764:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f766:	46c0      	nop			; (mov r8, r8)

0001f768 <__gnu_uldivmod_helper>:
   1f768:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f76a:	b083      	sub	sp, #12
   1f76c:	1c14      	adds	r4, r2, #0
   1f76e:	1c1d      	adds	r5, r3, #0
   1f770:	9000      	str	r0, [sp, #0]
   1f772:	9101      	str	r1, [sp, #4]
   1f774:	f002 ffc2 	bl	226fc <__udivdi3>
   1f778:	1c22      	adds	r2, r4, #0
   1f77a:	1c2b      	adds	r3, r5, #0
   1f77c:	1c06      	adds	r6, r0, #0
   1f77e:	1c0f      	adds	r7, r1, #0
   1f780:	f002 fdc2 	bl	22308 <__aeabi_lmul>
   1f784:	9a00      	ldr	r2, [sp, #0]
   1f786:	9b01      	ldr	r3, [sp, #4]
   1f788:	1a12      	subs	r2, r2, r0
   1f78a:	418b      	sbcs	r3, r1
   1f78c:	9908      	ldr	r1, [sp, #32]
   1f78e:	1c30      	adds	r0, r6, #0
   1f790:	600a      	str	r2, [r1, #0]
   1f792:	604b      	str	r3, [r1, #4]
   1f794:	1c39      	adds	r1, r7, #0
   1f796:	b003      	add	sp, #12
   1f798:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f79a:	46c0      	nop			; (mov r8, r8)

0001f79c <__aeabi_fadd>:
   1f79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f79e:	0243      	lsls	r3, r0, #9
   1f7a0:	0044      	lsls	r4, r0, #1
   1f7a2:	0fc5      	lsrs	r5, r0, #31
   1f7a4:	024e      	lsls	r6, r1, #9
   1f7a6:	0048      	lsls	r0, r1, #1
   1f7a8:	0e24      	lsrs	r4, r4, #24
   1f7aa:	1c2a      	adds	r2, r5, #0
   1f7ac:	099b      	lsrs	r3, r3, #6
   1f7ae:	0e00      	lsrs	r0, r0, #24
   1f7b0:	0fc9      	lsrs	r1, r1, #31
   1f7b2:	09b6      	lsrs	r6, r6, #6
   1f7b4:	428d      	cmp	r5, r1
   1f7b6:	d05b      	beq.n	1f870 <__aeabi_fadd+0xd4>
   1f7b8:	1a22      	subs	r2, r4, r0
   1f7ba:	2a00      	cmp	r2, #0
   1f7bc:	dc00      	bgt.n	1f7c0 <__aeabi_fadd+0x24>
   1f7be:	e089      	b.n	1f8d4 <__aeabi_fadd+0x138>
   1f7c0:	2800      	cmp	r0, #0
   1f7c2:	d11d      	bne.n	1f800 <__aeabi_fadd+0x64>
   1f7c4:	2e00      	cmp	r6, #0
   1f7c6:	d000      	beq.n	1f7ca <__aeabi_fadd+0x2e>
   1f7c8:	e075      	b.n	1f8b6 <__aeabi_fadd+0x11a>
   1f7ca:	0758      	lsls	r0, r3, #29
   1f7cc:	d004      	beq.n	1f7d8 <__aeabi_fadd+0x3c>
   1f7ce:	220f      	movs	r2, #15
   1f7d0:	401a      	ands	r2, r3
   1f7d2:	2a04      	cmp	r2, #4
   1f7d4:	d000      	beq.n	1f7d8 <__aeabi_fadd+0x3c>
   1f7d6:	3304      	adds	r3, #4
   1f7d8:	2180      	movs	r1, #128	; 0x80
   1f7da:	04c9      	lsls	r1, r1, #19
   1f7dc:	4019      	ands	r1, r3
   1f7de:	1c2a      	adds	r2, r5, #0
   1f7e0:	2900      	cmp	r1, #0
   1f7e2:	d03a      	beq.n	1f85a <__aeabi_fadd+0xbe>
   1f7e4:	3401      	adds	r4, #1
   1f7e6:	2cff      	cmp	r4, #255	; 0xff
   1f7e8:	d100      	bne.n	1f7ec <__aeabi_fadd+0x50>
   1f7ea:	e07f      	b.n	1f8ec <__aeabi_fadd+0x150>
   1f7ec:	019b      	lsls	r3, r3, #6
   1f7ee:	0a5b      	lsrs	r3, r3, #9
   1f7f0:	025b      	lsls	r3, r3, #9
   1f7f2:	b2e4      	uxtb	r4, r4
   1f7f4:	05e4      	lsls	r4, r4, #23
   1f7f6:	0a58      	lsrs	r0, r3, #9
   1f7f8:	07d2      	lsls	r2, r2, #31
   1f7fa:	4320      	orrs	r0, r4
   1f7fc:	4310      	orrs	r0, r2
   1f7fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f800:	2cff      	cmp	r4, #255	; 0xff
   1f802:	d0e2      	beq.n	1f7ca <__aeabi_fadd+0x2e>
   1f804:	2180      	movs	r1, #128	; 0x80
   1f806:	04c9      	lsls	r1, r1, #19
   1f808:	430e      	orrs	r6, r1
   1f80a:	2a1b      	cmp	r2, #27
   1f80c:	dd00      	ble.n	1f810 <__aeabi_fadd+0x74>
   1f80e:	e12b      	b.n	1fa68 <__aeabi_fadd+0x2cc>
   1f810:	1c31      	adds	r1, r6, #0
   1f812:	2020      	movs	r0, #32
   1f814:	40d1      	lsrs	r1, r2
   1f816:	1a82      	subs	r2, r0, r2
   1f818:	4096      	lsls	r6, r2
   1f81a:	1e72      	subs	r2, r6, #1
   1f81c:	4196      	sbcs	r6, r2
   1f81e:	430e      	orrs	r6, r1
   1f820:	1b9b      	subs	r3, r3, r6
   1f822:	0158      	lsls	r0, r3, #5
   1f824:	d5d1      	bpl.n	1f7ca <__aeabi_fadd+0x2e>
   1f826:	019b      	lsls	r3, r3, #6
   1f828:	099f      	lsrs	r7, r3, #6
   1f82a:	1c38      	adds	r0, r7, #0
   1f82c:	f002 fd4e 	bl	222cc <__clzsi2>
   1f830:	1f42      	subs	r2, r0, #5
   1f832:	4097      	lsls	r7, r2
   1f834:	4294      	cmp	r4, r2
   1f836:	dc5b      	bgt.n	1f8f0 <__aeabi_fadd+0x154>
   1f838:	1b14      	subs	r4, r2, r4
   1f83a:	231f      	movs	r3, #31
   1f83c:	1b1b      	subs	r3, r3, r4
   1f83e:	1c3a      	adds	r2, r7, #0
   1f840:	409f      	lsls	r7, r3
   1f842:	1c61      	adds	r1, r4, #1
   1f844:	1c3b      	adds	r3, r7, #0
   1f846:	40ca      	lsrs	r2, r1
   1f848:	1e5f      	subs	r7, r3, #1
   1f84a:	41bb      	sbcs	r3, r7
   1f84c:	4313      	orrs	r3, r2
   1f84e:	2400      	movs	r4, #0
   1f850:	e7bb      	b.n	1f7ca <__aeabi_fadd+0x2e>
   1f852:	1e13      	subs	r3, r2, #0
   1f854:	d1b9      	bne.n	1f7ca <__aeabi_fadd+0x2e>
   1f856:	2300      	movs	r3, #0
   1f858:	2200      	movs	r2, #0
   1f85a:	08db      	lsrs	r3, r3, #3
   1f85c:	2cff      	cmp	r4, #255	; 0xff
   1f85e:	d104      	bne.n	1f86a <__aeabi_fadd+0xce>
   1f860:	2b00      	cmp	r3, #0
   1f862:	d043      	beq.n	1f8ec <__aeabi_fadd+0x150>
   1f864:	2080      	movs	r0, #128	; 0x80
   1f866:	03c0      	lsls	r0, r0, #15
   1f868:	4303      	orrs	r3, r0
   1f86a:	025b      	lsls	r3, r3, #9
   1f86c:	0a5b      	lsrs	r3, r3, #9
   1f86e:	e7bf      	b.n	1f7f0 <__aeabi_fadd+0x54>
   1f870:	1a21      	subs	r1, r4, r0
   1f872:	2900      	cmp	r1, #0
   1f874:	dd40      	ble.n	1f8f8 <__aeabi_fadd+0x15c>
   1f876:	2800      	cmp	r0, #0
   1f878:	d023      	beq.n	1f8c2 <__aeabi_fadd+0x126>
   1f87a:	2cff      	cmp	r4, #255	; 0xff
   1f87c:	d0a5      	beq.n	1f7ca <__aeabi_fadd+0x2e>
   1f87e:	2080      	movs	r0, #128	; 0x80
   1f880:	04c0      	lsls	r0, r0, #19
   1f882:	4306      	orrs	r6, r0
   1f884:	291b      	cmp	r1, #27
   1f886:	dd00      	ble.n	1f88a <__aeabi_fadd+0xee>
   1f888:	e0ec      	b.n	1fa64 <__aeabi_fadd+0x2c8>
   1f88a:	1c30      	adds	r0, r6, #0
   1f88c:	2720      	movs	r7, #32
   1f88e:	40c8      	lsrs	r0, r1
   1f890:	1a79      	subs	r1, r7, r1
   1f892:	408e      	lsls	r6, r1
   1f894:	1e71      	subs	r1, r6, #1
   1f896:	418e      	sbcs	r6, r1
   1f898:	4306      	orrs	r6, r0
   1f89a:	199b      	adds	r3, r3, r6
   1f89c:	0159      	lsls	r1, r3, #5
   1f89e:	d400      	bmi.n	1f8a2 <__aeabi_fadd+0x106>
   1f8a0:	e793      	b.n	1f7ca <__aeabi_fadd+0x2e>
   1f8a2:	3401      	adds	r4, #1
   1f8a4:	2cff      	cmp	r4, #255	; 0xff
   1f8a6:	d055      	beq.n	1f954 <__aeabi_fadd+0x1b8>
   1f8a8:	4970      	ldr	r1, [pc, #448]	; (1fa6c <__aeabi_fadd+0x2d0>)
   1f8aa:	2201      	movs	r2, #1
   1f8ac:	401a      	ands	r2, r3
   1f8ae:	400b      	ands	r3, r1
   1f8b0:	085b      	lsrs	r3, r3, #1
   1f8b2:	4313      	orrs	r3, r2
   1f8b4:	e789      	b.n	1f7ca <__aeabi_fadd+0x2e>
   1f8b6:	3a01      	subs	r2, #1
   1f8b8:	2a00      	cmp	r2, #0
   1f8ba:	d0b1      	beq.n	1f820 <__aeabi_fadd+0x84>
   1f8bc:	2cff      	cmp	r4, #255	; 0xff
   1f8be:	d1a4      	bne.n	1f80a <__aeabi_fadd+0x6e>
   1f8c0:	e783      	b.n	1f7ca <__aeabi_fadd+0x2e>
   1f8c2:	2e00      	cmp	r6, #0
   1f8c4:	d100      	bne.n	1f8c8 <__aeabi_fadd+0x12c>
   1f8c6:	e780      	b.n	1f7ca <__aeabi_fadd+0x2e>
   1f8c8:	3901      	subs	r1, #1
   1f8ca:	2900      	cmp	r1, #0
   1f8cc:	d0e5      	beq.n	1f89a <__aeabi_fadd+0xfe>
   1f8ce:	2cff      	cmp	r4, #255	; 0xff
   1f8d0:	d1d8      	bne.n	1f884 <__aeabi_fadd+0xe8>
   1f8d2:	e77a      	b.n	1f7ca <__aeabi_fadd+0x2e>
   1f8d4:	2a00      	cmp	r2, #0
   1f8d6:	d11b      	bne.n	1f910 <__aeabi_fadd+0x174>
   1f8d8:	1c62      	adds	r2, r4, #1
   1f8da:	b2d2      	uxtb	r2, r2
   1f8dc:	2a01      	cmp	r2, #1
   1f8de:	dd4a      	ble.n	1f976 <__aeabi_fadd+0x1da>
   1f8e0:	1b9f      	subs	r7, r3, r6
   1f8e2:	017a      	lsls	r2, r7, #5
   1f8e4:	d523      	bpl.n	1f92e <__aeabi_fadd+0x192>
   1f8e6:	1af7      	subs	r7, r6, r3
   1f8e8:	1c0d      	adds	r5, r1, #0
   1f8ea:	e79e      	b.n	1f82a <__aeabi_fadd+0x8e>
   1f8ec:	2300      	movs	r3, #0
   1f8ee:	e77f      	b.n	1f7f0 <__aeabi_fadd+0x54>
   1f8f0:	4b5e      	ldr	r3, [pc, #376]	; (1fa6c <__aeabi_fadd+0x2d0>)
   1f8f2:	1aa4      	subs	r4, r4, r2
   1f8f4:	403b      	ands	r3, r7
   1f8f6:	e768      	b.n	1f7ca <__aeabi_fadd+0x2e>
   1f8f8:	2900      	cmp	r1, #0
   1f8fa:	d145      	bne.n	1f988 <__aeabi_fadd+0x1ec>
   1f8fc:	1c61      	adds	r1, r4, #1
   1f8fe:	b2c8      	uxtb	r0, r1
   1f900:	2801      	cmp	r0, #1
   1f902:	dd29      	ble.n	1f958 <__aeabi_fadd+0x1bc>
   1f904:	29ff      	cmp	r1, #255	; 0xff
   1f906:	d024      	beq.n	1f952 <__aeabi_fadd+0x1b6>
   1f908:	18f3      	adds	r3, r6, r3
   1f90a:	085b      	lsrs	r3, r3, #1
   1f90c:	1c0c      	adds	r4, r1, #0
   1f90e:	e75c      	b.n	1f7ca <__aeabi_fadd+0x2e>
   1f910:	2c00      	cmp	r4, #0
   1f912:	d013      	beq.n	1f93c <__aeabi_fadd+0x1a0>
   1f914:	28ff      	cmp	r0, #255	; 0xff
   1f916:	d018      	beq.n	1f94a <__aeabi_fadd+0x1ae>
   1f918:	2480      	movs	r4, #128	; 0x80
   1f91a:	04e4      	lsls	r4, r4, #19
   1f91c:	4252      	negs	r2, r2
   1f91e:	4323      	orrs	r3, r4
   1f920:	2a1b      	cmp	r2, #27
   1f922:	dd4c      	ble.n	1f9be <__aeabi_fadd+0x222>
   1f924:	2301      	movs	r3, #1
   1f926:	1af3      	subs	r3, r6, r3
   1f928:	1c04      	adds	r4, r0, #0
   1f92a:	1c0d      	adds	r5, r1, #0
   1f92c:	e779      	b.n	1f822 <__aeabi_fadd+0x86>
   1f92e:	2f00      	cmp	r7, #0
   1f930:	d000      	beq.n	1f934 <__aeabi_fadd+0x198>
   1f932:	e77a      	b.n	1f82a <__aeabi_fadd+0x8e>
   1f934:	2300      	movs	r3, #0
   1f936:	2200      	movs	r2, #0
   1f938:	2400      	movs	r4, #0
   1f93a:	e78e      	b.n	1f85a <__aeabi_fadd+0xbe>
   1f93c:	2b00      	cmp	r3, #0
   1f93e:	d03a      	beq.n	1f9b6 <__aeabi_fadd+0x21a>
   1f940:	43d2      	mvns	r2, r2
   1f942:	2a00      	cmp	r2, #0
   1f944:	d0ef      	beq.n	1f926 <__aeabi_fadd+0x18a>
   1f946:	28ff      	cmp	r0, #255	; 0xff
   1f948:	d1ea      	bne.n	1f920 <__aeabi_fadd+0x184>
   1f94a:	1c33      	adds	r3, r6, #0
   1f94c:	24ff      	movs	r4, #255	; 0xff
   1f94e:	1c0d      	adds	r5, r1, #0
   1f950:	e73b      	b.n	1f7ca <__aeabi_fadd+0x2e>
   1f952:	24ff      	movs	r4, #255	; 0xff
   1f954:	2300      	movs	r3, #0
   1f956:	e780      	b.n	1f85a <__aeabi_fadd+0xbe>
   1f958:	2c00      	cmp	r4, #0
   1f95a:	d15b      	bne.n	1fa14 <__aeabi_fadd+0x278>
   1f95c:	2b00      	cmp	r3, #0
   1f95e:	d07f      	beq.n	1fa60 <__aeabi_fadd+0x2c4>
   1f960:	2e00      	cmp	r6, #0
   1f962:	d100      	bne.n	1f966 <__aeabi_fadd+0x1ca>
   1f964:	e731      	b.n	1f7ca <__aeabi_fadd+0x2e>
   1f966:	199b      	adds	r3, r3, r6
   1f968:	0158      	lsls	r0, r3, #5
   1f96a:	d400      	bmi.n	1f96e <__aeabi_fadd+0x1d2>
   1f96c:	e72d      	b.n	1f7ca <__aeabi_fadd+0x2e>
   1f96e:	4a3f      	ldr	r2, [pc, #252]	; (1fa6c <__aeabi_fadd+0x2d0>)
   1f970:	2401      	movs	r4, #1
   1f972:	4013      	ands	r3, r2
   1f974:	e729      	b.n	1f7ca <__aeabi_fadd+0x2e>
   1f976:	2c00      	cmp	r4, #0
   1f978:	d115      	bne.n	1f9a6 <__aeabi_fadd+0x20a>
   1f97a:	2b00      	cmp	r3, #0
   1f97c:	d140      	bne.n	1fa00 <__aeabi_fadd+0x264>
   1f97e:	2e00      	cmp	r6, #0
   1f980:	d062      	beq.n	1fa48 <__aeabi_fadd+0x2ac>
   1f982:	1c33      	adds	r3, r6, #0
   1f984:	1c0d      	adds	r5, r1, #0
   1f986:	e720      	b.n	1f7ca <__aeabi_fadd+0x2e>
   1f988:	2c00      	cmp	r4, #0
   1f98a:	d121      	bne.n	1f9d0 <__aeabi_fadd+0x234>
   1f98c:	2b00      	cmp	r3, #0
   1f98e:	d054      	beq.n	1fa3a <__aeabi_fadd+0x29e>
   1f990:	43c9      	mvns	r1, r1
   1f992:	2900      	cmp	r1, #0
   1f994:	d004      	beq.n	1f9a0 <__aeabi_fadd+0x204>
   1f996:	28ff      	cmp	r0, #255	; 0xff
   1f998:	d04c      	beq.n	1fa34 <__aeabi_fadd+0x298>
   1f99a:	291b      	cmp	r1, #27
   1f99c:	dd57      	ble.n	1fa4e <__aeabi_fadd+0x2b2>
   1f99e:	2301      	movs	r3, #1
   1f9a0:	199b      	adds	r3, r3, r6
   1f9a2:	1c04      	adds	r4, r0, #0
   1f9a4:	e77a      	b.n	1f89c <__aeabi_fadd+0x100>
   1f9a6:	2b00      	cmp	r3, #0
   1f9a8:	d119      	bne.n	1f9de <__aeabi_fadd+0x242>
   1f9aa:	2e00      	cmp	r6, #0
   1f9ac:	d048      	beq.n	1fa40 <__aeabi_fadd+0x2a4>
   1f9ae:	1c33      	adds	r3, r6, #0
   1f9b0:	1c0d      	adds	r5, r1, #0
   1f9b2:	24ff      	movs	r4, #255	; 0xff
   1f9b4:	e709      	b.n	1f7ca <__aeabi_fadd+0x2e>
   1f9b6:	1c33      	adds	r3, r6, #0
   1f9b8:	1c04      	adds	r4, r0, #0
   1f9ba:	1c0d      	adds	r5, r1, #0
   1f9bc:	e705      	b.n	1f7ca <__aeabi_fadd+0x2e>
   1f9be:	1c1c      	adds	r4, r3, #0
   1f9c0:	2520      	movs	r5, #32
   1f9c2:	40d4      	lsrs	r4, r2
   1f9c4:	1aaa      	subs	r2, r5, r2
   1f9c6:	4093      	lsls	r3, r2
   1f9c8:	1e5a      	subs	r2, r3, #1
   1f9ca:	4193      	sbcs	r3, r2
   1f9cc:	4323      	orrs	r3, r4
   1f9ce:	e7aa      	b.n	1f926 <__aeabi_fadd+0x18a>
   1f9d0:	28ff      	cmp	r0, #255	; 0xff
   1f9d2:	d02f      	beq.n	1fa34 <__aeabi_fadd+0x298>
   1f9d4:	2480      	movs	r4, #128	; 0x80
   1f9d6:	04e4      	lsls	r4, r4, #19
   1f9d8:	4249      	negs	r1, r1
   1f9da:	4323      	orrs	r3, r4
   1f9dc:	e7dd      	b.n	1f99a <__aeabi_fadd+0x1fe>
   1f9de:	24ff      	movs	r4, #255	; 0xff
   1f9e0:	2e00      	cmp	r6, #0
   1f9e2:	d100      	bne.n	1f9e6 <__aeabi_fadd+0x24a>
   1f9e4:	e6f1      	b.n	1f7ca <__aeabi_fadd+0x2e>
   1f9e6:	2280      	movs	r2, #128	; 0x80
   1f9e8:	08db      	lsrs	r3, r3, #3
   1f9ea:	03d2      	lsls	r2, r2, #15
   1f9ec:	4213      	tst	r3, r2
   1f9ee:	d004      	beq.n	1f9fa <__aeabi_fadd+0x25e>
   1f9f0:	08f6      	lsrs	r6, r6, #3
   1f9f2:	4216      	tst	r6, r2
   1f9f4:	d101      	bne.n	1f9fa <__aeabi_fadd+0x25e>
   1f9f6:	1c33      	adds	r3, r6, #0
   1f9f8:	1c0d      	adds	r5, r1, #0
   1f9fa:	00db      	lsls	r3, r3, #3
   1f9fc:	24ff      	movs	r4, #255	; 0xff
   1f9fe:	e6e4      	b.n	1f7ca <__aeabi_fadd+0x2e>
   1fa00:	2e00      	cmp	r6, #0
   1fa02:	d100      	bne.n	1fa06 <__aeabi_fadd+0x26a>
   1fa04:	e6e1      	b.n	1f7ca <__aeabi_fadd+0x2e>
   1fa06:	1b9a      	subs	r2, r3, r6
   1fa08:	0150      	lsls	r0, r2, #5
   1fa0a:	d400      	bmi.n	1fa0e <__aeabi_fadd+0x272>
   1fa0c:	e721      	b.n	1f852 <__aeabi_fadd+0xb6>
   1fa0e:	1af3      	subs	r3, r6, r3
   1fa10:	1c0d      	adds	r5, r1, #0
   1fa12:	e6da      	b.n	1f7ca <__aeabi_fadd+0x2e>
   1fa14:	2b00      	cmp	r3, #0
   1fa16:	d00d      	beq.n	1fa34 <__aeabi_fadd+0x298>
   1fa18:	24ff      	movs	r4, #255	; 0xff
   1fa1a:	2e00      	cmp	r6, #0
   1fa1c:	d100      	bne.n	1fa20 <__aeabi_fadd+0x284>
   1fa1e:	e6d4      	b.n	1f7ca <__aeabi_fadd+0x2e>
   1fa20:	2280      	movs	r2, #128	; 0x80
   1fa22:	08db      	lsrs	r3, r3, #3
   1fa24:	03d2      	lsls	r2, r2, #15
   1fa26:	4213      	tst	r3, r2
   1fa28:	d0e7      	beq.n	1f9fa <__aeabi_fadd+0x25e>
   1fa2a:	08f6      	lsrs	r6, r6, #3
   1fa2c:	4216      	tst	r6, r2
   1fa2e:	d1e4      	bne.n	1f9fa <__aeabi_fadd+0x25e>
   1fa30:	1c33      	adds	r3, r6, #0
   1fa32:	e7e2      	b.n	1f9fa <__aeabi_fadd+0x25e>
   1fa34:	1c33      	adds	r3, r6, #0
   1fa36:	24ff      	movs	r4, #255	; 0xff
   1fa38:	e6c7      	b.n	1f7ca <__aeabi_fadd+0x2e>
   1fa3a:	1c33      	adds	r3, r6, #0
   1fa3c:	1c04      	adds	r4, r0, #0
   1fa3e:	e6c4      	b.n	1f7ca <__aeabi_fadd+0x2e>
   1fa40:	2200      	movs	r2, #0
   1fa42:	4b0b      	ldr	r3, [pc, #44]	; (1fa70 <__aeabi_fadd+0x2d4>)
   1fa44:	24ff      	movs	r4, #255	; 0xff
   1fa46:	e708      	b.n	1f85a <__aeabi_fadd+0xbe>
   1fa48:	1c23      	adds	r3, r4, #0
   1fa4a:	2200      	movs	r2, #0
   1fa4c:	e705      	b.n	1f85a <__aeabi_fadd+0xbe>
   1fa4e:	1c1c      	adds	r4, r3, #0
   1fa50:	2720      	movs	r7, #32
   1fa52:	40cc      	lsrs	r4, r1
   1fa54:	1a79      	subs	r1, r7, r1
   1fa56:	408b      	lsls	r3, r1
   1fa58:	1e59      	subs	r1, r3, #1
   1fa5a:	418b      	sbcs	r3, r1
   1fa5c:	4323      	orrs	r3, r4
   1fa5e:	e79f      	b.n	1f9a0 <__aeabi_fadd+0x204>
   1fa60:	1c33      	adds	r3, r6, #0
   1fa62:	e6b2      	b.n	1f7ca <__aeabi_fadd+0x2e>
   1fa64:	2601      	movs	r6, #1
   1fa66:	e718      	b.n	1f89a <__aeabi_fadd+0xfe>
   1fa68:	2601      	movs	r6, #1
   1fa6a:	e6d9      	b.n	1f820 <__aeabi_fadd+0x84>
   1fa6c:	fbffffff 	.word	0xfbffffff
   1fa70:	03fffff8 	.word	0x03fffff8

0001fa74 <__aeabi_fdiv>:
   1fa74:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fa76:	465f      	mov	r7, fp
   1fa78:	4656      	mov	r6, sl
   1fa7a:	464d      	mov	r5, r9
   1fa7c:	4644      	mov	r4, r8
   1fa7e:	b4f0      	push	{r4, r5, r6, r7}
   1fa80:	0246      	lsls	r6, r0, #9
   1fa82:	0045      	lsls	r5, r0, #1
   1fa84:	0fc0      	lsrs	r0, r0, #31
   1fa86:	b085      	sub	sp, #20
   1fa88:	1c0f      	adds	r7, r1, #0
   1fa8a:	0a76      	lsrs	r6, r6, #9
   1fa8c:	0e2d      	lsrs	r5, r5, #24
   1fa8e:	4680      	mov	r8, r0
   1fa90:	d041      	beq.n	1fb16 <__aeabi_fdiv+0xa2>
   1fa92:	2dff      	cmp	r5, #255	; 0xff
   1fa94:	d026      	beq.n	1fae4 <__aeabi_fdiv+0x70>
   1fa96:	2480      	movs	r4, #128	; 0x80
   1fa98:	0424      	lsls	r4, r4, #16
   1fa9a:	2100      	movs	r1, #0
   1fa9c:	4326      	orrs	r6, r4
   1fa9e:	00f6      	lsls	r6, r6, #3
   1faa0:	3d7f      	subs	r5, #127	; 0x7f
   1faa2:	4689      	mov	r9, r1
   1faa4:	468b      	mov	fp, r1
   1faa6:	0ff9      	lsrs	r1, r7, #31
   1faa8:	027c      	lsls	r4, r7, #9
   1faaa:	0078      	lsls	r0, r7, #1
   1faac:	0a64      	lsrs	r4, r4, #9
   1faae:	0e00      	lsrs	r0, r0, #24
   1fab0:	9100      	str	r1, [sp, #0]
   1fab2:	468a      	mov	sl, r1
   1fab4:	d03c      	beq.n	1fb30 <__aeabi_fdiv+0xbc>
   1fab6:	28ff      	cmp	r0, #255	; 0xff
   1fab8:	d034      	beq.n	1fb24 <__aeabi_fdiv+0xb0>
   1faba:	2380      	movs	r3, #128	; 0x80
   1fabc:	041b      	lsls	r3, r3, #16
   1fabe:	431c      	orrs	r4, r3
   1fac0:	2300      	movs	r3, #0
   1fac2:	00e4      	lsls	r4, r4, #3
   1fac4:	387f      	subs	r0, #127	; 0x7f
   1fac6:	9301      	str	r3, [sp, #4]
   1fac8:	9f00      	ldr	r7, [sp, #0]
   1faca:	4643      	mov	r3, r8
   1facc:	9a01      	ldr	r2, [sp, #4]
   1face:	407b      	eors	r3, r7
   1fad0:	4649      	mov	r1, r9
   1fad2:	469c      	mov	ip, r3
   1fad4:	4311      	orrs	r1, r2
   1fad6:	290f      	cmp	r1, #15
   1fad8:	d900      	bls.n	1fadc <__aeabi_fdiv+0x68>
   1fada:	e070      	b.n	1fbbe <__aeabi_fdiv+0x14a>
   1fadc:	4f75      	ldr	r7, [pc, #468]	; (1fcb4 <__aeabi_fdiv+0x240>)
   1fade:	0089      	lsls	r1, r1, #2
   1fae0:	587f      	ldr	r7, [r7, r1]
   1fae2:	46bf      	mov	pc, r7
   1fae4:	2e00      	cmp	r6, #0
   1fae6:	d13e      	bne.n	1fb66 <__aeabi_fdiv+0xf2>
   1fae8:	2208      	movs	r2, #8
   1faea:	2302      	movs	r3, #2
   1faec:	4691      	mov	r9, r2
   1faee:	469b      	mov	fp, r3
   1faf0:	e7d9      	b.n	1faa6 <__aeabi_fdiv+0x32>
   1faf2:	465a      	mov	r2, fp
   1faf4:	1c34      	adds	r4, r6, #0
   1faf6:	46c2      	mov	sl, r8
   1faf8:	9201      	str	r2, [sp, #4]
   1fafa:	9901      	ldr	r1, [sp, #4]
   1fafc:	2902      	cmp	r1, #2
   1fafe:	d037      	beq.n	1fb70 <__aeabi_fdiv+0xfc>
   1fb00:	2903      	cmp	r1, #3
   1fb02:	d100      	bne.n	1fb06 <__aeabi_fdiv+0x92>
   1fb04:	e0ce      	b.n	1fca4 <__aeabi_fdiv+0x230>
   1fb06:	2901      	cmp	r1, #1
   1fb08:	d000      	beq.n	1fb0c <__aeabi_fdiv+0x98>
   1fb0a:	e0aa      	b.n	1fc62 <__aeabi_fdiv+0x1ee>
   1fb0c:	4653      	mov	r3, sl
   1fb0e:	400b      	ands	r3, r1
   1fb10:	2200      	movs	r2, #0
   1fb12:	2600      	movs	r6, #0
   1fb14:	e032      	b.n	1fb7c <__aeabi_fdiv+0x108>
   1fb16:	2e00      	cmp	r6, #0
   1fb18:	d119      	bne.n	1fb4e <__aeabi_fdiv+0xda>
   1fb1a:	2104      	movs	r1, #4
   1fb1c:	2201      	movs	r2, #1
   1fb1e:	4689      	mov	r9, r1
   1fb20:	4693      	mov	fp, r2
   1fb22:	e7c0      	b.n	1faa6 <__aeabi_fdiv+0x32>
   1fb24:	1c22      	adds	r2, r4, #0
   1fb26:	1e53      	subs	r3, r2, #1
   1fb28:	419a      	sbcs	r2, r3
   1fb2a:	3202      	adds	r2, #2
   1fb2c:	9201      	str	r2, [sp, #4]
   1fb2e:	e7cb      	b.n	1fac8 <__aeabi_fdiv+0x54>
   1fb30:	2701      	movs	r7, #1
   1fb32:	9701      	str	r7, [sp, #4]
   1fb34:	2c00      	cmp	r4, #0
   1fb36:	d0c7      	beq.n	1fac8 <__aeabi_fdiv+0x54>
   1fb38:	1c20      	adds	r0, r4, #0
   1fb3a:	f002 fbc7 	bl	222cc <__clzsi2>
   1fb3e:	1f43      	subs	r3, r0, #5
   1fb40:	409c      	lsls	r4, r3
   1fb42:	2376      	movs	r3, #118	; 0x76
   1fb44:	425b      	negs	r3, r3
   1fb46:	2100      	movs	r1, #0
   1fb48:	1a18      	subs	r0, r3, r0
   1fb4a:	9101      	str	r1, [sp, #4]
   1fb4c:	e7bc      	b.n	1fac8 <__aeabi_fdiv+0x54>
   1fb4e:	1c30      	adds	r0, r6, #0
   1fb50:	f002 fbbc 	bl	222cc <__clzsi2>
   1fb54:	2576      	movs	r5, #118	; 0x76
   1fb56:	1f43      	subs	r3, r0, #5
   1fb58:	409e      	lsls	r6, r3
   1fb5a:	426d      	negs	r5, r5
   1fb5c:	2300      	movs	r3, #0
   1fb5e:	1a2d      	subs	r5, r5, r0
   1fb60:	4699      	mov	r9, r3
   1fb62:	469b      	mov	fp, r3
   1fb64:	e79f      	b.n	1faa6 <__aeabi_fdiv+0x32>
   1fb66:	230c      	movs	r3, #12
   1fb68:	2103      	movs	r1, #3
   1fb6a:	4699      	mov	r9, r3
   1fb6c:	468b      	mov	fp, r1
   1fb6e:	e79a      	b.n	1faa6 <__aeabi_fdiv+0x32>
   1fb70:	46d4      	mov	ip, sl
   1fb72:	2301      	movs	r3, #1
   1fb74:	4667      	mov	r7, ip
   1fb76:	403b      	ands	r3, r7
   1fb78:	22ff      	movs	r2, #255	; 0xff
   1fb7a:	2600      	movs	r6, #0
   1fb7c:	0276      	lsls	r6, r6, #9
   1fb7e:	05d2      	lsls	r2, r2, #23
   1fb80:	0a70      	lsrs	r0, r6, #9
   1fb82:	07db      	lsls	r3, r3, #31
   1fb84:	4310      	orrs	r0, r2
   1fb86:	4318      	orrs	r0, r3
   1fb88:	b005      	add	sp, #20
   1fb8a:	bc3c      	pop	{r2, r3, r4, r5}
   1fb8c:	4690      	mov	r8, r2
   1fb8e:	4699      	mov	r9, r3
   1fb90:	46a2      	mov	sl, r4
   1fb92:	46ab      	mov	fp, r5
   1fb94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fb96:	2300      	movs	r3, #0
   1fb98:	4e47      	ldr	r6, [pc, #284]	; (1fcb8 <__aeabi_fdiv+0x244>)
   1fb9a:	22ff      	movs	r2, #255	; 0xff
   1fb9c:	e7ee      	b.n	1fb7c <__aeabi_fdiv+0x108>
   1fb9e:	2200      	movs	r2, #0
   1fba0:	2600      	movs	r6, #0
   1fba2:	e7eb      	b.n	1fb7c <__aeabi_fdiv+0x108>
   1fba4:	2080      	movs	r0, #128	; 0x80
   1fba6:	03c0      	lsls	r0, r0, #15
   1fba8:	4206      	tst	r6, r0
   1fbaa:	d03b      	beq.n	1fc24 <__aeabi_fdiv+0x1b0>
   1fbac:	4204      	tst	r4, r0
   1fbae:	d139      	bne.n	1fc24 <__aeabi_fdiv+0x1b0>
   1fbb0:	1c06      	adds	r6, r0, #0
   1fbb2:	4326      	orrs	r6, r4
   1fbb4:	0276      	lsls	r6, r6, #9
   1fbb6:	0a76      	lsrs	r6, r6, #9
   1fbb8:	9b00      	ldr	r3, [sp, #0]
   1fbba:	22ff      	movs	r2, #255	; 0xff
   1fbbc:	e7de      	b.n	1fb7c <__aeabi_fdiv+0x108>
   1fbbe:	1a28      	subs	r0, r5, r0
   1fbc0:	9003      	str	r0, [sp, #12]
   1fbc2:	0176      	lsls	r6, r6, #5
   1fbc4:	0164      	lsls	r4, r4, #5
   1fbc6:	42a6      	cmp	r6, r4
   1fbc8:	d339      	bcc.n	1fc3e <__aeabi_fdiv+0x1ca>
   1fbca:	1b36      	subs	r6, r6, r4
   1fbcc:	221a      	movs	r2, #26
   1fbce:	2301      	movs	r3, #1
   1fbd0:	2001      	movs	r0, #1
   1fbd2:	1c31      	adds	r1, r6, #0
   1fbd4:	005b      	lsls	r3, r3, #1
   1fbd6:	0076      	lsls	r6, r6, #1
   1fbd8:	2900      	cmp	r1, #0
   1fbda:	db01      	blt.n	1fbe0 <__aeabi_fdiv+0x16c>
   1fbdc:	42b4      	cmp	r4, r6
   1fbde:	d801      	bhi.n	1fbe4 <__aeabi_fdiv+0x170>
   1fbe0:	1b36      	subs	r6, r6, r4
   1fbe2:	4303      	orrs	r3, r0
   1fbe4:	3a01      	subs	r2, #1
   1fbe6:	2a00      	cmp	r2, #0
   1fbe8:	dcf3      	bgt.n	1fbd2 <__aeabi_fdiv+0x15e>
   1fbea:	1e74      	subs	r4, r6, #1
   1fbec:	41a6      	sbcs	r6, r4
   1fbee:	1c34      	adds	r4, r6, #0
   1fbf0:	431c      	orrs	r4, r3
   1fbf2:	9a03      	ldr	r2, [sp, #12]
   1fbf4:	327f      	adds	r2, #127	; 0x7f
   1fbf6:	2a00      	cmp	r2, #0
   1fbf8:	dd27      	ble.n	1fc4a <__aeabi_fdiv+0x1d6>
   1fbfa:	0763      	lsls	r3, r4, #29
   1fbfc:	d004      	beq.n	1fc08 <__aeabi_fdiv+0x194>
   1fbfe:	230f      	movs	r3, #15
   1fc00:	4023      	ands	r3, r4
   1fc02:	2b04      	cmp	r3, #4
   1fc04:	d000      	beq.n	1fc08 <__aeabi_fdiv+0x194>
   1fc06:	3404      	adds	r4, #4
   1fc08:	0127      	lsls	r7, r4, #4
   1fc0a:	d503      	bpl.n	1fc14 <__aeabi_fdiv+0x1a0>
   1fc0c:	4b2b      	ldr	r3, [pc, #172]	; (1fcbc <__aeabi_fdiv+0x248>)
   1fc0e:	9a03      	ldr	r2, [sp, #12]
   1fc10:	401c      	ands	r4, r3
   1fc12:	3280      	adds	r2, #128	; 0x80
   1fc14:	2afe      	cmp	r2, #254	; 0xfe
   1fc16:	dd0b      	ble.n	1fc30 <__aeabi_fdiv+0x1bc>
   1fc18:	2301      	movs	r3, #1
   1fc1a:	4661      	mov	r1, ip
   1fc1c:	400b      	ands	r3, r1
   1fc1e:	22ff      	movs	r2, #255	; 0xff
   1fc20:	2600      	movs	r6, #0
   1fc22:	e7ab      	b.n	1fb7c <__aeabi_fdiv+0x108>
   1fc24:	4306      	orrs	r6, r0
   1fc26:	0276      	lsls	r6, r6, #9
   1fc28:	0a76      	lsrs	r6, r6, #9
   1fc2a:	4643      	mov	r3, r8
   1fc2c:	22ff      	movs	r2, #255	; 0xff
   1fc2e:	e7a5      	b.n	1fb7c <__aeabi_fdiv+0x108>
   1fc30:	01a4      	lsls	r4, r4, #6
   1fc32:	2301      	movs	r3, #1
   1fc34:	4667      	mov	r7, ip
   1fc36:	0a66      	lsrs	r6, r4, #9
   1fc38:	b2d2      	uxtb	r2, r2
   1fc3a:	403b      	ands	r3, r7
   1fc3c:	e79e      	b.n	1fb7c <__aeabi_fdiv+0x108>
   1fc3e:	9f03      	ldr	r7, [sp, #12]
   1fc40:	221b      	movs	r2, #27
   1fc42:	3f01      	subs	r7, #1
   1fc44:	9703      	str	r7, [sp, #12]
   1fc46:	2300      	movs	r3, #0
   1fc48:	e7c2      	b.n	1fbd0 <__aeabi_fdiv+0x15c>
   1fc4a:	237e      	movs	r3, #126	; 0x7e
   1fc4c:	9f03      	ldr	r7, [sp, #12]
   1fc4e:	425b      	negs	r3, r3
   1fc50:	1bdb      	subs	r3, r3, r7
   1fc52:	2b1b      	cmp	r3, #27
   1fc54:	dd07      	ble.n	1fc66 <__aeabi_fdiv+0x1f2>
   1fc56:	2301      	movs	r3, #1
   1fc58:	4661      	mov	r1, ip
   1fc5a:	400b      	ands	r3, r1
   1fc5c:	2200      	movs	r2, #0
   1fc5e:	2600      	movs	r6, #0
   1fc60:	e78c      	b.n	1fb7c <__aeabi_fdiv+0x108>
   1fc62:	46d4      	mov	ip, sl
   1fc64:	e7c5      	b.n	1fbf2 <__aeabi_fdiv+0x17e>
   1fc66:	1c22      	adds	r2, r4, #0
   1fc68:	40da      	lsrs	r2, r3
   1fc6a:	9b03      	ldr	r3, [sp, #12]
   1fc6c:	339e      	adds	r3, #158	; 0x9e
   1fc6e:	409c      	lsls	r4, r3
   1fc70:	1c23      	adds	r3, r4, #0
   1fc72:	1e5c      	subs	r4, r3, #1
   1fc74:	41a3      	sbcs	r3, r4
   1fc76:	4313      	orrs	r3, r2
   1fc78:	075a      	lsls	r2, r3, #29
   1fc7a:	d004      	beq.n	1fc86 <__aeabi_fdiv+0x212>
   1fc7c:	220f      	movs	r2, #15
   1fc7e:	401a      	ands	r2, r3
   1fc80:	2a04      	cmp	r2, #4
   1fc82:	d000      	beq.n	1fc86 <__aeabi_fdiv+0x212>
   1fc84:	3304      	adds	r3, #4
   1fc86:	015f      	lsls	r7, r3, #5
   1fc88:	d505      	bpl.n	1fc96 <__aeabi_fdiv+0x222>
   1fc8a:	2301      	movs	r3, #1
   1fc8c:	4661      	mov	r1, ip
   1fc8e:	400b      	ands	r3, r1
   1fc90:	2201      	movs	r2, #1
   1fc92:	2600      	movs	r6, #0
   1fc94:	e772      	b.n	1fb7c <__aeabi_fdiv+0x108>
   1fc96:	019e      	lsls	r6, r3, #6
   1fc98:	4662      	mov	r2, ip
   1fc9a:	2301      	movs	r3, #1
   1fc9c:	4013      	ands	r3, r2
   1fc9e:	0a76      	lsrs	r6, r6, #9
   1fca0:	2200      	movs	r2, #0
   1fca2:	e76b      	b.n	1fb7c <__aeabi_fdiv+0x108>
   1fca4:	2680      	movs	r6, #128	; 0x80
   1fca6:	03f6      	lsls	r6, r6, #15
   1fca8:	4326      	orrs	r6, r4
   1fcaa:	0276      	lsls	r6, r6, #9
   1fcac:	0a76      	lsrs	r6, r6, #9
   1fcae:	4653      	mov	r3, sl
   1fcb0:	22ff      	movs	r2, #255	; 0xff
   1fcb2:	e763      	b.n	1fb7c <__aeabi_fdiv+0x108>
   1fcb4:	000272a0 	.word	0x000272a0
   1fcb8:	007fffff 	.word	0x007fffff
   1fcbc:	f7ffffff 	.word	0xf7ffffff

0001fcc0 <__eqsf2>:
   1fcc0:	024a      	lsls	r2, r1, #9
   1fcc2:	0243      	lsls	r3, r0, #9
   1fcc4:	b570      	push	{r4, r5, r6, lr}
   1fcc6:	0a5c      	lsrs	r4, r3, #9
   1fcc8:	0a55      	lsrs	r5, r2, #9
   1fcca:	0043      	lsls	r3, r0, #1
   1fccc:	004a      	lsls	r2, r1, #1
   1fcce:	0e1b      	lsrs	r3, r3, #24
   1fcd0:	0fc6      	lsrs	r6, r0, #31
   1fcd2:	0e12      	lsrs	r2, r2, #24
   1fcd4:	0fc9      	lsrs	r1, r1, #31
   1fcd6:	2bff      	cmp	r3, #255	; 0xff
   1fcd8:	d005      	beq.n	1fce6 <__eqsf2+0x26>
   1fcda:	2aff      	cmp	r2, #255	; 0xff
   1fcdc:	d008      	beq.n	1fcf0 <__eqsf2+0x30>
   1fcde:	2001      	movs	r0, #1
   1fce0:	4293      	cmp	r3, r2
   1fce2:	d00b      	beq.n	1fcfc <__eqsf2+0x3c>
   1fce4:	bd70      	pop	{r4, r5, r6, pc}
   1fce6:	2001      	movs	r0, #1
   1fce8:	2c00      	cmp	r4, #0
   1fcea:	d1fb      	bne.n	1fce4 <__eqsf2+0x24>
   1fcec:	2aff      	cmp	r2, #255	; 0xff
   1fcee:	d1f6      	bne.n	1fcde <__eqsf2+0x1e>
   1fcf0:	2001      	movs	r0, #1
   1fcf2:	2d00      	cmp	r5, #0
   1fcf4:	d1f6      	bne.n	1fce4 <__eqsf2+0x24>
   1fcf6:	2001      	movs	r0, #1
   1fcf8:	4293      	cmp	r3, r2
   1fcfa:	d1f3      	bne.n	1fce4 <__eqsf2+0x24>
   1fcfc:	42ac      	cmp	r4, r5
   1fcfe:	d1f1      	bne.n	1fce4 <__eqsf2+0x24>
   1fd00:	428e      	cmp	r6, r1
   1fd02:	d003      	beq.n	1fd0c <__eqsf2+0x4c>
   1fd04:	2b00      	cmp	r3, #0
   1fd06:	d1ed      	bne.n	1fce4 <__eqsf2+0x24>
   1fd08:	2c00      	cmp	r4, #0
   1fd0a:	d1eb      	bne.n	1fce4 <__eqsf2+0x24>
   1fd0c:	2000      	movs	r0, #0
   1fd0e:	e7e9      	b.n	1fce4 <__eqsf2+0x24>

0001fd10 <__gesf2>:
   1fd10:	024a      	lsls	r2, r1, #9
   1fd12:	0243      	lsls	r3, r0, #9
   1fd14:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fd16:	0a5c      	lsrs	r4, r3, #9
   1fd18:	0a55      	lsrs	r5, r2, #9
   1fd1a:	0043      	lsls	r3, r0, #1
   1fd1c:	004a      	lsls	r2, r1, #1
   1fd1e:	0e1b      	lsrs	r3, r3, #24
   1fd20:	0fc6      	lsrs	r6, r0, #31
   1fd22:	0e12      	lsrs	r2, r2, #24
   1fd24:	0fc9      	lsrs	r1, r1, #31
   1fd26:	2bff      	cmp	r3, #255	; 0xff
   1fd28:	d026      	beq.n	1fd78 <__gesf2+0x68>
   1fd2a:	2aff      	cmp	r2, #255	; 0xff
   1fd2c:	d029      	beq.n	1fd82 <__gesf2+0x72>
   1fd2e:	2b00      	cmp	r3, #0
   1fd30:	d10c      	bne.n	1fd4c <__gesf2+0x3c>
   1fd32:	4260      	negs	r0, r4
   1fd34:	4160      	adcs	r0, r4
   1fd36:	4684      	mov	ip, r0
   1fd38:	2a00      	cmp	r2, #0
   1fd3a:	d00a      	beq.n	1fd52 <__gesf2+0x42>
   1fd3c:	2800      	cmp	r0, #0
   1fd3e:	d116      	bne.n	1fd6e <__gesf2+0x5e>
   1fd40:	428e      	cmp	r6, r1
   1fd42:	d021      	beq.n	1fd88 <__gesf2+0x78>
   1fd44:	2e00      	cmp	r6, #0
   1fd46:	d114      	bne.n	1fd72 <__gesf2+0x62>
   1fd48:	2001      	movs	r0, #1
   1fd4a:	e014      	b.n	1fd76 <__gesf2+0x66>
   1fd4c:	2a00      	cmp	r2, #0
   1fd4e:	d1f7      	bne.n	1fd40 <__gesf2+0x30>
   1fd50:	4694      	mov	ip, r2
   1fd52:	426f      	negs	r7, r5
   1fd54:	416f      	adcs	r7, r5
   1fd56:	4660      	mov	r0, ip
   1fd58:	2800      	cmp	r0, #0
   1fd5a:	d105      	bne.n	1fd68 <__gesf2+0x58>
   1fd5c:	2f00      	cmp	r7, #0
   1fd5e:	d0ef      	beq.n	1fd40 <__gesf2+0x30>
   1fd60:	2001      	movs	r0, #1
   1fd62:	2e00      	cmp	r6, #0
   1fd64:	d007      	beq.n	1fd76 <__gesf2+0x66>
   1fd66:	e004      	b.n	1fd72 <__gesf2+0x62>
   1fd68:	2000      	movs	r0, #0
   1fd6a:	2f00      	cmp	r7, #0
   1fd6c:	d103      	bne.n	1fd76 <__gesf2+0x66>
   1fd6e:	2900      	cmp	r1, #0
   1fd70:	d1ea      	bne.n	1fd48 <__gesf2+0x38>
   1fd72:	2001      	movs	r0, #1
   1fd74:	4240      	negs	r0, r0
   1fd76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fd78:	2c00      	cmp	r4, #0
   1fd7a:	d0d6      	beq.n	1fd2a <__gesf2+0x1a>
   1fd7c:	2002      	movs	r0, #2
   1fd7e:	4240      	negs	r0, r0
   1fd80:	e7f9      	b.n	1fd76 <__gesf2+0x66>
   1fd82:	2d00      	cmp	r5, #0
   1fd84:	d0d3      	beq.n	1fd2e <__gesf2+0x1e>
   1fd86:	e7f9      	b.n	1fd7c <__gesf2+0x6c>
   1fd88:	4293      	cmp	r3, r2
   1fd8a:	dcdb      	bgt.n	1fd44 <__gesf2+0x34>
   1fd8c:	db04      	blt.n	1fd98 <__gesf2+0x88>
   1fd8e:	42ac      	cmp	r4, r5
   1fd90:	d8d8      	bhi.n	1fd44 <__gesf2+0x34>
   1fd92:	2000      	movs	r0, #0
   1fd94:	42ac      	cmp	r4, r5
   1fd96:	d2ee      	bcs.n	1fd76 <__gesf2+0x66>
   1fd98:	2e00      	cmp	r6, #0
   1fd9a:	d0ea      	beq.n	1fd72 <__gesf2+0x62>
   1fd9c:	2001      	movs	r0, #1
   1fd9e:	e7ea      	b.n	1fd76 <__gesf2+0x66>

0001fda0 <__lesf2>:
   1fda0:	024a      	lsls	r2, r1, #9
   1fda2:	0243      	lsls	r3, r0, #9
   1fda4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fda6:	0a5c      	lsrs	r4, r3, #9
   1fda8:	0a55      	lsrs	r5, r2, #9
   1fdaa:	0043      	lsls	r3, r0, #1
   1fdac:	004a      	lsls	r2, r1, #1
   1fdae:	0e1b      	lsrs	r3, r3, #24
   1fdb0:	0fc6      	lsrs	r6, r0, #31
   1fdb2:	0e12      	lsrs	r2, r2, #24
   1fdb4:	0fc9      	lsrs	r1, r1, #31
   1fdb6:	2bff      	cmp	r3, #255	; 0xff
   1fdb8:	d026      	beq.n	1fe08 <__lesf2+0x68>
   1fdba:	2aff      	cmp	r2, #255	; 0xff
   1fdbc:	d028      	beq.n	1fe10 <__lesf2+0x70>
   1fdbe:	2b00      	cmp	r3, #0
   1fdc0:	d00f      	beq.n	1fde2 <__lesf2+0x42>
   1fdc2:	2a00      	cmp	r2, #0
   1fdc4:	d114      	bne.n	1fdf0 <__lesf2+0x50>
   1fdc6:	4694      	mov	ip, r2
   1fdc8:	426f      	negs	r7, r5
   1fdca:	416f      	adcs	r7, r5
   1fdcc:	4660      	mov	r0, ip
   1fdce:	2800      	cmp	r0, #0
   1fdd0:	d014      	beq.n	1fdfc <__lesf2+0x5c>
   1fdd2:	2000      	movs	r0, #0
   1fdd4:	2f00      	cmp	r7, #0
   1fdd6:	d103      	bne.n	1fde0 <__lesf2+0x40>
   1fdd8:	2900      	cmp	r1, #0
   1fdda:	d10d      	bne.n	1fdf8 <__lesf2+0x58>
   1fddc:	2001      	movs	r0, #1
   1fdde:	4240      	negs	r0, r0
   1fde0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fde2:	4260      	negs	r0, r4
   1fde4:	4160      	adcs	r0, r4
   1fde6:	4684      	mov	ip, r0
   1fde8:	2a00      	cmp	r2, #0
   1fdea:	d0ed      	beq.n	1fdc8 <__lesf2+0x28>
   1fdec:	2800      	cmp	r0, #0
   1fdee:	d1f3      	bne.n	1fdd8 <__lesf2+0x38>
   1fdf0:	428e      	cmp	r6, r1
   1fdf2:	d011      	beq.n	1fe18 <__lesf2+0x78>
   1fdf4:	2e00      	cmp	r6, #0
   1fdf6:	d1f1      	bne.n	1fddc <__lesf2+0x3c>
   1fdf8:	2001      	movs	r0, #1
   1fdfa:	e7f1      	b.n	1fde0 <__lesf2+0x40>
   1fdfc:	2f00      	cmp	r7, #0
   1fdfe:	d0f7      	beq.n	1fdf0 <__lesf2+0x50>
   1fe00:	2001      	movs	r0, #1
   1fe02:	2e00      	cmp	r6, #0
   1fe04:	d0ec      	beq.n	1fde0 <__lesf2+0x40>
   1fe06:	e7e9      	b.n	1fddc <__lesf2+0x3c>
   1fe08:	2002      	movs	r0, #2
   1fe0a:	2c00      	cmp	r4, #0
   1fe0c:	d1e8      	bne.n	1fde0 <__lesf2+0x40>
   1fe0e:	e7d4      	b.n	1fdba <__lesf2+0x1a>
   1fe10:	2002      	movs	r0, #2
   1fe12:	2d00      	cmp	r5, #0
   1fe14:	d1e4      	bne.n	1fde0 <__lesf2+0x40>
   1fe16:	e7d2      	b.n	1fdbe <__lesf2+0x1e>
   1fe18:	4293      	cmp	r3, r2
   1fe1a:	dceb      	bgt.n	1fdf4 <__lesf2+0x54>
   1fe1c:	db04      	blt.n	1fe28 <__lesf2+0x88>
   1fe1e:	42ac      	cmp	r4, r5
   1fe20:	d8e8      	bhi.n	1fdf4 <__lesf2+0x54>
   1fe22:	2000      	movs	r0, #0
   1fe24:	42ac      	cmp	r4, r5
   1fe26:	d2db      	bcs.n	1fde0 <__lesf2+0x40>
   1fe28:	2e00      	cmp	r6, #0
   1fe2a:	d0d7      	beq.n	1fddc <__lesf2+0x3c>
   1fe2c:	2001      	movs	r0, #1
   1fe2e:	e7d7      	b.n	1fde0 <__lesf2+0x40>

0001fe30 <__aeabi_fmul>:
   1fe30:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fe32:	465f      	mov	r7, fp
   1fe34:	4656      	mov	r6, sl
   1fe36:	464d      	mov	r5, r9
   1fe38:	4644      	mov	r4, r8
   1fe3a:	b4f0      	push	{r4, r5, r6, r7}
   1fe3c:	0244      	lsls	r4, r0, #9
   1fe3e:	0046      	lsls	r6, r0, #1
   1fe40:	b083      	sub	sp, #12
   1fe42:	1c0f      	adds	r7, r1, #0
   1fe44:	0a64      	lsrs	r4, r4, #9
   1fe46:	0e36      	lsrs	r6, r6, #24
   1fe48:	0fc5      	lsrs	r5, r0, #31
   1fe4a:	2e00      	cmp	r6, #0
   1fe4c:	d041      	beq.n	1fed2 <__aeabi_fmul+0xa2>
   1fe4e:	2eff      	cmp	r6, #255	; 0xff
   1fe50:	d022      	beq.n	1fe98 <__aeabi_fmul+0x68>
   1fe52:	2380      	movs	r3, #128	; 0x80
   1fe54:	041b      	lsls	r3, r3, #16
   1fe56:	2000      	movs	r0, #0
   1fe58:	431c      	orrs	r4, r3
   1fe5a:	00e4      	lsls	r4, r4, #3
   1fe5c:	3e7f      	subs	r6, #127	; 0x7f
   1fe5e:	4682      	mov	sl, r0
   1fe60:	4680      	mov	r8, r0
   1fe62:	1c39      	adds	r1, r7, #0
   1fe64:	004b      	lsls	r3, r1, #1
   1fe66:	027f      	lsls	r7, r7, #9
   1fe68:	0fc9      	lsrs	r1, r1, #31
   1fe6a:	0a7f      	lsrs	r7, r7, #9
   1fe6c:	0e1b      	lsrs	r3, r3, #24
   1fe6e:	468b      	mov	fp, r1
   1fe70:	d03b      	beq.n	1feea <__aeabi_fmul+0xba>
   1fe72:	2bff      	cmp	r3, #255	; 0xff
   1fe74:	d034      	beq.n	1fee0 <__aeabi_fmul+0xb0>
   1fe76:	2280      	movs	r2, #128	; 0x80
   1fe78:	0412      	lsls	r2, r2, #16
   1fe7a:	4317      	orrs	r7, r2
   1fe7c:	00ff      	lsls	r7, r7, #3
   1fe7e:	3b7f      	subs	r3, #127	; 0x7f
   1fe80:	2100      	movs	r1, #0
   1fe82:	465a      	mov	r2, fp
   1fe84:	406a      	eors	r2, r5
   1fe86:	9201      	str	r2, [sp, #4]
   1fe88:	4652      	mov	r2, sl
   1fe8a:	430a      	orrs	r2, r1
   1fe8c:	2a0f      	cmp	r2, #15
   1fe8e:	d862      	bhi.n	1ff56 <__aeabi_fmul+0x126>
   1fe90:	487a      	ldr	r0, [pc, #488]	; (2007c <__aeabi_fmul+0x24c>)
   1fe92:	0092      	lsls	r2, r2, #2
   1fe94:	5882      	ldr	r2, [r0, r2]
   1fe96:	4697      	mov	pc, r2
   1fe98:	2c00      	cmp	r4, #0
   1fe9a:	d13f      	bne.n	1ff1c <__aeabi_fmul+0xec>
   1fe9c:	2208      	movs	r2, #8
   1fe9e:	2302      	movs	r3, #2
   1fea0:	4692      	mov	sl, r2
   1fea2:	4698      	mov	r8, r3
   1fea4:	e7dd      	b.n	1fe62 <__aeabi_fmul+0x32>
   1fea6:	9501      	str	r5, [sp, #4]
   1fea8:	4640      	mov	r0, r8
   1feaa:	2802      	cmp	r0, #2
   1feac:	d12a      	bne.n	1ff04 <__aeabi_fmul+0xd4>
   1feae:	9a01      	ldr	r2, [sp, #4]
   1feb0:	2501      	movs	r5, #1
   1feb2:	4015      	ands	r5, r2
   1feb4:	23ff      	movs	r3, #255	; 0xff
   1feb6:	2400      	movs	r4, #0
   1feb8:	0264      	lsls	r4, r4, #9
   1feba:	05db      	lsls	r3, r3, #23
   1febc:	0a60      	lsrs	r0, r4, #9
   1febe:	07ed      	lsls	r5, r5, #31
   1fec0:	4318      	orrs	r0, r3
   1fec2:	4328      	orrs	r0, r5
   1fec4:	b003      	add	sp, #12
   1fec6:	bc3c      	pop	{r2, r3, r4, r5}
   1fec8:	4690      	mov	r8, r2
   1feca:	4699      	mov	r9, r3
   1fecc:	46a2      	mov	sl, r4
   1fece:	46ab      	mov	fp, r5
   1fed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fed2:	2c00      	cmp	r4, #0
   1fed4:	d127      	bne.n	1ff26 <__aeabi_fmul+0xf6>
   1fed6:	2004      	movs	r0, #4
   1fed8:	2201      	movs	r2, #1
   1feda:	4682      	mov	sl, r0
   1fedc:	4690      	mov	r8, r2
   1fede:	e7c0      	b.n	1fe62 <__aeabi_fmul+0x32>
   1fee0:	1c39      	adds	r1, r7, #0
   1fee2:	1e4a      	subs	r2, r1, #1
   1fee4:	4191      	sbcs	r1, r2
   1fee6:	3102      	adds	r1, #2
   1fee8:	e7cb      	b.n	1fe82 <__aeabi_fmul+0x52>
   1feea:	2101      	movs	r1, #1
   1feec:	2f00      	cmp	r7, #0
   1feee:	d0c8      	beq.n	1fe82 <__aeabi_fmul+0x52>
   1fef0:	1c38      	adds	r0, r7, #0
   1fef2:	f002 f9eb 	bl	222cc <__clzsi2>
   1fef6:	1f43      	subs	r3, r0, #5
   1fef8:	409f      	lsls	r7, r3
   1fefa:	2376      	movs	r3, #118	; 0x76
   1fefc:	425b      	negs	r3, r3
   1fefe:	1a1b      	subs	r3, r3, r0
   1ff00:	2100      	movs	r1, #0
   1ff02:	e7be      	b.n	1fe82 <__aeabi_fmul+0x52>
   1ff04:	2803      	cmp	r0, #3
   1ff06:	d100      	bne.n	1ff0a <__aeabi_fmul+0xda>
   1ff08:	e0ad      	b.n	20066 <__aeabi_fmul+0x236>
   1ff0a:	2801      	cmp	r0, #1
   1ff0c:	d14e      	bne.n	1ffac <__aeabi_fmul+0x17c>
   1ff0e:	9801      	ldr	r0, [sp, #4]
   1ff10:	4642      	mov	r2, r8
   1ff12:	4010      	ands	r0, r2
   1ff14:	b2c5      	uxtb	r5, r0
   1ff16:	2300      	movs	r3, #0
   1ff18:	2400      	movs	r4, #0
   1ff1a:	e7cd      	b.n	1feb8 <__aeabi_fmul+0x88>
   1ff1c:	230c      	movs	r3, #12
   1ff1e:	2003      	movs	r0, #3
   1ff20:	469a      	mov	sl, r3
   1ff22:	4680      	mov	r8, r0
   1ff24:	e79d      	b.n	1fe62 <__aeabi_fmul+0x32>
   1ff26:	1c20      	adds	r0, r4, #0
   1ff28:	f002 f9d0 	bl	222cc <__clzsi2>
   1ff2c:	2676      	movs	r6, #118	; 0x76
   1ff2e:	1f43      	subs	r3, r0, #5
   1ff30:	409c      	lsls	r4, r3
   1ff32:	4276      	negs	r6, r6
   1ff34:	2300      	movs	r3, #0
   1ff36:	1a36      	subs	r6, r6, r0
   1ff38:	469a      	mov	sl, r3
   1ff3a:	4698      	mov	r8, r3
   1ff3c:	e791      	b.n	1fe62 <__aeabi_fmul+0x32>
   1ff3e:	2500      	movs	r5, #0
   1ff40:	4c4f      	ldr	r4, [pc, #316]	; (20080 <__aeabi_fmul+0x250>)
   1ff42:	23ff      	movs	r3, #255	; 0xff
   1ff44:	e7b8      	b.n	1feb8 <__aeabi_fmul+0x88>
   1ff46:	465b      	mov	r3, fp
   1ff48:	1c3c      	adds	r4, r7, #0
   1ff4a:	9301      	str	r3, [sp, #4]
   1ff4c:	4688      	mov	r8, r1
   1ff4e:	e7ab      	b.n	1fea8 <__aeabi_fmul+0x78>
   1ff50:	1c3c      	adds	r4, r7, #0
   1ff52:	4688      	mov	r8, r1
   1ff54:	e7a8      	b.n	1fea8 <__aeabi_fmul+0x78>
   1ff56:	0c25      	lsrs	r5, r4, #16
   1ff58:	0424      	lsls	r4, r4, #16
   1ff5a:	0c3a      	lsrs	r2, r7, #16
   1ff5c:	0c24      	lsrs	r4, r4, #16
   1ff5e:	043f      	lsls	r7, r7, #16
   1ff60:	18f6      	adds	r6, r6, r3
   1ff62:	0c3f      	lsrs	r7, r7, #16
   1ff64:	1c21      	adds	r1, r4, #0
   1ff66:	1c23      	adds	r3, r4, #0
   1ff68:	4379      	muls	r1, r7
   1ff6a:	4353      	muls	r3, r2
   1ff6c:	436f      	muls	r7, r5
   1ff6e:	4355      	muls	r5, r2
   1ff70:	18fb      	adds	r3, r7, r3
   1ff72:	0c0a      	lsrs	r2, r1, #16
   1ff74:	189b      	adds	r3, r3, r2
   1ff76:	46b1      	mov	r9, r6
   1ff78:	429f      	cmp	r7, r3
   1ff7a:	d902      	bls.n	1ff82 <__aeabi_fmul+0x152>
   1ff7c:	2280      	movs	r2, #128	; 0x80
   1ff7e:	0252      	lsls	r2, r2, #9
   1ff80:	18ad      	adds	r5, r5, r2
   1ff82:	0409      	lsls	r1, r1, #16
   1ff84:	041a      	lsls	r2, r3, #16
   1ff86:	0c09      	lsrs	r1, r1, #16
   1ff88:	1852      	adds	r2, r2, r1
   1ff8a:	0194      	lsls	r4, r2, #6
   1ff8c:	0c1b      	lsrs	r3, r3, #16
   1ff8e:	1e61      	subs	r1, r4, #1
   1ff90:	418c      	sbcs	r4, r1
   1ff92:	0e92      	lsrs	r2, r2, #26
   1ff94:	18ed      	adds	r5, r5, r3
   1ff96:	4314      	orrs	r4, r2
   1ff98:	01ad      	lsls	r5, r5, #6
   1ff9a:	432c      	orrs	r4, r5
   1ff9c:	0123      	lsls	r3, r4, #4
   1ff9e:	d505      	bpl.n	1ffac <__aeabi_fmul+0x17c>
   1ffa0:	2201      	movs	r2, #1
   1ffa2:	0863      	lsrs	r3, r4, #1
   1ffa4:	2001      	movs	r0, #1
   1ffa6:	4014      	ands	r4, r2
   1ffa8:	4481      	add	r9, r0
   1ffaa:	431c      	orrs	r4, r3
   1ffac:	464b      	mov	r3, r9
   1ffae:	337f      	adds	r3, #127	; 0x7f
   1ffb0:	2b00      	cmp	r3, #0
   1ffb2:	dd2d      	ble.n	20010 <__aeabi_fmul+0x1e0>
   1ffb4:	0760      	lsls	r0, r4, #29
   1ffb6:	d004      	beq.n	1ffc2 <__aeabi_fmul+0x192>
   1ffb8:	220f      	movs	r2, #15
   1ffba:	4022      	ands	r2, r4
   1ffbc:	2a04      	cmp	r2, #4
   1ffbe:	d000      	beq.n	1ffc2 <__aeabi_fmul+0x192>
   1ffc0:	3404      	adds	r4, #4
   1ffc2:	0122      	lsls	r2, r4, #4
   1ffc4:	d503      	bpl.n	1ffce <__aeabi_fmul+0x19e>
   1ffc6:	4b2f      	ldr	r3, [pc, #188]	; (20084 <__aeabi_fmul+0x254>)
   1ffc8:	401c      	ands	r4, r3
   1ffca:	464b      	mov	r3, r9
   1ffcc:	3380      	adds	r3, #128	; 0x80
   1ffce:	2bfe      	cmp	r3, #254	; 0xfe
   1ffd0:	dd17      	ble.n	20002 <__aeabi_fmul+0x1d2>
   1ffd2:	9b01      	ldr	r3, [sp, #4]
   1ffd4:	2501      	movs	r5, #1
   1ffd6:	401d      	ands	r5, r3
   1ffd8:	2400      	movs	r4, #0
   1ffda:	23ff      	movs	r3, #255	; 0xff
   1ffdc:	e76c      	b.n	1feb8 <__aeabi_fmul+0x88>
   1ffde:	2080      	movs	r0, #128	; 0x80
   1ffe0:	03c0      	lsls	r0, r0, #15
   1ffe2:	4204      	tst	r4, r0
   1ffe4:	d008      	beq.n	1fff8 <__aeabi_fmul+0x1c8>
   1ffe6:	4207      	tst	r7, r0
   1ffe8:	d106      	bne.n	1fff8 <__aeabi_fmul+0x1c8>
   1ffea:	1c04      	adds	r4, r0, #0
   1ffec:	433c      	orrs	r4, r7
   1ffee:	0264      	lsls	r4, r4, #9
   1fff0:	0a64      	lsrs	r4, r4, #9
   1fff2:	465d      	mov	r5, fp
   1fff4:	23ff      	movs	r3, #255	; 0xff
   1fff6:	e75f      	b.n	1feb8 <__aeabi_fmul+0x88>
   1fff8:	4304      	orrs	r4, r0
   1fffa:	0264      	lsls	r4, r4, #9
   1fffc:	0a64      	lsrs	r4, r4, #9
   1fffe:	23ff      	movs	r3, #255	; 0xff
   20000:	e75a      	b.n	1feb8 <__aeabi_fmul+0x88>
   20002:	9801      	ldr	r0, [sp, #4]
   20004:	01a4      	lsls	r4, r4, #6
   20006:	2501      	movs	r5, #1
   20008:	0a64      	lsrs	r4, r4, #9
   2000a:	b2db      	uxtb	r3, r3
   2000c:	4005      	ands	r5, r0
   2000e:	e753      	b.n	1feb8 <__aeabi_fmul+0x88>
   20010:	237e      	movs	r3, #126	; 0x7e
   20012:	425b      	negs	r3, r3
   20014:	464a      	mov	r2, r9
   20016:	1a9b      	subs	r3, r3, r2
   20018:	2b1b      	cmp	r3, #27
   2001a:	dd05      	ble.n	20028 <__aeabi_fmul+0x1f8>
   2001c:	9b01      	ldr	r3, [sp, #4]
   2001e:	2501      	movs	r5, #1
   20020:	401d      	ands	r5, r3
   20022:	2400      	movs	r4, #0
   20024:	2300      	movs	r3, #0
   20026:	e747      	b.n	1feb8 <__aeabi_fmul+0x88>
   20028:	1c22      	adds	r2, r4, #0
   2002a:	40da      	lsrs	r2, r3
   2002c:	464b      	mov	r3, r9
   2002e:	339e      	adds	r3, #158	; 0x9e
   20030:	409c      	lsls	r4, r3
   20032:	1c23      	adds	r3, r4, #0
   20034:	1e5c      	subs	r4, r3, #1
   20036:	41a3      	sbcs	r3, r4
   20038:	4313      	orrs	r3, r2
   2003a:	0758      	lsls	r0, r3, #29
   2003c:	d004      	beq.n	20048 <__aeabi_fmul+0x218>
   2003e:	220f      	movs	r2, #15
   20040:	401a      	ands	r2, r3
   20042:	2a04      	cmp	r2, #4
   20044:	d000      	beq.n	20048 <__aeabi_fmul+0x218>
   20046:	3304      	adds	r3, #4
   20048:	015a      	lsls	r2, r3, #5
   2004a:	d505      	bpl.n	20058 <__aeabi_fmul+0x228>
   2004c:	9b01      	ldr	r3, [sp, #4]
   2004e:	2501      	movs	r5, #1
   20050:	401d      	ands	r5, r3
   20052:	2400      	movs	r4, #0
   20054:	2301      	movs	r3, #1
   20056:	e72f      	b.n	1feb8 <__aeabi_fmul+0x88>
   20058:	9801      	ldr	r0, [sp, #4]
   2005a:	019c      	lsls	r4, r3, #6
   2005c:	2501      	movs	r5, #1
   2005e:	0a64      	lsrs	r4, r4, #9
   20060:	4005      	ands	r5, r0
   20062:	2300      	movs	r3, #0
   20064:	e728      	b.n	1feb8 <__aeabi_fmul+0x88>
   20066:	2780      	movs	r7, #128	; 0x80
   20068:	03ff      	lsls	r7, r7, #15
   2006a:	9b01      	ldr	r3, [sp, #4]
   2006c:	433c      	orrs	r4, r7
   2006e:	0264      	lsls	r4, r4, #9
   20070:	2501      	movs	r5, #1
   20072:	401d      	ands	r5, r3
   20074:	0a64      	lsrs	r4, r4, #9
   20076:	23ff      	movs	r3, #255	; 0xff
   20078:	e71e      	b.n	1feb8 <__aeabi_fmul+0x88>
   2007a:	46c0      	nop			; (mov r8, r8)
   2007c:	000272e0 	.word	0x000272e0
   20080:	007fffff 	.word	0x007fffff
   20084:	f7ffffff 	.word	0xf7ffffff

00020088 <__aeabi_fsub>:
   20088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2008a:	0fc2      	lsrs	r2, r0, #31
   2008c:	0243      	lsls	r3, r0, #9
   2008e:	0044      	lsls	r4, r0, #1
   20090:	024d      	lsls	r5, r1, #9
   20092:	0048      	lsls	r0, r1, #1
   20094:	0e24      	lsrs	r4, r4, #24
   20096:	1c16      	adds	r6, r2, #0
   20098:	099b      	lsrs	r3, r3, #6
   2009a:	0e00      	lsrs	r0, r0, #24
   2009c:	0fc9      	lsrs	r1, r1, #31
   2009e:	09ad      	lsrs	r5, r5, #6
   200a0:	28ff      	cmp	r0, #255	; 0xff
   200a2:	d100      	bne.n	200a6 <__aeabi_fsub+0x1e>
   200a4:	e083      	b.n	201ae <__aeabi_fsub+0x126>
   200a6:	2701      	movs	r7, #1
   200a8:	4079      	eors	r1, r7
   200aa:	428a      	cmp	r2, r1
   200ac:	d05c      	beq.n	20168 <__aeabi_fsub+0xe0>
   200ae:	1a22      	subs	r2, r4, r0
   200b0:	2a00      	cmp	r2, #0
   200b2:	dc00      	bgt.n	200b6 <__aeabi_fsub+0x2e>
   200b4:	e08e      	b.n	201d4 <__aeabi_fsub+0x14c>
   200b6:	2800      	cmp	r0, #0
   200b8:	d11e      	bne.n	200f8 <__aeabi_fsub+0x70>
   200ba:	2d00      	cmp	r5, #0
   200bc:	d000      	beq.n	200c0 <__aeabi_fsub+0x38>
   200be:	e07a      	b.n	201b6 <__aeabi_fsub+0x12e>
   200c0:	0758      	lsls	r0, r3, #29
   200c2:	d004      	beq.n	200ce <__aeabi_fsub+0x46>
   200c4:	220f      	movs	r2, #15
   200c6:	401a      	ands	r2, r3
   200c8:	2a04      	cmp	r2, #4
   200ca:	d000      	beq.n	200ce <__aeabi_fsub+0x46>
   200cc:	3304      	adds	r3, #4
   200ce:	2180      	movs	r1, #128	; 0x80
   200d0:	04c9      	lsls	r1, r1, #19
   200d2:	2201      	movs	r2, #1
   200d4:	4019      	ands	r1, r3
   200d6:	4032      	ands	r2, r6
   200d8:	2900      	cmp	r1, #0
   200da:	d03a      	beq.n	20152 <__aeabi_fsub+0xca>
   200dc:	3401      	adds	r4, #1
   200de:	2cff      	cmp	r4, #255	; 0xff
   200e0:	d100      	bne.n	200e4 <__aeabi_fsub+0x5c>
   200e2:	e083      	b.n	201ec <__aeabi_fsub+0x164>
   200e4:	019b      	lsls	r3, r3, #6
   200e6:	0a5b      	lsrs	r3, r3, #9
   200e8:	025b      	lsls	r3, r3, #9
   200ea:	b2e4      	uxtb	r4, r4
   200ec:	05e4      	lsls	r4, r4, #23
   200ee:	0a58      	lsrs	r0, r3, #9
   200f0:	07d2      	lsls	r2, r2, #31
   200f2:	4320      	orrs	r0, r4
   200f4:	4310      	orrs	r0, r2
   200f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   200f8:	2cff      	cmp	r4, #255	; 0xff
   200fa:	d0e1      	beq.n	200c0 <__aeabi_fsub+0x38>
   200fc:	2180      	movs	r1, #128	; 0x80
   200fe:	04c9      	lsls	r1, r1, #19
   20100:	430d      	orrs	r5, r1
   20102:	2a1b      	cmp	r2, #27
   20104:	dd00      	ble.n	20108 <__aeabi_fsub+0x80>
   20106:	e12f      	b.n	20368 <__aeabi_fsub+0x2e0>
   20108:	1c29      	adds	r1, r5, #0
   2010a:	2020      	movs	r0, #32
   2010c:	40d1      	lsrs	r1, r2
   2010e:	1a82      	subs	r2, r0, r2
   20110:	4095      	lsls	r5, r2
   20112:	1e6a      	subs	r2, r5, #1
   20114:	4195      	sbcs	r5, r2
   20116:	430d      	orrs	r5, r1
   20118:	1b5b      	subs	r3, r3, r5
   2011a:	0158      	lsls	r0, r3, #5
   2011c:	d5d0      	bpl.n	200c0 <__aeabi_fsub+0x38>
   2011e:	019b      	lsls	r3, r3, #6
   20120:	099f      	lsrs	r7, r3, #6
   20122:	1c38      	adds	r0, r7, #0
   20124:	f002 f8d2 	bl	222cc <__clzsi2>
   20128:	1f42      	subs	r2, r0, #5
   2012a:	4097      	lsls	r7, r2
   2012c:	4294      	cmp	r4, r2
   2012e:	dc5f      	bgt.n	201f0 <__aeabi_fsub+0x168>
   20130:	1b14      	subs	r4, r2, r4
   20132:	231f      	movs	r3, #31
   20134:	1b1b      	subs	r3, r3, r4
   20136:	1c3a      	adds	r2, r7, #0
   20138:	409f      	lsls	r7, r3
   2013a:	1c61      	adds	r1, r4, #1
   2013c:	1c3b      	adds	r3, r7, #0
   2013e:	40ca      	lsrs	r2, r1
   20140:	1e5f      	subs	r7, r3, #1
   20142:	41bb      	sbcs	r3, r7
   20144:	4313      	orrs	r3, r2
   20146:	2400      	movs	r4, #0
   20148:	e7ba      	b.n	200c0 <__aeabi_fsub+0x38>
   2014a:	1e13      	subs	r3, r2, #0
   2014c:	d1b8      	bne.n	200c0 <__aeabi_fsub+0x38>
   2014e:	2300      	movs	r3, #0
   20150:	2200      	movs	r2, #0
   20152:	08db      	lsrs	r3, r3, #3
   20154:	2cff      	cmp	r4, #255	; 0xff
   20156:	d104      	bne.n	20162 <__aeabi_fsub+0xda>
   20158:	2b00      	cmp	r3, #0
   2015a:	d047      	beq.n	201ec <__aeabi_fsub+0x164>
   2015c:	2080      	movs	r0, #128	; 0x80
   2015e:	03c0      	lsls	r0, r0, #15
   20160:	4303      	orrs	r3, r0
   20162:	025b      	lsls	r3, r3, #9
   20164:	0a5b      	lsrs	r3, r3, #9
   20166:	e7bf      	b.n	200e8 <__aeabi_fsub+0x60>
   20168:	1a21      	subs	r1, r4, r0
   2016a:	2900      	cmp	r1, #0
   2016c:	dd44      	ble.n	201f8 <__aeabi_fsub+0x170>
   2016e:	2800      	cmp	r0, #0
   20170:	d027      	beq.n	201c2 <__aeabi_fsub+0x13a>
   20172:	2cff      	cmp	r4, #255	; 0xff
   20174:	d0a4      	beq.n	200c0 <__aeabi_fsub+0x38>
   20176:	2080      	movs	r0, #128	; 0x80
   20178:	04c0      	lsls	r0, r0, #19
   2017a:	4305      	orrs	r5, r0
   2017c:	291b      	cmp	r1, #27
   2017e:	dd00      	ble.n	20182 <__aeabi_fsub+0xfa>
   20180:	e0f0      	b.n	20364 <__aeabi_fsub+0x2dc>
   20182:	1c28      	adds	r0, r5, #0
   20184:	2720      	movs	r7, #32
   20186:	40c8      	lsrs	r0, r1
   20188:	1a79      	subs	r1, r7, r1
   2018a:	408d      	lsls	r5, r1
   2018c:	1e69      	subs	r1, r5, #1
   2018e:	418d      	sbcs	r5, r1
   20190:	4305      	orrs	r5, r0
   20192:	195b      	adds	r3, r3, r5
   20194:	0159      	lsls	r1, r3, #5
   20196:	d400      	bmi.n	2019a <__aeabi_fsub+0x112>
   20198:	e792      	b.n	200c0 <__aeabi_fsub+0x38>
   2019a:	3401      	adds	r4, #1
   2019c:	2cff      	cmp	r4, #255	; 0xff
   2019e:	d059      	beq.n	20254 <__aeabi_fsub+0x1cc>
   201a0:	4972      	ldr	r1, [pc, #456]	; (2036c <__aeabi_fsub+0x2e4>)
   201a2:	2201      	movs	r2, #1
   201a4:	401a      	ands	r2, r3
   201a6:	400b      	ands	r3, r1
   201a8:	085b      	lsrs	r3, r3, #1
   201aa:	4313      	orrs	r3, r2
   201ac:	e788      	b.n	200c0 <__aeabi_fsub+0x38>
   201ae:	2d00      	cmp	r5, #0
   201b0:	d000      	beq.n	201b4 <__aeabi_fsub+0x12c>
   201b2:	e77a      	b.n	200aa <__aeabi_fsub+0x22>
   201b4:	e777      	b.n	200a6 <__aeabi_fsub+0x1e>
   201b6:	3a01      	subs	r2, #1
   201b8:	2a00      	cmp	r2, #0
   201ba:	d0ad      	beq.n	20118 <__aeabi_fsub+0x90>
   201bc:	2cff      	cmp	r4, #255	; 0xff
   201be:	d1a0      	bne.n	20102 <__aeabi_fsub+0x7a>
   201c0:	e77e      	b.n	200c0 <__aeabi_fsub+0x38>
   201c2:	2d00      	cmp	r5, #0
   201c4:	d100      	bne.n	201c8 <__aeabi_fsub+0x140>
   201c6:	e77b      	b.n	200c0 <__aeabi_fsub+0x38>
   201c8:	3901      	subs	r1, #1
   201ca:	2900      	cmp	r1, #0
   201cc:	d0e1      	beq.n	20192 <__aeabi_fsub+0x10a>
   201ce:	2cff      	cmp	r4, #255	; 0xff
   201d0:	d1d4      	bne.n	2017c <__aeabi_fsub+0xf4>
   201d2:	e775      	b.n	200c0 <__aeabi_fsub+0x38>
   201d4:	2a00      	cmp	r2, #0
   201d6:	d11b      	bne.n	20210 <__aeabi_fsub+0x188>
   201d8:	1c62      	adds	r2, r4, #1
   201da:	b2d2      	uxtb	r2, r2
   201dc:	2a01      	cmp	r2, #1
   201de:	dd4a      	ble.n	20276 <__aeabi_fsub+0x1ee>
   201e0:	1b5f      	subs	r7, r3, r5
   201e2:	017a      	lsls	r2, r7, #5
   201e4:	d523      	bpl.n	2022e <__aeabi_fsub+0x1a6>
   201e6:	1aef      	subs	r7, r5, r3
   201e8:	1c0e      	adds	r6, r1, #0
   201ea:	e79a      	b.n	20122 <__aeabi_fsub+0x9a>
   201ec:	2300      	movs	r3, #0
   201ee:	e77b      	b.n	200e8 <__aeabi_fsub+0x60>
   201f0:	4b5e      	ldr	r3, [pc, #376]	; (2036c <__aeabi_fsub+0x2e4>)
   201f2:	1aa4      	subs	r4, r4, r2
   201f4:	403b      	ands	r3, r7
   201f6:	e763      	b.n	200c0 <__aeabi_fsub+0x38>
   201f8:	2900      	cmp	r1, #0
   201fa:	d145      	bne.n	20288 <__aeabi_fsub+0x200>
   201fc:	1c61      	adds	r1, r4, #1
   201fe:	b2c8      	uxtb	r0, r1
   20200:	2801      	cmp	r0, #1
   20202:	dd29      	ble.n	20258 <__aeabi_fsub+0x1d0>
   20204:	29ff      	cmp	r1, #255	; 0xff
   20206:	d024      	beq.n	20252 <__aeabi_fsub+0x1ca>
   20208:	18eb      	adds	r3, r5, r3
   2020a:	085b      	lsrs	r3, r3, #1
   2020c:	1c0c      	adds	r4, r1, #0
   2020e:	e757      	b.n	200c0 <__aeabi_fsub+0x38>
   20210:	2c00      	cmp	r4, #0
   20212:	d013      	beq.n	2023c <__aeabi_fsub+0x1b4>
   20214:	28ff      	cmp	r0, #255	; 0xff
   20216:	d018      	beq.n	2024a <__aeabi_fsub+0x1c2>
   20218:	2480      	movs	r4, #128	; 0x80
   2021a:	04e4      	lsls	r4, r4, #19
   2021c:	4252      	negs	r2, r2
   2021e:	4323      	orrs	r3, r4
   20220:	2a1b      	cmp	r2, #27
   20222:	dd4c      	ble.n	202be <__aeabi_fsub+0x236>
   20224:	2301      	movs	r3, #1
   20226:	1aeb      	subs	r3, r5, r3
   20228:	1c04      	adds	r4, r0, #0
   2022a:	1c0e      	adds	r6, r1, #0
   2022c:	e775      	b.n	2011a <__aeabi_fsub+0x92>
   2022e:	2f00      	cmp	r7, #0
   20230:	d000      	beq.n	20234 <__aeabi_fsub+0x1ac>
   20232:	e776      	b.n	20122 <__aeabi_fsub+0x9a>
   20234:	2300      	movs	r3, #0
   20236:	2200      	movs	r2, #0
   20238:	2400      	movs	r4, #0
   2023a:	e78a      	b.n	20152 <__aeabi_fsub+0xca>
   2023c:	2b00      	cmp	r3, #0
   2023e:	d03a      	beq.n	202b6 <__aeabi_fsub+0x22e>
   20240:	43d2      	mvns	r2, r2
   20242:	2a00      	cmp	r2, #0
   20244:	d0ef      	beq.n	20226 <__aeabi_fsub+0x19e>
   20246:	28ff      	cmp	r0, #255	; 0xff
   20248:	d1ea      	bne.n	20220 <__aeabi_fsub+0x198>
   2024a:	1c2b      	adds	r3, r5, #0
   2024c:	24ff      	movs	r4, #255	; 0xff
   2024e:	1c0e      	adds	r6, r1, #0
   20250:	e736      	b.n	200c0 <__aeabi_fsub+0x38>
   20252:	24ff      	movs	r4, #255	; 0xff
   20254:	2300      	movs	r3, #0
   20256:	e77c      	b.n	20152 <__aeabi_fsub+0xca>
   20258:	2c00      	cmp	r4, #0
   2025a:	d15b      	bne.n	20314 <__aeabi_fsub+0x28c>
   2025c:	2b00      	cmp	r3, #0
   2025e:	d07f      	beq.n	20360 <__aeabi_fsub+0x2d8>
   20260:	2d00      	cmp	r5, #0
   20262:	d100      	bne.n	20266 <__aeabi_fsub+0x1de>
   20264:	e72c      	b.n	200c0 <__aeabi_fsub+0x38>
   20266:	195b      	adds	r3, r3, r5
   20268:	0158      	lsls	r0, r3, #5
   2026a:	d400      	bmi.n	2026e <__aeabi_fsub+0x1e6>
   2026c:	e728      	b.n	200c0 <__aeabi_fsub+0x38>
   2026e:	4a3f      	ldr	r2, [pc, #252]	; (2036c <__aeabi_fsub+0x2e4>)
   20270:	2401      	movs	r4, #1
   20272:	4013      	ands	r3, r2
   20274:	e724      	b.n	200c0 <__aeabi_fsub+0x38>
   20276:	2c00      	cmp	r4, #0
   20278:	d115      	bne.n	202a6 <__aeabi_fsub+0x21e>
   2027a:	2b00      	cmp	r3, #0
   2027c:	d140      	bne.n	20300 <__aeabi_fsub+0x278>
   2027e:	2d00      	cmp	r5, #0
   20280:	d062      	beq.n	20348 <__aeabi_fsub+0x2c0>
   20282:	1c2b      	adds	r3, r5, #0
   20284:	1c0e      	adds	r6, r1, #0
   20286:	e71b      	b.n	200c0 <__aeabi_fsub+0x38>
   20288:	2c00      	cmp	r4, #0
   2028a:	d121      	bne.n	202d0 <__aeabi_fsub+0x248>
   2028c:	2b00      	cmp	r3, #0
   2028e:	d054      	beq.n	2033a <__aeabi_fsub+0x2b2>
   20290:	43c9      	mvns	r1, r1
   20292:	2900      	cmp	r1, #0
   20294:	d004      	beq.n	202a0 <__aeabi_fsub+0x218>
   20296:	28ff      	cmp	r0, #255	; 0xff
   20298:	d04c      	beq.n	20334 <__aeabi_fsub+0x2ac>
   2029a:	291b      	cmp	r1, #27
   2029c:	dd57      	ble.n	2034e <__aeabi_fsub+0x2c6>
   2029e:	2301      	movs	r3, #1
   202a0:	195b      	adds	r3, r3, r5
   202a2:	1c04      	adds	r4, r0, #0
   202a4:	e776      	b.n	20194 <__aeabi_fsub+0x10c>
   202a6:	2b00      	cmp	r3, #0
   202a8:	d119      	bne.n	202de <__aeabi_fsub+0x256>
   202aa:	2d00      	cmp	r5, #0
   202ac:	d048      	beq.n	20340 <__aeabi_fsub+0x2b8>
   202ae:	1c2b      	adds	r3, r5, #0
   202b0:	1c0e      	adds	r6, r1, #0
   202b2:	24ff      	movs	r4, #255	; 0xff
   202b4:	e704      	b.n	200c0 <__aeabi_fsub+0x38>
   202b6:	1c2b      	adds	r3, r5, #0
   202b8:	1c04      	adds	r4, r0, #0
   202ba:	1c0e      	adds	r6, r1, #0
   202bc:	e700      	b.n	200c0 <__aeabi_fsub+0x38>
   202be:	1c1c      	adds	r4, r3, #0
   202c0:	2620      	movs	r6, #32
   202c2:	40d4      	lsrs	r4, r2
   202c4:	1ab2      	subs	r2, r6, r2
   202c6:	4093      	lsls	r3, r2
   202c8:	1e5a      	subs	r2, r3, #1
   202ca:	4193      	sbcs	r3, r2
   202cc:	4323      	orrs	r3, r4
   202ce:	e7aa      	b.n	20226 <__aeabi_fsub+0x19e>
   202d0:	28ff      	cmp	r0, #255	; 0xff
   202d2:	d02f      	beq.n	20334 <__aeabi_fsub+0x2ac>
   202d4:	2480      	movs	r4, #128	; 0x80
   202d6:	04e4      	lsls	r4, r4, #19
   202d8:	4249      	negs	r1, r1
   202da:	4323      	orrs	r3, r4
   202dc:	e7dd      	b.n	2029a <__aeabi_fsub+0x212>
   202de:	24ff      	movs	r4, #255	; 0xff
   202e0:	2d00      	cmp	r5, #0
   202e2:	d100      	bne.n	202e6 <__aeabi_fsub+0x25e>
   202e4:	e6ec      	b.n	200c0 <__aeabi_fsub+0x38>
   202e6:	2280      	movs	r2, #128	; 0x80
   202e8:	08db      	lsrs	r3, r3, #3
   202ea:	03d2      	lsls	r2, r2, #15
   202ec:	4213      	tst	r3, r2
   202ee:	d004      	beq.n	202fa <__aeabi_fsub+0x272>
   202f0:	08ed      	lsrs	r5, r5, #3
   202f2:	4215      	tst	r5, r2
   202f4:	d101      	bne.n	202fa <__aeabi_fsub+0x272>
   202f6:	1c2b      	adds	r3, r5, #0
   202f8:	1c0e      	adds	r6, r1, #0
   202fa:	00db      	lsls	r3, r3, #3
   202fc:	24ff      	movs	r4, #255	; 0xff
   202fe:	e6df      	b.n	200c0 <__aeabi_fsub+0x38>
   20300:	2d00      	cmp	r5, #0
   20302:	d100      	bne.n	20306 <__aeabi_fsub+0x27e>
   20304:	e6dc      	b.n	200c0 <__aeabi_fsub+0x38>
   20306:	1b5a      	subs	r2, r3, r5
   20308:	0150      	lsls	r0, r2, #5
   2030a:	d400      	bmi.n	2030e <__aeabi_fsub+0x286>
   2030c:	e71d      	b.n	2014a <__aeabi_fsub+0xc2>
   2030e:	1aeb      	subs	r3, r5, r3
   20310:	1c0e      	adds	r6, r1, #0
   20312:	e6d5      	b.n	200c0 <__aeabi_fsub+0x38>
   20314:	2b00      	cmp	r3, #0
   20316:	d00d      	beq.n	20334 <__aeabi_fsub+0x2ac>
   20318:	24ff      	movs	r4, #255	; 0xff
   2031a:	2d00      	cmp	r5, #0
   2031c:	d100      	bne.n	20320 <__aeabi_fsub+0x298>
   2031e:	e6cf      	b.n	200c0 <__aeabi_fsub+0x38>
   20320:	2280      	movs	r2, #128	; 0x80
   20322:	08db      	lsrs	r3, r3, #3
   20324:	03d2      	lsls	r2, r2, #15
   20326:	4213      	tst	r3, r2
   20328:	d0e7      	beq.n	202fa <__aeabi_fsub+0x272>
   2032a:	08ed      	lsrs	r5, r5, #3
   2032c:	4215      	tst	r5, r2
   2032e:	d1e4      	bne.n	202fa <__aeabi_fsub+0x272>
   20330:	1c2b      	adds	r3, r5, #0
   20332:	e7e2      	b.n	202fa <__aeabi_fsub+0x272>
   20334:	1c2b      	adds	r3, r5, #0
   20336:	24ff      	movs	r4, #255	; 0xff
   20338:	e6c2      	b.n	200c0 <__aeabi_fsub+0x38>
   2033a:	1c2b      	adds	r3, r5, #0
   2033c:	1c04      	adds	r4, r0, #0
   2033e:	e6bf      	b.n	200c0 <__aeabi_fsub+0x38>
   20340:	2200      	movs	r2, #0
   20342:	4b0b      	ldr	r3, [pc, #44]	; (20370 <__aeabi_fsub+0x2e8>)
   20344:	24ff      	movs	r4, #255	; 0xff
   20346:	e704      	b.n	20152 <__aeabi_fsub+0xca>
   20348:	1c23      	adds	r3, r4, #0
   2034a:	2200      	movs	r2, #0
   2034c:	e701      	b.n	20152 <__aeabi_fsub+0xca>
   2034e:	1c1c      	adds	r4, r3, #0
   20350:	2720      	movs	r7, #32
   20352:	40cc      	lsrs	r4, r1
   20354:	1a79      	subs	r1, r7, r1
   20356:	408b      	lsls	r3, r1
   20358:	1e59      	subs	r1, r3, #1
   2035a:	418b      	sbcs	r3, r1
   2035c:	4323      	orrs	r3, r4
   2035e:	e79f      	b.n	202a0 <__aeabi_fsub+0x218>
   20360:	1c2b      	adds	r3, r5, #0
   20362:	e6ad      	b.n	200c0 <__aeabi_fsub+0x38>
   20364:	2501      	movs	r5, #1
   20366:	e714      	b.n	20192 <__aeabi_fsub+0x10a>
   20368:	2501      	movs	r5, #1
   2036a:	e6d5      	b.n	20118 <__aeabi_fsub+0x90>
   2036c:	fbffffff 	.word	0xfbffffff
   20370:	03fffff8 	.word	0x03fffff8

00020374 <__aeabi_f2iz>:
   20374:	0243      	lsls	r3, r0, #9
   20376:	0a59      	lsrs	r1, r3, #9
   20378:	0043      	lsls	r3, r0, #1
   2037a:	0fc2      	lsrs	r2, r0, #31
   2037c:	0e1b      	lsrs	r3, r3, #24
   2037e:	2000      	movs	r0, #0
   20380:	2b7e      	cmp	r3, #126	; 0x7e
   20382:	dd0d      	ble.n	203a0 <__aeabi_f2iz+0x2c>
   20384:	2b9d      	cmp	r3, #157	; 0x9d
   20386:	dc0c      	bgt.n	203a2 <__aeabi_f2iz+0x2e>
   20388:	2080      	movs	r0, #128	; 0x80
   2038a:	0400      	lsls	r0, r0, #16
   2038c:	4301      	orrs	r1, r0
   2038e:	2b95      	cmp	r3, #149	; 0x95
   20390:	dc0a      	bgt.n	203a8 <__aeabi_f2iz+0x34>
   20392:	2096      	movs	r0, #150	; 0x96
   20394:	1ac3      	subs	r3, r0, r3
   20396:	40d9      	lsrs	r1, r3
   20398:	4248      	negs	r0, r1
   2039a:	2a00      	cmp	r2, #0
   2039c:	d100      	bne.n	203a0 <__aeabi_f2iz+0x2c>
   2039e:	1c08      	adds	r0, r1, #0
   203a0:	4770      	bx	lr
   203a2:	4b03      	ldr	r3, [pc, #12]	; (203b0 <__aeabi_f2iz+0x3c>)
   203a4:	18d0      	adds	r0, r2, r3
   203a6:	e7fb      	b.n	203a0 <__aeabi_f2iz+0x2c>
   203a8:	3b96      	subs	r3, #150	; 0x96
   203aa:	4099      	lsls	r1, r3
   203ac:	e7f4      	b.n	20398 <__aeabi_f2iz+0x24>
   203ae:	46c0      	nop			; (mov r8, r8)
   203b0:	7fffffff 	.word	0x7fffffff

000203b4 <__aeabi_i2f>:
   203b4:	b570      	push	{r4, r5, r6, lr}
   203b6:	1e04      	subs	r4, r0, #0
   203b8:	d03c      	beq.n	20434 <__aeabi_i2f+0x80>
   203ba:	0fc6      	lsrs	r6, r0, #31
   203bc:	d000      	beq.n	203c0 <__aeabi_i2f+0xc>
   203be:	4244      	negs	r4, r0
   203c0:	1c20      	adds	r0, r4, #0
   203c2:	f001 ff83 	bl	222cc <__clzsi2>
   203c6:	239e      	movs	r3, #158	; 0x9e
   203c8:	1c25      	adds	r5, r4, #0
   203ca:	1a1b      	subs	r3, r3, r0
   203cc:	2b96      	cmp	r3, #150	; 0x96
   203ce:	dc0c      	bgt.n	203ea <__aeabi_i2f+0x36>
   203d0:	3808      	subs	r0, #8
   203d2:	4084      	lsls	r4, r0
   203d4:	0264      	lsls	r4, r4, #9
   203d6:	0a64      	lsrs	r4, r4, #9
   203d8:	b2db      	uxtb	r3, r3
   203da:	1c32      	adds	r2, r6, #0
   203dc:	0264      	lsls	r4, r4, #9
   203de:	05db      	lsls	r3, r3, #23
   203e0:	0a60      	lsrs	r0, r4, #9
   203e2:	07d2      	lsls	r2, r2, #31
   203e4:	4318      	orrs	r0, r3
   203e6:	4310      	orrs	r0, r2
   203e8:	bd70      	pop	{r4, r5, r6, pc}
   203ea:	2b99      	cmp	r3, #153	; 0x99
   203ec:	dd0a      	ble.n	20404 <__aeabi_i2f+0x50>
   203ee:	2205      	movs	r2, #5
   203f0:	1a12      	subs	r2, r2, r0
   203f2:	1c21      	adds	r1, r4, #0
   203f4:	40d1      	lsrs	r1, r2
   203f6:	1c0a      	adds	r2, r1, #0
   203f8:	1c01      	adds	r1, r0, #0
   203fa:	311b      	adds	r1, #27
   203fc:	408d      	lsls	r5, r1
   203fe:	1e69      	subs	r1, r5, #1
   20400:	418d      	sbcs	r5, r1
   20402:	4315      	orrs	r5, r2
   20404:	2805      	cmp	r0, #5
   20406:	dd01      	ble.n	2040c <__aeabi_i2f+0x58>
   20408:	1f42      	subs	r2, r0, #5
   2040a:	4095      	lsls	r5, r2
   2040c:	4c16      	ldr	r4, [pc, #88]	; (20468 <__aeabi_i2f+0xb4>)
   2040e:	402c      	ands	r4, r5
   20410:	076a      	lsls	r2, r5, #29
   20412:	d004      	beq.n	2041e <__aeabi_i2f+0x6a>
   20414:	220f      	movs	r2, #15
   20416:	4015      	ands	r5, r2
   20418:	2d04      	cmp	r5, #4
   2041a:	d000      	beq.n	2041e <__aeabi_i2f+0x6a>
   2041c:	3404      	adds	r4, #4
   2041e:	0161      	lsls	r1, r4, #5
   20420:	d50c      	bpl.n	2043c <__aeabi_i2f+0x88>
   20422:	239f      	movs	r3, #159	; 0x9f
   20424:	1a18      	subs	r0, r3, r0
   20426:	28ff      	cmp	r0, #255	; 0xff
   20428:	d01a      	beq.n	20460 <__aeabi_i2f+0xac>
   2042a:	01a4      	lsls	r4, r4, #6
   2042c:	0a64      	lsrs	r4, r4, #9
   2042e:	b2c3      	uxtb	r3, r0
   20430:	1c32      	adds	r2, r6, #0
   20432:	e7d3      	b.n	203dc <__aeabi_i2f+0x28>
   20434:	2200      	movs	r2, #0
   20436:	2300      	movs	r3, #0
   20438:	2400      	movs	r4, #0
   2043a:	e7cf      	b.n	203dc <__aeabi_i2f+0x28>
   2043c:	08e4      	lsrs	r4, r4, #3
   2043e:	2bff      	cmp	r3, #255	; 0xff
   20440:	d004      	beq.n	2044c <__aeabi_i2f+0x98>
   20442:	0264      	lsls	r4, r4, #9
   20444:	0a64      	lsrs	r4, r4, #9
   20446:	b2db      	uxtb	r3, r3
   20448:	1c32      	adds	r2, r6, #0
   2044a:	e7c7      	b.n	203dc <__aeabi_i2f+0x28>
   2044c:	2c00      	cmp	r4, #0
   2044e:	d004      	beq.n	2045a <__aeabi_i2f+0xa6>
   20450:	2080      	movs	r0, #128	; 0x80
   20452:	03c0      	lsls	r0, r0, #15
   20454:	4304      	orrs	r4, r0
   20456:	0264      	lsls	r4, r4, #9
   20458:	0a64      	lsrs	r4, r4, #9
   2045a:	1c32      	adds	r2, r6, #0
   2045c:	23ff      	movs	r3, #255	; 0xff
   2045e:	e7bd      	b.n	203dc <__aeabi_i2f+0x28>
   20460:	1c32      	adds	r2, r6, #0
   20462:	23ff      	movs	r3, #255	; 0xff
   20464:	2400      	movs	r4, #0
   20466:	e7b9      	b.n	203dc <__aeabi_i2f+0x28>
   20468:	fbffffff 	.word	0xfbffffff

0002046c <__aeabi_ui2f>:
   2046c:	b510      	push	{r4, lr}
   2046e:	1e04      	subs	r4, r0, #0
   20470:	d033      	beq.n	204da <__aeabi_ui2f+0x6e>
   20472:	f001 ff2b 	bl	222cc <__clzsi2>
   20476:	239e      	movs	r3, #158	; 0x9e
   20478:	1a1b      	subs	r3, r3, r0
   2047a:	2b96      	cmp	r3, #150	; 0x96
   2047c:	dc09      	bgt.n	20492 <__aeabi_ui2f+0x26>
   2047e:	3808      	subs	r0, #8
   20480:	4084      	lsls	r4, r0
   20482:	0264      	lsls	r4, r4, #9
   20484:	0a64      	lsrs	r4, r4, #9
   20486:	b2db      	uxtb	r3, r3
   20488:	0264      	lsls	r4, r4, #9
   2048a:	05db      	lsls	r3, r3, #23
   2048c:	0a60      	lsrs	r0, r4, #9
   2048e:	4318      	orrs	r0, r3
   20490:	bd10      	pop	{r4, pc}
   20492:	2b99      	cmp	r3, #153	; 0x99
   20494:	dd0a      	ble.n	204ac <__aeabi_ui2f+0x40>
   20496:	2205      	movs	r2, #5
   20498:	1a12      	subs	r2, r2, r0
   2049a:	1c21      	adds	r1, r4, #0
   2049c:	40d1      	lsrs	r1, r2
   2049e:	1c0a      	adds	r2, r1, #0
   204a0:	1c01      	adds	r1, r0, #0
   204a2:	311b      	adds	r1, #27
   204a4:	408c      	lsls	r4, r1
   204a6:	1e61      	subs	r1, r4, #1
   204a8:	418c      	sbcs	r4, r1
   204aa:	4314      	orrs	r4, r2
   204ac:	2805      	cmp	r0, #5
   204ae:	dd01      	ble.n	204b4 <__aeabi_ui2f+0x48>
   204b0:	1f42      	subs	r2, r0, #5
   204b2:	4094      	lsls	r4, r2
   204b4:	4a14      	ldr	r2, [pc, #80]	; (20508 <__aeabi_ui2f+0x9c>)
   204b6:	4022      	ands	r2, r4
   204b8:	0761      	lsls	r1, r4, #29
   204ba:	d004      	beq.n	204c6 <__aeabi_ui2f+0x5a>
   204bc:	210f      	movs	r1, #15
   204be:	400c      	ands	r4, r1
   204c0:	2c04      	cmp	r4, #4
   204c2:	d000      	beq.n	204c6 <__aeabi_ui2f+0x5a>
   204c4:	3204      	adds	r2, #4
   204c6:	0151      	lsls	r1, r2, #5
   204c8:	d50a      	bpl.n	204e0 <__aeabi_ui2f+0x74>
   204ca:	239f      	movs	r3, #159	; 0x9f
   204cc:	1a18      	subs	r0, r3, r0
   204ce:	28ff      	cmp	r0, #255	; 0xff
   204d0:	d016      	beq.n	20500 <__aeabi_ui2f+0x94>
   204d2:	0194      	lsls	r4, r2, #6
   204d4:	0a64      	lsrs	r4, r4, #9
   204d6:	b2c3      	uxtb	r3, r0
   204d8:	e7d6      	b.n	20488 <__aeabi_ui2f+0x1c>
   204da:	2300      	movs	r3, #0
   204dc:	2400      	movs	r4, #0
   204de:	e7d3      	b.n	20488 <__aeabi_ui2f+0x1c>
   204e0:	08d2      	lsrs	r2, r2, #3
   204e2:	2bff      	cmp	r3, #255	; 0xff
   204e4:	d003      	beq.n	204ee <__aeabi_ui2f+0x82>
   204e6:	0254      	lsls	r4, r2, #9
   204e8:	0a64      	lsrs	r4, r4, #9
   204ea:	b2db      	uxtb	r3, r3
   204ec:	e7cc      	b.n	20488 <__aeabi_ui2f+0x1c>
   204ee:	2a00      	cmp	r2, #0
   204f0:	d006      	beq.n	20500 <__aeabi_ui2f+0x94>
   204f2:	2480      	movs	r4, #128	; 0x80
   204f4:	03e4      	lsls	r4, r4, #15
   204f6:	4314      	orrs	r4, r2
   204f8:	0264      	lsls	r4, r4, #9
   204fa:	0a64      	lsrs	r4, r4, #9
   204fc:	23ff      	movs	r3, #255	; 0xff
   204fe:	e7c3      	b.n	20488 <__aeabi_ui2f+0x1c>
   20500:	23ff      	movs	r3, #255	; 0xff
   20502:	2400      	movs	r4, #0
   20504:	e7c0      	b.n	20488 <__aeabi_ui2f+0x1c>
   20506:	46c0      	nop			; (mov r8, r8)
   20508:	fbffffff 	.word	0xfbffffff

0002050c <__aeabi_dadd>:
   2050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2050e:	465f      	mov	r7, fp
   20510:	4656      	mov	r6, sl
   20512:	4644      	mov	r4, r8
   20514:	464d      	mov	r5, r9
   20516:	b4f0      	push	{r4, r5, r6, r7}
   20518:	030c      	lsls	r4, r1, #12
   2051a:	004d      	lsls	r5, r1, #1
   2051c:	0fce      	lsrs	r6, r1, #31
   2051e:	0a61      	lsrs	r1, r4, #9
   20520:	0f44      	lsrs	r4, r0, #29
   20522:	4321      	orrs	r1, r4
   20524:	00c4      	lsls	r4, r0, #3
   20526:	0318      	lsls	r0, r3, #12
   20528:	4680      	mov	r8, r0
   2052a:	0058      	lsls	r0, r3, #1
   2052c:	0d40      	lsrs	r0, r0, #21
   2052e:	4682      	mov	sl, r0
   20530:	0fd8      	lsrs	r0, r3, #31
   20532:	4684      	mov	ip, r0
   20534:	4640      	mov	r0, r8
   20536:	0a40      	lsrs	r0, r0, #9
   20538:	0f53      	lsrs	r3, r2, #29
   2053a:	4303      	orrs	r3, r0
   2053c:	00d0      	lsls	r0, r2, #3
   2053e:	0d6d      	lsrs	r5, r5, #21
   20540:	1c37      	adds	r7, r6, #0
   20542:	4683      	mov	fp, r0
   20544:	4652      	mov	r2, sl
   20546:	4566      	cmp	r6, ip
   20548:	d100      	bne.n	2054c <__aeabi_dadd+0x40>
   2054a:	e0a4      	b.n	20696 <__aeabi_dadd+0x18a>
   2054c:	1aaf      	subs	r7, r5, r2
   2054e:	2f00      	cmp	r7, #0
   20550:	dc00      	bgt.n	20554 <__aeabi_dadd+0x48>
   20552:	e109      	b.n	20768 <__aeabi_dadd+0x25c>
   20554:	2a00      	cmp	r2, #0
   20556:	d13b      	bne.n	205d0 <__aeabi_dadd+0xc4>
   20558:	4318      	orrs	r0, r3
   2055a:	d000      	beq.n	2055e <__aeabi_dadd+0x52>
   2055c:	e0ea      	b.n	20734 <__aeabi_dadd+0x228>
   2055e:	0763      	lsls	r3, r4, #29
   20560:	d100      	bne.n	20564 <__aeabi_dadd+0x58>
   20562:	e087      	b.n	20674 <__aeabi_dadd+0x168>
   20564:	230f      	movs	r3, #15
   20566:	4023      	ands	r3, r4
   20568:	2b04      	cmp	r3, #4
   2056a:	d100      	bne.n	2056e <__aeabi_dadd+0x62>
   2056c:	e082      	b.n	20674 <__aeabi_dadd+0x168>
   2056e:	1d22      	adds	r2, r4, #4
   20570:	42a2      	cmp	r2, r4
   20572:	41a4      	sbcs	r4, r4
   20574:	4264      	negs	r4, r4
   20576:	2380      	movs	r3, #128	; 0x80
   20578:	1909      	adds	r1, r1, r4
   2057a:	041b      	lsls	r3, r3, #16
   2057c:	400b      	ands	r3, r1
   2057e:	1c37      	adds	r7, r6, #0
   20580:	1c14      	adds	r4, r2, #0
   20582:	2b00      	cmp	r3, #0
   20584:	d100      	bne.n	20588 <__aeabi_dadd+0x7c>
   20586:	e07c      	b.n	20682 <__aeabi_dadd+0x176>
   20588:	4bce      	ldr	r3, [pc, #824]	; (208c4 <__aeabi_dadd+0x3b8>)
   2058a:	3501      	adds	r5, #1
   2058c:	429d      	cmp	r5, r3
   2058e:	d100      	bne.n	20592 <__aeabi_dadd+0x86>
   20590:	e105      	b.n	2079e <__aeabi_dadd+0x292>
   20592:	4bcd      	ldr	r3, [pc, #820]	; (208c8 <__aeabi_dadd+0x3bc>)
   20594:	08e4      	lsrs	r4, r4, #3
   20596:	4019      	ands	r1, r3
   20598:	0748      	lsls	r0, r1, #29
   2059a:	0249      	lsls	r1, r1, #9
   2059c:	4304      	orrs	r4, r0
   2059e:	0b0b      	lsrs	r3, r1, #12
   205a0:	2000      	movs	r0, #0
   205a2:	2100      	movs	r1, #0
   205a4:	031b      	lsls	r3, r3, #12
   205a6:	0b1a      	lsrs	r2, r3, #12
   205a8:	0d0b      	lsrs	r3, r1, #20
   205aa:	056d      	lsls	r5, r5, #21
   205ac:	051b      	lsls	r3, r3, #20
   205ae:	4313      	orrs	r3, r2
   205b0:	086a      	lsrs	r2, r5, #1
   205b2:	4dc6      	ldr	r5, [pc, #792]	; (208cc <__aeabi_dadd+0x3c0>)
   205b4:	07ff      	lsls	r7, r7, #31
   205b6:	401d      	ands	r5, r3
   205b8:	4315      	orrs	r5, r2
   205ba:	006d      	lsls	r5, r5, #1
   205bc:	086d      	lsrs	r5, r5, #1
   205be:	1c29      	adds	r1, r5, #0
   205c0:	4339      	orrs	r1, r7
   205c2:	1c20      	adds	r0, r4, #0
   205c4:	bc3c      	pop	{r2, r3, r4, r5}
   205c6:	4690      	mov	r8, r2
   205c8:	4699      	mov	r9, r3
   205ca:	46a2      	mov	sl, r4
   205cc:	46ab      	mov	fp, r5
   205ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   205d0:	48bc      	ldr	r0, [pc, #752]	; (208c4 <__aeabi_dadd+0x3b8>)
   205d2:	4285      	cmp	r5, r0
   205d4:	d0c3      	beq.n	2055e <__aeabi_dadd+0x52>
   205d6:	2080      	movs	r0, #128	; 0x80
   205d8:	0400      	lsls	r0, r0, #16
   205da:	4303      	orrs	r3, r0
   205dc:	2f38      	cmp	r7, #56	; 0x38
   205de:	dd00      	ble.n	205e2 <__aeabi_dadd+0xd6>
   205e0:	e0f0      	b.n	207c4 <__aeabi_dadd+0x2b8>
   205e2:	2f1f      	cmp	r7, #31
   205e4:	dd00      	ble.n	205e8 <__aeabi_dadd+0xdc>
   205e6:	e124      	b.n	20832 <__aeabi_dadd+0x326>
   205e8:	2020      	movs	r0, #32
   205ea:	1bc0      	subs	r0, r0, r7
   205ec:	1c1a      	adds	r2, r3, #0
   205ee:	4681      	mov	r9, r0
   205f0:	4082      	lsls	r2, r0
   205f2:	4658      	mov	r0, fp
   205f4:	40f8      	lsrs	r0, r7
   205f6:	4302      	orrs	r2, r0
   205f8:	4694      	mov	ip, r2
   205fa:	4658      	mov	r0, fp
   205fc:	464a      	mov	r2, r9
   205fe:	4090      	lsls	r0, r2
   20600:	1e42      	subs	r2, r0, #1
   20602:	4190      	sbcs	r0, r2
   20604:	40fb      	lsrs	r3, r7
   20606:	4662      	mov	r2, ip
   20608:	4302      	orrs	r2, r0
   2060a:	1c1f      	adds	r7, r3, #0
   2060c:	1aa2      	subs	r2, r4, r2
   2060e:	4294      	cmp	r4, r2
   20610:	41a4      	sbcs	r4, r4
   20612:	4264      	negs	r4, r4
   20614:	1bc9      	subs	r1, r1, r7
   20616:	1b09      	subs	r1, r1, r4
   20618:	1c14      	adds	r4, r2, #0
   2061a:	020b      	lsls	r3, r1, #8
   2061c:	d59f      	bpl.n	2055e <__aeabi_dadd+0x52>
   2061e:	0249      	lsls	r1, r1, #9
   20620:	0a4f      	lsrs	r7, r1, #9
   20622:	2f00      	cmp	r7, #0
   20624:	d100      	bne.n	20628 <__aeabi_dadd+0x11c>
   20626:	e0c8      	b.n	207ba <__aeabi_dadd+0x2ae>
   20628:	1c38      	adds	r0, r7, #0
   2062a:	f001 fe4f 	bl	222cc <__clzsi2>
   2062e:	1c02      	adds	r2, r0, #0
   20630:	3a08      	subs	r2, #8
   20632:	2a1f      	cmp	r2, #31
   20634:	dd00      	ble.n	20638 <__aeabi_dadd+0x12c>
   20636:	e0b5      	b.n	207a4 <__aeabi_dadd+0x298>
   20638:	2128      	movs	r1, #40	; 0x28
   2063a:	1a09      	subs	r1, r1, r0
   2063c:	1c20      	adds	r0, r4, #0
   2063e:	4097      	lsls	r7, r2
   20640:	40c8      	lsrs	r0, r1
   20642:	4307      	orrs	r7, r0
   20644:	4094      	lsls	r4, r2
   20646:	4295      	cmp	r5, r2
   20648:	dd00      	ble.n	2064c <__aeabi_dadd+0x140>
   2064a:	e0b2      	b.n	207b2 <__aeabi_dadd+0x2a6>
   2064c:	1b55      	subs	r5, r2, r5
   2064e:	1c69      	adds	r1, r5, #1
   20650:	291f      	cmp	r1, #31
   20652:	dd00      	ble.n	20656 <__aeabi_dadd+0x14a>
   20654:	e0dc      	b.n	20810 <__aeabi_dadd+0x304>
   20656:	221f      	movs	r2, #31
   20658:	1b55      	subs	r5, r2, r5
   2065a:	1c3b      	adds	r3, r7, #0
   2065c:	1c22      	adds	r2, r4, #0
   2065e:	40ab      	lsls	r3, r5
   20660:	40ca      	lsrs	r2, r1
   20662:	40ac      	lsls	r4, r5
   20664:	1e65      	subs	r5, r4, #1
   20666:	41ac      	sbcs	r4, r5
   20668:	4313      	orrs	r3, r2
   2066a:	40cf      	lsrs	r7, r1
   2066c:	431c      	orrs	r4, r3
   2066e:	1c39      	adds	r1, r7, #0
   20670:	2500      	movs	r5, #0
   20672:	e774      	b.n	2055e <__aeabi_dadd+0x52>
   20674:	2380      	movs	r3, #128	; 0x80
   20676:	041b      	lsls	r3, r3, #16
   20678:	400b      	ands	r3, r1
   2067a:	1c37      	adds	r7, r6, #0
   2067c:	2b00      	cmp	r3, #0
   2067e:	d000      	beq.n	20682 <__aeabi_dadd+0x176>
   20680:	e782      	b.n	20588 <__aeabi_dadd+0x7c>
   20682:	4b90      	ldr	r3, [pc, #576]	; (208c4 <__aeabi_dadd+0x3b8>)
   20684:	0748      	lsls	r0, r1, #29
   20686:	08e4      	lsrs	r4, r4, #3
   20688:	4304      	orrs	r4, r0
   2068a:	08c9      	lsrs	r1, r1, #3
   2068c:	429d      	cmp	r5, r3
   2068e:	d048      	beq.n	20722 <__aeabi_dadd+0x216>
   20690:	0309      	lsls	r1, r1, #12
   20692:	0b0b      	lsrs	r3, r1, #12
   20694:	e784      	b.n	205a0 <__aeabi_dadd+0x94>
   20696:	1aaa      	subs	r2, r5, r2
   20698:	4694      	mov	ip, r2
   2069a:	2a00      	cmp	r2, #0
   2069c:	dc00      	bgt.n	206a0 <__aeabi_dadd+0x194>
   2069e:	e098      	b.n	207d2 <__aeabi_dadd+0x2c6>
   206a0:	4650      	mov	r0, sl
   206a2:	2800      	cmp	r0, #0
   206a4:	d052      	beq.n	2074c <__aeabi_dadd+0x240>
   206a6:	4887      	ldr	r0, [pc, #540]	; (208c4 <__aeabi_dadd+0x3b8>)
   206a8:	4285      	cmp	r5, r0
   206aa:	d100      	bne.n	206ae <__aeabi_dadd+0x1a2>
   206ac:	e757      	b.n	2055e <__aeabi_dadd+0x52>
   206ae:	2080      	movs	r0, #128	; 0x80
   206b0:	0400      	lsls	r0, r0, #16
   206b2:	4303      	orrs	r3, r0
   206b4:	4662      	mov	r2, ip
   206b6:	2a38      	cmp	r2, #56	; 0x38
   206b8:	dd00      	ble.n	206bc <__aeabi_dadd+0x1b0>
   206ba:	e0fc      	b.n	208b6 <__aeabi_dadd+0x3aa>
   206bc:	2a1f      	cmp	r2, #31
   206be:	dd00      	ble.n	206c2 <__aeabi_dadd+0x1b6>
   206c0:	e14a      	b.n	20958 <__aeabi_dadd+0x44c>
   206c2:	2220      	movs	r2, #32
   206c4:	4660      	mov	r0, ip
   206c6:	1a10      	subs	r0, r2, r0
   206c8:	1c1a      	adds	r2, r3, #0
   206ca:	4082      	lsls	r2, r0
   206cc:	4682      	mov	sl, r0
   206ce:	4691      	mov	r9, r2
   206d0:	4658      	mov	r0, fp
   206d2:	4662      	mov	r2, ip
   206d4:	40d0      	lsrs	r0, r2
   206d6:	464a      	mov	r2, r9
   206d8:	4302      	orrs	r2, r0
   206da:	4690      	mov	r8, r2
   206dc:	4658      	mov	r0, fp
   206de:	4652      	mov	r2, sl
   206e0:	4090      	lsls	r0, r2
   206e2:	1e42      	subs	r2, r0, #1
   206e4:	4190      	sbcs	r0, r2
   206e6:	4642      	mov	r2, r8
   206e8:	4302      	orrs	r2, r0
   206ea:	4660      	mov	r0, ip
   206ec:	40c3      	lsrs	r3, r0
   206ee:	1912      	adds	r2, r2, r4
   206f0:	42a2      	cmp	r2, r4
   206f2:	41a4      	sbcs	r4, r4
   206f4:	4264      	negs	r4, r4
   206f6:	1859      	adds	r1, r3, r1
   206f8:	1909      	adds	r1, r1, r4
   206fa:	1c14      	adds	r4, r2, #0
   206fc:	0208      	lsls	r0, r1, #8
   206fe:	d400      	bmi.n	20702 <__aeabi_dadd+0x1f6>
   20700:	e72d      	b.n	2055e <__aeabi_dadd+0x52>
   20702:	4b70      	ldr	r3, [pc, #448]	; (208c4 <__aeabi_dadd+0x3b8>)
   20704:	3501      	adds	r5, #1
   20706:	429d      	cmp	r5, r3
   20708:	d100      	bne.n	2070c <__aeabi_dadd+0x200>
   2070a:	e122      	b.n	20952 <__aeabi_dadd+0x446>
   2070c:	4b6e      	ldr	r3, [pc, #440]	; (208c8 <__aeabi_dadd+0x3bc>)
   2070e:	0860      	lsrs	r0, r4, #1
   20710:	4019      	ands	r1, r3
   20712:	2301      	movs	r3, #1
   20714:	4023      	ands	r3, r4
   20716:	1c1c      	adds	r4, r3, #0
   20718:	4304      	orrs	r4, r0
   2071a:	07cb      	lsls	r3, r1, #31
   2071c:	431c      	orrs	r4, r3
   2071e:	0849      	lsrs	r1, r1, #1
   20720:	e71d      	b.n	2055e <__aeabi_dadd+0x52>
   20722:	1c23      	adds	r3, r4, #0
   20724:	430b      	orrs	r3, r1
   20726:	d03a      	beq.n	2079e <__aeabi_dadd+0x292>
   20728:	2380      	movs	r3, #128	; 0x80
   2072a:	031b      	lsls	r3, r3, #12
   2072c:	430b      	orrs	r3, r1
   2072e:	031b      	lsls	r3, r3, #12
   20730:	0b1b      	lsrs	r3, r3, #12
   20732:	e735      	b.n	205a0 <__aeabi_dadd+0x94>
   20734:	3f01      	subs	r7, #1
   20736:	2f00      	cmp	r7, #0
   20738:	d165      	bne.n	20806 <__aeabi_dadd+0x2fa>
   2073a:	4658      	mov	r0, fp
   2073c:	1a22      	subs	r2, r4, r0
   2073e:	4294      	cmp	r4, r2
   20740:	41a4      	sbcs	r4, r4
   20742:	4264      	negs	r4, r4
   20744:	1ac9      	subs	r1, r1, r3
   20746:	1b09      	subs	r1, r1, r4
   20748:	1c14      	adds	r4, r2, #0
   2074a:	e766      	b.n	2061a <__aeabi_dadd+0x10e>
   2074c:	4658      	mov	r0, fp
   2074e:	4318      	orrs	r0, r3
   20750:	d100      	bne.n	20754 <__aeabi_dadd+0x248>
   20752:	e704      	b.n	2055e <__aeabi_dadd+0x52>
   20754:	2201      	movs	r2, #1
   20756:	4252      	negs	r2, r2
   20758:	4494      	add	ip, r2
   2075a:	4660      	mov	r0, ip
   2075c:	2800      	cmp	r0, #0
   2075e:	d000      	beq.n	20762 <__aeabi_dadd+0x256>
   20760:	e0c5      	b.n	208ee <__aeabi_dadd+0x3e2>
   20762:	4658      	mov	r0, fp
   20764:	1902      	adds	r2, r0, r4
   20766:	e7c3      	b.n	206f0 <__aeabi_dadd+0x1e4>
   20768:	2f00      	cmp	r7, #0
   2076a:	d173      	bne.n	20854 <__aeabi_dadd+0x348>
   2076c:	1c68      	adds	r0, r5, #1
   2076e:	0540      	lsls	r0, r0, #21
   20770:	0d40      	lsrs	r0, r0, #21
   20772:	2801      	cmp	r0, #1
   20774:	dc00      	bgt.n	20778 <__aeabi_dadd+0x26c>
   20776:	e0de      	b.n	20936 <__aeabi_dadd+0x42a>
   20778:	465a      	mov	r2, fp
   2077a:	1aa2      	subs	r2, r4, r2
   2077c:	4294      	cmp	r4, r2
   2077e:	41bf      	sbcs	r7, r7
   20780:	1ac8      	subs	r0, r1, r3
   20782:	427f      	negs	r7, r7
   20784:	1bc7      	subs	r7, r0, r7
   20786:	0238      	lsls	r0, r7, #8
   20788:	d400      	bmi.n	2078c <__aeabi_dadd+0x280>
   2078a:	e089      	b.n	208a0 <__aeabi_dadd+0x394>
   2078c:	465a      	mov	r2, fp
   2078e:	1b14      	subs	r4, r2, r4
   20790:	45a3      	cmp	fp, r4
   20792:	4192      	sbcs	r2, r2
   20794:	1a59      	subs	r1, r3, r1
   20796:	4252      	negs	r2, r2
   20798:	1a8f      	subs	r7, r1, r2
   2079a:	4666      	mov	r6, ip
   2079c:	e741      	b.n	20622 <__aeabi_dadd+0x116>
   2079e:	2300      	movs	r3, #0
   207a0:	2400      	movs	r4, #0
   207a2:	e6fd      	b.n	205a0 <__aeabi_dadd+0x94>
   207a4:	1c27      	adds	r7, r4, #0
   207a6:	3828      	subs	r0, #40	; 0x28
   207a8:	4087      	lsls	r7, r0
   207aa:	2400      	movs	r4, #0
   207ac:	4295      	cmp	r5, r2
   207ae:	dc00      	bgt.n	207b2 <__aeabi_dadd+0x2a6>
   207b0:	e74c      	b.n	2064c <__aeabi_dadd+0x140>
   207b2:	4945      	ldr	r1, [pc, #276]	; (208c8 <__aeabi_dadd+0x3bc>)
   207b4:	1aad      	subs	r5, r5, r2
   207b6:	4039      	ands	r1, r7
   207b8:	e6d1      	b.n	2055e <__aeabi_dadd+0x52>
   207ba:	1c20      	adds	r0, r4, #0
   207bc:	f001 fd86 	bl	222cc <__clzsi2>
   207c0:	3020      	adds	r0, #32
   207c2:	e734      	b.n	2062e <__aeabi_dadd+0x122>
   207c4:	465a      	mov	r2, fp
   207c6:	431a      	orrs	r2, r3
   207c8:	1e53      	subs	r3, r2, #1
   207ca:	419a      	sbcs	r2, r3
   207cc:	b2d2      	uxtb	r2, r2
   207ce:	2700      	movs	r7, #0
   207d0:	e71c      	b.n	2060c <__aeabi_dadd+0x100>
   207d2:	2a00      	cmp	r2, #0
   207d4:	d000      	beq.n	207d8 <__aeabi_dadd+0x2cc>
   207d6:	e0dc      	b.n	20992 <__aeabi_dadd+0x486>
   207d8:	1c68      	adds	r0, r5, #1
   207da:	0542      	lsls	r2, r0, #21
   207dc:	0d52      	lsrs	r2, r2, #21
   207de:	2a01      	cmp	r2, #1
   207e0:	dc00      	bgt.n	207e4 <__aeabi_dadd+0x2d8>
   207e2:	e08d      	b.n	20900 <__aeabi_dadd+0x3f4>
   207e4:	4d37      	ldr	r5, [pc, #220]	; (208c4 <__aeabi_dadd+0x3b8>)
   207e6:	42a8      	cmp	r0, r5
   207e8:	d100      	bne.n	207ec <__aeabi_dadd+0x2e0>
   207ea:	e0f3      	b.n	209d4 <__aeabi_dadd+0x4c8>
   207ec:	465d      	mov	r5, fp
   207ee:	192a      	adds	r2, r5, r4
   207f0:	42a2      	cmp	r2, r4
   207f2:	41a4      	sbcs	r4, r4
   207f4:	4264      	negs	r4, r4
   207f6:	1859      	adds	r1, r3, r1
   207f8:	1909      	adds	r1, r1, r4
   207fa:	07cc      	lsls	r4, r1, #31
   207fc:	0852      	lsrs	r2, r2, #1
   207fe:	4314      	orrs	r4, r2
   20800:	0849      	lsrs	r1, r1, #1
   20802:	1c05      	adds	r5, r0, #0
   20804:	e6ab      	b.n	2055e <__aeabi_dadd+0x52>
   20806:	482f      	ldr	r0, [pc, #188]	; (208c4 <__aeabi_dadd+0x3b8>)
   20808:	4285      	cmp	r5, r0
   2080a:	d000      	beq.n	2080e <__aeabi_dadd+0x302>
   2080c:	e6e6      	b.n	205dc <__aeabi_dadd+0xd0>
   2080e:	e6a6      	b.n	2055e <__aeabi_dadd+0x52>
   20810:	1c2b      	adds	r3, r5, #0
   20812:	3b1f      	subs	r3, #31
   20814:	1c3a      	adds	r2, r7, #0
   20816:	40da      	lsrs	r2, r3
   20818:	1c13      	adds	r3, r2, #0
   2081a:	2920      	cmp	r1, #32
   2081c:	d06c      	beq.n	208f8 <__aeabi_dadd+0x3ec>
   2081e:	223f      	movs	r2, #63	; 0x3f
   20820:	1b55      	subs	r5, r2, r5
   20822:	40af      	lsls	r7, r5
   20824:	433c      	orrs	r4, r7
   20826:	1e60      	subs	r0, r4, #1
   20828:	4184      	sbcs	r4, r0
   2082a:	431c      	orrs	r4, r3
   2082c:	2100      	movs	r1, #0
   2082e:	2500      	movs	r5, #0
   20830:	e695      	b.n	2055e <__aeabi_dadd+0x52>
   20832:	1c38      	adds	r0, r7, #0
   20834:	3820      	subs	r0, #32
   20836:	1c1a      	adds	r2, r3, #0
   20838:	40c2      	lsrs	r2, r0
   2083a:	1c10      	adds	r0, r2, #0
   2083c:	2f20      	cmp	r7, #32
   2083e:	d05d      	beq.n	208fc <__aeabi_dadd+0x3f0>
   20840:	2240      	movs	r2, #64	; 0x40
   20842:	1bd7      	subs	r7, r2, r7
   20844:	40bb      	lsls	r3, r7
   20846:	465a      	mov	r2, fp
   20848:	431a      	orrs	r2, r3
   2084a:	1e53      	subs	r3, r2, #1
   2084c:	419a      	sbcs	r2, r3
   2084e:	4302      	orrs	r2, r0
   20850:	2700      	movs	r7, #0
   20852:	e6db      	b.n	2060c <__aeabi_dadd+0x100>
   20854:	2d00      	cmp	r5, #0
   20856:	d03b      	beq.n	208d0 <__aeabi_dadd+0x3c4>
   20858:	4d1a      	ldr	r5, [pc, #104]	; (208c4 <__aeabi_dadd+0x3b8>)
   2085a:	45aa      	cmp	sl, r5
   2085c:	d100      	bne.n	20860 <__aeabi_dadd+0x354>
   2085e:	e093      	b.n	20988 <__aeabi_dadd+0x47c>
   20860:	2580      	movs	r5, #128	; 0x80
   20862:	042d      	lsls	r5, r5, #16
   20864:	427f      	negs	r7, r7
   20866:	4329      	orrs	r1, r5
   20868:	2f38      	cmp	r7, #56	; 0x38
   2086a:	dd00      	ble.n	2086e <__aeabi_dadd+0x362>
   2086c:	e0ac      	b.n	209c8 <__aeabi_dadd+0x4bc>
   2086e:	2f1f      	cmp	r7, #31
   20870:	dd00      	ble.n	20874 <__aeabi_dadd+0x368>
   20872:	e129      	b.n	20ac8 <__aeabi_dadd+0x5bc>
   20874:	2520      	movs	r5, #32
   20876:	1bed      	subs	r5, r5, r7
   20878:	1c08      	adds	r0, r1, #0
   2087a:	1c26      	adds	r6, r4, #0
   2087c:	40a8      	lsls	r0, r5
   2087e:	40fe      	lsrs	r6, r7
   20880:	40ac      	lsls	r4, r5
   20882:	4306      	orrs	r6, r0
   20884:	1e65      	subs	r5, r4, #1
   20886:	41ac      	sbcs	r4, r5
   20888:	4334      	orrs	r4, r6
   2088a:	40f9      	lsrs	r1, r7
   2088c:	465d      	mov	r5, fp
   2088e:	1b2c      	subs	r4, r5, r4
   20890:	45a3      	cmp	fp, r4
   20892:	4192      	sbcs	r2, r2
   20894:	1a5b      	subs	r3, r3, r1
   20896:	4252      	negs	r2, r2
   20898:	1a99      	subs	r1, r3, r2
   2089a:	4655      	mov	r5, sl
   2089c:	4666      	mov	r6, ip
   2089e:	e6bc      	b.n	2061a <__aeabi_dadd+0x10e>
   208a0:	1c13      	adds	r3, r2, #0
   208a2:	433b      	orrs	r3, r7
   208a4:	1c14      	adds	r4, r2, #0
   208a6:	2b00      	cmp	r3, #0
   208a8:	d000      	beq.n	208ac <__aeabi_dadd+0x3a0>
   208aa:	e6ba      	b.n	20622 <__aeabi_dadd+0x116>
   208ac:	2700      	movs	r7, #0
   208ae:	2100      	movs	r1, #0
   208b0:	2400      	movs	r4, #0
   208b2:	2500      	movs	r5, #0
   208b4:	e6e5      	b.n	20682 <__aeabi_dadd+0x176>
   208b6:	465a      	mov	r2, fp
   208b8:	431a      	orrs	r2, r3
   208ba:	1e53      	subs	r3, r2, #1
   208bc:	419a      	sbcs	r2, r3
   208be:	b2d2      	uxtb	r2, r2
   208c0:	2300      	movs	r3, #0
   208c2:	e714      	b.n	206ee <__aeabi_dadd+0x1e2>
   208c4:	000007ff 	.word	0x000007ff
   208c8:	ff7fffff 	.word	0xff7fffff
   208cc:	800fffff 	.word	0x800fffff
   208d0:	1c0d      	adds	r5, r1, #0
   208d2:	4325      	orrs	r5, r4
   208d4:	d058      	beq.n	20988 <__aeabi_dadd+0x47c>
   208d6:	43ff      	mvns	r7, r7
   208d8:	2f00      	cmp	r7, #0
   208da:	d151      	bne.n	20980 <__aeabi_dadd+0x474>
   208dc:	1b04      	subs	r4, r0, r4
   208de:	45a3      	cmp	fp, r4
   208e0:	4192      	sbcs	r2, r2
   208e2:	1a59      	subs	r1, r3, r1
   208e4:	4252      	negs	r2, r2
   208e6:	1a89      	subs	r1, r1, r2
   208e8:	4655      	mov	r5, sl
   208ea:	4666      	mov	r6, ip
   208ec:	e695      	b.n	2061a <__aeabi_dadd+0x10e>
   208ee:	4896      	ldr	r0, [pc, #600]	; (20b48 <__aeabi_dadd+0x63c>)
   208f0:	4285      	cmp	r5, r0
   208f2:	d000      	beq.n	208f6 <__aeabi_dadd+0x3ea>
   208f4:	e6de      	b.n	206b4 <__aeabi_dadd+0x1a8>
   208f6:	e632      	b.n	2055e <__aeabi_dadd+0x52>
   208f8:	2700      	movs	r7, #0
   208fa:	e793      	b.n	20824 <__aeabi_dadd+0x318>
   208fc:	2300      	movs	r3, #0
   208fe:	e7a2      	b.n	20846 <__aeabi_dadd+0x33a>
   20900:	1c08      	adds	r0, r1, #0
   20902:	4320      	orrs	r0, r4
   20904:	2d00      	cmp	r5, #0
   20906:	d000      	beq.n	2090a <__aeabi_dadd+0x3fe>
   20908:	e0c4      	b.n	20a94 <__aeabi_dadd+0x588>
   2090a:	2800      	cmp	r0, #0
   2090c:	d100      	bne.n	20910 <__aeabi_dadd+0x404>
   2090e:	e0f7      	b.n	20b00 <__aeabi_dadd+0x5f4>
   20910:	4658      	mov	r0, fp
   20912:	4318      	orrs	r0, r3
   20914:	d100      	bne.n	20918 <__aeabi_dadd+0x40c>
   20916:	e622      	b.n	2055e <__aeabi_dadd+0x52>
   20918:	4658      	mov	r0, fp
   2091a:	1902      	adds	r2, r0, r4
   2091c:	42a2      	cmp	r2, r4
   2091e:	41a4      	sbcs	r4, r4
   20920:	4264      	negs	r4, r4
   20922:	1859      	adds	r1, r3, r1
   20924:	1909      	adds	r1, r1, r4
   20926:	1c14      	adds	r4, r2, #0
   20928:	020a      	lsls	r2, r1, #8
   2092a:	d400      	bmi.n	2092e <__aeabi_dadd+0x422>
   2092c:	e617      	b.n	2055e <__aeabi_dadd+0x52>
   2092e:	4b87      	ldr	r3, [pc, #540]	; (20b4c <__aeabi_dadd+0x640>)
   20930:	2501      	movs	r5, #1
   20932:	4019      	ands	r1, r3
   20934:	e613      	b.n	2055e <__aeabi_dadd+0x52>
   20936:	1c08      	adds	r0, r1, #0
   20938:	4320      	orrs	r0, r4
   2093a:	2d00      	cmp	r5, #0
   2093c:	d139      	bne.n	209b2 <__aeabi_dadd+0x4a6>
   2093e:	2800      	cmp	r0, #0
   20940:	d171      	bne.n	20a26 <__aeabi_dadd+0x51a>
   20942:	4659      	mov	r1, fp
   20944:	4319      	orrs	r1, r3
   20946:	d003      	beq.n	20950 <__aeabi_dadd+0x444>
   20948:	1c19      	adds	r1, r3, #0
   2094a:	465c      	mov	r4, fp
   2094c:	4666      	mov	r6, ip
   2094e:	e606      	b.n	2055e <__aeabi_dadd+0x52>
   20950:	2700      	movs	r7, #0
   20952:	2100      	movs	r1, #0
   20954:	2400      	movs	r4, #0
   20956:	e694      	b.n	20682 <__aeabi_dadd+0x176>
   20958:	4660      	mov	r0, ip
   2095a:	3820      	subs	r0, #32
   2095c:	1c1a      	adds	r2, r3, #0
   2095e:	40c2      	lsrs	r2, r0
   20960:	4660      	mov	r0, ip
   20962:	4691      	mov	r9, r2
   20964:	2820      	cmp	r0, #32
   20966:	d100      	bne.n	2096a <__aeabi_dadd+0x45e>
   20968:	e0ac      	b.n	20ac4 <__aeabi_dadd+0x5b8>
   2096a:	2240      	movs	r2, #64	; 0x40
   2096c:	1a12      	subs	r2, r2, r0
   2096e:	4093      	lsls	r3, r2
   20970:	465a      	mov	r2, fp
   20972:	431a      	orrs	r2, r3
   20974:	1e53      	subs	r3, r2, #1
   20976:	419a      	sbcs	r2, r3
   20978:	464b      	mov	r3, r9
   2097a:	431a      	orrs	r2, r3
   2097c:	2300      	movs	r3, #0
   2097e:	e6b6      	b.n	206ee <__aeabi_dadd+0x1e2>
   20980:	4d71      	ldr	r5, [pc, #452]	; (20b48 <__aeabi_dadd+0x63c>)
   20982:	45aa      	cmp	sl, r5
   20984:	d000      	beq.n	20988 <__aeabi_dadd+0x47c>
   20986:	e76f      	b.n	20868 <__aeabi_dadd+0x35c>
   20988:	1c19      	adds	r1, r3, #0
   2098a:	465c      	mov	r4, fp
   2098c:	4655      	mov	r5, sl
   2098e:	4666      	mov	r6, ip
   20990:	e5e5      	b.n	2055e <__aeabi_dadd+0x52>
   20992:	2d00      	cmp	r5, #0
   20994:	d122      	bne.n	209dc <__aeabi_dadd+0x4d0>
   20996:	1c0d      	adds	r5, r1, #0
   20998:	4325      	orrs	r5, r4
   2099a:	d077      	beq.n	20a8c <__aeabi_dadd+0x580>
   2099c:	43d5      	mvns	r5, r2
   2099e:	2d00      	cmp	r5, #0
   209a0:	d171      	bne.n	20a86 <__aeabi_dadd+0x57a>
   209a2:	445c      	add	r4, fp
   209a4:	455c      	cmp	r4, fp
   209a6:	4192      	sbcs	r2, r2
   209a8:	1859      	adds	r1, r3, r1
   209aa:	4252      	negs	r2, r2
   209ac:	1889      	adds	r1, r1, r2
   209ae:	4655      	mov	r5, sl
   209b0:	e6a4      	b.n	206fc <__aeabi_dadd+0x1f0>
   209b2:	2800      	cmp	r0, #0
   209b4:	d14d      	bne.n	20a52 <__aeabi_dadd+0x546>
   209b6:	4659      	mov	r1, fp
   209b8:	4319      	orrs	r1, r3
   209ba:	d100      	bne.n	209be <__aeabi_dadd+0x4b2>
   209bc:	e094      	b.n	20ae8 <__aeabi_dadd+0x5dc>
   209be:	1c19      	adds	r1, r3, #0
   209c0:	465c      	mov	r4, fp
   209c2:	4666      	mov	r6, ip
   209c4:	4d60      	ldr	r5, [pc, #384]	; (20b48 <__aeabi_dadd+0x63c>)
   209c6:	e5ca      	b.n	2055e <__aeabi_dadd+0x52>
   209c8:	430c      	orrs	r4, r1
   209ca:	1e61      	subs	r1, r4, #1
   209cc:	418c      	sbcs	r4, r1
   209ce:	b2e4      	uxtb	r4, r4
   209d0:	2100      	movs	r1, #0
   209d2:	e75b      	b.n	2088c <__aeabi_dadd+0x380>
   209d4:	1c05      	adds	r5, r0, #0
   209d6:	2100      	movs	r1, #0
   209d8:	2400      	movs	r4, #0
   209da:	e652      	b.n	20682 <__aeabi_dadd+0x176>
   209dc:	4d5a      	ldr	r5, [pc, #360]	; (20b48 <__aeabi_dadd+0x63c>)
   209de:	45aa      	cmp	sl, r5
   209e0:	d054      	beq.n	20a8c <__aeabi_dadd+0x580>
   209e2:	4255      	negs	r5, r2
   209e4:	2280      	movs	r2, #128	; 0x80
   209e6:	0410      	lsls	r0, r2, #16
   209e8:	4301      	orrs	r1, r0
   209ea:	2d38      	cmp	r5, #56	; 0x38
   209ec:	dd00      	ble.n	209f0 <__aeabi_dadd+0x4e4>
   209ee:	e081      	b.n	20af4 <__aeabi_dadd+0x5e8>
   209f0:	2d1f      	cmp	r5, #31
   209f2:	dd00      	ble.n	209f6 <__aeabi_dadd+0x4ea>
   209f4:	e092      	b.n	20b1c <__aeabi_dadd+0x610>
   209f6:	2220      	movs	r2, #32
   209f8:	1b50      	subs	r0, r2, r5
   209fa:	1c0a      	adds	r2, r1, #0
   209fc:	4684      	mov	ip, r0
   209fe:	4082      	lsls	r2, r0
   20a00:	1c20      	adds	r0, r4, #0
   20a02:	40e8      	lsrs	r0, r5
   20a04:	4302      	orrs	r2, r0
   20a06:	4690      	mov	r8, r2
   20a08:	4662      	mov	r2, ip
   20a0a:	4094      	lsls	r4, r2
   20a0c:	1e60      	subs	r0, r4, #1
   20a0e:	4184      	sbcs	r4, r0
   20a10:	4642      	mov	r2, r8
   20a12:	4314      	orrs	r4, r2
   20a14:	40e9      	lsrs	r1, r5
   20a16:	445c      	add	r4, fp
   20a18:	455c      	cmp	r4, fp
   20a1a:	4192      	sbcs	r2, r2
   20a1c:	18cb      	adds	r3, r1, r3
   20a1e:	4252      	negs	r2, r2
   20a20:	1899      	adds	r1, r3, r2
   20a22:	4655      	mov	r5, sl
   20a24:	e66a      	b.n	206fc <__aeabi_dadd+0x1f0>
   20a26:	4658      	mov	r0, fp
   20a28:	4318      	orrs	r0, r3
   20a2a:	d100      	bne.n	20a2e <__aeabi_dadd+0x522>
   20a2c:	e597      	b.n	2055e <__aeabi_dadd+0x52>
   20a2e:	4658      	mov	r0, fp
   20a30:	1a27      	subs	r7, r4, r0
   20a32:	42bc      	cmp	r4, r7
   20a34:	4192      	sbcs	r2, r2
   20a36:	1ac8      	subs	r0, r1, r3
   20a38:	4252      	negs	r2, r2
   20a3a:	1a80      	subs	r0, r0, r2
   20a3c:	0202      	lsls	r2, r0, #8
   20a3e:	d566      	bpl.n	20b0e <__aeabi_dadd+0x602>
   20a40:	4658      	mov	r0, fp
   20a42:	1b04      	subs	r4, r0, r4
   20a44:	45a3      	cmp	fp, r4
   20a46:	4192      	sbcs	r2, r2
   20a48:	1a59      	subs	r1, r3, r1
   20a4a:	4252      	negs	r2, r2
   20a4c:	1a89      	subs	r1, r1, r2
   20a4e:	4666      	mov	r6, ip
   20a50:	e585      	b.n	2055e <__aeabi_dadd+0x52>
   20a52:	4658      	mov	r0, fp
   20a54:	4318      	orrs	r0, r3
   20a56:	d033      	beq.n	20ac0 <__aeabi_dadd+0x5b4>
   20a58:	0748      	lsls	r0, r1, #29
   20a5a:	08e4      	lsrs	r4, r4, #3
   20a5c:	4304      	orrs	r4, r0
   20a5e:	2080      	movs	r0, #128	; 0x80
   20a60:	08c9      	lsrs	r1, r1, #3
   20a62:	0300      	lsls	r0, r0, #12
   20a64:	4201      	tst	r1, r0
   20a66:	d008      	beq.n	20a7a <__aeabi_dadd+0x56e>
   20a68:	08dd      	lsrs	r5, r3, #3
   20a6a:	4205      	tst	r5, r0
   20a6c:	d105      	bne.n	20a7a <__aeabi_dadd+0x56e>
   20a6e:	4659      	mov	r1, fp
   20a70:	08ca      	lsrs	r2, r1, #3
   20a72:	075c      	lsls	r4, r3, #29
   20a74:	4314      	orrs	r4, r2
   20a76:	1c29      	adds	r1, r5, #0
   20a78:	4666      	mov	r6, ip
   20a7a:	0f63      	lsrs	r3, r4, #29
   20a7c:	00c9      	lsls	r1, r1, #3
   20a7e:	4319      	orrs	r1, r3
   20a80:	00e4      	lsls	r4, r4, #3
   20a82:	4d31      	ldr	r5, [pc, #196]	; (20b48 <__aeabi_dadd+0x63c>)
   20a84:	e56b      	b.n	2055e <__aeabi_dadd+0x52>
   20a86:	4a30      	ldr	r2, [pc, #192]	; (20b48 <__aeabi_dadd+0x63c>)
   20a88:	4592      	cmp	sl, r2
   20a8a:	d1ae      	bne.n	209ea <__aeabi_dadd+0x4de>
   20a8c:	1c19      	adds	r1, r3, #0
   20a8e:	465c      	mov	r4, fp
   20a90:	4655      	mov	r5, sl
   20a92:	e564      	b.n	2055e <__aeabi_dadd+0x52>
   20a94:	2800      	cmp	r0, #0
   20a96:	d036      	beq.n	20b06 <__aeabi_dadd+0x5fa>
   20a98:	4658      	mov	r0, fp
   20a9a:	4318      	orrs	r0, r3
   20a9c:	d010      	beq.n	20ac0 <__aeabi_dadd+0x5b4>
   20a9e:	2580      	movs	r5, #128	; 0x80
   20aa0:	0748      	lsls	r0, r1, #29
   20aa2:	08e4      	lsrs	r4, r4, #3
   20aa4:	08c9      	lsrs	r1, r1, #3
   20aa6:	032d      	lsls	r5, r5, #12
   20aa8:	4304      	orrs	r4, r0
   20aaa:	4229      	tst	r1, r5
   20aac:	d0e5      	beq.n	20a7a <__aeabi_dadd+0x56e>
   20aae:	08d8      	lsrs	r0, r3, #3
   20ab0:	4228      	tst	r0, r5
   20ab2:	d1e2      	bne.n	20a7a <__aeabi_dadd+0x56e>
   20ab4:	465d      	mov	r5, fp
   20ab6:	08ea      	lsrs	r2, r5, #3
   20ab8:	075c      	lsls	r4, r3, #29
   20aba:	4314      	orrs	r4, r2
   20abc:	1c01      	adds	r1, r0, #0
   20abe:	e7dc      	b.n	20a7a <__aeabi_dadd+0x56e>
   20ac0:	4d21      	ldr	r5, [pc, #132]	; (20b48 <__aeabi_dadd+0x63c>)
   20ac2:	e54c      	b.n	2055e <__aeabi_dadd+0x52>
   20ac4:	2300      	movs	r3, #0
   20ac6:	e753      	b.n	20970 <__aeabi_dadd+0x464>
   20ac8:	1c3d      	adds	r5, r7, #0
   20aca:	3d20      	subs	r5, #32
   20acc:	1c0a      	adds	r2, r1, #0
   20ace:	40ea      	lsrs	r2, r5
   20ad0:	1c15      	adds	r5, r2, #0
   20ad2:	2f20      	cmp	r7, #32
   20ad4:	d034      	beq.n	20b40 <__aeabi_dadd+0x634>
   20ad6:	2640      	movs	r6, #64	; 0x40
   20ad8:	1bf7      	subs	r7, r6, r7
   20ada:	40b9      	lsls	r1, r7
   20adc:	430c      	orrs	r4, r1
   20ade:	1e61      	subs	r1, r4, #1
   20ae0:	418c      	sbcs	r4, r1
   20ae2:	432c      	orrs	r4, r5
   20ae4:	2100      	movs	r1, #0
   20ae6:	e6d1      	b.n	2088c <__aeabi_dadd+0x380>
   20ae8:	2408      	movs	r4, #8
   20aea:	2700      	movs	r7, #0
   20aec:	4918      	ldr	r1, [pc, #96]	; (20b50 <__aeabi_dadd+0x644>)
   20aee:	4264      	negs	r4, r4
   20af0:	4d15      	ldr	r5, [pc, #84]	; (20b48 <__aeabi_dadd+0x63c>)
   20af2:	e5c6      	b.n	20682 <__aeabi_dadd+0x176>
   20af4:	430c      	orrs	r4, r1
   20af6:	1e61      	subs	r1, r4, #1
   20af8:	418c      	sbcs	r4, r1
   20afa:	b2e4      	uxtb	r4, r4
   20afc:	2100      	movs	r1, #0
   20afe:	e78a      	b.n	20a16 <__aeabi_dadd+0x50a>
   20b00:	1c19      	adds	r1, r3, #0
   20b02:	465c      	mov	r4, fp
   20b04:	e52b      	b.n	2055e <__aeabi_dadd+0x52>
   20b06:	1c19      	adds	r1, r3, #0
   20b08:	465c      	mov	r4, fp
   20b0a:	4d0f      	ldr	r5, [pc, #60]	; (20b48 <__aeabi_dadd+0x63c>)
   20b0c:	e527      	b.n	2055e <__aeabi_dadd+0x52>
   20b0e:	1c03      	adds	r3, r0, #0
   20b10:	433b      	orrs	r3, r7
   20b12:	d100      	bne.n	20b16 <__aeabi_dadd+0x60a>
   20b14:	e71c      	b.n	20950 <__aeabi_dadd+0x444>
   20b16:	1c01      	adds	r1, r0, #0
   20b18:	1c3c      	adds	r4, r7, #0
   20b1a:	e520      	b.n	2055e <__aeabi_dadd+0x52>
   20b1c:	2020      	movs	r0, #32
   20b1e:	4240      	negs	r0, r0
   20b20:	1940      	adds	r0, r0, r5
   20b22:	1c0a      	adds	r2, r1, #0
   20b24:	40c2      	lsrs	r2, r0
   20b26:	4690      	mov	r8, r2
   20b28:	2d20      	cmp	r5, #32
   20b2a:	d00b      	beq.n	20b44 <__aeabi_dadd+0x638>
   20b2c:	2040      	movs	r0, #64	; 0x40
   20b2e:	1b45      	subs	r5, r0, r5
   20b30:	40a9      	lsls	r1, r5
   20b32:	430c      	orrs	r4, r1
   20b34:	1e61      	subs	r1, r4, #1
   20b36:	418c      	sbcs	r4, r1
   20b38:	4645      	mov	r5, r8
   20b3a:	432c      	orrs	r4, r5
   20b3c:	2100      	movs	r1, #0
   20b3e:	e76a      	b.n	20a16 <__aeabi_dadd+0x50a>
   20b40:	2100      	movs	r1, #0
   20b42:	e7cb      	b.n	20adc <__aeabi_dadd+0x5d0>
   20b44:	2100      	movs	r1, #0
   20b46:	e7f4      	b.n	20b32 <__aeabi_dadd+0x626>
   20b48:	000007ff 	.word	0x000007ff
   20b4c:	ff7fffff 	.word	0xff7fffff
   20b50:	007fffff 	.word	0x007fffff

00020b54 <__aeabi_ddiv>:
   20b54:	b5f0      	push	{r4, r5, r6, r7, lr}
   20b56:	4656      	mov	r6, sl
   20b58:	4644      	mov	r4, r8
   20b5a:	465f      	mov	r7, fp
   20b5c:	464d      	mov	r5, r9
   20b5e:	b4f0      	push	{r4, r5, r6, r7}
   20b60:	1c1f      	adds	r7, r3, #0
   20b62:	030b      	lsls	r3, r1, #12
   20b64:	0b1b      	lsrs	r3, r3, #12
   20b66:	4698      	mov	r8, r3
   20b68:	004b      	lsls	r3, r1, #1
   20b6a:	b087      	sub	sp, #28
   20b6c:	1c04      	adds	r4, r0, #0
   20b6e:	4681      	mov	r9, r0
   20b70:	0d5b      	lsrs	r3, r3, #21
   20b72:	0fc8      	lsrs	r0, r1, #31
   20b74:	1c16      	adds	r6, r2, #0
   20b76:	469a      	mov	sl, r3
   20b78:	9000      	str	r0, [sp, #0]
   20b7a:	2b00      	cmp	r3, #0
   20b7c:	d051      	beq.n	20c22 <__aeabi_ddiv+0xce>
   20b7e:	4b6b      	ldr	r3, [pc, #428]	; (20d2c <__aeabi_ddiv+0x1d8>)
   20b80:	459a      	cmp	sl, r3
   20b82:	d031      	beq.n	20be8 <__aeabi_ddiv+0x94>
   20b84:	2280      	movs	r2, #128	; 0x80
   20b86:	4641      	mov	r1, r8
   20b88:	0352      	lsls	r2, r2, #13
   20b8a:	430a      	orrs	r2, r1
   20b8c:	0f63      	lsrs	r3, r4, #29
   20b8e:	00d2      	lsls	r2, r2, #3
   20b90:	431a      	orrs	r2, r3
   20b92:	4b67      	ldr	r3, [pc, #412]	; (20d30 <__aeabi_ddiv+0x1dc>)
   20b94:	4690      	mov	r8, r2
   20b96:	2500      	movs	r5, #0
   20b98:	00e2      	lsls	r2, r4, #3
   20b9a:	4691      	mov	r9, r2
   20b9c:	449a      	add	sl, r3
   20b9e:	2400      	movs	r4, #0
   20ba0:	9502      	str	r5, [sp, #8]
   20ba2:	033b      	lsls	r3, r7, #12
   20ba4:	0b1b      	lsrs	r3, r3, #12
   20ba6:	469b      	mov	fp, r3
   20ba8:	0ffd      	lsrs	r5, r7, #31
   20baa:	007b      	lsls	r3, r7, #1
   20bac:	1c31      	adds	r1, r6, #0
   20bae:	0d5b      	lsrs	r3, r3, #21
   20bb0:	9501      	str	r5, [sp, #4]
   20bb2:	d060      	beq.n	20c76 <__aeabi_ddiv+0x122>
   20bb4:	4a5d      	ldr	r2, [pc, #372]	; (20d2c <__aeabi_ddiv+0x1d8>)
   20bb6:	4293      	cmp	r3, r2
   20bb8:	d054      	beq.n	20c64 <__aeabi_ddiv+0x110>
   20bba:	2180      	movs	r1, #128	; 0x80
   20bbc:	4658      	mov	r0, fp
   20bbe:	0349      	lsls	r1, r1, #13
   20bc0:	4301      	orrs	r1, r0
   20bc2:	0f72      	lsrs	r2, r6, #29
   20bc4:	00c9      	lsls	r1, r1, #3
   20bc6:	4311      	orrs	r1, r2
   20bc8:	4a59      	ldr	r2, [pc, #356]	; (20d30 <__aeabi_ddiv+0x1dc>)
   20bca:	468b      	mov	fp, r1
   20bcc:	189b      	adds	r3, r3, r2
   20bce:	00f1      	lsls	r1, r6, #3
   20bd0:	2000      	movs	r0, #0
   20bd2:	9a00      	ldr	r2, [sp, #0]
   20bd4:	4304      	orrs	r4, r0
   20bd6:	406a      	eors	r2, r5
   20bd8:	9203      	str	r2, [sp, #12]
   20bda:	2c0f      	cmp	r4, #15
   20bdc:	d900      	bls.n	20be0 <__aeabi_ddiv+0x8c>
   20bde:	e0b1      	b.n	20d44 <__aeabi_ddiv+0x1f0>
   20be0:	4e54      	ldr	r6, [pc, #336]	; (20d34 <__aeabi_ddiv+0x1e0>)
   20be2:	00a4      	lsls	r4, r4, #2
   20be4:	5934      	ldr	r4, [r6, r4]
   20be6:	46a7      	mov	pc, r4
   20be8:	4640      	mov	r0, r8
   20bea:	4304      	orrs	r4, r0
   20bec:	d16e      	bne.n	20ccc <__aeabi_ddiv+0x178>
   20bee:	2100      	movs	r1, #0
   20bf0:	2502      	movs	r5, #2
   20bf2:	2408      	movs	r4, #8
   20bf4:	4688      	mov	r8, r1
   20bf6:	4689      	mov	r9, r1
   20bf8:	9502      	str	r5, [sp, #8]
   20bfa:	e7d2      	b.n	20ba2 <__aeabi_ddiv+0x4e>
   20bfc:	9c00      	ldr	r4, [sp, #0]
   20bfe:	9802      	ldr	r0, [sp, #8]
   20c00:	46c3      	mov	fp, r8
   20c02:	4649      	mov	r1, r9
   20c04:	9401      	str	r4, [sp, #4]
   20c06:	2802      	cmp	r0, #2
   20c08:	d064      	beq.n	20cd4 <__aeabi_ddiv+0x180>
   20c0a:	2803      	cmp	r0, #3
   20c0c:	d100      	bne.n	20c10 <__aeabi_ddiv+0xbc>
   20c0e:	e2af      	b.n	21170 <__aeabi_ddiv+0x61c>
   20c10:	2801      	cmp	r0, #1
   20c12:	d000      	beq.n	20c16 <__aeabi_ddiv+0xc2>
   20c14:	e23c      	b.n	21090 <__aeabi_ddiv+0x53c>
   20c16:	9a01      	ldr	r2, [sp, #4]
   20c18:	2400      	movs	r4, #0
   20c1a:	4002      	ands	r2, r0
   20c1c:	2500      	movs	r5, #0
   20c1e:	46a1      	mov	r9, r4
   20c20:	e060      	b.n	20ce4 <__aeabi_ddiv+0x190>
   20c22:	4643      	mov	r3, r8
   20c24:	4323      	orrs	r3, r4
   20c26:	d04a      	beq.n	20cbe <__aeabi_ddiv+0x16a>
   20c28:	4640      	mov	r0, r8
   20c2a:	2800      	cmp	r0, #0
   20c2c:	d100      	bne.n	20c30 <__aeabi_ddiv+0xdc>
   20c2e:	e1c4      	b.n	20fba <__aeabi_ddiv+0x466>
   20c30:	f001 fb4c 	bl	222cc <__clzsi2>
   20c34:	1e03      	subs	r3, r0, #0
   20c36:	2b27      	cmp	r3, #39	; 0x27
   20c38:	dd00      	ble.n	20c3c <__aeabi_ddiv+0xe8>
   20c3a:	e1b7      	b.n	20fac <__aeabi_ddiv+0x458>
   20c3c:	2128      	movs	r1, #40	; 0x28
   20c3e:	1a0d      	subs	r5, r1, r0
   20c40:	1c21      	adds	r1, r4, #0
   20c42:	3b08      	subs	r3, #8
   20c44:	4642      	mov	r2, r8
   20c46:	40e9      	lsrs	r1, r5
   20c48:	409a      	lsls	r2, r3
   20c4a:	1c0d      	adds	r5, r1, #0
   20c4c:	4315      	orrs	r5, r2
   20c4e:	1c22      	adds	r2, r4, #0
   20c50:	409a      	lsls	r2, r3
   20c52:	46a8      	mov	r8, r5
   20c54:	4691      	mov	r9, r2
   20c56:	4b38      	ldr	r3, [pc, #224]	; (20d38 <__aeabi_ddiv+0x1e4>)
   20c58:	2500      	movs	r5, #0
   20c5a:	1a1b      	subs	r3, r3, r0
   20c5c:	469a      	mov	sl, r3
   20c5e:	2400      	movs	r4, #0
   20c60:	9502      	str	r5, [sp, #8]
   20c62:	e79e      	b.n	20ba2 <__aeabi_ddiv+0x4e>
   20c64:	465a      	mov	r2, fp
   20c66:	4316      	orrs	r6, r2
   20c68:	2003      	movs	r0, #3
   20c6a:	2e00      	cmp	r6, #0
   20c6c:	d1b1      	bne.n	20bd2 <__aeabi_ddiv+0x7e>
   20c6e:	46b3      	mov	fp, r6
   20c70:	2100      	movs	r1, #0
   20c72:	2002      	movs	r0, #2
   20c74:	e7ad      	b.n	20bd2 <__aeabi_ddiv+0x7e>
   20c76:	465a      	mov	r2, fp
   20c78:	4332      	orrs	r2, r6
   20c7a:	d01b      	beq.n	20cb4 <__aeabi_ddiv+0x160>
   20c7c:	465b      	mov	r3, fp
   20c7e:	2b00      	cmp	r3, #0
   20c80:	d100      	bne.n	20c84 <__aeabi_ddiv+0x130>
   20c82:	e18e      	b.n	20fa2 <__aeabi_ddiv+0x44e>
   20c84:	4658      	mov	r0, fp
   20c86:	f001 fb21 	bl	222cc <__clzsi2>
   20c8a:	2827      	cmp	r0, #39	; 0x27
   20c8c:	dd00      	ble.n	20c90 <__aeabi_ddiv+0x13c>
   20c8e:	e181      	b.n	20f94 <__aeabi_ddiv+0x440>
   20c90:	2228      	movs	r2, #40	; 0x28
   20c92:	1a17      	subs	r7, r2, r0
   20c94:	1c01      	adds	r1, r0, #0
   20c96:	1c32      	adds	r2, r6, #0
   20c98:	3908      	subs	r1, #8
   20c9a:	465b      	mov	r3, fp
   20c9c:	40fa      	lsrs	r2, r7
   20c9e:	408b      	lsls	r3, r1
   20ca0:	1c17      	adds	r7, r2, #0
   20ca2:	431f      	orrs	r7, r3
   20ca4:	1c33      	adds	r3, r6, #0
   20ca6:	408b      	lsls	r3, r1
   20ca8:	46bb      	mov	fp, r7
   20caa:	1c19      	adds	r1, r3, #0
   20cac:	4b22      	ldr	r3, [pc, #136]	; (20d38 <__aeabi_ddiv+0x1e4>)
   20cae:	1a1b      	subs	r3, r3, r0
   20cb0:	2000      	movs	r0, #0
   20cb2:	e78e      	b.n	20bd2 <__aeabi_ddiv+0x7e>
   20cb4:	2700      	movs	r7, #0
   20cb6:	46bb      	mov	fp, r7
   20cb8:	2100      	movs	r1, #0
   20cba:	2001      	movs	r0, #1
   20cbc:	e789      	b.n	20bd2 <__aeabi_ddiv+0x7e>
   20cbe:	2000      	movs	r0, #0
   20cc0:	2501      	movs	r5, #1
   20cc2:	2404      	movs	r4, #4
   20cc4:	4680      	mov	r8, r0
   20cc6:	4681      	mov	r9, r0
   20cc8:	9502      	str	r5, [sp, #8]
   20cca:	e76a      	b.n	20ba2 <__aeabi_ddiv+0x4e>
   20ccc:	2503      	movs	r5, #3
   20cce:	240c      	movs	r4, #12
   20cd0:	9502      	str	r5, [sp, #8]
   20cd2:	e766      	b.n	20ba2 <__aeabi_ddiv+0x4e>
   20cd4:	9c01      	ldr	r4, [sp, #4]
   20cd6:	9403      	str	r4, [sp, #12]
   20cd8:	9d03      	ldr	r5, [sp, #12]
   20cda:	2201      	movs	r2, #1
   20cdc:	402a      	ands	r2, r5
   20cde:	2400      	movs	r4, #0
   20ce0:	4d12      	ldr	r5, [pc, #72]	; (20d2c <__aeabi_ddiv+0x1d8>)
   20ce2:	46a1      	mov	r9, r4
   20ce4:	2000      	movs	r0, #0
   20ce6:	2100      	movs	r1, #0
   20ce8:	0324      	lsls	r4, r4, #12
   20cea:	0b26      	lsrs	r6, r4, #12
   20cec:	0d0c      	lsrs	r4, r1, #20
   20cee:	0524      	lsls	r4, r4, #20
   20cf0:	4b12      	ldr	r3, [pc, #72]	; (20d3c <__aeabi_ddiv+0x1e8>)
   20cf2:	4334      	orrs	r4, r6
   20cf4:	052d      	lsls	r5, r5, #20
   20cf6:	4023      	ands	r3, r4
   20cf8:	432b      	orrs	r3, r5
   20cfa:	005b      	lsls	r3, r3, #1
   20cfc:	085b      	lsrs	r3, r3, #1
   20cfe:	07d2      	lsls	r2, r2, #31
   20d00:	1c19      	adds	r1, r3, #0
   20d02:	4648      	mov	r0, r9
   20d04:	4311      	orrs	r1, r2
   20d06:	b007      	add	sp, #28
   20d08:	bc3c      	pop	{r2, r3, r4, r5}
   20d0a:	4690      	mov	r8, r2
   20d0c:	4699      	mov	r9, r3
   20d0e:	46a2      	mov	sl, r4
   20d10:	46ab      	mov	fp, r5
   20d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20d14:	2301      	movs	r3, #1
   20d16:	425b      	negs	r3, r3
   20d18:	2200      	movs	r2, #0
   20d1a:	4c09      	ldr	r4, [pc, #36]	; (20d40 <__aeabi_ddiv+0x1ec>)
   20d1c:	4699      	mov	r9, r3
   20d1e:	4d03      	ldr	r5, [pc, #12]	; (20d2c <__aeabi_ddiv+0x1d8>)
   20d20:	e7e0      	b.n	20ce4 <__aeabi_ddiv+0x190>
   20d22:	2400      	movs	r4, #0
   20d24:	2500      	movs	r5, #0
   20d26:	46a1      	mov	r9, r4
   20d28:	e7dc      	b.n	20ce4 <__aeabi_ddiv+0x190>
   20d2a:	46c0      	nop			; (mov r8, r8)
   20d2c:	000007ff 	.word	0x000007ff
   20d30:	fffffc01 	.word	0xfffffc01
   20d34:	00027320 	.word	0x00027320
   20d38:	fffffc0d 	.word	0xfffffc0d
   20d3c:	800fffff 	.word	0x800fffff
   20d40:	000fffff 	.word	0x000fffff
   20d44:	4655      	mov	r5, sl
   20d46:	1aed      	subs	r5, r5, r3
   20d48:	9504      	str	r5, [sp, #16]
   20d4a:	45d8      	cmp	r8, fp
   20d4c:	d900      	bls.n	20d50 <__aeabi_ddiv+0x1fc>
   20d4e:	e153      	b.n	20ff8 <__aeabi_ddiv+0x4a4>
   20d50:	d100      	bne.n	20d54 <__aeabi_ddiv+0x200>
   20d52:	e14e      	b.n	20ff2 <__aeabi_ddiv+0x49e>
   20d54:	9c04      	ldr	r4, [sp, #16]
   20d56:	2500      	movs	r5, #0
   20d58:	3c01      	subs	r4, #1
   20d5a:	464e      	mov	r6, r9
   20d5c:	9404      	str	r4, [sp, #16]
   20d5e:	4647      	mov	r7, r8
   20d60:	46a9      	mov	r9, r5
   20d62:	4658      	mov	r0, fp
   20d64:	0203      	lsls	r3, r0, #8
   20d66:	0e0c      	lsrs	r4, r1, #24
   20d68:	431c      	orrs	r4, r3
   20d6a:	0209      	lsls	r1, r1, #8
   20d6c:	0c25      	lsrs	r5, r4, #16
   20d6e:	0423      	lsls	r3, r4, #16
   20d70:	0c1b      	lsrs	r3, r3, #16
   20d72:	9100      	str	r1, [sp, #0]
   20d74:	1c38      	adds	r0, r7, #0
   20d76:	1c29      	adds	r1, r5, #0
   20d78:	9301      	str	r3, [sp, #4]
   20d7a:	f7fe fb57 	bl	1f42c <__aeabi_uidiv>
   20d7e:	9901      	ldr	r1, [sp, #4]
   20d80:	4683      	mov	fp, r0
   20d82:	4341      	muls	r1, r0
   20d84:	1c38      	adds	r0, r7, #0
   20d86:	468a      	mov	sl, r1
   20d88:	1c29      	adds	r1, r5, #0
   20d8a:	f7fe fb93 	bl	1f4b4 <__aeabi_uidivmod>
   20d8e:	0c33      	lsrs	r3, r6, #16
   20d90:	0409      	lsls	r1, r1, #16
   20d92:	4319      	orrs	r1, r3
   20d94:	458a      	cmp	sl, r1
   20d96:	d90c      	bls.n	20db2 <__aeabi_ddiv+0x25e>
   20d98:	465b      	mov	r3, fp
   20d9a:	1909      	adds	r1, r1, r4
   20d9c:	3b01      	subs	r3, #1
   20d9e:	428c      	cmp	r4, r1
   20da0:	d900      	bls.n	20da4 <__aeabi_ddiv+0x250>
   20da2:	e147      	b.n	21034 <__aeabi_ddiv+0x4e0>
   20da4:	458a      	cmp	sl, r1
   20da6:	d800      	bhi.n	20daa <__aeabi_ddiv+0x256>
   20da8:	e144      	b.n	21034 <__aeabi_ddiv+0x4e0>
   20daa:	2202      	movs	r2, #2
   20dac:	4252      	negs	r2, r2
   20dae:	4493      	add	fp, r2
   20db0:	1909      	adds	r1, r1, r4
   20db2:	4653      	mov	r3, sl
   20db4:	1acb      	subs	r3, r1, r3
   20db6:	1c18      	adds	r0, r3, #0
   20db8:	1c29      	adds	r1, r5, #0
   20dba:	4698      	mov	r8, r3
   20dbc:	f7fe fb36 	bl	1f42c <__aeabi_uidiv>
   20dc0:	1c07      	adds	r7, r0, #0
   20dc2:	9801      	ldr	r0, [sp, #4]
   20dc4:	1c29      	adds	r1, r5, #0
   20dc6:	4378      	muls	r0, r7
   20dc8:	4682      	mov	sl, r0
   20dca:	4640      	mov	r0, r8
   20dcc:	f7fe fb72 	bl	1f4b4 <__aeabi_uidivmod>
   20dd0:	0436      	lsls	r6, r6, #16
   20dd2:	040b      	lsls	r3, r1, #16
   20dd4:	0c36      	lsrs	r6, r6, #16
   20dd6:	4333      	orrs	r3, r6
   20dd8:	459a      	cmp	sl, r3
   20dda:	d909      	bls.n	20df0 <__aeabi_ddiv+0x29c>
   20ddc:	191b      	adds	r3, r3, r4
   20dde:	1e7a      	subs	r2, r7, #1
   20de0:	429c      	cmp	r4, r3
   20de2:	d900      	bls.n	20de6 <__aeabi_ddiv+0x292>
   20de4:	e124      	b.n	21030 <__aeabi_ddiv+0x4dc>
   20de6:	459a      	cmp	sl, r3
   20de8:	d800      	bhi.n	20dec <__aeabi_ddiv+0x298>
   20dea:	e121      	b.n	21030 <__aeabi_ddiv+0x4dc>
   20dec:	3f02      	subs	r7, #2
   20dee:	191b      	adds	r3, r3, r4
   20df0:	465e      	mov	r6, fp
   20df2:	0432      	lsls	r2, r6, #16
   20df4:	4317      	orrs	r7, r2
   20df6:	0c38      	lsrs	r0, r7, #16
   20df8:	46bb      	mov	fp, r7
   20dfa:	9e00      	ldr	r6, [sp, #0]
   20dfc:	9f00      	ldr	r7, [sp, #0]
   20dfe:	4651      	mov	r1, sl
   20e00:	0c3f      	lsrs	r7, r7, #16
   20e02:	0432      	lsls	r2, r6, #16
   20e04:	1a5b      	subs	r3, r3, r1
   20e06:	4659      	mov	r1, fp
   20e08:	46ba      	mov	sl, r7
   20e0a:	0c12      	lsrs	r2, r2, #16
   20e0c:	040f      	lsls	r7, r1, #16
   20e0e:	0c3f      	lsrs	r7, r7, #16
   20e10:	4690      	mov	r8, r2
   20e12:	4651      	mov	r1, sl
   20e14:	437a      	muls	r2, r7
   20e16:	434f      	muls	r7, r1
   20e18:	4641      	mov	r1, r8
   20e1a:	4341      	muls	r1, r0
   20e1c:	4656      	mov	r6, sl
   20e1e:	4370      	muls	r0, r6
   20e20:	19cf      	adds	r7, r1, r7
   20e22:	0c16      	lsrs	r6, r2, #16
   20e24:	19be      	adds	r6, r7, r6
   20e26:	42b1      	cmp	r1, r6
   20e28:	d902      	bls.n	20e30 <__aeabi_ddiv+0x2dc>
   20e2a:	2780      	movs	r7, #128	; 0x80
   20e2c:	027f      	lsls	r7, r7, #9
   20e2e:	19c0      	adds	r0, r0, r7
   20e30:	0c31      	lsrs	r1, r6, #16
   20e32:	0412      	lsls	r2, r2, #16
   20e34:	0436      	lsls	r6, r6, #16
   20e36:	0c12      	lsrs	r2, r2, #16
   20e38:	1840      	adds	r0, r0, r1
   20e3a:	18b6      	adds	r6, r6, r2
   20e3c:	4283      	cmp	r3, r0
   20e3e:	d200      	bcs.n	20e42 <__aeabi_ddiv+0x2ee>
   20e40:	e0c4      	b.n	20fcc <__aeabi_ddiv+0x478>
   20e42:	d100      	bne.n	20e46 <__aeabi_ddiv+0x2f2>
   20e44:	e0be      	b.n	20fc4 <__aeabi_ddiv+0x470>
   20e46:	1a19      	subs	r1, r3, r0
   20e48:	4648      	mov	r0, r9
   20e4a:	1b86      	subs	r6, r0, r6
   20e4c:	45b1      	cmp	r9, r6
   20e4e:	41bf      	sbcs	r7, r7
   20e50:	427f      	negs	r7, r7
   20e52:	1bcf      	subs	r7, r1, r7
   20e54:	42a7      	cmp	r7, r4
   20e56:	d100      	bne.n	20e5a <__aeabi_ddiv+0x306>
   20e58:	e113      	b.n	21082 <__aeabi_ddiv+0x52e>
   20e5a:	1c29      	adds	r1, r5, #0
   20e5c:	1c38      	adds	r0, r7, #0
   20e5e:	f7fe fae5 	bl	1f42c <__aeabi_uidiv>
   20e62:	9901      	ldr	r1, [sp, #4]
   20e64:	9002      	str	r0, [sp, #8]
   20e66:	4341      	muls	r1, r0
   20e68:	1c38      	adds	r0, r7, #0
   20e6a:	4689      	mov	r9, r1
   20e6c:	1c29      	adds	r1, r5, #0
   20e6e:	f7fe fb21 	bl	1f4b4 <__aeabi_uidivmod>
   20e72:	0c33      	lsrs	r3, r6, #16
   20e74:	0409      	lsls	r1, r1, #16
   20e76:	4319      	orrs	r1, r3
   20e78:	4589      	cmp	r9, r1
   20e7a:	d90c      	bls.n	20e96 <__aeabi_ddiv+0x342>
   20e7c:	9b02      	ldr	r3, [sp, #8]
   20e7e:	1909      	adds	r1, r1, r4
   20e80:	3b01      	subs	r3, #1
   20e82:	428c      	cmp	r4, r1
   20e84:	d900      	bls.n	20e88 <__aeabi_ddiv+0x334>
   20e86:	e0ff      	b.n	21088 <__aeabi_ddiv+0x534>
   20e88:	4589      	cmp	r9, r1
   20e8a:	d800      	bhi.n	20e8e <__aeabi_ddiv+0x33a>
   20e8c:	e0fc      	b.n	21088 <__aeabi_ddiv+0x534>
   20e8e:	9f02      	ldr	r7, [sp, #8]
   20e90:	1909      	adds	r1, r1, r4
   20e92:	3f02      	subs	r7, #2
   20e94:	9702      	str	r7, [sp, #8]
   20e96:	464f      	mov	r7, r9
   20e98:	1bcf      	subs	r7, r1, r7
   20e9a:	1c38      	adds	r0, r7, #0
   20e9c:	1c29      	adds	r1, r5, #0
   20e9e:	9705      	str	r7, [sp, #20]
   20ea0:	f7fe fac4 	bl	1f42c <__aeabi_uidiv>
   20ea4:	1c07      	adds	r7, r0, #0
   20ea6:	9801      	ldr	r0, [sp, #4]
   20ea8:	1c29      	adds	r1, r5, #0
   20eaa:	4378      	muls	r0, r7
   20eac:	4681      	mov	r9, r0
   20eae:	9805      	ldr	r0, [sp, #20]
   20eb0:	f7fe fb00 	bl	1f4b4 <__aeabi_uidivmod>
   20eb4:	0436      	lsls	r6, r6, #16
   20eb6:	0409      	lsls	r1, r1, #16
   20eb8:	0c36      	lsrs	r6, r6, #16
   20eba:	430e      	orrs	r6, r1
   20ebc:	45b1      	cmp	r9, r6
   20ebe:	d909      	bls.n	20ed4 <__aeabi_ddiv+0x380>
   20ec0:	1936      	adds	r6, r6, r4
   20ec2:	1e7b      	subs	r3, r7, #1
   20ec4:	42b4      	cmp	r4, r6
   20ec6:	d900      	bls.n	20eca <__aeabi_ddiv+0x376>
   20ec8:	e0e0      	b.n	2108c <__aeabi_ddiv+0x538>
   20eca:	45b1      	cmp	r9, r6
   20ecc:	d800      	bhi.n	20ed0 <__aeabi_ddiv+0x37c>
   20ece:	e0dd      	b.n	2108c <__aeabi_ddiv+0x538>
   20ed0:	3f02      	subs	r7, #2
   20ed2:	1936      	adds	r6, r6, r4
   20ed4:	9d02      	ldr	r5, [sp, #8]
   20ed6:	4649      	mov	r1, r9
   20ed8:	1a76      	subs	r6, r6, r1
   20eda:	0429      	lsls	r1, r5, #16
   20edc:	4339      	orrs	r1, r7
   20ede:	040b      	lsls	r3, r1, #16
   20ee0:	4657      	mov	r7, sl
   20ee2:	0c0a      	lsrs	r2, r1, #16
   20ee4:	0c1b      	lsrs	r3, r3, #16
   20ee6:	4640      	mov	r0, r8
   20ee8:	4645      	mov	r5, r8
   20eea:	4358      	muls	r0, r3
   20eec:	4355      	muls	r5, r2
   20eee:	437b      	muls	r3, r7
   20ef0:	437a      	muls	r2, r7
   20ef2:	18eb      	adds	r3, r5, r3
   20ef4:	0c07      	lsrs	r7, r0, #16
   20ef6:	19db      	adds	r3, r3, r7
   20ef8:	429d      	cmp	r5, r3
   20efa:	d902      	bls.n	20f02 <__aeabi_ddiv+0x3ae>
   20efc:	2580      	movs	r5, #128	; 0x80
   20efe:	026d      	lsls	r5, r5, #9
   20f00:	1952      	adds	r2, r2, r5
   20f02:	0c1d      	lsrs	r5, r3, #16
   20f04:	0400      	lsls	r0, r0, #16
   20f06:	041b      	lsls	r3, r3, #16
   20f08:	0c00      	lsrs	r0, r0, #16
   20f0a:	1952      	adds	r2, r2, r5
   20f0c:	181b      	adds	r3, r3, r0
   20f0e:	4296      	cmp	r6, r2
   20f10:	d335      	bcc.n	20f7e <__aeabi_ddiv+0x42a>
   20f12:	d100      	bne.n	20f16 <__aeabi_ddiv+0x3c2>
   20f14:	e0fc      	b.n	21110 <__aeabi_ddiv+0x5bc>
   20f16:	2301      	movs	r3, #1
   20f18:	4319      	orrs	r1, r3
   20f1a:	9e04      	ldr	r6, [sp, #16]
   20f1c:	4f99      	ldr	r7, [pc, #612]	; (21184 <__aeabi_ddiv+0x630>)
   20f1e:	19f5      	adds	r5, r6, r7
   20f20:	2d00      	cmp	r5, #0
   20f22:	dc00      	bgt.n	20f26 <__aeabi_ddiv+0x3d2>
   20f24:	e0a1      	b.n	2106a <__aeabi_ddiv+0x516>
   20f26:	0748      	lsls	r0, r1, #29
   20f28:	d009      	beq.n	20f3e <__aeabi_ddiv+0x3ea>
   20f2a:	230f      	movs	r3, #15
   20f2c:	400b      	ands	r3, r1
   20f2e:	2b04      	cmp	r3, #4
   20f30:	d005      	beq.n	20f3e <__aeabi_ddiv+0x3ea>
   20f32:	1d0b      	adds	r3, r1, #4
   20f34:	428b      	cmp	r3, r1
   20f36:	4189      	sbcs	r1, r1
   20f38:	4249      	negs	r1, r1
   20f3a:	448b      	add	fp, r1
   20f3c:	1c19      	adds	r1, r3, #0
   20f3e:	465a      	mov	r2, fp
   20f40:	01d2      	lsls	r2, r2, #7
   20f42:	d507      	bpl.n	20f54 <__aeabi_ddiv+0x400>
   20f44:	4b90      	ldr	r3, [pc, #576]	; (21188 <__aeabi_ddiv+0x634>)
   20f46:	465c      	mov	r4, fp
   20f48:	9e04      	ldr	r6, [sp, #16]
   20f4a:	2780      	movs	r7, #128	; 0x80
   20f4c:	401c      	ands	r4, r3
   20f4e:	00ff      	lsls	r7, r7, #3
   20f50:	46a3      	mov	fp, r4
   20f52:	19f5      	adds	r5, r6, r7
   20f54:	4b8d      	ldr	r3, [pc, #564]	; (2118c <__aeabi_ddiv+0x638>)
   20f56:	429d      	cmp	r5, r3
   20f58:	dd7a      	ble.n	21050 <__aeabi_ddiv+0x4fc>
   20f5a:	9c03      	ldr	r4, [sp, #12]
   20f5c:	2201      	movs	r2, #1
   20f5e:	4022      	ands	r2, r4
   20f60:	2400      	movs	r4, #0
   20f62:	4d8b      	ldr	r5, [pc, #556]	; (21190 <__aeabi_ddiv+0x63c>)
   20f64:	46a1      	mov	r9, r4
   20f66:	e6bd      	b.n	20ce4 <__aeabi_ddiv+0x190>
   20f68:	2480      	movs	r4, #128	; 0x80
   20f6a:	0324      	lsls	r4, r4, #12
   20f6c:	4647      	mov	r7, r8
   20f6e:	4227      	tst	r7, r4
   20f70:	d14c      	bne.n	2100c <__aeabi_ddiv+0x4b8>
   20f72:	433c      	orrs	r4, r7
   20f74:	0324      	lsls	r4, r4, #12
   20f76:	0b24      	lsrs	r4, r4, #12
   20f78:	9a00      	ldr	r2, [sp, #0]
   20f7a:	4d85      	ldr	r5, [pc, #532]	; (21190 <__aeabi_ddiv+0x63c>)
   20f7c:	e6b2      	b.n	20ce4 <__aeabi_ddiv+0x190>
   20f7e:	1936      	adds	r6, r6, r4
   20f80:	1e48      	subs	r0, r1, #1
   20f82:	42b4      	cmp	r4, r6
   20f84:	d95e      	bls.n	21044 <__aeabi_ddiv+0x4f0>
   20f86:	1c01      	adds	r1, r0, #0
   20f88:	4296      	cmp	r6, r2
   20f8a:	d1c4      	bne.n	20f16 <__aeabi_ddiv+0x3c2>
   20f8c:	9e00      	ldr	r6, [sp, #0]
   20f8e:	429e      	cmp	r6, r3
   20f90:	d1c1      	bne.n	20f16 <__aeabi_ddiv+0x3c2>
   20f92:	e7c2      	b.n	20f1a <__aeabi_ddiv+0x3c6>
   20f94:	1c03      	adds	r3, r0, #0
   20f96:	3b28      	subs	r3, #40	; 0x28
   20f98:	1c31      	adds	r1, r6, #0
   20f9a:	4099      	lsls	r1, r3
   20f9c:	468b      	mov	fp, r1
   20f9e:	2100      	movs	r1, #0
   20fa0:	e684      	b.n	20cac <__aeabi_ddiv+0x158>
   20fa2:	1c30      	adds	r0, r6, #0
   20fa4:	f001 f992 	bl	222cc <__clzsi2>
   20fa8:	3020      	adds	r0, #32
   20faa:	e66e      	b.n	20c8a <__aeabi_ddiv+0x136>
   20fac:	3b28      	subs	r3, #40	; 0x28
   20fae:	1c21      	adds	r1, r4, #0
   20fb0:	4099      	lsls	r1, r3
   20fb2:	2200      	movs	r2, #0
   20fb4:	4688      	mov	r8, r1
   20fb6:	4691      	mov	r9, r2
   20fb8:	e64d      	b.n	20c56 <__aeabi_ddiv+0x102>
   20fba:	1c20      	adds	r0, r4, #0
   20fbc:	f001 f986 	bl	222cc <__clzsi2>
   20fc0:	3020      	adds	r0, #32
   20fc2:	e637      	b.n	20c34 <__aeabi_ddiv+0xe0>
   20fc4:	2100      	movs	r1, #0
   20fc6:	45b1      	cmp	r9, r6
   20fc8:	d300      	bcc.n	20fcc <__aeabi_ddiv+0x478>
   20fca:	e73d      	b.n	20e48 <__aeabi_ddiv+0x2f4>
   20fcc:	9f00      	ldr	r7, [sp, #0]
   20fce:	465a      	mov	r2, fp
   20fd0:	44b9      	add	r9, r7
   20fd2:	45b9      	cmp	r9, r7
   20fd4:	41bf      	sbcs	r7, r7
   20fd6:	427f      	negs	r7, r7
   20fd8:	193f      	adds	r7, r7, r4
   20fda:	18fb      	adds	r3, r7, r3
   20fdc:	3a01      	subs	r2, #1
   20fde:	429c      	cmp	r4, r3
   20fe0:	d21e      	bcs.n	21020 <__aeabi_ddiv+0x4cc>
   20fe2:	4298      	cmp	r0, r3
   20fe4:	d900      	bls.n	20fe8 <__aeabi_ddiv+0x494>
   20fe6:	e07e      	b.n	210e6 <__aeabi_ddiv+0x592>
   20fe8:	d100      	bne.n	20fec <__aeabi_ddiv+0x498>
   20fea:	e0b5      	b.n	21158 <__aeabi_ddiv+0x604>
   20fec:	1a19      	subs	r1, r3, r0
   20fee:	4693      	mov	fp, r2
   20ff0:	e72a      	b.n	20e48 <__aeabi_ddiv+0x2f4>
   20ff2:	4589      	cmp	r9, r1
   20ff4:	d800      	bhi.n	20ff8 <__aeabi_ddiv+0x4a4>
   20ff6:	e6ad      	b.n	20d54 <__aeabi_ddiv+0x200>
   20ff8:	4648      	mov	r0, r9
   20ffa:	4646      	mov	r6, r8
   20ffc:	4642      	mov	r2, r8
   20ffe:	0877      	lsrs	r7, r6, #1
   21000:	07d3      	lsls	r3, r2, #31
   21002:	0846      	lsrs	r6, r0, #1
   21004:	07c0      	lsls	r0, r0, #31
   21006:	431e      	orrs	r6, r3
   21008:	4681      	mov	r9, r0
   2100a:	e6aa      	b.n	20d62 <__aeabi_ddiv+0x20e>
   2100c:	4658      	mov	r0, fp
   2100e:	4220      	tst	r0, r4
   21010:	d112      	bne.n	21038 <__aeabi_ddiv+0x4e4>
   21012:	4304      	orrs	r4, r0
   21014:	0324      	lsls	r4, r4, #12
   21016:	1c2a      	adds	r2, r5, #0
   21018:	0b24      	lsrs	r4, r4, #12
   2101a:	4689      	mov	r9, r1
   2101c:	4d5c      	ldr	r5, [pc, #368]	; (21190 <__aeabi_ddiv+0x63c>)
   2101e:	e661      	b.n	20ce4 <__aeabi_ddiv+0x190>
   21020:	42a3      	cmp	r3, r4
   21022:	d1e3      	bne.n	20fec <__aeabi_ddiv+0x498>
   21024:	9f00      	ldr	r7, [sp, #0]
   21026:	454f      	cmp	r7, r9
   21028:	d9db      	bls.n	20fe2 <__aeabi_ddiv+0x48e>
   2102a:	1a21      	subs	r1, r4, r0
   2102c:	4693      	mov	fp, r2
   2102e:	e70b      	b.n	20e48 <__aeabi_ddiv+0x2f4>
   21030:	1c17      	adds	r7, r2, #0
   21032:	e6dd      	b.n	20df0 <__aeabi_ddiv+0x29c>
   21034:	469b      	mov	fp, r3
   21036:	e6bc      	b.n	20db2 <__aeabi_ddiv+0x25e>
   21038:	433c      	orrs	r4, r7
   2103a:	0324      	lsls	r4, r4, #12
   2103c:	0b24      	lsrs	r4, r4, #12
   2103e:	9a00      	ldr	r2, [sp, #0]
   21040:	4d53      	ldr	r5, [pc, #332]	; (21190 <__aeabi_ddiv+0x63c>)
   21042:	e64f      	b.n	20ce4 <__aeabi_ddiv+0x190>
   21044:	42b2      	cmp	r2, r6
   21046:	d859      	bhi.n	210fc <__aeabi_ddiv+0x5a8>
   21048:	d100      	bne.n	2104c <__aeabi_ddiv+0x4f8>
   2104a:	e08a      	b.n	21162 <__aeabi_ddiv+0x60e>
   2104c:	1c01      	adds	r1, r0, #0
   2104e:	e762      	b.n	20f16 <__aeabi_ddiv+0x3c2>
   21050:	465f      	mov	r7, fp
   21052:	08c9      	lsrs	r1, r1, #3
   21054:	077b      	lsls	r3, r7, #29
   21056:	9e03      	ldr	r6, [sp, #12]
   21058:	430b      	orrs	r3, r1
   2105a:	027c      	lsls	r4, r7, #9
   2105c:	056d      	lsls	r5, r5, #21
   2105e:	2201      	movs	r2, #1
   21060:	4699      	mov	r9, r3
   21062:	0b24      	lsrs	r4, r4, #12
   21064:	0d6d      	lsrs	r5, r5, #21
   21066:	4032      	ands	r2, r6
   21068:	e63c      	b.n	20ce4 <__aeabi_ddiv+0x190>
   2106a:	4b4a      	ldr	r3, [pc, #296]	; (21194 <__aeabi_ddiv+0x640>)
   2106c:	9f04      	ldr	r7, [sp, #16]
   2106e:	1bdb      	subs	r3, r3, r7
   21070:	2b38      	cmp	r3, #56	; 0x38
   21072:	dd10      	ble.n	21096 <__aeabi_ddiv+0x542>
   21074:	9c03      	ldr	r4, [sp, #12]
   21076:	2201      	movs	r2, #1
   21078:	4022      	ands	r2, r4
   2107a:	2400      	movs	r4, #0
   2107c:	2500      	movs	r5, #0
   2107e:	46a1      	mov	r9, r4
   21080:	e630      	b.n	20ce4 <__aeabi_ddiv+0x190>
   21082:	2101      	movs	r1, #1
   21084:	4249      	negs	r1, r1
   21086:	e748      	b.n	20f1a <__aeabi_ddiv+0x3c6>
   21088:	9302      	str	r3, [sp, #8]
   2108a:	e704      	b.n	20e96 <__aeabi_ddiv+0x342>
   2108c:	1c1f      	adds	r7, r3, #0
   2108e:	e721      	b.n	20ed4 <__aeabi_ddiv+0x380>
   21090:	9c01      	ldr	r4, [sp, #4]
   21092:	9403      	str	r4, [sp, #12]
   21094:	e741      	b.n	20f1a <__aeabi_ddiv+0x3c6>
   21096:	2b1f      	cmp	r3, #31
   21098:	dc40      	bgt.n	2111c <__aeabi_ddiv+0x5c8>
   2109a:	483f      	ldr	r0, [pc, #252]	; (21198 <__aeabi_ddiv+0x644>)
   2109c:	9f04      	ldr	r7, [sp, #16]
   2109e:	1c0c      	adds	r4, r1, #0
   210a0:	183a      	adds	r2, r7, r0
   210a2:	4658      	mov	r0, fp
   210a4:	4091      	lsls	r1, r2
   210a6:	40dc      	lsrs	r4, r3
   210a8:	4090      	lsls	r0, r2
   210aa:	4320      	orrs	r0, r4
   210ac:	1c0a      	adds	r2, r1, #0
   210ae:	1e51      	subs	r1, r2, #1
   210b0:	418a      	sbcs	r2, r1
   210b2:	1c01      	adds	r1, r0, #0
   210b4:	4311      	orrs	r1, r2
   210b6:	465a      	mov	r2, fp
   210b8:	40da      	lsrs	r2, r3
   210ba:	1c13      	adds	r3, r2, #0
   210bc:	0748      	lsls	r0, r1, #29
   210be:	d009      	beq.n	210d4 <__aeabi_ddiv+0x580>
   210c0:	220f      	movs	r2, #15
   210c2:	400a      	ands	r2, r1
   210c4:	2a04      	cmp	r2, #4
   210c6:	d005      	beq.n	210d4 <__aeabi_ddiv+0x580>
   210c8:	1d0a      	adds	r2, r1, #4
   210ca:	428a      	cmp	r2, r1
   210cc:	4189      	sbcs	r1, r1
   210ce:	4249      	negs	r1, r1
   210d0:	185b      	adds	r3, r3, r1
   210d2:	1c11      	adds	r1, r2, #0
   210d4:	021a      	lsls	r2, r3, #8
   210d6:	d534      	bpl.n	21142 <__aeabi_ddiv+0x5ee>
   210d8:	9c03      	ldr	r4, [sp, #12]
   210da:	2201      	movs	r2, #1
   210dc:	4022      	ands	r2, r4
   210de:	2400      	movs	r4, #0
   210e0:	2501      	movs	r5, #1
   210e2:	46a1      	mov	r9, r4
   210e4:	e5fe      	b.n	20ce4 <__aeabi_ddiv+0x190>
   210e6:	9f00      	ldr	r7, [sp, #0]
   210e8:	2102      	movs	r1, #2
   210ea:	4249      	negs	r1, r1
   210ec:	44b9      	add	r9, r7
   210ee:	448b      	add	fp, r1
   210f0:	45b9      	cmp	r9, r7
   210f2:	4189      	sbcs	r1, r1
   210f4:	4249      	negs	r1, r1
   210f6:	1909      	adds	r1, r1, r4
   210f8:	18cb      	adds	r3, r1, r3
   210fa:	e6a4      	b.n	20e46 <__aeabi_ddiv+0x2f2>
   210fc:	9d00      	ldr	r5, [sp, #0]
   210fe:	1e88      	subs	r0, r1, #2
   21100:	0069      	lsls	r1, r5, #1
   21102:	42a9      	cmp	r1, r5
   21104:	41ad      	sbcs	r5, r5
   21106:	426d      	negs	r5, r5
   21108:	192c      	adds	r4, r5, r4
   2110a:	1936      	adds	r6, r6, r4
   2110c:	9100      	str	r1, [sp, #0]
   2110e:	e73a      	b.n	20f86 <__aeabi_ddiv+0x432>
   21110:	2b00      	cmp	r3, #0
   21112:	d000      	beq.n	21116 <__aeabi_ddiv+0x5c2>
   21114:	e733      	b.n	20f7e <__aeabi_ddiv+0x42a>
   21116:	2400      	movs	r4, #0
   21118:	9400      	str	r4, [sp, #0]
   2111a:	e737      	b.n	20f8c <__aeabi_ddiv+0x438>
   2111c:	4a1f      	ldr	r2, [pc, #124]	; (2119c <__aeabi_ddiv+0x648>)
   2111e:	9c04      	ldr	r4, [sp, #16]
   21120:	465d      	mov	r5, fp
   21122:	1b12      	subs	r2, r2, r4
   21124:	40d5      	lsrs	r5, r2
   21126:	1c2a      	adds	r2, r5, #0
   21128:	2b20      	cmp	r3, #32
   2112a:	d01f      	beq.n	2116c <__aeabi_ddiv+0x618>
   2112c:	4e1c      	ldr	r6, [pc, #112]	; (211a0 <__aeabi_ddiv+0x64c>)
   2112e:	465f      	mov	r7, fp
   21130:	19a3      	adds	r3, r4, r6
   21132:	409f      	lsls	r7, r3
   21134:	1c3b      	adds	r3, r7, #0
   21136:	4319      	orrs	r1, r3
   21138:	1e4b      	subs	r3, r1, #1
   2113a:	4199      	sbcs	r1, r3
   2113c:	4311      	orrs	r1, r2
   2113e:	2300      	movs	r3, #0
   21140:	e7bc      	b.n	210bc <__aeabi_ddiv+0x568>
   21142:	075a      	lsls	r2, r3, #29
   21144:	08c9      	lsrs	r1, r1, #3
   21146:	430a      	orrs	r2, r1
   21148:	9f03      	ldr	r7, [sp, #12]
   2114a:	4691      	mov	r9, r2
   2114c:	025b      	lsls	r3, r3, #9
   2114e:	2201      	movs	r2, #1
   21150:	0b1c      	lsrs	r4, r3, #12
   21152:	403a      	ands	r2, r7
   21154:	2500      	movs	r5, #0
   21156:	e5c5      	b.n	20ce4 <__aeabi_ddiv+0x190>
   21158:	454e      	cmp	r6, r9
   2115a:	d8c4      	bhi.n	210e6 <__aeabi_ddiv+0x592>
   2115c:	4693      	mov	fp, r2
   2115e:	2100      	movs	r1, #0
   21160:	e672      	b.n	20e48 <__aeabi_ddiv+0x2f4>
   21162:	9f00      	ldr	r7, [sp, #0]
   21164:	429f      	cmp	r7, r3
   21166:	d3c9      	bcc.n	210fc <__aeabi_ddiv+0x5a8>
   21168:	1c01      	adds	r1, r0, #0
   2116a:	e70f      	b.n	20f8c <__aeabi_ddiv+0x438>
   2116c:	2300      	movs	r3, #0
   2116e:	e7e2      	b.n	21136 <__aeabi_ddiv+0x5e2>
   21170:	2480      	movs	r4, #128	; 0x80
   21172:	0324      	lsls	r4, r4, #12
   21174:	465f      	mov	r7, fp
   21176:	433c      	orrs	r4, r7
   21178:	0324      	lsls	r4, r4, #12
   2117a:	0b24      	lsrs	r4, r4, #12
   2117c:	9a01      	ldr	r2, [sp, #4]
   2117e:	4689      	mov	r9, r1
   21180:	4d03      	ldr	r5, [pc, #12]	; (21190 <__aeabi_ddiv+0x63c>)
   21182:	e5af      	b.n	20ce4 <__aeabi_ddiv+0x190>
   21184:	000003ff 	.word	0x000003ff
   21188:	feffffff 	.word	0xfeffffff
   2118c:	000007fe 	.word	0x000007fe
   21190:	000007ff 	.word	0x000007ff
   21194:	fffffc02 	.word	0xfffffc02
   21198:	0000041e 	.word	0x0000041e
   2119c:	fffffbe2 	.word	0xfffffbe2
   211a0:	0000043e 	.word	0x0000043e

000211a4 <__eqdf2>:
   211a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   211a6:	465f      	mov	r7, fp
   211a8:	4656      	mov	r6, sl
   211aa:	464d      	mov	r5, r9
   211ac:	4644      	mov	r4, r8
   211ae:	b4f0      	push	{r4, r5, r6, r7}
   211b0:	1c0d      	adds	r5, r1, #0
   211b2:	1c04      	adds	r4, r0, #0
   211b4:	4680      	mov	r8, r0
   211b6:	0fe8      	lsrs	r0, r5, #31
   211b8:	4681      	mov	r9, r0
   211ba:	0318      	lsls	r0, r3, #12
   211bc:	030f      	lsls	r7, r1, #12
   211be:	0b00      	lsrs	r0, r0, #12
   211c0:	0b3f      	lsrs	r7, r7, #12
   211c2:	b083      	sub	sp, #12
   211c4:	4684      	mov	ip, r0
   211c6:	481b      	ldr	r0, [pc, #108]	; (21234 <__eqdf2+0x90>)
   211c8:	9700      	str	r7, [sp, #0]
   211ca:	0049      	lsls	r1, r1, #1
   211cc:	005e      	lsls	r6, r3, #1
   211ce:	0fdf      	lsrs	r7, r3, #31
   211d0:	0d49      	lsrs	r1, r1, #21
   211d2:	4692      	mov	sl, r2
   211d4:	0d76      	lsrs	r6, r6, #21
   211d6:	46bb      	mov	fp, r7
   211d8:	4281      	cmp	r1, r0
   211da:	d00c      	beq.n	211f6 <__eqdf2+0x52>
   211dc:	4815      	ldr	r0, [pc, #84]	; (21234 <__eqdf2+0x90>)
   211de:	4286      	cmp	r6, r0
   211e0:	d010      	beq.n	21204 <__eqdf2+0x60>
   211e2:	2001      	movs	r0, #1
   211e4:	42b1      	cmp	r1, r6
   211e6:	d015      	beq.n	21214 <__eqdf2+0x70>
   211e8:	b003      	add	sp, #12
   211ea:	bc3c      	pop	{r2, r3, r4, r5}
   211ec:	4690      	mov	r8, r2
   211ee:	4699      	mov	r9, r3
   211f0:	46a2      	mov	sl, r4
   211f2:	46ab      	mov	fp, r5
   211f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   211f6:	9f00      	ldr	r7, [sp, #0]
   211f8:	2001      	movs	r0, #1
   211fa:	4327      	orrs	r7, r4
   211fc:	d1f4      	bne.n	211e8 <__eqdf2+0x44>
   211fe:	480d      	ldr	r0, [pc, #52]	; (21234 <__eqdf2+0x90>)
   21200:	4286      	cmp	r6, r0
   21202:	d1ee      	bne.n	211e2 <__eqdf2+0x3e>
   21204:	4660      	mov	r0, ip
   21206:	4302      	orrs	r2, r0
   21208:	2001      	movs	r0, #1
   2120a:	2a00      	cmp	r2, #0
   2120c:	d1ec      	bne.n	211e8 <__eqdf2+0x44>
   2120e:	2001      	movs	r0, #1
   21210:	42b1      	cmp	r1, r6
   21212:	d1e9      	bne.n	211e8 <__eqdf2+0x44>
   21214:	9b00      	ldr	r3, [sp, #0]
   21216:	4563      	cmp	r3, ip
   21218:	d1e6      	bne.n	211e8 <__eqdf2+0x44>
   2121a:	45d0      	cmp	r8, sl
   2121c:	d1e4      	bne.n	211e8 <__eqdf2+0x44>
   2121e:	45d9      	cmp	r9, fp
   21220:	d006      	beq.n	21230 <__eqdf2+0x8c>
   21222:	2900      	cmp	r1, #0
   21224:	d1e0      	bne.n	211e8 <__eqdf2+0x44>
   21226:	431c      	orrs	r4, r3
   21228:	1c20      	adds	r0, r4, #0
   2122a:	1e44      	subs	r4, r0, #1
   2122c:	41a0      	sbcs	r0, r4
   2122e:	e7db      	b.n	211e8 <__eqdf2+0x44>
   21230:	2000      	movs	r0, #0
   21232:	e7d9      	b.n	211e8 <__eqdf2+0x44>
   21234:	000007ff 	.word	0x000007ff

00021238 <__gedf2>:
   21238:	b5f0      	push	{r4, r5, r6, r7, lr}
   2123a:	465f      	mov	r7, fp
   2123c:	4656      	mov	r6, sl
   2123e:	464d      	mov	r5, r9
   21240:	4644      	mov	r4, r8
   21242:	b4f0      	push	{r4, r5, r6, r7}
   21244:	0fcd      	lsrs	r5, r1, #31
   21246:	0fde      	lsrs	r6, r3, #31
   21248:	46ac      	mov	ip, r5
   2124a:	031d      	lsls	r5, r3, #12
   2124c:	0b2d      	lsrs	r5, r5, #12
   2124e:	46b1      	mov	r9, r6
   21250:	4e35      	ldr	r6, [pc, #212]	; (21328 <__gedf2+0xf0>)
   21252:	030f      	lsls	r7, r1, #12
   21254:	004c      	lsls	r4, r1, #1
   21256:	46ab      	mov	fp, r5
   21258:	005d      	lsls	r5, r3, #1
   2125a:	4680      	mov	r8, r0
   2125c:	0b3f      	lsrs	r7, r7, #12
   2125e:	0d64      	lsrs	r4, r4, #21
   21260:	4692      	mov	sl, r2
   21262:	0d6d      	lsrs	r5, r5, #21
   21264:	42b4      	cmp	r4, r6
   21266:	d031      	beq.n	212cc <__gedf2+0x94>
   21268:	4e2f      	ldr	r6, [pc, #188]	; (21328 <__gedf2+0xf0>)
   2126a:	42b5      	cmp	r5, r6
   2126c:	d034      	beq.n	212d8 <__gedf2+0xa0>
   2126e:	2c00      	cmp	r4, #0
   21270:	d10e      	bne.n	21290 <__gedf2+0x58>
   21272:	4338      	orrs	r0, r7
   21274:	4241      	negs	r1, r0
   21276:	4141      	adcs	r1, r0
   21278:	1c08      	adds	r0, r1, #0
   2127a:	2d00      	cmp	r5, #0
   2127c:	d00b      	beq.n	21296 <__gedf2+0x5e>
   2127e:	2900      	cmp	r1, #0
   21280:	d119      	bne.n	212b6 <__gedf2+0x7e>
   21282:	45cc      	cmp	ip, r9
   21284:	d02c      	beq.n	212e0 <__gedf2+0xa8>
   21286:	4666      	mov	r6, ip
   21288:	2e00      	cmp	r6, #0
   2128a:	d117      	bne.n	212bc <__gedf2+0x84>
   2128c:	2001      	movs	r0, #1
   2128e:	e017      	b.n	212c0 <__gedf2+0x88>
   21290:	2d00      	cmp	r5, #0
   21292:	d1f6      	bne.n	21282 <__gedf2+0x4a>
   21294:	1c28      	adds	r0, r5, #0
   21296:	4659      	mov	r1, fp
   21298:	430a      	orrs	r2, r1
   2129a:	4253      	negs	r3, r2
   2129c:	4153      	adcs	r3, r2
   2129e:	2800      	cmp	r0, #0
   212a0:	d106      	bne.n	212b0 <__gedf2+0x78>
   212a2:	2b00      	cmp	r3, #0
   212a4:	d0ed      	beq.n	21282 <__gedf2+0x4a>
   212a6:	4665      	mov	r5, ip
   212a8:	2001      	movs	r0, #1
   212aa:	2d00      	cmp	r5, #0
   212ac:	d008      	beq.n	212c0 <__gedf2+0x88>
   212ae:	e005      	b.n	212bc <__gedf2+0x84>
   212b0:	2000      	movs	r0, #0
   212b2:	2b00      	cmp	r3, #0
   212b4:	d104      	bne.n	212c0 <__gedf2+0x88>
   212b6:	464b      	mov	r3, r9
   212b8:	2b00      	cmp	r3, #0
   212ba:	d1e7      	bne.n	2128c <__gedf2+0x54>
   212bc:	2001      	movs	r0, #1
   212be:	4240      	negs	r0, r0
   212c0:	bc3c      	pop	{r2, r3, r4, r5}
   212c2:	4690      	mov	r8, r2
   212c4:	4699      	mov	r9, r3
   212c6:	46a2      	mov	sl, r4
   212c8:	46ab      	mov	fp, r5
   212ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   212cc:	1c3e      	adds	r6, r7, #0
   212ce:	4306      	orrs	r6, r0
   212d0:	d0ca      	beq.n	21268 <__gedf2+0x30>
   212d2:	2002      	movs	r0, #2
   212d4:	4240      	negs	r0, r0
   212d6:	e7f3      	b.n	212c0 <__gedf2+0x88>
   212d8:	465e      	mov	r6, fp
   212da:	4316      	orrs	r6, r2
   212dc:	d0c7      	beq.n	2126e <__gedf2+0x36>
   212de:	e7f8      	b.n	212d2 <__gedf2+0x9a>
   212e0:	42ac      	cmp	r4, r5
   212e2:	dc05      	bgt.n	212f0 <__gedf2+0xb8>
   212e4:	da09      	bge.n	212fa <__gedf2+0xc2>
   212e6:	4663      	mov	r3, ip
   212e8:	2b00      	cmp	r3, #0
   212ea:	d0e7      	beq.n	212bc <__gedf2+0x84>
   212ec:	2001      	movs	r0, #1
   212ee:	e7e7      	b.n	212c0 <__gedf2+0x88>
   212f0:	4661      	mov	r1, ip
   212f2:	2900      	cmp	r1, #0
   212f4:	d1e2      	bne.n	212bc <__gedf2+0x84>
   212f6:	2001      	movs	r0, #1
   212f8:	e7e2      	b.n	212c0 <__gedf2+0x88>
   212fa:	455f      	cmp	r7, fp
   212fc:	d808      	bhi.n	21310 <__gedf2+0xd8>
   212fe:	d00c      	beq.n	2131a <__gedf2+0xe2>
   21300:	2000      	movs	r0, #0
   21302:	455f      	cmp	r7, fp
   21304:	d2dc      	bcs.n	212c0 <__gedf2+0x88>
   21306:	4666      	mov	r6, ip
   21308:	2e00      	cmp	r6, #0
   2130a:	d0d7      	beq.n	212bc <__gedf2+0x84>
   2130c:	2001      	movs	r0, #1
   2130e:	e7d7      	b.n	212c0 <__gedf2+0x88>
   21310:	4665      	mov	r5, ip
   21312:	2d00      	cmp	r5, #0
   21314:	d1d2      	bne.n	212bc <__gedf2+0x84>
   21316:	2001      	movs	r0, #1
   21318:	e7d2      	b.n	212c0 <__gedf2+0x88>
   2131a:	45d0      	cmp	r8, sl
   2131c:	d8f8      	bhi.n	21310 <__gedf2+0xd8>
   2131e:	2000      	movs	r0, #0
   21320:	45d0      	cmp	r8, sl
   21322:	d3f0      	bcc.n	21306 <__gedf2+0xce>
   21324:	e7cc      	b.n	212c0 <__gedf2+0x88>
   21326:	46c0      	nop			; (mov r8, r8)
   21328:	000007ff 	.word	0x000007ff

0002132c <__ledf2>:
   2132c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2132e:	4656      	mov	r6, sl
   21330:	464d      	mov	r5, r9
   21332:	4644      	mov	r4, r8
   21334:	465f      	mov	r7, fp
   21336:	b4f0      	push	{r4, r5, r6, r7}
   21338:	1c0d      	adds	r5, r1, #0
   2133a:	b083      	sub	sp, #12
   2133c:	1c04      	adds	r4, r0, #0
   2133e:	9001      	str	r0, [sp, #4]
   21340:	0fe8      	lsrs	r0, r5, #31
   21342:	4681      	mov	r9, r0
   21344:	0318      	lsls	r0, r3, #12
   21346:	030f      	lsls	r7, r1, #12
   21348:	0b00      	lsrs	r0, r0, #12
   2134a:	0b3f      	lsrs	r7, r7, #12
   2134c:	4684      	mov	ip, r0
   2134e:	4838      	ldr	r0, [pc, #224]	; (21430 <__ledf2+0x104>)
   21350:	9700      	str	r7, [sp, #0]
   21352:	0049      	lsls	r1, r1, #1
   21354:	005e      	lsls	r6, r3, #1
   21356:	0fdf      	lsrs	r7, r3, #31
   21358:	0d49      	lsrs	r1, r1, #21
   2135a:	4692      	mov	sl, r2
   2135c:	0d76      	lsrs	r6, r6, #21
   2135e:	46b8      	mov	r8, r7
   21360:	4281      	cmp	r1, r0
   21362:	d033      	beq.n	213cc <__ledf2+0xa0>
   21364:	4832      	ldr	r0, [pc, #200]	; (21430 <__ledf2+0x104>)
   21366:	4286      	cmp	r6, r0
   21368:	d035      	beq.n	213d6 <__ledf2+0xaa>
   2136a:	2900      	cmp	r1, #0
   2136c:	d017      	beq.n	2139e <__ledf2+0x72>
   2136e:	2e00      	cmp	r6, #0
   21370:	d11e      	bne.n	213b0 <__ledf2+0x84>
   21372:	1c34      	adds	r4, r6, #0
   21374:	4667      	mov	r7, ip
   21376:	433a      	orrs	r2, r7
   21378:	4253      	negs	r3, r2
   2137a:	4153      	adcs	r3, r2
   2137c:	2c00      	cmp	r4, #0
   2137e:	d01e      	beq.n	213be <__ledf2+0x92>
   21380:	2000      	movs	r0, #0
   21382:	2b00      	cmp	r3, #0
   21384:	d104      	bne.n	21390 <__ledf2+0x64>
   21386:	4640      	mov	r0, r8
   21388:	2800      	cmp	r0, #0
   2138a:	d116      	bne.n	213ba <__ledf2+0x8e>
   2138c:	2001      	movs	r0, #1
   2138e:	4240      	negs	r0, r0
   21390:	b003      	add	sp, #12
   21392:	bc3c      	pop	{r2, r3, r4, r5}
   21394:	4690      	mov	r8, r2
   21396:	4699      	mov	r9, r3
   21398:	46a2      	mov	sl, r4
   2139a:	46ab      	mov	fp, r5
   2139c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2139e:	9800      	ldr	r0, [sp, #0]
   213a0:	4304      	orrs	r4, r0
   213a2:	4260      	negs	r0, r4
   213a4:	4160      	adcs	r0, r4
   213a6:	1c04      	adds	r4, r0, #0
   213a8:	2e00      	cmp	r6, #0
   213aa:	d0e3      	beq.n	21374 <__ledf2+0x48>
   213ac:	2800      	cmp	r0, #0
   213ae:	d1ea      	bne.n	21386 <__ledf2+0x5a>
   213b0:	45c1      	cmp	r9, r8
   213b2:	d015      	beq.n	213e0 <__ledf2+0xb4>
   213b4:	464f      	mov	r7, r9
   213b6:	2f00      	cmp	r7, #0
   213b8:	d1e8      	bne.n	2138c <__ledf2+0x60>
   213ba:	2001      	movs	r0, #1
   213bc:	e7e8      	b.n	21390 <__ledf2+0x64>
   213be:	2b00      	cmp	r3, #0
   213c0:	d0f6      	beq.n	213b0 <__ledf2+0x84>
   213c2:	464b      	mov	r3, r9
   213c4:	2001      	movs	r0, #1
   213c6:	2b00      	cmp	r3, #0
   213c8:	d0e2      	beq.n	21390 <__ledf2+0x64>
   213ca:	e7df      	b.n	2138c <__ledf2+0x60>
   213cc:	9f00      	ldr	r7, [sp, #0]
   213ce:	2002      	movs	r0, #2
   213d0:	4327      	orrs	r7, r4
   213d2:	d1dd      	bne.n	21390 <__ledf2+0x64>
   213d4:	e7c6      	b.n	21364 <__ledf2+0x38>
   213d6:	4667      	mov	r7, ip
   213d8:	2002      	movs	r0, #2
   213da:	4317      	orrs	r7, r2
   213dc:	d1d8      	bne.n	21390 <__ledf2+0x64>
   213de:	e7c4      	b.n	2136a <__ledf2+0x3e>
   213e0:	42b1      	cmp	r1, r6
   213e2:	dd04      	ble.n	213ee <__ledf2+0xc2>
   213e4:	4648      	mov	r0, r9
   213e6:	2800      	cmp	r0, #0
   213e8:	d1d0      	bne.n	2138c <__ledf2+0x60>
   213ea:	2001      	movs	r0, #1
   213ec:	e7d0      	b.n	21390 <__ledf2+0x64>
   213ee:	42b1      	cmp	r1, r6
   213f0:	da04      	bge.n	213fc <__ledf2+0xd0>
   213f2:	464b      	mov	r3, r9
   213f4:	2b00      	cmp	r3, #0
   213f6:	d0c9      	beq.n	2138c <__ledf2+0x60>
   213f8:	2001      	movs	r0, #1
   213fa:	e7c9      	b.n	21390 <__ledf2+0x64>
   213fc:	9f00      	ldr	r7, [sp, #0]
   213fe:	4567      	cmp	r7, ip
   21400:	d809      	bhi.n	21416 <__ledf2+0xea>
   21402:	d00d      	beq.n	21420 <__ledf2+0xf4>
   21404:	9f00      	ldr	r7, [sp, #0]
   21406:	2000      	movs	r0, #0
   21408:	4567      	cmp	r7, ip
   2140a:	d2c1      	bcs.n	21390 <__ledf2+0x64>
   2140c:	464f      	mov	r7, r9
   2140e:	2f00      	cmp	r7, #0
   21410:	d0bc      	beq.n	2138c <__ledf2+0x60>
   21412:	2001      	movs	r0, #1
   21414:	e7bc      	b.n	21390 <__ledf2+0x64>
   21416:	464b      	mov	r3, r9
   21418:	2b00      	cmp	r3, #0
   2141a:	d1b7      	bne.n	2138c <__ledf2+0x60>
   2141c:	2001      	movs	r0, #1
   2141e:	e7b7      	b.n	21390 <__ledf2+0x64>
   21420:	9801      	ldr	r0, [sp, #4]
   21422:	4550      	cmp	r0, sl
   21424:	d8f7      	bhi.n	21416 <__ledf2+0xea>
   21426:	9b01      	ldr	r3, [sp, #4]
   21428:	2000      	movs	r0, #0
   2142a:	4553      	cmp	r3, sl
   2142c:	d3ee      	bcc.n	2140c <__ledf2+0xe0>
   2142e:	e7af      	b.n	21390 <__ledf2+0x64>
   21430:	000007ff 	.word	0x000007ff

00021434 <__aeabi_dmul>:
   21434:	b5f0      	push	{r4, r5, r6, r7, lr}
   21436:	4656      	mov	r6, sl
   21438:	4644      	mov	r4, r8
   2143a:	465f      	mov	r7, fp
   2143c:	464d      	mov	r5, r9
   2143e:	b4f0      	push	{r4, r5, r6, r7}
   21440:	1c1f      	adds	r7, r3, #0
   21442:	030b      	lsls	r3, r1, #12
   21444:	0b1b      	lsrs	r3, r3, #12
   21446:	469a      	mov	sl, r3
   21448:	004b      	lsls	r3, r1, #1
   2144a:	b087      	sub	sp, #28
   2144c:	1c04      	adds	r4, r0, #0
   2144e:	4680      	mov	r8, r0
   21450:	0d5b      	lsrs	r3, r3, #21
   21452:	0fc8      	lsrs	r0, r1, #31
   21454:	1c16      	adds	r6, r2, #0
   21456:	9302      	str	r3, [sp, #8]
   21458:	4681      	mov	r9, r0
   2145a:	2b00      	cmp	r3, #0
   2145c:	d068      	beq.n	21530 <__aeabi_dmul+0xfc>
   2145e:	4b69      	ldr	r3, [pc, #420]	; (21604 <__aeabi_dmul+0x1d0>)
   21460:	9902      	ldr	r1, [sp, #8]
   21462:	4299      	cmp	r1, r3
   21464:	d032      	beq.n	214cc <__aeabi_dmul+0x98>
   21466:	2280      	movs	r2, #128	; 0x80
   21468:	4653      	mov	r3, sl
   2146a:	0352      	lsls	r2, r2, #13
   2146c:	431a      	orrs	r2, r3
   2146e:	00d2      	lsls	r2, r2, #3
   21470:	0f63      	lsrs	r3, r4, #29
   21472:	431a      	orrs	r2, r3
   21474:	4692      	mov	sl, r2
   21476:	4a64      	ldr	r2, [pc, #400]	; (21608 <__aeabi_dmul+0x1d4>)
   21478:	00e0      	lsls	r0, r4, #3
   2147a:	1889      	adds	r1, r1, r2
   2147c:	4680      	mov	r8, r0
   2147e:	9102      	str	r1, [sp, #8]
   21480:	2400      	movs	r4, #0
   21482:	2500      	movs	r5, #0
   21484:	033b      	lsls	r3, r7, #12
   21486:	0b1b      	lsrs	r3, r3, #12
   21488:	469b      	mov	fp, r3
   2148a:	0078      	lsls	r0, r7, #1
   2148c:	0ffb      	lsrs	r3, r7, #31
   2148e:	1c32      	adds	r2, r6, #0
   21490:	0d40      	lsrs	r0, r0, #21
   21492:	9303      	str	r3, [sp, #12]
   21494:	d100      	bne.n	21498 <__aeabi_dmul+0x64>
   21496:	e075      	b.n	21584 <__aeabi_dmul+0x150>
   21498:	4b5a      	ldr	r3, [pc, #360]	; (21604 <__aeabi_dmul+0x1d0>)
   2149a:	4298      	cmp	r0, r3
   2149c:	d069      	beq.n	21572 <__aeabi_dmul+0x13e>
   2149e:	2280      	movs	r2, #128	; 0x80
   214a0:	4659      	mov	r1, fp
   214a2:	0352      	lsls	r2, r2, #13
   214a4:	430a      	orrs	r2, r1
   214a6:	0f73      	lsrs	r3, r6, #29
   214a8:	00d2      	lsls	r2, r2, #3
   214aa:	431a      	orrs	r2, r3
   214ac:	4b56      	ldr	r3, [pc, #344]	; (21608 <__aeabi_dmul+0x1d4>)
   214ae:	4693      	mov	fp, r2
   214b0:	18c0      	adds	r0, r0, r3
   214b2:	00f2      	lsls	r2, r6, #3
   214b4:	2300      	movs	r3, #0
   214b6:	9903      	ldr	r1, [sp, #12]
   214b8:	464e      	mov	r6, r9
   214ba:	4071      	eors	r1, r6
   214bc:	431c      	orrs	r4, r3
   214be:	2c0f      	cmp	r4, #15
   214c0:	d900      	bls.n	214c4 <__aeabi_dmul+0x90>
   214c2:	e0ab      	b.n	2161c <__aeabi_dmul+0x1e8>
   214c4:	4e51      	ldr	r6, [pc, #324]	; (2160c <__aeabi_dmul+0x1d8>)
   214c6:	00a4      	lsls	r4, r4, #2
   214c8:	5934      	ldr	r4, [r6, r4]
   214ca:	46a7      	mov	pc, r4
   214cc:	4653      	mov	r3, sl
   214ce:	431c      	orrs	r4, r3
   214d0:	d000      	beq.n	214d4 <__aeabi_dmul+0xa0>
   214d2:	e087      	b.n	215e4 <__aeabi_dmul+0x1b0>
   214d4:	2500      	movs	r5, #0
   214d6:	46aa      	mov	sl, r5
   214d8:	46a8      	mov	r8, r5
   214da:	2408      	movs	r4, #8
   214dc:	2502      	movs	r5, #2
   214de:	e7d1      	b.n	21484 <__aeabi_dmul+0x50>
   214e0:	4649      	mov	r1, r9
   214e2:	2d02      	cmp	r5, #2
   214e4:	d06c      	beq.n	215c0 <__aeabi_dmul+0x18c>
   214e6:	2d03      	cmp	r5, #3
   214e8:	d100      	bne.n	214ec <__aeabi_dmul+0xb8>
   214ea:	e219      	b.n	21920 <__aeabi_dmul+0x4ec>
   214ec:	2d01      	cmp	r5, #1
   214ee:	d000      	beq.n	214f2 <__aeabi_dmul+0xbe>
   214f0:	e15a      	b.n	217a8 <__aeabi_dmul+0x374>
   214f2:	400d      	ands	r5, r1
   214f4:	b2ed      	uxtb	r5, r5
   214f6:	2400      	movs	r4, #0
   214f8:	46a9      	mov	r9, r5
   214fa:	2300      	movs	r3, #0
   214fc:	46a0      	mov	r8, r4
   214fe:	2000      	movs	r0, #0
   21500:	2100      	movs	r1, #0
   21502:	0325      	lsls	r5, r4, #12
   21504:	0d0a      	lsrs	r2, r1, #20
   21506:	051c      	lsls	r4, r3, #20
   21508:	0b2d      	lsrs	r5, r5, #12
   2150a:	0512      	lsls	r2, r2, #20
   2150c:	4b40      	ldr	r3, [pc, #256]	; (21610 <__aeabi_dmul+0x1dc>)
   2150e:	432a      	orrs	r2, r5
   21510:	4013      	ands	r3, r2
   21512:	4323      	orrs	r3, r4
   21514:	005b      	lsls	r3, r3, #1
   21516:	464c      	mov	r4, r9
   21518:	085b      	lsrs	r3, r3, #1
   2151a:	07e2      	lsls	r2, r4, #31
   2151c:	1c19      	adds	r1, r3, #0
   2151e:	4640      	mov	r0, r8
   21520:	4311      	orrs	r1, r2
   21522:	b007      	add	sp, #28
   21524:	bc3c      	pop	{r2, r3, r4, r5}
   21526:	4690      	mov	r8, r2
   21528:	4699      	mov	r9, r3
   2152a:	46a2      	mov	sl, r4
   2152c:	46ab      	mov	fp, r5
   2152e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21530:	4653      	mov	r3, sl
   21532:	4323      	orrs	r3, r4
   21534:	d050      	beq.n	215d8 <__aeabi_dmul+0x1a4>
   21536:	4653      	mov	r3, sl
   21538:	2b00      	cmp	r3, #0
   2153a:	d100      	bne.n	2153e <__aeabi_dmul+0x10a>
   2153c:	e186      	b.n	2184c <__aeabi_dmul+0x418>
   2153e:	4650      	mov	r0, sl
   21540:	f000 fec4 	bl	222cc <__clzsi2>
   21544:	1e03      	subs	r3, r0, #0
   21546:	2b27      	cmp	r3, #39	; 0x27
   21548:	dd00      	ble.n	2154c <__aeabi_dmul+0x118>
   2154a:	e178      	b.n	2183e <__aeabi_dmul+0x40a>
   2154c:	2128      	movs	r1, #40	; 0x28
   2154e:	1a0d      	subs	r5, r1, r0
   21550:	1c21      	adds	r1, r4, #0
   21552:	3b08      	subs	r3, #8
   21554:	4652      	mov	r2, sl
   21556:	40e9      	lsrs	r1, r5
   21558:	409a      	lsls	r2, r3
   2155a:	1c0d      	adds	r5, r1, #0
   2155c:	4315      	orrs	r5, r2
   2155e:	1c22      	adds	r2, r4, #0
   21560:	409a      	lsls	r2, r3
   21562:	46aa      	mov	sl, r5
   21564:	4690      	mov	r8, r2
   21566:	4b2b      	ldr	r3, [pc, #172]	; (21614 <__aeabi_dmul+0x1e0>)
   21568:	2400      	movs	r4, #0
   2156a:	1a1b      	subs	r3, r3, r0
   2156c:	9302      	str	r3, [sp, #8]
   2156e:	2500      	movs	r5, #0
   21570:	e788      	b.n	21484 <__aeabi_dmul+0x50>
   21572:	465b      	mov	r3, fp
   21574:	431e      	orrs	r6, r3
   21576:	2303      	movs	r3, #3
   21578:	2e00      	cmp	r6, #0
   2157a:	d19c      	bne.n	214b6 <__aeabi_dmul+0x82>
   2157c:	46b3      	mov	fp, r6
   2157e:	2200      	movs	r2, #0
   21580:	2302      	movs	r3, #2
   21582:	e798      	b.n	214b6 <__aeabi_dmul+0x82>
   21584:	465b      	mov	r3, fp
   21586:	4333      	orrs	r3, r6
   21588:	d021      	beq.n	215ce <__aeabi_dmul+0x19a>
   2158a:	4658      	mov	r0, fp
   2158c:	2800      	cmp	r0, #0
   2158e:	d100      	bne.n	21592 <__aeabi_dmul+0x15e>
   21590:	e150      	b.n	21834 <__aeabi_dmul+0x400>
   21592:	f000 fe9b 	bl	222cc <__clzsi2>
   21596:	2827      	cmp	r0, #39	; 0x27
   21598:	dd00      	ble.n	2159c <__aeabi_dmul+0x168>
   2159a:	e144      	b.n	21826 <__aeabi_dmul+0x3f2>
   2159c:	2128      	movs	r1, #40	; 0x28
   2159e:	1a0f      	subs	r7, r1, r0
   215a0:	1c02      	adds	r2, r0, #0
   215a2:	1c31      	adds	r1, r6, #0
   215a4:	3a08      	subs	r2, #8
   215a6:	465b      	mov	r3, fp
   215a8:	40f9      	lsrs	r1, r7
   215aa:	4093      	lsls	r3, r2
   215ac:	1c0f      	adds	r7, r1, #0
   215ae:	431f      	orrs	r7, r3
   215b0:	1c33      	adds	r3, r6, #0
   215b2:	4093      	lsls	r3, r2
   215b4:	46bb      	mov	fp, r7
   215b6:	1c1a      	adds	r2, r3, #0
   215b8:	4b16      	ldr	r3, [pc, #88]	; (21614 <__aeabi_dmul+0x1e0>)
   215ba:	1a18      	subs	r0, r3, r0
   215bc:	2300      	movs	r3, #0
   215be:	e77a      	b.n	214b6 <__aeabi_dmul+0x82>
   215c0:	2301      	movs	r3, #1
   215c2:	400b      	ands	r3, r1
   215c4:	2400      	movs	r4, #0
   215c6:	4699      	mov	r9, r3
   215c8:	46a0      	mov	r8, r4
   215ca:	4b0e      	ldr	r3, [pc, #56]	; (21604 <__aeabi_dmul+0x1d0>)
   215cc:	e797      	b.n	214fe <__aeabi_dmul+0xca>
   215ce:	2700      	movs	r7, #0
   215d0:	46bb      	mov	fp, r7
   215d2:	2200      	movs	r2, #0
   215d4:	2301      	movs	r3, #1
   215d6:	e76e      	b.n	214b6 <__aeabi_dmul+0x82>
   215d8:	2100      	movs	r1, #0
   215da:	2404      	movs	r4, #4
   215dc:	468a      	mov	sl, r1
   215de:	4688      	mov	r8, r1
   215e0:	2501      	movs	r5, #1
   215e2:	e74f      	b.n	21484 <__aeabi_dmul+0x50>
   215e4:	240c      	movs	r4, #12
   215e6:	2503      	movs	r5, #3
   215e8:	e74c      	b.n	21484 <__aeabi_dmul+0x50>
   215ea:	2301      	movs	r3, #1
   215ec:	425b      	negs	r3, r3
   215ee:	2500      	movs	r5, #0
   215f0:	4698      	mov	r8, r3
   215f2:	46a9      	mov	r9, r5
   215f4:	4c08      	ldr	r4, [pc, #32]	; (21618 <__aeabi_dmul+0x1e4>)
   215f6:	4b03      	ldr	r3, [pc, #12]	; (21604 <__aeabi_dmul+0x1d0>)
   215f8:	e781      	b.n	214fe <__aeabi_dmul+0xca>
   215fa:	46da      	mov	sl, fp
   215fc:	4690      	mov	r8, r2
   215fe:	9903      	ldr	r1, [sp, #12]
   21600:	1c1d      	adds	r5, r3, #0
   21602:	e76e      	b.n	214e2 <__aeabi_dmul+0xae>
   21604:	000007ff 	.word	0x000007ff
   21608:	fffffc01 	.word	0xfffffc01
   2160c:	00027360 	.word	0x00027360
   21610:	800fffff 	.word	0x800fffff
   21614:	fffffc0d 	.word	0xfffffc0d
   21618:	000fffff 	.word	0x000fffff
   2161c:	9f02      	ldr	r7, [sp, #8]
   2161e:	0c16      	lsrs	r6, r2, #16
   21620:	1838      	adds	r0, r7, r0
   21622:	9004      	str	r0, [sp, #16]
   21624:	4640      	mov	r0, r8
   21626:	0c07      	lsrs	r7, r0, #16
   21628:	0400      	lsls	r0, r0, #16
   2162a:	0c00      	lsrs	r0, r0, #16
   2162c:	0412      	lsls	r2, r2, #16
   2162e:	0c12      	lsrs	r2, r2, #16
   21630:	1c03      	adds	r3, r0, #0
   21632:	4353      	muls	r3, r2
   21634:	1c04      	adds	r4, r0, #0
   21636:	1c3d      	adds	r5, r7, #0
   21638:	4374      	muls	r4, r6
   2163a:	4355      	muls	r5, r2
   2163c:	4698      	mov	r8, r3
   2163e:	1c3b      	adds	r3, r7, #0
   21640:	4373      	muls	r3, r6
   21642:	1964      	adds	r4, r4, r5
   21644:	46a4      	mov	ip, r4
   21646:	4644      	mov	r4, r8
   21648:	9302      	str	r3, [sp, #8]
   2164a:	0c23      	lsrs	r3, r4, #16
   2164c:	4463      	add	r3, ip
   2164e:	429d      	cmp	r5, r3
   21650:	d904      	bls.n	2165c <__aeabi_dmul+0x228>
   21652:	9d02      	ldr	r5, [sp, #8]
   21654:	2480      	movs	r4, #128	; 0x80
   21656:	0264      	lsls	r4, r4, #9
   21658:	192d      	adds	r5, r5, r4
   2165a:	9502      	str	r5, [sp, #8]
   2165c:	0c1d      	lsrs	r5, r3, #16
   2165e:	9503      	str	r5, [sp, #12]
   21660:	4645      	mov	r5, r8
   21662:	042c      	lsls	r4, r5, #16
   21664:	041b      	lsls	r3, r3, #16
   21666:	0c24      	lsrs	r4, r4, #16
   21668:	191c      	adds	r4, r3, r4
   2166a:	9405      	str	r4, [sp, #20]
   2166c:	465c      	mov	r4, fp
   2166e:	0c23      	lsrs	r3, r4, #16
   21670:	1c05      	adds	r5, r0, #0
   21672:	4358      	muls	r0, r3
   21674:	0424      	lsls	r4, r4, #16
   21676:	0c24      	lsrs	r4, r4, #16
   21678:	4684      	mov	ip, r0
   2167a:	1c38      	adds	r0, r7, #0
   2167c:	4360      	muls	r0, r4
   2167e:	4365      	muls	r5, r4
   21680:	435f      	muls	r7, r3
   21682:	4681      	mov	r9, r0
   21684:	44cc      	add	ip, r9
   21686:	0c28      	lsrs	r0, r5, #16
   21688:	4460      	add	r0, ip
   2168a:	46bb      	mov	fp, r7
   2168c:	4581      	cmp	r9, r0
   2168e:	d902      	bls.n	21696 <__aeabi_dmul+0x262>
   21690:	2780      	movs	r7, #128	; 0x80
   21692:	027f      	lsls	r7, r7, #9
   21694:	44bb      	add	fp, r7
   21696:	042d      	lsls	r5, r5, #16
   21698:	0c07      	lsrs	r7, r0, #16
   2169a:	0c2d      	lsrs	r5, r5, #16
   2169c:	0400      	lsls	r0, r0, #16
   2169e:	1940      	adds	r0, r0, r5
   216a0:	4655      	mov	r5, sl
   216a2:	46bc      	mov	ip, r7
   216a4:	042f      	lsls	r7, r5, #16
   216a6:	44e3      	add	fp, ip
   216a8:	4684      	mov	ip, r0
   216aa:	0c28      	lsrs	r0, r5, #16
   216ac:	0c3d      	lsrs	r5, r7, #16
   216ae:	1c2f      	adds	r7, r5, #0
   216b0:	4357      	muls	r7, r2
   216b2:	46b8      	mov	r8, r7
   216b4:	1c2f      	adds	r7, r5, #0
   216b6:	4377      	muls	r7, r6
   216b8:	4342      	muls	r2, r0
   216ba:	46b9      	mov	r9, r7
   216bc:	4647      	mov	r7, r8
   216be:	0c3f      	lsrs	r7, r7, #16
   216c0:	4491      	add	r9, r2
   216c2:	46ba      	mov	sl, r7
   216c4:	44d1      	add	r9, sl
   216c6:	4346      	muls	r6, r0
   216c8:	454a      	cmp	r2, r9
   216ca:	d902      	bls.n	216d2 <__aeabi_dmul+0x29e>
   216cc:	2280      	movs	r2, #128	; 0x80
   216ce:	0252      	lsls	r2, r2, #9
   216d0:	18b6      	adds	r6, r6, r2
   216d2:	464f      	mov	r7, r9
   216d4:	0c3a      	lsrs	r2, r7, #16
   216d6:	18b6      	adds	r6, r6, r2
   216d8:	043a      	lsls	r2, r7, #16
   216da:	4647      	mov	r7, r8
   216dc:	043f      	lsls	r7, r7, #16
   216de:	0c3f      	lsrs	r7, r7, #16
   216e0:	46b8      	mov	r8, r7
   216e2:	1c2f      	adds	r7, r5, #0
   216e4:	4367      	muls	r7, r4
   216e6:	435d      	muls	r5, r3
   216e8:	4344      	muls	r4, r0
   216ea:	4358      	muls	r0, r3
   216ec:	1965      	adds	r5, r4, r5
   216ee:	9001      	str	r0, [sp, #4]
   216f0:	0c38      	lsrs	r0, r7, #16
   216f2:	182d      	adds	r5, r5, r0
   216f4:	4442      	add	r2, r8
   216f6:	46b8      	mov	r8, r7
   216f8:	42ac      	cmp	r4, r5
   216fa:	d904      	bls.n	21706 <__aeabi_dmul+0x2d2>
   216fc:	9801      	ldr	r0, [sp, #4]
   216fe:	2380      	movs	r3, #128	; 0x80
   21700:	025b      	lsls	r3, r3, #9
   21702:	18c0      	adds	r0, r0, r3
   21704:	9001      	str	r0, [sp, #4]
   21706:	9c03      	ldr	r4, [sp, #12]
   21708:	9f02      	ldr	r7, [sp, #8]
   2170a:	1c20      	adds	r0, r4, #0
   2170c:	4460      	add	r0, ip
   2170e:	19c0      	adds	r0, r0, r7
   21710:	4560      	cmp	r0, ip
   21712:	41a4      	sbcs	r4, r4
   21714:	4647      	mov	r7, r8
   21716:	4264      	negs	r4, r4
   21718:	46a4      	mov	ip, r4
   2171a:	042b      	lsls	r3, r5, #16
   2171c:	043c      	lsls	r4, r7, #16
   2171e:	4699      	mov	r9, r3
   21720:	0c24      	lsrs	r4, r4, #16
   21722:	444c      	add	r4, r9
   21724:	46a0      	mov	r8, r4
   21726:	44d8      	add	r8, fp
   21728:	1880      	adds	r0, r0, r2
   2172a:	46c2      	mov	sl, r8
   2172c:	44e2      	add	sl, ip
   2172e:	4290      	cmp	r0, r2
   21730:	4192      	sbcs	r2, r2
   21732:	4657      	mov	r7, sl
   21734:	4252      	negs	r2, r2
   21736:	4691      	mov	r9, r2
   21738:	19f2      	adds	r2, r6, r7
   2173a:	45e2      	cmp	sl, ip
   2173c:	41bf      	sbcs	r7, r7
   2173e:	427f      	negs	r7, r7
   21740:	464b      	mov	r3, r9
   21742:	46bc      	mov	ip, r7
   21744:	45d8      	cmp	r8, fp
   21746:	41bf      	sbcs	r7, r7
   21748:	18d4      	adds	r4, r2, r3
   2174a:	427f      	negs	r7, r7
   2174c:	4663      	mov	r3, ip
   2174e:	431f      	orrs	r7, r3
   21750:	0c2d      	lsrs	r5, r5, #16
   21752:	197f      	adds	r7, r7, r5
   21754:	42b2      	cmp	r2, r6
   21756:	4192      	sbcs	r2, r2
   21758:	454c      	cmp	r4, r9
   2175a:	41ad      	sbcs	r5, r5
   2175c:	4252      	negs	r2, r2
   2175e:	426d      	negs	r5, r5
   21760:	4315      	orrs	r5, r2
   21762:	9e01      	ldr	r6, [sp, #4]
   21764:	197d      	adds	r5, r7, r5
   21766:	19ab      	adds	r3, r5, r6
   21768:	0de2      	lsrs	r2, r4, #23
   2176a:	025b      	lsls	r3, r3, #9
   2176c:	9f05      	ldr	r7, [sp, #20]
   2176e:	4313      	orrs	r3, r2
   21770:	0242      	lsls	r2, r0, #9
   21772:	433a      	orrs	r2, r7
   21774:	469a      	mov	sl, r3
   21776:	1e53      	subs	r3, r2, #1
   21778:	419a      	sbcs	r2, r3
   2177a:	0dc3      	lsrs	r3, r0, #23
   2177c:	1c10      	adds	r0, r2, #0
   2177e:	4318      	orrs	r0, r3
   21780:	0264      	lsls	r4, r4, #9
   21782:	4320      	orrs	r0, r4
   21784:	4680      	mov	r8, r0
   21786:	4650      	mov	r0, sl
   21788:	01c0      	lsls	r0, r0, #7
   2178a:	d50d      	bpl.n	217a8 <__aeabi_dmul+0x374>
   2178c:	4645      	mov	r5, r8
   2178e:	2201      	movs	r2, #1
   21790:	4656      	mov	r6, sl
   21792:	9c04      	ldr	r4, [sp, #16]
   21794:	086b      	lsrs	r3, r5, #1
   21796:	402a      	ands	r2, r5
   21798:	431a      	orrs	r2, r3
   2179a:	07f3      	lsls	r3, r6, #31
   2179c:	3401      	adds	r4, #1
   2179e:	431a      	orrs	r2, r3
   217a0:	0876      	lsrs	r6, r6, #1
   217a2:	9404      	str	r4, [sp, #16]
   217a4:	4690      	mov	r8, r2
   217a6:	46b2      	mov	sl, r6
   217a8:	9e04      	ldr	r6, [sp, #16]
   217aa:	4f63      	ldr	r7, [pc, #396]	; (21938 <__aeabi_dmul+0x504>)
   217ac:	19f3      	adds	r3, r6, r7
   217ae:	2b00      	cmp	r3, #0
   217b0:	dd61      	ble.n	21876 <__aeabi_dmul+0x442>
   217b2:	4640      	mov	r0, r8
   217b4:	0740      	lsls	r0, r0, #29
   217b6:	d00b      	beq.n	217d0 <__aeabi_dmul+0x39c>
   217b8:	220f      	movs	r2, #15
   217ba:	4644      	mov	r4, r8
   217bc:	4022      	ands	r2, r4
   217be:	2a04      	cmp	r2, #4
   217c0:	d006      	beq.n	217d0 <__aeabi_dmul+0x39c>
   217c2:	4642      	mov	r2, r8
   217c4:	3204      	adds	r2, #4
   217c6:	4542      	cmp	r2, r8
   217c8:	4180      	sbcs	r0, r0
   217ca:	4240      	negs	r0, r0
   217cc:	4482      	add	sl, r0
   217ce:	4690      	mov	r8, r2
   217d0:	4655      	mov	r5, sl
   217d2:	01ed      	lsls	r5, r5, #7
   217d4:	d507      	bpl.n	217e6 <__aeabi_dmul+0x3b2>
   217d6:	4b59      	ldr	r3, [pc, #356]	; (2193c <__aeabi_dmul+0x508>)
   217d8:	4656      	mov	r6, sl
   217da:	9f04      	ldr	r7, [sp, #16]
   217dc:	2080      	movs	r0, #128	; 0x80
   217de:	401e      	ands	r6, r3
   217e0:	00c0      	lsls	r0, r0, #3
   217e2:	46b2      	mov	sl, r6
   217e4:	183b      	adds	r3, r7, r0
   217e6:	4a56      	ldr	r2, [pc, #344]	; (21940 <__aeabi_dmul+0x50c>)
   217e8:	4293      	cmp	r3, r2
   217ea:	dd00      	ble.n	217ee <__aeabi_dmul+0x3ba>
   217ec:	e6e8      	b.n	215c0 <__aeabi_dmul+0x18c>
   217ee:	4644      	mov	r4, r8
   217f0:	4655      	mov	r5, sl
   217f2:	08e2      	lsrs	r2, r4, #3
   217f4:	0768      	lsls	r0, r5, #29
   217f6:	4310      	orrs	r0, r2
   217f8:	2201      	movs	r2, #1
   217fa:	026c      	lsls	r4, r5, #9
   217fc:	055b      	lsls	r3, r3, #21
   217fe:	400a      	ands	r2, r1
   21800:	4680      	mov	r8, r0
   21802:	0b24      	lsrs	r4, r4, #12
   21804:	0d5b      	lsrs	r3, r3, #21
   21806:	4691      	mov	r9, r2
   21808:	e679      	b.n	214fe <__aeabi_dmul+0xca>
   2180a:	46da      	mov	sl, fp
   2180c:	4690      	mov	r8, r2
   2180e:	1c1d      	adds	r5, r3, #0
   21810:	e667      	b.n	214e2 <__aeabi_dmul+0xae>
   21812:	2480      	movs	r4, #128	; 0x80
   21814:	0324      	lsls	r4, r4, #12
   21816:	4657      	mov	r7, sl
   21818:	4227      	tst	r7, r4
   2181a:	d11c      	bne.n	21856 <__aeabi_dmul+0x422>
   2181c:	433c      	orrs	r4, r7
   2181e:	0324      	lsls	r4, r4, #12
   21820:	0b24      	lsrs	r4, r4, #12
   21822:	4b48      	ldr	r3, [pc, #288]	; (21944 <__aeabi_dmul+0x510>)
   21824:	e66b      	b.n	214fe <__aeabi_dmul+0xca>
   21826:	1c03      	adds	r3, r0, #0
   21828:	3b28      	subs	r3, #40	; 0x28
   2182a:	1c31      	adds	r1, r6, #0
   2182c:	4099      	lsls	r1, r3
   2182e:	468b      	mov	fp, r1
   21830:	2200      	movs	r2, #0
   21832:	e6c1      	b.n	215b8 <__aeabi_dmul+0x184>
   21834:	1c30      	adds	r0, r6, #0
   21836:	f000 fd49 	bl	222cc <__clzsi2>
   2183a:	3020      	adds	r0, #32
   2183c:	e6ab      	b.n	21596 <__aeabi_dmul+0x162>
   2183e:	3b28      	subs	r3, #40	; 0x28
   21840:	1c21      	adds	r1, r4, #0
   21842:	4099      	lsls	r1, r3
   21844:	2200      	movs	r2, #0
   21846:	468a      	mov	sl, r1
   21848:	4690      	mov	r8, r2
   2184a:	e68c      	b.n	21566 <__aeabi_dmul+0x132>
   2184c:	1c20      	adds	r0, r4, #0
   2184e:	f000 fd3d 	bl	222cc <__clzsi2>
   21852:	3020      	adds	r0, #32
   21854:	e676      	b.n	21544 <__aeabi_dmul+0x110>
   21856:	4658      	mov	r0, fp
   21858:	4220      	tst	r0, r4
   2185a:	d107      	bne.n	2186c <__aeabi_dmul+0x438>
   2185c:	4304      	orrs	r4, r0
   2185e:	9903      	ldr	r1, [sp, #12]
   21860:	0324      	lsls	r4, r4, #12
   21862:	0b24      	lsrs	r4, r4, #12
   21864:	4689      	mov	r9, r1
   21866:	4690      	mov	r8, r2
   21868:	4b36      	ldr	r3, [pc, #216]	; (21944 <__aeabi_dmul+0x510>)
   2186a:	e648      	b.n	214fe <__aeabi_dmul+0xca>
   2186c:	433c      	orrs	r4, r7
   2186e:	0324      	lsls	r4, r4, #12
   21870:	0b24      	lsrs	r4, r4, #12
   21872:	4b34      	ldr	r3, [pc, #208]	; (21944 <__aeabi_dmul+0x510>)
   21874:	e643      	b.n	214fe <__aeabi_dmul+0xca>
   21876:	4b34      	ldr	r3, [pc, #208]	; (21948 <__aeabi_dmul+0x514>)
   21878:	9e04      	ldr	r6, [sp, #16]
   2187a:	1b9b      	subs	r3, r3, r6
   2187c:	2b38      	cmp	r3, #56	; 0x38
   2187e:	dd06      	ble.n	2188e <__aeabi_dmul+0x45a>
   21880:	2301      	movs	r3, #1
   21882:	400b      	ands	r3, r1
   21884:	2400      	movs	r4, #0
   21886:	4699      	mov	r9, r3
   21888:	46a0      	mov	r8, r4
   2188a:	2300      	movs	r3, #0
   2188c:	e637      	b.n	214fe <__aeabi_dmul+0xca>
   2188e:	2b1f      	cmp	r3, #31
   21890:	dc25      	bgt.n	218de <__aeabi_dmul+0x4aa>
   21892:	9c04      	ldr	r4, [sp, #16]
   21894:	4d2d      	ldr	r5, [pc, #180]	; (2194c <__aeabi_dmul+0x518>)
   21896:	4646      	mov	r6, r8
   21898:	1960      	adds	r0, r4, r5
   2189a:	4652      	mov	r2, sl
   2189c:	4644      	mov	r4, r8
   2189e:	4086      	lsls	r6, r0
   218a0:	40dc      	lsrs	r4, r3
   218a2:	4082      	lsls	r2, r0
   218a4:	4657      	mov	r7, sl
   218a6:	1c30      	adds	r0, r6, #0
   218a8:	4322      	orrs	r2, r4
   218aa:	40df      	lsrs	r7, r3
   218ac:	1e44      	subs	r4, r0, #1
   218ae:	41a0      	sbcs	r0, r4
   218b0:	4302      	orrs	r2, r0
   218b2:	1c3b      	adds	r3, r7, #0
   218b4:	0754      	lsls	r4, r2, #29
   218b6:	d009      	beq.n	218cc <__aeabi_dmul+0x498>
   218b8:	200f      	movs	r0, #15
   218ba:	4010      	ands	r0, r2
   218bc:	2804      	cmp	r0, #4
   218be:	d005      	beq.n	218cc <__aeabi_dmul+0x498>
   218c0:	1d10      	adds	r0, r2, #4
   218c2:	4290      	cmp	r0, r2
   218c4:	4192      	sbcs	r2, r2
   218c6:	4252      	negs	r2, r2
   218c8:	189b      	adds	r3, r3, r2
   218ca:	1c02      	adds	r2, r0, #0
   218cc:	021d      	lsls	r5, r3, #8
   218ce:	d51a      	bpl.n	21906 <__aeabi_dmul+0x4d2>
   218d0:	2301      	movs	r3, #1
   218d2:	400b      	ands	r3, r1
   218d4:	2400      	movs	r4, #0
   218d6:	4699      	mov	r9, r3
   218d8:	46a0      	mov	r8, r4
   218da:	2301      	movs	r3, #1
   218dc:	e60f      	b.n	214fe <__aeabi_dmul+0xca>
   218de:	481c      	ldr	r0, [pc, #112]	; (21950 <__aeabi_dmul+0x51c>)
   218e0:	9c04      	ldr	r4, [sp, #16]
   218e2:	4655      	mov	r5, sl
   218e4:	1b00      	subs	r0, r0, r4
   218e6:	40c5      	lsrs	r5, r0
   218e8:	1c28      	adds	r0, r5, #0
   218ea:	2b20      	cmp	r3, #32
   218ec:	d016      	beq.n	2191c <__aeabi_dmul+0x4e8>
   218ee:	4e19      	ldr	r6, [pc, #100]	; (21954 <__aeabi_dmul+0x520>)
   218f0:	4657      	mov	r7, sl
   218f2:	19a2      	adds	r2, r4, r6
   218f4:	4097      	lsls	r7, r2
   218f6:	1c3a      	adds	r2, r7, #0
   218f8:	4643      	mov	r3, r8
   218fa:	431a      	orrs	r2, r3
   218fc:	1e53      	subs	r3, r2, #1
   218fe:	419a      	sbcs	r2, r3
   21900:	4302      	orrs	r2, r0
   21902:	2300      	movs	r3, #0
   21904:	e7d6      	b.n	218b4 <__aeabi_dmul+0x480>
   21906:	0758      	lsls	r0, r3, #29
   21908:	025b      	lsls	r3, r3, #9
   2190a:	08d2      	lsrs	r2, r2, #3
   2190c:	0b1c      	lsrs	r4, r3, #12
   2190e:	2301      	movs	r3, #1
   21910:	400b      	ands	r3, r1
   21912:	4310      	orrs	r0, r2
   21914:	4699      	mov	r9, r3
   21916:	4680      	mov	r8, r0
   21918:	2300      	movs	r3, #0
   2191a:	e5f0      	b.n	214fe <__aeabi_dmul+0xca>
   2191c:	2200      	movs	r2, #0
   2191e:	e7eb      	b.n	218f8 <__aeabi_dmul+0x4c4>
   21920:	2480      	movs	r4, #128	; 0x80
   21922:	0324      	lsls	r4, r4, #12
   21924:	4650      	mov	r0, sl
   21926:	2301      	movs	r3, #1
   21928:	4304      	orrs	r4, r0
   2192a:	4019      	ands	r1, r3
   2192c:	0324      	lsls	r4, r4, #12
   2192e:	0b24      	lsrs	r4, r4, #12
   21930:	4689      	mov	r9, r1
   21932:	4b04      	ldr	r3, [pc, #16]	; (21944 <__aeabi_dmul+0x510>)
   21934:	e5e3      	b.n	214fe <__aeabi_dmul+0xca>
   21936:	46c0      	nop			; (mov r8, r8)
   21938:	000003ff 	.word	0x000003ff
   2193c:	feffffff 	.word	0xfeffffff
   21940:	000007fe 	.word	0x000007fe
   21944:	000007ff 	.word	0x000007ff
   21948:	fffffc02 	.word	0xfffffc02
   2194c:	0000041e 	.word	0x0000041e
   21950:	fffffbe2 	.word	0xfffffbe2
   21954:	0000043e 	.word	0x0000043e

00021958 <__aeabi_dsub>:
   21958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2195a:	465f      	mov	r7, fp
   2195c:	4656      	mov	r6, sl
   2195e:	4644      	mov	r4, r8
   21960:	464d      	mov	r5, r9
   21962:	b4f0      	push	{r4, r5, r6, r7}
   21964:	030c      	lsls	r4, r1, #12
   21966:	004d      	lsls	r5, r1, #1
   21968:	0fcf      	lsrs	r7, r1, #31
   2196a:	0a61      	lsrs	r1, r4, #9
   2196c:	0f44      	lsrs	r4, r0, #29
   2196e:	4321      	orrs	r1, r4
   21970:	00c4      	lsls	r4, r0, #3
   21972:	0318      	lsls	r0, r3, #12
   21974:	0fde      	lsrs	r6, r3, #31
   21976:	4680      	mov	r8, r0
   21978:	46b4      	mov	ip, r6
   2197a:	4646      	mov	r6, r8
   2197c:	0058      	lsls	r0, r3, #1
   2197e:	0a76      	lsrs	r6, r6, #9
   21980:	0f53      	lsrs	r3, r2, #29
   21982:	4333      	orrs	r3, r6
   21984:	00d6      	lsls	r6, r2, #3
   21986:	4ad1      	ldr	r2, [pc, #836]	; (21ccc <__aeabi_dsub+0x374>)
   21988:	0d6d      	lsrs	r5, r5, #21
   2198a:	46ba      	mov	sl, r7
   2198c:	0d40      	lsrs	r0, r0, #21
   2198e:	46b3      	mov	fp, r6
   21990:	4290      	cmp	r0, r2
   21992:	d100      	bne.n	21996 <__aeabi_dsub+0x3e>
   21994:	e0f5      	b.n	21b82 <__aeabi_dsub+0x22a>
   21996:	4662      	mov	r2, ip
   21998:	2601      	movs	r6, #1
   2199a:	4072      	eors	r2, r6
   2199c:	4694      	mov	ip, r2
   2199e:	4567      	cmp	r7, ip
   219a0:	d100      	bne.n	219a4 <__aeabi_dsub+0x4c>
   219a2:	e0ab      	b.n	21afc <__aeabi_dsub+0x1a4>
   219a4:	1a2f      	subs	r7, r5, r0
   219a6:	2f00      	cmp	r7, #0
   219a8:	dc00      	bgt.n	219ac <__aeabi_dsub+0x54>
   219aa:	e111      	b.n	21bd0 <__aeabi_dsub+0x278>
   219ac:	2800      	cmp	r0, #0
   219ae:	d13e      	bne.n	21a2e <__aeabi_dsub+0xd6>
   219b0:	4658      	mov	r0, fp
   219b2:	4318      	orrs	r0, r3
   219b4:	d000      	beq.n	219b8 <__aeabi_dsub+0x60>
   219b6:	e0f1      	b.n	21b9c <__aeabi_dsub+0x244>
   219b8:	0760      	lsls	r0, r4, #29
   219ba:	d100      	bne.n	219be <__aeabi_dsub+0x66>
   219bc:	e097      	b.n	21aee <__aeabi_dsub+0x196>
   219be:	230f      	movs	r3, #15
   219c0:	4023      	ands	r3, r4
   219c2:	2b04      	cmp	r3, #4
   219c4:	d100      	bne.n	219c8 <__aeabi_dsub+0x70>
   219c6:	e122      	b.n	21c0e <__aeabi_dsub+0x2b6>
   219c8:	1d22      	adds	r2, r4, #4
   219ca:	42a2      	cmp	r2, r4
   219cc:	41a4      	sbcs	r4, r4
   219ce:	4264      	negs	r4, r4
   219d0:	2380      	movs	r3, #128	; 0x80
   219d2:	1909      	adds	r1, r1, r4
   219d4:	041b      	lsls	r3, r3, #16
   219d6:	2701      	movs	r7, #1
   219d8:	4650      	mov	r0, sl
   219da:	400b      	ands	r3, r1
   219dc:	4007      	ands	r7, r0
   219de:	1c14      	adds	r4, r2, #0
   219e0:	2b00      	cmp	r3, #0
   219e2:	d100      	bne.n	219e6 <__aeabi_dsub+0x8e>
   219e4:	e079      	b.n	21ada <__aeabi_dsub+0x182>
   219e6:	4bb9      	ldr	r3, [pc, #740]	; (21ccc <__aeabi_dsub+0x374>)
   219e8:	3501      	adds	r5, #1
   219ea:	429d      	cmp	r5, r3
   219ec:	d100      	bne.n	219f0 <__aeabi_dsub+0x98>
   219ee:	e10b      	b.n	21c08 <__aeabi_dsub+0x2b0>
   219f0:	4bb7      	ldr	r3, [pc, #732]	; (21cd0 <__aeabi_dsub+0x378>)
   219f2:	08e4      	lsrs	r4, r4, #3
   219f4:	4019      	ands	r1, r3
   219f6:	0748      	lsls	r0, r1, #29
   219f8:	0249      	lsls	r1, r1, #9
   219fa:	4304      	orrs	r4, r0
   219fc:	0b0b      	lsrs	r3, r1, #12
   219fe:	2000      	movs	r0, #0
   21a00:	2100      	movs	r1, #0
   21a02:	031b      	lsls	r3, r3, #12
   21a04:	0b1a      	lsrs	r2, r3, #12
   21a06:	0d0b      	lsrs	r3, r1, #20
   21a08:	056d      	lsls	r5, r5, #21
   21a0a:	051b      	lsls	r3, r3, #20
   21a0c:	4313      	orrs	r3, r2
   21a0e:	086a      	lsrs	r2, r5, #1
   21a10:	4db0      	ldr	r5, [pc, #704]	; (21cd4 <__aeabi_dsub+0x37c>)
   21a12:	07ff      	lsls	r7, r7, #31
   21a14:	401d      	ands	r5, r3
   21a16:	4315      	orrs	r5, r2
   21a18:	006d      	lsls	r5, r5, #1
   21a1a:	086d      	lsrs	r5, r5, #1
   21a1c:	1c29      	adds	r1, r5, #0
   21a1e:	4339      	orrs	r1, r7
   21a20:	1c20      	adds	r0, r4, #0
   21a22:	bc3c      	pop	{r2, r3, r4, r5}
   21a24:	4690      	mov	r8, r2
   21a26:	4699      	mov	r9, r3
   21a28:	46a2      	mov	sl, r4
   21a2a:	46ab      	mov	fp, r5
   21a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21a2e:	48a7      	ldr	r0, [pc, #668]	; (21ccc <__aeabi_dsub+0x374>)
   21a30:	4285      	cmp	r5, r0
   21a32:	d0c1      	beq.n	219b8 <__aeabi_dsub+0x60>
   21a34:	2080      	movs	r0, #128	; 0x80
   21a36:	0400      	lsls	r0, r0, #16
   21a38:	4303      	orrs	r3, r0
   21a3a:	2f38      	cmp	r7, #56	; 0x38
   21a3c:	dd00      	ble.n	21a40 <__aeabi_dsub+0xe8>
   21a3e:	e0fd      	b.n	21c3c <__aeabi_dsub+0x2e4>
   21a40:	2f1f      	cmp	r7, #31
   21a42:	dd00      	ble.n	21a46 <__aeabi_dsub+0xee>
   21a44:	e131      	b.n	21caa <__aeabi_dsub+0x352>
   21a46:	2020      	movs	r0, #32
   21a48:	1bc0      	subs	r0, r0, r7
   21a4a:	1c1a      	adds	r2, r3, #0
   21a4c:	465e      	mov	r6, fp
   21a4e:	4082      	lsls	r2, r0
   21a50:	40fe      	lsrs	r6, r7
   21a52:	4332      	orrs	r2, r6
   21a54:	4694      	mov	ip, r2
   21a56:	465a      	mov	r2, fp
   21a58:	4082      	lsls	r2, r0
   21a5a:	1c10      	adds	r0, r2, #0
   21a5c:	1e42      	subs	r2, r0, #1
   21a5e:	4190      	sbcs	r0, r2
   21a60:	40fb      	lsrs	r3, r7
   21a62:	4662      	mov	r2, ip
   21a64:	4302      	orrs	r2, r0
   21a66:	1c1f      	adds	r7, r3, #0
   21a68:	1aa2      	subs	r2, r4, r2
   21a6a:	4294      	cmp	r4, r2
   21a6c:	41a4      	sbcs	r4, r4
   21a6e:	4264      	negs	r4, r4
   21a70:	1bc9      	subs	r1, r1, r7
   21a72:	1b09      	subs	r1, r1, r4
   21a74:	1c14      	adds	r4, r2, #0
   21a76:	020a      	lsls	r2, r1, #8
   21a78:	d59e      	bpl.n	219b8 <__aeabi_dsub+0x60>
   21a7a:	0249      	lsls	r1, r1, #9
   21a7c:	0a4f      	lsrs	r7, r1, #9
   21a7e:	2f00      	cmp	r7, #0
   21a80:	d100      	bne.n	21a84 <__aeabi_dsub+0x12c>
   21a82:	e0d6      	b.n	21c32 <__aeabi_dsub+0x2da>
   21a84:	1c38      	adds	r0, r7, #0
   21a86:	f000 fc21 	bl	222cc <__clzsi2>
   21a8a:	1c02      	adds	r2, r0, #0
   21a8c:	3a08      	subs	r2, #8
   21a8e:	2a1f      	cmp	r2, #31
   21a90:	dd00      	ble.n	21a94 <__aeabi_dsub+0x13c>
   21a92:	e0c3      	b.n	21c1c <__aeabi_dsub+0x2c4>
   21a94:	2128      	movs	r1, #40	; 0x28
   21a96:	1c23      	adds	r3, r4, #0
   21a98:	1a09      	subs	r1, r1, r0
   21a9a:	4097      	lsls	r7, r2
   21a9c:	40cb      	lsrs	r3, r1
   21a9e:	431f      	orrs	r7, r3
   21aa0:	4094      	lsls	r4, r2
   21aa2:	4295      	cmp	r5, r2
   21aa4:	dd00      	ble.n	21aa8 <__aeabi_dsub+0x150>
   21aa6:	e0c0      	b.n	21c2a <__aeabi_dsub+0x2d2>
   21aa8:	1b55      	subs	r5, r2, r5
   21aaa:	1c69      	adds	r1, r5, #1
   21aac:	291f      	cmp	r1, #31
   21aae:	dd00      	ble.n	21ab2 <__aeabi_dsub+0x15a>
   21ab0:	e0ea      	b.n	21c88 <__aeabi_dsub+0x330>
   21ab2:	221f      	movs	r2, #31
   21ab4:	1b55      	subs	r5, r2, r5
   21ab6:	1c3b      	adds	r3, r7, #0
   21ab8:	1c22      	adds	r2, r4, #0
   21aba:	40ab      	lsls	r3, r5
   21abc:	40ca      	lsrs	r2, r1
   21abe:	40ac      	lsls	r4, r5
   21ac0:	1e65      	subs	r5, r4, #1
   21ac2:	41ac      	sbcs	r4, r5
   21ac4:	4313      	orrs	r3, r2
   21ac6:	40cf      	lsrs	r7, r1
   21ac8:	431c      	orrs	r4, r3
   21aca:	1c39      	adds	r1, r7, #0
   21acc:	2500      	movs	r5, #0
   21ace:	e773      	b.n	219b8 <__aeabi_dsub+0x60>
   21ad0:	2408      	movs	r4, #8
   21ad2:	4981      	ldr	r1, [pc, #516]	; (21cd8 <__aeabi_dsub+0x380>)
   21ad4:	4d7d      	ldr	r5, [pc, #500]	; (21ccc <__aeabi_dsub+0x374>)
   21ad6:	2700      	movs	r7, #0
   21ad8:	4264      	negs	r4, r4
   21ada:	4b7c      	ldr	r3, [pc, #496]	; (21ccc <__aeabi_dsub+0x374>)
   21adc:	0748      	lsls	r0, r1, #29
   21ade:	08e4      	lsrs	r4, r4, #3
   21ae0:	4304      	orrs	r4, r0
   21ae2:	08c9      	lsrs	r1, r1, #3
   21ae4:	429d      	cmp	r5, r3
   21ae6:	d050      	beq.n	21b8a <__aeabi_dsub+0x232>
   21ae8:	0309      	lsls	r1, r1, #12
   21aea:	0b0b      	lsrs	r3, r1, #12
   21aec:	e787      	b.n	219fe <__aeabi_dsub+0xa6>
   21aee:	2380      	movs	r3, #128	; 0x80
   21af0:	041b      	lsls	r3, r3, #16
   21af2:	2701      	movs	r7, #1
   21af4:	4652      	mov	r2, sl
   21af6:	400b      	ands	r3, r1
   21af8:	4017      	ands	r7, r2
   21afa:	e771      	b.n	219e0 <__aeabi_dsub+0x88>
   21afc:	1a2a      	subs	r2, r5, r0
   21afe:	4694      	mov	ip, r2
   21b00:	2a00      	cmp	r2, #0
   21b02:	dc00      	bgt.n	21b06 <__aeabi_dsub+0x1ae>
   21b04:	e0a1      	b.n	21c4a <__aeabi_dsub+0x2f2>
   21b06:	2800      	cmp	r0, #0
   21b08:	d054      	beq.n	21bb4 <__aeabi_dsub+0x25c>
   21b0a:	4870      	ldr	r0, [pc, #448]	; (21ccc <__aeabi_dsub+0x374>)
   21b0c:	4285      	cmp	r5, r0
   21b0e:	d100      	bne.n	21b12 <__aeabi_dsub+0x1ba>
   21b10:	e752      	b.n	219b8 <__aeabi_dsub+0x60>
   21b12:	2080      	movs	r0, #128	; 0x80
   21b14:	0400      	lsls	r0, r0, #16
   21b16:	4303      	orrs	r3, r0
   21b18:	4660      	mov	r0, ip
   21b1a:	2838      	cmp	r0, #56	; 0x38
   21b1c:	dd00      	ble.n	21b20 <__aeabi_dsub+0x1c8>
   21b1e:	e110      	b.n	21d42 <__aeabi_dsub+0x3ea>
   21b20:	281f      	cmp	r0, #31
   21b22:	dd00      	ble.n	21b26 <__aeabi_dsub+0x1ce>
   21b24:	e159      	b.n	21dda <__aeabi_dsub+0x482>
   21b26:	4662      	mov	r2, ip
   21b28:	2020      	movs	r0, #32
   21b2a:	1a80      	subs	r0, r0, r2
   21b2c:	1c1e      	adds	r6, r3, #0
   21b2e:	4086      	lsls	r6, r0
   21b30:	46b1      	mov	r9, r6
   21b32:	465e      	mov	r6, fp
   21b34:	40d6      	lsrs	r6, r2
   21b36:	464a      	mov	r2, r9
   21b38:	4332      	orrs	r2, r6
   21b3a:	465e      	mov	r6, fp
   21b3c:	4086      	lsls	r6, r0
   21b3e:	4690      	mov	r8, r2
   21b40:	1c30      	adds	r0, r6, #0
   21b42:	1e42      	subs	r2, r0, #1
   21b44:	4190      	sbcs	r0, r2
   21b46:	4642      	mov	r2, r8
   21b48:	4302      	orrs	r2, r0
   21b4a:	4660      	mov	r0, ip
   21b4c:	40c3      	lsrs	r3, r0
   21b4e:	1912      	adds	r2, r2, r4
   21b50:	42a2      	cmp	r2, r4
   21b52:	41a4      	sbcs	r4, r4
   21b54:	4264      	negs	r4, r4
   21b56:	1859      	adds	r1, r3, r1
   21b58:	1909      	adds	r1, r1, r4
   21b5a:	1c14      	adds	r4, r2, #0
   21b5c:	0208      	lsls	r0, r1, #8
   21b5e:	d400      	bmi.n	21b62 <__aeabi_dsub+0x20a>
   21b60:	e72a      	b.n	219b8 <__aeabi_dsub+0x60>
   21b62:	4b5a      	ldr	r3, [pc, #360]	; (21ccc <__aeabi_dsub+0x374>)
   21b64:	3501      	adds	r5, #1
   21b66:	429d      	cmp	r5, r3
   21b68:	d100      	bne.n	21b6c <__aeabi_dsub+0x214>
   21b6a:	e133      	b.n	21dd4 <__aeabi_dsub+0x47c>
   21b6c:	4b58      	ldr	r3, [pc, #352]	; (21cd0 <__aeabi_dsub+0x378>)
   21b6e:	0860      	lsrs	r0, r4, #1
   21b70:	4019      	ands	r1, r3
   21b72:	2301      	movs	r3, #1
   21b74:	4023      	ands	r3, r4
   21b76:	1c1c      	adds	r4, r3, #0
   21b78:	4304      	orrs	r4, r0
   21b7a:	07cb      	lsls	r3, r1, #31
   21b7c:	431c      	orrs	r4, r3
   21b7e:	0849      	lsrs	r1, r1, #1
   21b80:	e71a      	b.n	219b8 <__aeabi_dsub+0x60>
   21b82:	431e      	orrs	r6, r3
   21b84:	d000      	beq.n	21b88 <__aeabi_dsub+0x230>
   21b86:	e70a      	b.n	2199e <__aeabi_dsub+0x46>
   21b88:	e705      	b.n	21996 <__aeabi_dsub+0x3e>
   21b8a:	1c23      	adds	r3, r4, #0
   21b8c:	430b      	orrs	r3, r1
   21b8e:	d03b      	beq.n	21c08 <__aeabi_dsub+0x2b0>
   21b90:	2380      	movs	r3, #128	; 0x80
   21b92:	031b      	lsls	r3, r3, #12
   21b94:	430b      	orrs	r3, r1
   21b96:	031b      	lsls	r3, r3, #12
   21b98:	0b1b      	lsrs	r3, r3, #12
   21b9a:	e730      	b.n	219fe <__aeabi_dsub+0xa6>
   21b9c:	3f01      	subs	r7, #1
   21b9e:	2f00      	cmp	r7, #0
   21ba0:	d16d      	bne.n	21c7e <__aeabi_dsub+0x326>
   21ba2:	465e      	mov	r6, fp
   21ba4:	1ba2      	subs	r2, r4, r6
   21ba6:	4294      	cmp	r4, r2
   21ba8:	41a4      	sbcs	r4, r4
   21baa:	4264      	negs	r4, r4
   21bac:	1ac9      	subs	r1, r1, r3
   21bae:	1b09      	subs	r1, r1, r4
   21bb0:	1c14      	adds	r4, r2, #0
   21bb2:	e760      	b.n	21a76 <__aeabi_dsub+0x11e>
   21bb4:	4658      	mov	r0, fp
   21bb6:	4318      	orrs	r0, r3
   21bb8:	d100      	bne.n	21bbc <__aeabi_dsub+0x264>
   21bba:	e6fd      	b.n	219b8 <__aeabi_dsub+0x60>
   21bbc:	2601      	movs	r6, #1
   21bbe:	4276      	negs	r6, r6
   21bc0:	44b4      	add	ip, r6
   21bc2:	4660      	mov	r0, ip
   21bc4:	2800      	cmp	r0, #0
   21bc6:	d000      	beq.n	21bca <__aeabi_dsub+0x272>
   21bc8:	e0d2      	b.n	21d70 <__aeabi_dsub+0x418>
   21bca:	465e      	mov	r6, fp
   21bcc:	1932      	adds	r2, r6, r4
   21bce:	e7bf      	b.n	21b50 <__aeabi_dsub+0x1f8>
   21bd0:	2f00      	cmp	r7, #0
   21bd2:	d000      	beq.n	21bd6 <__aeabi_dsub+0x27e>
   21bd4:	e082      	b.n	21cdc <__aeabi_dsub+0x384>
   21bd6:	1c68      	adds	r0, r5, #1
   21bd8:	0540      	lsls	r0, r0, #21
   21bda:	0d40      	lsrs	r0, r0, #21
   21bdc:	2801      	cmp	r0, #1
   21bde:	dc00      	bgt.n	21be2 <__aeabi_dsub+0x28a>
   21be0:	e0ea      	b.n	21db8 <__aeabi_dsub+0x460>
   21be2:	465a      	mov	r2, fp
   21be4:	1aa2      	subs	r2, r4, r2
   21be6:	4294      	cmp	r4, r2
   21be8:	41bf      	sbcs	r7, r7
   21bea:	1ac8      	subs	r0, r1, r3
   21bec:	427f      	negs	r7, r7
   21bee:	1bc7      	subs	r7, r0, r7
   21bf0:	023e      	lsls	r6, r7, #8
   21bf2:	d400      	bmi.n	21bf6 <__aeabi_dsub+0x29e>
   21bf4:	e09a      	b.n	21d2c <__aeabi_dsub+0x3d4>
   21bf6:	4658      	mov	r0, fp
   21bf8:	1b04      	subs	r4, r0, r4
   21bfa:	45a3      	cmp	fp, r4
   21bfc:	4192      	sbcs	r2, r2
   21bfe:	1a59      	subs	r1, r3, r1
   21c00:	4252      	negs	r2, r2
   21c02:	1a8f      	subs	r7, r1, r2
   21c04:	46e2      	mov	sl, ip
   21c06:	e73a      	b.n	21a7e <__aeabi_dsub+0x126>
   21c08:	2300      	movs	r3, #0
   21c0a:	2400      	movs	r4, #0
   21c0c:	e6f7      	b.n	219fe <__aeabi_dsub+0xa6>
   21c0e:	2380      	movs	r3, #128	; 0x80
   21c10:	041b      	lsls	r3, r3, #16
   21c12:	2701      	movs	r7, #1
   21c14:	4656      	mov	r6, sl
   21c16:	400b      	ands	r3, r1
   21c18:	4037      	ands	r7, r6
   21c1a:	e6e1      	b.n	219e0 <__aeabi_dsub+0x88>
   21c1c:	1c27      	adds	r7, r4, #0
   21c1e:	3828      	subs	r0, #40	; 0x28
   21c20:	4087      	lsls	r7, r0
   21c22:	2400      	movs	r4, #0
   21c24:	4295      	cmp	r5, r2
   21c26:	dc00      	bgt.n	21c2a <__aeabi_dsub+0x2d2>
   21c28:	e73e      	b.n	21aa8 <__aeabi_dsub+0x150>
   21c2a:	4929      	ldr	r1, [pc, #164]	; (21cd0 <__aeabi_dsub+0x378>)
   21c2c:	1aad      	subs	r5, r5, r2
   21c2e:	4039      	ands	r1, r7
   21c30:	e6c2      	b.n	219b8 <__aeabi_dsub+0x60>
   21c32:	1c20      	adds	r0, r4, #0
   21c34:	f000 fb4a 	bl	222cc <__clzsi2>
   21c38:	3020      	adds	r0, #32
   21c3a:	e726      	b.n	21a8a <__aeabi_dsub+0x132>
   21c3c:	465a      	mov	r2, fp
   21c3e:	431a      	orrs	r2, r3
   21c40:	1e53      	subs	r3, r2, #1
   21c42:	419a      	sbcs	r2, r3
   21c44:	b2d2      	uxtb	r2, r2
   21c46:	2700      	movs	r7, #0
   21c48:	e70e      	b.n	21a68 <__aeabi_dsub+0x110>
   21c4a:	2a00      	cmp	r2, #0
   21c4c:	d000      	beq.n	21c50 <__aeabi_dsub+0x2f8>
   21c4e:	e0e0      	b.n	21e12 <__aeabi_dsub+0x4ba>
   21c50:	1c68      	adds	r0, r5, #1
   21c52:	0546      	lsls	r6, r0, #21
   21c54:	0d76      	lsrs	r6, r6, #21
   21c56:	2e01      	cmp	r6, #1
   21c58:	dc00      	bgt.n	21c5c <__aeabi_dsub+0x304>
   21c5a:	e092      	b.n	21d82 <__aeabi_dsub+0x42a>
   21c5c:	4d1b      	ldr	r5, [pc, #108]	; (21ccc <__aeabi_dsub+0x374>)
   21c5e:	42a8      	cmp	r0, r5
   21c60:	d100      	bne.n	21c64 <__aeabi_dsub+0x30c>
   21c62:	e0f7      	b.n	21e54 <__aeabi_dsub+0x4fc>
   21c64:	465e      	mov	r6, fp
   21c66:	1932      	adds	r2, r6, r4
   21c68:	42a2      	cmp	r2, r4
   21c6a:	41a4      	sbcs	r4, r4
   21c6c:	4264      	negs	r4, r4
   21c6e:	1859      	adds	r1, r3, r1
   21c70:	1909      	adds	r1, r1, r4
   21c72:	07cc      	lsls	r4, r1, #31
   21c74:	0852      	lsrs	r2, r2, #1
   21c76:	4314      	orrs	r4, r2
   21c78:	0849      	lsrs	r1, r1, #1
   21c7a:	1c05      	adds	r5, r0, #0
   21c7c:	e69c      	b.n	219b8 <__aeabi_dsub+0x60>
   21c7e:	4813      	ldr	r0, [pc, #76]	; (21ccc <__aeabi_dsub+0x374>)
   21c80:	4285      	cmp	r5, r0
   21c82:	d000      	beq.n	21c86 <__aeabi_dsub+0x32e>
   21c84:	e6d9      	b.n	21a3a <__aeabi_dsub+0xe2>
   21c86:	e697      	b.n	219b8 <__aeabi_dsub+0x60>
   21c88:	1c2b      	adds	r3, r5, #0
   21c8a:	3b1f      	subs	r3, #31
   21c8c:	1c3e      	adds	r6, r7, #0
   21c8e:	40de      	lsrs	r6, r3
   21c90:	1c33      	adds	r3, r6, #0
   21c92:	2920      	cmp	r1, #32
   21c94:	d071      	beq.n	21d7a <__aeabi_dsub+0x422>
   21c96:	223f      	movs	r2, #63	; 0x3f
   21c98:	1b55      	subs	r5, r2, r5
   21c9a:	40af      	lsls	r7, r5
   21c9c:	433c      	orrs	r4, r7
   21c9e:	1e60      	subs	r0, r4, #1
   21ca0:	4184      	sbcs	r4, r0
   21ca2:	431c      	orrs	r4, r3
   21ca4:	2100      	movs	r1, #0
   21ca6:	2500      	movs	r5, #0
   21ca8:	e686      	b.n	219b8 <__aeabi_dsub+0x60>
   21caa:	1c38      	adds	r0, r7, #0
   21cac:	3820      	subs	r0, #32
   21cae:	1c1e      	adds	r6, r3, #0
   21cb0:	40c6      	lsrs	r6, r0
   21cb2:	1c30      	adds	r0, r6, #0
   21cb4:	2f20      	cmp	r7, #32
   21cb6:	d062      	beq.n	21d7e <__aeabi_dsub+0x426>
   21cb8:	2240      	movs	r2, #64	; 0x40
   21cba:	1bd7      	subs	r7, r2, r7
   21cbc:	40bb      	lsls	r3, r7
   21cbe:	465a      	mov	r2, fp
   21cc0:	431a      	orrs	r2, r3
   21cc2:	1e53      	subs	r3, r2, #1
   21cc4:	419a      	sbcs	r2, r3
   21cc6:	4302      	orrs	r2, r0
   21cc8:	2700      	movs	r7, #0
   21cca:	e6cd      	b.n	21a68 <__aeabi_dsub+0x110>
   21ccc:	000007ff 	.word	0x000007ff
   21cd0:	ff7fffff 	.word	0xff7fffff
   21cd4:	800fffff 	.word	0x800fffff
   21cd8:	007fffff 	.word	0x007fffff
   21cdc:	2d00      	cmp	r5, #0
   21cde:	d037      	beq.n	21d50 <__aeabi_dsub+0x3f8>
   21ce0:	4db6      	ldr	r5, [pc, #728]	; (21fbc <__aeabi_dsub+0x664>)
   21ce2:	42a8      	cmp	r0, r5
   21ce4:	d100      	bne.n	21ce8 <__aeabi_dsub+0x390>
   21ce6:	e08f      	b.n	21e08 <__aeabi_dsub+0x4b0>
   21ce8:	2580      	movs	r5, #128	; 0x80
   21cea:	042d      	lsls	r5, r5, #16
   21cec:	427f      	negs	r7, r7
   21cee:	4329      	orrs	r1, r5
   21cf0:	2f38      	cmp	r7, #56	; 0x38
   21cf2:	dd00      	ble.n	21cf6 <__aeabi_dsub+0x39e>
   21cf4:	e0a8      	b.n	21e48 <__aeabi_dsub+0x4f0>
   21cf6:	2f1f      	cmp	r7, #31
   21cf8:	dd00      	ble.n	21cfc <__aeabi_dsub+0x3a4>
   21cfa:	e124      	b.n	21f46 <__aeabi_dsub+0x5ee>
   21cfc:	2520      	movs	r5, #32
   21cfe:	1bed      	subs	r5, r5, r7
   21d00:	1c0e      	adds	r6, r1, #0
   21d02:	40ae      	lsls	r6, r5
   21d04:	46b0      	mov	r8, r6
   21d06:	1c26      	adds	r6, r4, #0
   21d08:	40fe      	lsrs	r6, r7
   21d0a:	4642      	mov	r2, r8
   21d0c:	40ac      	lsls	r4, r5
   21d0e:	4316      	orrs	r6, r2
   21d10:	1e65      	subs	r5, r4, #1
   21d12:	41ac      	sbcs	r4, r5
   21d14:	4334      	orrs	r4, r6
   21d16:	40f9      	lsrs	r1, r7
   21d18:	465a      	mov	r2, fp
   21d1a:	1b14      	subs	r4, r2, r4
   21d1c:	45a3      	cmp	fp, r4
   21d1e:	4192      	sbcs	r2, r2
   21d20:	1a5b      	subs	r3, r3, r1
   21d22:	4252      	negs	r2, r2
   21d24:	1a99      	subs	r1, r3, r2
   21d26:	1c05      	adds	r5, r0, #0
   21d28:	46e2      	mov	sl, ip
   21d2a:	e6a4      	b.n	21a76 <__aeabi_dsub+0x11e>
   21d2c:	1c13      	adds	r3, r2, #0
   21d2e:	433b      	orrs	r3, r7
   21d30:	1c14      	adds	r4, r2, #0
   21d32:	2b00      	cmp	r3, #0
   21d34:	d000      	beq.n	21d38 <__aeabi_dsub+0x3e0>
   21d36:	e6a2      	b.n	21a7e <__aeabi_dsub+0x126>
   21d38:	2700      	movs	r7, #0
   21d3a:	2100      	movs	r1, #0
   21d3c:	2400      	movs	r4, #0
   21d3e:	2500      	movs	r5, #0
   21d40:	e6cb      	b.n	21ada <__aeabi_dsub+0x182>
   21d42:	465a      	mov	r2, fp
   21d44:	431a      	orrs	r2, r3
   21d46:	1e53      	subs	r3, r2, #1
   21d48:	419a      	sbcs	r2, r3
   21d4a:	b2d2      	uxtb	r2, r2
   21d4c:	2300      	movs	r3, #0
   21d4e:	e6fe      	b.n	21b4e <__aeabi_dsub+0x1f6>
   21d50:	1c0d      	adds	r5, r1, #0
   21d52:	4325      	orrs	r5, r4
   21d54:	d058      	beq.n	21e08 <__aeabi_dsub+0x4b0>
   21d56:	43ff      	mvns	r7, r7
   21d58:	2f00      	cmp	r7, #0
   21d5a:	d151      	bne.n	21e00 <__aeabi_dsub+0x4a8>
   21d5c:	465a      	mov	r2, fp
   21d5e:	1b14      	subs	r4, r2, r4
   21d60:	45a3      	cmp	fp, r4
   21d62:	4192      	sbcs	r2, r2
   21d64:	1a59      	subs	r1, r3, r1
   21d66:	4252      	negs	r2, r2
   21d68:	1a89      	subs	r1, r1, r2
   21d6a:	1c05      	adds	r5, r0, #0
   21d6c:	46e2      	mov	sl, ip
   21d6e:	e682      	b.n	21a76 <__aeabi_dsub+0x11e>
   21d70:	4892      	ldr	r0, [pc, #584]	; (21fbc <__aeabi_dsub+0x664>)
   21d72:	4285      	cmp	r5, r0
   21d74:	d000      	beq.n	21d78 <__aeabi_dsub+0x420>
   21d76:	e6cf      	b.n	21b18 <__aeabi_dsub+0x1c0>
   21d78:	e61e      	b.n	219b8 <__aeabi_dsub+0x60>
   21d7a:	2700      	movs	r7, #0
   21d7c:	e78e      	b.n	21c9c <__aeabi_dsub+0x344>
   21d7e:	2300      	movs	r3, #0
   21d80:	e79d      	b.n	21cbe <__aeabi_dsub+0x366>
   21d82:	1c08      	adds	r0, r1, #0
   21d84:	4320      	orrs	r0, r4
   21d86:	2d00      	cmp	r5, #0
   21d88:	d000      	beq.n	21d8c <__aeabi_dsub+0x434>
   21d8a:	e0c2      	b.n	21f12 <__aeabi_dsub+0x5ba>
   21d8c:	2800      	cmp	r0, #0
   21d8e:	d100      	bne.n	21d92 <__aeabi_dsub+0x43a>
   21d90:	e0ef      	b.n	21f72 <__aeabi_dsub+0x61a>
   21d92:	4658      	mov	r0, fp
   21d94:	4318      	orrs	r0, r3
   21d96:	d100      	bne.n	21d9a <__aeabi_dsub+0x442>
   21d98:	e60e      	b.n	219b8 <__aeabi_dsub+0x60>
   21d9a:	4658      	mov	r0, fp
   21d9c:	1902      	adds	r2, r0, r4
   21d9e:	42a2      	cmp	r2, r4
   21da0:	41a4      	sbcs	r4, r4
   21da2:	4264      	negs	r4, r4
   21da4:	1859      	adds	r1, r3, r1
   21da6:	1909      	adds	r1, r1, r4
   21da8:	1c14      	adds	r4, r2, #0
   21daa:	020a      	lsls	r2, r1, #8
   21dac:	d400      	bmi.n	21db0 <__aeabi_dsub+0x458>
   21dae:	e603      	b.n	219b8 <__aeabi_dsub+0x60>
   21db0:	4b83      	ldr	r3, [pc, #524]	; (21fc0 <__aeabi_dsub+0x668>)
   21db2:	2501      	movs	r5, #1
   21db4:	4019      	ands	r1, r3
   21db6:	e5ff      	b.n	219b8 <__aeabi_dsub+0x60>
   21db8:	1c08      	adds	r0, r1, #0
   21dba:	4320      	orrs	r0, r4
   21dbc:	2d00      	cmp	r5, #0
   21dbe:	d138      	bne.n	21e32 <__aeabi_dsub+0x4da>
   21dc0:	2800      	cmp	r0, #0
   21dc2:	d16f      	bne.n	21ea4 <__aeabi_dsub+0x54c>
   21dc4:	4659      	mov	r1, fp
   21dc6:	4319      	orrs	r1, r3
   21dc8:	d003      	beq.n	21dd2 <__aeabi_dsub+0x47a>
   21dca:	1c19      	adds	r1, r3, #0
   21dcc:	465c      	mov	r4, fp
   21dce:	46e2      	mov	sl, ip
   21dd0:	e5f2      	b.n	219b8 <__aeabi_dsub+0x60>
   21dd2:	2700      	movs	r7, #0
   21dd4:	2100      	movs	r1, #0
   21dd6:	2400      	movs	r4, #0
   21dd8:	e67f      	b.n	21ada <__aeabi_dsub+0x182>
   21dda:	4660      	mov	r0, ip
   21ddc:	3820      	subs	r0, #32
   21dde:	1c1a      	adds	r2, r3, #0
   21de0:	40c2      	lsrs	r2, r0
   21de2:	4666      	mov	r6, ip
   21de4:	1c10      	adds	r0, r2, #0
   21de6:	2e20      	cmp	r6, #32
   21de8:	d100      	bne.n	21dec <__aeabi_dsub+0x494>
   21dea:	e0aa      	b.n	21f42 <__aeabi_dsub+0x5ea>
   21dec:	2240      	movs	r2, #64	; 0x40
   21dee:	1b92      	subs	r2, r2, r6
   21df0:	4093      	lsls	r3, r2
   21df2:	465a      	mov	r2, fp
   21df4:	431a      	orrs	r2, r3
   21df6:	1e53      	subs	r3, r2, #1
   21df8:	419a      	sbcs	r2, r3
   21dfa:	4302      	orrs	r2, r0
   21dfc:	2300      	movs	r3, #0
   21dfe:	e6a6      	b.n	21b4e <__aeabi_dsub+0x1f6>
   21e00:	4d6e      	ldr	r5, [pc, #440]	; (21fbc <__aeabi_dsub+0x664>)
   21e02:	42a8      	cmp	r0, r5
   21e04:	d000      	beq.n	21e08 <__aeabi_dsub+0x4b0>
   21e06:	e773      	b.n	21cf0 <__aeabi_dsub+0x398>
   21e08:	1c19      	adds	r1, r3, #0
   21e0a:	465c      	mov	r4, fp
   21e0c:	1c05      	adds	r5, r0, #0
   21e0e:	46e2      	mov	sl, ip
   21e10:	e5d2      	b.n	219b8 <__aeabi_dsub+0x60>
   21e12:	2d00      	cmp	r5, #0
   21e14:	d122      	bne.n	21e5c <__aeabi_dsub+0x504>
   21e16:	1c0d      	adds	r5, r1, #0
   21e18:	4325      	orrs	r5, r4
   21e1a:	d076      	beq.n	21f0a <__aeabi_dsub+0x5b2>
   21e1c:	43d5      	mvns	r5, r2
   21e1e:	2d00      	cmp	r5, #0
   21e20:	d170      	bne.n	21f04 <__aeabi_dsub+0x5ac>
   21e22:	445c      	add	r4, fp
   21e24:	455c      	cmp	r4, fp
   21e26:	4192      	sbcs	r2, r2
   21e28:	1859      	adds	r1, r3, r1
   21e2a:	4252      	negs	r2, r2
   21e2c:	1889      	adds	r1, r1, r2
   21e2e:	1c05      	adds	r5, r0, #0
   21e30:	e694      	b.n	21b5c <__aeabi_dsub+0x204>
   21e32:	2800      	cmp	r0, #0
   21e34:	d14c      	bne.n	21ed0 <__aeabi_dsub+0x578>
   21e36:	4659      	mov	r1, fp
   21e38:	4319      	orrs	r1, r3
   21e3a:	d100      	bne.n	21e3e <__aeabi_dsub+0x4e6>
   21e3c:	e648      	b.n	21ad0 <__aeabi_dsub+0x178>
   21e3e:	1c19      	adds	r1, r3, #0
   21e40:	465c      	mov	r4, fp
   21e42:	46e2      	mov	sl, ip
   21e44:	4d5d      	ldr	r5, [pc, #372]	; (21fbc <__aeabi_dsub+0x664>)
   21e46:	e5b7      	b.n	219b8 <__aeabi_dsub+0x60>
   21e48:	430c      	orrs	r4, r1
   21e4a:	1e61      	subs	r1, r4, #1
   21e4c:	418c      	sbcs	r4, r1
   21e4e:	b2e4      	uxtb	r4, r4
   21e50:	2100      	movs	r1, #0
   21e52:	e761      	b.n	21d18 <__aeabi_dsub+0x3c0>
   21e54:	1c05      	adds	r5, r0, #0
   21e56:	2100      	movs	r1, #0
   21e58:	2400      	movs	r4, #0
   21e5a:	e63e      	b.n	21ada <__aeabi_dsub+0x182>
   21e5c:	4d57      	ldr	r5, [pc, #348]	; (21fbc <__aeabi_dsub+0x664>)
   21e5e:	42a8      	cmp	r0, r5
   21e60:	d053      	beq.n	21f0a <__aeabi_dsub+0x5b2>
   21e62:	4255      	negs	r5, r2
   21e64:	2280      	movs	r2, #128	; 0x80
   21e66:	0416      	lsls	r6, r2, #16
   21e68:	4331      	orrs	r1, r6
   21e6a:	2d38      	cmp	r5, #56	; 0x38
   21e6c:	dc7b      	bgt.n	21f66 <__aeabi_dsub+0x60e>
   21e6e:	2d1f      	cmp	r5, #31
   21e70:	dd00      	ble.n	21e74 <__aeabi_dsub+0x51c>
   21e72:	e08c      	b.n	21f8e <__aeabi_dsub+0x636>
   21e74:	2220      	movs	r2, #32
   21e76:	1b56      	subs	r6, r2, r5
   21e78:	1c0a      	adds	r2, r1, #0
   21e7a:	46b4      	mov	ip, r6
   21e7c:	40b2      	lsls	r2, r6
   21e7e:	1c26      	adds	r6, r4, #0
   21e80:	40ee      	lsrs	r6, r5
   21e82:	4332      	orrs	r2, r6
   21e84:	4690      	mov	r8, r2
   21e86:	4662      	mov	r2, ip
   21e88:	4094      	lsls	r4, r2
   21e8a:	1e66      	subs	r6, r4, #1
   21e8c:	41b4      	sbcs	r4, r6
   21e8e:	4642      	mov	r2, r8
   21e90:	4314      	orrs	r4, r2
   21e92:	40e9      	lsrs	r1, r5
   21e94:	445c      	add	r4, fp
   21e96:	455c      	cmp	r4, fp
   21e98:	4192      	sbcs	r2, r2
   21e9a:	18cb      	adds	r3, r1, r3
   21e9c:	4252      	negs	r2, r2
   21e9e:	1899      	adds	r1, r3, r2
   21ea0:	1c05      	adds	r5, r0, #0
   21ea2:	e65b      	b.n	21b5c <__aeabi_dsub+0x204>
   21ea4:	4658      	mov	r0, fp
   21ea6:	4318      	orrs	r0, r3
   21ea8:	d100      	bne.n	21eac <__aeabi_dsub+0x554>
   21eaa:	e585      	b.n	219b8 <__aeabi_dsub+0x60>
   21eac:	465e      	mov	r6, fp
   21eae:	1ba7      	subs	r7, r4, r6
   21eb0:	42bc      	cmp	r4, r7
   21eb2:	4192      	sbcs	r2, r2
   21eb4:	1ac8      	subs	r0, r1, r3
   21eb6:	4252      	negs	r2, r2
   21eb8:	1a80      	subs	r0, r0, r2
   21eba:	0206      	lsls	r6, r0, #8
   21ebc:	d560      	bpl.n	21f80 <__aeabi_dsub+0x628>
   21ebe:	4658      	mov	r0, fp
   21ec0:	1b04      	subs	r4, r0, r4
   21ec2:	45a3      	cmp	fp, r4
   21ec4:	4192      	sbcs	r2, r2
   21ec6:	1a59      	subs	r1, r3, r1
   21ec8:	4252      	negs	r2, r2
   21eca:	1a89      	subs	r1, r1, r2
   21ecc:	46e2      	mov	sl, ip
   21ece:	e573      	b.n	219b8 <__aeabi_dsub+0x60>
   21ed0:	4658      	mov	r0, fp
   21ed2:	4318      	orrs	r0, r3
   21ed4:	d033      	beq.n	21f3e <__aeabi_dsub+0x5e6>
   21ed6:	0748      	lsls	r0, r1, #29
   21ed8:	08e4      	lsrs	r4, r4, #3
   21eda:	4304      	orrs	r4, r0
   21edc:	2080      	movs	r0, #128	; 0x80
   21ede:	08c9      	lsrs	r1, r1, #3
   21ee0:	0300      	lsls	r0, r0, #12
   21ee2:	4201      	tst	r1, r0
   21ee4:	d008      	beq.n	21ef8 <__aeabi_dsub+0x5a0>
   21ee6:	08dd      	lsrs	r5, r3, #3
   21ee8:	4205      	tst	r5, r0
   21eea:	d105      	bne.n	21ef8 <__aeabi_dsub+0x5a0>
   21eec:	4659      	mov	r1, fp
   21eee:	08ca      	lsrs	r2, r1, #3
   21ef0:	075c      	lsls	r4, r3, #29
   21ef2:	4314      	orrs	r4, r2
   21ef4:	1c29      	adds	r1, r5, #0
   21ef6:	46e2      	mov	sl, ip
   21ef8:	0f63      	lsrs	r3, r4, #29
   21efa:	00c9      	lsls	r1, r1, #3
   21efc:	4319      	orrs	r1, r3
   21efe:	00e4      	lsls	r4, r4, #3
   21f00:	4d2e      	ldr	r5, [pc, #184]	; (21fbc <__aeabi_dsub+0x664>)
   21f02:	e559      	b.n	219b8 <__aeabi_dsub+0x60>
   21f04:	4a2d      	ldr	r2, [pc, #180]	; (21fbc <__aeabi_dsub+0x664>)
   21f06:	4290      	cmp	r0, r2
   21f08:	d1af      	bne.n	21e6a <__aeabi_dsub+0x512>
   21f0a:	1c19      	adds	r1, r3, #0
   21f0c:	465c      	mov	r4, fp
   21f0e:	1c05      	adds	r5, r0, #0
   21f10:	e552      	b.n	219b8 <__aeabi_dsub+0x60>
   21f12:	2800      	cmp	r0, #0
   21f14:	d030      	beq.n	21f78 <__aeabi_dsub+0x620>
   21f16:	4658      	mov	r0, fp
   21f18:	4318      	orrs	r0, r3
   21f1a:	d010      	beq.n	21f3e <__aeabi_dsub+0x5e6>
   21f1c:	2580      	movs	r5, #128	; 0x80
   21f1e:	0748      	lsls	r0, r1, #29
   21f20:	08e4      	lsrs	r4, r4, #3
   21f22:	08c9      	lsrs	r1, r1, #3
   21f24:	032d      	lsls	r5, r5, #12
   21f26:	4304      	orrs	r4, r0
   21f28:	4229      	tst	r1, r5
   21f2a:	d0e5      	beq.n	21ef8 <__aeabi_dsub+0x5a0>
   21f2c:	08d8      	lsrs	r0, r3, #3
   21f2e:	4228      	tst	r0, r5
   21f30:	d1e2      	bne.n	21ef8 <__aeabi_dsub+0x5a0>
   21f32:	465d      	mov	r5, fp
   21f34:	08ea      	lsrs	r2, r5, #3
   21f36:	075c      	lsls	r4, r3, #29
   21f38:	4314      	orrs	r4, r2
   21f3a:	1c01      	adds	r1, r0, #0
   21f3c:	e7dc      	b.n	21ef8 <__aeabi_dsub+0x5a0>
   21f3e:	4d1f      	ldr	r5, [pc, #124]	; (21fbc <__aeabi_dsub+0x664>)
   21f40:	e53a      	b.n	219b8 <__aeabi_dsub+0x60>
   21f42:	2300      	movs	r3, #0
   21f44:	e755      	b.n	21df2 <__aeabi_dsub+0x49a>
   21f46:	1c3d      	adds	r5, r7, #0
   21f48:	3d20      	subs	r5, #32
   21f4a:	1c0e      	adds	r6, r1, #0
   21f4c:	40ee      	lsrs	r6, r5
   21f4e:	1c35      	adds	r5, r6, #0
   21f50:	2f20      	cmp	r7, #32
   21f52:	d02e      	beq.n	21fb2 <__aeabi_dsub+0x65a>
   21f54:	2640      	movs	r6, #64	; 0x40
   21f56:	1bf7      	subs	r7, r6, r7
   21f58:	40b9      	lsls	r1, r7
   21f5a:	430c      	orrs	r4, r1
   21f5c:	1e61      	subs	r1, r4, #1
   21f5e:	418c      	sbcs	r4, r1
   21f60:	432c      	orrs	r4, r5
   21f62:	2100      	movs	r1, #0
   21f64:	e6d8      	b.n	21d18 <__aeabi_dsub+0x3c0>
   21f66:	430c      	orrs	r4, r1
   21f68:	1e61      	subs	r1, r4, #1
   21f6a:	418c      	sbcs	r4, r1
   21f6c:	b2e4      	uxtb	r4, r4
   21f6e:	2100      	movs	r1, #0
   21f70:	e790      	b.n	21e94 <__aeabi_dsub+0x53c>
   21f72:	1c19      	adds	r1, r3, #0
   21f74:	465c      	mov	r4, fp
   21f76:	e51f      	b.n	219b8 <__aeabi_dsub+0x60>
   21f78:	1c19      	adds	r1, r3, #0
   21f7a:	465c      	mov	r4, fp
   21f7c:	4d0f      	ldr	r5, [pc, #60]	; (21fbc <__aeabi_dsub+0x664>)
   21f7e:	e51b      	b.n	219b8 <__aeabi_dsub+0x60>
   21f80:	1c03      	adds	r3, r0, #0
   21f82:	433b      	orrs	r3, r7
   21f84:	d100      	bne.n	21f88 <__aeabi_dsub+0x630>
   21f86:	e724      	b.n	21dd2 <__aeabi_dsub+0x47a>
   21f88:	1c01      	adds	r1, r0, #0
   21f8a:	1c3c      	adds	r4, r7, #0
   21f8c:	e514      	b.n	219b8 <__aeabi_dsub+0x60>
   21f8e:	2620      	movs	r6, #32
   21f90:	4276      	negs	r6, r6
   21f92:	1976      	adds	r6, r6, r5
   21f94:	1c0a      	adds	r2, r1, #0
   21f96:	40f2      	lsrs	r2, r6
   21f98:	4690      	mov	r8, r2
   21f9a:	2d20      	cmp	r5, #32
   21f9c:	d00b      	beq.n	21fb6 <__aeabi_dsub+0x65e>
   21f9e:	2640      	movs	r6, #64	; 0x40
   21fa0:	1b75      	subs	r5, r6, r5
   21fa2:	40a9      	lsls	r1, r5
   21fa4:	430c      	orrs	r4, r1
   21fa6:	1e61      	subs	r1, r4, #1
   21fa8:	418c      	sbcs	r4, r1
   21faa:	4645      	mov	r5, r8
   21fac:	432c      	orrs	r4, r5
   21fae:	2100      	movs	r1, #0
   21fb0:	e770      	b.n	21e94 <__aeabi_dsub+0x53c>
   21fb2:	2100      	movs	r1, #0
   21fb4:	e7d1      	b.n	21f5a <__aeabi_dsub+0x602>
   21fb6:	2100      	movs	r1, #0
   21fb8:	e7f4      	b.n	21fa4 <__aeabi_dsub+0x64c>
   21fba:	46c0      	nop			; (mov r8, r8)
   21fbc:	000007ff 	.word	0x000007ff
   21fc0:	ff7fffff 	.word	0xff7fffff

00021fc4 <__aeabi_d2iz>:
   21fc4:	b570      	push	{r4, r5, r6, lr}
   21fc6:	1c0b      	adds	r3, r1, #0
   21fc8:	4c12      	ldr	r4, [pc, #72]	; (22014 <__aeabi_d2iz+0x50>)
   21fca:	0309      	lsls	r1, r1, #12
   21fcc:	0b0e      	lsrs	r6, r1, #12
   21fce:	0059      	lsls	r1, r3, #1
   21fd0:	1c02      	adds	r2, r0, #0
   21fd2:	0d49      	lsrs	r1, r1, #21
   21fd4:	0fdd      	lsrs	r5, r3, #31
   21fd6:	2000      	movs	r0, #0
   21fd8:	42a1      	cmp	r1, r4
   21fda:	dd11      	ble.n	22000 <__aeabi_d2iz+0x3c>
   21fdc:	480e      	ldr	r0, [pc, #56]	; (22018 <__aeabi_d2iz+0x54>)
   21fde:	4281      	cmp	r1, r0
   21fe0:	dc0f      	bgt.n	22002 <__aeabi_d2iz+0x3e>
   21fe2:	2080      	movs	r0, #128	; 0x80
   21fe4:	0340      	lsls	r0, r0, #13
   21fe6:	4306      	orrs	r6, r0
   21fe8:	480c      	ldr	r0, [pc, #48]	; (2201c <__aeabi_d2iz+0x58>)
   21fea:	1a40      	subs	r0, r0, r1
   21fec:	281f      	cmp	r0, #31
   21fee:	dd0b      	ble.n	22008 <__aeabi_d2iz+0x44>
   21ff0:	4a0b      	ldr	r2, [pc, #44]	; (22020 <__aeabi_d2iz+0x5c>)
   21ff2:	1a52      	subs	r2, r2, r1
   21ff4:	40d6      	lsrs	r6, r2
   21ff6:	1c32      	adds	r2, r6, #0
   21ff8:	4250      	negs	r0, r2
   21ffa:	2d00      	cmp	r5, #0
   21ffc:	d100      	bne.n	22000 <__aeabi_d2iz+0x3c>
   21ffe:	1c10      	adds	r0, r2, #0
   22000:	bd70      	pop	{r4, r5, r6, pc}
   22002:	4b08      	ldr	r3, [pc, #32]	; (22024 <__aeabi_d2iz+0x60>)
   22004:	18e8      	adds	r0, r5, r3
   22006:	e7fb      	b.n	22000 <__aeabi_d2iz+0x3c>
   22008:	4b07      	ldr	r3, [pc, #28]	; (22028 <__aeabi_d2iz+0x64>)
   2200a:	40c2      	lsrs	r2, r0
   2200c:	18c9      	adds	r1, r1, r3
   2200e:	408e      	lsls	r6, r1
   22010:	4332      	orrs	r2, r6
   22012:	e7f1      	b.n	21ff8 <__aeabi_d2iz+0x34>
   22014:	000003fe 	.word	0x000003fe
   22018:	0000041d 	.word	0x0000041d
   2201c:	00000433 	.word	0x00000433
   22020:	00000413 	.word	0x00000413
   22024:	7fffffff 	.word	0x7fffffff
   22028:	fffffbed 	.word	0xfffffbed

0002202c <__aeabi_i2d>:
   2202c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2202e:	1e04      	subs	r4, r0, #0
   22030:	d031      	beq.n	22096 <__aeabi_i2d+0x6a>
   22032:	0fc7      	lsrs	r7, r0, #31
   22034:	d000      	beq.n	22038 <__aeabi_i2d+0xc>
   22036:	4244      	negs	r4, r0
   22038:	1c20      	adds	r0, r4, #0
   2203a:	f000 f947 	bl	222cc <__clzsi2>
   2203e:	4d18      	ldr	r5, [pc, #96]	; (220a0 <__aeabi_i2d+0x74>)
   22040:	1a2d      	subs	r5, r5, r0
   22042:	280a      	cmp	r0, #10
   22044:	dd19      	ble.n	2207a <__aeabi_i2d+0x4e>
   22046:	380b      	subs	r0, #11
   22048:	4084      	lsls	r4, r0
   2204a:	0324      	lsls	r4, r4, #12
   2204c:	056d      	lsls	r5, r5, #21
   2204e:	0b24      	lsrs	r4, r4, #12
   22050:	0d6d      	lsrs	r5, r5, #21
   22052:	1c3a      	adds	r2, r7, #0
   22054:	2600      	movs	r6, #0
   22056:	2000      	movs	r0, #0
   22058:	2100      	movs	r1, #0
   2205a:	0d0b      	lsrs	r3, r1, #20
   2205c:	0324      	lsls	r4, r4, #12
   2205e:	0b24      	lsrs	r4, r4, #12
   22060:	051b      	lsls	r3, r3, #20
   22062:	4323      	orrs	r3, r4
   22064:	4c0f      	ldr	r4, [pc, #60]	; (220a4 <__aeabi_i2d+0x78>)
   22066:	052d      	lsls	r5, r5, #20
   22068:	401c      	ands	r4, r3
   2206a:	432c      	orrs	r4, r5
   2206c:	0064      	lsls	r4, r4, #1
   2206e:	0864      	lsrs	r4, r4, #1
   22070:	07d3      	lsls	r3, r2, #31
   22072:	1c21      	adds	r1, r4, #0
   22074:	1c30      	adds	r0, r6, #0
   22076:	4319      	orrs	r1, r3
   22078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2207a:	1c06      	adds	r6, r0, #0
   2207c:	3615      	adds	r6, #21
   2207e:	1c23      	adds	r3, r4, #0
   22080:	40b3      	lsls	r3, r6
   22082:	1c1e      	adds	r6, r3, #0
   22084:	230b      	movs	r3, #11
   22086:	1a18      	subs	r0, r3, r0
   22088:	40c4      	lsrs	r4, r0
   2208a:	0324      	lsls	r4, r4, #12
   2208c:	056d      	lsls	r5, r5, #21
   2208e:	0b24      	lsrs	r4, r4, #12
   22090:	0d6d      	lsrs	r5, r5, #21
   22092:	1c3a      	adds	r2, r7, #0
   22094:	e7df      	b.n	22056 <__aeabi_i2d+0x2a>
   22096:	2200      	movs	r2, #0
   22098:	2500      	movs	r5, #0
   2209a:	2400      	movs	r4, #0
   2209c:	2600      	movs	r6, #0
   2209e:	e7da      	b.n	22056 <__aeabi_i2d+0x2a>
   220a0:	0000041e 	.word	0x0000041e
   220a4:	800fffff 	.word	0x800fffff

000220a8 <__aeabi_ui2d>:
   220a8:	b510      	push	{r4, lr}
   220aa:	1e04      	subs	r4, r0, #0
   220ac:	d028      	beq.n	22100 <__aeabi_ui2d+0x58>
   220ae:	f000 f90d 	bl	222cc <__clzsi2>
   220b2:	4a15      	ldr	r2, [pc, #84]	; (22108 <__aeabi_ui2d+0x60>)
   220b4:	1a12      	subs	r2, r2, r0
   220b6:	280a      	cmp	r0, #10
   220b8:	dd15      	ble.n	220e6 <__aeabi_ui2d+0x3e>
   220ba:	380b      	subs	r0, #11
   220bc:	4084      	lsls	r4, r0
   220be:	0324      	lsls	r4, r4, #12
   220c0:	0552      	lsls	r2, r2, #21
   220c2:	0b24      	lsrs	r4, r4, #12
   220c4:	0d52      	lsrs	r2, r2, #21
   220c6:	2300      	movs	r3, #0
   220c8:	2000      	movs	r0, #0
   220ca:	2100      	movs	r1, #0
   220cc:	0324      	lsls	r4, r4, #12
   220ce:	1c18      	adds	r0, r3, #0
   220d0:	0d0b      	lsrs	r3, r1, #20
   220d2:	0b24      	lsrs	r4, r4, #12
   220d4:	051b      	lsls	r3, r3, #20
   220d6:	4323      	orrs	r3, r4
   220d8:	4c0c      	ldr	r4, [pc, #48]	; (2210c <__aeabi_ui2d+0x64>)
   220da:	0512      	lsls	r2, r2, #20
   220dc:	401c      	ands	r4, r3
   220de:	4314      	orrs	r4, r2
   220e0:	0064      	lsls	r4, r4, #1
   220e2:	0861      	lsrs	r1, r4, #1
   220e4:	bd10      	pop	{r4, pc}
   220e6:	1c03      	adds	r3, r0, #0
   220e8:	3315      	adds	r3, #21
   220ea:	1c21      	adds	r1, r4, #0
   220ec:	4099      	lsls	r1, r3
   220ee:	1c0b      	adds	r3, r1, #0
   220f0:	210b      	movs	r1, #11
   220f2:	1a08      	subs	r0, r1, r0
   220f4:	40c4      	lsrs	r4, r0
   220f6:	0324      	lsls	r4, r4, #12
   220f8:	0552      	lsls	r2, r2, #21
   220fa:	0b24      	lsrs	r4, r4, #12
   220fc:	0d52      	lsrs	r2, r2, #21
   220fe:	e7e3      	b.n	220c8 <__aeabi_ui2d+0x20>
   22100:	2200      	movs	r2, #0
   22102:	2400      	movs	r4, #0
   22104:	2300      	movs	r3, #0
   22106:	e7df      	b.n	220c8 <__aeabi_ui2d+0x20>
   22108:	0000041e 	.word	0x0000041e
   2210c:	800fffff 	.word	0x800fffff

00022110 <__aeabi_f2d>:
   22110:	0043      	lsls	r3, r0, #1
   22112:	0e1b      	lsrs	r3, r3, #24
   22114:	1c5a      	adds	r2, r3, #1
   22116:	0241      	lsls	r1, r0, #9
   22118:	b2d2      	uxtb	r2, r2
   2211a:	b570      	push	{r4, r5, r6, lr}
   2211c:	0a4c      	lsrs	r4, r1, #9
   2211e:	0fc5      	lsrs	r5, r0, #31
   22120:	2a01      	cmp	r2, #1
   22122:	dd17      	ble.n	22154 <__aeabi_f2d+0x44>
   22124:	22e0      	movs	r2, #224	; 0xe0
   22126:	0092      	lsls	r2, r2, #2
   22128:	0764      	lsls	r4, r4, #29
   2212a:	0b09      	lsrs	r1, r1, #12
   2212c:	1898      	adds	r0, r3, r2
   2212e:	2200      	movs	r2, #0
   22130:	2300      	movs	r3, #0
   22132:	0d1e      	lsrs	r6, r3, #20
   22134:	1c22      	adds	r2, r4, #0
   22136:	0534      	lsls	r4, r6, #20
   22138:	430c      	orrs	r4, r1
   2213a:	491b      	ldr	r1, [pc, #108]	; (221a8 <__aeabi_f2d+0x98>)
   2213c:	0540      	lsls	r0, r0, #21
   2213e:	0840      	lsrs	r0, r0, #1
   22140:	4021      	ands	r1, r4
   22142:	4301      	orrs	r1, r0
   22144:	0049      	lsls	r1, r1, #1
   22146:	0849      	lsrs	r1, r1, #1
   22148:	07ed      	lsls	r5, r5, #31
   2214a:	1c0b      	adds	r3, r1, #0
   2214c:	432b      	orrs	r3, r5
   2214e:	1c10      	adds	r0, r2, #0
   22150:	1c19      	adds	r1, r3, #0
   22152:	bd70      	pop	{r4, r5, r6, pc}
   22154:	2b00      	cmp	r3, #0
   22156:	d115      	bne.n	22184 <__aeabi_f2d+0x74>
   22158:	2c00      	cmp	r4, #0
   2215a:	d01c      	beq.n	22196 <__aeabi_f2d+0x86>
   2215c:	1c20      	adds	r0, r4, #0
   2215e:	f000 f8b5 	bl	222cc <__clzsi2>
   22162:	280a      	cmp	r0, #10
   22164:	dc1a      	bgt.n	2219c <__aeabi_f2d+0x8c>
   22166:	210b      	movs	r1, #11
   22168:	1a09      	subs	r1, r1, r0
   2216a:	1c23      	adds	r3, r4, #0
   2216c:	40cb      	lsrs	r3, r1
   2216e:	1c19      	adds	r1, r3, #0
   22170:	1c03      	adds	r3, r0, #0
   22172:	3315      	adds	r3, #21
   22174:	409c      	lsls	r4, r3
   22176:	4b0d      	ldr	r3, [pc, #52]	; (221ac <__aeabi_f2d+0x9c>)
   22178:	0309      	lsls	r1, r1, #12
   2217a:	1a18      	subs	r0, r3, r0
   2217c:	0540      	lsls	r0, r0, #21
   2217e:	0b09      	lsrs	r1, r1, #12
   22180:	0d40      	lsrs	r0, r0, #21
   22182:	e7d4      	b.n	2212e <__aeabi_f2d+0x1e>
   22184:	2c00      	cmp	r4, #0
   22186:	d003      	beq.n	22190 <__aeabi_f2d+0x80>
   22188:	0764      	lsls	r4, r4, #29
   2218a:	0b09      	lsrs	r1, r1, #12
   2218c:	4808      	ldr	r0, [pc, #32]	; (221b0 <__aeabi_f2d+0xa0>)
   2218e:	e7ce      	b.n	2212e <__aeabi_f2d+0x1e>
   22190:	4807      	ldr	r0, [pc, #28]	; (221b0 <__aeabi_f2d+0xa0>)
   22192:	2100      	movs	r1, #0
   22194:	e7cb      	b.n	2212e <__aeabi_f2d+0x1e>
   22196:	2000      	movs	r0, #0
   22198:	2100      	movs	r1, #0
   2219a:	e7c8      	b.n	2212e <__aeabi_f2d+0x1e>
   2219c:	1c01      	adds	r1, r0, #0
   2219e:	390b      	subs	r1, #11
   221a0:	408c      	lsls	r4, r1
   221a2:	1c21      	adds	r1, r4, #0
   221a4:	2400      	movs	r4, #0
   221a6:	e7e6      	b.n	22176 <__aeabi_f2d+0x66>
   221a8:	800fffff 	.word	0x800fffff
   221ac:	00000389 	.word	0x00000389
   221b0:	000007ff 	.word	0x000007ff

000221b4 <__aeabi_d2f>:
   221b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   221b6:	004b      	lsls	r3, r1, #1
   221b8:	030d      	lsls	r5, r1, #12
   221ba:	0f42      	lsrs	r2, r0, #29
   221bc:	0d5b      	lsrs	r3, r3, #21
   221be:	0a6d      	lsrs	r5, r5, #9
   221c0:	4315      	orrs	r5, r2
   221c2:	1c5a      	adds	r2, r3, #1
   221c4:	0552      	lsls	r2, r2, #21
   221c6:	0fcc      	lsrs	r4, r1, #31
   221c8:	00c6      	lsls	r6, r0, #3
   221ca:	0d52      	lsrs	r2, r2, #21
   221cc:	2a01      	cmp	r2, #1
   221ce:	dd27      	ble.n	22220 <__aeabi_d2f+0x6c>
   221d0:	4f39      	ldr	r7, [pc, #228]	; (222b8 <__aeabi_d2f+0x104>)
   221d2:	19da      	adds	r2, r3, r7
   221d4:	2afe      	cmp	r2, #254	; 0xfe
   221d6:	dc1a      	bgt.n	2220e <__aeabi_d2f+0x5a>
   221d8:	2a00      	cmp	r2, #0
   221da:	dd35      	ble.n	22248 <__aeabi_d2f+0x94>
   221dc:	0180      	lsls	r0, r0, #6
   221de:	00ed      	lsls	r5, r5, #3
   221e0:	1e43      	subs	r3, r0, #1
   221e2:	4198      	sbcs	r0, r3
   221e4:	4328      	orrs	r0, r5
   221e6:	0f76      	lsrs	r6, r6, #29
   221e8:	4330      	orrs	r0, r6
   221ea:	0743      	lsls	r3, r0, #29
   221ec:	d004      	beq.n	221f8 <__aeabi_d2f+0x44>
   221ee:	230f      	movs	r3, #15
   221f0:	4003      	ands	r3, r0
   221f2:	2b04      	cmp	r3, #4
   221f4:	d000      	beq.n	221f8 <__aeabi_d2f+0x44>
   221f6:	3004      	adds	r0, #4
   221f8:	2180      	movs	r1, #128	; 0x80
   221fa:	04c9      	lsls	r1, r1, #19
   221fc:	4001      	ands	r1, r0
   221fe:	d027      	beq.n	22250 <__aeabi_d2f+0x9c>
   22200:	3201      	adds	r2, #1
   22202:	2aff      	cmp	r2, #255	; 0xff
   22204:	d01d      	beq.n	22242 <__aeabi_d2f+0x8e>
   22206:	0183      	lsls	r3, r0, #6
   22208:	0a5b      	lsrs	r3, r3, #9
   2220a:	b2d1      	uxtb	r1, r2
   2220c:	e001      	b.n	22212 <__aeabi_d2f+0x5e>
   2220e:	21ff      	movs	r1, #255	; 0xff
   22210:	2300      	movs	r3, #0
   22212:	0258      	lsls	r0, r3, #9
   22214:	05c9      	lsls	r1, r1, #23
   22216:	0a40      	lsrs	r0, r0, #9
   22218:	07e4      	lsls	r4, r4, #31
   2221a:	4308      	orrs	r0, r1
   2221c:	4320      	orrs	r0, r4
   2221e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22220:	2b00      	cmp	r3, #0
   22222:	d106      	bne.n	22232 <__aeabi_d2f+0x7e>
   22224:	4335      	orrs	r5, r6
   22226:	d111      	bne.n	2224c <__aeabi_d2f+0x98>
   22228:	2100      	movs	r1, #0
   2222a:	2000      	movs	r0, #0
   2222c:	0243      	lsls	r3, r0, #9
   2222e:	0a5b      	lsrs	r3, r3, #9
   22230:	e7ef      	b.n	22212 <__aeabi_d2f+0x5e>
   22232:	432e      	orrs	r6, r5
   22234:	d0eb      	beq.n	2220e <__aeabi_d2f+0x5a>
   22236:	2080      	movs	r0, #128	; 0x80
   22238:	00ed      	lsls	r5, r5, #3
   2223a:	0480      	lsls	r0, r0, #18
   2223c:	4328      	orrs	r0, r5
   2223e:	22ff      	movs	r2, #255	; 0xff
   22240:	e7d3      	b.n	221ea <__aeabi_d2f+0x36>
   22242:	21ff      	movs	r1, #255	; 0xff
   22244:	2300      	movs	r3, #0
   22246:	e7e4      	b.n	22212 <__aeabi_d2f+0x5e>
   22248:	3217      	adds	r2, #23
   2224a:	da0d      	bge.n	22268 <__aeabi_d2f+0xb4>
   2224c:	2005      	movs	r0, #5
   2224e:	2200      	movs	r2, #0
   22250:	08c0      	lsrs	r0, r0, #3
   22252:	b2d1      	uxtb	r1, r2
   22254:	2aff      	cmp	r2, #255	; 0xff
   22256:	d1e9      	bne.n	2222c <__aeabi_d2f+0x78>
   22258:	2800      	cmp	r0, #0
   2225a:	d0d9      	beq.n	22210 <__aeabi_d2f+0x5c>
   2225c:	2380      	movs	r3, #128	; 0x80
   2225e:	03db      	lsls	r3, r3, #15
   22260:	4303      	orrs	r3, r0
   22262:	025b      	lsls	r3, r3, #9
   22264:	0a5b      	lsrs	r3, r3, #9
   22266:	e7d4      	b.n	22212 <__aeabi_d2f+0x5e>
   22268:	2280      	movs	r2, #128	; 0x80
   2226a:	4914      	ldr	r1, [pc, #80]	; (222bc <__aeabi_d2f+0x108>)
   2226c:	0412      	lsls	r2, r2, #16
   2226e:	4315      	orrs	r5, r2
   22270:	1ac9      	subs	r1, r1, r3
   22272:	291f      	cmp	r1, #31
   22274:	dc0d      	bgt.n	22292 <__aeabi_d2f+0xde>
   22276:	4a12      	ldr	r2, [pc, #72]	; (222c0 <__aeabi_d2f+0x10c>)
   22278:	1c37      	adds	r7, r6, #0
   2227a:	189b      	adds	r3, r3, r2
   2227c:	1c28      	adds	r0, r5, #0
   2227e:	409f      	lsls	r7, r3
   22280:	4098      	lsls	r0, r3
   22282:	1c3b      	adds	r3, r7, #0
   22284:	1e5a      	subs	r2, r3, #1
   22286:	4193      	sbcs	r3, r2
   22288:	4318      	orrs	r0, r3
   2228a:	40ce      	lsrs	r6, r1
   2228c:	4330      	orrs	r0, r6
   2228e:	2200      	movs	r2, #0
   22290:	e7ab      	b.n	221ea <__aeabi_d2f+0x36>
   22292:	4f0c      	ldr	r7, [pc, #48]	; (222c4 <__aeabi_d2f+0x110>)
   22294:	1c2a      	adds	r2, r5, #0
   22296:	1aff      	subs	r7, r7, r3
   22298:	40fa      	lsrs	r2, r7
   2229a:	1c17      	adds	r7, r2, #0
   2229c:	2920      	cmp	r1, #32
   2229e:	d009      	beq.n	222b4 <__aeabi_d2f+0x100>
   222a0:	4a09      	ldr	r2, [pc, #36]	; (222c8 <__aeabi_d2f+0x114>)
   222a2:	1898      	adds	r0, r3, r2
   222a4:	4085      	lsls	r5, r0
   222a6:	1c28      	adds	r0, r5, #0
   222a8:	4330      	orrs	r0, r6
   222aa:	1e46      	subs	r6, r0, #1
   222ac:	41b0      	sbcs	r0, r6
   222ae:	4338      	orrs	r0, r7
   222b0:	2200      	movs	r2, #0
   222b2:	e79a      	b.n	221ea <__aeabi_d2f+0x36>
   222b4:	2000      	movs	r0, #0
   222b6:	e7f7      	b.n	222a8 <__aeabi_d2f+0xf4>
   222b8:	fffffc80 	.word	0xfffffc80
   222bc:	0000039e 	.word	0x0000039e
   222c0:	fffffc82 	.word	0xfffffc82
   222c4:	0000037e 	.word	0x0000037e
   222c8:	fffffca2 	.word	0xfffffca2

000222cc <__clzsi2>:
   222cc:	211c      	movs	r1, #28
   222ce:	2301      	movs	r3, #1
   222d0:	041b      	lsls	r3, r3, #16
   222d2:	4298      	cmp	r0, r3
   222d4:	d301      	bcc.n	222da <__clzsi2+0xe>
   222d6:	0c00      	lsrs	r0, r0, #16
   222d8:	3910      	subs	r1, #16
   222da:	0a1b      	lsrs	r3, r3, #8
   222dc:	4298      	cmp	r0, r3
   222de:	d301      	bcc.n	222e4 <__clzsi2+0x18>
   222e0:	0a00      	lsrs	r0, r0, #8
   222e2:	3908      	subs	r1, #8
   222e4:	091b      	lsrs	r3, r3, #4
   222e6:	4298      	cmp	r0, r3
   222e8:	d301      	bcc.n	222ee <__clzsi2+0x22>
   222ea:	0900      	lsrs	r0, r0, #4
   222ec:	3904      	subs	r1, #4
   222ee:	a202      	add	r2, pc, #8	; (adr r2, 222f8 <__clzsi2+0x2c>)
   222f0:	5c10      	ldrb	r0, [r2, r0]
   222f2:	1840      	adds	r0, r0, r1
   222f4:	4770      	bx	lr
   222f6:	46c0      	nop			; (mov r8, r8)
   222f8:	02020304 	.word	0x02020304
   222fc:	01010101 	.word	0x01010101
	...

00022308 <__aeabi_lmul>:
   22308:	469c      	mov	ip, r3
   2230a:	0403      	lsls	r3, r0, #16
   2230c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2230e:	0c1b      	lsrs	r3, r3, #16
   22310:	0417      	lsls	r7, r2, #16
   22312:	0c3f      	lsrs	r7, r7, #16
   22314:	0c15      	lsrs	r5, r2, #16
   22316:	1c1e      	adds	r6, r3, #0
   22318:	1c04      	adds	r4, r0, #0
   2231a:	0c00      	lsrs	r0, r0, #16
   2231c:	437e      	muls	r6, r7
   2231e:	436b      	muls	r3, r5
   22320:	4347      	muls	r7, r0
   22322:	4345      	muls	r5, r0
   22324:	18fb      	adds	r3, r7, r3
   22326:	0c30      	lsrs	r0, r6, #16
   22328:	1818      	adds	r0, r3, r0
   2232a:	4287      	cmp	r7, r0
   2232c:	d902      	bls.n	22334 <__aeabi_lmul+0x2c>
   2232e:	2380      	movs	r3, #128	; 0x80
   22330:	025b      	lsls	r3, r3, #9
   22332:	18ed      	adds	r5, r5, r3
   22334:	0c03      	lsrs	r3, r0, #16
   22336:	18ed      	adds	r5, r5, r3
   22338:	4663      	mov	r3, ip
   2233a:	435c      	muls	r4, r3
   2233c:	434a      	muls	r2, r1
   2233e:	0436      	lsls	r6, r6, #16
   22340:	0c36      	lsrs	r6, r6, #16
   22342:	18a1      	adds	r1, r4, r2
   22344:	0400      	lsls	r0, r0, #16
   22346:	1980      	adds	r0, r0, r6
   22348:	1949      	adds	r1, r1, r5
   2234a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002234c <__divdi3>:
   2234c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2234e:	4644      	mov	r4, r8
   22350:	465f      	mov	r7, fp
   22352:	4656      	mov	r6, sl
   22354:	464d      	mov	r5, r9
   22356:	b4f0      	push	{r4, r5, r6, r7}
   22358:	1c1c      	adds	r4, r3, #0
   2235a:	b085      	sub	sp, #20
   2235c:	2900      	cmp	r1, #0
   2235e:	da00      	bge.n	22362 <__divdi3+0x16>
   22360:	e0d9      	b.n	22516 <__divdi3+0x1ca>
   22362:	1c0f      	adds	r7, r1, #0
   22364:	2100      	movs	r1, #0
   22366:	1c06      	adds	r6, r0, #0
   22368:	468a      	mov	sl, r1
   2236a:	1c10      	adds	r0, r2, #0
   2236c:	1c19      	adds	r1, r3, #0
   2236e:	2c00      	cmp	r4, #0
   22370:	da00      	bge.n	22374 <__divdi3+0x28>
   22372:	e0c7      	b.n	22504 <__divdi3+0x1b8>
   22374:	9601      	str	r6, [sp, #4]
   22376:	9000      	str	r0, [sp, #0]
   22378:	4689      	mov	r9, r1
   2237a:	4680      	mov	r8, r0
   2237c:	2900      	cmp	r1, #0
   2237e:	d150      	bne.n	22422 <__divdi3+0xd6>
   22380:	42b8      	cmp	r0, r7
   22382:	d962      	bls.n	2244a <__divdi3+0xfe>
   22384:	f7ff ffa2 	bl	222cc <__clzsi2>
   22388:	2800      	cmp	r0, #0
   2238a:	d009      	beq.n	223a0 <__divdi3+0x54>
   2238c:	2320      	movs	r3, #32
   2238e:	4645      	mov	r5, r8
   22390:	1c31      	adds	r1, r6, #0
   22392:	1a1b      	subs	r3, r3, r0
   22394:	4085      	lsls	r5, r0
   22396:	4087      	lsls	r7, r0
   22398:	40d9      	lsrs	r1, r3
   2239a:	46a8      	mov	r8, r5
   2239c:	430f      	orrs	r7, r1
   2239e:	4086      	lsls	r6, r0
   223a0:	4642      	mov	r2, r8
   223a2:	0c14      	lsrs	r4, r2, #16
   223a4:	0413      	lsls	r3, r2, #16
   223a6:	0c1b      	lsrs	r3, r3, #16
   223a8:	1c21      	adds	r1, r4, #0
   223aa:	1c38      	adds	r0, r7, #0
   223ac:	469b      	mov	fp, r3
   223ae:	f7fd f83d 	bl	1f42c <__aeabi_uidiv>
   223b2:	465b      	mov	r3, fp
   223b4:	4343      	muls	r3, r0
   223b6:	1c05      	adds	r5, r0, #0
   223b8:	1c21      	adds	r1, r4, #0
   223ba:	1c38      	adds	r0, r7, #0
   223bc:	4699      	mov	r9, r3
   223be:	f7fd f879 	bl	1f4b4 <__aeabi_uidivmod>
   223c2:	0c33      	lsrs	r3, r6, #16
   223c4:	0408      	lsls	r0, r1, #16
   223c6:	4318      	orrs	r0, r3
   223c8:	4581      	cmp	r9, r0
   223ca:	d909      	bls.n	223e0 <__divdi3+0x94>
   223cc:	4440      	add	r0, r8
   223ce:	1e6b      	subs	r3, r5, #1
   223d0:	4580      	cmp	r8, r0
   223d2:	d900      	bls.n	223d6 <__divdi3+0x8a>
   223d4:	e177      	b.n	226c6 <__divdi3+0x37a>
   223d6:	4581      	cmp	r9, r0
   223d8:	d800      	bhi.n	223dc <__divdi3+0x90>
   223da:	e174      	b.n	226c6 <__divdi3+0x37a>
   223dc:	3d02      	subs	r5, #2
   223de:	4440      	add	r0, r8
   223e0:	4649      	mov	r1, r9
   223e2:	1a41      	subs	r1, r0, r1
   223e4:	4689      	mov	r9, r1
   223e6:	1c08      	adds	r0, r1, #0
   223e8:	1c21      	adds	r1, r4, #0
   223ea:	f7fd f81f 	bl	1f42c <__aeabi_uidiv>
   223ee:	465a      	mov	r2, fp
   223f0:	4342      	muls	r2, r0
   223f2:	1c07      	adds	r7, r0, #0
   223f4:	1c21      	adds	r1, r4, #0
   223f6:	4648      	mov	r0, r9
   223f8:	4693      	mov	fp, r2
   223fa:	f7fd f85b 	bl	1f4b4 <__aeabi_uidivmod>
   223fe:	0436      	lsls	r6, r6, #16
   22400:	0409      	lsls	r1, r1, #16
   22402:	0c36      	lsrs	r6, r6, #16
   22404:	430e      	orrs	r6, r1
   22406:	45b3      	cmp	fp, r6
   22408:	d907      	bls.n	2241a <__divdi3+0xce>
   2240a:	4446      	add	r6, r8
   2240c:	1e7b      	subs	r3, r7, #1
   2240e:	45b0      	cmp	r8, r6
   22410:	d802      	bhi.n	22418 <__divdi3+0xcc>
   22412:	3f02      	subs	r7, #2
   22414:	45b3      	cmp	fp, r6
   22416:	d800      	bhi.n	2241a <__divdi3+0xce>
   22418:	1c1f      	adds	r7, r3, #0
   2241a:	042d      	lsls	r5, r5, #16
   2241c:	432f      	orrs	r7, r5
   2241e:	2400      	movs	r4, #0
   22420:	e003      	b.n	2242a <__divdi3+0xde>
   22422:	42b9      	cmp	r1, r7
   22424:	d960      	bls.n	224e8 <__divdi3+0x19c>
   22426:	2400      	movs	r4, #0
   22428:	2700      	movs	r7, #0
   2242a:	4652      	mov	r2, sl
   2242c:	1c38      	adds	r0, r7, #0
   2242e:	1c21      	adds	r1, r4, #0
   22430:	2a00      	cmp	r2, #0
   22432:	d003      	beq.n	2243c <__divdi3+0xf0>
   22434:	1c3b      	adds	r3, r7, #0
   22436:	2100      	movs	r1, #0
   22438:	4258      	negs	r0, r3
   2243a:	41a1      	sbcs	r1, r4
   2243c:	b005      	add	sp, #20
   2243e:	bc3c      	pop	{r2, r3, r4, r5}
   22440:	4690      	mov	r8, r2
   22442:	4699      	mov	r9, r3
   22444:	46a2      	mov	sl, r4
   22446:	46ab      	mov	fp, r5
   22448:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2244a:	2800      	cmp	r0, #0
   2244c:	d104      	bne.n	22458 <__divdi3+0x10c>
   2244e:	2001      	movs	r0, #1
   22450:	2100      	movs	r1, #0
   22452:	f7fc ffeb 	bl	1f42c <__aeabi_uidiv>
   22456:	4680      	mov	r8, r0
   22458:	4640      	mov	r0, r8
   2245a:	f7ff ff37 	bl	222cc <__clzsi2>
   2245e:	2800      	cmp	r0, #0
   22460:	d160      	bne.n	22524 <__divdi3+0x1d8>
   22462:	4641      	mov	r1, r8
   22464:	4644      	mov	r4, r8
   22466:	040b      	lsls	r3, r1, #16
   22468:	1b3c      	subs	r4, r7, r4
   2246a:	0c1b      	lsrs	r3, r3, #16
   2246c:	46a3      	mov	fp, r4
   2246e:	0c0d      	lsrs	r5, r1, #16
   22470:	9300      	str	r3, [sp, #0]
   22472:	2401      	movs	r4, #1
   22474:	1c29      	adds	r1, r5, #0
   22476:	4658      	mov	r0, fp
   22478:	f7fc ffd8 	bl	1f42c <__aeabi_uidiv>
   2247c:	9f00      	ldr	r7, [sp, #0]
   2247e:	4681      	mov	r9, r0
   22480:	4347      	muls	r7, r0
   22482:	1c29      	adds	r1, r5, #0
   22484:	4658      	mov	r0, fp
   22486:	f7fd f815 	bl	1f4b4 <__aeabi_uidivmod>
   2248a:	0c33      	lsrs	r3, r6, #16
   2248c:	0409      	lsls	r1, r1, #16
   2248e:	4319      	orrs	r1, r3
   22490:	428f      	cmp	r7, r1
   22492:	d908      	bls.n	224a6 <__divdi3+0x15a>
   22494:	464b      	mov	r3, r9
   22496:	4441      	add	r1, r8
   22498:	3b01      	subs	r3, #1
   2249a:	4588      	cmp	r8, r1
   2249c:	d802      	bhi.n	224a4 <__divdi3+0x158>
   2249e:	428f      	cmp	r7, r1
   224a0:	d900      	bls.n	224a4 <__divdi3+0x158>
   224a2:	e125      	b.n	226f0 <__divdi3+0x3a4>
   224a4:	4699      	mov	r9, r3
   224a6:	1bc9      	subs	r1, r1, r7
   224a8:	468b      	mov	fp, r1
   224aa:	1c08      	adds	r0, r1, #0
   224ac:	1c29      	adds	r1, r5, #0
   224ae:	f7fc ffbd 	bl	1f42c <__aeabi_uidiv>
   224b2:	9b00      	ldr	r3, [sp, #0]
   224b4:	1c29      	adds	r1, r5, #0
   224b6:	4343      	muls	r3, r0
   224b8:	1c07      	adds	r7, r0, #0
   224ba:	4658      	mov	r0, fp
   224bc:	9300      	str	r3, [sp, #0]
   224be:	f7fc fff9 	bl	1f4b4 <__aeabi_uidivmod>
   224c2:	0436      	lsls	r6, r6, #16
   224c4:	9d00      	ldr	r5, [sp, #0]
   224c6:	0409      	lsls	r1, r1, #16
   224c8:	0c36      	lsrs	r6, r6, #16
   224ca:	430e      	orrs	r6, r1
   224cc:	42b5      	cmp	r5, r6
   224ce:	d907      	bls.n	224e0 <__divdi3+0x194>
   224d0:	4446      	add	r6, r8
   224d2:	1e7b      	subs	r3, r7, #1
   224d4:	45b0      	cmp	r8, r6
   224d6:	d802      	bhi.n	224de <__divdi3+0x192>
   224d8:	3f02      	subs	r7, #2
   224da:	42b5      	cmp	r5, r6
   224dc:	d800      	bhi.n	224e0 <__divdi3+0x194>
   224de:	1c1f      	adds	r7, r3, #0
   224e0:	4649      	mov	r1, r9
   224e2:	040b      	lsls	r3, r1, #16
   224e4:	431f      	orrs	r7, r3
   224e6:	e7a0      	b.n	2242a <__divdi3+0xde>
   224e8:	1c08      	adds	r0, r1, #0
   224ea:	f7ff feef 	bl	222cc <__clzsi2>
   224ee:	1e04      	subs	r4, r0, #0
   224f0:	d170      	bne.n	225d4 <__divdi3+0x288>
   224f2:	45b9      	cmp	r9, r7
   224f4:	d303      	bcc.n	224fe <__divdi3+0x1b2>
   224f6:	9c00      	ldr	r4, [sp, #0]
   224f8:	9d01      	ldr	r5, [sp, #4]
   224fa:	42ac      	cmp	r4, r5
   224fc:	d893      	bhi.n	22426 <__divdi3+0xda>
   224fe:	2400      	movs	r4, #0
   22500:	2701      	movs	r7, #1
   22502:	e792      	b.n	2242a <__divdi3+0xde>
   22504:	4652      	mov	r2, sl
   22506:	43d2      	mvns	r2, r2
   22508:	1c03      	adds	r3, r0, #0
   2250a:	1c0c      	adds	r4, r1, #0
   2250c:	4692      	mov	sl, r2
   2250e:	2100      	movs	r1, #0
   22510:	4258      	negs	r0, r3
   22512:	41a1      	sbcs	r1, r4
   22514:	e72e      	b.n	22374 <__divdi3+0x28>
   22516:	2700      	movs	r7, #0
   22518:	4246      	negs	r6, r0
   2251a:	418f      	sbcs	r7, r1
   2251c:	2101      	movs	r1, #1
   2251e:	4249      	negs	r1, r1
   22520:	468a      	mov	sl, r1
   22522:	e722      	b.n	2236a <__divdi3+0x1e>
   22524:	2320      	movs	r3, #32
   22526:	1a1b      	subs	r3, r3, r0
   22528:	4642      	mov	r2, r8
   2252a:	1c35      	adds	r5, r6, #0
   2252c:	4082      	lsls	r2, r0
   2252e:	1c3c      	adds	r4, r7, #0
   22530:	40dd      	lsrs	r5, r3
   22532:	40dc      	lsrs	r4, r3
   22534:	4087      	lsls	r7, r0
   22536:	1c2b      	adds	r3, r5, #0
   22538:	0c15      	lsrs	r5, r2, #16
   2253a:	433b      	orrs	r3, r7
   2253c:	1c29      	adds	r1, r5, #0
   2253e:	4086      	lsls	r6, r0
   22540:	1c20      	adds	r0, r4, #0
   22542:	9300      	str	r3, [sp, #0]
   22544:	0417      	lsls	r7, r2, #16
   22546:	4690      	mov	r8, r2
   22548:	f7fc ff70 	bl	1f42c <__aeabi_uidiv>
   2254c:	0c3f      	lsrs	r7, r7, #16
   2254e:	1c01      	adds	r1, r0, #0
   22550:	4379      	muls	r1, r7
   22552:	4681      	mov	r9, r0
   22554:	468b      	mov	fp, r1
   22556:	1c20      	adds	r0, r4, #0
   22558:	1c29      	adds	r1, r5, #0
   2255a:	f7fc ffab 	bl	1f4b4 <__aeabi_uidivmod>
   2255e:	9c00      	ldr	r4, [sp, #0]
   22560:	0409      	lsls	r1, r1, #16
   22562:	0c23      	lsrs	r3, r4, #16
   22564:	4319      	orrs	r1, r3
   22566:	458b      	cmp	fp, r1
   22568:	d90c      	bls.n	22584 <__divdi3+0x238>
   2256a:	464b      	mov	r3, r9
   2256c:	4441      	add	r1, r8
   2256e:	3b01      	subs	r3, #1
   22570:	4588      	cmp	r8, r1
   22572:	d900      	bls.n	22576 <__divdi3+0x22a>
   22574:	e0ba      	b.n	226ec <__divdi3+0x3a0>
   22576:	458b      	cmp	fp, r1
   22578:	d800      	bhi.n	2257c <__divdi3+0x230>
   2257a:	e0b7      	b.n	226ec <__divdi3+0x3a0>
   2257c:	2202      	movs	r2, #2
   2257e:	4252      	negs	r2, r2
   22580:	4491      	add	r9, r2
   22582:	4441      	add	r1, r8
   22584:	465c      	mov	r4, fp
   22586:	1b0c      	subs	r4, r1, r4
   22588:	1c20      	adds	r0, r4, #0
   2258a:	1c29      	adds	r1, r5, #0
   2258c:	9401      	str	r4, [sp, #4]
   2258e:	f7fc ff4d 	bl	1f42c <__aeabi_uidiv>
   22592:	1c39      	adds	r1, r7, #0
   22594:	4341      	muls	r1, r0
   22596:	1c04      	adds	r4, r0, #0
   22598:	468b      	mov	fp, r1
   2259a:	9801      	ldr	r0, [sp, #4]
   2259c:	1c29      	adds	r1, r5, #0
   2259e:	f7fc ff89 	bl	1f4b4 <__aeabi_uidivmod>
   225a2:	9a00      	ldr	r2, [sp, #0]
   225a4:	0409      	lsls	r1, r1, #16
   225a6:	0413      	lsls	r3, r2, #16
   225a8:	0c1b      	lsrs	r3, r3, #16
   225aa:	4319      	orrs	r1, r3
   225ac:	458b      	cmp	fp, r1
   225ae:	d909      	bls.n	225c4 <__divdi3+0x278>
   225b0:	4441      	add	r1, r8
   225b2:	1e63      	subs	r3, r4, #1
   225b4:	4588      	cmp	r8, r1
   225b6:	d900      	bls.n	225ba <__divdi3+0x26e>
   225b8:	e094      	b.n	226e4 <__divdi3+0x398>
   225ba:	458b      	cmp	fp, r1
   225bc:	d800      	bhi.n	225c0 <__divdi3+0x274>
   225be:	e091      	b.n	226e4 <__divdi3+0x398>
   225c0:	3c02      	subs	r4, #2
   225c2:	4441      	add	r1, r8
   225c4:	465b      	mov	r3, fp
   225c6:	1acb      	subs	r3, r1, r3
   225c8:	4649      	mov	r1, r9
   225ca:	469b      	mov	fp, r3
   225cc:	040b      	lsls	r3, r1, #16
   225ce:	431c      	orrs	r4, r3
   225d0:	9700      	str	r7, [sp, #0]
   225d2:	e74f      	b.n	22474 <__divdi3+0x128>
   225d4:	9d00      	ldr	r5, [sp, #0]
   225d6:	2320      	movs	r3, #32
   225d8:	1a1b      	subs	r3, r3, r0
   225da:	464a      	mov	r2, r9
   225dc:	9900      	ldr	r1, [sp, #0]
   225de:	4082      	lsls	r2, r0
   225e0:	40dd      	lsrs	r5, r3
   225e2:	4315      	orrs	r5, r2
   225e4:	4081      	lsls	r1, r0
   225e6:	1c3a      	adds	r2, r7, #0
   225e8:	40da      	lsrs	r2, r3
   225ea:	9100      	str	r1, [sp, #0]
   225ec:	1c31      	adds	r1, r6, #0
   225ee:	4690      	mov	r8, r2
   225f0:	40d9      	lsrs	r1, r3
   225f2:	1c3a      	adds	r2, r7, #0
   225f4:	4082      	lsls	r2, r0
   225f6:	1c0b      	adds	r3, r1, #0
   225f8:	4313      	orrs	r3, r2
   225fa:	9301      	str	r3, [sp, #4]
   225fc:	0c2f      	lsrs	r7, r5, #16
   225fe:	042b      	lsls	r3, r5, #16
   22600:	0c1b      	lsrs	r3, r3, #16
   22602:	1c39      	adds	r1, r7, #0
   22604:	4640      	mov	r0, r8
   22606:	9302      	str	r3, [sp, #8]
   22608:	f7fc ff10 	bl	1f42c <__aeabi_uidiv>
   2260c:	9a02      	ldr	r2, [sp, #8]
   2260e:	4681      	mov	r9, r0
   22610:	4342      	muls	r2, r0
   22612:	1c39      	adds	r1, r7, #0
   22614:	4640      	mov	r0, r8
   22616:	4693      	mov	fp, r2
   22618:	f7fc ff4c 	bl	1f4b4 <__aeabi_uidivmod>
   2261c:	9a01      	ldr	r2, [sp, #4]
   2261e:	0409      	lsls	r1, r1, #16
   22620:	0c13      	lsrs	r3, r2, #16
   22622:	4319      	orrs	r1, r3
   22624:	458b      	cmp	fp, r1
   22626:	d90a      	bls.n	2263e <__divdi3+0x2f2>
   22628:	464b      	mov	r3, r9
   2262a:	1949      	adds	r1, r1, r5
   2262c:	3b01      	subs	r3, #1
   2262e:	428d      	cmp	r5, r1
   22630:	d85a      	bhi.n	226e8 <__divdi3+0x39c>
   22632:	458b      	cmp	fp, r1
   22634:	d958      	bls.n	226e8 <__divdi3+0x39c>
   22636:	2302      	movs	r3, #2
   22638:	425b      	negs	r3, r3
   2263a:	4499      	add	r9, r3
   2263c:	1949      	adds	r1, r1, r5
   2263e:	465a      	mov	r2, fp
   22640:	1a8a      	subs	r2, r1, r2
   22642:	1c10      	adds	r0, r2, #0
   22644:	1c39      	adds	r1, r7, #0
   22646:	9203      	str	r2, [sp, #12]
   22648:	f7fc fef0 	bl	1f42c <__aeabi_uidiv>
   2264c:	9b02      	ldr	r3, [sp, #8]
   2264e:	4680      	mov	r8, r0
   22650:	4343      	muls	r3, r0
   22652:	1c39      	adds	r1, r7, #0
   22654:	9803      	ldr	r0, [sp, #12]
   22656:	469b      	mov	fp, r3
   22658:	f7fc ff2c 	bl	1f4b4 <__aeabi_uidivmod>
   2265c:	9a01      	ldr	r2, [sp, #4]
   2265e:	0409      	lsls	r1, r1, #16
   22660:	0413      	lsls	r3, r2, #16
   22662:	0c1b      	lsrs	r3, r3, #16
   22664:	4319      	orrs	r1, r3
   22666:	458b      	cmp	fp, r1
   22668:	d90a      	bls.n	22680 <__divdi3+0x334>
   2266a:	4643      	mov	r3, r8
   2266c:	1949      	adds	r1, r1, r5
   2266e:	3b01      	subs	r3, #1
   22670:	428d      	cmp	r5, r1
   22672:	d835      	bhi.n	226e0 <__divdi3+0x394>
   22674:	458b      	cmp	fp, r1
   22676:	d933      	bls.n	226e0 <__divdi3+0x394>
   22678:	2302      	movs	r3, #2
   2267a:	425b      	negs	r3, r3
   2267c:	4498      	add	r8, r3
   2267e:	1949      	adds	r1, r1, r5
   22680:	465d      	mov	r5, fp
   22682:	1b4d      	subs	r5, r1, r5
   22684:	46ab      	mov	fp, r5
   22686:	4649      	mov	r1, r9
   22688:	9d00      	ldr	r5, [sp, #0]
   2268a:	040f      	lsls	r7, r1, #16
   2268c:	4642      	mov	r2, r8
   2268e:	4317      	orrs	r7, r2
   22690:	042a      	lsls	r2, r5, #16
   22692:	0c12      	lsrs	r2, r2, #16
   22694:	043b      	lsls	r3, r7, #16
   22696:	0c2d      	lsrs	r5, r5, #16
   22698:	0c1b      	lsrs	r3, r3, #16
   2269a:	0c38      	lsrs	r0, r7, #16
   2269c:	1c11      	adds	r1, r2, #0
   2269e:	4359      	muls	r1, r3
   226a0:	4342      	muls	r2, r0
   226a2:	436b      	muls	r3, r5
   226a4:	4368      	muls	r0, r5
   226a6:	18d3      	adds	r3, r2, r3
   226a8:	0c0d      	lsrs	r5, r1, #16
   226aa:	195b      	adds	r3, r3, r5
   226ac:	468c      	mov	ip, r1
   226ae:	429a      	cmp	r2, r3
   226b0:	d902      	bls.n	226b8 <__divdi3+0x36c>
   226b2:	2280      	movs	r2, #128	; 0x80
   226b4:	0252      	lsls	r2, r2, #9
   226b6:	1880      	adds	r0, r0, r2
   226b8:	0c1d      	lsrs	r5, r3, #16
   226ba:	1940      	adds	r0, r0, r5
   226bc:	4583      	cmp	fp, r0
   226be:	d30c      	bcc.n	226da <__divdi3+0x38e>
   226c0:	d003      	beq.n	226ca <__divdi3+0x37e>
   226c2:	2400      	movs	r4, #0
   226c4:	e6b1      	b.n	2242a <__divdi3+0xde>
   226c6:	1c1d      	adds	r5, r3, #0
   226c8:	e68a      	b.n	223e0 <__divdi3+0x94>
   226ca:	4665      	mov	r5, ip
   226cc:	042a      	lsls	r2, r5, #16
   226ce:	041b      	lsls	r3, r3, #16
   226d0:	0c12      	lsrs	r2, r2, #16
   226d2:	189b      	adds	r3, r3, r2
   226d4:	40a6      	lsls	r6, r4
   226d6:	429e      	cmp	r6, r3
   226d8:	d2f3      	bcs.n	226c2 <__divdi3+0x376>
   226da:	3f01      	subs	r7, #1
   226dc:	2400      	movs	r4, #0
   226de:	e6a4      	b.n	2242a <__divdi3+0xde>
   226e0:	4698      	mov	r8, r3
   226e2:	e7cd      	b.n	22680 <__divdi3+0x334>
   226e4:	1c1c      	adds	r4, r3, #0
   226e6:	e76d      	b.n	225c4 <__divdi3+0x278>
   226e8:	4699      	mov	r9, r3
   226ea:	e7a8      	b.n	2263e <__divdi3+0x2f2>
   226ec:	4699      	mov	r9, r3
   226ee:	e749      	b.n	22584 <__divdi3+0x238>
   226f0:	2202      	movs	r2, #2
   226f2:	4252      	negs	r2, r2
   226f4:	4491      	add	r9, r2
   226f6:	4441      	add	r1, r8
   226f8:	e6d5      	b.n	224a6 <__divdi3+0x15a>
   226fa:	46c0      	nop			; (mov r8, r8)

000226fc <__udivdi3>:
   226fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   226fe:	465f      	mov	r7, fp
   22700:	4656      	mov	r6, sl
   22702:	464d      	mov	r5, r9
   22704:	4644      	mov	r4, r8
   22706:	b4f0      	push	{r4, r5, r6, r7}
   22708:	1c0d      	adds	r5, r1, #0
   2270a:	b085      	sub	sp, #20
   2270c:	1c06      	adds	r6, r0, #0
   2270e:	4692      	mov	sl, r2
   22710:	4698      	mov	r8, r3
   22712:	9002      	str	r0, [sp, #8]
   22714:	9101      	str	r1, [sp, #4]
   22716:	9203      	str	r2, [sp, #12]
   22718:	1c1f      	adds	r7, r3, #0
   2271a:	1c14      	adds	r4, r2, #0
   2271c:	4683      	mov	fp, r0
   2271e:	46a9      	mov	r9, r5
   22720:	2b00      	cmp	r3, #0
   22722:	d152      	bne.n	227ca <__udivdi3+0xce>
   22724:	42aa      	cmp	r2, r5
   22726:	d96b      	bls.n	22800 <__udivdi3+0x104>
   22728:	1c10      	adds	r0, r2, #0
   2272a:	f7ff fdcf 	bl	222cc <__clzsi2>
   2272e:	2800      	cmp	r0, #0
   22730:	d00a      	beq.n	22748 <__udivdi3+0x4c>
   22732:	2320      	movs	r3, #32
   22734:	1a1b      	subs	r3, r3, r0
   22736:	1c31      	adds	r1, r6, #0
   22738:	40d9      	lsrs	r1, r3
   2273a:	4085      	lsls	r5, r0
   2273c:	1c0b      	adds	r3, r1, #0
   2273e:	432b      	orrs	r3, r5
   22740:	4086      	lsls	r6, r0
   22742:	4084      	lsls	r4, r0
   22744:	4699      	mov	r9, r3
   22746:	46b3      	mov	fp, r6
   22748:	0c25      	lsrs	r5, r4, #16
   2274a:	0423      	lsls	r3, r4, #16
   2274c:	0c1b      	lsrs	r3, r3, #16
   2274e:	1c29      	adds	r1, r5, #0
   22750:	4648      	mov	r0, r9
   22752:	4698      	mov	r8, r3
   22754:	f7fc fe6a 	bl	1f42c <__aeabi_uidiv>
   22758:	4646      	mov	r6, r8
   2275a:	1c07      	adds	r7, r0, #0
   2275c:	4346      	muls	r6, r0
   2275e:	1c29      	adds	r1, r5, #0
   22760:	4648      	mov	r0, r9
   22762:	f7fc fea7 	bl	1f4b4 <__aeabi_uidivmod>
   22766:	465a      	mov	r2, fp
   22768:	0409      	lsls	r1, r1, #16
   2276a:	0c13      	lsrs	r3, r2, #16
   2276c:	4319      	orrs	r1, r3
   2276e:	428e      	cmp	r6, r1
   22770:	d909      	bls.n	22786 <__udivdi3+0x8a>
   22772:	1909      	adds	r1, r1, r4
   22774:	1e7b      	subs	r3, r7, #1
   22776:	428c      	cmp	r4, r1
   22778:	d900      	bls.n	2277c <__udivdi3+0x80>
   2277a:	e159      	b.n	22a30 <__udivdi3+0x334>
   2277c:	428e      	cmp	r6, r1
   2277e:	d800      	bhi.n	22782 <__udivdi3+0x86>
   22780:	e156      	b.n	22a30 <__udivdi3+0x334>
   22782:	3f02      	subs	r7, #2
   22784:	1909      	adds	r1, r1, r4
   22786:	1b89      	subs	r1, r1, r6
   22788:	4689      	mov	r9, r1
   2278a:	1c08      	adds	r0, r1, #0
   2278c:	1c29      	adds	r1, r5, #0
   2278e:	f7fc fe4d 	bl	1f42c <__aeabi_uidiv>
   22792:	4643      	mov	r3, r8
   22794:	4343      	muls	r3, r0
   22796:	1c06      	adds	r6, r0, #0
   22798:	1c29      	adds	r1, r5, #0
   2279a:	4648      	mov	r0, r9
   2279c:	4698      	mov	r8, r3
   2279e:	f7fc fe89 	bl	1f4b4 <__aeabi_uidivmod>
   227a2:	465a      	mov	r2, fp
   227a4:	0413      	lsls	r3, r2, #16
   227a6:	0409      	lsls	r1, r1, #16
   227a8:	0c1b      	lsrs	r3, r3, #16
   227aa:	4319      	orrs	r1, r3
   227ac:	4588      	cmp	r8, r1
   227ae:	d908      	bls.n	227c2 <__udivdi3+0xc6>
   227b0:	1909      	adds	r1, r1, r4
   227b2:	1e73      	subs	r3, r6, #1
   227b4:	428c      	cmp	r4, r1
   227b6:	d900      	bls.n	227ba <__udivdi3+0xbe>
   227b8:	e138      	b.n	22a2c <__udivdi3+0x330>
   227ba:	3e02      	subs	r6, #2
   227bc:	4588      	cmp	r8, r1
   227be:	d800      	bhi.n	227c2 <__udivdi3+0xc6>
   227c0:	e134      	b.n	22a2c <__udivdi3+0x330>
   227c2:	0438      	lsls	r0, r7, #16
   227c4:	4330      	orrs	r0, r6
   227c6:	2700      	movs	r7, #0
   227c8:	e012      	b.n	227f0 <__udivdi3+0xf4>
   227ca:	9a01      	ldr	r2, [sp, #4]
   227cc:	4293      	cmp	r3, r2
   227ce:	d80d      	bhi.n	227ec <__udivdi3+0xf0>
   227d0:	1c18      	adds	r0, r3, #0
   227d2:	f7ff fd7b 	bl	222cc <__clzsi2>
   227d6:	1e04      	subs	r4, r0, #0
   227d8:	d166      	bne.n	228a8 <__udivdi3+0x1ac>
   227da:	9b01      	ldr	r3, [sp, #4]
   227dc:	429f      	cmp	r7, r3
   227de:	d200      	bcs.n	227e2 <__udivdi3+0xe6>
   227e0:	e121      	b.n	22a26 <__udivdi3+0x32a>
   227e2:	9f03      	ldr	r7, [sp, #12]
   227e4:	9902      	ldr	r1, [sp, #8]
   227e6:	428f      	cmp	r7, r1
   227e8:	d800      	bhi.n	227ec <__udivdi3+0xf0>
   227ea:	e11c      	b.n	22a26 <__udivdi3+0x32a>
   227ec:	2700      	movs	r7, #0
   227ee:	2000      	movs	r0, #0
   227f0:	1c39      	adds	r1, r7, #0
   227f2:	b005      	add	sp, #20
   227f4:	bc3c      	pop	{r2, r3, r4, r5}
   227f6:	4690      	mov	r8, r2
   227f8:	4699      	mov	r9, r3
   227fa:	46a2      	mov	sl, r4
   227fc:	46ab      	mov	fp, r5
   227fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22800:	2a00      	cmp	r2, #0
   22802:	d104      	bne.n	2280e <__udivdi3+0x112>
   22804:	2001      	movs	r0, #1
   22806:	2100      	movs	r1, #0
   22808:	f7fc fe10 	bl	1f42c <__aeabi_uidiv>
   2280c:	1c04      	adds	r4, r0, #0
   2280e:	1c20      	adds	r0, r4, #0
   22810:	f7ff fd5c 	bl	222cc <__clzsi2>
   22814:	2800      	cmp	r0, #0
   22816:	d000      	beq.n	2281a <__udivdi3+0x11e>
   22818:	e0b6      	b.n	22988 <__udivdi3+0x28c>
   2281a:	0423      	lsls	r3, r4, #16
   2281c:	1b2d      	subs	r5, r5, r4
   2281e:	0c1b      	lsrs	r3, r3, #16
   22820:	46a9      	mov	r9, r5
   22822:	0c26      	lsrs	r6, r4, #16
   22824:	4698      	mov	r8, r3
   22826:	2701      	movs	r7, #1
   22828:	1c31      	adds	r1, r6, #0
   2282a:	4648      	mov	r0, r9
   2282c:	f7fc fdfe 	bl	1f42c <__aeabi_uidiv>
   22830:	4641      	mov	r1, r8
   22832:	4341      	muls	r1, r0
   22834:	1c05      	adds	r5, r0, #0
   22836:	468a      	mov	sl, r1
   22838:	4648      	mov	r0, r9
   2283a:	1c31      	adds	r1, r6, #0
   2283c:	f7fc fe3a 	bl	1f4b4 <__aeabi_uidivmod>
   22840:	465a      	mov	r2, fp
   22842:	0408      	lsls	r0, r1, #16
   22844:	0c13      	lsrs	r3, r2, #16
   22846:	4318      	orrs	r0, r3
   22848:	4582      	cmp	sl, r0
   2284a:	d907      	bls.n	2285c <__udivdi3+0x160>
   2284c:	1900      	adds	r0, r0, r4
   2284e:	1e6b      	subs	r3, r5, #1
   22850:	4284      	cmp	r4, r0
   22852:	d802      	bhi.n	2285a <__udivdi3+0x15e>
   22854:	4582      	cmp	sl, r0
   22856:	d900      	bls.n	2285a <__udivdi3+0x15e>
   22858:	e10d      	b.n	22a76 <__udivdi3+0x37a>
   2285a:	1c1d      	adds	r5, r3, #0
   2285c:	4653      	mov	r3, sl
   2285e:	1ac3      	subs	r3, r0, r3
   22860:	1c18      	adds	r0, r3, #0
   22862:	1c31      	adds	r1, r6, #0
   22864:	469a      	mov	sl, r3
   22866:	f7fc fde1 	bl	1f42c <__aeabi_uidiv>
   2286a:	4641      	mov	r1, r8
   2286c:	4341      	muls	r1, r0
   2286e:	4681      	mov	r9, r0
   22870:	4688      	mov	r8, r1
   22872:	4650      	mov	r0, sl
   22874:	1c31      	adds	r1, r6, #0
   22876:	f7fc fe1d 	bl	1f4b4 <__aeabi_uidivmod>
   2287a:	465a      	mov	r2, fp
   2287c:	0413      	lsls	r3, r2, #16
   2287e:	0409      	lsls	r1, r1, #16
   22880:	0c1b      	lsrs	r3, r3, #16
   22882:	4319      	orrs	r1, r3
   22884:	4588      	cmp	r8, r1
   22886:	d90b      	bls.n	228a0 <__udivdi3+0x1a4>
   22888:	464b      	mov	r3, r9
   2288a:	1909      	adds	r1, r1, r4
   2288c:	3b01      	subs	r3, #1
   2288e:	428c      	cmp	r4, r1
   22890:	d900      	bls.n	22894 <__udivdi3+0x198>
   22892:	e0cf      	b.n	22a34 <__udivdi3+0x338>
   22894:	4588      	cmp	r8, r1
   22896:	d800      	bhi.n	2289a <__udivdi3+0x19e>
   22898:	e0cc      	b.n	22a34 <__udivdi3+0x338>
   2289a:	2302      	movs	r3, #2
   2289c:	425b      	negs	r3, r3
   2289e:	4499      	add	r9, r3
   228a0:	0428      	lsls	r0, r5, #16
   228a2:	4649      	mov	r1, r9
   228a4:	4308      	orrs	r0, r1
   228a6:	e7a3      	b.n	227f0 <__udivdi3+0xf4>
   228a8:	2320      	movs	r3, #32
   228aa:	1a1b      	subs	r3, r3, r0
   228ac:	4642      	mov	r2, r8
   228ae:	4657      	mov	r7, sl
   228b0:	4082      	lsls	r2, r0
   228b2:	40df      	lsrs	r7, r3
   228b4:	4317      	orrs	r7, r2
   228b6:	4652      	mov	r2, sl
   228b8:	4082      	lsls	r2, r0
   228ba:	9201      	str	r2, [sp, #4]
   228bc:	1c32      	adds	r2, r6, #0
   228be:	40da      	lsrs	r2, r3
   228c0:	1c29      	adds	r1, r5, #0
   228c2:	40d9      	lsrs	r1, r3
   228c4:	4085      	lsls	r5, r0
   228c6:	1c13      	adds	r3, r2, #0
   228c8:	432b      	orrs	r3, r5
   228ca:	9302      	str	r3, [sp, #8]
   228cc:	0c3d      	lsrs	r5, r7, #16
   228ce:	043b      	lsls	r3, r7, #16
   228d0:	0c1b      	lsrs	r3, r3, #16
   228d2:	4688      	mov	r8, r1
   228d4:	1c08      	adds	r0, r1, #0
   228d6:	1c29      	adds	r1, r5, #0
   228d8:	469a      	mov	sl, r3
   228da:	f7fc fda7 	bl	1f42c <__aeabi_uidiv>
   228de:	4653      	mov	r3, sl
   228e0:	4343      	muls	r3, r0
   228e2:	4681      	mov	r9, r0
   228e4:	1c29      	adds	r1, r5, #0
   228e6:	4640      	mov	r0, r8
   228e8:	469b      	mov	fp, r3
   228ea:	f7fc fde3 	bl	1f4b4 <__aeabi_uidivmod>
   228ee:	9a02      	ldr	r2, [sp, #8]
   228f0:	0409      	lsls	r1, r1, #16
   228f2:	0c13      	lsrs	r3, r2, #16
   228f4:	4319      	orrs	r1, r3
   228f6:	458b      	cmp	fp, r1
   228f8:	d906      	bls.n	22908 <__udivdi3+0x20c>
   228fa:	464b      	mov	r3, r9
   228fc:	19c9      	adds	r1, r1, r7
   228fe:	3b01      	subs	r3, #1
   22900:	428f      	cmp	r7, r1
   22902:	d800      	bhi.n	22906 <__udivdi3+0x20a>
   22904:	e0ab      	b.n	22a5e <__udivdi3+0x362>
   22906:	4699      	mov	r9, r3
   22908:	465a      	mov	r2, fp
   2290a:	1a8a      	subs	r2, r1, r2
   2290c:	1c10      	adds	r0, r2, #0
   2290e:	1c29      	adds	r1, r5, #0
   22910:	4693      	mov	fp, r2
   22912:	f7fc fd8b 	bl	1f42c <__aeabi_uidiv>
   22916:	4653      	mov	r3, sl
   22918:	4343      	muls	r3, r0
   2291a:	1c29      	adds	r1, r5, #0
   2291c:	4680      	mov	r8, r0
   2291e:	4658      	mov	r0, fp
   22920:	469a      	mov	sl, r3
   22922:	f7fc fdc7 	bl	1f4b4 <__aeabi_uidivmod>
   22926:	9a02      	ldr	r2, [sp, #8]
   22928:	0409      	lsls	r1, r1, #16
   2292a:	0415      	lsls	r5, r2, #16
   2292c:	0c2d      	lsrs	r5, r5, #16
   2292e:	4329      	orrs	r1, r5
   22930:	458a      	cmp	sl, r1
   22932:	d906      	bls.n	22942 <__udivdi3+0x246>
   22934:	4643      	mov	r3, r8
   22936:	19c9      	adds	r1, r1, r7
   22938:	3b01      	subs	r3, #1
   2293a:	428f      	cmp	r7, r1
   2293c:	d800      	bhi.n	22940 <__udivdi3+0x244>
   2293e:	e086      	b.n	22a4e <__udivdi3+0x352>
   22940:	4698      	mov	r8, r3
   22942:	4657      	mov	r7, sl
   22944:	1bcf      	subs	r7, r1, r7
   22946:	46ba      	mov	sl, r7
   22948:	4649      	mov	r1, r9
   2294a:	9f01      	ldr	r7, [sp, #4]
   2294c:	0408      	lsls	r0, r1, #16
   2294e:	4642      	mov	r2, r8
   22950:	4310      	orrs	r0, r2
   22952:	043d      	lsls	r5, r7, #16
   22954:	0c2d      	lsrs	r5, r5, #16
   22956:	0403      	lsls	r3, r0, #16
   22958:	0c3f      	lsrs	r7, r7, #16
   2295a:	0c1b      	lsrs	r3, r3, #16
   2295c:	0c02      	lsrs	r2, r0, #16
   2295e:	1c29      	adds	r1, r5, #0
   22960:	4359      	muls	r1, r3
   22962:	4355      	muls	r5, r2
   22964:	437b      	muls	r3, r7
   22966:	437a      	muls	r2, r7
   22968:	18eb      	adds	r3, r5, r3
   2296a:	0c0f      	lsrs	r7, r1, #16
   2296c:	19db      	adds	r3, r3, r7
   2296e:	468c      	mov	ip, r1
   22970:	429d      	cmp	r5, r3
   22972:	d902      	bls.n	2297a <__udivdi3+0x27e>
   22974:	2780      	movs	r7, #128	; 0x80
   22976:	027f      	lsls	r7, r7, #9
   22978:	19d2      	adds	r2, r2, r7
   2297a:	0c1d      	lsrs	r5, r3, #16
   2297c:	1952      	adds	r2, r2, r5
   2297e:	4592      	cmp	sl, r2
   22980:	d362      	bcc.n	22a48 <__udivdi3+0x34c>
   22982:	d059      	beq.n	22a38 <__udivdi3+0x33c>
   22984:	2700      	movs	r7, #0
   22986:	e733      	b.n	227f0 <__udivdi3+0xf4>
   22988:	2320      	movs	r3, #32
   2298a:	1a1b      	subs	r3, r3, r0
   2298c:	1c31      	adds	r1, r6, #0
   2298e:	1c2f      	adds	r7, r5, #0
   22990:	40d9      	lsrs	r1, r3
   22992:	40df      	lsrs	r7, r3
   22994:	4085      	lsls	r5, r0
   22996:	1c0b      	adds	r3, r1, #0
   22998:	4084      	lsls	r4, r0
   2299a:	432b      	orrs	r3, r5
   2299c:	4086      	lsls	r6, r0
   2299e:	9301      	str	r3, [sp, #4]
   229a0:	46b3      	mov	fp, r6
   229a2:	0423      	lsls	r3, r4, #16
   229a4:	0c26      	lsrs	r6, r4, #16
   229a6:	0c1b      	lsrs	r3, r3, #16
   229a8:	1c38      	adds	r0, r7, #0
   229aa:	1c31      	adds	r1, r6, #0
   229ac:	4698      	mov	r8, r3
   229ae:	f7fc fd3d 	bl	1f42c <__aeabi_uidiv>
   229b2:	4642      	mov	r2, r8
   229b4:	4342      	muls	r2, r0
   229b6:	1c05      	adds	r5, r0, #0
   229b8:	1c31      	adds	r1, r6, #0
   229ba:	1c38      	adds	r0, r7, #0
   229bc:	4691      	mov	r9, r2
   229be:	f7fc fd79 	bl	1f4b4 <__aeabi_uidivmod>
   229c2:	9f01      	ldr	r7, [sp, #4]
   229c4:	0409      	lsls	r1, r1, #16
   229c6:	0c3b      	lsrs	r3, r7, #16
   229c8:	4319      	orrs	r1, r3
   229ca:	4589      	cmp	r9, r1
   229cc:	d907      	bls.n	229de <__udivdi3+0x2e2>
   229ce:	1909      	adds	r1, r1, r4
   229d0:	1e6b      	subs	r3, r5, #1
   229d2:	428c      	cmp	r4, r1
   229d4:	d84d      	bhi.n	22a72 <__udivdi3+0x376>
   229d6:	4589      	cmp	r9, r1
   229d8:	d94b      	bls.n	22a72 <__udivdi3+0x376>
   229da:	3d02      	subs	r5, #2
   229dc:	1909      	adds	r1, r1, r4
   229de:	464a      	mov	r2, r9
   229e0:	1a8a      	subs	r2, r1, r2
   229e2:	1c10      	adds	r0, r2, #0
   229e4:	1c31      	adds	r1, r6, #0
   229e6:	4692      	mov	sl, r2
   229e8:	f7fc fd20 	bl	1f42c <__aeabi_uidiv>
   229ec:	4643      	mov	r3, r8
   229ee:	4343      	muls	r3, r0
   229f0:	1c07      	adds	r7, r0, #0
   229f2:	1c31      	adds	r1, r6, #0
   229f4:	4650      	mov	r0, sl
   229f6:	4699      	mov	r9, r3
   229f8:	f7fc fd5c 	bl	1f4b4 <__aeabi_uidivmod>
   229fc:	9a01      	ldr	r2, [sp, #4]
   229fe:	0409      	lsls	r1, r1, #16
   22a00:	0413      	lsls	r3, r2, #16
   22a02:	0c1b      	lsrs	r3, r3, #16
   22a04:	4319      	orrs	r1, r3
   22a06:	4589      	cmp	r9, r1
   22a08:	d907      	bls.n	22a1a <__udivdi3+0x31e>
   22a0a:	1909      	adds	r1, r1, r4
   22a0c:	1e7b      	subs	r3, r7, #1
   22a0e:	428c      	cmp	r4, r1
   22a10:	d82d      	bhi.n	22a6e <__udivdi3+0x372>
   22a12:	4589      	cmp	r9, r1
   22a14:	d92b      	bls.n	22a6e <__udivdi3+0x372>
   22a16:	3f02      	subs	r7, #2
   22a18:	1909      	adds	r1, r1, r4
   22a1a:	464b      	mov	r3, r9
   22a1c:	1acb      	subs	r3, r1, r3
   22a1e:	042d      	lsls	r5, r5, #16
   22a20:	4699      	mov	r9, r3
   22a22:	432f      	orrs	r7, r5
   22a24:	e700      	b.n	22828 <__udivdi3+0x12c>
   22a26:	2700      	movs	r7, #0
   22a28:	2001      	movs	r0, #1
   22a2a:	e6e1      	b.n	227f0 <__udivdi3+0xf4>
   22a2c:	1c1e      	adds	r6, r3, #0
   22a2e:	e6c8      	b.n	227c2 <__udivdi3+0xc6>
   22a30:	1c1f      	adds	r7, r3, #0
   22a32:	e6a8      	b.n	22786 <__udivdi3+0x8a>
   22a34:	4699      	mov	r9, r3
   22a36:	e733      	b.n	228a0 <__udivdi3+0x1a4>
   22a38:	4661      	mov	r1, ip
   22a3a:	040a      	lsls	r2, r1, #16
   22a3c:	041b      	lsls	r3, r3, #16
   22a3e:	0c12      	lsrs	r2, r2, #16
   22a40:	189b      	adds	r3, r3, r2
   22a42:	40a6      	lsls	r6, r4
   22a44:	429e      	cmp	r6, r3
   22a46:	d29d      	bcs.n	22984 <__udivdi3+0x288>
   22a48:	3801      	subs	r0, #1
   22a4a:	2700      	movs	r7, #0
   22a4c:	e6d0      	b.n	227f0 <__udivdi3+0xf4>
   22a4e:	458a      	cmp	sl, r1
   22a50:	d800      	bhi.n	22a54 <__udivdi3+0x358>
   22a52:	e775      	b.n	22940 <__udivdi3+0x244>
   22a54:	2302      	movs	r3, #2
   22a56:	425b      	negs	r3, r3
   22a58:	4498      	add	r8, r3
   22a5a:	19c9      	adds	r1, r1, r7
   22a5c:	e771      	b.n	22942 <__udivdi3+0x246>
   22a5e:	458b      	cmp	fp, r1
   22a60:	d800      	bhi.n	22a64 <__udivdi3+0x368>
   22a62:	e750      	b.n	22906 <__udivdi3+0x20a>
   22a64:	2302      	movs	r3, #2
   22a66:	425b      	negs	r3, r3
   22a68:	4499      	add	r9, r3
   22a6a:	19c9      	adds	r1, r1, r7
   22a6c:	e74c      	b.n	22908 <__udivdi3+0x20c>
   22a6e:	1c1f      	adds	r7, r3, #0
   22a70:	e7d3      	b.n	22a1a <__udivdi3+0x31e>
   22a72:	1c1d      	adds	r5, r3, #0
   22a74:	e7b3      	b.n	229de <__udivdi3+0x2e2>
   22a76:	3d02      	subs	r5, #2
   22a78:	1900      	adds	r0, r0, r4
   22a7a:	e6ef      	b.n	2285c <__udivdi3+0x160>
   22a7c:	732f2e2e 	.word	0x732f2e2e
   22a80:	412f6372 	.word	0x412f6372
   22a84:	732f4653 	.word	0x732f4653
   22a88:	2f306d61 	.word	0x2f306d61
   22a8c:	76697264 	.word	0x76697264
   22a90:	2f737265 	.word	0x2f737265
   22a94:	74737973 	.word	0x74737973
   22a98:	702f6d65 	.word	0x702f6d65
   22a9c:	756d6e69 	.word	0x756d6e69
   22aa0:	69702f78 	.word	0x69702f78
   22aa4:	78756d6e 	.word	0x78756d6e
   22aa8:	0000682e 	.word	0x0000682e
   22aac:	65737341 	.word	0x65737341
   22ab0:	6f697472 	.word	0x6f697472
   22ab4:	6166206e 	.word	0x6166206e
   22ab8:	64656c69 	.word	0x64656c69
   22abc:	7325203a 	.word	0x7325203a
   22ac0:	00000000 	.word	0x00000000
   22ac4:	736c6166 	.word	0x736c6166
   22ac8:	00000065 	.word	0x00000065
   22acc:	65737341 	.word	0x65737341
   22ad0:	6f697472 	.word	0x6f697472
   22ad4:	2527206e 	.word	0x2527206e
   22ad8:	66202773 	.word	0x66202773
   22adc:	656c6961 	.word	0x656c6961
   22ae0:	74612064 	.word	0x74612064
   22ae4:	3a732520 	.word	0x3a732520
   22ae8:	0a0d6425 	.word	0x0a0d6425
   22aec:	00000000 	.word	0x00000000
   22af0:	732f2e2e 	.word	0x732f2e2e
   22af4:	412f6372 	.word	0x412f6372
   22af8:	732f4653 	.word	0x732f4653
   22afc:	2f306d61 	.word	0x2f306d61
   22b00:	76697264 	.word	0x76697264
   22b04:	2f737265 	.word	0x2f737265
   22b08:	63726573 	.word	0x63726573
   22b0c:	692f6d6f 	.word	0x692f6d6f
   22b10:	692f6332 	.word	0x692f6332
   22b14:	6d5f6332 	.word	0x6d5f6332
   22b18:	65747361 	.word	0x65747361
   22b1c:	00682e72 	.word	0x00682e72
   22b20:	75646f6d 	.word	0x75646f6d
   22b24:	0000656c 	.word	0x0000656c
   22b28:	75646f6d 	.word	0x75646f6d
   22b2c:	3e2d656c 	.word	0x3e2d656c
   22b30:	00007768 	.word	0x00007768
   22b34:	732f2e2e 	.word	0x732f2e2e
   22b38:	412f6372 	.word	0x412f6372
   22b3c:	732f4653 	.word	0x732f4653
   22b40:	2f306d61 	.word	0x2f306d61
   22b44:	76697264 	.word	0x76697264
   22b48:	2f737265 	.word	0x2f737265
   22b4c:	63726573 	.word	0x63726573
   22b50:	692f6d6f 	.word	0x692f6d6f
   22b54:	692f6332 	.word	0x692f6332
   22b58:	735f6332 	.word	0x735f6332
   22b5c:	6576616c 	.word	0x6576616c
   22b60:	0000682e 	.word	0x0000682e
   22b64:	0a2e2c20 	.word	0x0a2e2c20
   22b68:	00000000 	.word	0x00000000
   22b6c:	616d5b0a 	.word	0x616d5b0a
   22b70:	6c61756e 	.word	0x6c61756e
   22b74:	65766f20 	.word	0x65766f20
   22b78:	64697272 	.word	0x64697272
   22b7c:	6e652065 	.word	0x6e652065
   22b80:	656c6261 	.word	0x656c6261
   22b84:	00005d64 	.word	0x00005d64
   22b88:	616d5b0a 	.word	0x616d5b0a
   22b8c:	6c61756e 	.word	0x6c61756e
   22b90:	65766f20 	.word	0x65766f20
   22b94:	64697272 	.word	0x64697272
   22b98:	69642065 	.word	0x69642065
   22b9c:	6c626173 	.word	0x6c626173
   22ba0:	005d6465 	.word	0x005d6465
   22ba4:	65735b0a 	.word	0x65735b0a
   22ba8:	726f736e 	.word	0x726f736e
   22bac:	65766f20 	.word	0x65766f20
   22bb0:	64697272 	.word	0x64697272
   22bb4:	6e652065 	.word	0x6e652065
   22bb8:	656c6261 	.word	0x656c6261
   22bbc:	00005d64 	.word	0x00005d64
   22bc0:	65735b0a 	.word	0x65735b0a
   22bc4:	726f736e 	.word	0x726f736e
   22bc8:	65766f20 	.word	0x65766f20
   22bcc:	64697272 	.word	0x64697272
   22bd0:	69642065 	.word	0x69642065
   22bd4:	6c626173 	.word	0x6c626173
   22bd8:	005d6465 	.word	0x005d6465
   22bdc:	69705b0a 	.word	0x69705b0a
   22be0:	6176206e 	.word	0x6176206e
   22be4:	2065756c 	.word	0x2065756c
   22be8:	25207369 	.word	0x25207369
   22bec:	000a5d64 	.word	0x000a5d64
   22bf0:	68635b0a 	.word	0x68635b0a
   22bf4:	65626d61 	.word	0x65626d61
   22bf8:	61762072 	.word	0x61762072
   22bfc:	2065756c 	.word	0x2065756c
   22c00:	25207369 	.word	0x25207369
   22c04:	000a5d66 	.word	0x000a5d66
   22c08:	73705b0a 	.word	0x73705b0a
   22c0c:	6c617620 	.word	0x6c617620
   22c10:	69206575 	.word	0x69206575
   22c14:	66252073 	.word	0x66252073
   22c18:	00000a5d 	.word	0x00000a5d
   22c1c:	49505b0a 	.word	0x49505b0a
   22c20:	61762044 	.word	0x61762044
   22c24:	2065756c 	.word	0x2065756c
   22c28:	25207369 	.word	0x25207369
   22c2c:	000a5d66 	.word	0x000a5d66
   22c30:	61465b0a 	.word	0x61465b0a
   22c34:	6176206e 	.word	0x6176206e
   22c38:	2065756c 	.word	0x2065756c
   22c3c:	25207369 	.word	0x25207369
   22c40:	000a5d66 	.word	0x000a5d66
   22c44:	61765b0a 	.word	0x61765b0a
   22c48:	2065756c 	.word	0x2065756c
   22c4c:	25207369 	.word	0x25207369
   22c50:	000a5d66 	.word	0x000a5d66
   22c54:	0000000a 	.word	0x0000000a
   22c58:	65645b0a 	.word	0x65645b0a
   22c5c:	20677562 	.word	0x20677562
   22c60:	7367736d 	.word	0x7367736d
   22c64:	616e6520 	.word	0x616e6520
   22c68:	64656c62 	.word	0x64656c62
   22c6c:	0000005d 	.word	0x0000005d
   22c70:	65645b0a 	.word	0x65645b0a
   22c74:	20677562 	.word	0x20677562
   22c78:	7367736d 	.word	0x7367736d
   22c7c:	73696420 	.word	0x73696420
   22c80:	656c6261 	.word	0x656c6261
   22c84:	00005d64 	.word	0x00005d64
   22c88:	49505b0a 	.word	0x49505b0a
   22c8c:	766f2044 	.word	0x766f2044
   22c90:	69727265 	.word	0x69727265
   22c94:	65206564 	.word	0x65206564
   22c98:	6c62616e 	.word	0x6c62616e
   22c9c:	005d6465 	.word	0x005d6465
   22ca0:	49505b0a 	.word	0x49505b0a
   22ca4:	766f2044 	.word	0x766f2044
   22ca8:	69727265 	.word	0x69727265
   22cac:	64206564 	.word	0x64206564
   22cb0:	62617369 	.word	0x62617369
   22cb4:	5d64656c 	.word	0x5d64656c
   22cb8:	00000000 	.word	0x00000000
   22cbc:	73705b0a 	.word	0x73705b0a
   22cc0:	74756f20 	.word	0x74756f20
   22cc4:	20747570 	.word	0x20747570
   22cc8:	746c6f76 	.word	0x746c6f76
   22ccc:	20656761 	.word	0x20656761
   22cd0:	25207369 	.word	0x25207369
   22cd4:	000a5d66 	.word	0x000a5d66
   22cd8:	69665b0a 	.word	0x69665b0a
   22cdc:	61776d72 	.word	0x61776d72
   22ce0:	65566572 	.word	0x65566572
   22ce4:	6f697372 	.word	0x6f697372
   22ce8:	7369206e 	.word	0x7369206e
   22cec:	322e2520 	.word	0x322e2520
   22cf0:	2e252e78 	.word	0x2e252e78
   22cf4:	0a5d7832 	.word	0x0a5d7832
   22cf8:	00000000 	.word	0x00000000
   22cfc:	6f6e5b0a 	.word	0x6f6e5b0a
   22d00:	74636120 	.word	0x74636120
   22d04:	5d6e6f69 	.word	0x5d6e6f69
   22d08:	00000000 	.word	0x00000000
   22d0c:	61705b0a 	.word	0x61705b0a
   22d10:	656d6172 	.word	0x656d6172
   22d14:	20726574 	.word	0x20726574
   22d18:	5d746573 	.word	0x5d746573
   22d1c:	00000000 	.word	0x00000000
   22d20:	68635b0a 	.word	0x68635b0a
   22d24:	65626d61 	.word	0x65626d61
   22d28:	61702072 	.word	0x61702072
   22d2c:	656d6172 	.word	0x656d6172
   22d30:	20726574 	.word	0x20726574
   22d34:	5d746573 	.word	0x5d746573
   22d38:	00000000 	.word	0x00000000
   22d3c:	73705b0a 	.word	0x73705b0a
   22d40:	72617020 	.word	0x72617020
   22d44:	65746d61 	.word	0x65746d61
   22d48:	65732072 	.word	0x65732072
   22d4c:	00005d74 	.word	0x00005d74
   22d50:	69705b0a 	.word	0x69705b0a
   22d54:	61702064 	.word	0x61702064
   22d58:	656d6172 	.word	0x656d6172
   22d5c:	20726574 	.word	0x20726574
   22d60:	5d746573 	.word	0x5d746573
   22d64:	00000000 	.word	0x00000000
   22d68:	61665b0a 	.word	0x61665b0a
   22d6c:	6170206e 	.word	0x6170206e
   22d70:	656d6172 	.word	0x656d6172
   22d74:	20726574 	.word	0x20726574
   22d78:	5d746573 	.word	0x5d746573
   22d7c:	00000000 	.word	0x00000000
   22d80:	69705b0a 	.word	0x69705b0a
   22d84:	766f2064 	.word	0x766f2064
   22d88:	69727265 	.word	0x69727265
   22d8c:	65206564 	.word	0x65206564
   22d90:	6c62616e 	.word	0x6c62616e
   22d94:	005d6465 	.word	0x005d6465
   22d98:	69705b0a 	.word	0x69705b0a
   22d9c:	766f2064 	.word	0x766f2064
   22da0:	69727265 	.word	0x69727265
   22da4:	64206564 	.word	0x64206564
   22da8:	62617369 	.word	0x62617369
   22dac:	5d64656c 	.word	0x5d64656c
   22db0:	00000000 	.word	0x00000000
   22db4:	65685b0a 	.word	0x65685b0a
   22db8:	72657461 	.word	0x72657461
   22dbc:	65766f20 	.word	0x65766f20
   22dc0:	64697272 	.word	0x64697272
   22dc4:	6e652065 	.word	0x6e652065
   22dc8:	656c6261 	.word	0x656c6261
   22dcc:	00005d64 	.word	0x00005d64
   22dd0:	65685b0a 	.word	0x65685b0a
   22dd4:	72657461 	.word	0x72657461
   22dd8:	65766f20 	.word	0x65766f20
   22ddc:	64697272 	.word	0x64697272
   22de0:	69642065 	.word	0x69642065
   22de4:	6c626173 	.word	0x6c626173
   22de8:	005d6465 	.word	0x005d6465
   22dec:	73705b0a 	.word	0x73705b0a
   22df0:	74756f20 	.word	0x74756f20
   22df4:	20747570 	.word	0x20747570
   22df8:	746c6f76 	.word	0x746c6f76
   22dfc:	20656761 	.word	0x20656761
   22e00:	20746573 	.word	0x20746573
   22e04:	25206f74 	.word	0x25206f74
   22e08:	000a5d66 	.word	0x000a5d66
   22e0c:	68635b0a 	.word	0x68635b0a
   22e10:	65626d61 	.word	0x65626d61
   22e14:	65685472 	.word	0x65685472
   22e18:	73696d72 	.word	0x73696d72
   22e1c:	42726f74 	.word	0x42726f74
   22e20:	20617465 	.word	0x20617465
   22e24:	20746573 	.word	0x20746573
   22e28:	25206f74 	.word	0x25206f74
   22e2c:	000a5d64 	.word	0x000a5d64
   22e30:	65725b0a 	.word	0x65725b0a
   22e34:	7463656a 	.word	0x7463656a
   22e38:	72656854 	.word	0x72656854
   22e3c:	7473696d 	.word	0x7473696d
   22e40:	6542726f 	.word	0x6542726f
   22e44:	73206174 	.word	0x73206174
   22e48:	74207465 	.word	0x74207465
   22e4c:	6425206f 	.word	0x6425206f
   22e50:	00000a5d 	.word	0x00000a5d
   22e54:	6f635b0a 	.word	0x6f635b0a
   22e58:	6820646e 	.word	0x6820646e
   22e5c:	65746165 	.word	0x65746165
   22e60:	6e652072 	.word	0x6e652072
   22e64:	656c6261 	.word	0x656c6261
   22e68:	74612064 	.word	0x74612064
   22e6c:	25642520 	.word	0x25642520
   22e70:	000a5d25 	.word	0x000a5d25
   22e74:	206f6e0a 	.word	0x206f6e0a
   22e78:	69746361 	.word	0x69746361
   22e7c:	00006e6f 	.word	0x00006e6f
   22e80:	6f645b0a 	.word	0x6f645b0a
   22e84:	6820726f 	.word	0x6820726f
   22e88:	65746165 	.word	0x65746165
   22e8c:	6e652072 	.word	0x6e652072
   22e90:	656c6261 	.word	0x656c6261
   22e94:	74612064 	.word	0x74612064
   22e98:	25642520 	.word	0x25642520
   22e9c:	000a5d25 	.word	0x000a5d25
   22ea0:	69755b0a 	.word	0x69755b0a
   22ea4:	70746553 	.word	0x70746553
   22ea8:	746e696f 	.word	0x746e696f
   22eac:	746e6f43 	.word	0x746e6f43
   22eb0:	206c6f72 	.word	0x206c6f72
   22eb4:	62616e65 	.word	0x62616e65
   22eb8:	5d64656c 	.word	0x5d64656c
   22ebc:	00000000 	.word	0x00000000
   22ec0:	69755b0a 	.word	0x69755b0a
   22ec4:	70746553 	.word	0x70746553
   22ec8:	746e696f 	.word	0x746e696f
   22ecc:	746e6f43 	.word	0x746e6f43
   22ed0:	206c6f72 	.word	0x206c6f72
   22ed4:	61736964 	.word	0x61736964
   22ed8:	64656c62 	.word	0x64656c62
   22edc:	0000005d 	.word	0x0000005d
   22ee0:	62445b0a 	.word	0x62445b0a
   22ee4:	676f4c67 	.word	0x676f4c67
   22ee8:	676e6967 	.word	0x676e6967
   22eec:	65646f4d 	.word	0x65646f4d
   22ef0:	616e6520 	.word	0x616e6520
   22ef4:	64656c62 	.word	0x64656c62
   22ef8:	0000005d 	.word	0x0000005d
   22efc:	62445b0a 	.word	0x62445b0a
   22f00:	676f4c67 	.word	0x676f4c67
   22f04:	676e6967 	.word	0x676e6967
   22f08:	65646f4d 	.word	0x65646f4d
   22f0c:	73696420 	.word	0x73696420
   22f10:	656c6261 	.word	0x656c6261
   22f14:	00005d64 	.word	0x00005d64
   22f18:	6f735b0a 	.word	0x6f735b0a
   22f1c:	72207466 	.word	0x72207466
   22f20:	74657365 	.word	0x74657365
   22f24:	776f6e20 	.word	0x776f6e20
   22f28:	00005d21 	.word	0x00005d21
   22f2c:	61665b0a 	.word	0x61665b0a
   22f30:	766f206e 	.word	0x766f206e
   22f34:	69727265 	.word	0x69727265
   22f38:	65206564 	.word	0x65206564
   22f3c:	6c62616e 	.word	0x6c62616e
   22f40:	005d6465 	.word	0x005d6465
   22f44:	61665b0a 	.word	0x61665b0a
   22f48:	766f206e 	.word	0x766f206e
   22f4c:	69727265 	.word	0x69727265
   22f50:	64206564 	.word	0x64206564
   22f54:	62617369 	.word	0x62617369
   22f58:	5d64656c 	.word	0x5d64656c
   22f5c:	00000000 	.word	0x00000000
   22f60:	6f635b0a 	.word	0x6f635b0a
   22f64:	6e65646e 	.word	0x6e65646e
   22f68:	65746173 	.word	0x65746173
   22f6c:	6d657420 	.word	0x6d657420
   22f70:	73692070 	.word	0x73692070
   22f74:	2e342520 	.word	0x2e342520
   22f78:	0a5d6632 	.word	0x0a5d6632
   22f7c:	00000000 	.word	0x00000000
   22f80:	69755b0a 	.word	0x69755b0a
   22f84:	72696620 	.word	0x72696620
   22f88:	7261776d 	.word	0x7261776d
   22f8c:	65762065 	.word	0x65762065
   22f90:	6f697372 	.word	0x6f697372
   22f94:	7369206e 	.word	0x7369206e
   22f98:	5d582520 	.word	0x5d582520
   22f9c:	0000000a 	.word	0x0000000a
   22fa0:	69755b0a 	.word	0x69755b0a
   22fa4:	72696620 	.word	0x72696620
   22fa8:	7261776d 	.word	0x7261776d
   22fac:	65762065 	.word	0x65762065
   22fb0:	6f697372 	.word	0x6f697372
   22fb4:	7369206e 	.word	0x7369206e
   22fb8:	5d732520 	.word	0x5d732520
   22fbc:	0000000a 	.word	0x0000000a
   22fc0:	73705b0a 	.word	0x73705b0a
   22fc4:	68702e31 	.word	0x68702e31
   22fc8:	74754f70 	.word	0x74754f70
   22fcc:	44747570 	.word	0x44747570
   22fd0:	4f797475 	.word	0x4f797475
   22fd4:	65736666 	.word	0x65736666
   22fd8:	65732074 	.word	0x65732074
   22fdc:	6f742074 	.word	0x6f742074
   22fe0:	2e342520 	.word	0x2e342520
   22fe4:	0a5d6632 	.word	0x0a5d6632
   22fe8:	00000000 	.word	0x00000000
   22fec:	73705b0a 	.word	0x73705b0a
   22ff0:	68702e32 	.word	0x68702e32
   22ff4:	74754f70 	.word	0x74754f70
   22ff8:	44747570 	.word	0x44747570
   22ffc:	4f797475 	.word	0x4f797475
   23000:	65736666 	.word	0x65736666
   23004:	65732074 	.word	0x65732074
   23008:	6f742074 	.word	0x6f742074
   2300c:	2e342520 	.word	0x2e342520
   23010:	0a5d6632 	.word	0x0a5d6632
   23014:	00000000 	.word	0x00000000
   23018:	75725b0a 	.word	0x75725b0a
   2301c:	6c65536e 	.word	0x6c65536e
   23020:	73655466 	.word	0x73655466
   23024:	506e4f74 	.word	0x506e4f74
   23028:	7320726f 	.word	0x7320726f
   2302c:	74207465 	.word	0x74207465
   23030:	6425206f 	.word	0x6425206f
   23034:	00000a5d 	.word	0x00000a5d
   23038:	6e79730a 	.word	0x6e79730a
   2303c:	20786174 	.word	0x20786174
   23040:	6f727265 	.word	0x6f727265
   23044:	00000072 	.word	0x00000072
   23048:	616d5b0a 	.word	0x616d5b0a
   2304c:	64612063 	.word	0x64612063
   23050:	69207264 	.word	0x69207264
   23054:	72702073 	.word	0x72702073
   23058:	6172676f 	.word	0x6172676f
   2305c:	64656d6d 	.word	0x64656d6d
   23060:	0000005d 	.word	0x0000005d
   23064:	65735b0a 	.word	0x65735b0a
   23068:	6c616972 	.word	0x6c616972
   2306c:	6d756e20 	.word	0x6d756e20
   23070:	20726562 	.word	0x20726562
   23074:	70207369 	.word	0x70207369
   23078:	72676f72 	.word	0x72676f72
   2307c:	656d6d61 	.word	0x656d6d61
   23080:	00005d64 	.word	0x00005d64
   23084:	6f6d5b0a 	.word	0x6f6d5b0a
   23088:	206c6564 	.word	0x206c6564
   2308c:	626d756e 	.word	0x626d756e
   23090:	69207265 	.word	0x69207265
   23094:	72702073 	.word	0x72702073
   23098:	6172676f 	.word	0x6172676f
   2309c:	64656d6d 	.word	0x64656d6d
   230a0:	0000005d 	.word	0x0000005d
   230a4:	616d5b0a 	.word	0x616d5b0a
   230a8:	64612063 	.word	0x64612063
   230ac:	69207264 	.word	0x69207264
   230b0:	78252073 	.word	0x78252073
   230b4:	3a78253a 	.word	0x3a78253a
   230b8:	253a7825 	.word	0x253a7825
   230bc:	78253a78 	.word	0x78253a78
   230c0:	5d78253a 	.word	0x5d78253a
   230c4:	0000000a 	.word	0x0000000a
   230c8:	65735b0a 	.word	0x65735b0a
   230cc:	6c616972 	.word	0x6c616972
   230d0:	6d756e20 	.word	0x6d756e20
   230d4:	20726562 	.word	0x20726562
   230d8:	25207369 	.word	0x25207369
   230dc:	000a5d73 	.word	0x000a5d73
   230e0:	6f6d5b0a 	.word	0x6f6d5b0a
   230e4:	206c6564 	.word	0x206c6564
   230e8:	626d756e 	.word	0x626d756e
   230ec:	69207265 	.word	0x69207265
   230f0:	73252073 	.word	0x73252073
   230f4:	00000a5d 	.word	0x00000a5d
   230f8:	666d5b0a 	.word	0x666d5b0a
   230fc:	73655467 	.word	0x73655467
   23100:	646f4d74 	.word	0x646f4d74
   23104:	616c4665 	.word	0x616c4665
   23108:	69203267 	.word	0x69203267
   2310c:	72702073 	.word	0x72702073
   23110:	6172676f 	.word	0x6172676f
   23114:	64656d6d 	.word	0x64656d6d
   23118:	0000005d 	.word	0x0000005d
   2311c:	666d5b0a 	.word	0x666d5b0a
   23120:	73655467 	.word	0x73655467
   23124:	646f4d74 	.word	0x646f4d74
   23128:	616c4665 	.word	0x616c4665
   2312c:	69203267 	.word	0x69203267
   23130:	78252073 	.word	0x78252073
   23134:	00000a5d 	.word	0x00000a5d
   23138:	65645b0a 	.word	0x65645b0a
   2313c:	736f7266 	.word	0x736f7266
   23140:	65724674 	.word	0x65724674
   23144:	78614d71 	.word	0x78614d71
   23148:	20737248 	.word	0x20737248
   2314c:	20746573 	.word	0x20746573
   23150:	25206f74 	.word	0x25206f74
   23154:	000a5d69 	.word	0x000a5d69
   23158:	65645b0a 	.word	0x65645b0a
   2315c:	736f7266 	.word	0x736f7266
   23160:	65724674 	.word	0x65724674
   23164:	78614d71 	.word	0x78614d71
   23168:	20737248 	.word	0x20737248
   2316c:	25207369 	.word	0x25207369
   23170:	000a5d69 	.word	0x000a5d69
   23174:	65645b0a 	.word	0x65645b0a
   23178:	736f7266 	.word	0x736f7266
   2317c:	65724674 	.word	0x65724674
   23180:	73724871 	.word	0x73724871
   23184:	74657320 	.word	0x74657320
   23188:	206f7420 	.word	0x206f7420
   2318c:	0a5d6925 	.word	0x0a5d6925
   23190:	00000000 	.word	0x00000000
   23194:	65645b0a 	.word	0x65645b0a
   23198:	736f7266 	.word	0x736f7266
   2319c:	65724674 	.word	0x65724674
   231a0:	73724871 	.word	0x73724871
   231a4:	20736920 	.word	0x20736920
   231a8:	0a5d6925 	.word	0x0a5d6925
   231ac:	00000000 	.word	0x00000000
   231b0:	65645b0a 	.word	0x65645b0a
   231b4:	736f7266 	.word	0x736f7266
   231b8:	72754474 	.word	0x72754474
   231bc:	6f697461 	.word	0x6f697461
   231c0:	6e694d6e 	.word	0x6e694d6e
   231c4:	65732073 	.word	0x65732073
   231c8:	6f742074 	.word	0x6f742074
   231cc:	5d692520 	.word	0x5d692520
   231d0:	0000000a 	.word	0x0000000a
   231d4:	65645b0a 	.word	0x65645b0a
   231d8:	736f7266 	.word	0x736f7266
   231dc:	72754474 	.word	0x72754474
   231e0:	6f697461 	.word	0x6f697461
   231e4:	6e694d6e 	.word	0x6e694d6e
   231e8:	73692073 	.word	0x73692073
   231ec:	5d692520 	.word	0x5d692520
   231f0:	0000000a 	.word	0x0000000a
   231f4:	72655b0a 	.word	0x72655b0a
   231f8:	52726f72 	.word	0x52726f72
   231fc:	73696765 	.word	0x73696765
   23200:	20726574 	.word	0x20726574
   23204:	61656c63 	.word	0x61656c63
   23208:	5d646572 	.word	0x5d646572
   2320c:	00000000 	.word	0x00000000
   23210:	65655b0a 	.word	0x65655b0a
   23214:	6d6f7270 	.word	0x6d6f7270
   23218:	74617453 	.word	0x74617453
   2321c:	69207375 	.word	0x69207375
   23220:	6c252073 	.word	0x6c252073
   23224:	000a5d78 	.word	0x000a5d78
   23228:	666d5b0a 	.word	0x666d5b0a
   2322c:	73655467 	.word	0x73655467
   23230:	646f4d74 	.word	0x646f4d74
   23234:	616c4665 	.word	0x616c4665
   23238:	69203167 	.word	0x69203167
   2323c:	72702073 	.word	0x72702073
   23240:	6172676f 	.word	0x6172676f
   23244:	64656d6d 	.word	0x64656d6d
   23248:	0000005d 	.word	0x0000005d
   2324c:	666d5b0a 	.word	0x666d5b0a
   23250:	73655467 	.word	0x73655467
   23254:	646f4d74 	.word	0x646f4d74
   23258:	616c4665 	.word	0x616c4665
   2325c:	69203167 	.word	0x69203167
   23260:	78252073 	.word	0x78252073
   23264:	00000a5d 	.word	0x00000a5d

00023268 <D20Pins>:
   23268:	0000002e 0000003f 00000012 0000002b     ....?.......+...
   23278:	00001708 00001e10 00001fb4 0000210c     .............!..
   23288:	00002264 000023d8 000024fe 00002c62     d"...#...$..b,..
   23298:	00003098 00003892 00001726 00001788     .0...8..&.......
   232a8:	000017d4 00001aea 00001b30 00001b50     ........0...P...
   232b8:	00001c24 00001d54 00001d9e 00001de8     $...T...........
   232c8:	0000189c 000018d0 0000194c 000019c8     ........L.......
   232d8:	00001a1c 00001a86 00001e0a 00001e0a     ................
   232e8:	00001e0a 00001ada 0000251c 00002582     .........%...%..
   232f8:	000025c8 00002c54 00002754 0000285e     .%..T,..T'..^(..
   23308:	00002968 00002ad4 00002bc8 00002c0e     h)...*...+...,..
   23318:	00002c80 00002cbe 00002d04 00003092     .,...,...-...0..
   23328:	00002d52 00002d6e 00002d7e 00002d8c     R-..n-..~-...-..
   23338:	00002f58 0000305c 000030ca 000031ca     X/..\0...0...1..
   23348:	0000348c 00003650 000037a6 000037d6     .4..P6...7...7..
   23358:	000037e4 000037f2 000037fa 00003876     .7...7...7..v8..
   23368:	000038c2 000038f2 00003902 00003932     .8...8...9..29..
   23378:	00003942 00003972 00003982 00003992     B9..r9...9...9..
   23388:	00003a3c 00003ab8                       <:...:..

00023390 <ps_reg1_boost_pwm_lookup_table>:
   23390:	dc73f076 ba4bcd21 962ea648 6e29822b     v.s.!.K.H...+.)n
   233a0:	4a0c5e0f 2334366e                       .^.Jn64#

000233a8 <ps_reg2_boost_pwm_lookup_table>:
   233a8:	d7d4e0f2 c729cf7e b745bed3 a5d2aef0     ....~.)...E.....
   233b8:	958c9ea8 1a1958cd                       .....X..

000233c0 <door_heater_duty_lookup_table>:
   233c0:	2d323232 191e2328 050a0f14 00000000     222-(#..........

000233d0 <fan_sanyo_9s0912p4f011_rpm_lookup_table>:
   233d0:	03840384 03840384 03840384 03840384     ................
   233e0:	03840384 03840384 03840384 03840384     ................
   233f0:	03840384 03840384 039c0384 03cb03b4     ................
   23400:	03fb03e3 042a0413 045a0442 04890472     ......*.B.Z.r...
   23410:	04b904a1 04e804d1 05180500 05470530     ............0.G.
   23420:	0583055f 05ca05a6 061205ee 06590635     _...........5.Y.
   23430:	06a0067d 06e806c4 072f070c 07770753     }........./.S.w.
   23440:	07be079a 080607e2 084d0829 08740860     ........).M.`.t.
   23450:	089b0887 08c208ae 08e908d5 090f08fc     ................
   23460:	09360923 095d094a 09840971 09ab0998     #.6.J.].q.......
   23470:	09d209be 09f909e5 0a200a0c 0a470a33     .......... .3.G.
   23480:	0a5a0a5a 0a5a0a5a 0a5a0a5a 0a5a0a5a     Z.Z.Z.Z.Z.Z.Z.Z.
   23490:	0a5a0a5a 0a5a0a5a 00000a5a              Z.Z.Z.Z.Z...

0002349c <fan_sanyo_9ga0912p4g03_rpm_lookup_table>:
   2349c:	060605dc 0659062f 06ac0683 070006d6     ..../.Y.........
   234ac:	07530729 07a6077d 07fa07d0 084d0823     ).S.}.......#.M.
   234bc:	08a00877 08e708ca 09220904 095c093f     w.........".?.\.
   234cc:	09960979 09d109b3 0a0b09ee 0a450a28     y...........(.E.
   234dc:	0a800a62 0aba0a9d 0af40ad7 0b2f0b11     b............./.
   234ec:	0b690b4c 0ba30b86 0bde0bc0 0c180bfb     L.i.............
   234fc:	0c520c35 0c8c0c6f 0cc70caa 0d010ce4     5.R.o...........
   2350c:	0d3b0d1e 0d760d59 0db00d93 0dea0dcd     ..;.Y.v.........
   2351c:	0e250e08 0e5f0e42 0e990e7c 0ed40eb7     ..%.B._.|.......
   2352c:	0f0e0ef1 0f480f2b 0f830f66 0fb20fa0     ....+.H.f.......
   2353c:	0fd70fc4 0ffb0fe9 101f100d 10441031     ............1.D.
   2354c:	10681056 108c107a 10b1109f 10d510c3     V.h.z...........
   2355c:	10f910e7 111e110c 00001130              ........0...

00023568 <fan_sanyo_9ga0912p4j03_rpm_lookup_table>:
   23568:	060b05dc 06680639 06c50696 072206f4     ....9.h.......".
   23578:	07800751 07dd07ae 083a080b 08970869     Q.........:.i...
   23588:	08f508c6 09520923 09af0980 0a0c09de     ....#.R.........
   23598:	0a690a3b 0ac70a98 0b240af5 0b810b53     ;.i.......$.S...
   235a8:	0bde0bb0 0c300c0d 0c750c53 0cbb0c98     ......0.S.u.....
   235b8:	0d010cde 0d460d23 0d8c0d69 0dd10dae     ....#.F.i.......
   235c8:	0e170df4 0e5c0e3a 0ea20e7f 0ee80ec5     ....:.\.........
   235d8:	0f2d0f0a 0f730f50 0fb80f95 0ff60fdb     ..-.P.s.........
   235e8:	102c1011 10621047 1098107d 10ce10b3     ..,.G.b.}.......
   235f8:	110410e9 113b111f 11711156 11a7118c     ......;.V.q.....
   23608:	11dd11c2 121311f8 1249122e 127f1264     ..........I.d...
   23618:	12a81293 12d112bc 12f912e5 1322130e     ..............".
   23628:	134b1336 1374135f 00001388              6.K._.t.....

00023634 <fan_nidec_v12e12bmm9_rpm_lookup_table>:
   23634:	03840384 03840384 03840384 03840384     ................
   23644:	03840384 03840384 03840384 03840384     ................
   23654:	03840384 03840384 039c0384 03cb03b4     ................
   23664:	03fb03e3 042a0413 045a0442 04890472     ......*.B.Z.r...
   23674:	04b904a1 04e804d1 05180500 05470530     ............0.G.
   23684:	0583055f 05ca05a6 061205ee 06590635     _...........5.Y.
   23694:	06a0067d 06e806c4 072f070c 07770753     }........./.S.w.
   236a4:	07be079a 080607e2 084d0829 08740860     ........).M.`.t.
   236b4:	089b0887 08c208ae 08e908d5 090f08fc     ................
   236c4:	09360923 095d094a 09840971 09ab0998     #.6.J.].q.......
   236d4:	09d209be 09f909e5 0a200a0c 0a470a33     .......... .3.G.
   236e4:	0a5a0a5a 0a5a0a5a 0a5a0a5a 0a5a0a5a     Z.Z.Z.Z.Z.Z.Z.Z.
   236f4:	0a5a0a5a 0a5a0a5a 00000a5a              Z.Z.Z.Z.Z...

00023700 <fan_limit_table>:
   23700:	64282d64 00640000 00006400 64000064     d-(d..d..d..d..d
   23710:	282d6402 64000064 00640000 00006400     .d-(d..d..d..d..
   23720:	2d640464 00006428 64000064 00640000     d.d-(d..d..d..d.
   23730:	64046400 0064282d 00006400 64000064     .d.d-(d..d..d..d
   23740:	02640000 64282d64 00640000 00006400     ..d.d-(d..d..d..
   23750:	64000064 282d6404 64000064 00640000     d..d.d-(d..d..d.
   23760:	00006400 2d640464 00006428 64000064     .d..d.d-(d..d..d
   23770:	00640000 64046400 0064282d 00006400     ..d..d.d-(d..d..
   23780:	64000064 04640000 732f2e2e 412f6372     d..d..d.../src/A
   23790:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   237a0:	74737973 702f6d65 756d6e69 69702f78     system/pinmux/pi
   237b0:	78756d6e 0000682e 65737341 6f697472     nmux.h..Assertio
   237c0:	6166206e 64656c69 7325203a 00000000     n failed: %s....
   237d0:	736c6166 00000065 65737341 6f697472     false...Assertio
   237e0:	2527206e 66202773 656c6961 74612064     n '%s' failed at
   237f0:	3a732520 0a0d6425 00000000 732f2e2e      %s:%d......../s
   23800:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   23810:	2f737265 63726573 692f6d6f 692f6332     ers/sercom/i2c/i
   23820:	6d5f6332 65747361 00682e72 75646f6d     2c_master.h.modu
   23830:	0000656c 75646f6d 3e2d656c 00007768     le..module->hw..
   23840:	732f2e2e 412f6372 732f4653 2f306d61     ../src/ASF/sam0/
   23850:	76697264 2f737265 63726573 692f6d6f     drivers/sercom/i
   23860:	692f6332 735f6332 6576616c 0000682e     2c/i2c_slave.h..
   23870:	45534552 00000054 454c4449 00000000     RESET...IDLE....
   23880:	48474948 0000515f 5f524156 00000051     HIGH_Q..VAR_Q...
   23890:	48474948 504f435f 00000000 52464544     HIGH_COP....DEFR
   238a0:	0054534f 554e414d 00004c41 0046464f     OST.MANUAL..OFF.
   238b0:	4f495047 00000000 004d5750 4d524f4e     GPIO....PWM.NORM
   238c0:	00004c41 4c494146 00000031 4c494146     AL..FAIL1...FAIL
   238d0:	00000032 4c494146 00000033 4c494146     2...FAIL3...FAIL
   238e0:	00000034 0000000a 79643225 64643225     4.......%2dy%2dd
   238f0:	6432253a 32253a68 253a6d64 2c736432     :%2dh:%2dm:%2ds,
   23900:	6d697420 6c253d65 45202c75 253d5252      time=%lu, ERR=%
   23910:	2c783430 3d574620 78323025 2c783225     04x, FW=%02x%2x,
   23920:	72777020 65646f4d 7338253d 5548202c      pwrMode=%8s, HU
   23930:	64253d4d 6863202c 736e5361 65646f4d     M=%d, chaSnsMode
   23940:	7338253d 6572202c 736e536a 65646f4d     =%8s, rejSnsMode
   23950:	7338253d 0000002c 6e65706f 00000000     =%8s,...open....
   23960:	736f6c63 00006465 726f6f64 2c73253d     closed..door=%s,
   23970:	43726420 4831746e 64253d72 7264202c      drCnt1Hr=%d, dr
   23980:	54746e43 253d746f 202c646c 6e437264     CntTot=%ld, drCn
   23990:	66694c74 6c253d65 00002c64 31616863     tLife=%ld,..cha1
   239a0:	7366664f 253d7465 66322e34 6863202c     Offset=%4.2f, ch
   239b0:	66664f61 3d746573 322e3425 67202c66     aOffset=%4.2f, g
   239c0:	664f796c 74657366 2e34253d 202c6632     lyOffset=%4.2f, 
   239d0:	3d486264 322e3425 64202c66 253d4c62     dbH=%4.2f, dbL=%
   239e0:	66322e34 0000002c 74657354 2e34253d     4.2f,...Tset=%4.
   239f0:	202c6632 6c746354 2e34253d 002c6632     2f, Tctl=%4.2f,.
   23a00:	68635420 253d3161 66322e34 0000002c      Tcha1=%4.2f,...
   23a10:	68635420 253d3261 66322e34 6754202c      Tcha2=%4.2f, Tg
   23a20:	253d796c 66322e34 7254202c 3d316a65     ly=%4.2f, Trej1=
   23a30:	322e3425 00002c66 65725420 253d326a     %4.2f,.. Trej2=%
   23a40:	66322e34 6454202c 253d6669 66322e34     4.2f, Tdif=%4.2f
   23a50:	0000002c 6e6f6320 34253d64 2c66322e     ,... cond=%4.2f,
   23a60:	00000000 253d4256 66322e34 4356202c     ....VB=%4.2f, VC
   23a70:	35253d43 2c66332e 41425620 34253d54     C=%5.3f, VBAT=%4
   23a80:	2c66322e 65735620 34253d74 2c66322e     .2f, Vset=%4.2f,
   23a90:	00000000 3d315620 322e3425 49202c66     .... V1=%4.2f, I
   23aa0:	34253d31 2c66322e 3d315720 322e3425     1=%4.2f, W1=%4.2
   23ab0:	00002c66 3d325620 322e3425 49202c66     f,.. V2=%4.2f, I
   23ac0:	34253d32 2c66322e 3d325720 322e3425     2=%4.2f, W2=%4.2
   23ad0:	00002c66 4d414843 2d524542 46202c41     f,..CHAMBER-A, F
   23ae0:	3d316e61 202c6425 31746553 2c64253d     an1=%d, Set1=%d,
   23af0:	6d705220 6c253d31 53202c75 6c6c6174      Rpm1=%lu, Stall
   23b00:	64253d31 3166202c 74617453 64253d65     1=%d, f1State=%d
   23b10:	6970202c 253d3464 66322e34 6e69202c     , pid4=%4.2f, in
   23b20:	6c253d68 69202c75 745f686e 6c253d6f     h=%lu, inh_to=%l
   23b30:	00002c75 6d705220 74655331 2c64253d     u,.. Rpm1Set=%d,
   23b40:	72774c20 316d694c 2c64253d 00000000      LwrLim1=%d,....
   23b50:	454a4552 312d5443 46202c41 3d326e61     REJECT-1A, Fan2=
   23b60:	202c6425 32746553 2c64253d 6d705220     %d, Set2=%d, Rpm
   23b70:	6c253d32 53202c75 6c6c6174 64253d32     2=%lu, Stall2=%d
   23b80:	3266202c 74617453 64253d65 0000002c     , f2State=%d,...
   23b90:	6d705220 74655332 2c64253d 72774c20      Rpm2Set=%d, Lwr
   23ba0:	326d694c 2c64253d 00000000 454a4552     Lim2=%d,....REJE
   23bb0:	322d5443 46202c41 3d356e61 202c6425     CT-2A, Fan5=%d, 
   23bc0:	35746553 2c64253d 6d705220 6c253d35     Set5=%d, Rpm5=%l
   23bd0:	53202c75 6c6c6174 64253d35 3566202c     u, Stall5=%d, f5
   23be0:	74617453 64253d65 0000002c 6d705220     State=%d,... Rpm
   23bf0:	74655335 2c64253d 72774c20 356d694c     5Set=%d, LwrLim5
   23c00:	2c64253d 00000000 454a4552 332d5443     =%d,....REJECT-3
   23c10:	46202c41 3d366e61 202c6425 36746553     A, Fan6=%d, Set6
   23c20:	2c64253d 6d705220 6c253d36 53202c75     =%d, Rpm6=%lu, S
   23c30:	6c6c6174 64253d36 3666202c 74617453     tall6=%d, f6Stat
   23c40:	64253d65 0000002c 6d705220 74655336     e=%d,... Rpm6Set
   23c50:	2c64253d 72774c20 366d694c 2c64253d     =%d, LwrLim6=%d,
   23c60:	00000000 4d414843 2d524542 46202c42     ....CHAMBER-B, F
   23c70:	3d346e61 202c6425 34746553 2c64253d     an4=%d, Set4=%d,
   23c80:	6d705220 6c253d34 53202c75 6c6c6174      Rpm4=%lu, Stall
   23c90:	64253d34 3466202c 74617453 64253d65     4=%d, f4State=%d
   23ca0:	6970202c 253d3464 66322e34 6e69202c     , pid4=%4.2f, in
   23cb0:	6c253d68 69202c75 745f686e 6c253d6f     h=%lu, inh_to=%l
   23cc0:	00002c75 6d705220 74655334 2c64253d     u,.. Rpm4Set=%d,
   23cd0:	72774c20 346d694c 2c64253d 00000000      LwrLim4=%d,....
   23ce0:	454a4552 312d5443 46202c42 3d336e61     REJECT-1B, Fan3=
   23cf0:	202c6425 33746553 2c64253d 6d705220     %d, Set3=%d, Rpm
   23d00:	6c253d33 53202c75 6c6c6174 64253d33     3=%lu, Stall3=%d
   23d10:	3366202c 74617453 64253d65 0000002c     , f3State=%d,...
   23d20:	6d705220 74655333 2c64253d 72774c20      Rpm3Set=%d, Lwr
   23d30:	336d694c 2c64253d 00000000 454a4552     Lim3=%d,....REJE
   23d40:	322d5443 46202c42 3d386e61 202c6425     CT-2B, Fan8=%d, 
   23d50:	38746553 2c64253d 6d705220 6c253d38     Set8=%d, Rpm8=%l
   23d60:	53202c75 6c6c6174 64253d38 3866202c     u, Stall8=%d, f8
   23d70:	74617453 64253d65 0000002c 6d705220     State=%d,... Rpm
   23d80:	74655338 2c64253d 72774c20 386d694c     8Set=%d, LwrLim8
   23d90:	2c64253d 00000000 454a4552 332d5443     =%d,....REJECT-3
   23da0:	46202c42 3d376e61 202c6425 37746553     B, Fan7=%d, Set7
   23db0:	2c64253d 6d705220 6c253d37 53202c75     =%d, Rpm7=%lu, S
   23dc0:	6c6c6174 64253d37 3766202c 74617453     tall7=%d, f7Stat
   23dd0:	64253d65 0000002c 6d705220 74655337     e=%d,... Rpm7Set
   23de0:	2c64253d 72774c20 376d694c 2c64253d     =%d, LwrLim7=%d,
   23df0:	00000000 4174754f 6c6f435f 64253d64     ....OutA_Cold=%d
   23e00:	754f202c 485f4174 253d746f 4f202c64     , OutA_Hot=%d, O
   23e10:	5f427475 646c6f43 2c64253d 74754f20     utB_Cold=%d, Out
   23e20:	6f485f42 64253d74 0000002c 41787468     B_Hot=%d,...htxA
   23e30:	74616548 253d7265 68202c64 48427874     Heater=%d, htxBH
   23e40:	65746165 64253d72 0000002c 646e6f63     eater=%d,...cond
   23e50:	53727448 65746174 2c64253d 6e6f6320     HtrState=%d, con
   23e60:	72744864 53796c44 3d736365 2c646c25     dHtrDlySecs=%ld,
   23e70:	6e6f6320 72744864 79747544 2c64253d      condHtrDuty=%d,
   23e80:	6f6f6420 72744872 74617453 64253d65      doorHtrState=%d
   23e90:	6f64202c 7448726f 74754472 64253d79     , doorHtrDuty=%d
   23ea0:	0000002c 72657450 34253d6d 2c66322e     ,...Pterm=%4.2f,
   23eb0:	65744920 253d6d72 66322e34 7444202c      Iterm=%4.2f, Dt
   23ec0:	3d6d7265 322e3425 56202c66 3d706f63     erm=%4.2f, Vcop=
   23ed0:	312e3325 4b202c66 253d7170 66312e33     %3.1f, Kpq=%3.1f
   23ee0:	694b202c 31253d71 202c6632 3d63704b     , Kiq=%12f, Kpc=
   23ef0:	312e3325 4b202c66 253d6369 2c663231     %3.1f, Kic=%12f,
   23f00:	506e6520 64253d63 0000002c 79635f64      enPc=%d,...d_cy
   23f10:	73656c63 2c64253d 00000000 5f696d64     cles=%d,....dmi_
   23f20:	3d746361 202c6425 5f696d64 3d746e63     act=%d, dmi_cnt=
   23f30:	2c646c25 696d6420 7274735f 6c253d74     %ld, dmi_strt=%l
   23f40:	64202c64 655f696d 253d7078 00002c64     d, dmi_exp=%d,..
   23f50:	615f6964 253d7463 64202c64 6e635f69     di_act=%d, di_cn
   23f60:	6c253d74 64202c64 74735f69 253d7472     t=%ld, di_strt=%
   23f70:	202c646c 655f6964 253d7078 00002c64     ld, di_exp=%d,..
   23f80:	5f616d64 3d746361 202c6425 5f616d64     dma_act=%d, dma_
   23f90:	3d746e63 2c646c25 616d6420 7274735f     cnt=%ld, dma_str
   23fa0:	6c253d74 64202c64 655f616d 253d7078     t=%ld, dma_exp=%
   23fb0:	00002c64 63615f66 64253d74 5f66202c     d,..f_act=%d, f_
   23fc0:	3d746e63 2c646c25 735f6620 3d747274     cnt=%ld, f_strt=
   23fd0:	2c646c25 655f6620 253d7078 00002c64     %ld, f_exp=%d,..
   23fe0:	69543874 253d656d 202c646c 70687074     t8Time=%ld, tphp
   23ff0:	3d6b6843 202c6425 69543974 253d656d     Chk=%d, t9Time=%
   24000:	202c646c 72543974 253d6769 202c646c     ld, t9Trig=%ld, 
   24010:	54303174 3d656d69 2c646c25 30317420     t10Time=%ld, t10
   24020:	67697254 646c253d 0000002c 5455417c     Trig=%ld,...|AUT
   24030:	564f204f 49525245 007c4544 4449507c     O OVERRIDE|.|PID
   24040:	45564f20 44495252 00007c45 4d45547c      OVERRIDE|..|TEM
   24050:	564f2050 49525245 007c4544 4154537c     P OVERRIDE|.|STA
   24060:	50555452 484e4920 54494249 0000007c     RTUP INHIBIT|...
   24070:	4e41467c 45564f20 44495252 00007c45     |FAN OVERRIDE|..
   24080:	2049557c 50544553 544e494f 45564f20     |UI SETPOINT OVE
   24090:	44495252 00007c45 4145487c 20524554     RRIDE|..|HEATER 
   240a0:	5245564f 45444952 0000007c 4e45537c     OVERRIDE|...|SEN
   240b0:	20524f53 49464445 53494420 454c4241     SOR EDFI DISABLE
   240c0:	00007c44 5378616d 7245736e 746e4372     D|..maxSnsErrCnt
   240d0:	2c64253d 61686320 72724531 3d746e43     =%d, cha1ErrCnt=
   240e0:	202c6425 32616863 43727245 253d746e     %d, cha2ErrCnt=%
   240f0:	72202c64 72456a65 746e4372 2c64253d     d, rejErrCnt=%d,
   24100:	6a657220 74697243 43727245 253d746e      rejCritErrCnt=%
   24110:	00002c64 4678616d 72456e61 746e4372     d,..maxFanErrCnt
   24120:	2c64253d 6e616620 776f4c31 45647053     =%d, fan1LowSpdE
   24130:	6e437272 64253d74 6166202c 7245316e     rrCnt=%d, fan1Er
   24140:	746e4372 2c64253d 6e616620 776f4c32     rCnt=%d, fan2Low
   24150:	45647053 6e437272 64253d74 6166202c     SpdErrCnt=%d, fa
   24160:	7245326e 746e4372 2c64253d 6e616620     n2ErrCnt=%d, fan
   24170:	776f4c34 45647053 6e437272 64253d74     4LowSpdErrCnt=%d
   24180:	6166202c 7245346e 746e4372 2c64253d     , fan4ErrCnt=%d,
   24190:	00000000 5078616d 72457068 746e4372     ....maxPhpErrCnt
   241a0:	2c64253d 70687020 746f5431 43727245     =%d, php1TotErrC
   241b0:	253d746e 00002c64 70687020 746f5432     nt=%d,.. php2Tot
   241c0:	43727245 253d746e 00002c64 6f72700a     ErrCnt=%d,...pro
   241d0:	74637564 20736920 48474948 52455020     duct is HIGH PER
   241e0:	4d524f46 45434e41 00000000 2073700a     FORMANCE.....ps 
   241f0:	25207369 00000073 7065650a 536d6f72     is %s....eepromS
   24200:	75746174 73692073 786c2520 00000000     tatus is %lx....
   24210:	67666d0a 74736554 65646f4d 67616c46     .mfgTestModeFlag
   24220:	73692031 00782520 67666d0a 74736554     1 is %x..mfgTest
   24230:	65646f4d 67616c46 73692032 00782520     ModeFlag2 is %x.
   24240:	6e75720a 666c6553 74736554 6f506e4f     .runSelfTestOnPo
   24250:	73692072 00782520 6168630a 7265626d     r is %x..chamber
   24260:	666f2031 74657366 2e342520 00006632     1 offset %4.2f..
   24270:	796c670a 316c6f63 66666f20 20746573     .glycol1 offset 
   24280:	322e3425 00000066 6168630a 7265626d     %4.2f....chamber
   24290:	666f2032 74657366 2e342520 00006632     2 offset %4.2f..
   242a0:	6168630a 7265626d 72656854 7473696d     .chamberThermist
   242b0:	6542726f 25206174 00006434 6a65720a     orBeta %4d...rej
   242c0:	54746365 6d726568 6f747369 74654272     ectThermistorBet
   242d0:	34252061 00000064 3173700a 7068702e     a %4d....ps1.php
   242e0:	7074754f 75447475 664f7974 74657366     OutputDutyOffset
   242f0:	2e342520 00006632 3273700a 7068702e      %4.2f...ps2.php
   24300:	7074754f 75447475 664f7974 74657366     OutputDutyOffset
   24310:	2e342520 00006632 6665640a 74736f72      %4.2f...defrost
   24320:	65726620 72682071 64252073 00000000      freq hrs %d....
   24330:	6665640a 74736f72 72756420 6f697461     .defrost duratio
   24340:	696d206e 2520736e 00000064 78616d0a     n mins %d....max
   24350:	6f6c6c41 43646577 626d6168 65547265     AllowedChamberTe
   24360:	2520706d 66322e34 00000000 6e696d0a     mp %4.2f.....min
   24370:	6f6c6c41 43646577 626d6168 65547265     AllowedChamberTe
   24380:	2520706d 66322e34 00000000 646f6d0a     mp %4.2f.....mod
   24390:	6e206c65 65626d75 73252072 00000000     el number %s....
   243a0:	7265730a 206c6169 626d756e 25207265     .serial number %
   243b0:	00000073 2069750a 76207766 25207265     s....ui fw ver %
   243c0:	00000073 63616d0a 64646120 30252072     s....mac addr %0
   243d0:	253a5832 3a583230 58323025 3230253a     2X:%02X:%02X:%02
   243e0:	30253a58 253a5832 00583230 6f6f640a     X:%02X:%02X..doo
   243f0:	65704f72 66694c6e 6d697465 746e4365     rOpenLifetimeCnt
   24400:	646c2520 00000000 7269660a 7261776d      %ld.....firmwar
   24410:	75622065 20646c69 78322e25 322e252e     e build %.2x.%.2
   24420:	00000078 732f2e2e 412f6372 732f4653     x...../src/ASF/s
   24430:	2f306d61 76697264 2f737265 63726573     am0/drivers/serc
   24440:	692f6d6f 692f6332 6d5f6332 65747361     om/i2c/i2c_maste
   24450:	00682e72 65737341 6f697472 6166206e     r.h.Assertion fa
   24460:	64656c69 7325203a 00000000 75646f6d     iled: %s....modu
   24470:	0000656c 65737341 6f697472 2527206e     le..Assertion '%
   24480:	66202773 656c6961 74612064 3a732520     s' failed at %s:
   24490:	0a0d6425 00000000 75646f6d 3e2d656c     %d......module->
   244a0:	00007768 732f2e2e 412f6372 732f4653     hw..../src/ASF/s
   244b0:	2f306d61 76697264 2f737265 63726573     am0/drivers/serc
   244c0:	692f6d6f 692f6332 735f6332 6576616c     om/i2c/i2c_slave
   244d0:	0000682e 65645b0a 736f7266 74732074     .h...[defrost st
   244e0:	20747261 68643225 6432253a 32253a6d     art %2dh:%2dm:%2
   244f0:	005d7364 65645b0a 736f7266 74732074     ds]..[defrost st
   24500:	2520706f 3a686432 6d643225 6432253a     op %2dh:%2dm:%2d
   24510:	00005d73 79635b20 20656c63 0a5d6425     s].. [cycle %d].
   24520:	00000000 65645b0a 736f7266 61632074     .....[defrost ca
   24530:	6c65636e 5d64656c 00000000 732f2e2e     ncelled]....../s
   24540:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   24550:	2f737265 74737973 702f6d65 756d6e69     ers/system/pinmu
   24560:	69702f78 78756d6e 0000682e 65737341     x/pinmux.h..Asse
   24570:	6f697472 6166206e 64656c69 7325203a     rtion failed: %s
   24580:	00000000 736c6166 00000065 65737341     ....false...Asse
   24590:	6f697472 2527206e 66202773 656c6961     rtion '%s' faile
   245a0:	74612064 3a732520 0a0d6425 00000000     d at %s:%d......
   245b0:	732f2e2e 412f6372 732f4653 2f306d61     ../src/ASF/sam0/
   245c0:	76697264 2f737265 63726573 692f6d6f     drivers/sercom/i
   245d0:	692f6332 6d5f6332 65747361 00682e72     2c/i2c_master.h.
   245e0:	75646f6d 0000656c 75646f6d 3e2d656c     module..module->
   245f0:	00007768 732f2e2e 412f6372 732f4653     hw..../src/ASF/s
   24600:	2f306d61 76697264 2f737265 63726573     am0/drivers/serc
   24610:	692f6d6f 692f6332 735f6332 6576616c     om/i2c/i2c_slave
   24620:	0000682e 732f2e2e 412f6372 732f4653     .h..../src/ASF/s
   24630:	2f306d61 76697264 2f737265 74737973     am0/drivers/syst
   24640:	702f6d65 756d6e69 69702f78 78756d6e     em/pinmux/pinmux
   24650:	0000682e 65737341 6f697472 6166206e     .h..Assertion fa
   24660:	64656c69 7325203a 00000000 666e6f63     iled: %s....conf
   24670:	00006769 65737341 6f697472 2527206e     ig..Assertion '%
   24680:	66202773 656c6961 74612064 3a732520     s' failed at %s:
   24690:	0a0d6425 00000000 736c6166 00000065     %d......false...
   246a0:	732f2e2e 412f6372 732f4653 2f306d61     ../src/ASF/sam0/
   246b0:	76697264 2f737265 74726f70 726f702f     drivers/port/por
   246c0:	00682e74 732f2e2e 412f6372 732f4653     t.h.../src/ASF/s
   246d0:	2f306d61 76697264 2f737265 63726573     am0/drivers/serc
   246e0:	692f6d6f 692f6332 6d5f6332 65747361     om/i2c/i2c_maste
   246f0:	00682e72 75646f6d 0000656c 75646f6d     r.h.module..modu
   24700:	3e2d656c 00007768 732f2e2e 412f6372     le->hw..../src/A
   24710:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   24720:	63726573 692f6d6f 692f6332 735f6332     sercom/i2c/i2c_s
   24730:	6576616c 0000682e 732f2e2e 412f6372     lave.h..../src/A
   24740:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   24750:	742f6374 00682e63 75646f6d 695f656c     tc/tc.h.module_i
   24760:	0074736e 75646f6d 695f656c 2d74736e     nst.module_inst-
   24770:	0077683e 732f2e2e 412f6372 732f4653     >hw.../src/ASF/s
   24780:	2f306d61 76697264 2f737265 63726573     am0/drivers/serc
   24790:	692f6d6f 692f6332 6d5f6332 65747361     om/i2c/i2c_maste
   247a0:	00682e72 65737341 6f697472 6166206e     r.h.Assertion fa
   247b0:	64656c69 7325203a 00000000 75646f6d     iled: %s....modu
   247c0:	0000656c 65737341 6f697472 2527206e     le..Assertion '%
   247d0:	66202773 656c6961 74612064 3a732520     s' failed at %s:
   247e0:	0a0d6425 00000000 75646f6d 3e2d656c     %d......module->
   247f0:	00007768 666e6f63 00006769 732f2e2e     hw..config..../s
   24800:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   24810:	2f737265 63726573 692f6d6f 692f6332     ers/sercom/i2c/i
   24820:	735f6332 6576616c 0000682e 732f2e2e     2c_slave.h..../s
   24830:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   24840:	2f737265 63726573 692f6d6f 692f6332     ers/sercom/i2c/i
   24850:	735f6332 6576616c 746e695f 75727265     2c_slave_interru
   24860:	682e7470 00000000 732f2e2e 412f6372     pt.h....../src/A
   24870:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   24880:	74737973 702f6d65 756d6e69 69702f78     system/pinmux/pi
   24890:	78756d6e 0000682e 65737341 6f697472     nmux.h..Assertio
   248a0:	6166206e 64656c69 7325203a 00000000     n failed: %s....
   248b0:	736c6166 00000065 65737341 6f697472     false...Assertio
   248c0:	2527206e 66202773 656c6961 74612064     n '%s' failed at
   248d0:	3a732520 0a0d6425 00000000 732f2e2e      %s:%d......../s
   248e0:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   248f0:	2f737265 63726573 692f6d6f 692f6332     ers/sercom/i2c/i
   24900:	6d5f6332 65747361 00682e72 75646f6d     2c_master.h.modu
   24910:	0000656c 75646f6d 3e2d656c 00007768     le..module->hw..
   24920:	732f2e2e 412f6372 732f4653 2f306d61     ../src/ASF/sam0/
   24930:	76697264 2f737265 63726573 692f6d6f     drivers/sercom/i
   24940:	692f6332 735f6332 6576616c 0000682e     2c/i2c_slave.h..
   24950:	732f2e2e 412f6372 732f4653 2f306d61     ../src/ASF/sam0/
   24960:	76697264 2f737265 742f6374 00682e63     drivers/tc/tc.h.
   24970:	75646f6d 695f656c 0074736e 75646f6d     module_inst.modu
   24980:	695f656c 2d74736e 0077683e 732f2e2e     le_inst->hw.../s
   24990:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   249a0:	2f737265 742f6374 6e695f63 72726574     ers/tc/tc_interr
   249b0:	2e747075 00000068 735b0a0a 65747379     upt.h.....[syste
   249c0:	6572206d 20746573 65746564 64657463     m reset detected
   249d0:	0000005d 2e2e2e0a 206e6166 746e6f63     ].......fan cont
   249e0:	6c6c6f72 20317265 6c696166 3b657275     roller1 failure;
   249f0:	73797320 206d6574 746c6168 00006465      system halted..
   24a00:	2e2e2e0a 206e6166 746e6f63 6c6c6f72     ....fan controll
   24a10:	20327265 6c696166 3b657275 73797320     er2 failure; sys
   24a20:	206d6574 746c6168 00006465 79735b0a     tem halted...[sy
   24a30:	6d657473 61657220 005d7964 732f2e2e     stem ready].../s
   24a40:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   24a50:	2f737265 63726573 692f6d6f 692f6332     ers/sercom/i2c/i
   24a60:	6d5f6332 65747361 00682e72 65737341     2c_master.h.Asse
   24a70:	6f697472 6166206e 64656c69 7325203a     rtion failed: %s
   24a80:	00000000 75646f6d 0000656c 65737341     ....module..Asse
   24a90:	6f697472 2527206e 66202773 656c6961     rtion '%s' faile
   24aa0:	74612064 3a732520 0a0d6425 00000000     d at %s:%d......
   24ab0:	75646f6d 3e2d656c 00007768 732f2e2e     module->hw..../s
   24ac0:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   24ad0:	2f737265 63726573 692f6d6f 692f6332     ers/sercom/i2c/i
   24ae0:	735f6332 6576616c 0000682e 30524c45     2c_slave.h..ELR0
   24af0:	53533535 32303041 00000000 58585858     55SSA002....XXXX
   24b00:	00005858 58585858 58585858 32315858     XX..XXXXXXXXXX12
   24b10:	00003433 732f2e2e 412f6372 732f4653     34..../src/ASF/s
   24b20:	2f306d61 76697264 2f737265 74737973     am0/drivers/syst
   24b30:	702f6d65 756d6e69 69702f78 78756d6e     em/pinmux/pinmux
   24b40:	0000682e 65737341 6f697472 6166206e     .h..Assertion fa
   24b50:	64656c69 7325203a 00000000 736c6166     iled: %s....fals
   24b60:	00000065 65737341 6f697472 2527206e     e...Assertion '%
   24b70:	66202773 656c6961 74612064 3a732520     s' failed at %s:
   24b80:	0a0d6425 00000000 732f2e2e 412f6372     %d......../src/A
   24b90:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   24ba0:	74726f70 726f702f 00682e74 666e6f63     port/port.h.conf
   24bb0:	00006769 732f2e2e 412f6372 732f4653     ig..../src/ASF/s
   24bc0:	2f306d61 76697264 2f737265 63726573     am0/drivers/serc
   24bd0:	692f6d6f 692f6332 6d5f6332 65747361     om/i2c/i2c_maste
   24be0:	00682e72 75646f6d 0000656c 75646f6d     r.h.module..modu
   24bf0:	3e2d656c 00007768 732f2e2e 412f6372     le->hw..../src/A
   24c00:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   24c10:	63726573 692f6d6f 692f6332 735f6332     sercom/i2c/i2c_s
   24c20:	6576616c 0000682e 732f2e2e 412f6372     lave.h..../src/A
   24c30:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   24c40:	74737973 702f6d65 756d6e69 69702f78     system/pinmux/pi
   24c50:	78756d6e 0000682e 65737341 6f697472     nmux.h..Assertio
   24c60:	6166206e 64656c69 7325203a 00000000     n failed: %s....
   24c70:	736c6166 00000065 65737341 6f697472     false...Assertio
   24c80:	2527206e 66202773 656c6961 74612064     n '%s' failed at
   24c90:	3a732520 0a0d6425 00000000 732f2e2e      %s:%d......../s
   24ca0:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   24cb0:	2f737265 63726573 692f6d6f 692f6332     ers/sercom/i2c/i
   24cc0:	6d5f6332 65747361 00682e72 75646f6d     2c_master.h.modu
   24cd0:	0000656c 75646f6d 3e2d656c 00007768     le..module->hw..
   24ce0:	732f2e2e 412f6372 732f4653 2f306d61     ../src/ASF/sam0/
   24cf0:	76697264 2f737265 63726573 692f6d6f     drivers/sercom/i
   24d00:	692f6332 735f6332 6576616c 0000682e     2c/i2c_slave.h..
   24d10:	32695b0a 6e754663 6f697463 7825206e     .[i2cFunction %x
   24d20:	0000005d 65645b0a 736f7266 6e692074     ]....[defrost in
   24d30:	005d7469 6f735b0a 72207466 74657365     it]..[soft reset
   24d40:	776f6e20 00005d21 0000b8c8 0000acfe      now!]..........
   24d50:	0000ad12 0000ad2e 0000ad4a 0000ad5e     ........J...^...
   24d60:	0000ad72 0000ad86 0000ad9a 0000adae     r...............
   24d70:	0000adc2 0000add6 0000adea 0000adfe     ................
   24d80:	0000ae12 0000ae26 0000ae3a 0000ae4e     ....&...:...N...
   24d90:	0000ae62 0000ae76 0000ae8a 0000ae9e     b...v...........
   24da0:	0000aeb2 0000aec6 0000aeda 0000aeee     ................
   24db0:	0000af02 0000af16 0000af2a 0000b8c8     ........*.......
   24dc0:	0000b8c8 0000af3e 0000af52 0000af66     ....>...R...f...
   24dd0:	0000af7a 0000b8c8 0000b8c8 0000af8e     z...............
   24de0:	0000afa2 0000afb6 0000afca 0000afde     ................
   24df0:	0000aff2 0000b00e 0000b02a 0000b03e     ........*...>...
   24e00:	0000b052 0000b066 0000b082 0000b096     R...f...........
   24e10:	0000b8c8 0000b8c8 0000b8c8 0000b8c8     ................
   24e20:	0000b8c8 0000b8c8 0000b8c8 0000b8c8     ................
   24e30:	0000b8c8 0000b8c8 0000b8c8 0000b8c8     ................
   24e40:	0000b8c8 0000b8c8 0000b8c8 0000b8c8     ................
   24e50:	0000b8c8 0000b8c8 0000b8c8 0000b8c8     ................
   24e60:	0000b8c8 0000b8c8 0000b8c8 0000b8c8     ................
   24e70:	0000b8c8 0000b8c8 0000b8c8 0000b8c8     ................
   24e80:	0000b8c8 0000b8c8 0000b8c8 0000b8c8     ................
   24e90:	0000b8c8 0000b8c8 0000b0aa 0000b188     ................
   24ea0:	0000b19a 0000b1ac 0000b1be 0000b1d8     ................
   24eb0:	0000b8c8 0000b1f2 0000b204 0000b216     ................
   24ec0:	0000b228 0000b23a 0000b24c 0000b25e     (...:...L...^...
   24ed0:	0000b270 0000b282 0000b294 0000b2a6     p...............
   24ee0:	0000b2b8 0000b2ca 0000b2dc 0000b2ee     ................
   24ef0:	0000b300 0000b312 0000b324 0000b336     ........$...6...
   24f00:	0000b348 0000b35a 0000b8c8 0000b36c     H...Z.......l...
   24f10:	0000b37e 0000b390 0000b3a2 0000b3b4     ~...............
   24f20:	0000b3ce 0000b3e8 0000b3fa 0000b40c     ................
   24f30:	0000b8c8 0000b8c8 0000b8c8 0000b8c8     ................
   24f40:	0000b8c8 0000b8c8 0000b8c8 0000b41e     ................
   24f50:	0000b430 0000b442 0000b454 0000b466     0...B...T...f...
   24f60:	0000b478 0000b48a 0000b49c 0000b4ae     x...............
   24f70:	0000b4c0 0000b4da 0000b4ec 0000b4fe     ................
   24f80:	0000b510 0000b5e8 0000b5fa 0000b60c     ................
   24f90:	0000b626 0000b640 0000b652 0000b664     &...@...R...d...
   24fa0:	0000b676 0000b688 0000b69a 0000b6ac     v...............
   24fb0:	0000b6be 0000b6d0 0000b6e2 0000b6f4     ................
   24fc0:	0000b706 0000b718 0000b72a 0000b73c     ........*...<...
   24fd0:	0000b74e 0000b760 0000b772 0000b784     N...`...r.......
   24fe0:	0000b796 0000b7a8 0000b7ba 0000b7cc     ................
   24ff0:	0000b7de 0000b7f0 0000b802 0000b814     ................
   25000:	0000b826 0000b838 0000b84a 0000b85c     &...8...J...\...
   25010:	0000b86e 0000b880 0000b892 0000b8a4     n...............
   25020:	0000b8b6 0000b9b6 0000ba10 0000ba10     ................
   25030:	0000ba10 0000ba10 0000ba10 0000ba10     ................
   25040:	0000ba10 0000ba10 0000ba10 0000ba10     ................
   25050:	0000ba10 0000ba10 0000ba10 0000ba10     ................
   25060:	0000ba10 0000ba10 0000ba10 0000ba10     ................
   25070:	0000ba10 0000ba10 0000ba10 0000ba10     ................
   25080:	0000ba10 0000ba10 0000ba10 0000ba10     ................
   25090:	0000ba10 0000ba10 0000ba10 0000ba10     ................
   250a0:	0000ba10 0000b9de 0000b9e6 0000b9ee     ................
   250b0:	0000ba10 0000ba10 0000b9fc 0000ba10     ................
   250c0:	0000ba10 0000ba10 0000ba10 0000ba10     ................
   250d0:	0000ba10 0000ba10 0000ba10 0000ba10     ................
   250e0:	0000ba10 0000ba02 732f2e2e 412f6372     ........../src/A
   250f0:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   25100:	2f637472 5f637472 656c6163 7261646e     rtc/rtc_calendar
   25110:	0000682e 65737341 6f697472 6166206e     .h..Assertion fa
   25120:	64656c69 7325203a 00000000 666e6f63     iled: %s....conf
   25130:	00006769 65737341 6f697472 2527206e     ig..Assertion '%
   25140:	66202773 656c6961 74612064 3a732520     s' failed at %s:
   25150:	0a0d6425 00000000 732f2e2e 412f6372     %d......../src/A
   25160:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   25170:	63726573 692f6d6f 692f6332 6d5f6332     sercom/i2c/i2c_m
   25180:	65747361 00682e72 75646f6d 0000656c     aster.h.module..
   25190:	75646f6d 3e2d656c 00007768 732f2e2e     module->hw..../s
   251a0:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   251b0:	2f737265 63726573 692f6d6f 692f6332     ers/sercom/i2c/i
   251c0:	735f6332 6576616c 0000682e 732f2e2e     2c_slave.h..../s
   251d0:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   251e0:	2f737265 2f636461 2e636461 00000068     ers/adc/adc.h...
   251f0:	65737341 6f697472 6166206e 64656c69     Assertion failed
   25200:	7325203a 00000000 75646f6d 695f656c     : %s....module_i
   25210:	0074736e 65737341 6f697472 2527206e     nst.Assertion '%
   25220:	66202773 656c6961 74612064 3a732520     s' failed at %s:
   25230:	0a0d6425 00000000 75646f6d 695f656c     %d......module_i
   25240:	2d74736e 0077683e 732f2e2e 412f6372     nst->hw.../src/A
   25250:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   25260:	63726573 692f6d6f 692f6332 6d5f6332     sercom/i2c/i2c_m
   25270:	65747361 00682e72 75646f6d 0000656c     aster.h.module..
   25280:	75646f6d 3e2d656c 00007768 732f2e2e     module->hw..../s
   25290:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   252a0:	2f737265 63726573 692f6d6f 692f6332     ers/sercom/i2c/i
   252b0:	735f6332 6576616c 0000682e 75725b0a     2c_slave.h...[ru
   252c0:	6e696e6e 65732067 7420666c 5d747365     nning self test]
   252d0:	00000000 62747356 00000079 676f6c56     ....Vstby...Vlog
   252e0:	00006369 6c756256 0000006b 74616256     ic..Vbulk...Vbat
   252f0:	00000074 6a657254 00000031 6a657254     t...Trej1...Trej
   25300:	00000032 6e6f6354 00000064 61686354     2...Tcond...Tcha
   25310:	00000031 61686354 00000032 796c6754     1...Tcha2...Tgly
   25320:	00000063 316e6146 00000000 326e6146     c...Fan1....Fan2
   25330:	00000000 336e6146 00000000 346e6146     ....Fan3....Fan4
   25340:	00000000 70687056 00000031 70687056     ....Vphp1...Vphp
   25350:	00000032 7420200a 20747365 74617473     2....  test stat
   25360:	69207375 23252073 00786c38 65735b0a     us is %#8lx..[se
   25370:	7420666c 20747365 706d6f63 6574656c     lf test complete
   25380:	0000005d 73736170 00000000 4c494146     ]...pass....FAIL
   25390:	00000000 2520200a 2064322d 25097325     .....  %-2d %s.%
   253a0:	34250973 0966322e 2e342528 202c6632     s.%4.2f.(%4.2f, 
   253b0:	322e3425 00002966 2520200a 2064322d     %4.2f)...  %-2d 
   253c0:	73097325 0070696b 732f2e2e 412f6372     %s.skip.../src/A
   253d0:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   253e0:	63726573 692f6d6f 692f6332 6d5f6332     sercom/i2c/i2c_m
   253f0:	65747361 00682e72 65737341 6f697472     aster.h.Assertio
   25400:	6166206e 64656c69 7325203a 00000000     n failed: %s....
   25410:	75646f6d 0000656c 65737341 6f697472     module..Assertio
   25420:	2527206e 66202773 656c6961 74612064     n '%s' failed at
   25430:	3a732520 0a0d6425 00000000 75646f6d      %s:%d......modu
   25440:	3e2d656c 00007768 732f2e2e 412f6372     le->hw..../src/A
   25450:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   25460:	63726573 692f6d6f 692f6332 735f6332     sercom/i2c/i2c_s
   25470:	6576616c 0000682e 732f2e2e 412f6372     lave.h..../src/A
   25480:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   25490:	742f6374 00682e63 75646f6d 695f656c     tc/tc.h.module_i
   254a0:	0074736e 75646f6d 695f656c 2d74736e     nst.module_inst-
   254b0:	0077683e 666e6f63 00006769 732f2e2e     >hw.config..../s
   254c0:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   254d0:	2f737265 742f6374 6e695f63 72726574     ers/tc/tc_interr
   254e0:	2e747075 00000068 732f2e2e 412f6372     upt.h...../src/A
   254f0:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   25500:	74737973 702f6d65 756d6e69 69702f78     system/pinmux/pi
   25510:	78756d6e 0000682e 65737341 6f697472     nmux.h..Assertio
   25520:	6166206e 64656c69 7325203a 00000000     n failed: %s....
   25530:	666e6f63 00006769 65737341 6f697472     config..Assertio
   25540:	2527206e 66202773 656c6961 74612064     n '%s' failed at
   25550:	3a732520 0a0d6425 00000000 736c6166      %s:%d......fals
   25560:	00000065 732f2e2e 412f6372 732f4653     e...../src/ASF/s
   25570:	2f306d61 76697264 2f737265 2f636461     am0/drivers/adc/
   25580:	2e636461 00000068 75646f6d 695f656c     adc.h...module_i
   25590:	0074736e 75646f6d 695f656c 2d74736e     nst.module_inst-
   255a0:	0077683e 75736572 0000746c 732f2e2e     >hw.result..../s
   255b0:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   255c0:	2f737265 74726f70 726f702f 00682e74     ers/port/port.h.
   255d0:	732f2e2e 412f6372 732f4653 2f306d61     ../src/ASF/sam0/
   255e0:	76697264 2f737265 63726573 692f6d6f     drivers/sercom/i
   255f0:	692f6332 6d5f6332 65747361 00682e72     2c/i2c_master.h.
   25600:	75646f6d 0000656c 75646f6d 3e2d656c     module..module->
   25610:	00007768 732f2e2e 412f6372 732f4653     hw..../src/ASF/s
   25620:	2f306d61 76697264 2f737265 63726573     am0/drivers/serc
   25630:	692f6d6f 692f6332 735f6332 6576616c     om/i2c/i2c_slave
   25640:	0000682e 732f2e2e 412f6372 732f4653     .h..../src/ASF/s
   25650:	2f306d61 76697264 2f737265 742f6374     am0/drivers/tc/t
   25660:	00682e63 6e6f6850 63696e6f 31776d5f     c.h.Phononic_mw1
   25670:	5f303030 00003834 6e6f6850 63696e6f     000_48..Phononic
   25680:	35776d5f 345f3030 00000031 6e6f6850     _mw500_41...Phon
   25690:	63696e6f 33616d5f 335f3035 00000036     onic_ma350_36...
   256a0:	6c735b0a 5d706565 00000000 61775b0a     .[sleep].....[wa
   256b0:	005d656b 732f2e2e 412f6372 732f4653     ke].../src/ASF/s
   256c0:	2f306d61 76697264 2f737265 63726573     am0/drivers/serc
   256d0:	692f6d6f 692f6332 6d5f6332 65747361     om/i2c/i2c_maste
   256e0:	00682e72 65737341 6f697472 6166206e     r.h.Assertion fa
   256f0:	64656c69 7325203a 00000000 75646f6d     iled: %s....modu
   25700:	0000656c 65737341 6f697472 2527206e     le..Assertion '%
   25710:	66202773 656c6961 74612064 3a732520     s' failed at %s:
   25720:	0a0d6425 00000000 75646f6d 3e2d656c     %d......module->
   25730:	00007768 732f2e2e 412f6372 732f4653     hw..../src/ASF/s
   25740:	2f306d61 76697264 2f737265 63726573     am0/drivers/serc
   25750:	692f6d6f 692f6332 735f6332 6576616c     om/i2c/i2c_slave
   25760:	0000682e 732f2e2e 412f6372 732f4653     .h..../src/ASF/s
   25770:	2f306d61 76697264 2f737265 63726573     am0/drivers/serc
   25780:	752f6d6f 74726173 6173752f 682e7472     om/usart/usart.h
   25790:	00000000 666e6f63 00006769 732f2e2e     ....config..../s
   257a0:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   257b0:	2f737265 63726573 752f6d6f 74726173     ers/sercom/usart
   257c0:	6173752f 695f7472 7265746e 74707572     /usart_interrupt
   257d0:	0000682e 6e695b0a 696c6176 6f632064     .h...[invalid co
   257e0:	6e616d6d 64252064 6425202c 6425202c     mmand %d, %d, %d
   257f0:	0000005d 732f2e2e 412f6372 732f4653     ]...../src/ASF/s
   25800:	2f306d61 76697264 2f737265 2f636461     am0/drivers/adc/
   25810:	2e636461 00000068 65737341 6f697472     adc.h...Assertio
   25820:	6166206e 64656c69 7325203a 00000000     n failed: %s....
   25830:	666e6f63 00006769 65737341 6f697472     config..Assertio
   25840:	2527206e 66202773 656c6961 74612064     n '%s' failed at
   25850:	3a732520 0a0d6425 00000000 75646f6d      %s:%d......modu
   25860:	695f656c 0074736e 75646f6d 695f656c     le_inst.module_i
   25870:	2d74736e 0077683e 732f2e2e 412f6372     nst->hw.../src/A
   25880:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   25890:	63726573 692f6d6f 692f6332 6d5f6332     sercom/i2c/i2c_m
   258a0:	65747361 00682e72 75646f6d 0000656c     aster.h.module..
   258b0:	75646f6d 3e2d656c 00007768 732f2e2e     module->hw..../s
   258c0:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   258d0:	2f737265 63726573 692f6d6f 692f6332     ers/sercom/i2c/i
   258e0:	735f6332 6576616c 0000682e 732f2e2e     2c_slave.h..../s
   258f0:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   25900:	2f737265 63726573 692f6d6f 692f6332     ers/sercom/i2c/i
   25910:	6d5f6332 65747361 00682e72 65737341     2c_master.h.Asse
   25920:	6f697472 6166206e 64656c69 7325203a     rtion failed: %s
   25930:	00000000 75646f6d 0000656c 65737341     ....module..Asse
   25940:	6f697472 2527206e 66202773 656c6961     rtion '%s' faile
   25950:	74612064 3a732520 0a0d6425 00000000     d at %s:%d......
   25960:	75646f6d 3e2d656c 00007768 732f2e2e     module->hw..../s
   25970:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   25980:	2f737265 63726573 692f6d6f 692f6332     ers/sercom/i2c/i
   25990:	735f6332 6576616c 0000682e 7465730a     2c_slave.h...set
   259a0:	6e696f70 696c2074 6574696d 6f742064     point limited to
   259b0:	00662520 2e2e2e0a 206e6166 746e6f63      %f.....fan cont
   259c0:	6c6c6f72 72207265 20646165 6c696166     roller read fail
   259d0:	00657275 732f2e2e 412f6372 632f4653     ure.../src/ASF/c
   259e0:	6f6d6d6f 74752f6e 2f736c69 65746e69     ommon/utils/inte
   259f0:	70757272 6e692f74 72726574 5f747075     rrupt/interrupt_
   25a00:	5f6d6173 6369766e 0000632e 65737341     sam_nvic.c..Asse
   25a10:	6f697472 6166206e 64656c69 7325203a     rtion failed: %s
   25a20:	00000000 5f757063 5f717269 74697263     ....cpu_irq_crit
   25a30:	6c616369 6365735f 6e6f6974 756f635f     ical_section_cou
   25a40:	7265746e 30203e20 00000000 65737341     nter > 0....Asse
   25a50:	6f697472 2527206e 66202773 656c6961     rtion '%s' faile
   25a60:	74612064 3a732520 0a0d6425 00000000     d at %s:%d......
   25a70:	74736554 73252720 61662027 64656c69     Test '%s' failed
   25a80:	72756420 20676e69 27732527 6425203a      during '%s': %d
   25a90:	00000a0d 6e6e7552 20676e69 74736574     ....Running test
   25aa0:	7325203a 00000a0d 74746553 20676e69     : %s....Setting 
   25ab0:	66207075 75747869 000d6572 75746573     up fixture..setu
   25ac0:	00000070 74736574 00000000 61656c43     p...test....Clea
   25ad0:	676e696e 20707520 74786966 0d657275     ning up fixture.
   25ae0:	00000000 61656c63 0070756e 74736554     ....cleanup.Test
   25af0:	73252720 61662027 64656c69 20746120      '%s' failed at 
   25b00:	253a7325 0a0d3a75 00000009 6e6e7552     %s:%u:......Runn
   25b10:	20676e69 74736574 69757320 27206574     ing test suite '
   25b20:	2e277325 0a0d2e2e 00000000 74736554     %s'.........Test
   25b30:	69757320 27206574 20277325 706d6f63      suite '%s' comp
   25b40:	6574656c 7525203a 73657420 202c7374     lete: %u tests, 
   25b50:	66207525 756c6961 2c736572 20752520     %u failures, %u 
   25b60:	6f727265 0a0d7372 00000a0d 732f2e2e     errors......../s
   25b70:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   25b80:	2f737265 74726f70 726f702f 00682e74     ers/port/port.h.
   25b90:	65737341 6f697472 6166206e 64656c69     Assertion failed
   25ba0:	7325203a 00000000 666e6f63 00006769     : %s....config..
   25bb0:	65737341 6f697472 2527206e 66202773     Assertion '%s' f
   25bc0:	656c6961 74612064 3a732520 0a0d6425     ailed at %s:%d..
   25bd0:	00000000 732f2e2e 412f6372 732f4653     ....../src/ASF/s
   25be0:	2f306d61 76697264 2f737265 74737973     am0/drivers/syst
   25bf0:	632f6d65 6b636f6c 6c63672f 00682e6b     em/clock/gclk.h.
   25c00:	65737341 6f697472 6166206e 64656c69     Assertion failed
   25c10:	7325203a 00000000 666e6f63 00006769     : %s....config..
   25c20:	65737341 6f697472 2527206e 66202773     Assertion '%s' f
   25c30:	656c6961 74612064 3a732520 0a0d6425     ailed at %s:%d..
   25c40:	00000000 732f2e2e 412f6372 732f4653     ....../src/ASF/s
   25c50:	2f306d61 76697264 2f737265 74737973     am0/drivers/syst
   25c60:	632f6d65 6b636f6c 6f6c632f 682e6b63     em/clock/clock.h
   25c70:	00000000 736c6166 00000065 732f2e2e     ....false...../s
   25c80:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   25c90:	2f737265 74737973 702f6d65 756d6e69     ers/system/pinmu
   25ca0:	69702f78 78756d6e 0000682e 732f2e2e     x/pinmux.h..../s
   25cb0:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   25cc0:	2f737265 2f636461 2e636461 00000068     ers/adc/adc.h...
   25cd0:	75646f6d 695f656c 0074736e 00000002     module_inst.....
   25ce0:	00000003 00000028 00000029 00000004     ....(...).......
   25cf0:	00000005 00000006 00000007 00000020     ............ ...
   25d00:	00000021 00000022 00000023 00000024     !..."...#...$...
   25d10:	00000025 00000026 00000027 00000008     %...&...'.......
   25d20:	00000009 0000000a 0000000b 732f2e2e     ............../s
   25d30:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   25d40:	2f737265 2f636461 2e636461 00000063     ers/adc/adc.c...
   25d50:	00007768 00010d42 00010d48 00010d48     hw..B...H...H...
   25d60:	00010d48 00010d48 00010d48 00010d48     H...H...H...H...
   25d70:	00010d48 00010d48 00010d48 00010d48     H...H...H...H...
   25d80:	00010d48 00010d48 00010d48 00010d48     H...H...H...H...
   25d90:	00010d48 00010d24 00010d48 00010d48     H...$...H...H...
   25da0:	00010d48 00010d48 00010d48 00010d48     H...H...H...H...
   25db0:	00010d48 00010d48 00010d48 00010d48     H...H...H...H...
   25dc0:	00010d48 00010d48 00010d48 00010d48     H...H...H...H...
   25dd0:	00010d48 00010d3c 00010d48 00010d48     H...<...H...H...
   25de0:	00010d48 00010d48 00010d48 00010d48     H...H...H...H...
   25df0:	00010d48 00010d48 00010d48 00010d48     H...H...H...H...
   25e00:	00010d48 00010d48 00010d48 00010d48     H...H...H...H...
   25e10:	00010d48 00010d36 00010ce2 00010cf8     H...6...........
   25e20:	00010d0e 00010cc8 732f2e2e 412f6372     ........../src/A
   25e30:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   25e40:	2f636461 2e636461 00000068 65737341     adc/adc.h...Asse
   25e50:	6f697472 6166206e 64656c69 7325203a     rtion failed: %s
   25e60:	00000000 75646f6d 695f656c 0074736e     ....module_inst.
   25e70:	65737341 6f697472 2527206e 66202773     Assertion '%s' f
   25e80:	656c6961 74612064 3a732520 0a0d6425     ailed at %s:%d..
   25e90:	00000000 75646f6d 695f656c 2d74736e     ....module_inst-
   25ea0:	0077683e 732f2e2e 412f6372 732f4653     >hw.../src/ASF/s
   25eb0:	2f306d61 76697264 2f737265 2f636461     am0/drivers/adc/
   25ec0:	5f636461 6c6c6163 6b636162 0000632e     adc_callback.c..
   25ed0:	75646f6d 0000656c 6c6c6163 6b636162     module..callback
   25ee0:	6e75665f 00000063 706d6173 0073656c     _func...samples.
   25ef0:	66667562 00007265 732f2e2e 412f6372     buffer..../src/A
   25f00:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   25f10:	69747865 652f746e 6e697478 00682e74     extint/extint.h.
   25f20:	65737341 6f697472 6166206e 64656c69     Assertion failed
   25f30:	7325203a 00000000 736c6166 00000065     : %s....false...
   25f40:	65737341 6f697472 2527206e 66202773     Assertion '%s' f
   25f50:	656c6961 74612064 3a732520 0a0d6425     ailed at %s:%d..
   25f60:	00000000 732f2e2e 412f6372 732f4653     ....../src/ASF/s
   25f70:	2f306d61 76697264 2f737265 69747865     am0/drivers/exti
   25f80:	652f746e 6e697478 61635f74 61626c6c     nt/extint_callba
   25f90:	632e6b63 00000000 6c6c6163 6b636162     ck.c....callback
   25fa0:	00000000 732f2e2e 412f6372 732f4653     ....../src/ASF/s
   25fb0:	2f306d61 76697264 2f737265 74737973     am0/drivers/syst
   25fc0:	632f6d65 6b636f6c 6f6c632f 682e6b63     em/clock/clock.h
   25fd0:	00000000 65737341 6f697472 6166206e     ....Assertion fa
   25fe0:	64656c69 7325203a 00000000 736c6166     iled: %s....fals
   25ff0:	00000065 65737341 6f697472 2527206e     e...Assertion '%
   26000:	66202773 656c6961 74612064 3a732520     s' failed at %s:
   26010:	0a0d6425 00000000 732f2e2e 412f6372     %d......../src/A
   26020:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   26030:	2f6d766e 2e6d766e 00000063 666e6f63     nvm/nvm.c...conf
   26040:	00006769 61726170 6574656d 00007372     ig..parameters..
   26050:	00011a5e 00011a5e 00011a52 00011a5e     ^...^...R...^...
   26060:	00011a52 00011a32 00011a32 00011a5e     R...2...2...^...
   26070:	00011a5e 00011a5e 00011a5e 00011a5e     ^...^...^...^...
   26080:	00011a5e 00011a5e 00011a5e 00011a5e     ^...^...^...^...
   26090:	00011a5e 00011a5e 00011a5e 00011a5e     ^...^...^...^...
   260a0:	00011a5e 00011a5e 00011a5e 00011a5e     ^...^...^...^...
   260b0:	00011a5e 00011a5e 00011a5e 00011a5e     ^...^...^...^...
   260c0:	00011a5e 00011a5e 00011a5e 00011a5e     ^...^...^...^...
   260d0:	00011a5e 00011a5e 00011a5e 00011a5e     ^...^...^...^...
   260e0:	00011a5e 00011a5e 00011a5e 00011a5e     ^...^...^...^...
   260f0:	00011a5e 00011a5e 00011a5e 00011a5e     ^...^...^...^...
   26100:	00011a5e 00011a5e 00011a5e 00011a5e     ^...^...^...^...
   26110:	00011a5e 00011a5e 00011a5e 00011a5e     ^...^...^...^...
   26120:	00011a5e 00011a5e 00011a5e 00011a5e     ^...^...^...^...
   26130:	00011a5e 00011a5e 00011a5e 00011a5e     ^...^...^...^...
   26140:	00011a5e 00011a5e 00011a5e 00011a5e     ^...^...^...^...
   26150:	00011a52 00011a52 00011a62 00011a62     R...R...b...b...
   26160:	00011a62 00011a62 732f2e2e 412f6372     b...b...../src/A
   26170:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   26180:	74737973 702f6d65 756d6e69 69702f78     system/pinmux/pi
   26190:	78756d6e 0000682e 65737341 6f697472     nmux.h..Assertio
   261a0:	6166206e 64656c69 7325203a 00000000     n failed: %s....
   261b0:	666e6f63 00006769 65737341 6f697472     config..Assertio
   261c0:	2527206e 66202773 656c6961 74612064     n '%s' failed at
   261d0:	3a732520 0a0d6425 00000000 732f2e2e      %s:%d......../s
   261e0:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   261f0:	2f737265 74726f70 726f702f 00632e74     ers/port/port.c.
   26200:	74726f70 00000000 732f2e2e 412f6372     port....../src/A
   26210:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   26220:	74737973 632f6d65 6b636f6c 6c63672f     system/clock/gcl
   26230:	00682e6b 65737341 6f697472 6166206e     k.h.Assertion fa
   26240:	64656c69 7325203a 00000000 666e6f63     iled: %s....conf
   26250:	00006769 65737341 6f697472 2527206e     ig..Assertion '%
   26260:	66202773 656c6961 74612064 3a732520     s' failed at %s:
   26270:	0a0d6425 00000000 732f2e2e 412f6372     %d......../src/A
   26280:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   26290:	74737973 632f6d65 6b636f6c 6f6c632f     system/clock/clo
   262a0:	682e6b63 00000000 736c6166 00000065     ck.h....false...
   262b0:	732f2e2e 412f6372 732f4653 2f306d61     ../src/ASF/sam0/
   262c0:	76697264 2f737265 2f637472 5f637472     drivers/rtc/rtc_
   262d0:	656c6163 7261646e 0000632e 732f2e2e     calendar.c..../s
   262e0:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   262f0:	2f737265 74737973 632f6d65 6b636f6c     ers/system/clock
   26300:	6c63672f 00682e6b 65737341 6f697472     /gclk.h.Assertio
   26310:	6166206e 64656c69 7325203a 00000000     n failed: %s....
   26320:	666e6f63 00006769 65737341 6f697472     config..Assertio
   26330:	2527206e 66202773 656c6961 74612064     n '%s' failed at
   26340:	3a732520 0a0d6425 00000000 732f2e2e      %s:%d......../s
   26350:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   26360:	2f737265 74737973 632f6d65 6b636f6c     ers/system/clock
   26370:	6f6c632f 682e6b63 00000000 736c6166     /clock.h....fals
   26380:	00000065 732f2e2e 412f6372 732f4653     e...../src/ASF/s
   26390:	2f306d61 76697264 2f737265 74737973     am0/drivers/syst
   263a0:	702f6d65 756d6e69 69702f78 78756d6e     em/pinmux/pinmux
   263b0:	0000682e 732f2e2e 412f6372 732f4653     .h..../src/ASF/s
   263c0:	2f306d61 76697264 2f737265 63726573     am0/drivers/serc
   263d0:	692f6d6f 692f6332 6d5f6332 65747361     om/i2c/i2c_maste
   263e0:	00682e72 75646f6d 0000656c 75646f6d     r.h.module..modu
   263f0:	3e2d656c 00007768 732f2e2e 412f6372     le->hw..../src/A
   26400:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   26410:	63726573 692f6d6f 692f6332 6d5f6332     sercom/i2c/i2c_m
   26420:	65747361 00632e72 00007768 6b636170     aster.c.hw..pack
   26430:	00007465 732f2e2e 412f6372 732f4653     et..../src/ASF/s
   26440:	2f306d61 76697264 2f737265 74737973     am0/drivers/syst
   26450:	632f6d65 6b636f6c 6c63672f 00682e6b     em/clock/gclk.h.
   26460:	65737341 6f697472 6166206e 64656c69     Assertion failed
   26470:	7325203a 00000000 666e6f63 00006769     : %s....config..
   26480:	65737341 6f697472 2527206e 66202773     Assertion '%s' f
   26490:	656c6961 74612064 3a732520 0a0d6425     ailed at %s:%d..
   264a0:	00000000 732f2e2e 412f6372 732f4653     ....../src/ASF/s
   264b0:	2f306d61 76697264 2f737265 74737973     am0/drivers/syst
   264c0:	632f6d65 6b636f6c 6f6c632f 682e6b63     em/clock/clock.h
   264d0:	00000000 736c6166 00000065 732f2e2e     ....false...../s
   264e0:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   264f0:	2f737265 74737973 702f6d65 756d6e69     ers/system/pinmu
   26500:	69702f78 78756d6e 0000682e 732f2e2e     x/pinmux.h..../s
   26510:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   26520:	2f737265 63726573 692f6d6f 692f6332     ers/sercom/i2c/i
   26530:	735f6332 6576616c 0000682e 75646f6d     2c_slave.h..modu
   26540:	0000656c 75646f6d 3e2d656c 00007768     le..module->hw..
   26550:	732f2e2e 412f6372 732f4653 2f306d61     ../src/ASF/sam0/
   26560:	76697264 2f737265 63726573 692f6d6f     drivers/sercom/i
   26570:	692f6332 735f6332 6576616c 0000632e     2c/i2c_slave.c..
   26580:	00007768 6b636170 00007465 732f2e2e     hw..packet..../s
   26590:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   265a0:	2f737265 63726573 692f6d6f 692f6332     ers/sercom/i2c/i
   265b0:	735f6332 6576616c 0000682e 65737341     2c_slave.h..Asse
   265c0:	6f697472 6166206e 64656c69 7325203a     rtion failed: %s
   265d0:	00000000 75646f6d 0000656c 65737341     ....module..Asse
   265e0:	6f697472 2527206e 66202773 656c6961     rtion '%s' faile
   265f0:	74612064 3a732520 0a0d6425 00000000     d at %s:%d......
   26600:	75646f6d 3e2d656c 00007768 732f2e2e     module->hw..../s
   26610:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   26620:	2f737265 63726573 692f6d6f 692f6332     ers/sercom/i2c/i
   26630:	735f6332 6576616c 746e695f 75727265     2c_slave_interru
   26640:	632e7470 00000000 6c6c6163 6b636162     pt.c....callback
   26650:	00000000 6b636170 00007465 732f2e2e     ....packet..../s
   26660:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   26670:	2f737265 74737973 632f6d65 6b636f6c     ers/system/clock
   26680:	6c63672f 00682e6b 65737341 6f697472     /gclk.h.Assertio
   26690:	6166206e 64656c69 7325203a 00000000     n failed: %s....
   266a0:	666e6f63 00006769 65737341 6f697472     config..Assertio
   266b0:	2527206e 66202773 656c6961 74612064     n '%s' failed at
   266c0:	3a732520 0a0d6425 00000000 732f2e2e      %s:%d......../s
   266d0:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   266e0:	2f737265 63726573 732f6d6f 6f637265     ers/sercom/serco
   266f0:	00632e6d 736c6166 00000065 732f2e2e     m.c.false...../s
   26700:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   26710:	2f737265 63726573 732f6d6f 6f637265     ers/sercom/serco
   26720:	6e695f6d 72726574 2e747075 00000063     m_interrupt.c...
   26730:	65737341 6f697472 6166206e 64656c69     Assertion failed
   26740:	7325203a 00000000 736c6166 00000065     : %s....false...
   26750:	65737341 6f697472 2527206e 66202773     Assertion '%s' f
   26760:	656c6961 74612064 3a732520 0a0d6425     ailed at %s:%d..
   26770:	00000000 42000800 42000c00 42001000     .......B...B...B
   26780:	42001400 42001800 42001c00 0a090807     ...B...B...B....
   26790:	00000c0b 732f2e2e 412f6372 732f4653     ....../src/ASF/s
   267a0:	2f306d61 76697264 2f737265 74737973     am0/drivers/syst
   267b0:	632f6d65 6b636f6c 6c63672f 00682e6b     em/clock/gclk.h.
   267c0:	65737341 6f697472 6166206e 64656c69     Assertion failed
   267d0:	7325203a 00000000 666e6f63 00006769     : %s....config..
   267e0:	65737341 6f697472 2527206e 66202773     Assertion '%s' f
   267f0:	656c6961 74612064 3a732520 0a0d6425     ailed at %s:%d..
   26800:	00000000 732f2e2e 412f6372 732f4653     ....../src/ASF/s
   26810:	2f306d61 76697264 2f737265 74737973     am0/drivers/syst
   26820:	632f6d65 6b636f6c 6f6c632f 682e6b63     em/clock/clock.h
   26830:	00000000 736c6166 00000065 732f2e2e     ....false...../s
   26840:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   26850:	2f737265 74737973 702f6d65 756d6e69     ers/system/pinmu
   26860:	69702f78 78756d6e 0000682e 732f2e2e     x/pinmux.h..../s
   26870:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   26880:	2f737265 63726573 752f6d6f 74726173     ers/sercom/usart
   26890:	6173752f 632e7472 00000000 75646f6d     /usart.c....modu
   268a0:	0000656c 75646f6d 3e2d656c 00007768     le..module->hw..
   268b0:	00007768 732f2e2e 412f6372 732f4653     hw..../src/ASF/s
   268c0:	2f306d61 76697264 2f737265 63726573     am0/drivers/serc
   268d0:	752f6d6f 74726173 6173752f 695f7472     om/usart/usart_i
   268e0:	7265746e 74707572 0000632e 65737341     nterrupt.c..Asse
   268f0:	6f697472 6166206e 64656c69 7325203a     rtion failed: %s
   26900:	00000000 75646f6d 0000656c 65737341     ....module..Asse
   26910:	6f697472 2527206e 66202773 656c6961     rtion '%s' faile
   26920:	74612064 3a732520 0a0d6425 00000000     d at %s:%d......
   26930:	75646f6d 3e2d656c 00007768 6c6c6163     module->hw..call
   26940:	6b636162 6e75665f 00000063 645f7872     back_func...rx_d
   26950:	00617461 732f2e2e 412f6372 732f4653     ata.../src/ASF/s
   26960:	2f306d61 76697264 2f737265 74737973     am0/drivers/syst
   26970:	632f6d65 6b636f6c 6c63672f 00682e6b     em/clock/gclk.h.
   26980:	65737341 6f697472 6166206e 64656c69     Assertion failed
   26990:	7325203a 00000000 666e6f63 00006769     : %s....config..
   269a0:	65737341 6f697472 2527206e 66202773     Assertion '%s' f
   269b0:	656c6961 74612064 3a732520 0a0d6425     ailed at %s:%d..
   269c0:	00000000 732f2e2e 412f6372 732f4653     ....../src/ASF/s
   269d0:	2f306d61 76697264 2f737265 74737973     am0/drivers/syst
   269e0:	632f6d65 6b636f6c 6f6c632f 682e6b63     em/clock/clock.h
   269f0:	00000000 69752828 3233746e 6429745f     ....((uint32_t)d
   26a00:	64697669 26207265 5f4d5020 53555043     ivider & PM_CPUS
   26a10:	435f4c45 49445550 734d5f56 3d20296b     EL_CPUDIV_Msk) =
   26a20:	6964203d 65646976 00000072 736c6166     = divider...fals
   26a30:	00000065 69617728 74735f74 73657461     e...(wait_states
   26a40:	4e202620 54434d56 435f4c52 424c5254      & NVMCTRL_CTRLB
   26a50:	5357525f 6b734d5f 3d3d2029 69617720     _RWS_Msk) == wai
   26a60:	74735f74 73657461 00000000 732f2e2e     t_states....../s
   26a70:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   26a80:	2f737265 74737973 632f6d65 6b636f6c     ers/system/clock
   26a90:	6f6c632f 632e6b63 00000000 00016dce     /clock.c.....m..
   26aa0:	00016e2e 00016e2e 00016dee 00016de8     .n...n...m...m..
   26ab0:	00016df4 00016dd4 00016dfa 00017110     .m...m...m...q..
   26ac0:	0001714a 0001714a 00017146 00017102     Jq..Jq..Fq...q..
   26ad0:	00017122 000170f2 00017134 732f2e2e     "q...p..4q..../s
   26ae0:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   26af0:	2f737265 74737973 632f6d65 6b636f6c     ers/system/clock
   26b00:	6f6c632f 682e6b63 00000000 65737341     /clock.h....Asse
   26b10:	6f697472 6166206e 64656c69 7325203a     rtion failed: %s
   26b20:	00000000 736c6166 00000065 65737341     ....false...Asse
   26b30:	6f697472 2527206e 66202773 656c6961     rtion '%s' faile
   26b40:	74612064 3a732520 0a0d6425 00000000     d at %s:%d......
   26b50:	732f2e2e 412f6372 732f4653 2f306d61     ../src/ASF/sam0/
   26b60:	76697264 2f737265 74737973 632f6d65     drivers/system/c
   26b70:	6b636f6c 6c63672f 00632e6b 666e6f63     lock/gclk.c.conf
   26b80:	00006769 732f2e2e 412f6372 732f4653     ig..../src/ASF/s
   26b90:	2f306d61 76697264 2f737265 74737973     am0/drivers/syst
   26ba0:	702f6d65 756d6e69 69702f78 78756d6e     em/pinmux/pinmux
   26bb0:	0000682e 65737341 6f697472 6166206e     .h..Assertion fa
   26bc0:	64656c69 7325203a 00000000 736c6166     iled: %s....fals
   26bd0:	00000065 65737341 6f697472 2527206e     e...Assertion '%
   26be0:	66202773 656c6961 74612064 3a732520     s' failed at %s:
   26bf0:	0a0d6425 00000000 732f2e2e 412f6372     %d......../src/A
   26c00:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   26c10:	74737973 702f6d65 756d6e69 69702f78     system/pinmux/pi
   26c20:	78756d6e 0000632e 74726f70 00000000     nmux.c..port....
   26c30:	666e6f63 00006769 732f2e2e 412f6372     config..../src/A
   26c40:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   26c50:	74737973 732f6d65 65747379 00632e6d     system/system.c.
   26c60:	65737341 6f697472 6166206e 64656c69     Assertion failed
   26c70:	7325203a 00000000 736c6166 00000065     : %s....false...
   26c80:	65737341 6f697472 2527206e 66202773     Assertion '%s' f
   26c90:	656c6961 74612064 3a732520 0a0d6425     ailed at %s:%d..
   26ca0:	00000000 732f2e2e 412f6372 732f4653     ....../src/ASF/s
   26cb0:	2f306d61 76697264 2f737265 74737973     am0/drivers/syst
   26cc0:	632f6d65 6b636f6c 6c63672f 00682e6b     em/clock/gclk.h.
   26cd0:	65737341 6f697472 6166206e 64656c69     Assertion failed
   26ce0:	7325203a 00000000 666e6f63 00006769     : %s....config..
   26cf0:	65737341 6f697472 2527206e 66202773     Assertion '%s' f
   26d00:	656c6961 74612064 3a732520 0a0d6425     ailed at %s:%d..
   26d10:	00000000 732f2e2e 412f6372 732f4653     ....../src/ASF/s
   26d20:	2f306d61 76697264 2f737265 74737973     am0/drivers/syst
   26d30:	632f6d65 6b636f6c 6f6c632f 682e6b63     em/clock/clock.h
   26d40:	00000000 736c6166 00000065 732f2e2e     ....false...../s
   26d50:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   26d60:	2f737265 74737973 702f6d65 756d6e69     ers/system/pinmu
   26d70:	69702f78 78756d6e 0000682e 732f2e2e     x/pinmux.h..../s
   26d80:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
   26d90:	2f737265 742f6374 00682e63 75646f6d     ers/tc/tc.h.modu
   26da0:	695f656c 0074736e 75646f6d 695f656c     le_inst.module_i
   26db0:	2d74736e 0077683e 732f2e2e 412f6372     nst->hw.../src/A
   26dc0:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   26dd0:	742f6374 00632e63 42002000 42002400     tc/tc.c.. .B.$.B
   26de0:	42002800 42002c00 42003000 42003400     .(.B.,.B.0.B.4.B
   26df0:	42003800 42003c00 00007768 14141313     .8.B.<.Bhw......
   26e00:	16161515 02000100 08000400 20001000     ............... 
   26e10:	80004000 706d6f63 00657261 5f706f74     .@..compare.top_
   26e20:	756c6176 00000065 732f2e2e 412f6372     value...../src/A
   26e30:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   26e40:	742f6374 6e695f63 72726574 2e747075     tc/tc_interrupt.
   26e50:	00000063 65737341 6f697472 6166206e     c...Assertion fa
   26e60:	64656c69 7325203a 00000000 75646f6d     iled: %s....modu
   26e70:	0000656c 65737341 6f697472 2527206e     le..Assertion '%
   26e80:	66202773 656c6961 74612064 3a732520     s' failed at %s:
   26e90:	0a0d6425 00000000 6c6c6163 6b636162     %d......callback
   26ea0:	6e75665f 00000063 732f2e2e 412f6372     _func...../src/A
   26eb0:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
   26ec0:	2f6d766e 2e6d766e 00000068 65737341     nvm/nvm.h...Asse
   26ed0:	6f697472 6166206e 64656c69 7325203a     rtion failed: %s
   26ee0:	00000000 666e6f63 00006769 65737341     ....config..Asse
   26ef0:	6f697472 2527206e 66202773 656c6961     rtion '%s' faile
   26f00:	74612064 3a732520 0a0d6425 00000000     d at %s:%d......
   26f10:	41744545 50524f4d 456d752e 732f2e2e     EEtAMORP.umE../s
   26f20:	412f6372 732f4653 2f306d61 76726573     rc/ASF/sam0/serv
   26f30:	73656369 7065652f 2f6d6f72 6c756d65     ices/eeprom/emul
   26f40:	726f7461 7065652f 2e6d6f72 00000063     ator/eeprom.c...
   26f50:	736c6166 00000065 00676f6c 00776f70     false...log.pow.

00026f60 <bp>:
   26f60:	00000000 3ff00000 00000000 3ff80000     .......?.......?

00026f70 <dp_l>:
	...
   26f78:	43cfd006 3e4cfdeb                       ...C..L>

00026f80 <dp_h>:
	...
   26f88:	40000000 3fe2b803                       ...@...?

00026f90 <TWO52>:
   26f90:	00000000 43300000 00000000 c3300000     ......0C......0.

00026fa0 <_global_impure_ptr>:
   26fa0:	200001a4 00000043 00464e49 00666e69     ... C...INF.inf.
   26fb0:	004e414e 006e616e 00000030 33323130     NAN.nan.0...0123
   26fc0:	37363534 42413938 46454443 00000000     456789ABCDEF....
   26fd0:	33323130 37363534 62613938 66656463     0123456789abcdef
   26fe0:	00000000 2b302d23 00000020 004c6c68     ....#-0+ ...hlL.
   26ff0:	45676665 00004746                       efgEFG..

00026ff8 <_ctype_>:
   26ff8:	20202000 20202020 28282020 20282828     .         ((((( 
   27008:	20202020 20202020 20202020 20202020                     
   27018:	10108820 10101010 10101010 10101010      ...............
   27028:	04040410 04040404 10040404 10101010     ................
   27038:	41411010 41414141 01010101 01010101     ..AAAAAA........
   27048:	01010101 01010101 01010101 10101010     ................
   27058:	42421010 42424242 02020202 02020202     ..BBBBBB........
   27068:	02020202 02020202 02020202 10101010     ................
   27078:	00000020 00000000 00000000 00000000      ...............
	...
   270fc:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

0002710c <__sf_fake_stderr>:
	...

0002712c <__sf_fake_stdout>:
	...

0002714c <__sf_fake_stdin>:
	...
   2716c:	49534f50 00000058 0000002e              POSIX.......

00027178 <p05.5299>:
   27178:	00000005 00000019 0000007d 00000000     ........}.......

00027188 <__mprec_tens>:
   27188:	00000000 3ff00000 00000000 40240000     .......?......$@
   27198:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   271a8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   271b8:	00000000 412e8480 00000000 416312d0     .......A......cA
   271c8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   271d8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   271e8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   271f8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   27208:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   27218:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   27228:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   27238:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   27248:	79d99db4 44ea7843                       ...yCx.D

00027250 <__mprec_tinytens>:
   27250:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   27260:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   27270:	64ac6f43 0ac80628                       Co.d(...

00027278 <__mprec_bigtens>:
   27278:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   27288:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   27298:	7f73bf3c 75154fdd 0001fbbe 0001fb72     <.s..O.u....r...
   272a8:	0001fb9e 0001fafa 0001fb9e 0001fb96     ................
   272b8:	0001fb9e 0001fafa 0001fb72 0001fb72     ........r...r...
   272c8:	0001fb96 0001fafa 0001faf2 0001faf2     ................
   272d8:	0001faf2 0001fba4 0001ff56 0001ff50     ........V...P...
   272e8:	0001ff50 0001ff46 0001fea8 0001fea8     P...F...........
   272f8:	0001ff3e 0001ff46 0001fea8 0001ff3e     >...F.......>...
   27308:	0001fea8 0001ff46 0001fea6 0001fea6     ....F...........
   27318:	0001fea6 0001ffde 00020d44 00020cd8     ........D.......
   27328:	00020d22 00020c06 00020d22 00020d14     ".......".......
   27338:	00020d22 00020c06 00020cd8 00020cd8     "...............
   27348:	00020d14 00020c06 00020bfc 00020bfc     ................
   27358:	00020bfc 00020f68 0002161c 0002180a     ....h...........
   27368:	0002180a 000215fa 000214e2 000214e2     ................
   27378:	000215ea 000215fa 000214e2 000215ea     ................
   27388:	000214e2 000215fa 000214e0 000214e0     ................
   27398:	000214e0 00021812                       ........

000273a0 <_init>:
   273a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   273a2:	46c0      	nop			; (mov r8, r8)
   273a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   273a6:	bc08      	pop	{r3}
   273a8:	469e      	mov	lr, r3
   273aa:	4770      	bx	lr

000273ac <__init_array_start>:
   273ac:	00000121 	.word	0x00000121

000273b0 <_fini>:
   273b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   273b2:	46c0      	nop			; (mov r8, r8)
   273b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   273b6:	bc08      	pop	{r3}
   273b8:	469e      	mov	lr, r3
   273ba:	4770      	bx	lr

000273bc <__fini_array_start>:
   273bc:	000000f5 	.word	0x000000f5
